with GNAT.String_Split;
with Conversions;
with Ada.Strings.Unbounded;
with BHPS_Indexes;
with Ada.Strings.Unbounded.Text_IO;
with Ada.Text_IO;
with Ada.Strings.Fixed;
with Ada.Strings;

package body BHPS.Binary_IO.Conversion_To_Binary is 
         
   use GNAT.String_Split;
   use Conversions;
   use Ada.Strings.Unbounded;
   use BHPS_Indexes.BHPS_Index_Package;
   use BHPS_Indexes.X_BHPS_Index_Package;
   
   package usut renames Ada.Strings.Unbounded.Text_IO;
   

   
   function Convert is new Convert_Index( Sernum_Value );

   --  autogenerated starts here ----------


   procedure Create_Egoalt_Wave_A( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Egoalt_IO.File_Type;
      rec         : Egoalt_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Egoalt_IO.Create (bin_file, Egoalt_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.opno := Convert( slices, 3, (  1 .. 0 => -9 ) );
            rec.rel := Convert_Rel_Type( Get( slices, 4 ));
            rec.sex := Convert_Sex_Type( Get( slices, 5 ));
            rec.osex := Convert_Hgsex_Type( Get( slices, 6 ));
            rec.nwstat := Convert_Nwstat_Type( Get( slices, 7 ));
            rec.pid := Convert( slices, 8 );
            rec.opid := Convert( slices, 9 );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Egoalt_component ).start_pos = 0 ) then
               index.pointers( Egoalt_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Egoalt_component ).counter := index.pointers( Egoalt_component ).counter + 1;
            Put_Index( index_map, index );
            Egoalt_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Egoalt_IO.Close( bin_file );
   end Create_Egoalt_Wave_A;




   procedure Create_Hhresp_Wave_A( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Hhresp_IO.File_Type;
      rec         : Hhresp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Hhresp_IO.Create (bin_file, Hhresp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.hhjnd := Convert_Depchl_Type( Get( slices, 2 ));
            rec.hhab1y := Convert( slices, 3, ( -9, -8, -2, -1 ) );
            rec.hhab2y := Convert( slices, 4 );
            rec.nhhrsp := Convert( slices, 5, ( -9, -8 ) );
            rec.hhdoi := Convert( slices, 6, ( -9, -8, -7 ) );
            rec.hhmoi := Convert_Doim_Type( Get( slices, 7 ));
            rec.hsroom := Convert( slices, 8, ( -9, -8, -7, -2, -1 ) );
            rec.hsbeds := Convert( slices, 9, ( -9, -8, -2 ) );
            rec.hsownd := Convert_Hsownd_Type( Get( slices, 10 ));
            rec.hsowr1 := Convert( slices, 11, ( -9, -8, -7, -2, -1 ) );
            rec.hsowr2 := Convert( slices, 12, ( -9, -8, -7, -2, -1 ) );
            rec.mghave := Convert_Mghave_Type( Get( slices, 13 ));
            rec.mgynot := Convert_Mgynot_Type( Get( slices, 14 ));
            rec.hssnip := Convert_Frnow_Type( Get( slices, 15 ));
            rec.hsvndr := Convert_Hsvndr_Type( Get( slices, 16 ));
            rec.hscost := Convert( slices, 17, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.mgyr0 := Convert( slices, 18, ( -9, -8, -7, -2, -1 ) );
            rec.hsyr0 := Convert( slices, 19, ( -9, -8, -7, -1 ) );
            rec.mgold := Convert( slices, 20, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.mglife := Convert( slices, 21, ( -9, -8, -7, -2, -1 ) );
            rec.mgtype := Convert_Mgtype_Type( Get( slices, 22 ));
            rec.mgxtra := Convert_Bscon_Type( Get( slices, 23 ));
            rec.mgnew := Convert( slices, 24, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.mgxty1 := Convert_Mgxty1_Type( Get( slices, 25 ));
            rec.mgxty2 := Convert_Mgxty2_Type( Get( slices, 26 ));
            rec.mgxty3 := Convert_Mgxty3_Type( Get( slices, 27 ));
            rec.mgxty4 := Convert_Mgxty4_Type( Get( slices, 28 ));
            rec.mgxty5 := Convert_Mgxty5_Type( Get( slices, 29 ));
            rec.xpmg := Convert( slices, 30, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.xpmg1 := Convert_Bscon_Type( Get( slices, 31 ));
            rec.xpmg2 := Convert_Bscon_Type( Get( slices, 32 ));
            rec.xpmg3 := Convert_Bscon_Type( Get( slices, 33 ));
            rec.xpmg4 := Convert_Bscon_Type( Get( slices, 34 ));
            rec.hsval := Convert( slices, 35, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.hsjb := Convert_Bscon_Type( Get( slices, 36 ));
            rec.rentp1 := Convert( slices, 37, ( -9, -8, -7, -2, -1 ) );
            rec.rentp2 := Convert( slices, 38, ( -9, -8, -7, -2, -1 ) );
            rec.rentll := Convert_Rentll_Type( Get( slices, 39 ));
            rec.rentf := Convert_Rentf_Type( Get( slices, 40 ));
            rec.rent := Convert( slices, 41, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.rentw := Convert( slices, 42, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.rent1 := Convert_Rent1_Type( Get( slices, 43 ));
            rec.rent2 := Convert_Rent1_Type( Get( slices, 44 ));
            rec.rent3 := Convert_Bscon_Type( Get( slices, 45 ));
            rec.rent4 := Convert_Bscon_Type( Get( slices, 46 ));
            rec.rent5 := Convert_Bscon_Type( Get( slices, 47 ));
            rec.rent6 := Convert_Bscon_Type( Get( slices, 48 ));
            rec.renthb := Convert_Renthb_Type( Get( slices, 49 ));
            rec.rentg := Convert( slices, 50, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.rentgw := Convert( slices, 51, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.xphsdf := Convert( slices, 52, ( -9, -8, -7, -2, -1 ) );
            rec.xphsd1 := Convert_Bscon_Type( Get( slices, 53 ));
            rec.xphsd2 := Convert_Bscon_Type( Get( slices, 54 ));
            rec.xphsdb := Convert_Bscon_Type( Get( slices, 55 ));
            rec.hsprba := Convert_Hsprba_Type( Get( slices, 56 ));
            rec.hsprbb := Convert_Hsprba_Type( Get( slices, 57 ));
            rec.hsprbc := Convert_Hsprba_Type( Get( slices, 58 ));
            rec.hsprbd := Convert_Hsprba_Type( Get( slices, 59 ));
            rec.hsprbe := Convert_Hsprba_Type( Get( slices, 60 ));
            rec.hsprbf := Convert_Hsprba_Type( Get( slices, 61 ));
            rec.cd1use := Convert_Cd1new_Type( Get( slices, 62 ));
            rec.cd1own := Convert_Cd1own_Type( Get( slices, 63 ));
            rec.cd1new := Convert( slices, 64, ( -9, -8, -7, -2, -1 ) );
            rec.cd2use := Convert_Cd1new_Type( Get( slices, 65 ));
            rec.cd2own := Convert_Cd1own_Type( Get( slices, 66 ));
            rec.cd2new := Convert( slices, 67, ( -9, -8, -7, -2, -1 ) );
            rec.cd3use := Convert_Cd1new_Type( Get( slices, 68 ));
            rec.cd3own := Convert_Cd1own_Type( Get( slices, 69 ));
            rec.cd3new := Convert( slices, 70, ( -9, -8, -7, -2, -1 ) );
            rec.cd4use := Convert_Cd1new_Type( Get( slices, 71 ));
            rec.cd4own := Convert_Cd1own_Type( Get( slices, 72 ));
            rec.cd4new := Convert( slices, 73, ( -9, -8, -7, -2, -1 ) );
            rec.cd5use := Convert_Cd1new_Type( Get( slices, 74 ));
            rec.cd5own := Convert_Cd1own_Type( Get( slices, 75 ));
            rec.cd5new := Convert( slices, 76, ( -9, -8, -7, -2, -1 ) );
            rec.cd6use := Convert_Cd1new_Type( Get( slices, 77 ));
            rec.cd6own := Convert_Cd1own_Type( Get( slices, 78 ));
            rec.cd6new := Convert( slices, 79, ( -9, -8, -7, -2, -1 ) );
            rec.cd7use := Convert_Cd1new_Type( Get( slices, 80 ));
            rec.cd7own := Convert_Cd1own_Type( Get( slices, 81 ));
            rec.cd7new := Convert( slices, 82, ( -9, -8, -7, -2, -1 ) );
            rec.cd8use := Convert_Cd1new_Type( Get( slices, 83 ));
            rec.cd8own := Convert_Cd1own_Type( Get( slices, 84 ));
            rec.cd8new := Convert( slices, 85, ( -9, -8, -7, -2, -1 ) );
            rec.cd9use := Convert_Cd1new_Type( Get( slices, 86 ));
            rec.cd9own := Convert_Cd1own_Type( Get( slices, 87 ));
            rec.cd9new := Convert( slices, 88, ( -9, -8, -7, -2, -1 ) );
            rec.heatch := Convert_Bscon_Type( Get( slices, 89 ));
            rec.heatyp := Convert_Heatyp_Type( Get( slices, 90 ));
            rec.xpoily := Convert( slices, 91, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.gasuse := Convert_Bscon_Type( Get( slices, 92 ));
            rec.gasway := Convert_Gasway_Type( Get( slices, 93 ));
            rec.xpgasl := Convert( slices, 94, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.xpgasw := Convert( slices, 95, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.xpgaslw := Convert( slices, 96, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.lecway := Convert_Gasway_Type( Get( slices, 97 ));
            rec.xplecl := Convert( slices, 98, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.xplecw := Convert( slices, 99, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.xpleclw := Convert( slices, 100, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.xpfood := Convert( slices, 101, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ncars := Convert_Ncars_Type( Get( slices, 102 ));
            rec.ivh1 := Convert( slices, 103, ( -9, -8, -7, -1 ) );
            rec.ivh2 := Convert( slices, 104, ( -9, -8, -7 ) );
            rec.ivh3 := Convert( slices, 105, ( -9, -8, -7 ) );
            rec.ivhc1 := Convert( slices, 106, ( -9, -8 ) );
            rec.ivhc2 := Convert( slices, 107, ( -9, -8 ) );
            rec.ivhc3 := Convert( slices, 108, ( -9, -8 ) );
            rec.hhdc := Convert_Hhdc_Type( Get( slices, 109 ));
            rec.hhwght := Convert( slices, 110 );
            rec.hstype := Convert_Hstype_Type( Get( slices, 111 ));
            rec.hsfloor := Convert_Hsfloor_Type( Get( slices, 112 ));
            rec.hhsize := Convert( slices, 113, ( -9, -8 ) );
            rec.hhtype := Convert_Hhtype_Type( Get( slices, 114 ));
            rec.region := Convert_Region_Type( Get( slices, 115 ));
            rec.nch02 := Convert( slices, 116, ( -9, -8 ) );
            rec.nch34 := Convert( slices, 117, ( -9, -8 ) );
            rec.nch511 := Convert( slices, 118, ( -9, -8 ) );
            rec.nch1215 := Convert( slices, 119, ( -9, -8 ) );
            rec.nch1618 := Convert( slices, 120, ( -9, -8 ) );
            rec.nkids := Convert( slices, 121, ( -9, -8 ) );
            rec.nwed := Convert( slices, 122, ( -9, -8 ) );
            rec.npens := Convert( slices, 123, ( -9, -8 ) );
            rec.na75pl := Convert( slices, 124, ( -9, -8 ) );
            rec.agechy := Convert( slices, 125, ( -9, -8 ) );
            rec.ncouple := Convert( slices, 126, ( -9, -8 ) );
            rec.nonepar := Convert( slices, 127, ( -9, -8 ) );
            rec.nemp := Convert( slices, 128, ( -9, -8 ) );
            rec.nue := Convert( slices, 129, ( -9, -8 ) );
            rec.nwage := Convert( slices, 130, ( -9, -8 ) );
            rec.tenure := Convert_Tenure_Type( Get( slices, 131 ));
            rec.xphsn := Convert( slices, 132, ( -9.0, -8.0, -7.0 ) );
            rec.xphsg := Convert( slices, 133, ( -9.0, -8.0, -7.0 ) );
            rec.xpoil := Convert( slices, 134, ( -9.0, -8.0, -7.0 ) );
            rec.xpgas := Convert( slices, 135, ( -9.0, -8.0, -7.0 ) );
            rec.xplec := Convert( slices, 136, ( -9.0, -8.0, -7.0 ) );
            rec.xpfuel := Convert( slices, 137, ( -9.0, -8.0, -7.0 ) );
            rec.phone := Convert_Hgjnly_Type( Get( slices, 138 ));
            rec.fieqfcb := Convert( slices, 139, ( -9.0, -8.0 ) );
            rec.fieqfca := Convert( slices, 140, ( -9.0, -8.0 ) );
            rec.fihhyr := Convert( slices, 141, ( -9.0, -8.0, -7.0 ) );
            rec.fihhmn := Convert( slices, 142, ( -9.0, -8.0, -7.0 ) );
            rec.fihhml := Convert( slices, 143, (  1 .. 0 => -9.0 ) );
            rec.fihhmnl := Convert( slices, 144, (  1 .. 0 => -9.0 ) );
            rec.fihhmp := Convert( slices, 145, (  1 .. 0 => -9.0 ) );
            rec.fihhmb := Convert( slices, 146, (  1 .. 0 => -9.0 ) );
            rec.fihhmt := Convert( slices, 147, (  1 .. 0 => -9.0 ) );
            rec.fihhmi := Convert( slices, 148, (  1 .. 0 => -9.0 ) );
            rec.fihhyl := Convert( slices, 149, ( -9.0, -8.0, -7.0 ) );
            rec.fihhynl := Convert( slices, 150, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyp := Convert( slices, 151, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyb := Convert( slices, 152, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyt := Convert( slices, 153, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyi := Convert( slices, 154, ( -9.0, -8.0, -7.0 ) );
            rec.mgnewi := Convert( slices, 155, ( -9, -8, -7, -2, -1 ) );
            rec.xpmgi := Convert( slices, 156, ( -9, -8, -7, -2, -1 ) );
            rec.hsvali := Convert( slices, 157, ( -9, -8, -7, -2, -1 ) );
            rec.renti := Convert( slices, 158, ( -9, -8, -7, -4, -3, -2, -1 ) );
            rec.rentgi := Convert( slices, 159, ( -9, -8, -7, -2, -1 ) );
            rec.xphsni := Convert_Jhgpayi_Type( Get( slices, 160 ));
            rec.xphsgi := Convert_Jhgpayi_Type( Get( slices, 161 ));
            rec.fihhmni := Convert_Fihhmni_Type( Get( slices, 162 ));
            rec.fihhmli := Convert_Fihhmbi_Type( Get( slices, 163 ));
            rec.fihmnli := Convert_Fihhmbi_Type( Get( slices, 164 ));
            rec.fihhmpi := Convert_Fihhmbi_Type( Get( slices, 165 ));
            rec.fihhmbi := Convert_Fihhmbi_Type( Get( slices, 166 ));
            rec.fihhmti := Convert_Fihhmbi_Type( Get( slices, 167 ));
            rec.fihhmii := Convert_Fihhmbi_Type( Get( slices, 168 ));
            rec.fihhyri := Convert_Fihhmbi_Type( Get( slices, 169 ));
            rec.fihhyli := Convert_Fihhmbi_Type( Get( slices, 170 ));
            rec.fihhyni := Convert_Fihhmbi_Type( Get( slices, 171 ));
            rec.fihhypi := Convert_Fihhmbi_Type( Get( slices, 172 ));
            rec.fihhybi := Convert_Fihhmbi_Type( Get( slices, 173 ));
            rec.fihhyti := Convert_Fihhmbi_Type( Get( slices, 174 ));
            rec.fihhyii := Convert_Fihhmbi_Type( Get( slices, 175 ));
            rec.mgyr04 := Convert( slices, 176, ( -9, -8, -7, -2, -1 ) );
            rec.hsyr04 := Convert( slices, 177, ( -9, -8, -7, -2, -1 ) );
            rec.region2 := Convert_Region2_Type( Get( slices, 178 ));
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Hhresp_component ).start_pos = 0 ) then
               index.pointers( Hhresp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Hhresp_component ).counter := index.pointers( Hhresp_component ).counter + 1;
            Put_Index( index_map, index );
            Hhresp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Hhresp_IO.Close( bin_file );
   end Create_Hhresp_Wave_A;




   procedure Create_Hhsamp_Wave_A( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Hhsamp_IO.File_Type;
      rec         : Hhsamp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Hhsamp_IO.Create (bin_file, Hhsamp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.hhac := Convert( slices, 2, ( -9, -8 ) );
            rec.hhan := Convert( slices, 3, ( -9, -8 ) );
            rec.hhno := Convert( slices, 4, ( -9, -8 ) );
            rec.fid := Convert( slices, 5 );
--             rec.ivid := Convert( slices, 6 );
--             rec.ivnc := Convert( slices, 7, ( -9, -8 ) );
            rec.nhh := Convert( slices, 8, ( -9, -8 ) );
            rec.hstype := Convert_Hstype_Type( Get( slices, 9 ));
            rec.hsfloor := Convert_Hsfloor_Type( Get( slices, 10 ));
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 11 ));
            rec.ivhsize := Convert( slices, 12, ( -9, -8, -1 ) );
            rec.ivnadlt := Convert( slices, 13, ( -9, -8, -1 ) );
            rec.ivrage := Convert( slices, 14, ( -9, -8 ) );
            rec.ivrsex := Convert_Hgsex_Type( Get( slices, 15 ));
            rec.hhwght := Convert( slices, 16 );
            rec.region := Convert_Region_Type( Get( slices, 17 ));
            rec.strata := Convert( slices, 18, ( -9, -8, -1 ) );
            rec.psu := Convert( slices, 19, ( -9, -8, -1 ) );
            rec.region2 := Convert_Region2_Type( Get( slices, 20 ));
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Hhsamp_component ).start_pos = 0 ) then
               index.pointers( Hhsamp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Hhsamp_component ).counter := index.pointers( Hhsamp_component ).counter + 1;
            Put_Index( index_map, index );
            Hhsamp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Hhsamp_IO.Close( bin_file );
   end Create_Hhsamp_Wave_A;




   procedure Create_Income_Wave_A( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Income_IO.File_Type;
      rec         : Income_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Income_IO.Create (bin_file, Income_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.ficode := Convert_Ficode_Type( Get( slices, 3 ));
            rec.nfr := Convert( slices, 4, (  1 .. 0 => -9 ) );
            rec.frall := Convert_Frall_Type( Get( slices, 5 ));
            rec.fr01 := Convert_Cd1own_Type( Get( slices, 6 ));
            rec.fr02 := Convert_Cd1own_Type( Get( slices, 7 ));
            rec.fr03 := Convert_Cd1own_Type( Get( slices, 8 ));
            rec.fr04 := Convert( slices, 9, ( -9, -8, -2, -1 ) );
            rec.fr05 := Convert_Cd1own_Type( Get( slices, 10 ));
            rec.fr06 := Convert_Cd1own_Type( Get( slices, 11 ));
            rec.fr07 := Convert_Cd1own_Type( Get( slices, 12 ));
            rec.fr08 := Convert_Cd1own_Type( Get( slices, 13 ));
            rec.fr09 := Convert_Cd1own_Type( Get( slices, 14 ));
            rec.fr10 := Convert_Cd1own_Type( Get( slices, 15 ));
            rec.fr11 := Convert_Cd1own_Type( Get( slices, 16 ));
            rec.fr12 := Convert_Cd1own_Type( Get( slices, 17 ));
            rec.fr13 := Convert_Cd1own_Type( Get( slices, 18 ));
            rec.fr14 := Convert_Cd1own_Type( Get( slices, 19 ));
            rec.fr15 := Convert_Cd1own_Type( Get( slices, 20 ));
            rec.fr16 := Convert_Cd1own_Type( Get( slices, 21 ));
            rec.frnow := Convert_Frnow_Type( Get( slices, 22 ));
            rec.frval := Convert( slices, 23, ( -9.0, -8.0, -3.0, -2.0, -1.0 ) );
            rec.frw := Convert( slices, 24, ( -9.0, -8.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.frjt := Convert_Frjt_Type( Get( slices, 25 ));
            rec.frjtpn := Convert( slices, 26, ( -9, -8, -2, -1 ) );
            rec.fiseq := Convert( slices, 27 );
            rec.fim09l := Convert( slices, 28, ( -9.0, -8.0, -3.0 ) );
            rec.fim10l := Convert( slices, 29, ( -9.0, -8.0, -3.0 ) );
            rec.fim11l := Convert( slices, 30, ( -9.0, -8.0, -3.0 ) );
            rec.fim12l := Convert( slices, 31, ( -9.0, -8.0, -3.0 ) );
            rec.fim01t := Convert( slices, 32, ( -9.0, -8.0, -3.0 ) );
            rec.fim02t := Convert( slices, 33, ( -9.0, -8.0, -3.0 ) );
            rec.fim03t := Convert( slices, 34, ( -9.0, -8.0, -3.0 ) );
            rec.fim04t := Convert( slices, 35, ( -9.0, -8.0, -3.0 ) );
            rec.fim05t := Convert( slices, 36, ( -9.0, -8.0, -3.0 ) );
            rec.fim06t := Convert( slices, 37, ( -9.0, -8.0, -3.0 ) );
            rec.fim07t := Convert( slices, 38, ( -9.0, -8.0, -3.0 ) );
            rec.fim08t := Convert( slices, 39, ( -9.0, -8.0, -3.0 ) );
            rec.fim09t := Convert( slices, 40, ( -9.0, -8.0, -3.0 ) );
            rec.fim10t := Convert( slices, 41, ( -9.0, -8.0, -3.0 ) );
            rec.fim11t := Convert( slices, 42, ( -9.0, -8.0, -3.0 ) );
            rec.fim12t := Convert( slices, 43, ( -9.0, -8.0, -3.0 ) );
            rec.frvali := Convert( slices, 44, ( -9, -8, -3, -2, -1 ) );
            rec.pid := Convert( slices, 45 );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Income_component ).start_pos = 0 ) then
               index.pointers( Income_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Income_component ).counter := index.pointers( Income_component ).counter + 1;
            Put_Index( index_map, index );
            Income_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Income_IO.Close( bin_file );
   end Create_Income_Wave_A;




   procedure Create_Indall_Wave_A( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Indall_IO.File_Type;
      rec         : Indall_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Indall_IO.Create (bin_file, Indall_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.hgr2r := Convert_Hgr2r_Type( Get( slices, 3 ));
            rec.hgsex := Convert_Hgsex_Type( Get( slices, 4 ));
            rec.hgbm := Convert_Hgbm_Type( Get( slices, 5 ));
            rec.hgby := Convert( slices, 6, ( -9, -8, -2, -1 ) );
            rec.mastat := Convert_Mastat_Type( Get( slices, 7 ));
            rec.hgspn := Convert( slices, 8, ( -9, -8, -2, -1 ) );
            rec.hgest := Convert_Hgest_Type( Get( slices, 9 ));
            rec.hgfno := Convert( slices, 10, ( -9, -8, -2, -1 ) );
            rec.hgmno := Convert( slices, 11, ( -9, -8, -2, -1 ) );
            rec.hgra := Convert( slices, 12, ( -9, -8, -2, -1 ) );
            rec.hgcia := Convert_Hgcia_Type( Get( slices, 13 ));
            rec.hgrab := Convert_Hgrab_Type( Get( slices, 14 ));
            rec.ivfio := Convert_Ivfio_Type( Get( slices, 15 ));
            rec.iodc := Convert_Iodc_Type( Get( slices, 16 ));
            rec.pid := Convert( slices, 17 );
            rec.age := Convert( slices, 18, ( -9, -8, -2, -1 ) );
            rec.age12 := Convert( slices, 19, ( -9, -8, -2, -1 ) );
            rec.hgjnly := Convert_Hgjnly_Type( Get( slices, 20 ));
            rec.hgmjn := Convert_Hgbm_Type( Get( slices, 21 ));
            rec.hgyjn := Convert( slices, 22, ( -9, -8 ) );
            rec.butype := Convert_Butype_Type( Get( slices, 23 ));
            rec.buno := Convert( slices, 24, ( -9, -8 ) );
            rec.nchild := Convert( slices, 25, ( -9, -8 ) );
            rec.depchl := Convert_Depchl_Type( Get( slices, 26 ));
            rec.hoh := Convert_Hoh_Type( Get( slices, 27 ));
            rec.rach16 := Convert_Hhch12_Type( Get( slices, 28 ));
            rec.agei := Convert_Agei_Type( Get( slices, 29 ));
            rec.xewght := Convert( slices, 30, ( -9.0, -8.0 ) );
            rec.sppid := Convert( slices, 31 );
            rec.fpid := Convert( slices, 32 );
            rec.mpid := Convert( slices, 33 );
            rec.rapid := Convert( slices, 34 );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Indall_component ).start_pos = 0 ) then
               index.pointers( Indall_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Indall_component ).counter := index.pointers( Indall_component ).counter + 1;
            Put_Index( index_map, index );
            Indall_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Indall_IO.Close( bin_file );
   end Create_Indall_Wave_A;




   procedure Create_Indresp_Wave_A( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Indresp_IO.File_Type;
      rec         : Indresp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Indresp_IO.Create (bin_file, Indresp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.doid := Convert( slices, 3, ( -9, -7 ) );
            rec.doim := Convert_Doim_Type( Get( slices, 4 ));
            rec.ivsoih := Convert( slices, 5, ( -9, -8 ) );
            rec.ivsoim := Convert( slices, 6, ( -9, -8 ) );
            rec.lknbrd := Convert_Aidpl1_Type( Get( slices, 7 ));
            rec.lkmove := Convert_Lkmove_Type( Get( slices, 8 ));
            rec.lkmovy := Convert_Lkmovy_Type( Get( slices, 9 ));
            rec.plever := Convert_Plever_Type( Get( slices, 10 ));
            rec.plnowm := Convert_Jbbgm1_Type( Get( slices, 11 ));
            rec.plnowy := Convert( slices, 12, ( -9, -8, -2, -1 ) );
            rec.plb4d := Convert_Plb4d_Type( Get( slices, 13 ));
            rec.plb4c := Convert_Plb4c_Type( Get( slices, 14 ));
            rec.plbornd := Convert_Plbornd_Type( Get( slices, 15 ));
            rec.plbornc := Convert_Plbornc_Type( Get( slices, 16 ));
            rec.yr2uk := Convert( slices, 17, ( -9, -8, -7, -2, -1 ) );
            rec.dobm := Convert_Cjsem_Type( Get( slices, 18 ));
            rec.doby := Convert( slices, 19, ( -9, -8, -7, -2, -1 ) );
            rec.sex := Convert_Sex_Type( Get( slices, 20 ));
            rec.paju := Convert_Paju_Type( Get( slices, 21 ));
            rec.pasoc := Convert( slices, 22, ( -9, -8, -7, -2, -1 ) );
            rec.pasemp := Convert_J2semp_Type( Get( slices, 23 ));
            rec.paboss := Convert_Maboss_Type( Get( slices, 24 ));
            rec.pamngr := Convert_Mamngr_Type( Get( slices, 25 ));
            rec.maju := Convert_Maju_Type( Get( slices, 26 ));
            rec.masoc := Convert( slices, 27, ( -9, -8, -7, -2, -1 ) );
            rec.masemp := Convert_J2semp_Type( Get( slices, 28 ));
            rec.maboss := Convert_Maboss_Type( Get( slices, 29 ));
            rec.mamngr := Convert_Mamngr_Type( Get( slices, 30 ));
            rec.mlstat := Convert_Mlstat_Type( Get( slices, 31 ));
            rec.school := Convert_School_Type( Get( slices, 32 ));
            rec.scend := Convert( slices, 33, ( -9, -8, -7, -2, -1 ) );
            rec.sctype := Convert_Sctype_Type( Get( slices, 34 ));
            rec.scnow := Convert_Cjsck2_Type( Get( slices, 35 ));
            rec.fetype := Convert_Fetype_Type( Get( slices, 36 ));
            rec.fenow := Convert_Fenow_Type( Get( slices, 37 ));
            rec.feend := Convert( slices, 38, ( -9, -8, -7, -2, -1 ) );
            rec.qfhas := Convert_Bscon_Type( Get( slices, 39 ));
            rec.qfa := Convert_Qfa_Type( Get( slices, 40 ));
            rec.qfb := Convert_Qfb_Type( Get( slices, 41 ));
            rec.qfc := Convert_Qfc_Type( Get( slices, 42 ));
            rec.qfd := Convert_Qfd_Type( Get( slices, 43 ));
            rec.qfe := Convert_Qfe_Type( Get( slices, 44 ));
            rec.qff := Convert_Qff_Type( Get( slices, 45 ));
            rec.qfg := Convert_Qfg_Type( Get( slices, 46 ));
            rec.qfh := Convert_Qfh_Type( Get( slices, 47 ));
            rec.qfi := Convert_Qfi_Type( Get( slices, 48 ));
            rec.qfj := Convert_Qfj_Type( Get( slices, 49 ));
            rec.qfk := Convert_Qfk_Type( Get( slices, 50 ));
            rec.qfl := Convert_Qfl_Type( Get( slices, 51 ));
            rec.qfm := Convert_Qfm_Type( Get( slices, 52 ));
            rec.qfn := Convert_Qfn_Type( Get( slices, 53 ));
            rec.qfed := Convert_Bscon_Type( Get( slices, 54 ));
            rec.qfedb := Convert_Qfedb_Type( Get( slices, 55 ));
            rec.nqfedb := Convert( slices, 56, ( -9, -8, -7, -2, -1 ) );
            rec.qfedc := Convert_Qfedc_Type( Get( slices, 57 ));
            rec.nqfedc := Convert( slices, 58, ( -9, -8, -7, -2, -1 ) );
            rec.qfedd := Convert_Qfedd_Type( Get( slices, 59 ));
            rec.nqfedd := Convert( slices, 60, ( -9, -8, -7, -2, -1 ) );
            rec.qfede := Convert_Qfede_Type( Get( slices, 61 ));
            rec.nqfede := Convert( slices, 62, ( -9, -8, -7, -2, -1 ) );
            rec.qfedf := Convert_Qfedf_Type( Get( slices, 63 ));
            rec.nqfedf := Convert( slices, 64, ( -9, -8, -7, -2, -1 ) );
            rec.qfedg := Convert_Qfedg_Type( Get( slices, 65 ));
            rec.nqfedg := Convert( slices, 66, ( -9, -8, -7, -2, -1 ) );
            rec.qfedh := Convert_Qfedh_Type( Get( slices, 67 ));
            rec.nqfedh := Convert( slices, 68, ( -9, -8, -7, -2, -1 ) );
            rec.qfedi := Convert_Qfedi_Type( Get( slices, 69 ));
            rec.nqfedi := Convert( slices, 70, ( -9, -8, -7, -2, -1 ) );
            rec.qfedj := Convert_Qfedj_Type( Get( slices, 71 ));
            rec.nqfedj := Convert( slices, 72, ( -9, -8, -7, -2, -1 ) );
            rec.qfeda := Convert_Qfeda_Type( Get( slices, 73 ));
            rec.nqfeda := Convert( slices, 74, ( -9, -8, -7, -2, -1 ) );
            rec.qfedk := Convert_Qfedk_Type( Get( slices, 75 ));
            rec.nqfedk := Convert( slices, 76, ( -9, -8, -7, -2, -1 ) );
            rec.qfedl := Convert_Qfedl_Type( Get( slices, 77 ));
            rec.nqfedl := Convert( slices, 78, ( -9, -8, -7, -2, -1 ) );
            rec.qfedm := Convert_Qfedm_Type( Get( slices, 79 ));
            rec.nqfedm := Convert( slices, 80, ( -9, -8, -7, -2, -1 ) );
            rec.qfedn := Convert_Qfedn_Type( Get( slices, 81 ));
            rec.nqfedn := Convert( slices, 82, ( -9, -8, -7, -2, -1 ) );
            rec.qfedo := Convert_Qfedo_Type( Get( slices, 83 ));
            rec.nqfedo := Convert( slices, 84, ( -9, -8, -7, -2, -1 ) );
            rec.qfedp := Convert( slices, 85, ( -9, -8, -7 ) );
            rec.nqfedp := Convert( slices, 86, ( -9, -8, -7, -2, -1 ) );
            rec.qfedq := Convert_Qfedq_Type( Get( slices, 87 ));
            rec.nqfedq := Convert( slices, 88, ( -9, -8, -7, -2, -1 ) );
            rec.qfedr := Convert_Qfedr_Type( Get( slices, 89 ));
            rec.nqfedr := Convert( slices, 90, ( -9, -8, -7, -2, -1 ) );
            rec.qfeds := Convert_Hlprbm_Type( Get( slices, 91 ));
            rec.nqfeds := Convert( slices, 92, ( -9, -8, -7, -2, -1 ) );
            rec.eaage := Convert_Eaage_Type( Get( slices, 93 ));
            rec.ednew := Convert_Aidpl1_Type( Get( slices, 94 ));
            rec.ednew1 := Convert_Aidpl1_Type( Get( slices, 95 ));
            rec.ednew2 := Convert_Aidpl1_Type( Get( slices, 96 ));
            rec.ednew3 := Convert_Aidpl1_Type( Get( slices, 97 ));
            rec.ednew4 := Convert_Aidpl1_Type( Get( slices, 98 ));
            rec.ednewd := Convert( slices, 99, ( -9, -8, -7, -2, -1 ) );
            rec.paperr := Convert_Aidpl1_Type( Get( slices, 100 ));
            rec.paper1 := Convert_Paper1_Type( Get( slices, 101 ));
            rec.paper2 := Convert_Paper2_Type( Get( slices, 102 ));
            rec.paperm := Convert_Paperm_Type( Get( slices, 103 ));
            rec.paperp := Convert_Paperp_Type( Get( slices, 104 ));
            rec.ivda := Convert_Ivda_Type( Get( slices, 105 ));
            rec.ivdb := Convert_Ivdb_Type( Get( slices, 106 ));
            rec.ivdc := Convert_Ivdc_Type( Get( slices, 107 ));
            rec.ivdd := Convert_Ivdd_Type( Get( slices, 108 ));
            rec.hlstat := Convert_Hlstat_Type( Get( slices, 109 ));
            rec.hlzest := Convert_Hlzest_Type( Get( slices, 110 ));
            rec.hldsbl := Convert_Bscon_Type( Get( slices, 111 ));
            rec.hlprb := Convert( slices, 112, ( -9, -8, -7, -2, -1 ) );
            rec.hlprb1 := Convert_Hlprb1_Type( Get( slices, 113 ));
            rec.hlprb2 := Convert_Hlprb2_Type( Get( slices, 114 ));
            rec.hlprb3 := Convert_Hlprb2_Type( Get( slices, 115 ));
            rec.hlprb4 := Convert_Hlprb2_Type( Get( slices, 116 ));
            rec.hllt := Convert_Bscon_Type( Get( slices, 117 ));
            rec.hllta := Convert_Hllta_Type( Get( slices, 118 ));
            rec.hlltb := Convert_Hlltb_Type( Get( slices, 119 ));
            rec.hlltc := Convert_Hlltc_Type( Get( slices, 120 ));
            rec.hlltd := Convert_Hlltd_Type( Get( slices, 121 ));
            rec.hllte := Convert_Hllte_Type( Get( slices, 122 ));
            rec.hlltw := Convert_Bscon_Type( Get( slices, 123 ));
            rec.hlendw := Convert_Hlendw_Type( Get( slices, 124 ));
            rec.hlltwa := Convert_Hlltwa_Type( Get( slices, 125 ));
            rec.hl2gp := Convert_Hl2gp_Type( Get( slices, 126 ));
            rec.xdts := Convert_Bscon_Type( Get( slices, 127 ));
            rec.nxdts := Convert_Nxdts_Type( Get( slices, 128 ));
            rec.xdt1m := Convert_Xdt1m_Type( Get( slices, 129 ));
            rec.xdt1y := Convert( slices, 130, ( -9, -8, -7, -2, -1 ) );
            rec.xdt2m := Convert_Xdt2m_Type( Get( slices, 131 ));
            rec.xdt2y := Convert( slices, 132, ( -9, -8, -7, -2, -1 ) );
            rec.xdt3m := Convert_Xdt2m_Type( Get( slices, 133 ));
            rec.xdt3y := Convert( slices, 134, ( -9, -8, -7, -2, -1 ) );
            rec.xdt1pl := Convert_Xdt1pl_Type( Get( slices, 135 ));
            rec.xdt2pl := Convert_Xdt1pl_Type( Get( slices, 136 ));
            rec.xdt3pl := Convert_Xdt1pl_Type( Get( slices, 137 ));
            rec.hosp := Convert_Hlsv_Type( Get( slices, 138 ));
            rec.hospd := Convert( slices, 139, ( -9, -8, -7, -2, -1 ) );
            rec.hospch := Convert_Hospch_Type( Get( slices, 140 ));
            rec.hospnhs := Convert_Hospnhs_Type( Get( slices, 141 ));
            rec.hlsv := Convert_Hlsv_Type( Get( slices, 142 ));
            rec.hlsva := Convert_Hlsva_Type( Get( slices, 143 ));
            rec.hlsvan := Convert_Hlsvan_Type( Get( slices, 144 ));
            rec.hlsvaf := Convert_Hlsvaf_Type( Get( slices, 145 ));
            rec.hlsvb := Convert_Hlsvb_Type( Get( slices, 146 ));
            rec.hlsvbn := Convert_Hlsvan_Type( Get( slices, 147 ));
            rec.hlsvbf := Convert_Hlsvaf_Type( Get( slices, 148 ));
            rec.hlsvc := Convert_Hlsvc_Type( Get( slices, 149 ));
            rec.hlsvcn := Convert_Hlsvan_Type( Get( slices, 150 ));
            rec.hlsvcf := Convert_Hlsvaf_Type( Get( slices, 151 ));
            rec.hlsvd := Convert_Hlsvd_Type( Get( slices, 152 ));
            rec.hlsvdn := Convert_Hlsvan_Type( Get( slices, 153 ));
            rec.hlsvdf := Convert_Hlsvaf_Type( Get( slices, 154 ));
            rec.hlsve := Convert_Hlsve_Type( Get( slices, 155 ));
            rec.hlsven := Convert_Hlsvan_Type( Get( slices, 156 ));
            rec.hlsvef := Convert_Hlsvaf_Type( Get( slices, 157 ));
            rec.hlsvf := Convert_Hlsvf_Type( Get( slices, 158 ));
            rec.hlsvfn := Convert_Hlsvan_Type( Get( slices, 159 ));
            rec.hlsvff := Convert_Hlsvaf_Type( Get( slices, 160 ));
            rec.hlsvg := Convert_Hlsvg_Type( Get( slices, 161 ));
            rec.hlsvgn := Convert_Hlsvan_Type( Get( slices, 162 ));
            rec.hlsvgf := Convert_Hlsvaf_Type( Get( slices, 163 ));
            rec.hlsvh := Convert_Hlsvh_Type( Get( slices, 164 ));
            rec.hlsvhn := Convert_Hlsvan_Type( Get( slices, 165 ));
            rec.hlsvhf := Convert_Hlsvaf_Type( Get( slices, 166 ));
            rec.hlsvi := Convert_Hlsvi_Type( Get( slices, 167 ));
            rec.hlsvin := Convert_Hlsvan_Type( Get( slices, 168 ));
            rec.hlsvif := Convert_Hlsvaf_Type( Get( slices, 169 ));
            rec.hlsvj := Convert_Hlsvj_Type( Get( slices, 170 ));
            rec.hlsvjn := Convert_Hlsvan_Type( Get( slices, 171 ));
            rec.hlsvjf := Convert_Hlsvaf_Type( Get( slices, 172 ));
            rec.hlsvk := Convert_Hlsvk_Type( Get( slices, 173 ));
            rec.hlsvkn := Convert_Hlsvan_Type( Get( slices, 174 ));
            rec.hlsvkf := Convert_Hlsvaf_Type( Get( slices, 175 ));
            rec.hlcka := Convert_Hlcka_Type( Get( slices, 176 ));
            rec.hlckan := Convert_Hlckan_Type( Get( slices, 177 ));
            rec.hlckb := Convert_Hlcka_Type( Get( slices, 178 ));
            rec.hlckbn := Convert_Hlckan_Type( Get( slices, 179 ));
            rec.hlckc := Convert_Hlcka_Type( Get( slices, 180 ));
            rec.hlckcn := Convert_Hlckan_Type( Get( slices, 181 ));
            rec.hlckd := Convert_Hlcka_Type( Get( slices, 182 ));
            rec.hlckdn := Convert_Hlckan_Type( Get( slices, 183 ));
            rec.hlcke := Convert_Hlcka_Type( Get( slices, 184 ));
            rec.hlcken := Convert_Hlckan_Type( Get( slices, 185 ));
            rec.hlckf := Convert_Hlcka_Type( Get( slices, 186 ));
            rec.hlckfn := Convert_Hlckan_Type( Get( slices, 187 ));
            rec.hlckg := Convert_Hlcka_Type( Get( slices, 188 ));
            rec.hlckgn := Convert_Hlckan_Type( Get( slices, 189 ));
            rec.hlckh := Convert_Hlcka_Type( Get( slices, 190 ));
            rec.hlckhn := Convert_Hlckan_Type( Get( slices, 191 ));
            rec.smoker := Convert_Bscon_Type( Get( slices, 192 ));
            rec.ncigs := Convert( slices, 193, ( -9, -8, -7, -2, -1 ) );
            rec.ophla := Convert_Ophla_Type( Get( slices, 194 ));
            rec.ophlb := Convert_Ophlb_Type( Get( slices, 195 ));
            rec.ophlc := Convert_Ophlb_Type( Get( slices, 196 ));
            rec.rach16 := Convert_Hhch12_Type( Get( slices, 197 ));
            rec.hlch := Convert_Hlch_Type( Get( slices, 198 ));
            rec.hlch1 := Convert( slices, 199, ( -9, -8, -7 ) );
            rec.hlch2 := Convert( slices, 200, ( -9, -8, -7 ) );
            rec.hlch3 := Convert( slices, 201, ( -9, -8, -7 ) );
            rec.hlch4 := Convert( slices, 202, ( -9, -8, -7 ) );
            rec.aidhh := Convert_Aidhh_Type( Get( slices, 203 ));
            rec.aidhua := Convert( slices, 204, ( -9, -8, -7, -1 ) );
            rec.aidhub := Convert( slices, 205, ( -9, -8, -7 ) );
            rec.aidhuc := Convert( slices, 206, ( -9, -8, -7 ) );
            rec.aidxhh := Convert_Aidxhh_Type( Get( slices, 207 ));
            rec.naidxhh := Convert_Naidxhh_Type( Get( slices, 208 ));
            rec.aidhu1 := Convert_Aidhu1_Type( Get( slices, 209 ));
            rec.aidhu2 := Convert_Aidhu2_Type( Get( slices, 210 ));
            rec.aidpl1 := Convert_Aidpl1_Type( Get( slices, 211 ));
            rec.aidpl2 := Convert_Aidpl1_Type( Get( slices, 212 ));
            rec.aidhrs := Convert_Aidhrs_Type( Get( slices, 213 ));
            rec.ivma := Convert_Ivda_Type( Get( slices, 214 ));
            rec.ivmb := Convert_Ivdb_Type( Get( slices, 215 ));
            rec.ivmc := Convert_Ivec_Type( Get( slices, 216 ));
            rec.ivmd := Convert_Ivdd_Type( Get( slices, 217 ));
            rec.jbhas := Convert_Frnow_Type( Get( slices, 218 ));
            rec.jboff := Convert_Jboff_Type( Get( slices, 219 ));
            rec.jboffy := Convert_Jboffy_Type( Get( slices, 220 ));
            rec.jbterm := Convert_Jbterm_Type( Get( slices, 221 ));
            rec.jbsoc := Convert( slices, 222, ( -9, -8, -2, -1 ) );
            rec.jbsic := Convert( slices, 223, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.jbsemp := Convert_Jbsemp_Type( Get( slices, 224 ));
            rec.jbmngr := Convert_Jbmngr_Type( Get( slices, 225 ));
            rec.jbsect := Convert_Jbsect_Type( Get( slices, 226 ));
            rec.jbsize := Convert_Jbsize_Type( Get( slices, 227 ));
            rec.jbmix := Convert_Jbmix_Type( Get( slices, 228 ));
            rec.jbhrs := Convert( slices, 229, ( -9, -8, -7, -2, -1 ) );
            rec.jbot := Convert( slices, 230, ( -9, -8, -7, -2, -1 ) );
            rec.jbotpd := Convert( slices, 231, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbhrlk := Convert_Jbhrlk_Type( Get( slices, 232 ));
            rec.jbtime := Convert_Jbtime_Type( Get( slices, 233 ));
            rec.jbonus := Convert_Aidpl1_Type( Get( slices, 234 ));
            rec.jbrise := Convert_Aidpl1_Type( Get( slices, 235 ));
            rec.tujbpl := Convert_Aidpl1_Type( Get( slices, 236 ));
            rec.tuin1 := Convert_Aidpl1_Type( Get( slices, 237 ));
            rec.tuin2 := Convert_Aidpl1_Type( Get( slices, 238 ));
            rec.jbopps := Convert_Aidpl1_Type( Get( slices, 239 ));
            rec.jbed := Convert_Aidpl1_Type( Get( slices, 240 ));
            rec.jbed1 := Convert_Aidpl1_Type( Get( slices, 241 ));
            rec.jbed2 := Convert_Aidpl1_Type( Get( slices, 242 ));
            rec.jbed3 := Convert_Aidpl1_Type( Get( slices, 243 ));
            rec.jbed4 := Convert_Aidpl1_Type( Get( slices, 244 ));
            rec.jbed5 := Convert_Aidpl1_Type( Get( slices, 245 ));
            rec.jbedd := Convert( slices, 246, ( -9, -8, -7, -2, -1 ) );
            rec.jbpen := Convert_Aidpl1_Type( Get( slices, 247 ));
            rec.jbpenm := Convert_Aidpl1_Type( Get( slices, 248 ));
            rec.jbpl := Convert_Jbpl_Type( Get( slices, 249 ));
            rec.jbttwt := Convert( slices, 250, ( -9, -8, -7, -3, -2, -1 ) );
            rec.jbttwm := Convert_Jbttwm_Type( Get( slices, 251 ));
            rec.jbsat1 := Convert_Jbsat1_Type( Get( slices, 252 ));
            rec.jbsat2 := Convert( slices, 253, ( -9, -8, -7, -2, -1 ) );
            rec.jbsat3 := Convert_Jbsat_Type( Get( slices, 254 ));
            rec.jbsat4 := Convert_Jbsat4_Type( Get( slices, 255 ));
            rec.jbsat5 := Convert_Jbsat4_Type( Get( slices, 256 ));
            rec.jbsat6 := Convert_Jbsat4_Type( Get( slices, 257 ));
            rec.jbsat7 := Convert_Jbsat_Type( Get( slices, 258 ));
            rec.jbsat := Convert_Jbsat_Type( Get( slices, 259 ));
            rec.paygl := Convert( slices, 260, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.paygw := Convert( slices, 261, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.paynl := Convert( slices, 262, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.paynw := Convert( slices, 263, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.payslp := Convert_Payslp_Type( Get( slices, 264 ));
            rec.payusl := Convert_Aidpl1_Type( Get( slices, 265 ));
            rec.payu := Convert( slices, 266, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.payuw := Convert( slices, 267, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.payug := Convert_Paylyg_Type( Get( slices, 268 ));
            rec.paydf1 := Convert_Paydf1_Type( Get( slices, 269 ));
            rec.paydf2 := Convert_Paydf2_Type( Get( slices, 270 ));
            rec.paydf3 := Convert_Paydf3_Type( Get( slices, 271 ));
            rec.paydf4 := Convert_Paydf4_Type( Get( slices, 272 ));
            rec.paydf5 := Convert_Paydf5_Type( Get( slices, 273 ));
            rec.paydf6 := Convert_Paydf6_Type( Get( slices, 274 ));
            rec.paydf7 := Convert_Paydf7_Type( Get( slices, 275 ));
            rec.paydf8 := Convert_Paydf8_Type( Get( slices, 276 ));
            rec.jbbgd := Convert( slices, 277, ( -9, -8, -7, -2, -1 ) );
            rec.jbbgm := Convert_Cjsbgm_Type( Get( slices, 278 ));
            rec.jbbgy := Convert( slices, 279, ( -9, -8, -7, -2, -1 ) );
            rec.jbbgly := Convert_Jbbgly_Type( Get( slices, 280 ));
            rec.payly := Convert( slices, 281, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.paylyw := Convert( slices, 282, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.paylyg := Convert_Paylyg_Type( Get( slices, 283 ));
            rec.jbhrly := Convert( slices, 284, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbotly := Convert( slices, 285, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.pays := Convert( slices, 286, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.paysw := Convert( slices, 287, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.paysg := Convert_Paylyg_Type( Get( slices, 288 ));
            rec.jbhrbg := Convert( slices, 289, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbotbg := Convert( slices, 290, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.paygyr := Convert( slices, 291, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.paygya := Convert_Paygya_Type( Get( slices, 292 ));
            rec.jsboss := Convert_Jsboss_Type( Get( slices, 293 ));
            rec.jssize := Convert_Jssize_Type( Get( slices, 294 ));
            rec.jshrs := Convert( slices, 295, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jshrlk := Convert_Jbhrlk_Type( Get( slices, 296 ));
            rec.jstime := Convert_Jstime_Type( Get( slices, 297 ));
            rec.jstype := Convert_Jstype_Type( Get( slices, 298 ));
            rec.jsaccs := Convert_Jsaccs_Type( Get( slices, 299 ));
            rec.jsprf := Convert( slices, 300, ( -9, -8, -7, -3, -2, -1 ) );
            rec.jsprbm := Convert_Cjsbgm_Type( Get( slices, 301 ));
            rec.jsprby := Convert( slices, 302, ( -9, -8, -7, -2, -1 ) );
            rec.jsprem := Convert_Cjsbgm_Type( Get( slices, 303 ));
            rec.jsprey := Convert( slices, 304, ( -9, -8, -7, -2, -1 ) );
            rec.jspayl := Convert( slices, 305, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jspybm := Convert_Cjsbgm_Type( Get( slices, 306 ));
            rec.jspyby := Convert( slices, 307, ( -9, -8, -7, -2, -1 ) );
            rec.jspyem := Convert_Cjsbgm_Type( Get( slices, 308 ));
            rec.jspyey := Convert( slices, 309, ( -9, -8, -7, -2, -1 ) );
            rec.jspl := Convert_Jspl_Type( Get( slices, 310 ));
            rec.jsttwt := Convert( slices, 311, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.jsttwm := Convert_Jsttwm_Type( Get( slices, 312 ));
            rec.jssat1 := Convert_Jssat1_Type( Get( slices, 313 ));
            rec.jssat2 := Convert_Jbsat_Type( Get( slices, 314 ));
            rec.jssat3 := Convert_Jbsat_Type( Get( slices, 315 ));
            rec.jssat4 := Convert_Jbsat_Type( Get( slices, 316 ));
            rec.jssat5 := Convert_Jbsat_Type( Get( slices, 317 ));
            rec.jssat := Convert_Jbsat_Type( Get( slices, 318 ));
            rec.jsbgd := Convert( slices, 319, ( -9, -8, -7, -2, -1 ) );
            rec.jsbgm := Convert_Cjsbgm_Type( Get( slices, 320 ));
            rec.jsbgy := Convert( slices, 321, ( -9, -8, -7, -2, -1 ) );
            rec.rach12 := Convert_Hhch12_Type( Get( slices, 322 ));
            rec.jbchc1 := Convert_Jbchc1_Type( Get( slices, 323 ));
            rec.jbchc2 := Convert_Jbchc2_Type( Get( slices, 324 ));
            rec.jbchc3 := Convert_Jbchc3_Type( Get( slices, 325 ));
            rec.xpchcf := Convert_Xpchcf_Type( Get( slices, 326 ));
            rec.xpchc := Convert( slices, 327, ( -9, -8, -7, -2, -1 ) );
            rec.huxpch := Convert_Huxpch_Type( Get( slices, 328 ));
            rec.hunurs := Convert_Hunurs_Type( Get( slices, 329 ));
            rec.julk1 := Convert_Aidpl1_Type( Get( slices, 330 ));
            rec.julk4 := Convert_Bscon_Type( Get( slices, 331 ));
            rec.julkjb := Convert_Aidpl1_Type( Get( slices, 332 ));
            rec.juspec := Convert_Juspec_Type( Get( slices, 333 ));
            rec.jusoc := Convert( slices, 334, ( -9, -8, -7, -2, -1 ) );
            rec.jupayx := Convert( slices, 335, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.juhrsx := Convert( slices, 336, ( -9, -8, -7, -2, -1 ) );
            rec.jupayl := Convert( slices, 337, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.juhrsl := Convert( slices, 338, ( -9, -8, -7, -2, -1 ) );
            rec.jbasp1 := Convert_Jbasp1_Type( Get( slices, 339 ));
            rec.jbasp2 := Convert_Jbasp1_Type( Get( slices, 340 ));
            rec.jblky1 := Convert_Jblky1_Type( Get( slices, 341 ));
            rec.jblky2 := Convert_Jblky1_Type( Get( slices, 342 ));
            rec.jbub := Convert_Bscon_Type( Get( slices, 343 ));
            rec.jbuby := Convert_Jbuby_Type( Get( slices, 344 ));
            rec.j2has := Convert_Aidpl1_Type( Get( slices, 345 ));
            rec.j2soc := Convert( slices, 346, ( -9, -8, -7, -2, -1 ) );
            rec.j2semp := Convert_J2semp_Type( Get( slices, 347 ));
            rec.j2hrs := Convert( slices, 348, ( -9, -8, -7, -2, -1 ) );
            rec.j2pay := Convert( slices, 349, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbhha := Convert_Aidpl1_Type( Get( slices, 350 ));
            rec.jbhhb := Convert_Aidpl1_Type( Get( slices, 351 ));
            rec.jbhhc := Convert_Aidpl1_Type( Get( slices, 352 ));
            rec.jbhhd := Convert_Aidpl1_Type( Get( slices, 353 ));
            rec.jbhhe := Convert_Aidpl1_Type( Get( slices, 354 ));
            rec.jbhhf := Convert_Aidpl1_Type( Get( slices, 355 ));
            rec.jbhh := Convert_Jbhh_Type( Get( slices, 356 ));
            rec.ivea := Convert_Ivda_Type( Get( slices, 357 ));
            rec.iveb := Convert_Ivdb_Type( Get( slices, 358 ));
            rec.ivec := Convert_Ivec_Type( Get( slices, 359 ));
            rec.ived := Convert_Ivdd_Type( Get( slices, 360 ));
            rec.jbstat := Convert_Jbstat_Type( Get( slices, 361 ));
            rec.cjsbgd := Convert( slices, 362, ( -9, -8, -7, -2, -1 ) );
            rec.cjsbgm := Convert_Cjsbgm_Type( Get( slices, 363 ));
            rec.cjsbgy := Convert( slices, 364, ( -9, -8, -7, -2, -1 ) );
            rec.cjsbly := Convert_Cjsbly_Type( Get( slices, 365 ));
            rec.njbs := Convert( slices, 366, ( -9, -8, -7 ) );
            rec.jbhad := Convert_Aidpl1_Type( Get( slices, 367 ));
            rec.jlend := Convert( slices, 368, ( -9, -8, -7, -2, -1 ) );
            rec.jlsoc := Convert( slices, 369, ( -9, -8, -7, -2, -1 ) );
            rec.jlsic := Convert( slices, 370, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jlsemp := Convert_J2semp_Type( Get( slices, 371 ));
            rec.jlboss := Convert_Aidpl1_Type( Get( slices, 372 ));
            rec.jlmngr := Convert_Jlmngr_Type( Get( slices, 373 ));
            rec.jlsize := Convert_Jlsize_Type( Get( slices, 374 ));
            rec.ivja := Convert_Ivda_Type( Get( slices, 375 ));
            rec.ivjb := Convert_Ivdb_Type( Get( slices, 376 ));
            rec.ivjc := Convert_Ivec_Type( Get( slices, 377 ));
            rec.ivjd := Convert_Ivdd_Type( Get( slices, 378 ));
            rec.opsoca := Convert_Ophla_Type( Get( slices, 379 ));
            rec.opsocb := Convert_Opsocb_Type( Get( slices, 380 ));
            rec.opsocc := Convert_Ophlb_Type( Get( slices, 381 ));
            rec.opsocd := Convert_Opsocd_Type( Get( slices, 382 ));
            rec.opsoce := Convert_Opsocd_Type( Get( slices, 383 ));
            rec.opsocf := Convert_Opsocd_Type( Get( slices, 384 ));
            rec.opcls1 := Convert_Aidpl1_Type( Get( slices, 385 ));
            rec.opcls2 := Convert_Opcls2_Type( Get( slices, 386 ));
            rec.opcls3 := Convert_Opcls3_Type( Get( slices, 387 ));
            rec.vote1 := Convert_Aidpl1_Type( Get( slices, 388 ));
            rec.vote2 := Convert_Aidpl1_Type( Get( slices, 389 ));
            rec.vote3 := Convert_Vote3_Type( Get( slices, 390 ));
            rec.vote4 := Convert_Vote3_Type( Get( slices, 391 ));
            rec.vote5 := Convert_Vote5_Type( Get( slices, 392 ));
            rec.vote6 := Convert_Vote6_Type( Get( slices, 393 ));
            rec.oprlg1 := Convert_Oprlg1_Type( Get( slices, 394 ));
            rec.oprlg2 := Convert_Oprlg2_Type( Get( slices, 395 ));
            rec.oprlg3 := Convert_Oprlg3_Type( Get( slices, 396 ));
            rec.race := Convert_Race_Type( Get( slices, 397 ));
            rec.orgm := Convert_Aidpl1_Type( Get( slices, 398 ));
            rec.orgma := Convert_Orgma_Type( Get( slices, 399 ));
            rec.orgaa := Convert_Orgaa_Type( Get( slices, 400 ));
            rec.orgmb := Convert_Orgmb_Type( Get( slices, 401 ));
            rec.orgab := Convert_Orgab_Type( Get( slices, 402 ));
            rec.orgmc := Convert_Orgmc_Type( Get( slices, 403 ));
            rec.orgac := Convert_Orgac_Type( Get( slices, 404 ));
            rec.orgmd := Convert_Orgmd_Type( Get( slices, 405 ));
            rec.orgad := Convert_Orgad_Type( Get( slices, 406 ));
            rec.orgme := Convert_Orgme_Type( Get( slices, 407 ));
            rec.orgae := Convert_Orgae_Type( Get( slices, 408 ));
            rec.orgmf := Convert_Orgmf_Type( Get( slices, 409 ));
            rec.orgaf := Convert_Orgaf_Type( Get( slices, 410 ));
            rec.orgmg := Convert_Orgmg_Type( Get( slices, 411 ));
            rec.orgag := Convert_Orgag_Type( Get( slices, 412 ));
            rec.orgmh := Convert_Orgmh_Type( Get( slices, 413 ));
            rec.orgah := Convert_Orgah_Type( Get( slices, 414 ));
            rec.orgmi := Convert_Orgmi_Type( Get( slices, 415 ));
            rec.orgai := Convert_Orgai_Type( Get( slices, 416 ));
            rec.orgmj := Convert_Orgmj_Type( Get( slices, 417 ));
            rec.orgaj := Convert_Orgaj_Type( Get( slices, 418 ));
            rec.orgmk := Convert_Orgmk_Type( Get( slices, 419 ));
            rec.orgak := Convert_Orgak_Type( Get( slices, 420 ));
            rec.orgml := Convert_Orgml_Type( Get( slices, 421 ));
            rec.orgal := Convert_Orgal_Type( Get( slices, 422 ));
            rec.orgmm := Convert_Orgmm_Type( Get( slices, 423 ));
            rec.orgam := Convert_Orgam_Type( Get( slices, 424 ));
            rec.orga := Convert_Aidpl1_Type( Get( slices, 425 ));
            rec.oppol1 := Convert_Oppol1_Type( Get( slices, 426 ));
            rec.oppol2 := Convert_Oppol2_Type( Get( slices, 427 ));
            rec.oppol3 := Convert_Oppol3_Type( Get( slices, 428 ));
            rec.oppol4 := Convert_Oppol4_Type( Get( slices, 429 ));
            rec.ivva := Convert_Ivva_Type( Get( slices, 430 ));
            rec.ivvb := Convert_Ivdb_Type( Get( slices, 431 ));
            rec.ivvc := Convert_Ivfc_Type( Get( slices, 432 ));
            rec.ivvd := Convert_Ivdd_Type( Get( slices, 433 ));
            rec.f101 := Convert_F101_Type( Get( slices, 434 ));
            rec.f102 := Convert_F102_Type( Get( slices, 435 ));
            rec.f103 := Convert_F103_Type( Get( slices, 436 ));
            rec.f104 := Convert( slices, 437, ( -9, -8, -7 ) );
            rec.f105 := Convert_F105_Type( Get( slices, 438 ));
            rec.f106 := Convert_F106_Type( Get( slices, 439 ));
            rec.f116 := Convert_F116_Type( Get( slices, 440 ));
            rec.f117 := Convert_F117_Type( Get( slices, 441 ));
            rec.f118 := Convert_F118_Type( Get( slices, 442 ));
            rec.f119 := Convert_F119_Type( Get( slices, 443 ));
            rec.f120 := Convert_F120_Type( Get( slices, 444 ));
            rec.f121 := Convert_F121_Type( Get( slices, 445 ));
            rec.f122 := Convert_F122_Type( Get( slices, 446 ));
            rec.f133 := Convert_F133_Type( Get( slices, 447 ));
            rec.f132 := Convert_F132_Type( Get( slices, 448 ));
            rec.f131 := Convert_F131_Type( Get( slices, 449 ));
            rec.f134 := Convert_F134_Type( Get( slices, 450 ));
            rec.f135 := Convert_F135_Type( Get( slices, 451 ));
            rec.f136 := Convert_F136_Type( Get( slices, 452 ));
            rec.f137 := Convert_F137_Type( Get( slices, 453 ));
            rec.f138 := Convert_F138_Type( Get( slices, 454 ));
            rec.f139 := Convert_F139_Type( Get( slices, 455 ));
            rec.f140 := Convert_F140_Type( Get( slices, 456 ));
            rec.f141 := Convert_F141_Type( Get( slices, 457 ));
            rec.f151 := Convert_F151_Type( Get( slices, 458 ));
            rec.f152 := Convert_F152_Type( Get( slices, 459 ));
            rec.f153 := Convert_F153_Type( Get( slices, 460 ));
            rec.f154 := Convert_F154_Type( Get( slices, 461 ));
            rec.f155 := Convert_F155_Type( Get( slices, 462 ));
            rec.f156 := Convert_F156_Type( Get( slices, 463 ));
            rec.f157 := Convert_F157_Type( Get( slices, 464 ));
            rec.f158 := Convert_F158_Type( Get( slices, 465 ));
            rec.f159 := Convert_F159_Type( Get( slices, 466 ));
            rec.nf1 := Convert( slices, 467, ( -9, -8, -7, -2, -1 ) );
            rec.fisbm := Convert_Fisbm_Type( Get( slices, 468 ));
            rec.fisby := Convert( slices, 469, ( -9, -8, -7, -2, -1 ) );
            rec.fisit := Convert_Fisit_Type( Get( slices, 470 ));
            rec.fisitc := Convert( slices, 471, ( -9, -8, -7, -2, -1 ) );
            rec.fisitx := Convert( slices, 472, ( -9, -8, -7, -2, -1 ) );
            rec.fiyrdi := Convert( slices, 473, ( -9, -8, -7, -2, -1 ) );
            rec.save := Convert_Aidpl1_Type( Get( slices, 474 ));
            rec.saved := Convert( slices, 475, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.savey := Convert_Savey_Type( Get( slices, 476 ));
            rec.bankac := Convert_Aidpl1_Type( Get( slices, 477 ));
            rec.bankjt := Convert_Aidpl1_Type( Get( slices, 478 ));
            rec.bankj1 := Convert( slices, 479, ( -9, -8, -7, -2, -1 ) );
            rec.bankj2 := Convert( slices, 480, ( -9, -8, -7, -2, -1 ) );
            rec.hudraw := Convert_Hudraw_Type( Get( slices, 481 ));
            rec.fthh := Convert_Aidpl1_Type( Get( slices, 482 ));
            rec.fthh1 := Convert( slices, 483, ( -9, -8, -7, -2, -1 ) );
            rec.fthh11 := Convert_Fthh11_Type( Get( slices, 484 ));
            rec.fthh12 := Convert_Fthh12_Type( Get( slices, 485 ));
            rec.fthh13 := Convert_Fthh13_Type( Get( slices, 486 ));
            rec.fthh14 := Convert_Fthh14_Type( Get( slices, 487 ));
            rec.fthh15 := Convert_Fthh15_Type( Get( slices, 488 ));
            rec.fthh16 := Convert_Ftexa6_Type( Get( slices, 489 ));
            rec.fthh1v := Convert( slices, 490, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.fthh1w := Convert( slices, 491, ( -9.0, -8.0, -7.0, -5.0, -3.0, -2.0, -1.0 ) );
            rec.fthh2 := Convert( slices, 492, ( -9, -8, -7, -2, -1 ) );
            rec.fthh21 := Convert_Fthh11_Type( Get( slices, 493 ));
            rec.fthh22 := Convert_Fthh12_Type( Get( slices, 494 ));
            rec.fthh23 := Convert_Fthh13_Type( Get( slices, 495 ));
            rec.fthh24 := Convert_Fthh24_Type( Get( slices, 496 ));
            rec.fthh25 := Convert_Fthh15_Type( Get( slices, 497 ));
            rec.fthh26 := Convert_Ftexa6_Type( Get( slices, 498 ));
            rec.fthh2v := Convert( slices, 499, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.fthh2w := Convert( slices, 500, ( -9.0, -8.0, -7.0, -5.0, -3.0, -2.0, -1.0 ) );
            rec.fthh3 := Convert( slices, 501, ( -9, -8, -7, -2, -1 ) );
            rec.fthh31 := Convert_Fthh11_Type( Get( slices, 502 ));
            rec.fthh32 := Convert_Fthh12_Type( Get( slices, 503 ));
            rec.fthh33 := Convert_Fthh13_Type( Get( slices, 504 ));
            rec.fthh34 := Convert_Fthh24_Type( Get( slices, 505 ));
            rec.fthh35 := Convert_Fthh15_Type( Get( slices, 506 ));
            rec.fthh36 := Convert_Ftexa6_Type( Get( slices, 507 ));
            rec.fthh3v := Convert( slices, 508, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.fthh3w := Convert( slices, 509, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.ftexhh := Convert_Aidpl1_Type( Get( slices, 510 ));
            rec.ftexa := Convert_Ftexa_Type( Get( slices, 511 ));
            rec.ftexa1 := Convert_Ftexa1_Type( Get( slices, 512 ));
            rec.ftexa2 := Convert_Ftexa2_Type( Get( slices, 513 ));
            rec.ftexa3 := Convert_Ftexa3_Type( Get( slices, 514 ));
            rec.ftexa4 := Convert_Ftexa4_Type( Get( slices, 515 ));
            rec.ftexa5 := Convert_Ftexa5_Type( Get( slices, 516 ));
            rec.ftexa6 := Convert_Ftexa6_Type( Get( slices, 517 ));
            rec.ftexb := Convert_Ftexb_Type( Get( slices, 518 ));
            rec.ftexb1 := Convert_Ftexa1_Type( Get( slices, 519 ));
            rec.ftexb2 := Convert_Ftexa2_Type( Get( slices, 520 ));
            rec.ftexb3 := Convert_Ftexa3_Type( Get( slices, 521 ));
            rec.ftexb4 := Convert_Ftexa4_Type( Get( slices, 522 ));
            rec.ftexb5 := Convert_Ftexa5_Type( Get( slices, 523 ));
            rec.ftexb6 := Convert_Ftexa6_Type( Get( slices, 524 ));
            rec.ftexc := Convert_Ftexc_Type( Get( slices, 525 ));
            rec.ftexc1 := Convert_Ftexa1_Type( Get( slices, 526 ));
            rec.ftexc2 := Convert_Ftexa2_Type( Get( slices, 527 ));
            rec.ftexc3 := Convert_Ftexa3_Type( Get( slices, 528 ));
            rec.ftexc4 := Convert_Ftexa4_Type( Get( slices, 529 ));
            rec.ftexc5 := Convert_Ftexa5_Type( Get( slices, 530 ));
            rec.ftexc6 := Convert_Ftexa6_Type( Get( slices, 531 ));
            rec.xpself := Convert( slices, 532, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.spinhh := Convert_Hhch12_Type( Get( slices, 533 ));
            rec.hubuys := Convert_Hubuys_Type( Get( slices, 534 ));
            rec.hufrys := Convert_Hubuys_Type( Get( slices, 535 ));
            rec.humops := Convert_Hubuys_Type( Get( slices, 536 ));
            rec.huiron := Convert_Hubuys_Type( Get( slices, 537 ));
            rec.hhch12 := Convert_Hhch12_Type( Get( slices, 538 ));
            rec.husits := Convert_Husits_Type( Get( slices, 539 ));
            rec.huruns := Convert_Huruns_Type( Get( slices, 540 ));
            rec.huboss := Convert_Huboss_Type( Get( slices, 541 ));
            rec.hupays := Convert_Hukeep_Type( Get( slices, 542 ));
            rec.hukeep := Convert_Hukeep_Type( Get( slices, 543 ));
            rec.huasks := Convert_Huasks_Type( Get( slices, 544 ));
            rec.hushop := Convert_Hucook_Type( Get( slices, 545 ));
            rec.hucook := Convert_Hucook_Type( Get( slices, 546 ));
            rec.hudust := Convert_Hucook_Type( Get( slices, 547 ));
            rec.huwash := Convert_Hucook_Type( Get( slices, 548 ));
            rec.driver := Convert_Aidpl1_Type( Get( slices, 549 ));
            rec.caruse := Convert_Caruse_Type( Get( slices, 550 ));
            rec.carowr := Convert_Carowr_Type( Get( slices, 551 ));
            rec.carowrp := Convert( slices, 552, ( -9, -8, -7, -2, -1 ) );
            rec.carjob := Convert_Carjob_Type( Get( slices, 553 ));
            rec.carval := Convert( slices, 554, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ivfa := Convert_Ivda_Type( Get( slices, 555 ));
            rec.ivfb := Convert_Ivdb_Type( Get( slices, 556 ));
            rec.ivfc := Convert_Ivfc_Type( Get( slices, 557 ));
            rec.ivfd := Convert_Ivdd_Type( Get( slices, 558 ));
            rec.ivfoih := Convert( slices, 559, ( -9, -8 ) );
            rec.ivfoim := Convert( slices, 560, ( -9, -8 ) );
            rec.ivsc := Convert_Ivsc_Type( Get( slices, 561 ));
            rec.iv1 := Convert_Hhch12_Type( Get( slices, 562 ));
            rec.iv2 := Convert_Iv2_Type( Get( slices, 563 ));
            rec.iv4 := Convert_Iv4_Type( Get( slices, 564 ));
            rec.iv5 := Convert_Iv5_Type( Get( slices, 565 ));
            rec.iv6a := Convert_Hhch12_Type( Get( slices, 566 ));
            rec.iv6b := Convert_Hhch12_Type( Get( slices, 567 ));
            rec.iv6c := Convert_Hhch12_Type( Get( slices, 568 ));
            rec.iv6d := Convert_Hhch12_Type( Get( slices, 569 ));
            rec.iv6e := Convert_Hhch12_Type( Get( slices, 570 ));
            rec.iv6f := Convert_Hhch12_Type( Get( slices, 571 ));
            rec.iv7 := Convert( slices, 572, ( -9, -8, -7 ) );
            rec.ghqa := Convert_Ghqa_Type( Get( slices, 573 ));
            rec.ghqb := Convert_Ghqb_Type( Get( slices, 574 ));
            rec.ghqc := Convert_Ghqc_Type( Get( slices, 575 ));
            rec.ghqd := Convert_Ghqc_Type( Get( slices, 576 ));
            rec.ghqe := Convert_Ghqe_Type( Get( slices, 577 ));
            rec.ghqf := Convert_Ghqe_Type( Get( slices, 578 ));
            rec.ghqg := Convert_Ghqc_Type( Get( slices, 579 ));
            rec.ghqh := Convert_Ghqc_Type( Get( slices, 580 ));
            rec.ghqi := Convert_Ghqb_Type( Get( slices, 581 ));
            rec.ghqj := Convert_Ghqe_Type( Get( slices, 582 ));
            rec.ghqk := Convert_Ghqe_Type( Get( slices, 583 ));
            rec.ghql := Convert_Ghqc_Type( Get( slices, 584 ));
            rec.opfama := Convert_Opfama_Type( Get( slices, 585 ));
            rec.opfamb := Convert_Opfama_Type( Get( slices, 586 ));
            rec.opfamc := Convert_Opfama_Type( Get( slices, 587 ));
            rec.opfamd := Convert_Opfama_Type( Get( slices, 588 ));
            rec.opfame := Convert_Opfama_Type( Get( slices, 589 ));
            rec.opfamf := Convert_Opfama_Type( Get( slices, 590 ));
            rec.opfamg := Convert_Opfama_Type( Get( slices, 591 ));
            rec.opfamh := Convert_Opfama_Type( Get( slices, 592 ));
            rec.opfami := Convert_Opfama_Type( Get( slices, 593 ));
            rec.ssupa := Convert_Ssupa_Type( Get( slices, 594 ));
            rec.ssupb := Convert_Ssupa_Type( Get( slices, 595 ));
            rec.ssupc := Convert_Ssupa_Type( Get( slices, 596 ));
            rec.ssupd := Convert_Ssupa_Type( Get( slices, 597 ));
            rec.ssupe := Convert_Ssupa_Type( Get( slices, 598 ));
            rec.ssup1 := Convert_Netsx1_Type( Get( slices, 599 ));
            rec.pid := Convert( slices, 600 );
            rec.ivfio := Convert_Ivfio_Type( Get( slices, 601 ));
            rec.iodc := Convert_Iodc_Type( Get( slices, 602 ));
            rec.xrwght := Convert( slices, 603 );
            rec.xewght := Convert( slices, 604 );
            rec.region := Convert_Region_Type( Get( slices, 605 ));
            rec.prrs2i := Convert_Prrs2i_Type( Get( slices, 606 ));
            rec.pripn := Convert( slices, 607, ( -9, -8 ) );
            rec.prwhy := Convert_Prwhy_Type( Get( slices, 608 ));
            rec.prfehq := Convert_Prfehq_Type( Get( slices, 609 ));
            rec.prsehq := Convert_Prsehq_Type( Get( slices, 610 ));
            rec.prfitb := Convert_Prfitb_Type( Get( slices, 611 ));
            rec.prjbft := Convert_Prjbft_Type( Get( slices, 612 ));
            rec.hgr2r := Convert_Hgr2r_Type( Get( slices, 613 ));
            rec.mastat := Convert_Mastat_Type( Get( slices, 614 ));
            rec.hgspn := Convert( slices, 615, ( -9, -8, -2, -1 ) );
            rec.hgest := Convert_Hgest_Type( Get( slices, 616 ));
            rec.hgfno := Convert( slices, 617, ( -9, -8, -2, -1 ) );
            rec.hgmno := Convert( slices, 618, ( -9, -8, -2, -1 ) );
            rec.hgjnly := Convert_Hgjnly_Type( Get( slices, 619 ));
            rec.hgmjn := Convert_Hgbm_Type( Get( slices, 620 ));
            rec.hgyjn := Convert( slices, 621, ( -9, -8 ) );
            rec.age := Convert( slices, 622, ( -9, -8 ) );
            rec.age12 := Convert( slices, 623, ( -9, -8 ) );
            rec.butype := Convert_Butype_Type( Get( slices, 624 ));
            rec.buno := Convert( slices, 625, ( -9, -8 ) );
            rec.nchild := Convert( slices, 626, ( -9, -8 ) );
            rec.hoh := Convert_Hoh_Type( Get( slices, 627 ));
            rec.hhsize := Convert( slices, 628, ( -9, -8 ) );
            rec.hhtype := Convert_Hhtype_Type( Get( slices, 629 ));
            rec.tenure := Convert_Tenure_Type( Get( slices, 630 ));
            rec.qfedhi := Convert_Qfedhi_Type( Get( slices, 631 ));
            rec.qfvoc := Convert_Qfvoc_Type( Get( slices, 632 ));
            rec.qfachi := Convert_Qfachi_Type( Get( slices, 633 ));
            rec.jbft := Convert_Jbft_Type( Get( slices, 634 ));
            rec.edgen := Convert( slices, 635, ( -9, -8, -7 ) );
            rec.edspec := Convert( slices, 636, ( -9, -8, -7 ) );
            rec.pargsc := Convert_Margsc_Type( Get( slices, 637 ));
            rec.paseg := Convert_Maseg_Type( Get( slices, 638 ));
            rec.pagold := Convert( slices, 639, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.paisco := Convert( slices, 640 );
            rec.pacssm := Convert( slices, 641, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.pacssf := Convert( slices, 642, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.pahgs := Convert( slices, 643, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.pasec := Convert_J1sec_Type( Get( slices, 644 ));
            rec.margsc := Convert_Margsc_Type( Get( slices, 645 ));
            rec.maseg := Convert_Maseg_Type( Get( slices, 646 ));
            rec.magold := Convert( slices, 647, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.maisco := Convert( slices, 648 );
            rec.macssm := Convert( slices, 649, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.macssf := Convert( slices, 650, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mahgs := Convert( slices, 651, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.masec := Convert_J1sec_Type( Get( slices, 652 ));
            rec.payg := Convert( slices, 653, ( -9.0, -8.0, -7.0 ) );
            rec.payn := Convert( slices, 654, ( -9.0, -8.0, -7.0 ) );
            rec.paygu := Convert( slices, 655, ( -9.0, -8.0, -7.0 ) );
            rec.paynu := Convert( slices, 656, ( -9.0, -8.0, -7.0 ) );
            rec.paygty := Convert( slices, 657, ( -9.0, -8.0, -7.0 ) );
            rec.paygly := Convert( slices, 658, ( -9.0, -8.0, -7.0 ) );
            rec.paynty := Convert( slices, 659, ( -9.0, -8.0, -7.0 ) );
            rec.paynly := Convert( slices, 660, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jsprof := Convert( slices, 661, ( -9.0, -8.0, -7.0 ) );
            rec.jspayg := Convert( slices, 662, ( -9.0, -8.0, -7.0 ) );
            rec.cjsten := Convert( slices, 663, ( -9.0, -8.0, -7.0 ) );
            rec.cjswk9 := Convert( slices, 664, ( -9.0, -8.0, -7.0 ) );
            rec.jlid := Convert_Jlid_Type( Get( slices, 665 ));
            rec.jlyid := Convert_Jlyid_Type( Get( slices, 666 ));
            rec.jtyid := Convert_Jtyid_Type( Get( slices, 667 ));
            rec.jbseg := Convert_Jbseg_Type( Get( slices, 668 ));
            rec.jbgold := Convert( slices, 669, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbrgsc := Convert_Jbrgsc_Type( Get( slices, 670 ));
            rec.jbisco := Convert( slices, 671 );
            rec.jbcssm := Convert( slices, 672, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbcssf := Convert( slices, 673, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbhgs := Convert( slices, 674, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbsec := Convert_Jbsec_Type( Get( slices, 675 ));
            rec.njbwks := Convert( slices, 676, ( -9.0, -8.0, -7.0 ) );
            rec.njuwks := Convert( slices, 677, ( -9.0, -8.0, -7.0 ) );
            rec.njiwks := Convert( slices, 678, ( -9.0, -8.0, -7.0 ) );
            rec.njbnew := Convert( slices, 679, ( -9, -8, -7 ) );
            rec.njbsp := Convert( slices, 680, ( -9, -8, -7 ) );
            rec.njusp := Convert( slices, 681, ( -9, -8, -7 ) );
            rec.njisp := Convert( slices, 682, ( -9, -8, -7 ) );
            rec.jbstatl := Convert( slices, 683, ( -9, -8, -7, -2, -1 ) );
            rec.jbstatt := Convert( slices, 684, ( -9, -8, -7, -2, -1 ) );
            rec.jbsocly := Convert( slices, 685, ( -9, -8, -7 ) );
            rec.jlseg := Convert_Jlseg_Type( Get( slices, 686 ));
            rec.jlgold := Convert( slices, 687, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlrgsc := Convert_Jlrgsc_Type( Get( slices, 688 ));
            rec.jlisco := Convert( slices, 689 );
            rec.jlcssm := Convert( slices, 690, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlcssf := Convert( slices, 691, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlhgs := Convert( slices, 692, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlsec := Convert_Jlsec_Type( Get( slices, 693 ));
            rec.vote := Convert_Vote_Type( Get( slices, 694 ));
            rec.norgm := Convert( slices, 695, ( -9, -8, -7 ) );
            rec.norga := Convert( slices, 696, ( -9, -8, -7 ) );
            rec.fimnp := Convert( slices, 697, ( -9.0, -8.0, -7.0 ) );
            rec.fimnb := Convert( slices, 698, ( -9.0, -8.0, -7.0 ) );
            rec.fimni := Convert( slices, 699, ( -9.0, -8.0, -7.0 ) );
            rec.fimnt := Convert( slices, 700, ( -9.0, -8.0, -7.0 ) );
            rec.fimnnl := Convert( slices, 701, ( -9.0, -8.0, -7.0 ) );
            rec.fimnl := Convert( slices, 702, ( -9.0, -8.0, -7.0 ) );
            rec.fimn := Convert( slices, 703, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrl := Convert( slices, 704, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrnl := Convert( slices, 705, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrp := Convert( slices, 706, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrb := Convert( slices, 707, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrt := Convert( slices, 708, ( -9.0, -8.0, -7.0 ) );
            rec.fiyri := Convert( slices, 709, ( -9.0, -8.0, -7.0 ) );
            rec.fiyr := Convert( slices, 710, ( -9.0, -8.0, -7.0 ) );
            rec.fihhmn := Convert( slices, 711, ( -9.0, -8.0, -7.0 ) );
            rec.hlghq1 := Convert( slices, 712, ( -9, -8, -7 ) );
            rec.hlghq2 := Convert( slices, 713, ( -9, -8, -7 ) );
            rec.spjb := Convert_Spjb_Type( Get( slices, 714 ));
            rec.spsoc := Convert( slices, 715, ( -9.0, -8.0 ) );
            rec.spjbhr := Convert( slices, 716, ( -9, -8, -7 ) );
            rec.spjbot := Convert( slices, 717, ( -9, -8, -7 ) );
            rec.sppayg := Convert( slices, 718, ( -9.0, -8.0, -7.0 ) );
            rec.spjbyr := Convert( slices, 719, ( -9, -8, -7 ) );
            rec.hlprba := Convert_Hlprba_Type( Get( slices, 720 ));
            rec.hlprbb := Convert_Hlprbb_Type( Get( slices, 721 ));
            rec.hlprbc := Convert_Hlprbc_Type( Get( slices, 722 ));
            rec.hlprbd := Convert_Hlprbd_Type( Get( slices, 723 ));
            rec.hlprbe := Convert_Hlprbe_Type( Get( slices, 724 ));
            rec.hlprbf := Convert_Hlprbf_Type( Get( slices, 725 ));
            rec.hlprbg := Convert_Hlprbg_Type( Get( slices, 726 ));
            rec.hlprbh := Convert_Hlprbh_Type( Get( slices, 727 ));
            rec.hlprbi := Convert_Hlprbi_Type( Get( slices, 728 ));
            rec.hlprbj := Convert_Hlprbj_Type( Get( slices, 729 ));
            rec.hlprbk := Convert_Hlprbk_Type( Get( slices, 730 ));
            rec.hlprbl := Convert_Hlprbl_Type( Get( slices, 731 ));
            rec.hlprbm := Convert_Hlprbm_Type( Get( slices, 732 ));
            rec.j2payi := Convert( slices, 733, ( -9, -8, -7, -3, -2, -1 ) );
            rec.fiyrdii := Convert_Fiyrdii_Type( Get( slices, 734 ));
            rec.prfitbi := Convert_Prfitbi_Type( Get( slices, 735 ));
            rec.paygui := Convert_Fimnbi_Type( Get( slices, 736 ));
            rec.paynui := Convert_Fimnbi_Type( Get( slices, 737 ));
            rec.paygti := Convert_Fimnbi_Type( Get( slices, 738 ));
            rec.paygli := Convert_Fimnbi_Type( Get( slices, 739 ));
            rec.paynti := Convert_Fimnbi_Type( Get( slices, 740 ));
            rec.paynli := Convert_Fimnbi_Type( Get( slices, 741 ));
            rec.jsprofi := Convert_Fimnbi_Type( Get( slices, 742 ));
            rec.jspaygi := Convert_Fimnbi_Type( Get( slices, 743 ));
            rec.fimnpi := Convert_Fimnbi_Type( Get( slices, 744 ));
            rec.fimnbi := Convert_Fimnbi_Type( Get( slices, 745 ));
            rec.fimnii := Convert_Fimnii_Type( Get( slices, 746 ));
            rec.fimnti := Convert_Fimnii_Type( Get( slices, 747 ));
            rec.fimnnli := Convert_Fimnbi_Type( Get( slices, 748 ));
            rec.fimnli := Convert_Fimnbi_Type( Get( slices, 749 ));
            rec.fimnthi := Convert_Fimnii_Type( Get( slices, 750 ));
            rec.fiyrli := Convert_Fimnbi_Type( Get( slices, 751 ));
            rec.fiyrnli := Convert_Fimnbi_Type( Get( slices, 752 ));
            rec.fiyrpi := Convert_Fimnii_Type( Get( slices, 753 ));
            rec.fiyrbi := Convert_Fimnbi_Type( Get( slices, 754 ));
            rec.fiyrti := Convert_Fimnbi_Type( Get( slices, 755 ));
            rec.fiyrii := Convert_Fimnbi_Type( Get( slices, 756 ));
            rec.fiyeari := Convert_Fimnbi_Type( Get( slices, 757 ));
            rec.sppaygi := Convert_Prfitbi_Type( Get( slices, 758 ));
            rec.fihhmni := Convert_Fihhmni_Type( Get( slices, 759 ));
            rec.mrjend := Convert( slices, 760, ( -9, -8, -7, -3, -2, -1 ) );
            rec.mrjsoc := Convert( slices, 761, ( -9, -8, -7, -3 ) );
            rec.mrjsic := Convert( slices, 762, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjsemp := Convert_Mrjsemp_Type( Get( slices, 763 ));
            rec.mrjboss := Convert_Mrjboss_Type( Get( slices, 764 ));
            rec.mrjmngr := Convert_Mrjmngr_Type( Get( slices, 765 ));
            rec.mrjsize := Convert_Mrjsize_Type( Get( slices, 766 ));
            rec.mrjseg := Convert_Maseg_Type( Get( slices, 767 ));
            rec.mrjgold := Convert( slices, 768, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjrgsc := Convert_Margsc_Type( Get( slices, 769 ));
            rec.mrjisco := Convert( slices, 770 );
            rec.mrjcssm := Convert( slices, 771, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjcssf := Convert( slices, 772, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjhgs := Convert( slices, 773, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjsec := Convert_J1sec_Type( Get( slices, 774 ));
            rec.plnowy4 := Convert( slices, 775, ( -9, -8, -7, -2, -1 ) );
            rec.yr2uk4 := Convert( slices, 776, ( -9, -8, -7, -2, -1 ) );
            rec.jbbgy4 := Convert( slices, 777, ( -9, -8, -7, -2, -1 ) );
            rec.jsprby4 := Convert( slices, 778, ( -9, -8, -7, -2, -1 ) );
            rec.jsprey4 := Convert( slices, 779, ( -9, -8, -7, -2, -1 ) );
            rec.jspyby4 := Convert( slices, 780, ( -9, -8, -7, -2, -1 ) );
            rec.jspyey4 := Convert( slices, 781, ( -9, -8, -7, -2, -1 ) );
            rec.jsbgy4 := Convert( slices, 782, ( -9, -8, -7, -2, -1 ) );
            rec.cjsbgy4 := Convert( slices, 783, ( -9, -8, -7, -2, -1 ) );
            rec.jlend4 := Convert( slices, 784, ( -9, -8, -7, -2, -1 ) );
            rec.sppid := Convert( slices, 785 );
            rec.fpid := Convert( slices, 786 );
            rec.mpid := Convert( slices, 787 );
            rec.region2 := Convert_Region2_Type( Get( slices, 788 ));
            rec.isced := Convert_Isced_Type( Get( slices, 789 ));
            rec.casmin := Convert_Casmin_Type( Get( slices, 790 ));
            rec.jbiscon := Convert( slices, 791, ( -9, -8, -7, -2, -1 ) );
            rec.jliscon := Convert( slices, 792, ( -9, -8, -7, -2, -1 ) );
            rec.mrjiscn := Convert( slices, 793, ( -9, -8, -7, -2, -1 ) );
            rec.maiscon := Convert( slices, 794, ( -9, -8, -7, -2, -1 ) );
            rec.paiscon := Convert( slices, 795, ( -9, -8, -7, -2, -1 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Indresp_component ).start_pos = 0 ) then
               index.pointers( Indresp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Indresp_component ).counter := index.pointers( Indresp_component ).counter + 1;
            Put_Index( index_map, index );
            Indresp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Indresp_IO.Close( bin_file );
   end Create_Indresp_Wave_A;




   procedure Create_Jobhist_Wave_A( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Jobhist_IO.File_Type;
      rec         : Jobhist_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Jobhist_IO.Create (bin_file, Jobhist_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.jspno := Convert( slices, 3 );
            rec.jhstat := Convert_Jhstat_Type( Get( slices, 4 ));
            rec.jhbgd := Convert( slices, 5, ( -9, -8, -7, -2, -1 ) );
            rec.jhbgm := Convert_Jbbgm1_Type( Get( slices, 6 ));
            rec.jhbgy := Convert( slices, 7, ( -9, -8, -2, -1 ) );
            rec.jhsoc := Convert( slices, 8, ( -9, -8, -2, -1 ) );
            rec.jhpldf := Convert_Jhpldf_Type( Get( slices, 9 ));
            rec.jhsic := Convert( slices, 10, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.jhsize := Convert_Jhsize_Type( Get( slices, 11 ));
            rec.jhmngr := Convert_Jhmngr_Type( Get( slices, 12 ));
            rec.jhsemp := Convert_Jhsemp_Type( Get( slices, 13 ));
            rec.jhboss := Convert_Bscon_Type( Get( slices, 14 ));
            rec.jhsect := Convert_Jhsect_Type( Get( slices, 15 ));
            rec.jha9ly := Convert_Jha9ly_Type( Get( slices, 16 ));
            rec.jhpayl := Convert( slices, 17, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhpylw := Convert( slices, 18, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.jhpylg := Convert_Jhpylg_Type( Get( slices, 19 ));
            rec.jhpays := Convert( slices, 20, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.jhpysw := Convert( slices, 21, ( -9.0, -8.0, -3.0, -2.0, -1.0 ) );
            rec.jhpysg := Convert_Jhpysg_Type( Get( slices, 22 ));
            rec.jhstpy := Convert_Jhstpy_Type( Get( slices, 23 ));
            rec.jblky := Convert_Jblky_Type( Get( slices, 24 ));
            rec.jhendd := Convert( slices, 25, ( -9, -8, -7, -2, -1 ) );
            rec.jhendm := Convert_Jbbgm1_Type( Get( slices, 26 ));
            rec.jhendy := Convert( slices, 27, ( -9, -8, -2, -1 ) );
            rec.jhseg := Convert_Jhseg_Type( Get( slices, 28 ));
            rec.jhgold := Convert( slices, 29, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhrgsc := Convert_Jhrgsc_Type( Get( slices, 30 ));
            rec.jhisco := Convert( slices, 31, ( -9, -8 ) );
            rec.jhcssm := Convert( slices, 32, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhcssf := Convert( slices, 33, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhhgs := Convert( slices, 34, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhsec := Convert_Jhsec_Type( Get( slices, 35 ));
            rec.jhspw := Convert( slices, 36, ( -9.0, -8.0 ) );
            rec.jhgpay := Convert( slices, 37, ( -9.0, -8.0, -7.0 ) );
            rec.jhnpay := Convert( slices, 38, ( -9.0, -8.0, -7.0, -1.0 ) );
            rec.jhgpayi := Convert_Jhgpayi_Type( Get( slices, 39 ));
            rec.jhnpayi := Convert_Jhgpayi_Type( Get( slices, 40 ));
            rec.jhbgy4 := Convert( slices, 41, ( -9, -8, -7, -2, -1 ) );
            rec.jhendy4 := Convert( slices, 42, ( -9, -8, -7, -2, -1 ) );
            rec.pid := Convert( slices, 43 );
            rec.jhiscon := Convert( slices, 44, ( -9, -8, -7, -2, -1 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Jobhist_component ).start_pos = 0 ) then
               index.pointers( Jobhist_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Jobhist_component ).counter := index.pointers( Jobhist_component ).counter + 1;
            Put_Index( index_map, index );
            Jobhist_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Jobhist_IO.Close( bin_file );
   end Create_Jobhist_Wave_A;




   procedure Create_Childad_Wave_B( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Childad_IO.File_Type;
      rec         : Childad_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Childad_IO.Create (bin_file, Childad_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.lacbm := Convert_Lacbm_Type( Get( slices, 3 ));
            rec.lacby := Convert( slices, 4, ( -9, -8, -2, -1 ) );
            rec.lacsx := Convert_Lacsx_Type( Get( slices, 5 ));
            rec.lacst := Convert_Lacst_Type( Get( slices, 6 ));
            rec.lacyb := Convert( slices, 7, ( -9, -8, -2, -1 ) );
            rec.laclv := Convert_Laclv_Type( Get( slices, 8 ));
            rec.lacyd := Convert( slices, 9, ( -9, -8, -2, -1 ) );
            rec.lacal := Convert( slices, 10, ( -9, -8, -2, -1 ) );
            rec.lacno := Convert( slices, 11 );
            rec.lacby4 := Convert( slices, 12, ( -9, -8, -7, -2, -1 ) );
            rec.lacyb4 := Convert( slices, 13, ( -9, -8, -7, -2, -1 ) );
            rec.lacyd4 := Convert( slices, 14, ( -9, -8, -7, -2, -1 ) );
            rec.pid := Convert( slices, 15 );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Childad_component ).start_pos = 0 ) then
               index.pointers( Childad_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Childad_component ).counter := index.pointers( Childad_component ).counter + 1;
            Put_Index( index_map, index );
            Childad_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Childad_IO.Close( bin_file );
   end Create_Childad_Wave_B;




   procedure Create_Childnt_Wave_B( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Childnt_IO.File_Type;
      rec         : Childnt_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Childnt_IO.Create (bin_file, Childnt_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.lchbm := Convert_Lacbm_Type( Get( slices, 3 ));
            rec.lchby := Convert( slices, 4, ( -9, -8, -2, -1 ) );
            rec.lchsx := Convert_Lacsx_Type( Get( slices, 5 ));
            rec.lchlv := Convert_Lchlv_Type( Get( slices, 6 ));
            rec.lchyd := Convert( slices, 7, ( -9, -8, -2, -1 ) );
            rec.lchal := Convert( slices, 8, ( -9, -8, -2, -1 ) );
            rec.lncno := Convert( slices, 9 );
            rec.lchby4 := Convert( slices, 10, ( -9, -8, -7, -2, -1 ) );
            rec.lchyd4 := Convert( slices, 11, ( -9, -8, -7, -2, -1 ) );
            rec.pid := Convert( slices, 12 );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Childnt_component ).start_pos = 0 ) then
               index.pointers( Childnt_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Childnt_component ).counter := index.pointers( Childnt_component ).counter + 1;
            Put_Index( index_map, index );
            Childnt_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Childnt_IO.Close( bin_file );
   end Create_Childnt_Wave_B;




   procedure Create_Cohabit_Wave_B( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Cohabit_IO.File_Type;
      rec         : Cohabit_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Cohabit_IO.Create (bin_file, Cohabit_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.lcsbm := Convert_Lacbm_Type( Get( slices, 3 ));
            rec.lcsby := Convert( slices, 4, ( -9, -8, -2, -1 ) );
            rec.lcsem := Convert_Lacbm_Type( Get( slices, 5 ));
            rec.lcsey := Convert( slices, 6, ( -9, -8, -2, -1 ) );
            rec.lcsne := Convert_Lcsne_Type( Get( slices, 7 ));
            rec.lcsno := Convert( slices, 8 );
            rec.lcsby4 := Convert( slices, 9, ( -9, -8, -7, -2, -1 ) );
            rec.lcsey4 := Convert( slices, 10, ( -9, -8, -7, -2, -1 ) );
            rec.pid := Convert( slices, 11 );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Cohabit_component ).start_pos = 0 ) then
               index.pointers( Cohabit_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Cohabit_component ).counter := index.pointers( Cohabit_component ).counter + 1;
            Put_Index( index_map, index );
            Cohabit_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Cohabit_IO.Close( bin_file );
   end Create_Cohabit_Wave_B;




   procedure Create_Egoalt_Wave_B( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Egoalt_IO.File_Type;
      rec         : Egoalt_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Egoalt_IO.Create (bin_file, Egoalt_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.opno := Convert( slices, 3, (  1 .. 0 => -9 ) );
            rec.rel := Convert_Rel_Type( Get( slices, 4 ));
            rec.sex := Convert_Sex_Type( Get( slices, 5 ));
            rec.osex := Convert_Hgsex_Type( Get( slices, 6 ));
            rec.lwstat := Convert_Lwstat_Type( Get( slices, 7 ));
            rec.nwstat := Convert_Nwstat_Type( Get( slices, 8 ));
            rec.pid := Convert( slices, 9 );
            rec.opid := Convert( slices, 10 );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Egoalt_component ).start_pos = 0 ) then
               index.pointers( Egoalt_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Egoalt_component ).counter := index.pointers( Egoalt_component ).counter + 1;
            Put_Index( index_map, index );
            Egoalt_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Egoalt_IO.Close( bin_file );
   end Create_Egoalt_Wave_B;




   procedure Create_Hhresp_Wave_B( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Hhresp_IO.File_Type;
      rec         : Hhresp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Hhresp_IO.Create (bin_file, Hhresp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.hhdoi := Convert( slices, 2, ( -9, -8, -7 ) );
            rec.hhmoi := Convert_Doim_Type( Get( slices, 3 ));
            rec.hhyoi := Convert( slices, 4, ( -9, -8, -7 ) );
            rec.hsivw1 := Convert_Depchl_Type( Get( slices, 5 ));
            rec.hstype := Convert_Hstype_Type( Get( slices, 6 ));
            rec.hsroom := Convert( slices, 7, ( -9, -8, -7, -2, -1 ) );
            rec.hsownd := Convert_Hsownd_Type( Get( slices, 8 ));
            rec.hsowr1 := Convert( slices, 9, ( -9, -8, -7, -2, -1 ) );
            rec.hsowr2 := Convert( slices, 10, ( -9, -8, -7, -2, -1 ) );
            rec.mghave := Convert_Mghave_Type( Get( slices, 11 ));
            rec.hsowrp := Convert_Bscon_Type( Get( slices, 12 ));
            rec.mgynot := Convert_Mgynot_Type( Get( slices, 13 ));
            rec.hscost := Convert( slices, 14, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.mgstat := Convert_Mgstat_Type( Get( slices, 15 ));
            rec.mgxtra := Convert_Bscon_Type( Get( slices, 16 ));
            rec.mgnew := Convert( slices, 17, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.mgxty1 := Convert_Mgxty1_Type( Get( slices, 18 ));
            rec.mgxty2 := Convert_Mgxty2_Type( Get( slices, 19 ));
            rec.mgxty3 := Convert_Mgxty3_Type( Get( slices, 20 ));
            rec.mgxty4 := Convert_Mgxty4_Type( Get( slices, 21 ));
            rec.mgxty5 := Convert_Mgxty5_Type( Get( slices, 22 ));
            rec.mgold := Convert( slices, 23, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.mglife := Convert( slices, 24, ( -9, -8, -7, -2, -1 ) );
            rec.mgtype := Convert_Mgtype_Type( Get( slices, 25 ));
            rec.xpmg := Convert( slices, 26, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.xpmg1 := Convert_Bscon_Type( Get( slices, 27 ));
            rec.xpmg2 := Convert_Bscon_Type( Get( slices, 28 ));
            rec.xpmg3 := Convert_Bscon_Type( Get( slices, 29 ));
            rec.xpmg4 := Convert_Bscon_Type( Get( slices, 30 ));
            rec.mgyr0 := Convert( slices, 31, ( -9, -8, -7, -2, -1 ) );
            rec.hsyr0 := Convert( slices, 32, ( -9, -8, -7, -1 ) );
            rec.hsval := Convert( slices, 33, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.hsjb := Convert_Bscon_Type( Get( slices, 34 ));
            rec.rentp1 := Convert( slices, 35, ( -9, -8, -7, -2, -1 ) );
            rec.rentp2 := Convert( slices, 36, ( -9, -8, -7, -2, -1 ) );
            rec.rentll := Convert_Rentll_Type( Get( slices, 37 ));
            rec.rentf := Convert_Rentf_Type( Get( slices, 38 ));
            rec.rent := Convert( slices, 39, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.rentw := Convert( slices, 40, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.rent1 := Convert_Rent1_Type( Get( slices, 41 ));
            rec.rent2 := Convert_Rent1_Type( Get( slices, 42 ));
            rec.rent3 := Convert_Bscon_Type( Get( slices, 43 ));
            rec.rent4 := Convert_Bscon_Type( Get( slices, 44 ));
            rec.rent5 := Convert_Bscon_Type( Get( slices, 45 ));
            rec.rent6 := Convert_Bscon_Type( Get( slices, 46 ));
            rec.renthb := Convert_Renthb_Type( Get( slices, 47 ));
            rec.rentg := Convert( slices, 48, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.rentgw := Convert( slices, 49, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.xphsdf := Convert( slices, 50, ( -9, -8, -7, -2, -1 ) );
            rec.xphsd1 := Convert_Bscon_Type( Get( slices, 51 ));
            rec.xphsd2 := Convert_Bscon_Type( Get( slices, 52 ));
            rec.xphsdb := Convert_Bscon_Type( Get( slices, 53 ));
            rec.cdhave := Convert_Bscon_Type( Get( slices, 54 ));
            rec.cd1use := Convert_Cd1new_Type( Get( slices, 55 ));
            rec.cd1new := Convert( slices, 56, ( -9, -8, -7, -2, -1 ) );
            rec.cd2use := Convert_Cd1new_Type( Get( slices, 57 ));
            rec.cd2new := Convert( slices, 58, ( -9, -8, -7, -2, -1 ) );
            rec.cd3use := Convert_Cd1new_Type( Get( slices, 59 ));
            rec.cd3new := Convert( slices, 60, ( -9, -8, -7, -2, -1 ) );
            rec.cd4use := Convert_Cd1new_Type( Get( slices, 61 ));
            rec.cd4new := Convert( slices, 62, ( -9, -8, -7, -2, -1 ) );
            rec.cd5use := Convert_Cd1new_Type( Get( slices, 63 ));
            rec.cd5new := Convert( slices, 64, ( -9, -8, -7, -2, -1 ) );
            rec.cd6use := Convert_Cd1new_Type( Get( slices, 65 ));
            rec.cd6new := Convert( slices, 66, ( -9, -8, -7, -2, -1 ) );
            rec.cd7use := Convert_Cd1new_Type( Get( slices, 67 ));
            rec.cd7new := Convert( slices, 68, ( -9, -8, -7, -2, -1 ) );
            rec.cd8use := Convert_Cd1new_Type( Get( slices, 69 ));
            rec.cd8new := Convert( slices, 70, ( -9, -8, -7, -2, -1 ) );
            rec.cd9use := Convert_Cd1new_Type( Get( slices, 71 ));
            rec.cd9new := Convert( slices, 72, ( -9, -8, -7, -2, -1 ) );
            rec.cdnuxp := Convert( slices, 73, ( -9, -8, -7, -2, -1 ) );
            rec.hsip := Convert( slices, 74, ( -9, -8, -7, -2, -1 ) );
            rec.hsipxp := Convert( slices, 75, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.heatch := Convert_Bscon_Type( Get( slices, 76 ));
            rec.heatyp := Convert_Heatyp_Type( Get( slices, 77 ));
            rec.xpoily := Convert( slices, 78, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.gasuse := Convert_Bscon_Type( Get( slices, 79 ));
            rec.gasway := Convert_Gasway_Type( Get( slices, 80 ));
            rec.xpgasl := Convert( slices, 81, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.xpgasw := Convert( slices, 82, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.xpgaslw := Convert( slices, 83, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.lecway := Convert_Gasway_Type( Get( slices, 84 ));
            rec.xplecl := Convert( slices, 85, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.xplecw := Convert( slices, 86, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.xpleclw := Convert( slices, 87, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.xpfood := Convert( slices, 88, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ncars := Convert_Ncars_Type( Get( slices, 89 ));
            rec.ivh1 := Convert( slices, 90, ( -9, -8, -7, -1 ) );
            rec.ivh2 := Convert( slices, 91, ( -9, -8, -7 ) );
            rec.ivh3 := Convert( slices, 92, ( -9, -8, -7 ) );
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 93 ));
            rec.hhdc := Convert_Hhdc_Type( Get( slices, 94 ));
            rec.xhwght := Convert( slices, 95, ( -9.0, -8.0 ) );
            rec.hhsize := Convert( slices, 96, ( -9, -8 ) );
            rec.hhtype := Convert_Hhtype_Type( Get( slices, 97 ));
            rec.region := Convert_Region_Type( Get( slices, 98 ));
            rec.nch02 := Convert( slices, 99, ( -9, -8 ) );
            rec.nch34 := Convert( slices, 100, ( -9, -8 ) );
            rec.nch511 := Convert( slices, 101, ( -9, -8 ) );
            rec.nch1215 := Convert( slices, 102, ( -9, -8 ) );
            rec.nch1618 := Convert( slices, 103, ( -9, -8 ) );
            rec.nkids := Convert( slices, 104, ( -9, -8 ) );
            rec.nwed := Convert( slices, 105, ( -9, -8 ) );
            rec.npens := Convert( slices, 106, ( -9, -8 ) );
            rec.na75pl := Convert( slices, 107, ( -9, -8 ) );
            rec.agechy := Convert( slices, 108, ( -9, -8 ) );
            rec.ncouple := Convert( slices, 109, ( -9, -8 ) );
            rec.nonepar := Convert( slices, 110, ( -9, -8 ) );
            rec.nemp := Convert( slices, 111, ( -9, -8 ) );
            rec.nwage := Convert( slices, 112, ( -9, -8 ) );
            rec.tenure := Convert_Tenure_Type( Get( slices, 113 ));
            rec.xphsn := Convert( slices, 114, ( -9.0, -8.0, -7.0 ) );
            rec.xphsg := Convert( slices, 115, ( -9.0, -8.0, -7.0 ) );
            rec.xpoil := Convert( slices, 116, ( -9.0, -8.0, -7.0 ) );
            rec.xpgas := Convert( slices, 117, ( -9.0, -8.0, -7.0 ) );
            rec.xplec := Convert( slices, 118, ( -9.0, -8.0, -7.0 ) );
            rec.xpfuel := Convert( slices, 119, ( -9.0, -8.0, -7.0 ) );
            rec.fieqfcb := Convert( slices, 120, ( -9.0, -8.0 ) );
            rec.fieqfca := Convert( slices, 121, ( -9.0, -8.0 ) );
            rec.fihhyr := Convert( slices, 122, ( -9.0, -8.0, -7.0 ) );
            rec.fihhmn := Convert( slices, 123, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyl := Convert( slices, 124, ( -9.0, -8.0, -7.0 ) );
            rec.fihhynl := Convert( slices, 125, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyp := Convert( slices, 126, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyb := Convert( slices, 127, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyt := Convert( slices, 128, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyi := Convert( slices, 129, ( -9.0, -8.0, -7.0 ) );
            rec.fihhml := Convert( slices, 130, (  1 .. 0 => -9.0 ) );
            rec.fihhmnl := Convert( slices, 131, (  1 .. 0 => -9.0 ) );
            rec.fihhmp := Convert( slices, 132, (  1 .. 0 => -9.0 ) );
            rec.fihhmb := Convert( slices, 133, (  1 .. 0 => -9.0 ) );
            rec.fihhmt := Convert( slices, 134, (  1 .. 0 => -9.0 ) );
            rec.fihhmi := Convert( slices, 135, (  1 .. 0 => -9.0 ) );
            rec.hhmove := Convert_Hhmove_Type( Get( slices, 136 ));
            rec.mgnewi := Convert( slices, 137, ( -9, -8, -7, -2, -1 ) );
            rec.xpmgi := Convert( slices, 138, ( -9, -8, -7, -2, -1 ) );
            rec.renti := Convert( slices, 139, ( -9, -8, -7, -4, -3, -2, -1 ) );
            rec.rentgi := Convert( slices, 140, ( -9, -8, -7, -2, -1 ) );
            rec.xphsni := Convert_Jhgpayi_Type( Get( slices, 141 ));
            rec.xphsgi := Convert_Jhgpayi_Type( Get( slices, 142 ));
            rec.fihhmni := Convert_Fihhmni_Type( Get( slices, 143 ));
            rec.fihhmli := Convert_Fihhmbi_Type( Get( slices, 144 ));
            rec.fihmnli := Convert_Fihhmbi_Type( Get( slices, 145 ));
            rec.fihhmpi := Convert_Fihhmbi_Type( Get( slices, 146 ));
            rec.fihhmbi := Convert_Fihhmbi_Type( Get( slices, 147 ));
            rec.fihhmti := Convert_Fihhmbi_Type( Get( slices, 148 ));
            rec.fihhmii := Convert_Fihhmbi_Type( Get( slices, 149 ));
            rec.fihhyri := Convert_Fihhmbi_Type( Get( slices, 150 ));
            rec.fihhyli := Convert_Fihhmbi_Type( Get( slices, 151 ));
            rec.fihhyni := Convert_Fihhmbi_Type( Get( slices, 152 ));
            rec.fihhypi := Convert_Fihhmbi_Type( Get( slices, 153 ));
            rec.fihhybi := Convert_Fihhmbi_Type( Get( slices, 154 ));
            rec.fihhyti := Convert_Fihhmbi_Type( Get( slices, 155 ));
            rec.fihhyii := Convert_Fihhmbi_Type( Get( slices, 156 ));
            rec.hhyoi4 := Convert( slices, 157, ( -9, -8, -7, -2, -1 ) );
            rec.mgyr04 := Convert( slices, 158, ( -9, -8, -7, -2, -1 ) );
            rec.hsyr04 := Convert( slices, 159, ( -9, -8, -7, -2, -1 ) );
            rec.region2 := Convert_Region2_Type( Get( slices, 160 ));
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Hhresp_component ).start_pos = 0 ) then
               index.pointers( Hhresp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Hhresp_component ).counter := index.pointers( Hhresp_component ).counter + 1;
            Put_Index( index_map, index );
            Hhresp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Hhresp_IO.Close( bin_file );
   end Create_Hhresp_Wave_B;




   procedure Create_Hhsamp_Wave_B( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Hhsamp_IO.File_Type;
      rec         : Hhsamp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Hhsamp_IO.Create (bin_file, Hhsamp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.fid := Convert( slices, 2 );
            rec.ivnadd := Convert( slices, 3, ( -9.0, -8.0 ) );
            rec.ivia := Convert_Ivia_Type( Get( slices, 4 ));
--             rec.ivid := Convert( slices, 5 );
            rec.ivlnc := Convert( slices, 6, ( -9, -1 ) );
            rec.ivtnc := Convert( slices, 7, ( -9, -8, -1 ) );
            rec.iviam := Convert_Iviam_Type( Get( slices, 8 ));
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 9 ));
            rec.ivosmrh := Convert( slices, 10, ( -9, -8, -1 ) );
            rec.ivnsmrh := Convert( slices, 11, ( -9, -8, -1 ) );
            rec.hhdc := Convert_Hhdc_Type( Get( slices, 12 ));
            rec.ivips := Convert_Ivips_Type( Get( slices, 13 ));
            rec.xhwght := Convert( slices, 14, ( -9.0, -8.0, -1.0 ) );
            rec.region := Convert_Region_Type( Get( slices, 15 ));
            rec.hhmove := Convert_Hhmove_Type( Get( slices, 16 ));
            rec.ahid := Convert( slices, 17 );
            rec.strata := Convert( slices, 18, ( -9, -8, -1 ) );
            rec.psu := Convert( slices, 19, ( -9, -8, -1 ) );
            rec.region2 := Convert_Region2_Type( Get( slices, 20 ));
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Hhsamp_component ).start_pos = 0 ) then
               index.pointers( Hhsamp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Hhsamp_component ).counter := index.pointers( Hhsamp_component ).counter + 1;
            Put_Index( index_map, index );
            Hhsamp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Hhsamp_IO.Close( bin_file );
   end Create_Hhsamp_Wave_B;




   procedure Create_Income_Wave_B( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Income_IO.File_Type;
      rec         : Income_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Income_IO.Create (bin_file, Income_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.pno := Convert( slices, 1 );
            rec.ficode := Convert_Ficode_Type( Get( slices, 2 ));
            rec.nfr := Convert( slices, 3, (  1 .. 0 => -9 ) );
            rec.frall := Convert_Frall_Type( Get( slices, 4 ));
            rec.fr01 := Convert_Cd1own_Type( Get( slices, 5 ));
            rec.fr02 := Convert_Cd1own_Type( Get( slices, 6 ));
            rec.fr03 := Convert_Cd1own_Type( Get( slices, 7 ));
            rec.fr04 := Convert( slices, 8, ( -9, -8, -2, -1 ) );
            rec.fr05 := Convert_Cd1own_Type( Get( slices, 9 ));
            rec.fr06 := Convert_Cd1own_Type( Get( slices, 10 ));
            rec.fr07 := Convert_Cd1own_Type( Get( slices, 11 ));
            rec.fr08 := Convert_Cd1own_Type( Get( slices, 12 ));
            rec.fr09 := Convert_Cd1own_Type( Get( slices, 13 ));
            rec.fr10 := Convert_Cd1own_Type( Get( slices, 14 ));
            rec.fr11 := Convert_Cd1own_Type( Get( slices, 15 ));
            rec.fr12 := Convert_Cd1own_Type( Get( slices, 16 ));
            rec.fr13 := Convert_Cd1own_Type( Get( slices, 17 ));
            rec.fr14 := Convert_Cd1own_Type( Get( slices, 18 ));
            rec.fr15 := Convert_Cd1own_Type( Get( slices, 19 ));
            rec.fr16 := Convert_Cd1own_Type( Get( slices, 20 ));
            rec.fr17 := Convert_Cd1own_Type( Get( slices, 21 ));
            rec.frnow := Convert_Frnow_Type( Get( slices, 22 ));
            rec.frval := Convert( slices, 23, ( -9.0, -8.0, -3.0, -2.0, -1.0 ) );
            rec.frw := Convert( slices, 24, ( -9.0, -8.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.frjt := Convert_Frjt_Type( Get( slices, 25 ));
            rec.frjtpn := Convert( slices, 26, ( -9, -8, -2, -1 ) );
            rec.hid := Convert( slices, 27 );
            rec.fiseq := Convert( slices, 28 );
            rec.fim09l := Convert( slices, 29, ( -9.0, -8.0, -3.0 ) );
            rec.fim10l := Convert( slices, 30, ( -9.0, -8.0, -3.0 ) );
            rec.fim11l := Convert( slices, 31, ( -9.0, -8.0, -3.0 ) );
            rec.fim12l := Convert( slices, 32, ( -9.0, -8.0, -3.0 ) );
            rec.fim01t := Convert( slices, 33, ( -9.0, -8.0, -3.0 ) );
            rec.fim02t := Convert( slices, 34, ( -9.0, -8.0, -3.0 ) );
            rec.fim03t := Convert( slices, 35, ( -9.0, -8.0, -3.0 ) );
            rec.fim04t := Convert( slices, 36, ( -9.0, -8.0, -3.0 ) );
            rec.fim05t := Convert( slices, 37, ( -9.0, -8.0, -3.0 ) );
            rec.fim06t := Convert( slices, 38, ( -9.0, -8.0, -3.0 ) );
            rec.fim07t := Convert( slices, 39, ( -9.0, -8.0, -3.0 ) );
            rec.fim08t := Convert( slices, 40, ( -9.0, -8.0, -3.0 ) );
            rec.fim09t := Convert( slices, 41, ( -9.0, -8.0, -3.0 ) );
            rec.fim10t := Convert( slices, 42, ( -9.0, -8.0, -3.0 ) );
            rec.fim11t := Convert( slices, 43, ( -9.0, -8.0, -3.0 ) );
            rec.fim12t := Convert( slices, 44, ( -9.0, -8.0, -3.0 ) );
            rec.fim01n := Convert( slices, 45, ( -9.0, -8.0, -3.0 ) );
            rec.frjtvf := Convert_Frjtvf_Type( Get( slices, 46 ));
            rec.frvali := Convert( slices, 47, ( -9, -8, -3, -2, -1 ) );
            rec.pid := Convert( slices, 48 );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Income_component ).start_pos = 0 ) then
               index.pointers( Income_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Income_component ).counter := index.pointers( Income_component ).counter + 1;
            Put_Index( index_map, index );
            Income_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Income_IO.Close( bin_file );
   end Create_Income_Wave_B;




   procedure Create_Indall_Wave_B( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Indall_IO.File_Type;
      rec         : Indall_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Indall_IO.Create (bin_file, Indall_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.pid := Convert( slices, 3 );
            rec.iviow1 := Convert_Iviow1_Type( Get( slices, 4 ));
            rec.hhmem := Convert_Hhmem_Type( Get( slices, 5 ));
            rec.nelyr := Convert( slices, 6, ( -9, -8, -2, -1 ) );
            rec.newhy := Convert_Newhy_Type( Get( slices, 7 ));
            rec.nemnjn := Convert_Nemnjn_Type( Get( slices, 8 ));
            rec.neyrjn := Convert( slices, 9, ( -9, -8, -2, -1 ) );
            rec.ivfio := Convert_Ivfio_Type( Get( slices, 10 ));
            rec.ivrref := Convert_Ivrref_Type( Get( slices, 11 ));
            rec.ivcoop := Convert_Ivcoop_Type( Get( slices, 12 ));
            rec.iodc := Convert_Iodc_Type( Get( slices, 13 ));
            rec.hgr2r := Convert_Hgr2r_Type( Get( slices, 14 ));
            rec.hgsex := Convert_Hgsex_Type( Get( slices, 15 ));
            rec.hgbm := Convert_Hgbm_Type( Get( slices, 16 ));
            rec.hgby := Convert( slices, 17, ( -9, -8, -2, -1 ) );
            rec.mastat := Convert_Mastat_Type( Get( slices, 18 ));
            rec.hgspn := Convert( slices, 19, ( -9, -8, -2, -1 ) );
            rec.hgemp := Convert_Hgemp_Type( Get( slices, 20 ));
            rec.hgfno := Convert( slices, 21, ( -9, -8, -2, -1 ) );
            rec.hgmno := Convert( slices, 22, ( -9, -8, -2, -1 ) );
            rec.hgra := Convert( slices, 23, ( -9, -8, -2, -1 ) );
            rec.age := Convert( slices, 24, ( -9, -8, -2, -1 ) );
            rec.age12 := Convert( slices, 25, ( -9, -8, -2, -1 ) );
            rec.butype := Convert_Butype_Type( Get( slices, 26 ));
            rec.buno := Convert( slices, 27, ( -9, -8 ) );
            rec.nchild := Convert( slices, 28, ( -9, -8 ) );
            rec.depchl := Convert_Depchl_Type( Get( slices, 29 ));
            rec.hoh := Convert_Hoh_Type( Get( slices, 30 ));
            rec.rach16 := Convert_Hhch12_Type( Get( slices, 31 ));
            rec.agei := Convert_Agei_Type( Get( slices, 32 ));
            rec.lrwght := Convert( slices, 33, ( -9.0, -8.0 ) );
            rec.lewght := Convert( slices, 34, ( -9.0, -8.0 ) );
            rec.xrwght := Convert( slices, 35, ( -9.0, -8.0 ) );
            rec.xewght := Convert( slices, 36, ( -9.0, -8.0 ) );
            rec.movest := Convert_Movest_Type( Get( slices, 37 ));
            rec.sampst := Convert_Sampst_Type( Get( slices, 38 ));
            rec.neyrjn4 := Convert( slices, 39, ( -9, -8, -7, -2, -1 ) );
            rec.sppid := Convert( slices, 40 );
            rec.fpid := Convert( slices, 41 );
            rec.mpid := Convert( slices, 42 );
            rec.rapid := Convert( slices, 43 );
            rec.distmov := Convert( slices, 44, ( -9.0, -8.0 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Indall_component ).start_pos = 0 ) then
               index.pointers( Indall_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Indall_component ).counter := index.pointers( Indall_component ).counter + 1;
            Put_Index( index_map, index );
            Indall_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Indall_IO.Close( bin_file );
   end Create_Indall_Wave_B;




   procedure Create_Indresp_Wave_B( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Indresp_IO.File_Type;
      rec         : Indresp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Indresp_IO.Create (bin_file, Indresp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.doid := Convert( slices, 3, ( -9, -7 ) );
            rec.doim := Convert_Doim_Type( Get( slices, 4 ));
            rec.doiy := Convert( slices, 5, ( -9, -8 ) );
            rec.ivsoih := Convert( slices, 6, ( -9, -8 ) );
            rec.ivsoim := Convert( slices, 7, ( -9, -8 ) );
            rec.ivlyr := Convert( slices, 8, ( -9, -8, -7 ) );
            rec.lknbrd := Convert_Aidpl1_Type( Get( slices, 9 ));
            rec.lkmove := Convert_Lkmove_Type( Get( slices, 10 ));
            rec.lkmovy := Convert_Lkmovy_Type( Get( slices, 11 ));
            rec.plnew := Convert( slices, 12, ( -9, -8, -7, -2, -1 ) );
            rec.plnowm := Convert_Jbbgm1_Type( Get( slices, 13 ));
            rec.plnowy := Convert( slices, 14, ( -9, -8, -2, -1 ) );
            rec.movjb := Convert_Aidpl1_Type( Get( slices, 15 ));
            rec.movjba := Convert_Movjba_Type( Get( slices, 16 ));
            rec.movjbb := Convert_Movjba_Type( Get( slices, 17 ));
            rec.movjbc := Convert_Movjba_Type( Get( slices, 18 ));
            rec.movjbd := Convert_Movjba_Type( Get( slices, 19 ));
            rec.movjbe := Convert_Movjba_Type( Get( slices, 20 ));
            rec.movjbf := Convert_Movjba_Type( Get( slices, 21 ));
            rec.movjbg := Convert_Movjba_Type( Get( slices, 22 ));
            rec.movjbh := Convert_Movjba_Type( Get( slices, 23 ));
            rec.movjbi := Convert_Movjba_Type( Get( slices, 24 ));
            rec.movy1 := Convert_Movy1_Type( Get( slices, 25 ));
            rec.movy2 := Convert_Movy2_Type( Get( slices, 26 ));
            rec.dobm := Convert_Cjsem_Type( Get( slices, 27 ));
            rec.doby := Convert( slices, 28, ( -9, -8, -7, -2, -1 ) );
            rec.sex := Convert_Sex_Type( Get( slices, 29 ));
            rec.jbstat := Convert_Jbstat_Type( Get( slices, 30 ));
            rec.edlyr := Convert_Aidpl1_Type( Get( slices, 31 ));
            rec.edendm := Convert_Edendm_Type( Get( slices, 32 ));
            rec.edendy := Convert( slices, 33, ( -9, -8, -7, -3, -2, -1 ) );
            rec.edtype := Convert_Edtype_Type( Get( slices, 34 ));
            rec.qfx := Convert_Aidpl1_Type( Get( slices, 35 ));
            rec.qfxa := Convert_Qfa_Type( Get( slices, 36 ));
            rec.qfxb := Convert_Qfb_Type( Get( slices, 37 ));
            rec.qfxc := Convert_Qfc_Type( Get( slices, 38 ));
            rec.qfxd := Convert_Qfd_Type( Get( slices, 39 ));
            rec.qfxe := Convert_Qfe_Type( Get( slices, 40 ));
            rec.qfxf := Convert_Qff_Type( Get( slices, 41 ));
            rec.qfxg := Convert_Qfg_Type( Get( slices, 42 ));
            rec.qfxh := Convert_Qfh_Type( Get( slices, 43 ));
            rec.qfxi := Convert_Qfi_Type( Get( slices, 44 ));
            rec.qfxj := Convert_Qfj_Type( Get( slices, 45 ));
            rec.qfxk := Convert_Qfk_Type( Get( slices, 46 ));
            rec.qfxl := Convert_Qfl_Type( Get( slices, 47 ));
            rec.qfxm := Convert_Qfm_Type( Get( slices, 48 ));
            rec.qfxn := Convert_Qfn_Type( Get( slices, 49 ));
            rec.qfedx := Convert_Aidpl1_Type( Get( slices, 50 ));
            rec.qfedxa := Convert_Qfedd_Type( Get( slices, 51 ));
            rec.nqfexa := Convert( slices, 52, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxb := Convert_Qfede_Type( Get( slices, 53 ));
            rec.nqfexb := Convert( slices, 54, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxc := Convert_Qfedj_Type( Get( slices, 55 ));
            rec.nqfexc := Convert( slices, 56, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxd := Convert_Qfedxd_Type( Get( slices, 57 ));
            rec.qfedxe := Convert_Qfedk_Type( Get( slices, 58 ));
            rec.nqfexe := Convert( slices, 59, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxf := Convert_Qfedxf_Type( Get( slices, 60 ));
            rec.nqfexf := Convert( slices, 61, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxg := Convert_Qfedm_Type( Get( slices, 62 ));
            rec.nqfexg := Convert( slices, 63, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxh := Convert_Qfedxh_Type( Get( slices, 64 ));
            rec.nqfexh := Convert( slices, 65, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxi := Convert_Qfedo_Type( Get( slices, 66 ));
            rec.nqfexi := Convert( slices, 67, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxj := Convert( slices, 68, ( -9, -8, -7 ) );
            rec.nqfexj := Convert( slices, 69, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxk := Convert_Hlprbm_Type( Get( slices, 70 ));
            rec.nqfexk := Convert( slices, 71, ( -9, -8, -7, -2, -1 ) );
            rec.plbornd := Convert_Plbornd_Type( Get( slices, 72 ));
            rec.plbornc := Convert_Plbornc_Type( Get( slices, 73 ));
            rec.yr2uk := Convert( slices, 74, ( -9, -8, -7, -2, -1 ) );
            rec.race := Convert_Race_Type( Get( slices, 75 ));
            rec.school := Convert_School_Type( Get( slices, 76 ));
            rec.scend := Convert( slices, 77, ( -9, -8, -7, -2, -1 ) );
            rec.sctype := Convert_Sctype_Type( Get( slices, 78 ));
            rec.scnow := Convert_Cjsck2_Type( Get( slices, 79 ));
            rec.fetype := Convert_Fetype_Type( Get( slices, 80 ));
            rec.fenow := Convert_Fenow_Type( Get( slices, 81 ));
            rec.feend := Convert( slices, 82, ( -9, -8, -7, -2, -1 ) );
            rec.qfhas := Convert_Bscon_Type( Get( slices, 83 ));
            rec.qfa := Convert_Qfa_Type( Get( slices, 84 ));
            rec.qfb := Convert_Qfb_Type( Get( slices, 85 ));
            rec.qfc := Convert_Qfc_Type( Get( slices, 86 ));
            rec.qfd := Convert_Qfd_Type( Get( slices, 87 ));
            rec.qfe := Convert_Qfe_Type( Get( slices, 88 ));
            rec.qff := Convert_Qff_Type( Get( slices, 89 ));
            rec.qfg := Convert_Qfg_Type( Get( slices, 90 ));
            rec.qfh := Convert_Qfh_Type( Get( slices, 91 ));
            rec.qfi := Convert_Qfi_Type( Get( slices, 92 ));
            rec.qfj := Convert_Qfj_Type( Get( slices, 93 ));
            rec.qfk := Convert_Qfk_Type( Get( slices, 94 ));
            rec.qfl := Convert_Qfl_Type( Get( slices, 95 ));
            rec.qfm := Convert_Qfm_Type( Get( slices, 96 ));
            rec.qfn := Convert_Qfn_Type( Get( slices, 97 ));
            rec.qfed := Convert_Bscon_Type( Get( slices, 98 ));
            rec.qfeda := Convert_Qfeda_Type( Get( slices, 99 ));
            rec.nqfeda := Convert( slices, 100, ( -9, -8, -7, -2, -1 ) );
            rec.qfedb := Convert_Qfedb_Type( Get( slices, 101 ));
            rec.nqfedb := Convert( slices, 102, ( -9, -8, -7, -2, -1 ) );
            rec.qfedc := Convert_Qfedc_Type( Get( slices, 103 ));
            rec.nqfedc := Convert( slices, 104, ( -9, -8, -7, -2, -1 ) );
            rec.qfedd := Convert_Qfedd_Type( Get( slices, 105 ));
            rec.nqfedd := Convert( slices, 106, ( -9, -8, -7, -2, -1 ) );
            rec.qfede := Convert_Qfede_Type( Get( slices, 107 ));
            rec.nqfede := Convert( slices, 108, ( -9, -8, -7, -2, -1 ) );
            rec.qfedf := Convert_Qfedf_Type( Get( slices, 109 ));
            rec.nqfedf := Convert( slices, 110, ( -9, -8, -7, -2, -1 ) );
            rec.qfedg := Convert_Qfedg_Type( Get( slices, 111 ));
            rec.nqfedg := Convert( slices, 112, ( -9, -8, -7, -2, -1 ) );
            rec.qfedh := Convert_Qfedh_Type( Get( slices, 113 ));
            rec.nqfedh := Convert( slices, 114, ( -9, -8, -7, -2, -1 ) );
            rec.qfedi := Convert_Qfedi_Type( Get( slices, 115 ));
            rec.nqfedi := Convert( slices, 116, ( -9, -8, -7, -2, -1 ) );
            rec.qfedj := Convert_Qfedj_Type( Get( slices, 117 ));
            rec.nqfedj := Convert( slices, 118, ( -9, -8, -7, -2, -1 ) );
            rec.qfedk := Convert_Qfedk_Type( Get( slices, 119 ));
            rec.nqfedk := Convert( slices, 120, ( -9, -8, -7, -2, -1 ) );
            rec.qfedl := Convert_Qfedl_Type( Get( slices, 121 ));
            rec.nqfedl := Convert( slices, 122, ( -9, -8, -7, -2, -1 ) );
            rec.qfedm := Convert_Qfedm_Type( Get( slices, 123 ));
            rec.nqfedm := Convert( slices, 124, ( -9, -8, -7, -2, -1 ) );
            rec.qfedn := Convert_Qfedn_Type( Get( slices, 125 ));
            rec.nqfedn := Convert( slices, 126, ( -9, -8, -7, -2, -1 ) );
            rec.qfedo := Convert_Qfedo_Type( Get( slices, 127 ));
            rec.nqfedo := Convert( slices, 128, ( -9, -8, -7, -2, -1 ) );
            rec.qfedp := Convert( slices, 129, ( -9, -8, -7 ) );
            rec.nqfedp := Convert( slices, 130, ( -9, -8, -7, -2, -1 ) );
            rec.qfedq := Convert_Qfedq_Type( Get( slices, 131 ));
            rec.nqfedq := Convert( slices, 132, ( -9, -8, -7, -2, -1 ) );
            rec.qfedr := Convert_Qfedr_Type( Get( slices, 133 ));
            rec.nqfedr := Convert( slices, 134, ( -9, -8, -7, -2, -1 ) );
            rec.qfeds := Convert_Hlprbm_Type( Get( slices, 135 ));
            rec.nqfeds := Convert( slices, 136, ( -9, -8, -7, -2, -1 ) );
            rec.paperr := Convert_Aidpl1_Type( Get( slices, 137 ));
            rec.paper1 := Convert_Paper1_Type( Get( slices, 138 ));
            rec.paper2 := Convert_Paper2_Type( Get( slices, 139 ));
            rec.paperm := Convert_Paperm_Type( Get( slices, 140 ));
            rec.paperp := Convert_Paperp_Type( Get( slices, 141 ));
            rec.opsocg := Convert_Opsocg_Type( Get( slices, 142 ));
            rec.opsoch := Convert_Opsocg_Type( Get( slices, 143 ));
            rec.opsoci := Convert_Opsocg_Type( Get( slices, 144 ));
            rec.opsocj := Convert_Opsocg_Type( Get( slices, 145 ));
            rec.ivda := Convert_Ivda_Type( Get( slices, 146 ));
            rec.ivdb := Convert_Ivdb_Type( Get( slices, 147 ));
            rec.ivdc := Convert_Ivdc_Type( Get( slices, 148 ));
            rec.ivdd := Convert_Ivdd_Type( Get( slices, 149 ));
            rec.hlstat := Convert_Hlstat_Type( Get( slices, 150 ));
            rec.hlzest := Convert_Hlzest_Type( Get( slices, 151 ));
            rec.hldsbl := Convert_Bscon_Type( Get( slices, 152 ));
            rec.hlprb := Convert( slices, 153, ( -9, -8, -7, -2, -1 ) );
            rec.hlprba := Convert_Hlprba_Type( Get( slices, 154 ));
            rec.hlprbb := Convert_Hlprbb_Type( Get( slices, 155 ));
            rec.hlprbc := Convert_Hlprbc_Type( Get( slices, 156 ));
            rec.hlprbd := Convert_Hlprbd_Type( Get( slices, 157 ));
            rec.hlprbe := Convert_Hlprbe_Type( Get( slices, 158 ));
            rec.hlprbf := Convert_Hlprbf_Type( Get( slices, 159 ));
            rec.hlprbg := Convert_Hlprbg_Type( Get( slices, 160 ));
            rec.hlprbh := Convert_Hlprbh_Type( Get( slices, 161 ));
            rec.hlprbi := Convert_Hlprbi_Type( Get( slices, 162 ));
            rec.hlprbj := Convert_Hlprbj_Type( Get( slices, 163 ));
            rec.hlprbk := Convert_Hlprbk_Type( Get( slices, 164 ));
            rec.hlprbl := Convert_Hlprbl_Type( Get( slices, 165 ));
            rec.hlprbm := Convert_Hlprbm_Type( Get( slices, 166 ));
            rec.hllt := Convert_Bscon_Type( Get( slices, 167 ));
            rec.hllta := Convert_Hllta_Type( Get( slices, 168 ));
            rec.hlltb := Convert_Hlltb_Type( Get( slices, 169 ));
            rec.hlltc := Convert_Hlltc_Type( Get( slices, 170 ));
            rec.hlltd := Convert_Hlltd_Type( Get( slices, 171 ));
            rec.hllte := Convert_Hllte_Type( Get( slices, 172 ));
            rec.hlltw := Convert_Bscon_Type( Get( slices, 173 ));
            rec.hlendw := Convert_Hlendw_Type( Get( slices, 174 ));
            rec.hlltwa := Convert_Hlltwa_Type( Get( slices, 175 ));
            rec.hl2gp := Convert_Hl2gp_Type( Get( slices, 176 ));
            rec.xdts := Convert_Bscon_Type( Get( slices, 177 ));
            rec.nxdts := Convert_Nxdts_Type( Get( slices, 178 ));
            rec.xdt1m := Convert_Xdt1m_Type( Get( slices, 179 ));
            rec.xdt2m := Convert_Xdt2m_Type( Get( slices, 180 ));
            rec.xdt3m := Convert_Xdt2m_Type( Get( slices, 181 ));
            rec.xdt1y := Convert( slices, 182, ( -9, -8, -7, -2, -1 ) );
            rec.xdt2y := Convert( slices, 183, ( -9, -8, -7, -2, -1 ) );
            rec.xdt3y := Convert( slices, 184, ( -9, -8, -7, -2, -1 ) );
            rec.xdt1pl := Convert_Xdt1pl_Type( Get( slices, 185 ));
            rec.xdt2pl := Convert_Xdt1pl_Type( Get( slices, 186 ));
            rec.xdt3pl := Convert_Xdt1pl_Type( Get( slices, 187 ));
            rec.hosp := Convert_Hlsv_Type( Get( slices, 188 ));
            rec.hospd := Convert( slices, 189, ( -9, -8, -7, -2, -1 ) );
            rec.hospch := Convert_Hospch_Type( Get( slices, 190 ));
            rec.hospnhs := Convert_Hospnhs_Type( Get( slices, 191 ));
            rec.hlsv := Convert_Hlsv_Type( Get( slices, 192 ));
            rec.hlsva := Convert_Hlsva_Type( Get( slices, 193 ));
            rec.hlsvan := Convert_Hlsvan_Type( Get( slices, 194 ));
            rec.hlsvaf := Convert_Hlsvaf_Type( Get( slices, 195 ));
            rec.hlsvb := Convert_Hlsvb_Type( Get( slices, 196 ));
            rec.hlsvbn := Convert_Hlsvan_Type( Get( slices, 197 ));
            rec.hlsvbf := Convert_Hlsvaf_Type( Get( slices, 198 ));
            rec.hlsvc := Convert_Hlsvc_Type( Get( slices, 199 ));
            rec.hlsvcn := Convert_Hlsvan_Type( Get( slices, 200 ));
            rec.hlsvcf := Convert_Hlsvaf_Type( Get( slices, 201 ));
            rec.hlsvd := Convert_Hlsvd_Type( Get( slices, 202 ));
            rec.hlsvdn := Convert_Hlsvan_Type( Get( slices, 203 ));
            rec.hlsvdf := Convert_Hlsvaf_Type( Get( slices, 204 ));
            rec.hlsve := Convert_Hlsve_Type( Get( slices, 205 ));
            rec.hlsven := Convert_Hlsvan_Type( Get( slices, 206 ));
            rec.hlsvef := Convert_Hlsvaf_Type( Get( slices, 207 ));
            rec.hlsvf := Convert_Hlsvf_Type( Get( slices, 208 ));
            rec.hlsvfn := Convert_Hlsvan_Type( Get( slices, 209 ));
            rec.hlsvff := Convert_Hlsvaf_Type( Get( slices, 210 ));
            rec.hlsvg := Convert_Hlsvg_Type( Get( slices, 211 ));
            rec.hlsvgn := Convert_Hlsvan_Type( Get( slices, 212 ));
            rec.hlsvgf := Convert_Hlsvaf_Type( Get( slices, 213 ));
            rec.hlsvh := Convert_Hlsvh_Type( Get( slices, 214 ));
            rec.hlsvhn := Convert_Hlsvan_Type( Get( slices, 215 ));
            rec.hlsvhf := Convert_Hlsvaf_Type( Get( slices, 216 ));
            rec.hlsvi := Convert_Hlsvi_Type( Get( slices, 217 ));
            rec.hlsvin := Convert_Hlsvan_Type( Get( slices, 218 ));
            rec.hlsvif := Convert_Hlsvaf_Type( Get( slices, 219 ));
            rec.hlsvj := Convert_Hlsvj_Type( Get( slices, 220 ));
            rec.hlsvjn := Convert_Hlsvan_Type( Get( slices, 221 ));
            rec.hlsvjf := Convert_Hlsvaf_Type( Get( slices, 222 ));
            rec.hlsvk := Convert_Hlsvk_Type( Get( slices, 223 ));
            rec.hlsvkn := Convert_Hlsvan_Type( Get( slices, 224 ));
            rec.hlsvkf := Convert_Hlsvaf_Type( Get( slices, 225 ));
            rec.hlck := Convert_Aidpl1_Type( Get( slices, 226 ));
            rec.hlcka := Convert_Hlcka_Type( Get( slices, 227 ));
            rec.hlckan := Convert_Hlckan_Type( Get( slices, 228 ));
            rec.hlckb := Convert_Hlcka_Type( Get( slices, 229 ));
            rec.hlckbn := Convert_Hlckan_Type( Get( slices, 230 ));
            rec.hlckc := Convert_Hlcka_Type( Get( slices, 231 ));
            rec.hlckcn := Convert_Hlckan_Type( Get( slices, 232 ));
            rec.hlckd := Convert_Hlcka_Type( Get( slices, 233 ));
            rec.hlckdn := Convert_Hlckan_Type( Get( slices, 234 ));
            rec.hlcke := Convert_Hlcka_Type( Get( slices, 235 ));
            rec.hlcken := Convert_Hlckan_Type( Get( slices, 236 ));
            rec.hlckf := Convert_Hlcka_Type( Get( slices, 237 ));
            rec.hlckfn := Convert_Hlckan_Type( Get( slices, 238 ));
            rec.hlckg := Convert_Hlcka_Type( Get( slices, 239 ));
            rec.hlckgn := Convert_Hlckan_Type( Get( slices, 240 ));
            rec.hlckh := Convert_Hlcka_Type( Get( slices, 241 ));
            rec.hlckhn := Convert_Hlckan_Type( Get( slices, 242 ));
            rec.smoker := Convert_Bscon_Type( Get( slices, 243 ));
            rec.ncigs := Convert( slices, 244, ( -9, -8, -7, -2, -1 ) );
            rec.aidhh := Convert_Aidhh_Type( Get( slices, 245 ));
            rec.aidhua := Convert( slices, 246, ( -9, -8, -7, -1 ) );
            rec.aidhub := Convert( slices, 247, ( -9, -8, -7 ) );
            rec.aidhuc := Convert( slices, 248, ( -9, -8, -7 ) );
            rec.aidxhh := Convert_Aidxhh_Type( Get( slices, 249 ));
            rec.naidxhh := Convert_Naidxhh_Type( Get( slices, 250 ));
            rec.aidhu1 := Convert_Aidhu1_Type( Get( slices, 251 ));
            rec.aidhu2 := Convert_Aidhu2_Type( Get( slices, 252 ));
            rec.aidpl1 := Convert_Aidpl1_Type( Get( slices, 253 ));
            rec.aidpl2 := Convert_Aidpl1_Type( Get( slices, 254 ));
            rec.aidhrs := Convert_Aidhrs_Type( Get( slices, 255 ));
            rec.ivma := Convert_Ivda_Type( Get( slices, 256 ));
            rec.ivmb := Convert_Ivdb_Type( Get( slices, 257 ));
            rec.ivmc := Convert_Ivec_Type( Get( slices, 258 ));
            rec.ivmd := Convert_Ivdd_Type( Get( slices, 259 ));
            rec.mlstat := Convert_Mlstat_Type( Get( slices, 260 ));
            rec.nmar := Convert_Nmar_Type( Get( slices, 261 ));
            rec.lcoh := Convert_Aidpl1_Type( Get( slices, 262 ));
            rec.lncoh := Convert( slices, 263, ( -9, -8, -7, -2, -1 ) );
            rec.ladopt := Convert_Aidpl1_Type( Get( slices, 264 ));
            rec.lnadpt := Convert( slices, 265, ( -9, -8, -7, -2, -1 ) );
            rec.lprnt := Convert_Lprnt_Type( Get( slices, 266 ));
            rec.lnprnt := Convert( slices, 267, ( -9, -8, -7, -2, -1 ) );
            rec.cbage := Convert_Cbage_Type( Get( slices, 268 ));
            rec.lchmor := Convert_Lchmor_Type( Get( slices, 269 ));
            rec.lchmorn := Convert( slices, 270, ( -9, -8, -7, -2, -1 ) );
            rec.ivla := Convert_Ivla_Type( Get( slices, 271 ));
            rec.ivlb := Convert_Ivlb_Type( Get( slices, 272 ));
            rec.ivlc := Convert_Ivlc_Type( Get( slices, 273 ));
            rec.ivld := Convert_Ivdd_Type( Get( slices, 274 ));
            rec.ledendm := Convert_Cjsbgm_Type( Get( slices, 275 ));
            rec.ledendy := Convert( slices, 276, ( -9, -8, -7, -2, -1 ) );
            rec.lednow := Convert_Lednow_Type( Get( slices, 277 ));
            rec.jbhas := Convert_Frnow_Type( Get( slices, 278 ));
            rec.jboff := Convert_Jboff_Type( Get( slices, 279 ));
            rec.jboffy := Convert_Jboffy_Type( Get( slices, 280 ));
            rec.jbterm := Convert_Jbterm_Type( Get( slices, 281 ));
            rec.jbsoc := Convert( slices, 282, ( -9, -8, -2, -1 ) );
            rec.jbsic := Convert( slices, 283, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.jbsemp := Convert_Jbsemp_Type( Get( slices, 284 ));
            rec.jbmngr := Convert_Jbmngr_Type( Get( slices, 285 ));
            rec.jbsize := Convert_Jbsize_Type( Get( slices, 286 ));
            rec.jbhrs := Convert( slices, 287, ( -9, -8, -7, -2, -1 ) );
            rec.jbot := Convert( slices, 288, ( -9, -8, -7, -2, -1 ) );
            rec.jbotpd := Convert( slices, 289, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbhrlk := Convert_Jbhrlk_Type( Get( slices, 290 ));
            rec.jbpl := Convert_Jbpl_Type( Get( slices, 291 ));
            rec.jbttwt := Convert( slices, 292, ( -9, -8, -7, -3, -2, -1 ) );
            rec.jbttwm := Convert_Jbttwm_Type( Get( slices, 293 ));
            rec.jbsat1 := Convert_Jbsat1_Type( Get( slices, 294 ));
            rec.jbsat2 := Convert( slices, 295, ( -9, -8, -7, -2, -1 ) );
            rec.jbsat3 := Convert_Jbsat_Type( Get( slices, 296 ));
            rec.jbsat4 := Convert_Jbsat4_Type( Get( slices, 297 ));
            rec.jbsat5 := Convert_Jbsat4_Type( Get( slices, 298 ));
            rec.jbsat6 := Convert_Jbsat4_Type( Get( slices, 299 ));
            rec.jbsat7 := Convert_Jbsat_Type( Get( slices, 300 ));
            rec.jbsat := Convert_Jbsat_Type( Get( slices, 301 ));
            rec.paygl := Convert( slices, 302, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.paygw := Convert( slices, 303, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.paynl := Convert( slices, 304, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.paynw := Convert( slices, 305, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.payslp := Convert_Payslp_Type( Get( slices, 306 ));
            rec.payusl := Convert_Aidpl1_Type( Get( slices, 307 ));
            rec.payu := Convert( slices, 308, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.payuw := Convert( slices, 309, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.payug := Convert_Paylyg_Type( Get( slices, 310 ));
            rec.paydf1 := Convert_Paydf1_Type( Get( slices, 311 ));
            rec.paydf2 := Convert_Paydf2_Type( Get( slices, 312 ));
            rec.paydf3 := Convert_Paydf3_Type( Get( slices, 313 ));
            rec.paydf4 := Convert_Paydf4_Type( Get( slices, 314 ));
            rec.paydf5 := Convert_Paydf5_Type( Get( slices, 315 ));
            rec.paydf6 := Convert_Paydf6_Type( Get( slices, 316 ));
            rec.paydf7 := Convert_Paydf7_Type( Get( slices, 317 ));
            rec.paydf8 := Convert_Paydf8_Type( Get( slices, 318 ));
            rec.jbbgd := Convert( slices, 319, ( -9, -8, -7, -2, -1 ) );
            rec.jbbgm := Convert_Cjsbgm_Type( Get( slices, 320 ));
            rec.jbbgy := Convert( slices, 321, ( -9, -8, -7, -2, -1 ) );
            rec.jbbgly := Convert_Jbbgly_Type( Get( slices, 322 ));
            rec.jbsect := Convert_Jbsect_Type( Get( slices, 323 ));
            rec.jbonus := Convert_Aidpl1_Type( Get( slices, 324 ));
            rec.jbrise := Convert_Aidpl1_Type( Get( slices, 325 ));
            rec.tujbpl := Convert_Aidpl1_Type( Get( slices, 326 ));
            rec.tuin1 := Convert_Aidpl1_Type( Get( slices, 327 ));
            rec.tuin2 := Convert_Aidpl1_Type( Get( slices, 328 ));
            rec.jbopps := Convert_Aidpl1_Type( Get( slices, 329 ));
            rec.jbtime := Convert_Jbtime_Type( Get( slices, 330 ));
            rec.pays := Convert( slices, 331, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.paysw := Convert( slices, 332, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.paysg := Convert_Paylyg_Type( Get( slices, 333 ));
            rec.jbpen := Convert_Aidpl1_Type( Get( slices, 334 ));
            rec.jbpenm := Convert_Aidpl1_Type( Get( slices, 335 ));
            rec.payly := Convert( slices, 336, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.paylyw := Convert( slices, 337, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.paylyg := Convert_Paylyg_Type( Get( slices, 338 ));
            rec.paygyr := Convert( slices, 339, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.paygya := Convert_Paygya_Type( Get( slices, 340 ));
            rec.jsboss := Convert_Jsboss_Type( Get( slices, 341 ));
            rec.jssize := Convert_Jssize_Type( Get( slices, 342 ));
            rec.jshrs := Convert( slices, 343, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jshrlk := Convert_Jbhrlk_Type( Get( slices, 344 ));
            rec.jstime := Convert_Jstime_Type( Get( slices, 345 ));
            rec.jstype := Convert_Jstype_Type( Get( slices, 346 ));
            rec.jsaccs := Convert_Jsaccs_Type( Get( slices, 347 ));
            rec.jsprf := Convert( slices, 348, ( -9, -8, -7, -3, -2, -1 ) );
            rec.jsprbm := Convert_Cjsbgm_Type( Get( slices, 349 ));
            rec.jsprby := Convert( slices, 350, ( -9, -8, -7, -2, -1 ) );
            rec.jsprem := Convert_Cjsbgm_Type( Get( slices, 351 ));
            rec.jsprey := Convert( slices, 352, ( -9, -8, -7, -2, -1 ) );
            rec.jspayl := Convert( slices, 353, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jspybm := Convert_Cjsbgm_Type( Get( slices, 354 ));
            rec.jspyby := Convert( slices, 355, ( -9, -8, -7, -2, -1 ) );
            rec.jspyem := Convert_Cjsbgm_Type( Get( slices, 356 ));
            rec.jspyey := Convert( slices, 357, ( -9, -8, -7, -2, -1 ) );
            rec.jspl := Convert_Jspl_Type( Get( slices, 358 ));
            rec.jsttwt := Convert( slices, 359, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.jsttwm := Convert_Jsttwm_Type( Get( slices, 360 ));
            rec.jssat1 := Convert_Jssat1_Type( Get( slices, 361 ));
            rec.jssat2 := Convert_Jbsat_Type( Get( slices, 362 ));
            rec.jssat3 := Convert_Jbsat_Type( Get( slices, 363 ));
            rec.jssat4 := Convert_Jbsat_Type( Get( slices, 364 ));
            rec.jssat5 := Convert_Jbsat_Type( Get( slices, 365 ));
            rec.jssat := Convert_Jbsat_Type( Get( slices, 366 ));
            rec.jsbgd := Convert( slices, 367, ( -9, -8, -7, -2, -1 ) );
            rec.jsbgm := Convert_Cjsbgm_Type( Get( slices, 368 ));
            rec.jsbgy := Convert( slices, 369, ( -9, -8, -7, -2, -1 ) );
            rec.jbed := Convert_Aidpl1_Type( Get( slices, 370 ));
            rec.jbed1 := Convert_Aidpl1_Type( Get( slices, 371 ));
            rec.jbed2 := Convert_Aidpl1_Type( Get( slices, 372 ));
            rec.jbed3 := Convert_Aidpl1_Type( Get( slices, 373 ));
            rec.jbed4 := Convert_Aidpl1_Type( Get( slices, 374 ));
            rec.jbed5 := Convert_Aidpl1_Type( Get( slices, 375 ));
            rec.jbedh := Convert( slices, 376, ( -9, -8, -7, -2, -1 ) );
            rec.jbedw := Convert( slices, 377, ( -9, -8, -7, -2, -1 ) );
            rec.rach12 := Convert_Hhch12_Type( Get( slices, 378 ));
            rec.jbchc1 := Convert_Jbchc1_Type( Get( slices, 379 ));
            rec.jbchc2 := Convert_Jbchc2_Type( Get( slices, 380 ));
            rec.jbchc3 := Convert_Jbchc3_Type( Get( slices, 381 ));
            rec.xpchcf := Convert_Xpchcf_Type( Get( slices, 382 ));
            rec.xpchc := Convert( slices, 383, ( -9, -8, -7, -2, -1 ) );
            rec.huxpch := Convert_Huxpch_Type( Get( slices, 384 ));
            rec.hunurs := Convert_Hunurs_Type( Get( slices, 385 ));
            rec.julk1 := Convert_Aidpl1_Type( Get( slices, 386 ));
            rec.julk4 := Convert_Bscon_Type( Get( slices, 387 ));
            rec.julkjb := Convert_Aidpl1_Type( Get( slices, 388 ));
            rec.juspec := Convert_Juspec_Type( Get( slices, 389 ));
            rec.jusoc := Convert( slices, 390, ( -9, -8, -7, -2, -1 ) );
            rec.juhrsx := Convert( slices, 391, ( -9, -8, -7, -2, -1 ) );
            rec.jupayx := Convert( slices, 392, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jupayl := Convert( slices, 393, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.juhrsl := Convert( slices, 394, ( -9, -8, -7, -2, -1 ) );
            rec.eaage := Convert_Eaage_Type( Get( slices, 395 ));
            rec.jbub := Convert_Bscon_Type( Get( slices, 396 ));
            rec.jbuby := Convert_Jbuby_Type( Get( slices, 397 ));
            rec.j2has := Convert_Aidpl1_Type( Get( slices, 398 ));
            rec.j2soc := Convert( slices, 399, ( -9, -8, -7, -2, -1 ) );
            rec.j2semp := Convert_J2semp_Type( Get( slices, 400 ));
            rec.j2hrs := Convert( slices, 401, ( -9, -8, -7, -2, -1 ) );
            rec.j2pay := Convert( slices, 402, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbhha := Convert_Aidpl1_Type( Get( slices, 403 ));
            rec.jbhhb := Convert_Aidpl1_Type( Get( slices, 404 ));
            rec.jbhhc := Convert_Aidpl1_Type( Get( slices, 405 ));
            rec.jbhhd := Convert_Aidpl1_Type( Get( slices, 406 ));
            rec.jbhhe := Convert_Aidpl1_Type( Get( slices, 407 ));
            rec.jbhhf := Convert_Aidpl1_Type( Get( slices, 408 ));
            rec.ivea := Convert_Ivda_Type( Get( slices, 409 ));
            rec.iveb := Convert_Ivdb_Type( Get( slices, 410 ));
            rec.ivec := Convert_Ivec_Type( Get( slices, 411 ));
            rec.ived := Convert_Ivdd_Type( Get( slices, 412 ));
            rec.ednew := Convert_Aidpl1_Type( Get( slices, 413 ));
            rec.ednew1 := Convert_Aidpl1_Type( Get( slices, 414 ));
            rec.ednew2 := Convert_Aidpl1_Type( Get( slices, 415 ));
            rec.ednew3 := Convert_Aidpl1_Type( Get( slices, 416 ));
            rec.ednew4 := Convert_Aidpl1_Type( Get( slices, 417 ));
            rec.ednewh := Convert( slices, 418, ( -9, -8, -7, -2, -1 ) );
            rec.edneww := Convert( slices, 419, ( -9, -8, -7, -2, -1 ) );
            rec.nemst := Convert_Nemst_Type( Get( slices, 420 ));
            rec.cjsbgd := Convert( slices, 421, ( -9, -8, -7, -2, -1 ) );
            rec.cjsbgm := Convert_Cjsbgm_Type( Get( slices, 422 ));
            rec.cjsbgy := Convert( slices, 423, ( -9, -8, -7, -2, -1 ) );
            rec.cjsbly := Convert_Cjsbly_Type( Get( slices, 424 ));
            rec.njbs := Convert( slices, 425, ( -9, -8, -7 ) );
            rec.jbhad := Convert_Aidpl1_Type( Get( slices, 426 ));
            rec.jlend := Convert( slices, 427, ( -9, -8, -7, -2, -1 ) );
            rec.jlsoc := Convert( slices, 428, ( -9, -8, -7, -2, -1 ) );
            rec.jlsic := Convert( slices, 429, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jlsemp := Convert_J2semp_Type( Get( slices, 430 ));
            rec.jlboss := Convert_Aidpl1_Type( Get( slices, 431 ));
            rec.jlmngr := Convert_Jlmngr_Type( Get( slices, 432 ));
            rec.jlsize := Convert_Jlsize_Type( Get( slices, 433 ));
            rec.ivja := Convert_Ivda_Type( Get( slices, 434 ));
            rec.ivjb := Convert_Ivdb_Type( Get( slices, 435 ));
            rec.ivjc := Convert_Ivec_Type( Get( slices, 436 ));
            rec.ivjd := Convert_Ivdd_Type( Get( slices, 437 ));
            rec.oppola := Convert_Oppola_Type( Get( slices, 438 ));
            rec.oppolb := Convert_Oppola_Type( Get( slices, 439 ));
            rec.oppolc := Convert_Oppola_Type( Get( slices, 440 ));
            rec.oppold := Convert_Oppola_Type( Get( slices, 441 ));
            rec.vote1 := Convert_Aidpl1_Type( Get( slices, 442 ));
            rec.vote2 := Convert_Aidpl1_Type( Get( slices, 443 ));
            rec.vote4 := Convert_Vote3_Type( Get( slices, 444 ));
            rec.vote5 := Convert_Vote5_Type( Get( slices, 445 ));
            rec.vote7 := Convert_Vote7_Type( Get( slices, 446 ));
            rec.vote8 := Convert_Vote8_Type( Get( slices, 447 ));
            rec.vote6 := Convert_Vote6_Type( Get( slices, 448 ));
            rec.opiss1 := Convert_Opiss1_Type( Get( slices, 449 ));
            rec.opiss2 := Convert_Opiss1_Type( Get( slices, 450 ));
            rec.opiss3 := Convert_Opiss1_Type( Get( slices, 451 ));
            rec.opiss4 := Convert_Opiss1_Type( Get( slices, 452 ));
            rec.opiss5 := Convert_Opiss1_Type( Get( slices, 453 ));
            rec.oppol1 := Convert_Oppol1_Type( Get( slices, 454 ));
            rec.oppol2 := Convert_Oppol2_Type( Get( slices, 455 ));
            rec.orgm := Convert_Aidpl1_Type( Get( slices, 456 ));
            rec.orgma := Convert_Orgma_Type( Get( slices, 457 ));
            rec.orgaa := Convert_Orgaa_Type( Get( slices, 458 ));
            rec.orgmb := Convert_Orgmb_Type( Get( slices, 459 ));
            rec.orgab := Convert_Orgab_Type( Get( slices, 460 ));
            rec.orgmc := Convert_Orgmc_Type( Get( slices, 461 ));
            rec.orgac := Convert_Orgac_Type( Get( slices, 462 ));
            rec.orgmd := Convert_Orgmd_Type( Get( slices, 463 ));
            rec.orgad := Convert_Orgad_Type( Get( slices, 464 ));
            rec.orgme := Convert_Orgme_Type( Get( slices, 465 ));
            rec.orgae := Convert_Orgae_Type( Get( slices, 466 ));
            rec.orgmf := Convert_Orgmf_Type( Get( slices, 467 ));
            rec.orgaf := Convert_Orgaf_Type( Get( slices, 468 ));
            rec.orgmg := Convert_Orgmg_Type( Get( slices, 469 ));
            rec.orgag := Convert_Orgag_Type( Get( slices, 470 ));
            rec.orgmh := Convert_Orgmh_Type( Get( slices, 471 ));
            rec.orgah := Convert_Orgah_Type( Get( slices, 472 ));
            rec.orgmi := Convert_Orgmi_Type( Get( slices, 473 ));
            rec.orgai := Convert_Orgai_Type( Get( slices, 474 ));
            rec.orgmj := Convert_Orgmj_Type( Get( slices, 475 ));
            rec.orgaj := Convert_Orgaj_Type( Get( slices, 476 ));
            rec.orgmk := Convert_Orgmk_Type( Get( slices, 477 ));
            rec.orgak := Convert_Orgak_Type( Get( slices, 478 ));
            rec.orgml := Convert_Orgml_Type( Get( slices, 479 ));
            rec.orgal := Convert_Orgal_Type( Get( slices, 480 ));
            rec.orgmm := Convert_Orgmm_Type( Get( slices, 481 ));
            rec.orgam := Convert_Orgam_Type( Get( slices, 482 ));
            rec.orga := Convert_Aidpl1_Type( Get( slices, 483 ));
            rec.driver := Convert_Aidpl1_Type( Get( slices, 484 ));
            rec.caruse := Convert_Caruse_Type( Get( slices, 485 ));
            rec.ivva := Convert_Ivva_Type( Get( slices, 486 ));
            rec.ivvb := Convert_Ivdb_Type( Get( slices, 487 ));
            rec.ivvc := Convert_Ivfc_Type( Get( slices, 488 ));
            rec.ivvd := Convert_Ivdd_Type( Get( slices, 489 ));
            rec.f101 := Convert_F101_Type( Get( slices, 490 ));
            rec.f102 := Convert_F102_Type( Get( slices, 491 ));
            rec.f103 := Convert_F103_Type( Get( slices, 492 ));
            rec.f104 := Convert( slices, 493, ( -9, -8, -7 ) );
            rec.f105 := Convert_F105_Type( Get( slices, 494 ));
            rec.f106 := Convert_F106_Type( Get( slices, 495 ));
            rec.f116 := Convert_F116_Type( Get( slices, 496 ));
            rec.f117 := Convert_F117_Type( Get( slices, 497 ));
            rec.f118 := Convert_F118_Type( Get( slices, 498 ));
            rec.f119 := Convert_F119_Type( Get( slices, 499 ));
            rec.f120 := Convert_F120_Type( Get( slices, 500 ));
            rec.f121 := Convert_F121_Type( Get( slices, 501 ));
            rec.f122 := Convert_F122_Type( Get( slices, 502 ));
            rec.f123 := Convert_F123_Type( Get( slices, 503 ));
            rec.f124 := Convert_F124_Type( Get( slices, 504 ));
            rec.f131 := Convert_F131_Type( Get( slices, 505 ));
            rec.f132 := Convert_F132_Type( Get( slices, 506 ));
            rec.f133 := Convert_F133_Type( Get( slices, 507 ));
            rec.f134 := Convert_F134_Type( Get( slices, 508 ));
            rec.f135 := Convert_F135_Type( Get( slices, 509 ));
            rec.f136 := Convert_F136_Type( Get( slices, 510 ));
            rec.f137 := Convert_F137_Type( Get( slices, 511 ));
            rec.f138 := Convert_F138_Type( Get( slices, 512 ));
            rec.f139 := Convert_F139_Type( Get( slices, 513 ));
            rec.f140 := Convert_F140_Type( Get( slices, 514 ));
            rec.f141 := Convert_F141_Type( Get( slices, 515 ));
            rec.f151 := Convert_F151_Type( Get( slices, 516 ));
            rec.f152 := Convert_F152_Type( Get( slices, 517 ));
            rec.f153 := Convert_F153_Type( Get( slices, 518 ));
            rec.f154 := Convert_F154_Type( Get( slices, 519 ));
            rec.f155 := Convert_F155_Type( Get( slices, 520 ));
            rec.f156 := Convert_F156_Type( Get( slices, 521 ));
            rec.f157 := Convert_F157_Type( Get( slices, 522 ));
            rec.f158 := Convert_F158_Type( Get( slices, 523 ));
            rec.f159 := Convert_F159_Type( Get( slices, 524 ));
            rec.nf1 := Convert( slices, 525, ( -9, -8, -7, -2, -1 ) );
            rec.fisit := Convert_Fisit_Type( Get( slices, 526 ));
            rec.fisitc := Convert( slices, 527, ( -9, -8, -7, -2, -1 ) );
            rec.fisitx := Convert( slices, 528, ( -9, -8, -7, -2, -1 ) );
            rec.fiyrdi := Convert( slices, 529, ( -9, -8, -7, -2, -1 ) );
            rec.save := Convert_Aidpl1_Type( Get( slices, 530 ));
            rec.saved := Convert( slices, 531, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.savey := Convert_Savey_Type( Get( slices, 532 ));
            rec.pppen := Convert_Aidpl1_Type( Get( slices, 533 ));
            rec.penb4 := Convert_Penb4_Type( Get( slices, 534 ));
            rec.penb4yr := Convert( slices, 535, ( -9, -8, -7, -2, -1 ) );
            rec.penb4v := Convert( slices, 536, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.penb4w := Convert( slices, 537, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.penyr := Convert( slices, 538, ( -9, -8, -7, -2, -1 ) );
            rec.penadd := Convert_Aidpl1_Type( Get( slices, 539 ));
            rec.penadv := Convert( slices, 540, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.penadw := Convert( slices, 541, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.fthh := Convert_Aidpl1_Type( Get( slices, 542 ));
            rec.fthh1 := Convert( slices, 543, ( -9, -8, -7, -2, -1 ) );
            rec.fthh11 := Convert_Fthh11_Type( Get( slices, 544 ));
            rec.fthh12 := Convert_Fthh12_Type( Get( slices, 545 ));
            rec.fthh13 := Convert_Fthh13_Type( Get( slices, 546 ));
            rec.fthh14 := Convert_Fthh14_Type( Get( slices, 547 ));
            rec.fthh15 := Convert_Fthh15_Type( Get( slices, 548 ));
            rec.fthh16 := Convert_Ftexa6_Type( Get( slices, 549 ));
            rec.fthh1v := Convert( slices, 550, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.fthh1w := Convert( slices, 551, ( -9.0, -8.0, -7.0, -5.0, -3.0, -2.0, -1.0 ) );
            rec.fthh2 := Convert( slices, 552, ( -9, -8, -7, -2, -1 ) );
            rec.fthh21 := Convert_Fthh11_Type( Get( slices, 553 ));
            rec.fthh22 := Convert_Fthh12_Type( Get( slices, 554 ));
            rec.fthh23 := Convert_Fthh13_Type( Get( slices, 555 ));
            rec.fthh24 := Convert_Fthh24_Type( Get( slices, 556 ));
            rec.fthh25 := Convert_Fthh15_Type( Get( slices, 557 ));
            rec.fthh26 := Convert_Ftexa6_Type( Get( slices, 558 ));
            rec.fthh2v := Convert( slices, 559, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.fthh2w := Convert( slices, 560, ( -9.0, -8.0, -7.0, -5.0, -3.0, -2.0, -1.0 ) );
            rec.fthh3 := Convert( slices, 561, ( -9, -8, -7, -2, -1 ) );
            rec.fthh31 := Convert_Fthh11_Type( Get( slices, 562 ));
            rec.fthh32 := Convert_Fthh12_Type( Get( slices, 563 ));
            rec.fthh33 := Convert_Fthh13_Type( Get( slices, 564 ));
            rec.fthh34 := Convert_Fthh24_Type( Get( slices, 565 ));
            rec.fthh35 := Convert_Fthh15_Type( Get( slices, 566 ));
            rec.fthh36 := Convert_Ftexa6_Type( Get( slices, 567 ));
            rec.fthh3v := Convert( slices, 568, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.fthh3w := Convert( slices, 569, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.ftexhh := Convert_Aidpl1_Type( Get( slices, 570 ));
            rec.ftexa := Convert_Ftexa_Type( Get( slices, 571 ));
            rec.ftexa1 := Convert_Ftexa1_Type( Get( slices, 572 ));
            rec.ftexa2 := Convert_Ftexa2_Type( Get( slices, 573 ));
            rec.ftexa3 := Convert_Ftexa3_Type( Get( slices, 574 ));
            rec.ftexa4 := Convert_Ftexa4_Type( Get( slices, 575 ));
            rec.ftexa5 := Convert_Ftexa5_Type( Get( slices, 576 ));
            rec.ftexa6 := Convert_Ftexa6_Type( Get( slices, 577 ));
            rec.ftexav := Convert( slices, 578, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ftexaw := Convert( slices, 579, ( -9.0, -8.0, -7.0, -5.0, -3.0, -2.0, -1.0 ) );
            rec.ftexb := Convert_Ftexb_Type( Get( slices, 580 ));
            rec.ftexb1 := Convert_Ftexa1_Type( Get( slices, 581 ));
            rec.ftexb2 := Convert_Ftexa2_Type( Get( slices, 582 ));
            rec.ftexb3 := Convert_Ftexa3_Type( Get( slices, 583 ));
            rec.ftexb4 := Convert_Ftexa4_Type( Get( slices, 584 ));
            rec.ftexb5 := Convert_Ftexa5_Type( Get( slices, 585 ));
            rec.ftexb6 := Convert_Ftexa6_Type( Get( slices, 586 ));
            rec.ftexbv := Convert( slices, 587, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ftexbw := Convert( slices, 588, ( -9.0, -8.0, -7.0, -5.0, -3.0, -2.0, -1.0 ) );
            rec.ftexc := Convert_Ftexc_Type( Get( slices, 589 ));
            rec.ftexc1 := Convert_Ftexa1_Type( Get( slices, 590 ));
            rec.ftexc2 := Convert_Ftexa2_Type( Get( slices, 591 ));
            rec.ftexc3 := Convert_Ftexa3_Type( Get( slices, 592 ));
            rec.ftexc4 := Convert_Ftexa4_Type( Get( slices, 593 ));
            rec.ftexc5 := Convert_Ftexa5_Type( Get( slices, 594 ));
            rec.ftexc6 := Convert_Ftexa6_Type( Get( slices, 595 ));
            rec.ftexcv := Convert( slices, 596, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ftexcw := Convert( slices, 597, ( -9.0, -8.0, -7.0, -5.0, -3.0, -2.0, -1.0 ) );
            rec.spinhh := Convert_Hhch12_Type( Get( slices, 598 ));
            rec.huruns := Convert_Huruns_Type( Get( slices, 599 ));
            rec.huboss := Convert_Huboss_Type( Get( slices, 600 ));
            rec.hudoes := Convert_Hudoes_Type( Get( slices, 601 ));
            rec.fair1 := Convert_Fair1_Type( Get( slices, 602 ));
            rec.hhch12 := Convert_Hhch12_Type( Get( slices, 603 ));
            rec.husits := Convert_Husits_Type( Get( slices, 604 ));
            rec.fair2 := Convert_Fair1_Type( Get( slices, 605 ));
            rec.howlng := Convert( slices, 606, ( -9, -8, -7, -3, -2, -1 ) );
            rec.ivfa := Convert_Ivda_Type( Get( slices, 607 ));
            rec.ivfb := Convert_Ivdb_Type( Get( slices, 608 ));
            rec.ivfc := Convert_Ivfc_Type( Get( slices, 609 ));
            rec.ivfd := Convert_Ivdd_Type( Get( slices, 610 ));
            rec.ivfoih := Convert( slices, 611, ( -9, -8 ) );
            rec.ivfoim := Convert( slices, 612, ( -9, -8 ) );
            rec.ivsc := Convert_Ivsc_Type( Get( slices, 613 ));
            rec.iv1 := Convert_Hhch12_Type( Get( slices, 614 ));
            rec.iv2 := Convert_Iv2_Type( Get( slices, 615 ));
            rec.iv4 := Convert_Iv4_Type( Get( slices, 616 ));
            rec.iv5 := Convert_Iv5_Type( Get( slices, 617 ));
            rec.iv6a := Convert_Hhch12_Type( Get( slices, 618 ));
            rec.iv6b := Convert_Hhch12_Type( Get( slices, 619 ));
            rec.iv6c := Convert_Hhch12_Type( Get( slices, 620 ));
            rec.iv6d := Convert_Hhch12_Type( Get( slices, 621 ));
            rec.iv6e := Convert_Hhch12_Type( Get( slices, 622 ));
            rec.iv6f := Convert_Hhch12_Type( Get( slices, 623 ));
            rec.iv7 := Convert( slices, 624, ( -9, -8, -7 ) );
            rec.ghqa := Convert_Ghqa_Type( Get( slices, 625 ));
            rec.ghqb := Convert_Ghqb_Type( Get( slices, 626 ));
            rec.ghqc := Convert_Ghqc_Type( Get( slices, 627 ));
            rec.ghqd := Convert_Ghqc_Type( Get( slices, 628 ));
            rec.ghqe := Convert_Ghqe_Type( Get( slices, 629 ));
            rec.ghqf := Convert_Ghqe_Type( Get( slices, 630 ));
            rec.ghqg := Convert_Ghqc_Type( Get( slices, 631 ));
            rec.ghqh := Convert_Ghqc_Type( Get( slices, 632 ));
            rec.ghqi := Convert_Ghqb_Type( Get( slices, 633 ));
            rec.ghqj := Convert_Ghqe_Type( Get( slices, 634 ));
            rec.ghqk := Convert_Ghqe_Type( Get( slices, 635 ));
            rec.ghql := Convert_Ghqc_Type( Get( slices, 636 ));
            rec.opfamj := Convert_Opfamj_Type( Get( slices, 637 ));
            rec.opfamk := Convert_Opfamj_Type( Get( slices, 638 ));
            rec.opfaml := Convert_Opfamj_Type( Get( slices, 639 ));
            rec.opfamm := Convert_Opfamj_Type( Get( slices, 640 ));
            rec.opfamn := Convert_Opfamj_Type( Get( slices, 641 ));
            rec.netsx1 := Convert_Netsx1_Type( Get( slices, 642 ));
            rec.netsx2 := Convert_Netsx1_Type( Get( slices, 643 ));
            rec.netsx3 := Convert_Netsx1_Type( Get( slices, 644 ));
            rec.net1wr := Convert_Aidpl1_Type( Get( slices, 645 ));
            rec.net2wr := Convert_Aidpl1_Type( Get( slices, 646 ));
            rec.net3wr := Convert_Aidpl1_Type( Get( slices, 647 ));
            rec.net1rl := Convert_Net1rl_Type( Get( slices, 648 ));
            rec.net2rl := Convert_Net1rl_Type( Get( slices, 649 ));
            rec.net3rl := Convert_Net1rl_Type( Get( slices, 650 ));
            rec.net1ag := Convert( slices, 651, ( -9, -8, -7, -2, -1 ) );
            rec.net2ag := Convert( slices, 652, ( -9, -8, -7, -2, -1 ) );
            rec.net3ag := Convert( slices, 653, ( -9, -8, -7, -2, -1 ) );
            rec.net1kn := Convert_Net1kn_Type( Get( slices, 654 ));
            rec.net2kn := Convert_Net1kn_Type( Get( slices, 655 ));
            rec.net3kn := Convert_Net1kn_Type( Get( slices, 656 ));
            rec.net1ph := Convert_Net1ph_Type( Get( slices, 657 ));
            rec.net2ph := Convert_Net1ph_Type( Get( slices, 658 ));
            rec.net3ph := Convert_Net1ph_Type( Get( slices, 659 ));
            rec.net1lv := Convert_Net1lv_Type( Get( slices, 660 ));
            rec.net2lv := Convert_Net1lv_Type( Get( slices, 661 ));
            rec.net3lv := Convert_Net1lv_Type( Get( slices, 662 ));
            rec.net1jb := Convert_Net1jb_Type( Get( slices, 663 ));
            rec.net2jb := Convert_Net1jb_Type( Get( slices, 664 ));
            rec.net3jb := Convert_Net1jb_Type( Get( slices, 665 ));
            rec.netsoc := Convert( slices, 666, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.prrs2i := Convert_Prrs2i_Type( Get( slices, 667 ));
            rec.pripn := Convert( slices, 668, ( -9, -8 ) );
            rec.prwhy := Convert_Prwhy_Type( Get( slices, 669 ));
            rec.pplevr := Convert_Plever_Type( Get( slices, 670 ));
            rec.prfehq := Convert_Prfehq_Type( Get( slices, 671 ));
            rec.prsehq := Convert_Prsehq_Type( Get( slices, 672 ));
            rec.prfitb := Convert_Prfitb_Type( Get( slices, 673 ));
            rec.pim1 := Convert_Pim1_Type( Get( slices, 674 ));
            rec.pim2 := Convert_Pim1_Type( Get( slices, 675 ));
            rec.prjbft := Convert_Prjbft_Type( Get( slices, 676 ));
            rec.pid := Convert( slices, 677 );
            rec.iviow1 := Convert_Iviow1_Type( Get( slices, 678 ));
            rec.hhmem := Convert_Hhmem_Type( Get( slices, 679 ));
            rec.nelyr := Convert( slices, 680, ( -9, -8, -2, -1 ) );
            rec.newhy := Convert_Newhy_Type( Get( slices, 681 ));
            rec.nemnjn := Convert_Nemnjn_Type( Get( slices, 682 ));
            rec.neyrjn := Convert( slices, 683, ( -9, -8, -2, -1 ) );
            rec.ivfio := Convert_Ivfio_Type( Get( slices, 684 ));
            rec.ivcoop := Convert_Ivcoop_Type( Get( slices, 685 ));
            rec.iodc := Convert_Iodc_Type( Get( slices, 686 ));
            rec.hgr2r := Convert_Hgr2r_Type( Get( slices, 687 ));
            rec.hgsex := Convert_Hgsex_Type( Get( slices, 688 ));
            rec.hgbm := Convert_Hgbm_Type( Get( slices, 689 ));
            rec.hgby := Convert( slices, 690, ( -2, -1 ) );
            rec.mastat := Convert_Mastat_Type( Get( slices, 691 ));
            rec.hgspn := Convert( slices, 692, ( -9, -8, -2, -1 ) );
            rec.hgemp := Convert_Hgemp_Type( Get( slices, 693 ));
            rec.hgfno := Convert( slices, 694, ( -9, -8, -2, -1 ) );
            rec.hgmno := Convert( slices, 695, ( -9, -8, -2, -1 ) );
            rec.hgra := Convert( slices, 696, ( -9, -8, -2, -1 ) );
            rec.age := Convert( slices, 697, ( -9, -8 ) );
            rec.age12 := Convert( slices, 698, ( -9, -8 ) );
            rec.butype := Convert_Butype_Type( Get( slices, 699 ));
            rec.buno := Convert( slices, 700, ( -9, -8 ) );
            rec.nchild := Convert( slices, 701, ( -9, -8 ) );
            rec.hoh := Convert_Hoh_Type( Get( slices, 702 ));
            rec.rach16 := Convert_Hhch12_Type( Get( slices, 703 ));
            rec.sampst := Convert_Sampst_Type( Get( slices, 704 ));
            rec.movest := Convert_Movest_Type( Get( slices, 705 ));
            rec.region := Convert_Region_Type( Get( slices, 706 ));
            rec.hhsize := Convert( slices, 707, ( -9, -8 ) );
            rec.hhtype := Convert_Hhtype_Type( Get( slices, 708 ));
            rec.tenure := Convert_Tenure_Type( Get( slices, 709 ));
            rec.qfedhi := Convert_Qfedhi_Type( Get( slices, 710 ));
            rec.qfvoc := Convert_Qfvoc_Type( Get( slices, 711 ));
            rec.qfachi := Convert_Qfachi_Type( Get( slices, 712 ));
            rec.jbft := Convert_Jbft_Type( Get( slices, 713 ));
            rec.payg := Convert( slices, 714, ( -9.0, -8.0, -7.0 ) );
            rec.payn := Convert( slices, 715, ( -9.0, -8.0, -7.0 ) );
            rec.paygu := Convert( slices, 716, ( -9.0, -8.0, -7.0 ) );
            rec.paynu := Convert( slices, 717, ( -9.0, -8.0, -7.0 ) );
            rec.paygty := Convert( slices, 718, ( -9.0, -8.0, -7.0 ) );
            rec.paygly := Convert( slices, 719, ( -9.0, -8.0, -7.0 ) );
            rec.paynty := Convert( slices, 720, ( -9.0, -8.0, -7.0 ) );
            rec.paynly := Convert( slices, 721, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jsprof := Convert( slices, 722, ( -9.0, -8.0, -7.0 ) );
            rec.jspayg := Convert( slices, 723, ( -9.0, -8.0, -7.0 ) );
            rec.cjsten := Convert( slices, 724, ( -9.0, -8.0, -7.0 ) );
            rec.cjswk9 := Convert( slices, 725, ( -9.0, -8.0, -7.0 ) );
            rec.jlid := Convert_Jlid_Type( Get( slices, 726 ));
            rec.jlyid := Convert_Jlyid_Type( Get( slices, 727 ));
            rec.jtyid := Convert_Jtyid_Type( Get( slices, 728 ));
            rec.jbseg := Convert_Jbseg_Type( Get( slices, 729 ));
            rec.jbgold := Convert( slices, 730, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbrgsc := Convert_Jbrgsc_Type( Get( slices, 731 ));
            rec.jbisco := Convert( slices, 732 );
            rec.jbcssm := Convert( slices, 733, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbcssf := Convert( slices, 734, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbhgs := Convert( slices, 735, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbsec := Convert_Jbsec_Type( Get( slices, 736 ));
            rec.njbwks := Convert( slices, 737, ( -9.0, -8.0, -7.0 ) );
            rec.njuwks := Convert( slices, 738, ( -9.0, -8.0, -7.0 ) );
            rec.njiwks := Convert( slices, 739, ( -9.0, -8.0, -7.0 ) );
            rec.njbnew := Convert( slices, 740, ( -9, -8, -7 ) );
            rec.njbsp := Convert( slices, 741, ( -9, -8, -7 ) );
            rec.njusp := Convert( slices, 742, ( -9, -8, -7 ) );
            rec.njisp := Convert( slices, 743, ( -9, -8, -7 ) );
            rec.jbstatl := Convert( slices, 744, ( -9, -8, -7, -2, -1 ) );
            rec.jbstatt := Convert( slices, 745, ( -9, -8, -7, -2, -1 ) );
            rec.jbsocly := Convert( slices, 746, ( -9, -8, -7 ) );
            rec.jlseg := Convert_Jlseg_Type( Get( slices, 747 ));
            rec.jlgold := Convert( slices, 748, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlrgsc := Convert_Jlrgsc_Type( Get( slices, 749 ));
            rec.jlisco := Convert( slices, 750 );
            rec.jlcssm := Convert( slices, 751, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlcssf := Convert( slices, 752, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlhgs := Convert( slices, 753, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlsec := Convert_Jlsec_Type( Get( slices, 754 ));
            rec.norgm := Convert( slices, 755, ( -9, -8, -7 ) );
            rec.norga := Convert( slices, 756, ( -9, -8, -7 ) );
            rec.fimnp := Convert( slices, 757, ( -9.0, -8.0, -7.0 ) );
            rec.fimnb := Convert( slices, 758, ( -9.0, -8.0, -7.0 ) );
            rec.fimni := Convert( slices, 759, ( -9.0, -8.0, -7.0 ) );
            rec.fimnt := Convert( slices, 760, ( -9.0, -8.0, -7.0 ) );
            rec.fimnl := Convert( slices, 761, ( -9.0, -8.0, -7.0 ) );
            rec.fimnnl := Convert( slices, 762, ( -9.0, -8.0, -7.0 ) );
            rec.fimn := Convert( slices, 763, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrl := Convert( slices, 764, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrnl := Convert( slices, 765, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrp := Convert( slices, 766, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrb := Convert( slices, 767, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrt := Convert( slices, 768, ( -9.0, -8.0, -7.0 ) );
            rec.fiyri := Convert( slices, 769, ( -9.0, -8.0, -7.0 ) );
            rec.fiyr := Convert( slices, 770, ( -9.0, -8.0, -7.0 ) );
            rec.fihhmn := Convert( slices, 771, ( -9.0, -8.0, -7.0 ) );
            rec.hlghq1 := Convert( slices, 772, ( -9, -8, -7 ) );
            rec.hlghq2 := Convert( slices, 773, ( -9, -8, -7 ) );
            rec.spjb := Convert_Spjb_Type( Get( slices, 774 ));
            rec.spsoc := Convert( slices, 775, ( -9.0, -8.0 ) );
            rec.spjbhr := Convert( slices, 776, ( -9, -8, -7 ) );
            rec.spjbot := Convert( slices, 777, ( -9, -8, -7 ) );
            rec.sppayg := Convert( slices, 778, ( -9.0, -8.0, -7.0 ) );
            rec.spjbyr := Convert( slices, 779, ( -9, -8, -7 ) );
            rec.lrwght := Convert( slices, 780 );
            rec.lewght := Convert( slices, 781 );
            rec.xrwght := Convert( slices, 782 );
            rec.xewght := Convert( slices, 783 );
            rec.j2payi := Convert( slices, 784, ( -9, -8, -7, -3, -2, -1 ) );
            rec.fiyrdii := Convert_Fiyrdii_Type( Get( slices, 785 ));
            rec.prfitbi := Convert_Prfitbi_Type( Get( slices, 786 ));
            rec.paygui := Convert_Fimnbi_Type( Get( slices, 787 ));
            rec.paynui := Convert_Fimnbi_Type( Get( slices, 788 ));
            rec.paygti := Convert_Fimnbi_Type( Get( slices, 789 ));
            rec.paygli := Convert_Fimnbi_Type( Get( slices, 790 ));
            rec.paynti := Convert_Fimnbi_Type( Get( slices, 791 ));
            rec.paynli := Convert_Fimnbi_Type( Get( slices, 792 ));
            rec.jsprofi := Convert_Fimnbi_Type( Get( slices, 793 ));
            rec.jspaygi := Convert_Fimnbi_Type( Get( slices, 794 ));
            rec.fimnpi := Convert_Fimnbi_Type( Get( slices, 795 ));
            rec.fimnbi := Convert_Fimnbi_Type( Get( slices, 796 ));
            rec.fimnii := Convert_Fimnii_Type( Get( slices, 797 ));
            rec.fimnti := Convert_Fimnii_Type( Get( slices, 798 ));
            rec.fimnnli := Convert_Fimnbi_Type( Get( slices, 799 ));
            rec.fimnli := Convert_Fimnbi_Type( Get( slices, 800 ));
            rec.fimnthi := Convert_Fimnii_Type( Get( slices, 801 ));
            rec.fiyrli := Convert_Fimnbi_Type( Get( slices, 802 ));
            rec.fiyrnli := Convert_Fimnbi_Type( Get( slices, 803 ));
            rec.fiyrpi := Convert_Fimnii_Type( Get( slices, 804 ));
            rec.fiyrbi := Convert_Fimnbi_Type( Get( slices, 805 ));
            rec.fiyrti := Convert_Fimnbi_Type( Get( slices, 806 ));
            rec.fiyrii := Convert_Fimnbi_Type( Get( slices, 807 ));
            rec.fiyeari := Convert_Fimnbi_Type( Get( slices, 808 ));
            rec.sppaygi := Convert_Prfitbi_Type( Get( slices, 809 ));
            rec.fihhmni := Convert_Fihhmni_Type( Get( slices, 810 ));
            rec.event1 := Convert( slices, 811, ( -9, -8, -7, -1 ) );
            rec.event1s := Convert( slices, 812, ( -9, -8, -7 ) );
            rec.event2 := Convert( slices, 813, ( -9, -8, -7, -1 ) );
            rec.event2s := Convert( slices, 814, ( -9, -8, -7 ) );
            rec.event3 := Convert( slices, 815, ( -9, -8, -7, -1 ) );
            rec.event3s := Convert( slices, 816, ( -9, -8, -7 ) );
            rec.event4 := Convert( slices, 817, ( -9, -8, -7, -1 ) );
            rec.event4s := Convert( slices, 818, ( -9, -8, -7 ) );
            rec.mrjend := Convert( slices, 819, ( -9, -8, -7, -3, -2, -1 ) );
            rec.mrjsoc := Convert( slices, 820, ( -9, -8, -7, -3 ) );
            rec.mrjsic := Convert( slices, 821, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjsemp := Convert_Mrjsemp_Type( Get( slices, 822 ));
            rec.mrjboss := Convert_Mrjboss_Type( Get( slices, 823 ));
            rec.mrjmngr := Convert_Mrjmngr_Type( Get( slices, 824 ));
            rec.mrjsize := Convert_Mrjsize_Type( Get( slices, 825 ));
            rec.mrjseg := Convert_Maseg_Type( Get( slices, 826 ));
            rec.mrjgold := Convert( slices, 827, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjrgsc := Convert_Margsc_Type( Get( slices, 828 ));
            rec.mrjisco := Convert( slices, 829 );
            rec.mrjcssm := Convert( slices, 830, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjcssf := Convert( slices, 831, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjhgs := Convert( slices, 832, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjsec := Convert_J1sec_Type( Get( slices, 833 ));
            rec.doiy4 := Convert( slices, 834, ( -9, -8, -7, -2, -1 ) );
            rec.plnowy4 := Convert( slices, 835, ( -9, -8, -7, -2, -1 ) );
            rec.edendy4 := Convert( slices, 836, ( -9, -8, -7, -3, -2, -1 ) );
            rec.yr2uk4 := Convert( slices, 837, ( -9, -8, -7, -2, -1 ) );
            rec.ledeny4 := Convert( slices, 838, ( -9, -8, -7, -2, -1 ) );
            rec.jbbgy4 := Convert( slices, 839, ( -9, -8, -7, -2, -1 ) );
            rec.jsprby4 := Convert( slices, 840, ( -9, -8, -7, -2, -1 ) );
            rec.jsprey4 := Convert( slices, 841, ( -9, -8, -7, -2, -1 ) );
            rec.jspyby4 := Convert( slices, 842, ( -9, -8, -7, -2, -1 ) );
            rec.jspyey4 := Convert( slices, 843, ( -9, -8, -7, -2, -1 ) );
            rec.jsbgy4 := Convert( slices, 844, ( -9, -8, -7, -2, -1 ) );
            rec.cjsbgy4 := Convert( slices, 845, ( -9, -8, -7, -2, -1 ) );
            rec.jlend4 := Convert( slices, 846, ( -9, -8, -7, -2, -1 ) );
            rec.penb4y4 := Convert( slices, 847, ( -9, -8, -7, -2, -1 ) );
            rec.penyr4 := Convert( slices, 848, ( -9, -8, -7, -2, -1 ) );
            rec.neyrjn4 := Convert( slices, 849, ( -9, -8, -7, -2, -1 ) );
            rec.sppid := Convert( slices, 850 );
            rec.fpid := Convert( slices, 851 );
            rec.mpid := Convert( slices, 852 );
            rec.distmov := Convert( slices, 853, ( -9.0, -8.0, -7.0 ) );
            rec.region2 := Convert_Region2_Type( Get( slices, 854 ));
            rec.isced := Convert_Isced_Type( Get( slices, 855 ));
            rec.casmin := Convert_Casmin_Type( Get( slices, 856 ));
            rec.jbiscon := Convert( slices, 857, ( -9, -8, -7, -2, -1 ) );
            rec.jliscon := Convert( slices, 858, ( -9, -8, -7, -2, -1 ) );
            rec.mrjiscn := Convert( slices, 859, ( -9, -8, -7, -2, -1 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Indresp_component ).start_pos = 0 ) then
               index.pointers( Indresp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Indresp_component ).counter := index.pointers( Indresp_component ).counter + 1;
            Put_Index( index_map, index );
            Indresp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Indresp_IO.Close( bin_file );
   end Create_Indresp_Wave_B;




   procedure Create_Indsamp_Wave_B( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Indsamp_IO.File_Type;
      rec         : Indsamp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Indsamp_IO.Create (bin_file, Indsamp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.pid := Convert( slices, 3 );
            rec.iviow1 := Convert_Iviow1_Type( Get( slices, 4 ));
            rec.ivelig := Convert_Ivelig_Type( Get( slices, 5 ));
            rec.hhmem := Convert_Hhmem_Type( Get( slices, 6 ));
            rec.nelyr := Convert( slices, 7, ( -9, -8, -2, -1 ) );
            rec.newhy := Convert_Newhy_Type( Get( slices, 8 ));
            rec.nemnjn := Convert_Nemnjn_Type( Get( slices, 9 ));
            rec.neyrjn := Convert( slices, 10, ( -9, -8, -2, -1 ) );
            rec.leaver := Convert_Leaver_Type( Get( slices, 11 ));
            rec.lvwhy := Convert_Lvwhy_Type( Get( slices, 12 ));
            rec.lvmn := Convert_Lvmn_Type( Get( slices, 13 ));
            rec.lvyr := Convert( slices, 14, ( -9, -8, -2, -1 ) );
            rec.lvloc := Convert_Lvloc_Type( Get( slices, 15 ));
            rec.ivfio := Convert_Ivfio_Type( Get( slices, 16 ));
            rec.ivrref := Convert_Ivrref_Type( Get( slices, 17 ));
            rec.ivcoop := Convert_Ivcoop_Type( Get( slices, 18 ));
            rec.iodc := Convert_Iodc_Type( Get( slices, 19 ));
            rec.ivmvst := Convert_Ivmvst_Type( Get( slices, 20 ));
            rec.finloc := Convert_Finloc_Type( Get( slices, 21 ));
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 22 ));
            rec.sampst := Convert_Sampst_Type( Get( slices, 23 ));
            rec.movest := Convert_Movest_Type( Get( slices, 24 ));
            rec.lewght := Convert( slices, 25, ( -9.0, -8.0, -1.0 ) );
            rec.lrwght := Convert( slices, 26, ( -9.0, -8.0, -1.0 ) );
            rec.neyrjn4 := Convert( slices, 27, ( -9, -8, -7, -2, -1 ) );
            rec.lvyr4 := Convert( slices, 28, ( -9, -8, -7, -2, -1 ) );
            rec.distmov := Convert( slices, 29, ( -9.0, -8.0 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Indsamp_component ).start_pos = 0 ) then
               index.pointers( Indsamp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Indsamp_component ).counter := index.pointers( Indsamp_component ).counter + 1;
            Put_Index( index_map, index );
            Indsamp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Indsamp_IO.Close( bin_file );
   end Create_Indsamp_Wave_B;




   procedure Create_Jobhist_Wave_B( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Jobhist_IO.File_Type;
      rec         : Jobhist_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Jobhist_IO.Create (bin_file, Jobhist_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.jhstat := Convert_Jhstat_Type( Get( slices, 3 ));
            rec.jhbgd := Convert( slices, 4, ( -9, -8, -7, -2, -1 ) );
            rec.jhbgm := Convert_Jbbgm1_Type( Get( slices, 5 ));
            rec.jhbgy := Convert( slices, 6, ( -9, -8, -2, -1 ) );
            rec.jspno := Convert( slices, 7 );
            rec.jhsoc := Convert( slices, 8, ( -9, -8, -2, -1 ) );
            rec.jhsemp := Convert_Jhsemp_Type( Get( slices, 9 ));
            rec.jhboss := Convert_Bscon_Type( Get( slices, 10 ));
            rec.jhsect := Convert_Jhsect_Type( Get( slices, 11 ));
            rec.jhmngr := Convert_Jhmngr_Type( Get( slices, 12 ));
            rec.jhpldf := Convert_Jhpldf_Type( Get( slices, 13 ));
            rec.jhsic := Convert( slices, 14, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.jhsize := Convert_Jhsize_Type( Get( slices, 15 ));
            rec.jhpayl := Convert( slices, 16, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhpylw := Convert( slices, 17, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.jhpylg := Convert_Jhpylg_Type( Get( slices, 18 ));
            rec.jhstpy := Convert_Jhstpy_Type( Get( slices, 19 ));
            rec.jblky := Convert_Jblky_Type( Get( slices, 20 ));
            rec.jhendd := Convert( slices, 21, ( -9, -8, -7, -2, -1 ) );
            rec.jhendm := Convert_Jbbgm1_Type( Get( slices, 22 ));
            rec.jhendy := Convert( slices, 23, ( -9, -8, -2, -1 ) );
            rec.jha9ly := Convert_Jha9ly_Type( Get( slices, 24 ));
            rec.jhseg := Convert_Jhseg_Type( Get( slices, 25 ));
            rec.jhgold := Convert( slices, 26, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhrgsc := Convert_Jhrgsc_Type( Get( slices, 27 ));
            rec.jhisco := Convert( slices, 28, ( -9, -8 ) );
            rec.jhcssm := Convert( slices, 29, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhcssf := Convert( slices, 30, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhhgs := Convert( slices, 31, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhsec := Convert_Jhsec_Type( Get( slices, 32 ));
            rec.jhspw := Convert( slices, 33, ( -9.0, -8.0 ) );
            rec.jhgpay := Convert( slices, 34, ( -9.0, -8.0, -7.0 ) );
            rec.jhnpay := Convert( slices, 35, ( -9.0, -8.0, -7.0, -1.0 ) );
            rec.jhgpayi := Convert_Jhgpayi_Type( Get( slices, 36 ));
            rec.jhnpayi := Convert_Jhgpayi_Type( Get( slices, 37 ));
            rec.jhbgy4 := Convert( slices, 38, ( -9, -8, -7, -2, -1 ) );
            rec.jhendy4 := Convert( slices, 39, ( -9, -8, -7, -2, -1 ) );
            rec.pid := Convert( slices, 40 );
            rec.jhiscon := Convert( slices, 41, ( -9, -8, -7, -2, -1 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Jobhist_component ).start_pos = 0 ) then
               index.pointers( Jobhist_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Jobhist_component ).counter := index.pointers( Jobhist_component ).counter + 1;
            Put_Index( index_map, index );
            Jobhist_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Jobhist_IO.Close( bin_file );
   end Create_Jobhist_Wave_B;




   procedure Create_Lifemst_Wave_B( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Lifemst_IO.File_Type;
      rec         : Lifemst_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Lifemst_IO.Create (bin_file, Lifemst_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.leshno := Convert( slices, 3 );
            rec.leshst := Convert_Leshst_Type( Get( slices, 4 ));
            rec.leshem := Convert_Leshem_Type( Get( slices, 5 ));
            rec.leshey := Convert( slices, 6, ( -9, -8, -2, -1 ) );
            rec.leshne := Convert_Lcsne_Type( Get( slices, 7 ));
            rec.leshsm := Convert_Leshem_Type( Get( slices, 8 ));
            rec.leshsy := Convert( slices, 9, ( -9, -8, -2, -1 ) );
            rec.leslen := Convert( slices, 10, ( -9.0, -3.0 ) );
            rec.leshey4 := Convert( slices, 11, ( -9, -8, -7, -2, -1 ) );
            rec.leshsy4 := Convert( slices, 12, ( -9, -8, -7, -2, -1 ) );
            rec.pid := Convert( slices, 13 );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Lifemst_component ).start_pos = 0 ) then
               index.pointers( Lifemst_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Lifemst_component ).counter := index.pointers( Lifemst_component ).counter + 1;
            Put_Index( index_map, index );
            Lifemst_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Lifemst_IO.Close( bin_file );
   end Create_Lifemst_Wave_B;




   procedure Create_Marriag_Wave_B( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Marriag_IO.File_Type;
      rec         : Marriag_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Marriag_IO.Create (bin_file, Marriag_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.lmarm := Convert_Lacbm_Type( Get( slices, 3 ));
            rec.lmary := Convert( slices, 4, ( -9, -8, -2, -1 ) );
            rec.lmcoh := Convert_Frnow_Type( Get( slices, 5 ));
            rec.lmcbm := Convert_Lacbm_Type( Get( slices, 6 ));
            rec.lmcby := Convert( slices, 7, ( -9, -8, -2, -1 ) );
            rec.lmend := Convert_Lmend_Type( Get( slices, 8 ));
            rec.lmwwm := Convert_Lacbm_Type( Get( slices, 9 ));
            rec.lmwwy := Convert( slices, 10, ( -9, -8, -2, -1 ) );
            rec.lmdvm := Convert_Lacbm_Type( Get( slices, 11 ));
            rec.lmdvy := Convert( slices, 12, ( -9, -8, -2, -1 ) );
            rec.lmspm := Convert_Lacbm_Type( Get( slices, 13 ));
            rec.lmspy := Convert( slices, 14, ( -9, -8, -2, -1 ) );
            rec.marno := Convert( slices, 15 );
            rec.mpno := Convert( slices, 16, ( -8, -1 ) );
            rec.mrmseq := Convert( slices, 17, (  1 .. 0 => -8 ) );
            rec.lmary4 := Convert( slices, 18, ( -9, -8, -7, -2, -1 ) );
            rec.lmcby4 := Convert( slices, 19, ( -9, -8, -7, -2, -1 ) );
            rec.lmwwy4 := Convert( slices, 20, ( -9, -8, -7, -2, -1 ) );
            rec.lmdvy4 := Convert( slices, 21, ( -9, -8, -7, -2, -1 ) );
            rec.lmspy4 := Convert( slices, 22, ( -9, -8, -7, -2, -1 ) );
            rec.pid := Convert( slices, 23 );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Marriag_component ).start_pos = 0 ) then
               index.pointers( Marriag_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Marriag_component ).counter := index.pointers( Marriag_component ).counter + 1;
            Put_Index( index_map, index );
            Marriag_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Marriag_IO.Close( bin_file );
   end Create_Marriag_Wave_B;




   procedure Create_Egoalt_Wave_C( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Egoalt_IO.File_Type;
      rec         : Egoalt_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Egoalt_IO.Create (bin_file, Egoalt_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.opno := Convert( slices, 3, (  1 .. 0 => -9 ) );
            rec.rel := Convert_Rel_Type( Get( slices, 4 ));
            rec.sex := Convert_Sex_Type( Get( slices, 5 ));
            rec.osex := Convert_Hgsex_Type( Get( slices, 6 ));
            rec.lwstat := Convert_Lwstat_Type( Get( slices, 7 ));
            rec.nwstat := Convert_Nwstat_Type( Get( slices, 8 ));
            rec.pid := Convert( slices, 9 );
            rec.opid := Convert( slices, 10 );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Egoalt_component ).start_pos = 0 ) then
               index.pointers( Egoalt_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Egoalt_component ).counter := index.pointers( Egoalt_component ).counter + 1;
            Put_Index( index_map, index );
            Egoalt_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Egoalt_IO.Close( bin_file );
   end Create_Egoalt_Wave_C;




   procedure Create_Hhresp_Wave_C( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Hhresp_IO.File_Type;
      rec         : Hhresp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Hhresp_IO.Create (bin_file, Hhresp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.hhdoi := Convert( slices, 2, ( -9, -8, -7 ) );
            rec.hhmoi := Convert_Doim_Type( Get( slices, 3 ));
            rec.hhyoi := Convert( slices, 4, ( -9, -8, -7 ) );
            rec.hstype := Convert_Hstype_Type( Get( slices, 5 ));
            rec.hsrins := Convert_Cjsck2_Type( Get( slices, 6 ));
            rec.hsroom := Convert( slices, 7, ( -9, -8, -7, -2, -1 ) );
            rec.hsownd := Convert_Hsownd_Type( Get( slices, 8 ));
            rec.hsowr1 := Convert( slices, 9, ( -9, -8, -7, -2, -1 ) );
            rec.hsowr2 := Convert( slices, 10, ( -9, -8, -7, -2, -1 ) );
            rec.mghave := Convert_Mghave_Type( Get( slices, 11 ));
            rec.hsowrp := Convert_Bscon_Type( Get( slices, 12 ));
            rec.mgynot := Convert_Mgynot_Type( Get( slices, 13 ));
            rec.hscost := Convert( slices, 14, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.mgly := Convert_Bscon_Type( Get( slices, 15 ));
            rec.hsivw2 := Convert( slices, 16, ( -9, -8, -7, -2, -1 ) );
            rec.mgxtra := Convert_Bscon_Type( Get( slices, 17 ));
            rec.mgnew := Convert( slices, 18, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.mgxty1 := Convert_Mgxty1_Type( Get( slices, 19 ));
            rec.mgxty2 := Convert_Mgxty2_Type( Get( slices, 20 ));
            rec.mgxty3 := Convert_Mgxty3_Type( Get( slices, 21 ));
            rec.mgxty4 := Convert_Mgxty4_Type( Get( slices, 22 ));
            rec.mgxty5 := Convert_Mgxty5_Type( Get( slices, 23 ));
            rec.mgold := Convert( slices, 24, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.mglife := Convert( slices, 25, ( -9, -8, -7, -2, -1 ) );
            rec.mgtype := Convert_Mgtype_Type( Get( slices, 26 ));
            rec.xpmg := Convert( slices, 27, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.xpmg1 := Convert_Bscon_Type( Get( slices, 28 ));
            rec.xpmg2 := Convert_Bscon_Type( Get( slices, 29 ));
            rec.xpmg3 := Convert_Bscon_Type( Get( slices, 30 ));
            rec.xpmg4 := Convert_Bscon_Type( Get( slices, 31 ));
            rec.mgyr0 := Convert( slices, 32, ( -9, -8, -7, -2, -1 ) );
            rec.hsyr0 := Convert( slices, 33, ( -9, -8, -7, -1 ) );
            rec.hsval := Convert( slices, 34, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.hsjb := Convert_Bscon_Type( Get( slices, 35 ));
            rec.rentp1 := Convert( slices, 36, ( -9, -8, -7, -2, -1 ) );
            rec.rentp2 := Convert( slices, 37, ( -9, -8, -7, -2, -1 ) );
            rec.rentll := Convert_Rentll_Type( Get( slices, 38 ));
            rec.rentf := Convert_Rentf_Type( Get( slices, 39 ));
            rec.rent := Convert( slices, 40, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.rentw := Convert( slices, 41, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.rent1 := Convert_Rent1_Type( Get( slices, 42 ));
            rec.rent2 := Convert_Rent1_Type( Get( slices, 43 ));
            rec.rent3 := Convert_Bscon_Type( Get( slices, 44 ));
            rec.rent4 := Convert_Bscon_Type( Get( slices, 45 ));
            rec.rent5 := Convert_Bscon_Type( Get( slices, 46 ));
            rec.rent6 := Convert_Bscon_Type( Get( slices, 47 ));
            rec.renthb := Convert_Renthb_Type( Get( slices, 48 ));
            rec.rentg := Convert( slices, 49, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.rentgw := Convert( slices, 50, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.xphsdf := Convert( slices, 51, ( -9, -8, -7, -2, -1 ) );
            rec.xphsd1 := Convert_Bscon_Type( Get( slices, 52 ));
            rec.xphsd2 := Convert_Bscon_Type( Get( slices, 53 ));
            rec.xphsdb := Convert_Bscon_Type( Get( slices, 54 ));
            rec.hs2ownd := Convert_Bscon_Type( Get( slices, 55 ));
            rec.hs2val := Convert_Hs2val_Type( Get( slices, 56 ));
            rec.mgtot := Convert( slices, 57, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.cdhave := Convert_Bscon_Type( Get( slices, 58 ));
            rec.cdbght := Convert_Bscon_Type( Get( slices, 59 ));
            rec.cd1use := Convert_Cd1new_Type( Get( slices, 60 ));
            rec.cd1new := Convert( slices, 61, ( -9, -8, -7, -2, -1 ) );
            rec.cd2use := Convert_Cd1new_Type( Get( slices, 62 ));
            rec.cd2new := Convert( slices, 63, ( -9, -8, -7, -2, -1 ) );
            rec.cd3use := Convert_Cd1new_Type( Get( slices, 64 ));
            rec.cd3new := Convert( slices, 65, ( -9, -8, -7, -2, -1 ) );
            rec.cd4use := Convert_Cd1new_Type( Get( slices, 66 ));
            rec.cd4new := Convert( slices, 67, ( -9, -8, -7, -2, -1 ) );
            rec.cd5use := Convert_Cd1new_Type( Get( slices, 68 ));
            rec.cd5new := Convert( slices, 69, ( -9, -8, -7, -2, -1 ) );
            rec.cd6use := Convert_Cd1new_Type( Get( slices, 70 ));
            rec.cd6new := Convert( slices, 71, ( -9, -8, -7, -2, -1 ) );
            rec.cd7use := Convert_Cd1new_Type( Get( slices, 72 ));
            rec.cd7new := Convert( slices, 73, ( -9, -8, -7, -2, -1 ) );
            rec.cd8use := Convert_Cd1new_Type( Get( slices, 74 ));
            rec.cd8new := Convert( slices, 75, ( -9, -8, -7, -2, -1 ) );
            rec.cd9use := Convert_Cd1new_Type( Get( slices, 76 ));
            rec.cd9new := Convert( slices, 77, ( -9, -8, -7, -2, -1 ) );
            rec.cdnuxp := Convert( slices, 78, ( -9, -8, -7, -2, -1 ) );
            rec.hsip := Convert( slices, 79, ( -9, -8, -7, -2, -1 ) );
            rec.hsipxp := Convert( slices, 80, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.heatch := Convert_Bscon_Type( Get( slices, 81 ));
            rec.heatyp := Convert_Heatyp_Type( Get( slices, 82 ));
            rec.xpoily := Convert( slices, 83, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.gasuse := Convert_Bscon_Type( Get( slices, 84 ));
            rec.gasway := Convert_Gasway_Type( Get( slices, 85 ));
            rec.xpgasl := Convert( slices, 86, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.xpgasw := Convert( slices, 87, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.xpgaslw := Convert( slices, 88, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.lecway := Convert_Gasway_Type( Get( slices, 89 ));
            rec.xplecl := Convert( slices, 90, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.xplecw := Convert( slices, 91, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.xpleclw := Convert( slices, 92, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.xpfood := Convert( slices, 93, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ncars := Convert_Ncars_Type( Get( slices, 94 ));
            rec.carown := Convert_Carown_Type( Get( slices, 95 ));
            rec.carval := Convert( slices, 96, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ivh1 := Convert( slices, 97, ( -9, -8, -7, -1 ) );
            rec.ivh2 := Convert( slices, 98, ( -9, -8, -7 ) );
            rec.ivh3 := Convert( slices, 99, ( -9, -8, -7 ) );
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 100 ));
            rec.hhdc := Convert_Hhdc_Type( Get( slices, 101 ));
            rec.xhwght := Convert( slices, 102, ( -9.0, -8.0 ) );
            rec.hhsize := Convert( slices, 103, ( -9, -8 ) );
            rec.hhtype := Convert_Hhtype_Type( Get( slices, 104 ));
            rec.region := Convert_Region_Type( Get( slices, 105 ));
            rec.nch02 := Convert( slices, 106, ( -9, -8 ) );
            rec.nch34 := Convert( slices, 107, ( -9, -8 ) );
            rec.nch511 := Convert( slices, 108, ( -9, -8 ) );
            rec.nch1215 := Convert( slices, 109, ( -9, -8 ) );
            rec.nch1618 := Convert( slices, 110, ( -9, -8 ) );
            rec.nkids := Convert( slices, 111, ( -9, -8 ) );
            rec.nwed := Convert( slices, 112, ( -9, -8 ) );
            rec.npens := Convert( slices, 113, ( -9, -8 ) );
            rec.na75pl := Convert( slices, 114, ( -9, -8 ) );
            rec.agechy := Convert( slices, 115, ( -9, -8 ) );
            rec.ncouple := Convert( slices, 116, ( -9, -8 ) );
            rec.nonepar := Convert( slices, 117, ( -9, -8 ) );
            rec.nemp := Convert( slices, 118, ( -9, -8 ) );
            rec.nwage := Convert( slices, 119, ( -9, -8 ) );
            rec.tenure := Convert_Tenure_Type( Get( slices, 120 ));
            rec.xphsn := Convert( slices, 121, ( -9.0, -8.0, -7.0 ) );
            rec.xphsg := Convert( slices, 122, ( -9.0, -8.0, -7.0 ) );
            rec.xpoil := Convert( slices, 123, ( -9.0, -8.0, -7.0 ) );
            rec.xpgas := Convert( slices, 124, ( -9.0, -8.0, -7.0 ) );
            rec.xplec := Convert( slices, 125, ( -9.0, -8.0, -7.0 ) );
            rec.xpfuel := Convert( slices, 126, ( -9.0, -8.0, -7.0 ) );
            rec.fieqfcb := Convert( slices, 127, ( -9.0, -8.0 ) );
            rec.fieqfca := Convert( slices, 128, ( -9.0, -8.0 ) );
            rec.fihhyr := Convert( slices, 129, ( -9.0, -8.0, -7.0 ) );
            rec.fihhmn := Convert( slices, 130, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyl := Convert( slices, 131, ( -9.0, -8.0, -7.0 ) );
            rec.fihhynl := Convert( slices, 132, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyp := Convert( slices, 133, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyb := Convert( slices, 134, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyt := Convert( slices, 135, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyi := Convert( slices, 136, ( -9.0, -8.0, -7.0 ) );
            rec.fihhml := Convert( slices, 137, (  1 .. 0 => -9.0 ) );
            rec.fihhmnl := Convert( slices, 138, (  1 .. 0 => -9.0 ) );
            rec.fihhmp := Convert( slices, 139, (  1 .. 0 => -9.0 ) );
            rec.fihhmb := Convert( slices, 140, (  1 .. 0 => -9.0 ) );
            rec.fihhmt := Convert( slices, 141, (  1 .. 0 => -9.0 ) );
            rec.fihhmi := Convert( slices, 142, (  1 .. 0 => -9.0 ) );
            rec.hhmove := Convert_Hhmove_Type( Get( slices, 143 ));
            rec.mgnewi := Convert( slices, 144, ( -9, -8, -7, -2, -1 ) );
            rec.xpmgi := Convert( slices, 145, ( -9, -8, -7, -2, -1 ) );
            rec.hsvali := Convert( slices, 146, ( -9, -8, -7, -2, -1 ) );
            rec.renti := Convert( slices, 147, ( -9, -8, -7, -4, -3, -2, -1 ) );
            rec.rentgi := Convert( slices, 148, ( -9, -8, -7, -2, -1 ) );
            rec.xphsni := Convert_Jhgpayi_Type( Get( slices, 149 ));
            rec.xphsgi := Convert_Jhgpayi_Type( Get( slices, 150 ));
            rec.fihhmni := Convert_Fihhmni_Type( Get( slices, 151 ));
            rec.fihhmli := Convert_Fihhmbi_Type( Get( slices, 152 ));
            rec.fihmnli := Convert_Fihhmbi_Type( Get( slices, 153 ));
            rec.fihhmpi := Convert_Fihhmbi_Type( Get( slices, 154 ));
            rec.fihhmbi := Convert_Fihhmbi_Type( Get( slices, 155 ));
            rec.fihhmti := Convert_Fihhmbi_Type( Get( slices, 156 ));
            rec.fihhmii := Convert_Fihhmbi_Type( Get( slices, 157 ));
            rec.fihhyri := Convert_Fihhmbi_Type( Get( slices, 158 ));
            rec.fihhyli := Convert_Fihhmbi_Type( Get( slices, 159 ));
            rec.fihhyni := Convert_Fihhmbi_Type( Get( slices, 160 ));
            rec.fihhypi := Convert_Fihhmbi_Type( Get( slices, 161 ));
            rec.fihhybi := Convert_Fihhmbi_Type( Get( slices, 162 ));
            rec.fihhyti := Convert_Fihhmbi_Type( Get( slices, 163 ));
            rec.fihhyii := Convert_Fihhmbi_Type( Get( slices, 164 ));
            rec.hhyoi4 := Convert( slices, 165, ( -9, -8, -7, -2, -1 ) );
            rec.mgyr04 := Convert( slices, 166, ( -9, -8, -7, -2, -1 ) );
            rec.hsyr04 := Convert( slices, 167, ( -9, -8, -7, -2, -1 ) );
            rec.region2 := Convert_Region2_Type( Get( slices, 168 ));
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Hhresp_component ).start_pos = 0 ) then
               index.pointers( Hhresp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Hhresp_component ).counter := index.pointers( Hhresp_component ).counter + 1;
            Put_Index( index_map, index );
            Hhresp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Hhresp_IO.Close( bin_file );
   end Create_Hhresp_Wave_C;




   procedure Create_Hhsamp_Wave_C( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Hhsamp_IO.File_Type;
      rec         : Hhsamp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Hhsamp_IO.Create (bin_file, Hhsamp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.fid := Convert( slices, 2 );
            rec.ivnadd := Convert( slices, 3, ( -9.0, -8.0 ) );
            rec.ivia := Convert_Ivia_Type( Get( slices, 4 ));
--             rec.ivid := Convert( slices, 5 );
            rec.ivlnc := Convert( slices, 6, ( -9, -1 ) );
            rec.ivtnc := Convert( slices, 7, ( -9, -8, -1 ) );
            rec.iviam := Convert_Iviam_Type( Get( slices, 8 ));
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 9 ));
            rec.ivosmrh := Convert( slices, 10, ( -9, -8, -1 ) );
            rec.ivnsmrh := Convert( slices, 11, ( -9, -8, -1 ) );
            rec.ivhzif := Convert_Ivhzif_Type( Get( slices, 12 ));
            rec.ivrrefh := Convert_Ivrrefh_Type( Get( slices, 13 ));
            rec.hhdc := Convert_Hhdc_Type( Get( slices, 14 ));
            rec.xhwght := Convert( slices, 15, ( -9.0, -8.0, -1.0 ) );
            rec.region := Convert_Region_Type( Get( slices, 16 ));
            rec.hhmove := Convert_Hhmove_Type( Get( slices, 17 ));
            rec.ahid := Convert( slices, 18 );
            rec.strata := Convert( slices, 19, ( -9, -8, -1 ) );
            rec.psu := Convert( slices, 20, ( -9, -8, -1 ) );
            rec.region2 := Convert_Region2_Type( Get( slices, 21 ));
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Hhsamp_component ).start_pos = 0 ) then
               index.pointers( Hhsamp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Hhsamp_component ).counter := index.pointers( Hhsamp_component ).counter + 1;
            Put_Index( index_map, index );
            Hhsamp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Hhsamp_IO.Close( bin_file );
   end Create_Hhsamp_Wave_C;




   procedure Create_Income_Wave_C( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Income_IO.File_Type;
      rec         : Income_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Income_IO.Create (bin_file, Income_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.pno := Convert( slices, 1 );
            rec.ficode := Convert_Ficode_Type( Get( slices, 2 ));
            rec.nfr := Convert( slices, 3, (  1 .. 0 => -9 ) );
            rec.frall := Convert_Frall_Type( Get( slices, 4 ));
            rec.fr01 := Convert_Cd1own_Type( Get( slices, 5 ));
            rec.fr02 := Convert_Cd1own_Type( Get( slices, 6 ));
            rec.fr03 := Convert_Cd1own_Type( Get( slices, 7 ));
            rec.fr04 := Convert( slices, 8, ( -9, -8, -2, -1 ) );
            rec.fr05 := Convert_Cd1own_Type( Get( slices, 9 ));
            rec.fr06 := Convert_Cd1own_Type( Get( slices, 10 ));
            rec.fr07 := Convert_Cd1own_Type( Get( slices, 11 ));
            rec.fr08 := Convert_Cd1own_Type( Get( slices, 12 ));
            rec.fr09 := Convert_Cd1own_Type( Get( slices, 13 ));
            rec.fr10 := Convert_Cd1own_Type( Get( slices, 14 ));
            rec.fr11 := Convert_Cd1own_Type( Get( slices, 15 ));
            rec.fr12 := Convert_Cd1own_Type( Get( slices, 16 ));
            rec.fr13 := Convert_Cd1own_Type( Get( slices, 17 ));
            rec.fr14 := Convert_Cd1own_Type( Get( slices, 18 ));
            rec.fr15 := Convert_Cd1own_Type( Get( slices, 19 ));
            rec.fr16 := Convert_Cd1own_Type( Get( slices, 20 ));
            rec.fr17 := Convert_Cd1own_Type( Get( slices, 21 ));
            rec.frnow := Convert_Frnow_Type( Get( slices, 22 ));
            rec.frval := Convert( slices, 23, ( -9.0, -8.0, -3.0, -2.0, -1.0 ) );
            rec.frw := Convert( slices, 24, ( -9.0, -8.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.frjt := Convert_Frjt_Type( Get( slices, 25 ));
            rec.frjtpn := Convert( slices, 26, ( -9, -8, -2, -1 ) );
            rec.hid := Convert( slices, 27 );
            rec.fiseq := Convert( slices, 28 );
            rec.fim09l := Convert( slices, 29, ( -9.0, -8.0, -3.0 ) );
            rec.fim10l := Convert( slices, 30, ( -9.0, -8.0, -3.0 ) );
            rec.fim11l := Convert( slices, 31, ( -9.0, -8.0, -3.0 ) );
            rec.fim12l := Convert( slices, 32, ( -9.0, -8.0, -3.0 ) );
            rec.fim01t := Convert( slices, 33, ( -9.0, -8.0, -3.0 ) );
            rec.fim02t := Convert( slices, 34, ( -9.0, -8.0, -3.0 ) );
            rec.fim03t := Convert( slices, 35, ( -9.0, -8.0, -3.0 ) );
            rec.fim04t := Convert( slices, 36, ( -9.0, -8.0, -3.0 ) );
            rec.fim05t := Convert( slices, 37, ( -9.0, -8.0, -3.0 ) );
            rec.fim06t := Convert( slices, 38, ( -9.0, -8.0, -3.0 ) );
            rec.fim07t := Convert( slices, 39, ( -9.0, -8.0, -3.0 ) );
            rec.fim08t := Convert( slices, 40, ( -9.0, -8.0, -3.0 ) );
            rec.fim09t := Convert( slices, 41, ( -9.0, -8.0, -3.0 ) );
            rec.fim10t := Convert( slices, 42, ( -9.0, -8.0, -3.0 ) );
            rec.fim11t := Convert( slices, 43, ( -9.0, -8.0, -3.0 ) );
            rec.fim12t := Convert( slices, 44, ( -9.0, -8.0, -3.0 ) );
            rec.fim01n := Convert( slices, 45, ( -9.0, -8.0, -3.0 ) );
            rec.frjtvf := Convert_Frjtvf_Type( Get( slices, 46 ));
            rec.frvali := Convert( slices, 47, ( -9, -8, -3, -2, -1 ) );
            rec.pid := Convert( slices, 48 );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Income_component ).start_pos = 0 ) then
               index.pointers( Income_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Income_component ).counter := index.pointers( Income_component ).counter + 1;
            Put_Index( index_map, index );
            Income_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Income_IO.Close( bin_file );
   end Create_Income_Wave_C;




   procedure Create_Indall_Wave_C( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Indall_IO.File_Type;
      rec         : Indall_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Indall_IO.Create (bin_file, Indall_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.pid := Convert( slices, 3 );
            rec.iviow2 := Convert_Iviow2_Type( Get( slices, 4 ));
            rec.ivievr := Convert_Ivievr_Type( Get( slices, 5 ));
            rec.hhmem := Convert_Hhmem_Type( Get( slices, 6 ));
            rec.newhy := Convert_Newhy_Type( Get( slices, 7 ));
            rec.nemnjn := Convert_Nemnjn_Type( Get( slices, 8 ));
            rec.neyrjn := Convert( slices, 9, ( -9, -8, -2, -1 ) );
            rec.ivfio := Convert_Ivfio_Type( Get( slices, 10 ));
            rec.ivtel := Convert_Depchl_Type( Get( slices, 11 ));
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 12 ));
            rec.iodc := Convert_Iodc_Type( Get( slices, 13 ));
            rec.hgr2r := Convert_Hgr2r_Type( Get( slices, 14 ));
            rec.hgsex := Convert_Hgsex_Type( Get( slices, 15 ));
            rec.hgbm := Convert_Hgbm_Type( Get( slices, 16 ));
            rec.hgby := Convert( slices, 17, ( -9, -8, -2, -1 ) );
            rec.mastat := Convert_Mastat_Type( Get( slices, 18 ));
            rec.hgspn := Convert( slices, 19, ( -9, -8, -2, -1 ) );
            rec.hgemp := Convert_Hgemp_Type( Get( slices, 20 ));
            rec.hgfno := Convert( slices, 21, ( -9, -8, -2, -1 ) );
            rec.hgmno := Convert( slices, 22, ( -9, -8, -2, -1 ) );
            rec.hgra := Convert( slices, 23, ( -9, -8, -2, -1 ) );
            rec.age := Convert( slices, 24, ( -9, -8, -2, -1 ) );
            rec.age12 := Convert( slices, 25, ( -9, -8, -2, -1 ) );
            rec.butype := Convert_Butype_Type( Get( slices, 26 ));
            rec.buno := Convert( slices, 27, ( -9, -8 ) );
            rec.nchild := Convert( slices, 28, ( -9, -8 ) );
            rec.depchl := Convert_Depchl_Type( Get( slices, 29 ));
            rec.hoh := Convert_Hoh_Type( Get( slices, 30 ));
            rec.rach16 := Convert_Hhch12_Type( Get( slices, 31 ));
            rec.agei := Convert_Agei_Type( Get( slices, 32 ));
            rec.lrwght := Convert( slices, 33, ( -9.0, -8.0 ) );
            rec.lewght := Convert( slices, 34, ( -9.0, -8.0 ) );
            rec.xrwght := Convert( slices, 35, ( -9.0, -8.0 ) );
            rec.xewght := Convert( slices, 36, ( -9.0, -8.0 ) );
            rec.movest := Convert_Movest_Type( Get( slices, 37 ));
            rec.sampst := Convert_Sampst_Type( Get( slices, 38 ));
            rec.neyrjn4 := Convert( slices, 39, ( -9, -8, -7, -2, -1 ) );
            rec.sppid := Convert( slices, 40 );
            rec.fpid := Convert( slices, 41 );
            rec.mpid := Convert( slices, 42 );
            rec.rapid := Convert( slices, 43 );
            rec.distmov := Convert( slices, 44, ( -9.0, -8.0 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Indall_component ).start_pos = 0 ) then
               index.pointers( Indall_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Indall_component ).counter := index.pointers( Indall_component ).counter + 1;
            Put_Index( index_map, index );
            Indall_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Indall_IO.Close( bin_file );
   end Create_Indall_Wave_C;




   procedure Create_Indresp_Wave_C( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Indresp_IO.File_Type;
      rec         : Indresp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Indresp_IO.Create (bin_file, Indresp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.doid := Convert( slices, 3, ( -9, -7 ) );
            rec.doim := Convert_Doim_Type( Get( slices, 4 ));
            rec.doiy := Convert( slices, 5, ( -9, -8 ) );
            rec.ivsoih := Convert( slices, 6, ( -9, -8 ) );
            rec.ivsoim := Convert( slices, 7, ( -9, -8 ) );
            rec.ivlyr := Convert( slices, 8, ( -9, -8, -7 ) );
            rec.ivievr := Convert_Ivievr_Type( Get( slices, 9 ));
            rec.lknbrd := Convert_Aidpl1_Type( Get( slices, 10 ));
            rec.lkmove := Convert_Lkmove_Type( Get( slices, 11 ));
            rec.lkmovy := Convert_Lkmovy_Type( Get( slices, 12 ));
            rec.plnew := Convert( slices, 13, ( -9, -8, -7, -2, -1 ) );
            rec.plnowm := Convert_Jbbgm1_Type( Get( slices, 14 ));
            rec.plnowy := Convert( slices, 15, ( -9, -8, -2, -1 ) );
            rec.movjb := Convert_Aidpl1_Type( Get( slices, 16 ));
            rec.movjba := Convert_Movjba_Type( Get( slices, 17 ));
            rec.movjbb := Convert_Movjba_Type( Get( slices, 18 ));
            rec.movjbc := Convert_Movjba_Type( Get( slices, 19 ));
            rec.movjbd := Convert_Movjba_Type( Get( slices, 20 ));
            rec.movjbe := Convert_Movjba_Type( Get( slices, 21 ));
            rec.movjbf := Convert_Movjba_Type( Get( slices, 22 ));
            rec.movjbg := Convert_Movjba_Type( Get( slices, 23 ));
            rec.movjbh := Convert_Movjba_Type( Get( slices, 24 ));
            rec.movjbi := Convert_Movjba_Type( Get( slices, 25 ));
            rec.movy1 := Convert_Movy1_Type( Get( slices, 26 ));
            rec.movy2 := Convert_Movy2_Type( Get( slices, 27 ));
            rec.dobm := Convert_Cjsem_Type( Get( slices, 28 ));
            rec.doby := Convert( slices, 29, ( -9, -8, -7, -2, -1 ) );
            rec.sex := Convert_Sex_Type( Get( slices, 30 ));
            rec.jbstat := Convert_Jbstat_Type( Get( slices, 31 ));
            rec.edlyr := Convert_Aidpl1_Type( Get( slices, 32 ));
            rec.edendm := Convert_Edendm_Type( Get( slices, 33 ));
            rec.edendy := Convert( slices, 34, ( -9, -8, -7, -3, -2, -1 ) );
            rec.edtype := Convert_Edtype_Type( Get( slices, 35 ));
            rec.qfx := Convert_Aidpl1_Type( Get( slices, 36 ));
            rec.qfxa := Convert_Qfa_Type( Get( slices, 37 ));
            rec.qfxb := Convert_Qfb_Type( Get( slices, 38 ));
            rec.qfxc := Convert_Qfc_Type( Get( slices, 39 ));
            rec.qfxd := Convert_Qfd_Type( Get( slices, 40 ));
            rec.qfxe := Convert_Qfe_Type( Get( slices, 41 ));
            rec.qfxf := Convert_Qff_Type( Get( slices, 42 ));
            rec.qfxg := Convert_Qfg_Type( Get( slices, 43 ));
            rec.qfxh := Convert_Qfh_Type( Get( slices, 44 ));
            rec.qfxi := Convert_Qfi_Type( Get( slices, 45 ));
            rec.qfxj := Convert_Qfj_Type( Get( slices, 46 ));
            rec.qfxk := Convert_Qfk_Type( Get( slices, 47 ));
            rec.qfxl := Convert_Qfl_Type( Get( slices, 48 ));
            rec.qfxm := Convert_Qfm_Type( Get( slices, 49 ));
            rec.qfxn := Convert_Qfn_Type( Get( slices, 50 ));
            rec.qfedx := Convert_Aidpl1_Type( Get( slices, 51 ));
            rec.qfedxa := Convert_Qfedd_Type( Get( slices, 52 ));
            rec.nqfexa := Convert( slices, 53, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxb := Convert_Qfede_Type( Get( slices, 54 ));
            rec.nqfexb := Convert( slices, 55, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxc := Convert_Qfedj_Type( Get( slices, 56 ));
            rec.nqfexc := Convert( slices, 57, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxd := Convert_Qfedxd_Type( Get( slices, 58 ));
            rec.qfedxe := Convert_Qfedk_Type( Get( slices, 59 ));
            rec.nqfexe := Convert( slices, 60, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxf := Convert_Qfedxf_Type( Get( slices, 61 ));
            rec.nqfexf := Convert( slices, 62, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxg := Convert_Qfedm_Type( Get( slices, 63 ));
            rec.nqfexg := Convert( slices, 64, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxh := Convert_Qfedxh_Type( Get( slices, 65 ));
            rec.nqfexh := Convert( slices, 66, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxi := Convert_Qfedo_Type( Get( slices, 67 ));
            rec.nqfexi := Convert( slices, 68, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxj := Convert( slices, 69, ( -9, -8, -7 ) );
            rec.nqfexj := Convert( slices, 70, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxk := Convert_Hlprbm_Type( Get( slices, 71 ));
            rec.nqfexk := Convert( slices, 72, ( -9, -8, -7, -2, -1 ) );
            rec.mlstat := Convert_Mlstat_Type( Get( slices, 73 ));
            rec.mlchng := Convert_Bscon_Type( Get( slices, 74 ));
            rec.mlchm := Convert_Mlchm_Type( Get( slices, 75 ));
            rec.mlchy := Convert( slices, 76, ( -9, -8, -2 ) );
            rec.plbornd := Convert_Plbornd_Type( Get( slices, 77 ));
            rec.plbornc := Convert_Plbornc_Type( Get( slices, 78 ));
            rec.yr2uk := Convert( slices, 79, ( -9, -8, -7, -2, -1 ) );
            rec.race := Convert_Race_Type( Get( slices, 80 ));
            rec.school := Convert_School_Type( Get( slices, 81 ));
            rec.scend := Convert( slices, 82, ( -9, -8, -7, -2, -1 ) );
            rec.sctype := Convert_Sctype_Type( Get( slices, 83 ));
            rec.scnow := Convert_Cjsck2_Type( Get( slices, 84 ));
            rec.fetype := Convert_Fetype_Type( Get( slices, 85 ));
            rec.fenow := Convert_Fenow_Type( Get( slices, 86 ));
            rec.feend := Convert( slices, 87, ( -9, -8, -7, -2, -1 ) );
            rec.qfhas := Convert_Bscon_Type( Get( slices, 88 ));
            rec.qfa := Convert_Qfa_Type( Get( slices, 89 ));
            rec.qfb := Convert_Qfb_Type( Get( slices, 90 ));
            rec.qfc := Convert_Qfc_Type( Get( slices, 91 ));
            rec.qfd := Convert_Qfd_Type( Get( slices, 92 ));
            rec.qfe := Convert_Qfe_Type( Get( slices, 93 ));
            rec.qff := Convert_Qff_Type( Get( slices, 94 ));
            rec.qfg := Convert_Qfg_Type( Get( slices, 95 ));
            rec.qfh := Convert_Qfh_Type( Get( slices, 96 ));
            rec.qfi := Convert_Qfi_Type( Get( slices, 97 ));
            rec.qfj := Convert_Qfj_Type( Get( slices, 98 ));
            rec.qfk := Convert_Qfk_Type( Get( slices, 99 ));
            rec.qfl := Convert_Qfl_Type( Get( slices, 100 ));
            rec.qfm := Convert_Qfm_Type( Get( slices, 101 ));
            rec.qfn := Convert_Qfn_Type( Get( slices, 102 ));
            rec.qfed := Convert_Bscon_Type( Get( slices, 103 ));
            rec.qfeda := Convert_Qfeda_Type( Get( slices, 104 ));
            rec.nqfeda := Convert( slices, 105, ( -9, -8, -7, -2, -1 ) );
            rec.qfedb := Convert_Qfedb_Type( Get( slices, 106 ));
            rec.nqfedb := Convert( slices, 107, ( -9, -8, -7, -2, -1 ) );
            rec.qfedc := Convert_Qfedc_Type( Get( slices, 108 ));
            rec.nqfedc := Convert( slices, 109, ( -9, -8, -7, -2, -1 ) );
            rec.qfedd := Convert_Qfedd_Type( Get( slices, 110 ));
            rec.nqfedd := Convert( slices, 111, ( -9, -8, -7, -2, -1 ) );
            rec.qfede := Convert_Qfede_Type( Get( slices, 112 ));
            rec.nqfede := Convert( slices, 113, ( -9, -8, -7, -2, -1 ) );
            rec.qfedf := Convert_Qfedf_Type( Get( slices, 114 ));
            rec.nqfedf := Convert( slices, 115, ( -9, -8, -7, -2, -1 ) );
            rec.qfedg := Convert_Qfedg_Type( Get( slices, 116 ));
            rec.nqfedg := Convert( slices, 117, ( -9, -8, -7, -2, -1 ) );
            rec.qfedh := Convert_Qfedh_Type( Get( slices, 118 ));
            rec.nqfedh := Convert( slices, 119, ( -9, -8, -7, -2, -1 ) );
            rec.qfedi := Convert_Qfedi_Type( Get( slices, 120 ));
            rec.nqfedi := Convert( slices, 121, ( -9, -8, -7, -2, -1 ) );
            rec.qfedj := Convert_Qfedj_Type( Get( slices, 122 ));
            rec.nqfedj := Convert( slices, 123, ( -9, -8, -7, -2, -1 ) );
            rec.qfedk := Convert_Qfedk_Type( Get( slices, 124 ));
            rec.nqfedk := Convert( slices, 125, ( -9, -8, -7, -2, -1 ) );
            rec.qfedl := Convert_Qfedl_Type( Get( slices, 126 ));
            rec.nqfedl := Convert( slices, 127, ( -9, -8, -7, -2, -1 ) );
            rec.qfedm := Convert_Qfedm_Type( Get( slices, 128 ));
            rec.nqfedm := Convert( slices, 129, ( -9, -8, -7, -2, -1 ) );
            rec.qfedn := Convert_Qfedn_Type( Get( slices, 130 ));
            rec.nqfedn := Convert( slices, 131, ( -9, -8, -7, -2, -1 ) );
            rec.qfedo := Convert_Qfedo_Type( Get( slices, 132 ));
            rec.nqfedo := Convert( slices, 133, ( -9, -8, -7, -2, -1 ) );
            rec.qfedp := Convert( slices, 134, ( -9, -8, -7 ) );
            rec.nqfedp := Convert( slices, 135, ( -9, -8, -7, -2, -1 ) );
            rec.qfedq := Convert_Qfedq_Type( Get( slices, 136 ));
            rec.nqfedq := Convert( slices, 137, ( -9, -8, -7, -2, -1 ) );
            rec.qfedr := Convert_Qfedr_Type( Get( slices, 138 ));
            rec.nqfedr := Convert( slices, 139, ( -9, -8, -7, -2, -1 ) );
            rec.qfeds := Convert_Hlprbm_Type( Get( slices, 140 ));
            rec.nqfeds := Convert( slices, 141, ( -9, -8, -7, -2, -1 ) );
            rec.hlstat := Convert_Hlstat_Type( Get( slices, 142 ));
            rec.hlzest := Convert_Hlzest_Type( Get( slices, 143 ));
            rec.hldsbl := Convert_Bscon_Type( Get( slices, 144 ));
            rec.hlprb := Convert( slices, 145, ( -9, -8, -7, -2, -1 ) );
            rec.hlprba := Convert_Hlprba_Type( Get( slices, 146 ));
            rec.hlprbb := Convert_Hlprbb_Type( Get( slices, 147 ));
            rec.hlprbc := Convert_Hlprbc_Type( Get( slices, 148 ));
            rec.hlprbd := Convert_Hlprbd_Type( Get( slices, 149 ));
            rec.hlprbe := Convert_Hlprbe_Type( Get( slices, 150 ));
            rec.hlprbf := Convert_Hlprbf_Type( Get( slices, 151 ));
            rec.hlprbg := Convert_Hlprbg_Type( Get( slices, 152 ));
            rec.hlprbh := Convert_Hlprbh_Type( Get( slices, 153 ));
            rec.hlprbi := Convert_Hlprbi_Type( Get( slices, 154 ));
            rec.hlprbj := Convert_Hlprbj_Type( Get( slices, 155 ));
            rec.hlprbk := Convert_Hlprbk_Type( Get( slices, 156 ));
            rec.hlprbl := Convert_Hlprbl_Type( Get( slices, 157 ));
            rec.hlprbm := Convert_Hlprbm_Type( Get( slices, 158 ));
            rec.hllt := Convert_Bscon_Type( Get( slices, 159 ));
            rec.hllta := Convert_Hllta_Type( Get( slices, 160 ));
            rec.hlltb := Convert_Hlltb_Type( Get( slices, 161 ));
            rec.hlltc := Convert_Hlltc_Type( Get( slices, 162 ));
            rec.hlltd := Convert_Hlltd_Type( Get( slices, 163 ));
            rec.hllte := Convert_Hllte_Type( Get( slices, 164 ));
            rec.hlltw := Convert_Bscon_Type( Get( slices, 165 ));
            rec.hlendw := Convert_Hlendw_Type( Get( slices, 166 ));
            rec.hlltwa := Convert_Hlltwa_Type( Get( slices, 167 ));
            rec.hl2gp := Convert_Hl2gp_Type( Get( slices, 168 ));
            rec.xdts := Convert_Bscon_Type( Get( slices, 169 ));
            rec.nxdts := Convert_Nxdts_Type( Get( slices, 170 ));
            rec.xdt1m := Convert_Xdt1m_Type( Get( slices, 171 ));
            rec.xdt2m := Convert_Xdt2m_Type( Get( slices, 172 ));
            rec.xdt3m := Convert_Xdt2m_Type( Get( slices, 173 ));
            rec.xdt1y := Convert( slices, 174, ( -9, -8, -7, -2, -1 ) );
            rec.xdt2y := Convert( slices, 175, ( -9, -8, -7, -2, -1 ) );
            rec.xdt3y := Convert( slices, 176, ( -9, -8, -7, -2, -1 ) );
            rec.xdt1pl := Convert_Xdt1pl_Type( Get( slices, 177 ));
            rec.xdt2pl := Convert_Xdt1pl_Type( Get( slices, 178 ));
            rec.xdt3pl := Convert_Xdt1pl_Type( Get( slices, 179 ));
            rec.hosp := Convert_Hlsv_Type( Get( slices, 180 ));
            rec.hospd := Convert( slices, 181, ( -9, -8, -7, -2, -1 ) );
            rec.hospch := Convert_Hospch_Type( Get( slices, 182 ));
            rec.hospnhs := Convert_Hospnhs_Type( Get( slices, 183 ));
            rec.hlsv := Convert_Hlsv_Type( Get( slices, 184 ));
            rec.hlsva := Convert_Hlsva_Type( Get( slices, 185 ));
            rec.hlsvan := Convert_Hlsvan_Type( Get( slices, 186 ));
            rec.hlsvaf := Convert_Hlsvaf_Type( Get( slices, 187 ));
            rec.hlsvb := Convert_Hlsvb_Type( Get( slices, 188 ));
            rec.hlsvbn := Convert_Hlsvan_Type( Get( slices, 189 ));
            rec.hlsvbf := Convert_Hlsvaf_Type( Get( slices, 190 ));
            rec.hlsvc := Convert_Hlsvc_Type( Get( slices, 191 ));
            rec.hlsvcn := Convert_Hlsvan_Type( Get( slices, 192 ));
            rec.hlsvcf := Convert_Hlsvaf_Type( Get( slices, 193 ));
            rec.hlsvd := Convert_Hlsvd_Type( Get( slices, 194 ));
            rec.hlsvdn := Convert_Hlsvan_Type( Get( slices, 195 ));
            rec.hlsvdf := Convert_Hlsvaf_Type( Get( slices, 196 ));
            rec.hlsve := Convert_Hlsve_Type( Get( slices, 197 ));
            rec.hlsven := Convert_Hlsvan_Type( Get( slices, 198 ));
            rec.hlsvef := Convert_Hlsvaf_Type( Get( slices, 199 ));
            rec.hlsvf := Convert_Hlsvf_Type( Get( slices, 200 ));
            rec.hlsvfn := Convert_Hlsvan_Type( Get( slices, 201 ));
            rec.hlsvff := Convert_Hlsvaf_Type( Get( slices, 202 ));
            rec.hlsvg := Convert_Hlsvg_Type( Get( slices, 203 ));
            rec.hlsvgn := Convert_Hlsvan_Type( Get( slices, 204 ));
            rec.hlsvgf := Convert_Hlsvaf_Type( Get( slices, 205 ));
            rec.hlsvh := Convert_Hlsvh_Type( Get( slices, 206 ));
            rec.hlsvhn := Convert_Hlsvan_Type( Get( slices, 207 ));
            rec.hlsvhf := Convert_Hlsvaf_Type( Get( slices, 208 ));
            rec.hlsvi := Convert_Hlsvi_Type( Get( slices, 209 ));
            rec.hlsvin := Convert_Hlsvan_Type( Get( slices, 210 ));
            rec.hlsvif := Convert_Hlsvaf_Type( Get( slices, 211 ));
            rec.hlsvj := Convert_Hlsvj_Type( Get( slices, 212 ));
            rec.hlsvjn := Convert_Hlsvan_Type( Get( slices, 213 ));
            rec.hlsvjf := Convert_Hlsvaf_Type( Get( slices, 214 ));
            rec.hlsvk := Convert_Hlsvk_Type( Get( slices, 215 ));
            rec.hlsvkn := Convert_Hlsvan_Type( Get( slices, 216 ));
            rec.hlsvkf := Convert_Hlsvaf_Type( Get( slices, 217 ));
            rec.hlck := Convert_Aidpl1_Type( Get( slices, 218 ));
            rec.hlcka := Convert_Hlcka_Type( Get( slices, 219 ));
            rec.hlckan := Convert_Hlckan_Type( Get( slices, 220 ));
            rec.hlckb := Convert_Hlcka_Type( Get( slices, 221 ));
            rec.hlckbn := Convert_Hlckan_Type( Get( slices, 222 ));
            rec.hlckc := Convert_Hlcka_Type( Get( slices, 223 ));
            rec.hlckcn := Convert_Hlckan_Type( Get( slices, 224 ));
            rec.hlckd := Convert_Hlcka_Type( Get( slices, 225 ));
            rec.hlckdn := Convert_Hlckan_Type( Get( slices, 226 ));
            rec.hlcke := Convert_Hlcka_Type( Get( slices, 227 ));
            rec.hlcken := Convert_Hlckan_Type( Get( slices, 228 ));
            rec.hlckf := Convert_Hlcka_Type( Get( slices, 229 ));
            rec.hlckfn := Convert_Hlckan_Type( Get( slices, 230 ));
            rec.hlckg := Convert_Hlcka_Type( Get( slices, 231 ));
            rec.hlckgn := Convert_Hlckan_Type( Get( slices, 232 ));
            rec.hlckh := Convert_Hlcka_Type( Get( slices, 233 ));
            rec.hlckhn := Convert_Hlckan_Type( Get( slices, 234 ));
            rec.smoker := Convert_Bscon_Type( Get( slices, 235 ));
            rec.ncigs := Convert( slices, 236, ( -9, -8, -7, -2, -1 ) );
            rec.ophla := Convert_Ophla_Type( Get( slices, 237 ));
            rec.ophlb := Convert_Ophlb_Type( Get( slices, 238 ));
            rec.ophlc := Convert_Ophlb_Type( Get( slices, 239 ));
            rec.aidhh := Convert_Aidhh_Type( Get( slices, 240 ));
            rec.aidhua := Convert( slices, 241, ( -9, -8, -7, -1 ) );
            rec.aidhub := Convert( slices, 242, ( -9, -8, -7 ) );
            rec.aidhuc := Convert( slices, 243, ( -9, -8, -7 ) );
            rec.aidxhh := Convert_Aidxhh_Type( Get( slices, 244 ));
            rec.naidxhh := Convert_Naidxhh_Type( Get( slices, 245 ));
            rec.aidhu1 := Convert_Aidhu1_Type( Get( slices, 246 ));
            rec.aidhu2 := Convert_Aidhu2_Type( Get( slices, 247 ));
            rec.aidhrs := Convert_Aidhrs_Type( Get( slices, 248 ));
            rec.ivma := Convert_Ivda_Type( Get( slices, 249 ));
            rec.ivmb := Convert_Ivdb_Type( Get( slices, 250 ));
            rec.ivmc := Convert_Ivec_Type( Get( slices, 251 ));
            rec.ivmd := Convert_Ivdd_Type( Get( slices, 252 ));
            rec.ivme := Convert_Ivee_Type( Get( slices, 253 ));
            rec.jbhas := Convert_Frnow_Type( Get( slices, 254 ));
            rec.jboff := Convert_Jboff_Type( Get( slices, 255 ));
            rec.jboffy := Convert_Jboffy_Type( Get( slices, 256 ));
            rec.jbterm := Convert_Jbterm_Type( Get( slices, 257 ));
            rec.jbsoc := Convert( slices, 258, ( -9, -8, -2, -1 ) );
            rec.jbsic := Convert( slices, 259, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.jbsemp := Convert_Jbsemp_Type( Get( slices, 260 ));
            rec.jbmngr := Convert_Jbmngr_Type( Get( slices, 261 ));
            rec.jbsize := Convert_Jbsize_Type( Get( slices, 262 ));
            rec.jbhrs := Convert( slices, 263, ( -9, -8, -7, -2, -1 ) );
            rec.jbot := Convert( slices, 264, ( -9, -8, -7, -2, -1 ) );
            rec.jbotpd := Convert( slices, 265, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbhrlk := Convert_Jbhrlk_Type( Get( slices, 266 ));
            rec.jbpl := Convert_Jbpl_Type( Get( slices, 267 ));
            rec.jbttwt := Convert( slices, 268, ( -9, -8, -7, -3, -2, -1 ) );
            rec.jbttwm := Convert_Jbttwm_Type( Get( slices, 269 ));
            rec.jbsat1 := Convert_Jbsat1_Type( Get( slices, 270 ));
            rec.jbsat2 := Convert( slices, 271, ( -9, -8, -7, -2, -1 ) );
            rec.jbsat3 := Convert_Jbsat_Type( Get( slices, 272 ));
            rec.jbsat4 := Convert_Jbsat4_Type( Get( slices, 273 ));
            rec.jbsat5 := Convert_Jbsat4_Type( Get( slices, 274 ));
            rec.jbsat6 := Convert_Jbsat4_Type( Get( slices, 275 ));
            rec.jbsat7 := Convert_Jbsat_Type( Get( slices, 276 ));
            rec.jbsat := Convert_Jbsat_Type( Get( slices, 277 ));
            rec.paygl := Convert( slices, 278, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.paygw := Convert( slices, 279, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.paynl := Convert( slices, 280, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.paynw := Convert( slices, 281, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.payslp := Convert_Payslp_Type( Get( slices, 282 ));
            rec.payusl := Convert_Aidpl1_Type( Get( slices, 283 ));
            rec.payu := Convert( slices, 284, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.payuw := Convert( slices, 285, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.payug := Convert_Paylyg_Type( Get( slices, 286 ));
            rec.paydf1 := Convert_Paydf1_Type( Get( slices, 287 ));
            rec.paydf2 := Convert_Paydf2_Type( Get( slices, 288 ));
            rec.paydf3 := Convert_Paydf3_Type( Get( slices, 289 ));
            rec.paydf4 := Convert_Paydf4_Type( Get( slices, 290 ));
            rec.paydf5 := Convert_Paydf5_Type( Get( slices, 291 ));
            rec.paydf6 := Convert_Paydf6_Type( Get( slices, 292 ));
            rec.paydf7 := Convert_Paydf7_Type( Get( slices, 293 ));
            rec.paydf8 := Convert_Paydf8_Type( Get( slices, 294 ));
            rec.jbbgd := Convert( slices, 295, ( -9, -8, -7, -2, -1 ) );
            rec.jbbgm := Convert_Cjsbgm_Type( Get( slices, 296 ));
            rec.jbbgy := Convert( slices, 297, ( -9, -8, -7, -2, -1 ) );
            rec.jbbgly := Convert_Jbbgly_Type( Get( slices, 298 ));
            rec.jbsect := Convert_Jbsect_Type( Get( slices, 299 ));
            rec.jbonus := Convert_Aidpl1_Type( Get( slices, 300 ));
            rec.jbrise := Convert_Aidpl1_Type( Get( slices, 301 ));
            rec.tujbpl := Convert_Aidpl1_Type( Get( slices, 302 ));
            rec.tuin1 := Convert_Aidpl1_Type( Get( slices, 303 ));
            rec.tuin2 := Convert_Aidpl1_Type( Get( slices, 304 ));
            rec.jbopps := Convert_Aidpl1_Type( Get( slices, 305 ));
            rec.jbtime := Convert_Jbtime_Type( Get( slices, 306 ));
            rec.pays := Convert( slices, 307, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.paysw := Convert( slices, 308, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.paysg := Convert_Paylyg_Type( Get( slices, 309 ));
            rec.jbpen := Convert_Aidpl1_Type( Get( slices, 310 ));
            rec.jbpenm := Convert_Aidpl1_Type( Get( slices, 311 ));
            rec.payly := Convert( slices, 312, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.paylyw := Convert( slices, 313, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.paylyg := Convert_Paylyg_Type( Get( slices, 314 ));
            rec.jsboss := Convert_Jsboss_Type( Get( slices, 315 ));
            rec.jssize := Convert_Jssize_Type( Get( slices, 316 ));
            rec.jshrs := Convert( slices, 317, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jshrlk := Convert_Jbhrlk_Type( Get( slices, 318 ));
            rec.jstime := Convert_Jstime_Type( Get( slices, 319 ));
            rec.jstype := Convert_Jstype_Type( Get( slices, 320 ));
            rec.jsaccs := Convert_Jsaccs_Type( Get( slices, 321 ));
            rec.jsprf := Convert( slices, 322, ( -9, -8, -7, -3, -2, -1 ) );
            rec.jsprbm := Convert_Cjsbgm_Type( Get( slices, 323 ));
            rec.jsprby := Convert( slices, 324, ( -9, -8, -7, -2, -1 ) );
            rec.jsprem := Convert_Cjsbgm_Type( Get( slices, 325 ));
            rec.jsprey := Convert( slices, 326, ( -9, -8, -7, -2, -1 ) );
            rec.jspayl := Convert( slices, 327, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jspybm := Convert_Cjsbgm_Type( Get( slices, 328 ));
            rec.jspyby := Convert( slices, 329, ( -9, -8, -7, -2, -1 ) );
            rec.jspyem := Convert_Cjsbgm_Type( Get( slices, 330 ));
            rec.jspyey := Convert( slices, 331, ( -9, -8, -7, -2, -1 ) );
            rec.jspl := Convert_Jspl_Type( Get( slices, 332 ));
            rec.jsttwt := Convert( slices, 333, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.jsttwm := Convert_Jsttwm_Type( Get( slices, 334 ));
            rec.jssat1 := Convert_Jssat1_Type( Get( slices, 335 ));
            rec.jssat2 := Convert_Jbsat_Type( Get( slices, 336 ));
            rec.jssat3 := Convert_Jbsat_Type( Get( slices, 337 ));
            rec.jssat4 := Convert_Jbsat_Type( Get( slices, 338 ));
            rec.jssat5 := Convert_Jbsat_Type( Get( slices, 339 ));
            rec.jssat := Convert_Jbsat_Type( Get( slices, 340 ));
            rec.jsbgd := Convert( slices, 341, ( -9, -8, -7, -2, -1 ) );
            rec.jsbgm := Convert_Cjsbgm_Type( Get( slices, 342 ));
            rec.jsbgy := Convert( slices, 343, ( -9, -8, -7, -2, -1 ) );
            rec.jbed := Convert_Aidpl1_Type( Get( slices, 344 ));
            rec.jbed1 := Convert_Aidpl1_Type( Get( slices, 345 ));
            rec.jbed2 := Convert_Aidpl1_Type( Get( slices, 346 ));
            rec.jbed3 := Convert_Aidpl1_Type( Get( slices, 347 ));
            rec.jbed4 := Convert_Aidpl1_Type( Get( slices, 348 ));
            rec.jbed5 := Convert_Aidpl1_Type( Get( slices, 349 ));
            rec.jbedq := Convert( slices, 350, ( -9.0, -8.0, -7.0, -1.0 ) );
            rec.jbedp1 := Convert_Ednewp1_Type( Get( slices, 351 ));
            rec.jbedp2 := Convert( slices, 352, ( -9.0, -8.0, -7.0, -1.0 ) );
            rec.rach12 := Convert_Hhch12_Type( Get( slices, 353 ));
            rec.jbchc1 := Convert_Jbchc1_Type( Get( slices, 354 ));
            rec.jbchc2 := Convert_Jbchc2_Type( Get( slices, 355 ));
            rec.jbchc3 := Convert_Jbchc3_Type( Get( slices, 356 ));
            rec.xpchcf := Convert_Xpchcf_Type( Get( slices, 357 ));
            rec.xpchc := Convert( slices, 358, ( -9, -8, -7, -2, -1 ) );
            rec.huxpch := Convert_Huxpch_Type( Get( slices, 359 ));
            rec.hunurs := Convert_Hunurs_Type( Get( slices, 360 ));
            rec.julk1 := Convert_Aidpl1_Type( Get( slices, 361 ));
            rec.julk4 := Convert_Bscon_Type( Get( slices, 362 ));
            rec.julkjb := Convert_Aidpl1_Type( Get( slices, 363 ));
            rec.juspec := Convert_Juspec_Type( Get( slices, 364 ));
            rec.jusoc := Convert( slices, 365, ( -9, -8, -7, -2, -1 ) );
            rec.juhrsx := Convert( slices, 366, ( -9, -8, -7, -2, -1 ) );
            rec.jupayx := Convert( slices, 367, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jupayl := Convert( slices, 368, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.juhrsl := Convert( slices, 369, ( -9, -8, -7, -2, -1 ) );
            rec.eaage := Convert_Eaage_Type( Get( slices, 370 ));
            rec.jbub := Convert_Bscon_Type( Get( slices, 371 ));
            rec.jbuby := Convert_Jbuby_Type( Get( slices, 372 ));
            rec.j2has := Convert_Aidpl1_Type( Get( slices, 373 ));
            rec.j2soc := Convert( slices, 374, ( -9, -8, -7, -2, -1 ) );
            rec.j2semp := Convert_J2semp_Type( Get( slices, 375 ));
            rec.j2hrs := Convert( slices, 376, ( -9, -8, -7, -2, -1 ) );
            rec.j2pay := Convert( slices, 377, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbhha := Convert_Aidpl1_Type( Get( slices, 378 ));
            rec.jbhhb := Convert_Aidpl1_Type( Get( slices, 379 ));
            rec.jbhhc := Convert_Aidpl1_Type( Get( slices, 380 ));
            rec.jbhhd := Convert_Aidpl1_Type( Get( slices, 381 ));
            rec.jbhhe := Convert_Aidpl1_Type( Get( slices, 382 ));
            rec.jbhhf := Convert_Aidpl1_Type( Get( slices, 383 ));
            rec.ivea := Convert_Ivda_Type( Get( slices, 384 ));
            rec.iveb := Convert_Ivdb_Type( Get( slices, 385 ));
            rec.ivec := Convert_Ivec_Type( Get( slices, 386 ));
            rec.ived := Convert_Ivdd_Type( Get( slices, 387 ));
            rec.ivee := Convert_Ivee_Type( Get( slices, 388 ));
            rec.ednew := Convert_Aidpl1_Type( Get( slices, 389 ));
            rec.ednew1 := Convert_Aidpl1_Type( Get( slices, 390 ));
            rec.ednew2 := Convert_Aidpl1_Type( Get( slices, 391 ));
            rec.ednew3 := Convert_Aidpl1_Type( Get( slices, 392 ));
            rec.ednew4 := Convert_Aidpl1_Type( Get( slices, 393 ));
            rec.ednewq := Convert( slices, 394, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ednewp1 := Convert_Ednewp1_Type( Get( slices, 395 ));
            rec.ednewp2 := Convert( slices, 396, ( -9.0, -8.0, -7.0 ) );
            rec.nemst := Convert_Nemst_Type( Get( slices, 397 ));
            rec.cjsbgd := Convert( slices, 398, ( -9, -8, -7, -2, -1 ) );
            rec.cjsbgm := Convert_Cjsbgm_Type( Get( slices, 399 ));
            rec.cjsbgy := Convert( slices, 400, ( -9, -8, -7, -2, -1 ) );
            rec.cjsbly := Convert_Cjsbly_Type( Get( slices, 401 ));
            rec.njbs := Convert( slices, 402, ( -9, -8, -7 ) );
            rec.jbhad := Convert_Aidpl1_Type( Get( slices, 403 ));
            rec.jlend := Convert( slices, 404, ( -9, -8, -7, -2, -1 ) );
            rec.jlsoc := Convert( slices, 405, ( -9, -8, -7, -2, -1 ) );
            rec.jlsic := Convert( slices, 406, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jlsemp := Convert_J2semp_Type( Get( slices, 407 ));
            rec.jlboss := Convert_Aidpl1_Type( Get( slices, 408 ));
            rec.jlmngr := Convert_Jlmngr_Type( Get( slices, 409 ));
            rec.jlsize := Convert_Jlsize_Type( Get( slices, 410 ));
            rec.ivja := Convert_Ivda_Type( Get( slices, 411 ));
            rec.ivjb := Convert_Ivdb_Type( Get( slices, 412 ));
            rec.ivjc := Convert_Ivec_Type( Get( slices, 413 ));
            rec.ivjd := Convert_Ivdd_Type( Get( slices, 414 ));
            rec.ivje := Convert_Ivee_Type( Get( slices, 415 ));
            rec.ljbh := Convert( slices, 416, ( -9, -7 ) );
            rec.ljbm := Convert( slices, 417, ( -9, -7 ) );
            rec.ljhad := Convert_Ljhad_Type( Get( slices, 418 ));
            rec.ljesfv := Convert_Ljesfv_Type( Get( slices, 419 ));
            rec.jcebgd := Convert( slices, 420, ( -9, -8, -7, -2, -1 ) );
            rec.jcebgm := Convert_Jbbgm1_Type( Get( slices, 421 ));
            rec.jcebgy := Convert( slices, 422, ( -9, -8, -7, -2, -1 ) );
            rec.jcesoc := Convert( slices, 423, ( -9, -8, -7, -2, -1 ) );
            rec.jcesemp := Convert_Jcesemp_Type( Get( slices, 424 ));
            rec.jcemngr := Convert_Bscon_Type( Get( slices, 425 ));
            rec.opsoca := Convert_Ophla_Type( Get( slices, 426 ));
            rec.opsocb := Convert_Opsocb_Type( Get( slices, 427 ));
            rec.opsocc := Convert_Ophlb_Type( Get( slices, 428 ));
            rec.opsocd := Convert_Opsocd_Type( Get( slices, 429 ));
            rec.opsoce := Convert_Opsocd_Type( Get( slices, 430 ));
            rec.opsocf := Convert_Opsocd_Type( Get( slices, 431 ));
            rec.vote1 := Convert_Aidpl1_Type( Get( slices, 432 ));
            rec.vote2 := Convert_Aidpl1_Type( Get( slices, 433 ));
            rec.vote3 := Convert_Vote3_Type( Get( slices, 434 ));
            rec.vote4 := Convert_Vote3_Type( Get( slices, 435 ));
            rec.vote5 := Convert_Vote5_Type( Get( slices, 436 ));
            rec.vote6 := Convert_Vote6_Type( Get( slices, 437 ));
            rec.oppol1 := Convert_Oppol1_Type( Get( slices, 438 ));
            rec.oppol2 := Convert_Oppol2_Type( Get( slices, 439 ));
            rec.oppol3 := Convert_Oppol3_Type( Get( slices, 440 ));
            rec.oppol4 := Convert_Oppol4_Type( Get( slices, 441 ));
            rec.opchd1 := Convert_Opchd1_Type( Get( slices, 442 ));
            rec.opchd2 := Convert_Opchd1_Type( Get( slices, 443 ));
            rec.opchd3 := Convert_Opchd1_Type( Get( slices, 444 ));
            rec.opchd4 := Convert_Opchd1_Type( Get( slices, 445 ));
            rec.orgm := Convert_Aidpl1_Type( Get( slices, 446 ));
            rec.orgma := Convert_Orgma_Type( Get( slices, 447 ));
            rec.orgaa := Convert_Orgaa_Type( Get( slices, 448 ));
            rec.orgmb := Convert_Orgmb_Type( Get( slices, 449 ));
            rec.orgab := Convert_Orgab_Type( Get( slices, 450 ));
            rec.orgmc := Convert_Orgmc_Type( Get( slices, 451 ));
            rec.orgac := Convert_Orgac_Type( Get( slices, 452 ));
            rec.orgmd := Convert_Orgmd_Type( Get( slices, 453 ));
            rec.orgad := Convert_Orgad_Type( Get( slices, 454 ));
            rec.orgme := Convert_Orgme_Type( Get( slices, 455 ));
            rec.orgae := Convert_Orgae_Type( Get( slices, 456 ));
            rec.orgmf := Convert_Orgmf_Type( Get( slices, 457 ));
            rec.orgaf := Convert_Orgaf_Type( Get( slices, 458 ));
            rec.orgmg := Convert_Orgmg_Type( Get( slices, 459 ));
            rec.orgag := Convert_Orgag_Type( Get( slices, 460 ));
            rec.orgmh := Convert_Orgmh_Type( Get( slices, 461 ));
            rec.orgah := Convert_Orgah_Type( Get( slices, 462 ));
            rec.orgmi := Convert_Orgmi_Type( Get( slices, 463 ));
            rec.orgai := Convert_Orgai_Type( Get( slices, 464 ));
            rec.orgmj := Convert_Orgmj_Type( Get( slices, 465 ));
            rec.orgaj := Convert_Orgaj_Type( Get( slices, 466 ));
            rec.orgmk := Convert_Orgmk_Type( Get( slices, 467 ));
            rec.orgak := Convert_Orgak_Type( Get( slices, 468 ));
            rec.orgml := Convert_Orgml_Type( Get( slices, 469 ));
            rec.orgal := Convert_Orgal_Type( Get( slices, 470 ));
            rec.orgmm := Convert_Orgmm_Type( Get( slices, 471 ));
            rec.orgam := Convert_Orgam_Type( Get( slices, 472 ));
            rec.orgmo := Convert_Orgmo_Type( Get( slices, 473 ));
            rec.orgao := Convert_Orgao_Type( Get( slices, 474 ));
            rec.orgmp := Convert_Orgmp_Type( Get( slices, 475 ));
            rec.orgap := Convert_Orgap_Type( Get( slices, 476 ));
            rec.orgmq := Convert_Orgmq_Type( Get( slices, 477 ));
            rec.orgaq := Convert_Orgaq_Type( Get( slices, 478 ));
            rec.orga := Convert_Aidpl1_Type( Get( slices, 479 ));
            rec.oprlg2 := Convert_Oprlg2_Type( Get( slices, 480 ));
            rec.caruse := Convert_Caruse_Type( Get( slices, 481 ));
            rec.ivva := Convert_Ivva_Type( Get( slices, 482 ));
            rec.ivvb := Convert_Ivdb_Type( Get( slices, 483 ));
            rec.ivvc := Convert_Ivfc_Type( Get( slices, 484 ));
            rec.ivvd := Convert_Ivdd_Type( Get( slices, 485 ));
            rec.ivve := Convert_Ivee_Type( Get( slices, 486 ));
            rec.f101 := Convert_F101_Type( Get( slices, 487 ));
            rec.f102 := Convert_F102_Type( Get( slices, 488 ));
            rec.f103 := Convert_F103_Type( Get( slices, 489 ));
            rec.f104 := Convert( slices, 490, ( -9, -8, -7 ) );
            rec.f105 := Convert_F105_Type( Get( slices, 491 ));
            rec.f106 := Convert_F106_Type( Get( slices, 492 ));
            rec.f116 := Convert_F116_Type( Get( slices, 493 ));
            rec.f117 := Convert_F117_Type( Get( slices, 494 ));
            rec.f118 := Convert_F118_Type( Get( slices, 495 ));
            rec.f119 := Convert_F119_Type( Get( slices, 496 ));
            rec.f120 := Convert_F120_Type( Get( slices, 497 ));
            rec.f121 := Convert_F121_Type( Get( slices, 498 ));
            rec.f122 := Convert_F122_Type( Get( slices, 499 ));
            rec.f123 := Convert_F123_Type( Get( slices, 500 ));
            rec.f124 := Convert_F124_Type( Get( slices, 501 ));
            rec.f131 := Convert_F131_Type( Get( slices, 502 ));
            rec.f132 := Convert_F132_Type( Get( slices, 503 ));
            rec.f133 := Convert_F133_Type( Get( slices, 504 ));
            rec.f134 := Convert_F134_Type( Get( slices, 505 ));
            rec.f135 := Convert_F135_Type( Get( slices, 506 ));
            rec.f136 := Convert_F136_Type( Get( slices, 507 ));
            rec.f137 := Convert_F137_Type( Get( slices, 508 ));
            rec.f138 := Convert_F138_Type( Get( slices, 509 ));
            rec.f139 := Convert_F139_Type( Get( slices, 510 ));
            rec.f140 := Convert_F140_Type( Get( slices, 511 ));
            rec.f141 := Convert_F141_Type( Get( slices, 512 ));
            rec.f151 := Convert_F151_Type( Get( slices, 513 ));
            rec.f152 := Convert_F152_Type( Get( slices, 514 ));
            rec.f153 := Convert_F153_Type( Get( slices, 515 ));
            rec.f154 := Convert_F154_Type( Get( slices, 516 ));
            rec.f155 := Convert_F155_Type( Get( slices, 517 ));
            rec.f156 := Convert_F156_Type( Get( slices, 518 ));
            rec.f157 := Convert_F157_Type( Get( slices, 519 ));
            rec.f158 := Convert_F158_Type( Get( slices, 520 ));
            rec.f159 := Convert_F159_Type( Get( slices, 521 ));
            rec.nf1 := Convert( slices, 522, ( -9, -8, -7, -2, -1 ) );
            rec.fisit := Convert_Fisit_Type( Get( slices, 523 ));
            rec.fisitc := Convert( slices, 524, ( -9, -8, -7, -2, -1 ) );
            rec.fisity := Convert_Fisity_Type( Get( slices, 525 ));
            rec.fisitx := Convert( slices, 526, ( -9, -8, -7, -2, -1 ) );
            rec.opxpsv := Convert_Opxpsv_Type( Get( slices, 527 ));
            rec.opxpcr := Convert_Opxpcr_Type( Get( slices, 528 ));
            rec.fiyrdi := Convert( slices, 529, ( -9, -8, -7, -2, -1 ) );
            rec.fiyrdiu := Convert_Fiyrdiu_Type( Get( slices, 530 ));
            rec.save := Convert_Aidpl1_Type( Get( slices, 531 ));
            rec.saved := Convert( slices, 532, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.savey1 := Convert_Savey1_Type( Get( slices, 533 ));
            rec.savey2 := Convert_Savey1_Type( Get( slices, 534 ));
            rec.pppen := Convert_Aidpl1_Type( Get( slices, 535 ));
            rec.penb4 := Convert_Penb4_Type( Get( slices, 536 ));
            rec.penb4yr := Convert( slices, 537, ( -9, -8, -7, -2, -1 ) );
            rec.penb4v := Convert( slices, 538, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.penb4w := Convert( slices, 539, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.penyr := Convert( slices, 540, ( -9, -8, -7, -2, -1 ) );
            rec.penadd := Convert_Aidpl1_Type( Get( slices, 541 ));
            rec.penadv := Convert( slices, 542, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.penadw := Convert( slices, 543, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.fthh := Convert_Aidpl1_Type( Get( slices, 544 ));
            rec.fthh1 := Convert( slices, 545, ( -9, -8, -7, -2, -1 ) );
            rec.fthh11 := Convert_Fthh11_Type( Get( slices, 546 ));
            rec.fthh12 := Convert_Fthh12_Type( Get( slices, 547 ));
            rec.fthh13 := Convert_Fthh13_Type( Get( slices, 548 ));
            rec.fthh14 := Convert_Fthh14_Type( Get( slices, 549 ));
            rec.fthh15 := Convert_Fthh15_Type( Get( slices, 550 ));
            rec.fthh16 := Convert_Ftexa6_Type( Get( slices, 551 ));
            rec.fthh1v := Convert( slices, 552, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.fthh1w := Convert( slices, 553, ( -9.0, -8.0, -7.0, -5.0, -3.0, -2.0, -1.0 ) );
            rec.fthh2 := Convert( slices, 554, ( -9, -8, -7, -2, -1 ) );
            rec.fthh21 := Convert_Fthh11_Type( Get( slices, 555 ));
            rec.fthh22 := Convert_Fthh12_Type( Get( slices, 556 ));
            rec.fthh23 := Convert_Fthh13_Type( Get( slices, 557 ));
            rec.fthh24 := Convert_Fthh24_Type( Get( slices, 558 ));
            rec.fthh25 := Convert_Fthh15_Type( Get( slices, 559 ));
            rec.fthh26 := Convert_Ftexa6_Type( Get( slices, 560 ));
            rec.fthh2v := Convert( slices, 561, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.fthh2w := Convert( slices, 562, ( -9.0, -8.0, -7.0, -5.0, -3.0, -2.0, -1.0 ) );
            rec.fthh3 := Convert( slices, 563, ( -9, -8, -7, -2, -1 ) );
            rec.fthh31 := Convert_Fthh11_Type( Get( slices, 564 ));
            rec.fthh32 := Convert_Fthh12_Type( Get( slices, 565 ));
            rec.fthh33 := Convert_Fthh13_Type( Get( slices, 566 ));
            rec.fthh34 := Convert_Fthh24_Type( Get( slices, 567 ));
            rec.fthh35 := Convert_Fthh15_Type( Get( slices, 568 ));
            rec.fthh36 := Convert_Ftexa6_Type( Get( slices, 569 ));
            rec.fthh3v := Convert( slices, 570, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.fthh3w := Convert( slices, 571, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.ftexhh := Convert_Aidpl1_Type( Get( slices, 572 ));
            rec.ftexa := Convert_Ftexa_Type( Get( slices, 573 ));
            rec.ftexa1 := Convert_Ftexa1_Type( Get( slices, 574 ));
            rec.ftexa2 := Convert_Ftexa2_Type( Get( slices, 575 ));
            rec.ftexa3 := Convert_Ftexa3_Type( Get( slices, 576 ));
            rec.ftexa4 := Convert_Ftexa4_Type( Get( slices, 577 ));
            rec.ftexa5 := Convert_Ftexa5_Type( Get( slices, 578 ));
            rec.ftexa6 := Convert_Ftexa6_Type( Get( slices, 579 ));
            rec.ftexav := Convert( slices, 580, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ftexaw := Convert( slices, 581, ( -9.0, -8.0, -7.0, -5.0, -3.0, -2.0, -1.0 ) );
            rec.ftexb := Convert_Ftexb_Type( Get( slices, 582 ));
            rec.ftexb1 := Convert_Ftexa1_Type( Get( slices, 583 ));
            rec.ftexb2 := Convert_Ftexa2_Type( Get( slices, 584 ));
            rec.ftexb3 := Convert_Ftexa3_Type( Get( slices, 585 ));
            rec.ftexb4 := Convert_Ftexa4_Type( Get( slices, 586 ));
            rec.ftexb5 := Convert_Ftexa5_Type( Get( slices, 587 ));
            rec.ftexb6 := Convert_Ftexa6_Type( Get( slices, 588 ));
            rec.ftexbv := Convert( slices, 589, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ftexbw := Convert( slices, 590, ( -9.0, -8.0, -7.0, -5.0, -3.0, -2.0, -1.0 ) );
            rec.ftexc := Convert_Ftexc_Type( Get( slices, 591 ));
            rec.ftexc1 := Convert_Ftexa1_Type( Get( slices, 592 ));
            rec.ftexc2 := Convert_Ftexa2_Type( Get( slices, 593 ));
            rec.ftexc3 := Convert_Ftexa3_Type( Get( slices, 594 ));
            rec.ftexc4 := Convert_Ftexa4_Type( Get( slices, 595 ));
            rec.ftexc5 := Convert_Ftexa5_Type( Get( slices, 596 ));
            rec.ftexc6 := Convert_Ftexa6_Type( Get( slices, 597 ));
            rec.ftexcv := Convert( slices, 598, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ftexcw := Convert( slices, 599, ( -9.0, -8.0, -7.0, -5.0, -3.0, -2.0, -1.0 ) );
            rec.spinhh := Convert_Hhch12_Type( Get( slices, 600 ));
            rec.huruns := Convert_Huruns_Type( Get( slices, 601 ));
            rec.huboss := Convert_Huboss_Type( Get( slices, 602 ));
            rec.howlng := Convert( slices, 603, ( -9, -8, -7, -3, -2, -1 ) );
            rec.ivfa := Convert_Ivda_Type( Get( slices, 604 ));
            rec.ivfb := Convert_Ivdb_Type( Get( slices, 605 ));
            rec.ivfc := Convert_Ivfc_Type( Get( slices, 606 ));
            rec.ivfd := Convert_Ivdd_Type( Get( slices, 607 ));
            rec.ivfe := Convert_Ivee_Type( Get( slices, 608 ));
            rec.ivfoih := Convert( slices, 609, ( -9, -8 ) );
            rec.ivfoim := Convert( slices, 610, ( -9, -8 ) );
            rec.ivsc := Convert_Ivsc_Type( Get( slices, 611 ));
            rec.iv1 := Convert_Hhch12_Type( Get( slices, 612 ));
            rec.iv2 := Convert_Iv2_Type( Get( slices, 613 ));
            rec.iv4 := Convert_Iv4_Type( Get( slices, 614 ));
            rec.iv5 := Convert_Iv5_Type( Get( slices, 615 ));
            rec.iv6a := Convert_Hhch12_Type( Get( slices, 616 ));
            rec.iv6b := Convert_Hhch12_Type( Get( slices, 617 ));
            rec.iv6c := Convert_Hhch12_Type( Get( slices, 618 ));
            rec.iv6d := Convert_Hhch12_Type( Get( slices, 619 ));
            rec.iv6e := Convert_Hhch12_Type( Get( slices, 620 ));
            rec.iv6f := Convert_Hhch12_Type( Get( slices, 621 ));
            rec.iv7 := Convert( slices, 622, ( -9, -8, -7 ) );
            rec.ghqa := Convert_Ghqa_Type( Get( slices, 623 ));
            rec.ghqb := Convert_Ghqb_Type( Get( slices, 624 ));
            rec.ghqc := Convert_Ghqc_Type( Get( slices, 625 ));
            rec.ghqd := Convert_Ghqc_Type( Get( slices, 626 ));
            rec.ghqe := Convert_Ghqe_Type( Get( slices, 627 ));
            rec.ghqf := Convert_Ghqe_Type( Get( slices, 628 ));
            rec.ghqg := Convert_Ghqc_Type( Get( slices, 629 ));
            rec.ghqh := Convert_Ghqc_Type( Get( slices, 630 ));
            rec.ghqi := Convert_Ghqb_Type( Get( slices, 631 ));
            rec.ghqj := Convert_Ghqe_Type( Get( slices, 632 ));
            rec.ghqk := Convert_Ghqe_Type( Get( slices, 633 ));
            rec.ghql := Convert_Ghqc_Type( Get( slices, 634 ));
            rec.opfama := Convert_Opfama_Type( Get( slices, 635 ));
            rec.opfamb := Convert_Opfama_Type( Get( slices, 636 ));
            rec.opfamc := Convert_Opfama_Type( Get( slices, 637 ));
            rec.opfamd := Convert_Opfama_Type( Get( slices, 638 ));
            rec.opfame := Convert_Opfama_Type( Get( slices, 639 ));
            rec.opfamf := Convert_Opfama_Type( Get( slices, 640 ));
            rec.opfamg := Convert_Opfama_Type( Get( slices, 641 ));
            rec.opfamh := Convert_Opfama_Type( Get( slices, 642 ));
            rec.opfami := Convert_Opfama_Type( Get( slices, 643 ));
            rec.ssupa := Convert_Ssupa_Type( Get( slices, 644 ));
            rec.ssupb := Convert_Ssupa_Type( Get( slices, 645 ));
            rec.ssupc := Convert_Ssupa_Type( Get( slices, 646 ));
            rec.ssupd := Convert_Ssupa_Type( Get( slices, 647 ));
            rec.ssupe := Convert_Ssupa_Type( Get( slices, 648 ));
            rec.ssup1 := Convert_Netsx1_Type( Get( slices, 649 ));
            rec.ssupr2r := Convert_Ssupr2r_Type( Get( slices, 650 ));
            rec.prrs2i := Convert_Prrs2i_Type( Get( slices, 651 ));
            rec.pripn := Convert( slices, 652, ( -9, -8 ) );
            rec.prwhy := Convert_Prwhy_Type( Get( slices, 653 ));
            rec.pplevr := Convert_Plever_Type( Get( slices, 654 ));
            rec.prfehq := Convert_Prfehq_Type( Get( slices, 655 ));
            rec.prsehq := Convert_Prsehq_Type( Get( slices, 656 ));
            rec.presbgm := Convert_Presbgm_Type( Get( slices, 657 ));
            rec.presbgy := Convert( slices, 658, ( -9, -8, -2, -1 ) );
            rec.presly := Convert_Presly_Type( Get( slices, 659 ));
            rec.prf101 := Convert_Prf101_Type( Get( slices, 660 ));
            rec.prf102 := Convert_Prf102_Type( Get( slices, 661 ));
            rec.prf116 := Convert_Prf116_Type( Get( slices, 662 ));
            rec.prf131 := Convert_Prf131_Type( Get( slices, 663 ));
            rec.prf134 := Convert_Prf134_Type( Get( slices, 664 ));
            rec.prf135 := Convert_Prf135_Type( Get( slices, 665 ));
            rec.prf137 := Convert_Prf137_Type( Get( slices, 666 ));
            rec.prf139 := Convert_Prf139_Type( Get( slices, 667 ));
            rec.prf141 := Convert_Prf141_Type( Get( slices, 668 ));
            rec.prfirn := Convert_Prfirn_Type( Get( slices, 669 ));
            rec.prearn := Convert_Prearn_Type( Get( slices, 670 ));
            rec.prjbbgm := Convert_Presbgm_Type( Get( slices, 671 ));
            rec.prjbbgy := Convert( slices, 672, ( -9, -8, -1 ) );
            rec.prjbly := Convert_Prjbly_Type( Get( slices, 673 ));
            rec.prfitb := Convert_Prfitb_Type( Get( slices, 674 ));
            rec.ivpa := Convert_Ivpa_Type( Get( slices, 675 ));
            rec.ivpb := Convert_Ivpb_Type( Get( slices, 676 ));
            rec.ivpc := Convert_Ivpc_Type( Get( slices, 677 ));
            rec.ivpd := Convert_Ivpd_Type( Get( slices, 678 ));
            rec.ivpe := Convert_Ivpe_Type( Get( slices, 679 ));
            rec.telwhy := Convert_Telwhy_Type( Get( slices, 680 ));
            rec.prjbft := Convert_Prjbft_Type( Get( slices, 681 ));
            rec.pid := Convert( slices, 682 );
            rec.iviow2 := Convert_Iviow2_Type( Get( slices, 683 ));
            rec.hhmem := Convert_Hhmem_Type( Get( slices, 684 ));
            rec.newhy := Convert_Newhy_Type( Get( slices, 685 ));
            rec.nemnjn := Convert_Nemnjn_Type( Get( slices, 686 ));
            rec.neyrjn := Convert( slices, 687, ( -9, -8, -2, -1 ) );
            rec.ivfio := Convert_Ivfio_Type( Get( slices, 688 ));
            rec.iodc := Convert_Iodc_Type( Get( slices, 689 ));
            rec.hgr2r := Convert_Hgr2r_Type( Get( slices, 690 ));
            rec.hgsex := Convert_Hgsex_Type( Get( slices, 691 ));
            rec.hgbm := Convert_Hgbm_Type( Get( slices, 692 ));
            rec.hgby := Convert( slices, 693, ( -2, -1 ) );
            rec.mastat := Convert_Mastat_Type( Get( slices, 694 ));
            rec.hgspn := Convert( slices, 695, ( -9, -8, -2, -1 ) );
            rec.hgemp := Convert_Hgemp_Type( Get( slices, 696 ));
            rec.hgfno := Convert( slices, 697, ( -9, -8, -2, -1 ) );
            rec.hgmno := Convert( slices, 698, ( -9, -8, -2, -1 ) );
            rec.hgra := Convert( slices, 699, ( -9, -8, -2, -1 ) );
            rec.age := Convert( slices, 700, ( -9, -8 ) );
            rec.age12 := Convert( slices, 701, ( -9, -8 ) );
            rec.butype := Convert_Butype_Type( Get( slices, 702 ));
            rec.buno := Convert( slices, 703, ( -9, -8 ) );
            rec.nchild := Convert( slices, 704, ( -9, -8 ) );
            rec.hoh := Convert_Hoh_Type( Get( slices, 705 ));
            rec.rach16 := Convert_Hhch12_Type( Get( slices, 706 ));
            rec.sampst := Convert_Sampst_Type( Get( slices, 707 ));
            rec.movest := Convert_Movest_Type( Get( slices, 708 ));
            rec.region := Convert_Region_Type( Get( slices, 709 ));
            rec.hhsize := Convert( slices, 710, ( -9, -8 ) );
            rec.hhtype := Convert_Hhtype_Type( Get( slices, 711 ));
            rec.tenure := Convert_Tenure_Type( Get( slices, 712 ));
            rec.qfedhi := Convert_Qfedhi_Type( Get( slices, 713 ));
            rec.qfvoc := Convert_Qfvoc_Type( Get( slices, 714 ));
            rec.qfachi := Convert_Qfachi_Type( Get( slices, 715 ));
            rec.jbft := Convert_Jbft_Type( Get( slices, 716 ));
            rec.payg := Convert( slices, 717, ( -9.0, -8.0, -7.0 ) );
            rec.payn := Convert( slices, 718, ( -9.0, -8.0, -7.0 ) );
            rec.paygu := Convert( slices, 719, ( -9.0, -8.0, -7.0 ) );
            rec.paynu := Convert( slices, 720, ( -9.0, -8.0, -7.0 ) );
            rec.paygty := Convert( slices, 721, ( -9.0, -8.0, -7.0 ) );
            rec.paygly := Convert( slices, 722, ( -9.0, -8.0, -7.0 ) );
            rec.paynty := Convert( slices, 723, ( -9.0, -8.0, -7.0 ) );
            rec.paynly := Convert( slices, 724, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jsprof := Convert( slices, 725, ( -9.0, -8.0, -7.0 ) );
            rec.jspayg := Convert( slices, 726, ( -9.0, -8.0, -7.0 ) );
            rec.cjsten := Convert( slices, 727, ( -9.0, -8.0, -7.0 ) );
            rec.cjswk9 := Convert( slices, 728, ( -9.0, -8.0, -7.0 ) );
            rec.jlid := Convert_Jlid_Type( Get( slices, 729 ));
            rec.jlyid := Convert_Jlyid_Type( Get( slices, 730 ));
            rec.jtyid := Convert_Jtyid_Type( Get( slices, 731 ));
            rec.jbseg := Convert_Jbseg_Type( Get( slices, 732 ));
            rec.jbgold := Convert( slices, 733, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbrgsc := Convert_Jbrgsc_Type( Get( slices, 734 ));
            rec.jbisco := Convert( slices, 735 );
            rec.jbcssm := Convert( slices, 736, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbcssf := Convert( slices, 737, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbhgs := Convert( slices, 738, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbsec := Convert_Jbsec_Type( Get( slices, 739 ));
            rec.njbwks := Convert( slices, 740, ( -9.0, -8.0, -7.0 ) );
            rec.njuwks := Convert( slices, 741, ( -9.0, -8.0, -7.0 ) );
            rec.njiwks := Convert( slices, 742, ( -9.0, -8.0, -7.0 ) );
            rec.njbnew := Convert( slices, 743, ( -9, -8, -7 ) );
            rec.njbsp := Convert( slices, 744, ( -9, -8, -7 ) );
            rec.njusp := Convert( slices, 745, ( -9, -8, -7 ) );
            rec.njisp := Convert( slices, 746, ( -9, -8, -7 ) );
            rec.jbstatl := Convert( slices, 747, ( -9, -8, -7, -2, -1 ) );
            rec.jbstatt := Convert( slices, 748, ( -9, -8, -7, -2, -1 ) );
            rec.jbsocly := Convert( slices, 749, ( -9, -8, -7 ) );
            rec.jlseg := Convert_Jlseg_Type( Get( slices, 750 ));
            rec.jlgold := Convert( slices, 751, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlrgsc := Convert_Jlrgsc_Type( Get( slices, 752 ));
            rec.jlisco := Convert( slices, 753 );
            rec.jlcssm := Convert( slices, 754, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlcssf := Convert( slices, 755, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlhgs := Convert( slices, 756, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlsec := Convert_Jlsec_Type( Get( slices, 757 ));
            rec.norgm := Convert( slices, 758, ( -9, -8, -7 ) );
            rec.norga := Convert( slices, 759, ( -9, -8, -7 ) );
            rec.vote := Convert_Vote_Type( Get( slices, 760 ));
            rec.jceseg := Convert_Jceseg_Type( Get( slices, 761 ));
            rec.jcegold := Convert( slices, 762, ( -9.0, -8.0, -7.0 ) );
            rec.jcergsc := Convert_Jcergsc_Type( Get( slices, 763 ));
            rec.jceisco := Convert( slices, 764 );
            rec.jcecssm := Convert( slices, 765, ( -9.0, -8.0, -7.0 ) );
            rec.jcecssf := Convert( slices, 766, ( -9.0, -8.0, -7.0 ) );
            rec.jcehgs := Convert( slices, 767, ( -9.0, -8.0, -7.0 ) );
            rec.jcesec := Convert_Jcesec_Type( Get( slices, 768 ));
            rec.fimnp := Convert( slices, 769, ( -9.0, -8.0, -7.0 ) );
            rec.fimnb := Convert( slices, 770, ( -9.0, -8.0, -7.0 ) );
            rec.fimni := Convert( slices, 771, ( -9.0, -8.0, -7.0 ) );
            rec.fimnt := Convert( slices, 772, ( -9.0, -8.0, -7.0 ) );
            rec.fimnl := Convert( slices, 773, ( -9.0, -8.0, -7.0 ) );
            rec.fimnnl := Convert( slices, 774, ( -9.0, -8.0, -7.0 ) );
            rec.fimn := Convert( slices, 775, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrl := Convert( slices, 776, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrnl := Convert( slices, 777, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrp := Convert( slices, 778, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrb := Convert( slices, 779, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrt := Convert( slices, 780, ( -9.0, -8.0, -7.0 ) );
            rec.fiyri := Convert( slices, 781, ( -9.0, -8.0, -7.0 ) );
            rec.fiyr := Convert( slices, 782, ( -9.0, -8.0, -7.0 ) );
            rec.fihhmn := Convert( slices, 783, ( -9.0, -8.0, -7.0 ) );
            rec.hlghq1 := Convert( slices, 784, ( -9, -8, -7 ) );
            rec.hlghq2 := Convert( slices, 785, ( -9, -8, -7 ) );
            rec.spjb := Convert_Spjb_Type( Get( slices, 786 ));
            rec.spsoc := Convert( slices, 787, ( -9.0, -8.0 ) );
            rec.spjbhr := Convert( slices, 788, ( -9, -8, -7 ) );
            rec.spjbot := Convert( slices, 789, ( -9, -8, -7 ) );
            rec.sppayg := Convert( slices, 790, ( -9.0, -8.0, -7.0 ) );
            rec.spjbyr := Convert( slices, 791, ( -9, -8, -7 ) );
            rec.ljnrec := Convert( slices, 792, ( -8, -7 ) );
            rec.ljlrst := Convert_Ljlrst_Type( Get( slices, 793 ));
            rec.lrwght := Convert( slices, 794 );
            rec.lewght := Convert( slices, 795 );
            rec.xrwght := Convert( slices, 796 );
            rec.xewght := Convert( slices, 797 );
            rec.j2payi := Convert( slices, 798, ( -9, -8, -7, -3, -2, -1 ) );
            rec.fiyrdii := Convert_Fiyrdii_Type( Get( slices, 799 ));
            rec.prearni := Convert( slices, 800, ( -9, -8, -2, -1 ) );
            rec.prfitbi := Convert_Prfitbi_Type( Get( slices, 801 ));
            rec.paygui := Convert_Fimnbi_Type( Get( slices, 802 ));
            rec.paynui := Convert_Fimnbi_Type( Get( slices, 803 ));
            rec.paygti := Convert_Fimnbi_Type( Get( slices, 804 ));
            rec.paygli := Convert_Fimnbi_Type( Get( slices, 805 ));
            rec.paynti := Convert_Fimnbi_Type( Get( slices, 806 ));
            rec.paynli := Convert_Fimnbi_Type( Get( slices, 807 ));
            rec.jsprofi := Convert_Fimnbi_Type( Get( slices, 808 ));
            rec.jspaygi := Convert_Fimnbi_Type( Get( slices, 809 ));
            rec.fimnpi := Convert_Fimnbi_Type( Get( slices, 810 ));
            rec.fimnbi := Convert_Fimnbi_Type( Get( slices, 811 ));
            rec.fimnii := Convert_Fimnii_Type( Get( slices, 812 ));
            rec.fimnti := Convert_Fimnii_Type( Get( slices, 813 ));
            rec.fimnnli := Convert_Fimnbi_Type( Get( slices, 814 ));
            rec.fimnli := Convert_Fimnbi_Type( Get( slices, 815 ));
            rec.fimnthi := Convert_Fimnii_Type( Get( slices, 816 ));
            rec.fiyrli := Convert_Fimnbi_Type( Get( slices, 817 ));
            rec.fiyrnli := Convert_Fimnbi_Type( Get( slices, 818 ));
            rec.fiyrpi := Convert_Fimnii_Type( Get( slices, 819 ));
            rec.fiyrbi := Convert_Fimnbi_Type( Get( slices, 820 ));
            rec.fiyrti := Convert_Fimnbi_Type( Get( slices, 821 ));
            rec.fiyrii := Convert_Fimnbi_Type( Get( slices, 822 ));
            rec.fiyeari := Convert_Fimnbi_Type( Get( slices, 823 ));
            rec.sppaygi := Convert_Prfitbi_Type( Get( slices, 824 ));
            rec.fihhmni := Convert_Fihhmni_Type( Get( slices, 825 ));
            rec.event1 := Convert( slices, 826, ( -9, -8, -7, -1 ) );
            rec.event1s := Convert( slices, 827, ( -9, -8, -7 ) );
            rec.event2 := Convert( slices, 828, ( -9, -8, -7, -1 ) );
            rec.event2s := Convert( slices, 829, ( -9, -8, -7 ) );
            rec.event3 := Convert( slices, 830, ( -9, -8, -7, -1 ) );
            rec.event3s := Convert( slices, 831, ( -9, -8, -7 ) );
            rec.event4 := Convert( slices, 832, ( -9, -8, -7, -1 ) );
            rec.event4s := Convert( slices, 833, ( -9, -8, -7 ) );
            rec.mrjend := Convert( slices, 834, ( -9, -8, -7, -3, -2, -1 ) );
            rec.mrjsoc := Convert( slices, 835, ( -9, -8, -7, -3 ) );
            rec.mrjsic := Convert( slices, 836, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjsemp := Convert_Mrjsemp_Type( Get( slices, 837 ));
            rec.mrjboss := Convert_Mrjboss_Type( Get( slices, 838 ));
            rec.mrjmngr := Convert_Mrjmngr_Type( Get( slices, 839 ));
            rec.mrjsize := Convert_Mrjsize_Type( Get( slices, 840 ));
            rec.mrjseg := Convert_Maseg_Type( Get( slices, 841 ));
            rec.mrjgold := Convert( slices, 842, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjrgsc := Convert_Margsc_Type( Get( slices, 843 ));
            rec.mrjisco := Convert( slices, 844 );
            rec.mrjcssm := Convert( slices, 845, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjcssf := Convert( slices, 846, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjhgs := Convert( slices, 847, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjsec := Convert_J1sec_Type( Get( slices, 848 ));
            rec.doiy4 := Convert( slices, 849, ( -9, -8, -7, -2, -1 ) );
            rec.plnowy4 := Convert( slices, 850, ( -9, -8, -7, -2, -1 ) );
            rec.edendy4 := Convert( slices, 851, ( -9, -8, -7, -3, -2, -1 ) );
            rec.mlchy4 := Convert( slices, 852, ( -9, -8, -7, -2, -1 ) );
            rec.yr2uk4 := Convert( slices, 853, ( -9, -8, -7, -2, -1 ) );
            rec.jbbgy4 := Convert( slices, 854, ( -9, -8, -7, -2, -1 ) );
            rec.jsprby4 := Convert( slices, 855, ( -9, -8, -7, -2, -1 ) );
            rec.jsprey4 := Convert( slices, 856, ( -9, -8, -7, -2, -1 ) );
            rec.jspyby4 := Convert( slices, 857, ( -9, -8, -7, -2, -1 ) );
            rec.jspyey4 := Convert( slices, 858, ( -9, -8, -7, -2, -1 ) );
            rec.jsbgy4 := Convert( slices, 859, ( -9, -8, -7, -2, -1 ) );
            rec.cjsbgy4 := Convert( slices, 860, ( -9, -8, -7, -2, -1 ) );
            rec.jlend4 := Convert( slices, 861, ( -9, -8, -7, -2, -1 ) );
            rec.jcebgy4 := Convert( slices, 862, ( -9, -8, -7, -2, -1 ) );
            rec.penb4y4 := Convert( slices, 863, ( -9, -8, -7, -2, -1 ) );
            rec.penyr4 := Convert( slices, 864, ( -9, -8, -7, -2, -1 ) );
            rec.presby4 := Convert( slices, 865, ( -9, -8, -7, -2, -1 ) );
            rec.prjbby4 := Convert( slices, 866, ( -9, -8, -7, -2, -1 ) );
            rec.neyrjn4 := Convert( slices, 867, ( -9, -8, -7, -2, -1 ) );
            rec.sppid := Convert( slices, 868 );
            rec.fpid := Convert( slices, 869 );
            rec.mpid := Convert( slices, 870 );
            rec.distmov := Convert( slices, 871, ( -9.0, -8.0, -7.0 ) );
            rec.region2 := Convert_Region2_Type( Get( slices, 872 ));
            rec.isced := Convert_Isced_Type( Get( slices, 873 ));
            rec.casmin := Convert_Casmin_Type( Get( slices, 874 ));
            rec.jbiscon := Convert( slices, 875, ( -9, -8, -7, -2, -1 ) );
            rec.jliscon := Convert( slices, 876, ( -9, -8, -7, -2, -1 ) );
            rec.mrjiscn := Convert( slices, 877, ( -9, -8, -7, -2, -1 ) );
            rec.jceiscn := Convert( slices, 878, ( -9, -8, -7 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Indresp_component ).start_pos = 0 ) then
               index.pointers( Indresp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Indresp_component ).counter := index.pointers( Indresp_component ).counter + 1;
            Put_Index( index_map, index );
            Indresp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Indresp_IO.Close( bin_file );
   end Create_Indresp_Wave_C;




   procedure Create_Indsamp_Wave_C( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Indsamp_IO.File_Type;
      rec         : Indsamp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Indsamp_IO.Create (bin_file, Indsamp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.pid := Convert( slices, 3 );
            rec.iviow2 := Convert_Iviow2_Type( Get( slices, 4 ));
            rec.ivievr := Convert_Ivievr_Type( Get( slices, 5 ));
            rec.ivelig := Convert_Ivelig_Type( Get( slices, 6 ));
            rec.hhmem := Convert_Hhmem_Type( Get( slices, 7 ));
            rec.newhy := Convert_Newhy_Type( Get( slices, 8 ));
            rec.nemnjn := Convert_Nemnjn_Type( Get( slices, 9 ));
            rec.neyrjn := Convert( slices, 10, ( -9, -8, -2, -1 ) );
            rec.lvwhy := Convert_Lvwhy_Type( Get( slices, 11 ));
            rec.lvmn := Convert_Lvmn_Type( Get( slices, 12 ));
            rec.lvyr := Convert( slices, 13, ( -9, -8, -2, -1 ) );
            rec.lvloc := Convert_Lvloc_Type( Get( slices, 14 ));
            rec.ivfio := Convert_Ivfio_Type( Get( slices, 15 ));
            rec.ivrref := Convert_Ivrref_Type( Get( slices, 16 ));
            rec.finloc := Convert_Finloc_Type( Get( slices, 17 ));
            rec.ivtel := Convert_Depchl_Type( Get( slices, 18 ));
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 19 ));
            rec.sampst := Convert_Sampst_Type( Get( slices, 20 ));
            rec.movest := Convert_Movest_Type( Get( slices, 21 ));
            rec.lewght := Convert( slices, 22, ( -9.0, -8.0, -1.0 ) );
            rec.lrwght := Convert( slices, 23, ( -9.0, -8.0, -1.0 ) );
            rec.neyrjn4 := Convert( slices, 24, ( -9, -8, -7, -2, -1 ) );
            rec.lvyr4 := Convert( slices, 25, ( -9, -8, -7, -2, -1 ) );
            rec.distmov := Convert( slices, 26, ( -9.0, -8.0 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Indsamp_component ).start_pos = 0 ) then
               index.pointers( Indsamp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Indsamp_component ).counter := index.pointers( Indsamp_component ).counter + 1;
            Put_Index( index_map, index );
            Indsamp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Indsamp_IO.Close( bin_file );
   end Create_Indsamp_Wave_C;




   procedure Create_Jobhist_Wave_C( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Jobhist_IO.File_Type;
      rec         : Jobhist_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Jobhist_IO.Create (bin_file, Jobhist_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.jhstat := Convert_Jhstat_Type( Get( slices, 3 ));
            rec.jhbgd := Convert( slices, 4, ( -9, -8, -7, -2, -1 ) );
            rec.jhbgm := Convert_Jbbgm1_Type( Get( slices, 5 ));
            rec.jhbgy := Convert( slices, 6, ( -9, -8, -2, -1 ) );
            rec.jspno := Convert( slices, 7 );
            rec.jhsoc := Convert( slices, 8, ( -9, -8, -2, -1 ) );
            rec.jhsemp := Convert_Jhsemp_Type( Get( slices, 9 ));
            rec.jhboss := Convert_Bscon_Type( Get( slices, 10 ));
            rec.jhsect := Convert_Jhsect_Type( Get( slices, 11 ));
            rec.jhmngr := Convert_Jhmngr_Type( Get( slices, 12 ));
            rec.jhpldf := Convert_Jhpldf_Type( Get( slices, 13 ));
            rec.jhsic := Convert( slices, 14, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.jhsize := Convert_Jhsize_Type( Get( slices, 15 ));
            rec.jhpayl := Convert( slices, 16, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhpylw := Convert( slices, 17, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.jhpylg := Convert_Jhpylg_Type( Get( slices, 18 ));
            rec.jhstpy := Convert_Jhstpy_Type( Get( slices, 19 ));
            rec.jblky := Convert_Jblky_Type( Get( slices, 20 ));
            rec.jhendd := Convert( slices, 21, ( -9, -8, -7, -2, -1 ) );
            rec.jhendm := Convert_Jbbgm1_Type( Get( slices, 22 ));
            rec.jhendy := Convert( slices, 23, ( -9, -8, -2, -1 ) );
            rec.jha9ly := Convert_Jha9ly_Type( Get( slices, 24 ));
            rec.jhseg := Convert_Jhseg_Type( Get( slices, 25 ));
            rec.jhgold := Convert( slices, 26, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhrgsc := Convert_Jhrgsc_Type( Get( slices, 27 ));
            rec.jhisco := Convert( slices, 28, ( -9, -8 ) );
            rec.jhcssm := Convert( slices, 29, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhcssf := Convert( slices, 30, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhhgs := Convert( slices, 31, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhsec := Convert_Jhsec_Type( Get( slices, 32 ));
            rec.jhspw := Convert( slices, 33, ( -9.0, -8.0 ) );
            rec.jhgpay := Convert( slices, 34, ( -9.0, -8.0, -7.0 ) );
            rec.jhnpay := Convert( slices, 35, ( -9.0, -8.0, -7.0, -1.0 ) );
            rec.jhgpayi := Convert_Jhgpayi_Type( Get( slices, 36 ));
            rec.jhnpayi := Convert_Jhgpayi_Type( Get( slices, 37 ));
            rec.jhbgy4 := Convert( slices, 38, ( -9, -8, -7, -2, -1 ) );
            rec.jhendy4 := Convert( slices, 39, ( -9, -8, -7, -2, -1 ) );
            rec.pid := Convert( slices, 40 );
            rec.jhiscon := Convert( slices, 41, ( -9, -8, -7, -2, -1 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Jobhist_component ).start_pos = 0 ) then
               index.pointers( Jobhist_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Jobhist_component ).counter := index.pointers( Jobhist_component ).counter + 1;
            Put_Index( index_map, index );
            Jobhist_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Jobhist_IO.Close( bin_file );
   end Create_Jobhist_Wave_C;




   procedure Create_Lifejob_Wave_C( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Lifejob_IO.File_Type;
      rec         : Lifejob_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Lifejob_IO.Create (bin_file, Lifejob_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.ljesfn := Convert( slices, 3 );
            rec.ljsemp := Convert_Ljsemp_Type( Get( slices, 4 ));
            rec.ljbgm := Convert_Ljbgm_Type( Get( slices, 5 ));
            rec.ljbgy := Convert( slices, 6, ( -9, -8, -2, -1 ) );
            rec.ljsoc := Convert( slices, 7, ( -9, -8, -2, -1 ) );
            rec.ljsic := Convert( slices, 8, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.ljmngr := Convert_Bscon_Type( Get( slices, 9 ));
            rec.ljterm := Convert_Ljterm_Type( Get( slices, 10 ));
            rec.ljlftm := Convert_Ljlftm_Type( Get( slices, 11 ));
            rec.ljlfty := Convert( slices, 12, ( -9, -8, -2, -1 ) );
            rec.ljylft := Convert_Ljylft_Type( Get( slices, 13 ));
            rec.ljothj := Convert_Ljothj_Type( Get( slices, 14 ));
            rec.ljseq := Convert( slices, 15 );
            rec.ljseg := Convert_Ljseg_Type( Get( slices, 16 ));
            rec.ljgold := Convert( slices, 17, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.ljrgsc := Convert_Ljrgsc_Type( Get( slices, 18 ));
            rec.ljisco := Convert( slices, 19 );
            rec.ljcssm := Convert( slices, 20, ( -9.0, -8.0 ) );
            rec.ljcssf := Convert( slices, 21, ( -9.0, -8.0 ) );
            rec.ljhgs := Convert( slices, 22, ( -9.0, -8.0 ) );
            rec.ljsec := Convert_Jcesec_Type( Get( slices, 23 ));
            rec.ljlen := Convert( slices, 24, ( -9, -8, -3 ) );
            rec.ljenst := Convert_Ljenst_Type( Get( slices, 25 ));
            rec.ljbgy4 := Convert( slices, 26, ( -9, -8, -7, -2, -1 ) );
            rec.ljlfty4 := Convert( slices, 27, ( -9, -8, -7, -2, -1 ) );
            rec.pid := Convert( slices, 28 );
            rec.ljiscon := Convert( slices, 29, ( -9, -8, -7 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Lifejob_component ).start_pos = 0 ) then
               index.pointers( Lifejob_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Lifejob_component ).counter := index.pointers( Lifejob_component ).counter + 1;
            Put_Index( index_map, index );
            Lifejob_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Lifejob_IO.Close( bin_file );
   end Create_Lifejob_Wave_C;




   procedure Create_Egoalt_Wave_D( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Egoalt_IO.File_Type;
      rec         : Egoalt_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Egoalt_IO.Create (bin_file, Egoalt_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.opno := Convert( slices, 3, (  1 .. 0 => -9 ) );
            rec.rel := Convert_Rel_Type( Get( slices, 4 ));
            rec.sex := Convert_Sex_Type( Get( slices, 5 ));
            rec.osex := Convert_Hgsex_Type( Get( slices, 6 ));
            rec.lwstat := Convert_Lwstat_Type( Get( slices, 7 ));
            rec.nwstat := Convert_Nwstat_Type( Get( slices, 8 ));
            rec.pid := Convert( slices, 9 );
            rec.opid := Convert( slices, 10 );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Egoalt_component ).start_pos = 0 ) then
               index.pointers( Egoalt_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Egoalt_component ).counter := index.pointers( Egoalt_component ).counter + 1;
            Put_Index( index_map, index );
            Egoalt_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Egoalt_IO.Close( bin_file );
   end Create_Egoalt_Wave_D;




   procedure Create_Hhresp_Wave_D( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Hhresp_IO.File_Type;
      rec         : Hhresp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Hhresp_IO.Create (bin_file, Hhresp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.hhdoi := Convert( slices, 2, ( -9, -8, -7 ) );
            rec.hhmoi := Convert_Doim_Type( Get( slices, 3 ));
            rec.hhyoi := Convert( slices, 4, ( -9, -8, -7 ) );
            rec.hstype := Convert_Hstype_Type( Get( slices, 5 ));
            rec.hsrins := Convert_Cjsck2_Type( Get( slices, 6 ));
            rec.hsroom := Convert( slices, 7, ( -9, -8, -7, -2, -1 ) );
            rec.hsownd := Convert_Hsownd_Type( Get( slices, 8 ));
            rec.hsowr1 := Convert( slices, 9, ( -9, -8, -7, -2, -1 ) );
            rec.hsowr2 := Convert( slices, 10, ( -9, -8, -7, -2, -1 ) );
            rec.mghave := Convert_Mghave_Type( Get( slices, 11 ));
            rec.hsowrp := Convert_Bscon_Type( Get( slices, 12 ));
            rec.mgynot := Convert_Mgynot_Type( Get( slices, 13 ));
            rec.hscost := Convert( slices, 14, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.mgly := Convert_Bscon_Type( Get( slices, 15 ));
            rec.hsivw3 := Convert( slices, 16, ( -9, -8, -7, -2, -1 ) );
            rec.mgxtra := Convert_Bscon_Type( Get( slices, 17 ));
            rec.mgnew := Convert( slices, 18, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.mgxty1 := Convert_Mgxty1_Type( Get( slices, 19 ));
            rec.mgxty2 := Convert_Mgxty2_Type( Get( slices, 20 ));
            rec.mgxty3 := Convert_Mgxty3_Type( Get( slices, 21 ));
            rec.mgxty4 := Convert_Mgxty4_Type( Get( slices, 22 ));
            rec.mgxty5 := Convert_Mgxty5_Type( Get( slices, 23 ));
            rec.mgold := Convert( slices, 24, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.mglife := Convert( slices, 25, ( -9, -8, -7, -2, -1 ) );
            rec.mgtype := Convert_Mgtype_Type( Get( slices, 26 ));
            rec.xpmg := Convert( slices, 27, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.xpmg1 := Convert_Bscon_Type( Get( slices, 28 ));
            rec.xpmg2 := Convert_Bscon_Type( Get( slices, 29 ));
            rec.xpmg3 := Convert_Bscon_Type( Get( slices, 30 ));
            rec.xpmg4 := Convert_Bscon_Type( Get( slices, 31 ));
            rec.mgyr0 := Convert( slices, 32, ( -9, -8, -7, -2, -1 ) );
            rec.hsyr0 := Convert( slices, 33, ( -9, -8, -7, -1 ) );
            rec.hsval := Convert( slices, 34, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.hsjb := Convert_Bscon_Type( Get( slices, 35 ));
            rec.rentp1 := Convert( slices, 36, ( -9, -8, -7, -2, -1 ) );
            rec.rentp2 := Convert( slices, 37, ( -9, -8, -7, -2, -1 ) );
            rec.rentll := Convert_Rentll_Type( Get( slices, 38 ));
            rec.rentf := Convert_Rentf_Type( Get( slices, 39 ));
            rec.rent := Convert( slices, 40, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.rentw := Convert( slices, 41, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.rent1 := Convert_Rent1_Type( Get( slices, 42 ));
            rec.rent2 := Convert_Rent1_Type( Get( slices, 43 ));
            rec.rent3 := Convert_Bscon_Type( Get( slices, 44 ));
            rec.rent4 := Convert_Bscon_Type( Get( slices, 45 ));
            rec.rent5 := Convert_Bscon_Type( Get( slices, 46 ));
            rec.rent6 := Convert_Bscon_Type( Get( slices, 47 ));
            rec.renthb := Convert_Renthb_Type( Get( slices, 48 ));
            rec.rentg := Convert( slices, 49, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.rentgw := Convert( slices, 50, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.xphsdf := Convert( slices, 51, ( -9, -8, -7, -2, -1 ) );
            rec.xphsd1 := Convert_Bscon_Type( Get( slices, 52 ));
            rec.xphsd2 := Convert_Bscon_Type( Get( slices, 53 ));
            rec.xphsdb := Convert_Bscon_Type( Get( slices, 54 ));
            rec.hs2ownd := Convert_Bscon_Type( Get( slices, 55 ));
            rec.hs2val := Convert_Hs2val_Type( Get( slices, 56 ));
            rec.mgtot := Convert( slices, 57, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.cdhave := Convert_Bscon_Type( Get( slices, 58 ));
            rec.cdbght := Convert_Bscon_Type( Get( slices, 59 ));
            rec.cd1use := Convert_Cd1new_Type( Get( slices, 60 ));
            rec.cd1new := Convert( slices, 61, ( -9, -8, -7, -2, -1 ) );
            rec.cd2use := Convert_Cd1new_Type( Get( slices, 62 ));
            rec.cd2new := Convert( slices, 63, ( -9, -8, -7, -2, -1 ) );
            rec.cd3use := Convert_Cd1new_Type( Get( slices, 64 ));
            rec.cd3new := Convert( slices, 65, ( -9, -8, -7, -2, -1 ) );
            rec.cd4use := Convert_Cd1new_Type( Get( slices, 66 ));
            rec.cd4new := Convert( slices, 67, ( -9, -8, -7, -2, -1 ) );
            rec.cd5use := Convert_Cd1new_Type( Get( slices, 68 ));
            rec.cd5new := Convert( slices, 69, ( -9, -8, -7, -2, -1 ) );
            rec.cd6use := Convert_Cd1new_Type( Get( slices, 70 ));
            rec.cd6new := Convert( slices, 71, ( -9, -8, -7, -2, -1 ) );
            rec.cd7use := Convert_Cd1new_Type( Get( slices, 72 ));
            rec.cd7new := Convert( slices, 73, ( -9, -8, -7, -2, -1 ) );
            rec.cd8use := Convert_Cd1new_Type( Get( slices, 74 ));
            rec.cd8new := Convert( slices, 75, ( -9, -8, -7, -2, -1 ) );
            rec.cd9use := Convert_Cd1new_Type( Get( slices, 76 ));
            rec.cd9new := Convert( slices, 77, ( -9, -8, -7, -2, -1 ) );
            rec.cdnuxp := Convert( slices, 78, ( -9, -8, -7, -2, -1 ) );
            rec.hsip := Convert( slices, 79, ( -9, -8, -7, -2, -1 ) );
            rec.hsipxp := Convert( slices, 80, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.heatch := Convert_Bscon_Type( Get( slices, 81 ));
            rec.heatyp := Convert_Heatyp_Type( Get( slices, 82 ));
            rec.xpoily := Convert( slices, 83, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.gasuse := Convert_Bscon_Type( Get( slices, 84 ));
            rec.gasway := Convert_Gasway_Type( Get( slices, 85 ));
            rec.xpgasl := Convert( slices, 86, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.xpgasw := Convert( slices, 87, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.xpgaslw := Convert( slices, 88, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.lecway := Convert_Gasway_Type( Get( slices, 89 ));
            rec.xplecl := Convert( slices, 90, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.xplecw := Convert( slices, 91, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.xpleclw := Convert( slices, 92, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.xpfood := Convert( slices, 93, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ncars := Convert_Ncars_Type( Get( slices, 94 ));
            rec.carown := Convert_Carown_Type( Get( slices, 95 ));
            rec.carval := Convert( slices, 96, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ivh1 := Convert( slices, 97, ( -9, -8, -7, -1 ) );
            rec.ivh2 := Convert( slices, 98, ( -9, -8, -7 ) );
            rec.ivh3 := Convert( slices, 99, ( -9, -8, -7 ) );
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 100 ));
            rec.hhdc := Convert_Hhdc_Type( Get( slices, 101 ));
            rec.xhwght := Convert( slices, 102, ( -9.0, -8.0 ) );
            rec.hhsize := Convert( slices, 103, ( -9, -8 ) );
            rec.hhtype := Convert_Hhtype_Type( Get( slices, 104 ));
            rec.region := Convert_Region_Type( Get( slices, 105 ));
            rec.nch02 := Convert( slices, 106, ( -9, -8 ) );
            rec.nch34 := Convert( slices, 107, ( -9, -8 ) );
            rec.nch511 := Convert( slices, 108, ( -9, -8 ) );
            rec.nch1215 := Convert( slices, 109, ( -9, -8 ) );
            rec.nch1618 := Convert( slices, 110, ( -9, -8 ) );
            rec.nkids := Convert( slices, 111, ( -9, -8 ) );
            rec.nwed := Convert( slices, 112, ( -9, -8 ) );
            rec.npens := Convert( slices, 113, ( -9, -8 ) );
            rec.na75pl := Convert( slices, 114, ( -9, -8 ) );
            rec.agechy := Convert( slices, 115, ( -9, -8 ) );
            rec.ncouple := Convert( slices, 116, ( -9, -8 ) );
            rec.nonepar := Convert( slices, 117, ( -9, -8 ) );
            rec.nemp := Convert( slices, 118, ( -9, -8 ) );
            rec.nwage := Convert( slices, 119, ( -9, -8 ) );
            rec.tenure := Convert_Tenure_Type( Get( slices, 120 ));
            rec.xphsn := Convert( slices, 121, ( -9.0, -8.0, -7.0 ) );
            rec.xphsg := Convert( slices, 122, ( -9.0, -8.0, -7.0 ) );
            rec.xpoil := Convert( slices, 123, ( -9.0, -8.0, -7.0 ) );
            rec.xpgas := Convert( slices, 124, ( -9.0, -8.0, -7.0 ) );
            rec.xplec := Convert( slices, 125, ( -9.0, -8.0, -7.0 ) );
            rec.xpfuel := Convert( slices, 126, ( -9.0, -8.0, -7.0 ) );
            rec.fieqfcb := Convert( slices, 127, ( -9.0, -8.0 ) );
            rec.fieqfca := Convert( slices, 128, ( -9.0, -8.0 ) );
            rec.fihhyr := Convert( slices, 129, ( -9.0, -8.0, -7.0 ) );
            rec.fihhmn := Convert( slices, 130, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyl := Convert( slices, 131, ( -9.0, -8.0, -7.0 ) );
            rec.fihhynl := Convert( slices, 132, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyp := Convert( slices, 133, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyb := Convert( slices, 134, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyt := Convert( slices, 135, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyi := Convert( slices, 136, ( -9.0, -8.0, -7.0 ) );
            rec.fihhml := Convert( slices, 137, (  1 .. 0 => -9.0 ) );
            rec.fihhmnl := Convert( slices, 138, (  1 .. 0 => -9.0 ) );
            rec.fihhmp := Convert( slices, 139, (  1 .. 0 => -9.0 ) );
            rec.fihhmb := Convert( slices, 140, (  1 .. 0 => -9.0 ) );
            rec.fihhmt := Convert( slices, 141, (  1 .. 0 => -9.0 ) );
            rec.fihhmi := Convert( slices, 142, (  1 .. 0 => -9.0 ) );
            rec.hhmove := Convert_Hhmove_Type( Get( slices, 143 ));
            rec.mgnewi := Convert( slices, 144, ( -9, -8, -7, -2, -1 ) );
            rec.xpmgi := Convert( slices, 145, ( -9, -8, -7, -2, -1 ) );
            rec.hsvali := Convert( slices, 146, ( -9, -8, -7, -2, -1 ) );
            rec.renti := Convert( slices, 147, ( -9, -8, -7, -4, -3, -2, -1 ) );
            rec.rentgi := Convert( slices, 148, ( -9, -8, -7, -2, -1 ) );
            rec.xphsni := Convert_Jhgpayi_Type( Get( slices, 149 ));
            rec.xphsgi := Convert_Jhgpayi_Type( Get( slices, 150 ));
            rec.fihhmni := Convert_Fihhmni_Type( Get( slices, 151 ));
            rec.fihhmli := Convert_Fihhmbi_Type( Get( slices, 152 ));
            rec.fihmnli := Convert_Fihhmbi_Type( Get( slices, 153 ));
            rec.fihhmpi := Convert_Fihhmbi_Type( Get( slices, 154 ));
            rec.fihhmbi := Convert_Fihhmbi_Type( Get( slices, 155 ));
            rec.fihhmti := Convert_Fihhmbi_Type( Get( slices, 156 ));
            rec.fihhmii := Convert_Fihhmbi_Type( Get( slices, 157 ));
            rec.fihhyri := Convert_Fihhmbi_Type( Get( slices, 158 ));
            rec.fihhyli := Convert_Fihhmbi_Type( Get( slices, 159 ));
            rec.fihhyni := Convert_Fihhmbi_Type( Get( slices, 160 ));
            rec.fihhypi := Convert_Fihhmbi_Type( Get( slices, 161 ));
            rec.fihhybi := Convert_Fihhmbi_Type( Get( slices, 162 ));
            rec.fihhyti := Convert_Fihhmbi_Type( Get( slices, 163 ));
            rec.fihhyii := Convert_Fihhmbi_Type( Get( slices, 164 ));
            rec.hhyoi4 := Convert( slices, 165, ( -9, -8, -7, -2, -1 ) );
            rec.mgyr04 := Convert( slices, 166, ( -9, -8, -7, -2, -1 ) );
            rec.hsyr04 := Convert( slices, 167, ( -9, -8, -7, -2, -1 ) );
            rec.region2 := Convert_Region2_Type( Get( slices, 168 ));
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Hhresp_component ).start_pos = 0 ) then
               index.pointers( Hhresp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Hhresp_component ).counter := index.pointers( Hhresp_component ).counter + 1;
            Put_Index( index_map, index );
            Hhresp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Hhresp_IO.Close( bin_file );
   end Create_Hhresp_Wave_D;




   procedure Create_Hhsamp_Wave_D( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Hhsamp_IO.File_Type;
      rec         : Hhsamp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Hhsamp_IO.Create (bin_file, Hhsamp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.fid := Convert( slices, 2 );
            rec.ivnadd := Convert( slices, 3, ( -9.0, -8.0 ) );
            rec.ivia := Convert_Ivia_Type( Get( slices, 4 ));
--             rec.ivid := Convert( slices, 5 );
            rec.ivlnc := Convert( slices, 6, ( -9, -1 ) );
            rec.ivtnc := Convert( slices, 7, ( -9, -8, -1 ) );
            rec.iviam := Convert_Iviam_Type( Get( slices, 8 ));
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 9 ));
            rec.ivosmrh := Convert( slices, 10, ( -9, -8, -1 ) );
            rec.ivnsmrh := Convert( slices, 11, ( -9, -8, -1 ) );
            rec.ivrrefh := Convert_Ivrrefh_Type( Get( slices, 12 ));
            rec.ivisst := Convert_Ivisst_Type( Get( slices, 13 ));
            rec.ivconv := Convert_Ivconv_Type( Get( slices, 14 ));
            rec.ivreis := Convert_Ivreis_Type( Get( slices, 15 ));
            rec.hhdc := Convert_Hhdc_Type( Get( slices, 16 ));
            rec.xhwght := Convert( slices, 17, ( -9.0, -8.0, -1.0 ) );
            rec.region := Convert_Region_Type( Get( slices, 18 ));
            rec.hhmove := Convert_Hhmove_Type( Get( slices, 19 ));
            rec.ahid := Convert( slices, 20 );
            rec.strata := Convert( slices, 21, ( -9, -8, -1 ) );
            rec.psu := Convert( slices, 22, ( -9, -8, -1 ) );
            rec.region2 := Convert_Region2_Type( Get( slices, 23 ));
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Hhsamp_component ).start_pos = 0 ) then
               index.pointers( Hhsamp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Hhsamp_component ).counter := index.pointers( Hhsamp_component ).counter + 1;
            Put_Index( index_map, index );
            Hhsamp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Hhsamp_IO.Close( bin_file );
   end Create_Hhsamp_Wave_D;




   procedure Create_Income_Wave_D( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Income_IO.File_Type;
      rec         : Income_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Income_IO.Create (bin_file, Income_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.pno := Convert( slices, 1 );
            rec.ficode := Convert_Ficode_Type( Get( slices, 2 ));
            rec.nfr := Convert( slices, 3, (  1 .. 0 => -9 ) );
            rec.frall := Convert_Frall_Type( Get( slices, 4 ));
            rec.fr01 := Convert_Cd1own_Type( Get( slices, 5 ));
            rec.fr02 := Convert_Cd1own_Type( Get( slices, 6 ));
            rec.fr03 := Convert_Cd1own_Type( Get( slices, 7 ));
            rec.fr04 := Convert( slices, 8, ( -9, -8, -2, -1 ) );
            rec.fr05 := Convert_Cd1own_Type( Get( slices, 9 ));
            rec.fr06 := Convert_Cd1own_Type( Get( slices, 10 ));
            rec.fr07 := Convert_Cd1own_Type( Get( slices, 11 ));
            rec.fr08 := Convert_Cd1own_Type( Get( slices, 12 ));
            rec.fr09 := Convert_Cd1own_Type( Get( slices, 13 ));
            rec.fr10 := Convert_Cd1own_Type( Get( slices, 14 ));
            rec.fr11 := Convert_Cd1own_Type( Get( slices, 15 ));
            rec.fr12 := Convert_Cd1own_Type( Get( slices, 16 ));
            rec.fr13 := Convert_Cd1own_Type( Get( slices, 17 ));
            rec.fr14 := Convert_Cd1own_Type( Get( slices, 18 ));
            rec.fr15 := Convert_Cd1own_Type( Get( slices, 19 ));
            rec.fr16 := Convert_Cd1own_Type( Get( slices, 20 ));
            rec.fr17 := Convert_Cd1own_Type( Get( slices, 21 ));
            rec.frnow := Convert_Frnow_Type( Get( slices, 22 ));
            rec.frval := Convert( slices, 23, ( -9.0, -8.0, -3.0, -2.0, -1.0 ) );
            rec.frw := Convert( slices, 24, ( -9.0, -8.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.frjt := Convert_Frjt_Type( Get( slices, 25 ));
            rec.frjtpn := Convert( slices, 26, ( -9, -8, -2, -1 ) );
            rec.hid := Convert( slices, 27 );
            rec.fiseq := Convert( slices, 28 );
            rec.fim09l := Convert( slices, 29, ( -9.0, -8.0, -3.0 ) );
            rec.fim10l := Convert( slices, 30, ( -9.0, -8.0, -3.0 ) );
            rec.fim11l := Convert( slices, 31, ( -9.0, -8.0, -3.0 ) );
            rec.fim12l := Convert( slices, 32, ( -9.0, -8.0, -3.0 ) );
            rec.fim01t := Convert( slices, 33, ( -9.0, -8.0, -3.0 ) );
            rec.fim02t := Convert( slices, 34, ( -9.0, -8.0, -3.0 ) );
            rec.fim03t := Convert( slices, 35, ( -9.0, -8.0, -3.0 ) );
            rec.fim04t := Convert( slices, 36, ( -9.0, -8.0, -3.0 ) );
            rec.fim05t := Convert( slices, 37, ( -9.0, -8.0, -3.0 ) );
            rec.fim06t := Convert( slices, 38, ( -9.0, -8.0, -3.0 ) );
            rec.fim07t := Convert( slices, 39, ( -9.0, -8.0, -3.0 ) );
            rec.fim08t := Convert( slices, 40, ( -9.0, -8.0, -3.0 ) );
            rec.fim09t := Convert( slices, 41, ( -9.0, -8.0, -3.0 ) );
            rec.fim10t := Convert( slices, 42, ( -9.0, -8.0, -3.0 ) );
            rec.fim11t := Convert( slices, 43, ( -9.0, -8.0, -3.0 ) );
            rec.fim12t := Convert( slices, 44, ( -9.0, -8.0, -3.0 ) );
            rec.fim01n := Convert( slices, 45, ( -9.0, -8.0, -3.0 ) );
            rec.frjtvf := Convert_Frjtvf_Type( Get( slices, 46 ));
            rec.frvali := Convert( slices, 47, ( -9, -8, -3, -2, -1 ) );
            rec.pid := Convert( slices, 48 );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Income_component ).start_pos = 0 ) then
               index.pointers( Income_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Income_component ).counter := index.pointers( Income_component ).counter + 1;
            Put_Index( index_map, index );
            Income_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Income_IO.Close( bin_file );
   end Create_Income_Wave_D;




   procedure Create_Indall_Wave_D( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Indall_IO.File_Type;
      rec         : Indall_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Indall_IO.Create (bin_file, Indall_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.pid := Convert( slices, 3 );
            rec.iviow3 := Convert_Iviow3_Type( Get( slices, 4 ));
            rec.ivievr := Convert_Ivievr_Type( Get( slices, 5 ));
            rec.hhmem := Convert_Hhmem_Type( Get( slices, 6 ));
            rec.newhy := Convert_Newhy_Type( Get( slices, 7 ));
            rec.nemnjn := Convert_Nemnjn_Type( Get( slices, 8 ));
            rec.neyrjn := Convert( slices, 9, ( -9, -8, -2, -1 ) );
            rec.ivfio := Convert_Ivfio_Type( Get( slices, 10 ));
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 11 ));
            rec.iodc := Convert_Iodc_Type( Get( slices, 12 ));
            rec.hgr2r := Convert_Hgr2r_Type( Get( slices, 13 ));
            rec.hgsex := Convert_Hgsex_Type( Get( slices, 14 ));
            rec.hgbm := Convert_Hgbm_Type( Get( slices, 15 ));
            rec.hgby := Convert( slices, 16, ( -9, -8, -2, -1 ) );
            rec.mastat := Convert_Mastat_Type( Get( slices, 17 ));
            rec.hgspn := Convert( slices, 18, ( -9, -8, -2, -1 ) );
            rec.hgemp := Convert_Hgemp_Type( Get( slices, 19 ));
            rec.hgfno := Convert( slices, 20, ( -9, -8, -2, -1 ) );
            rec.hgmno := Convert( slices, 21, ( -9, -8, -2, -1 ) );
            rec.hgra := Convert( slices, 22, ( -9, -8, -2, -1 ) );
            rec.age := Convert( slices, 23, ( -9, -8, -2, -1 ) );
            rec.age12 := Convert( slices, 24, ( -9, -8, -2, -1 ) );
            rec.butype := Convert_Butype_Type( Get( slices, 25 ));
            rec.buno := Convert( slices, 26, ( -9, -8 ) );
            rec.nchild := Convert( slices, 27, ( -9, -8 ) );
            rec.depchl := Convert_Depchl_Type( Get( slices, 28 ));
            rec.hoh := Convert_Hoh_Type( Get( slices, 29 ));
            rec.rach16 := Convert_Hhch12_Type( Get( slices, 30 ));
            rec.agei := Convert_Agei_Type( Get( slices, 31 ));
            rec.lrwght := Convert( slices, 32, ( -9.0, -8.0 ) );
            rec.lewght := Convert( slices, 33, ( -9.0, -8.0 ) );
            rec.xrwght := Convert( slices, 34, ( -9.0, -8.0 ) );
            rec.xewght := Convert( slices, 35, ( -9.0, -8.0 ) );
            rec.movest := Convert_Movest_Type( Get( slices, 36 ));
            rec.sampst := Convert_Sampst_Type( Get( slices, 37 ));
            rec.neyrjn4 := Convert( slices, 38, ( -9, -8, -7, -2, -1 ) );
            rec.sppid := Convert( slices, 39 );
            rec.fpid := Convert( slices, 40 );
            rec.mpid := Convert( slices, 41 );
            rec.rapid := Convert( slices, 42 );
            rec.distmov := Convert( slices, 43, ( -9.0, -8.0 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Indall_component ).start_pos = 0 ) then
               index.pointers( Indall_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Indall_component ).counter := index.pointers( Indall_component ).counter + 1;
            Put_Index( index_map, index );
            Indall_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Indall_IO.Close( bin_file );
   end Create_Indall_Wave_D;




   procedure Create_Indresp_Wave_D( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Indresp_IO.File_Type;
      rec         : Indresp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Indresp_IO.Create (bin_file, Indresp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.doid := Convert( slices, 3, ( -9, -7 ) );
            rec.doim := Convert_Doim_Type( Get( slices, 4 ));
            rec.doiy := Convert( slices, 5, ( -9, -8 ) );
            rec.ivsoih := Convert( slices, 6, ( -9, -8 ) );
            rec.ivsoim := Convert( slices, 7, ( -9, -8 ) );
            rec.ivlyr := Convert( slices, 8, ( -9, -8, -7 ) );
            rec.ivievr := Convert_Ivievr_Type( Get( slices, 9 ));
            rec.lknbrd := Convert_Aidpl1_Type( Get( slices, 10 ));
            rec.lkmove := Convert_Lkmove_Type( Get( slices, 11 ));
            rec.lkmovy := Convert_Lkmovy_Type( Get( slices, 12 ));
            rec.plnew := Convert( slices, 13, ( -9, -8, -7, -2, -1 ) );
            rec.plnowm := Convert_Jbbgm1_Type( Get( slices, 14 ));
            rec.plnowy := Convert( slices, 15, ( -9, -8, -2, -1 ) );
            rec.movjb := Convert_Aidpl1_Type( Get( slices, 16 ));
            rec.movjba := Convert_Movjba_Type( Get( slices, 17 ));
            rec.movjbb := Convert_Movjba_Type( Get( slices, 18 ));
            rec.movjbc := Convert_Movjba_Type( Get( slices, 19 ));
            rec.movjbd := Convert_Movjba_Type( Get( slices, 20 ));
            rec.movjbe := Convert_Movjba_Type( Get( slices, 21 ));
            rec.movjbf := Convert_Movjba_Type( Get( slices, 22 ));
            rec.movjbg := Convert_Movjba_Type( Get( slices, 23 ));
            rec.movjbh := Convert_Movjba_Type( Get( slices, 24 ));
            rec.movjbi := Convert_Movjba_Type( Get( slices, 25 ));
            rec.movy1 := Convert_Movy1_Type( Get( slices, 26 ));
            rec.movy2 := Convert_Movy2_Type( Get( slices, 27 ));
            rec.dobm := Convert_Cjsem_Type( Get( slices, 28 ));
            rec.doby := Convert( slices, 29, ( -9, -8, -7, -2, -1 ) );
            rec.sex := Convert_Sex_Type( Get( slices, 30 ));
            rec.jbstat := Convert_Jbstat_Type( Get( slices, 31 ));
            rec.edlyr := Convert_Aidpl1_Type( Get( slices, 32 ));
            rec.edendm := Convert_Edendm_Type( Get( slices, 33 ));
            rec.edendy := Convert( slices, 34, ( -9, -8, -7, -3, -2, -1 ) );
            rec.edtype := Convert_Edtype_Type( Get( slices, 35 ));
            rec.qfx := Convert_Aidpl1_Type( Get( slices, 36 ));
            rec.qfxa := Convert_Qfa_Type( Get( slices, 37 ));
            rec.qfxb := Convert_Qfb_Type( Get( slices, 38 ));
            rec.qfxc := Convert_Qfc_Type( Get( slices, 39 ));
            rec.qfxd := Convert_Qfd_Type( Get( slices, 40 ));
            rec.qfxe := Convert_Qfe_Type( Get( slices, 41 ));
            rec.qfxf := Convert_Qff_Type( Get( slices, 42 ));
            rec.qfxg := Convert_Qfg_Type( Get( slices, 43 ));
            rec.qfxh := Convert_Qfh_Type( Get( slices, 44 ));
            rec.qfxi := Convert_Qfi_Type( Get( slices, 45 ));
            rec.qfxj := Convert_Qfj_Type( Get( slices, 46 ));
            rec.qfxk := Convert_Qfk_Type( Get( slices, 47 ));
            rec.qfxl := Convert_Qfl_Type( Get( slices, 48 ));
            rec.qfxm := Convert_Qfm_Type( Get( slices, 49 ));
            rec.qfxn := Convert_Qfn_Type( Get( slices, 50 ));
            rec.qfedx := Convert_Aidpl1_Type( Get( slices, 51 ));
            rec.qfedxa := Convert_Qfedd_Type( Get( slices, 52 ));
            rec.nqfexa := Convert( slices, 53, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxb := Convert_Qfede_Type( Get( slices, 54 ));
            rec.nqfexb := Convert( slices, 55, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxc := Convert_Qfedj_Type( Get( slices, 56 ));
            rec.nqfexc := Convert( slices, 57, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxd := Convert_Qfedxd_Type( Get( slices, 58 ));
            rec.qfedxe := Convert_Qfedk_Type( Get( slices, 59 ));
            rec.nqfexe := Convert( slices, 60, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxf := Convert_Qfedxf_Type( Get( slices, 61 ));
            rec.nqfexf := Convert( slices, 62, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxg := Convert_Qfedm_Type( Get( slices, 63 ));
            rec.nqfexg := Convert( slices, 64, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxh := Convert_Qfedxh_Type( Get( slices, 65 ));
            rec.nqfexh := Convert( slices, 66, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxi := Convert_Qfedo_Type( Get( slices, 67 ));
            rec.nqfexi := Convert( slices, 68, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxj := Convert( slices, 69, ( -9, -8, -7 ) );
            rec.nqfexj := Convert( slices, 70, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxk := Convert_Hlprbm_Type( Get( slices, 71 ));
            rec.nqfexk := Convert( slices, 72, ( -9, -8, -7, -2, -1 ) );
            rec.mlstat := Convert_Mlstat_Type( Get( slices, 73 ));
            rec.mlchng := Convert_Bscon_Type( Get( slices, 74 ));
            rec.mlchm := Convert_Mlchm_Type( Get( slices, 75 ));
            rec.mlchy := Convert( slices, 76, ( -9, -8, -2 ) );
            rec.plbornd := Convert_Plbornd_Type( Get( slices, 77 ));
            rec.plbornc := Convert_Plbornc_Type( Get( slices, 78 ));
            rec.yr2uk := Convert( slices, 79, ( -9, -8, -7, -2, -1 ) );
            rec.race := Convert_Race_Type( Get( slices, 80 ));
            rec.school := Convert_School_Type( Get( slices, 81 ));
            rec.scend := Convert( slices, 82, ( -9, -8, -7, -2, -1 ) );
            rec.sctype := Convert_Sctype_Type( Get( slices, 83 ));
            rec.scnow := Convert_Cjsck2_Type( Get( slices, 84 ));
            rec.fetype := Convert_Fetype_Type( Get( slices, 85 ));
            rec.fenow := Convert_Fenow_Type( Get( slices, 86 ));
            rec.feend := Convert( slices, 87, ( -9, -8, -7, -2, -1 ) );
            rec.qfhas := Convert_Bscon_Type( Get( slices, 88 ));
            rec.qfa := Convert_Qfa_Type( Get( slices, 89 ));
            rec.qfb := Convert_Qfb_Type( Get( slices, 90 ));
            rec.qfc := Convert_Qfc_Type( Get( slices, 91 ));
            rec.qfd := Convert_Qfd_Type( Get( slices, 92 ));
            rec.qfe := Convert_Qfe_Type( Get( slices, 93 ));
            rec.qff := Convert_Qff_Type( Get( slices, 94 ));
            rec.qfg := Convert_Qfg_Type( Get( slices, 95 ));
            rec.qfh := Convert_Qfh_Type( Get( slices, 96 ));
            rec.qfi := Convert_Qfi_Type( Get( slices, 97 ));
            rec.qfj := Convert_Qfj_Type( Get( slices, 98 ));
            rec.qfk := Convert_Qfk_Type( Get( slices, 99 ));
            rec.qfl := Convert_Qfl_Type( Get( slices, 100 ));
            rec.qfm := Convert_Qfm_Type( Get( slices, 101 ));
            rec.qfn := Convert_Qfn_Type( Get( slices, 102 ));
            rec.qfed := Convert_Bscon_Type( Get( slices, 103 ));
            rec.qfeda := Convert_Qfeda_Type( Get( slices, 104 ));
            rec.nqfeda := Convert( slices, 105, ( -9, -8, -7, -2, -1 ) );
            rec.qfedb := Convert_Qfedb_Type( Get( slices, 106 ));
            rec.nqfedb := Convert( slices, 107, ( -9, -8, -7, -2, -1 ) );
            rec.qfedc := Convert_Qfedc_Type( Get( slices, 108 ));
            rec.nqfedc := Convert( slices, 109, ( -9, -8, -7, -2, -1 ) );
            rec.qfedd := Convert_Qfedd_Type( Get( slices, 110 ));
            rec.nqfedd := Convert( slices, 111, ( -9, -8, -7, -2, -1 ) );
            rec.qfede := Convert_Qfede_Type( Get( slices, 112 ));
            rec.nqfede := Convert( slices, 113, ( -9, -8, -7, -2, -1 ) );
            rec.qfedf := Convert_Qfedf_Type( Get( slices, 114 ));
            rec.nqfedf := Convert( slices, 115, ( -9, -8, -7, -2, -1 ) );
            rec.qfedg := Convert_Qfedg_Type( Get( slices, 116 ));
            rec.nqfedg := Convert( slices, 117, ( -9, -8, -7, -2, -1 ) );
            rec.qfedh := Convert_Qfedh_Type( Get( slices, 118 ));
            rec.nqfedh := Convert( slices, 119, ( -9, -8, -7, -2, -1 ) );
            rec.qfedi := Convert_Qfedi_Type( Get( slices, 120 ));
            rec.nqfedi := Convert( slices, 121, ( -9, -8, -7, -2, -1 ) );
            rec.qfedj := Convert_Qfedj_Type( Get( slices, 122 ));
            rec.nqfedj := Convert( slices, 123, ( -9, -8, -7, -2, -1 ) );
            rec.qfedk := Convert_Qfedk_Type( Get( slices, 124 ));
            rec.nqfedk := Convert( slices, 125, ( -9, -8, -7, -2, -1 ) );
            rec.qfedl := Convert_Qfedl_Type( Get( slices, 126 ));
            rec.nqfedl := Convert( slices, 127, ( -9, -8, -7, -2, -1 ) );
            rec.qfedm := Convert_Qfedm_Type( Get( slices, 128 ));
            rec.nqfedm := Convert( slices, 129, ( -9, -8, -7, -2, -1 ) );
            rec.qfedn := Convert_Qfedn_Type( Get( slices, 130 ));
            rec.nqfedn := Convert( slices, 131, ( -9, -8, -7, -2, -1 ) );
            rec.qfedo := Convert_Qfedo_Type( Get( slices, 132 ));
            rec.nqfedo := Convert( slices, 133, ( -9, -8, -7, -2, -1 ) );
            rec.qfedp := Convert( slices, 134, ( -9, -8, -7 ) );
            rec.nqfedp := Convert( slices, 135, ( -9, -8, -7, -2, -1 ) );
            rec.qfedq := Convert_Qfedq_Type( Get( slices, 136 ));
            rec.nqfedq := Convert( slices, 137, ( -9, -8, -7, -2, -1 ) );
            rec.qfedr := Convert_Qfedr_Type( Get( slices, 138 ));
            rec.nqfedr := Convert( slices, 139, ( -9, -8, -7, -2, -1 ) );
            rec.qfeds := Convert_Hlprbm_Type( Get( slices, 140 ));
            rec.nqfeds := Convert( slices, 141, ( -9, -8, -7, -2, -1 ) );
            rec.hlstat := Convert_Hlstat_Type( Get( slices, 142 ));
            rec.hlzest := Convert_Hlzest_Type( Get( slices, 143 ));
            rec.hldsbl := Convert_Bscon_Type( Get( slices, 144 ));
            rec.hlprb := Convert( slices, 145, ( -9, -8, -7, -2, -1 ) );
            rec.hlprba := Convert_Hlprba_Type( Get( slices, 146 ));
            rec.hlprbb := Convert_Hlprbb_Type( Get( slices, 147 ));
            rec.hlprbc := Convert_Hlprbc_Type( Get( slices, 148 ));
            rec.hlprbd := Convert_Hlprbd_Type( Get( slices, 149 ));
            rec.hlprbe := Convert_Hlprbe_Type( Get( slices, 150 ));
            rec.hlprbf := Convert_Hlprbf_Type( Get( slices, 151 ));
            rec.hlprbg := Convert_Hlprbg_Type( Get( slices, 152 ));
            rec.hlprbh := Convert_Hlprbh_Type( Get( slices, 153 ));
            rec.hlprbi := Convert_Hlprbi_Type( Get( slices, 154 ));
            rec.hlprbj := Convert_Hlprbj_Type( Get( slices, 155 ));
            rec.hlprbk := Convert_Hlprbk_Type( Get( slices, 156 ));
            rec.hlprbl := Convert_Hlprbl_Type( Get( slices, 157 ));
            rec.hlprbm := Convert_Hlprbm_Type( Get( slices, 158 ));
            rec.hllt := Convert_Bscon_Type( Get( slices, 159 ));
            rec.hllta := Convert_Hllta_Type( Get( slices, 160 ));
            rec.hlltb := Convert_Hlltb_Type( Get( slices, 161 ));
            rec.hlltc := Convert_Hlltc_Type( Get( slices, 162 ));
            rec.hlltd := Convert_Hlltd_Type( Get( slices, 163 ));
            rec.hllte := Convert_Hllte_Type( Get( slices, 164 ));
            rec.hlltw := Convert_Bscon_Type( Get( slices, 165 ));
            rec.hlendw := Convert_Hlendw_Type( Get( slices, 166 ));
            rec.hlltwa := Convert_Hlltwa_Type( Get( slices, 167 ));
            rec.hl2gp := Convert_Hl2gp_Type( Get( slices, 168 ));
            rec.xdts := Convert_Bscon_Type( Get( slices, 169 ));
            rec.nxdts := Convert_Nxdts_Type( Get( slices, 170 ));
            rec.xdt1m := Convert_Xdt1m_Type( Get( slices, 171 ));
            rec.xdt2m := Convert_Xdt2m_Type( Get( slices, 172 ));
            rec.xdt3m := Convert_Xdt2m_Type( Get( slices, 173 ));
            rec.xdt1y := Convert( slices, 174, ( -9, -8, -7, -2, -1 ) );
            rec.xdt2y := Convert( slices, 175, ( -9, -8, -7, -2, -1 ) );
            rec.xdt3y := Convert( slices, 176, ( -9, -8, -7, -2, -1 ) );
            rec.xdt1pl := Convert_Xdt1pl_Type( Get( slices, 177 ));
            rec.xdt2pl := Convert_Xdt1pl_Type( Get( slices, 178 ));
            rec.xdt3pl := Convert_Xdt1pl_Type( Get( slices, 179 ));
            rec.hosp := Convert_Hlsv_Type( Get( slices, 180 ));
            rec.hospd := Convert( slices, 181, ( -9, -8, -7, -2, -1 ) );
            rec.hospch := Convert_Hospch_Type( Get( slices, 182 ));
            rec.hospnhs := Convert_Hospnhs_Type( Get( slices, 183 ));
            rec.hlsv := Convert_Hlsv_Type( Get( slices, 184 ));
            rec.hlsva := Convert_Hlsva_Type( Get( slices, 185 ));
            rec.hlsvan := Convert_Hlsvan_Type( Get( slices, 186 ));
            rec.hlsvaf := Convert_Hlsvaf_Type( Get( slices, 187 ));
            rec.hlsvb := Convert_Hlsvb_Type( Get( slices, 188 ));
            rec.hlsvbn := Convert_Hlsvan_Type( Get( slices, 189 ));
            rec.hlsvbf := Convert_Hlsvaf_Type( Get( slices, 190 ));
            rec.hlsvc := Convert_Hlsvc_Type( Get( slices, 191 ));
            rec.hlsvcn := Convert_Hlsvan_Type( Get( slices, 192 ));
            rec.hlsvcf := Convert_Hlsvaf_Type( Get( slices, 193 ));
            rec.hlsvd := Convert_Hlsvd_Type( Get( slices, 194 ));
            rec.hlsvdn := Convert_Hlsvan_Type( Get( slices, 195 ));
            rec.hlsvdf := Convert_Hlsvaf_Type( Get( slices, 196 ));
            rec.hlsve := Convert_Hlsve_Type( Get( slices, 197 ));
            rec.hlsven := Convert_Hlsvan_Type( Get( slices, 198 ));
            rec.hlsvef := Convert_Hlsvaf_Type( Get( slices, 199 ));
            rec.hlsvf := Convert_Hlsvf_Type( Get( slices, 200 ));
            rec.hlsvfn := Convert_Hlsvan_Type( Get( slices, 201 ));
            rec.hlsvff := Convert_Hlsvaf_Type( Get( slices, 202 ));
            rec.hlsvg := Convert_Hlsvg_Type( Get( slices, 203 ));
            rec.hlsvgn := Convert_Hlsvan_Type( Get( slices, 204 ));
            rec.hlsvgf := Convert_Hlsvaf_Type( Get( slices, 205 ));
            rec.hlsvh := Convert_Hlsvh_Type( Get( slices, 206 ));
            rec.hlsvhn := Convert_Hlsvan_Type( Get( slices, 207 ));
            rec.hlsvhf := Convert_Hlsvaf_Type( Get( slices, 208 ));
            rec.hlsvi := Convert_Hlsvi_Type( Get( slices, 209 ));
            rec.hlsvin := Convert_Hlsvan_Type( Get( slices, 210 ));
            rec.hlsvif := Convert_Hlsvaf_Type( Get( slices, 211 ));
            rec.hlsvj := Convert_Hlsvj_Type( Get( slices, 212 ));
            rec.hlsvjn := Convert_Hlsvan_Type( Get( slices, 213 ));
            rec.hlsvjf := Convert_Hlsvaf_Type( Get( slices, 214 ));
            rec.hlsvk := Convert_Hlsvk_Type( Get( slices, 215 ));
            rec.hlsvkn := Convert_Hlsvan_Type( Get( slices, 216 ));
            rec.hlsvkf := Convert_Hlsvaf_Type( Get( slices, 217 ));
            rec.hlck := Convert_Aidpl1_Type( Get( slices, 218 ));
            rec.hlcka := Convert_Hlcka_Type( Get( slices, 219 ));
            rec.hlckan := Convert_Hlckan_Type( Get( slices, 220 ));
            rec.hlckb := Convert_Hlcka_Type( Get( slices, 221 ));
            rec.hlckbn := Convert_Hlckan_Type( Get( slices, 222 ));
            rec.hlckc := Convert_Hlcka_Type( Get( slices, 223 ));
            rec.hlckcn := Convert_Hlckan_Type( Get( slices, 224 ));
            rec.hlckd := Convert_Hlcka_Type( Get( slices, 225 ));
            rec.hlckdn := Convert_Hlckan_Type( Get( slices, 226 ));
            rec.hlcke := Convert_Hlcka_Type( Get( slices, 227 ));
            rec.hlcken := Convert_Hlckan_Type( Get( slices, 228 ));
            rec.hlckf := Convert_Hlcka_Type( Get( slices, 229 ));
            rec.hlckfn := Convert_Hlckan_Type( Get( slices, 230 ));
            rec.hlckg := Convert_Hlcka_Type( Get( slices, 231 ));
            rec.hlckgn := Convert_Hlckan_Type( Get( slices, 232 ));
            rec.hlckh := Convert_Hlcka_Type( Get( slices, 233 ));
            rec.hlckhn := Convert_Hlckan_Type( Get( slices, 234 ));
            rec.smoker := Convert_Bscon_Type( Get( slices, 235 ));
            rec.ncigs := Convert( slices, 236, ( -9, -8, -7, -2, -1 ) );
            rec.ophla := Convert_Ophla_Type( Get( slices, 237 ));
            rec.ophlb := Convert_Ophlb_Type( Get( slices, 238 ));
            rec.ophlc := Convert_Ophlb_Type( Get( slices, 239 ));
            rec.aidhh := Convert_Aidhh_Type( Get( slices, 240 ));
            rec.aidhua := Convert( slices, 241, ( -9, -8, -7, -1 ) );
            rec.aidhub := Convert( slices, 242, ( -9, -8, -7 ) );
            rec.aidhuc := Convert( slices, 243, ( -9, -8, -7 ) );
            rec.aidxhh := Convert_Aidxhh_Type( Get( slices, 244 ));
            rec.naidxhh := Convert_Naidxhh_Type( Get( slices, 245 ));
            rec.aidhu1 := Convert_Aidhu1_Type( Get( slices, 246 ));
            rec.aidhu2 := Convert_Aidhu2_Type( Get( slices, 247 ));
            rec.aidhrs := Convert_Aidhrs_Type( Get( slices, 248 ));
            rec.ivma := Convert_Ivda_Type( Get( slices, 249 ));
            rec.ivmb := Convert_Ivdb_Type( Get( slices, 250 ));
            rec.ivmc := Convert_Ivec_Type( Get( slices, 251 ));
            rec.ivmd := Convert_Ivdd_Type( Get( slices, 252 ));
            rec.ivme := Convert_Ivee_Type( Get( slices, 253 ));
            rec.jbhas := Convert_Frnow_Type( Get( slices, 254 ));
            rec.jboff := Convert_Jboff_Type( Get( slices, 255 ));
            rec.jboffy := Convert_Jboffy_Type( Get( slices, 256 ));
            rec.jbterm := Convert_Jbterm_Type( Get( slices, 257 ));
            rec.jbsoc := Convert( slices, 258, ( -9, -8, -2, -1 ) );
            rec.jbsic := Convert( slices, 259, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.jbsic92 := Convert( slices, 260, ( -9, -8, -7, -2, -1 ) );
            rec.jbsemp := Convert_Jbsemp_Type( Get( slices, 261 ));
            rec.jbmngr := Convert_Jbmngr_Type( Get( slices, 262 ));
            rec.jbsize := Convert_Jbsize_Type( Get( slices, 263 ));
            rec.jbhrs := Convert( slices, 264, ( -9, -8, -7, -2, -1 ) );
            rec.jbot := Convert( slices, 265, ( -9, -8, -7, -2, -1 ) );
            rec.jbotpd := Convert( slices, 266, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbhrlk := Convert_Jbhrlk_Type( Get( slices, 267 ));
            rec.jbpl := Convert_Jbpl_Type( Get( slices, 268 ));
            rec.jbttwt := Convert( slices, 269, ( -9, -8, -7, -3, -2, -1 ) );
            rec.jbttwm := Convert_Jbttwm_Type( Get( slices, 270 ));
            rec.jbsat1 := Convert_Jbsat1_Type( Get( slices, 271 ));
            rec.jbsat2 := Convert( slices, 272, ( -9, -8, -7, -2, -1 ) );
            rec.jbsat3 := Convert_Jbsat_Type( Get( slices, 273 ));
            rec.jbsat4 := Convert_Jbsat4_Type( Get( slices, 274 ));
            rec.jbsat5 := Convert_Jbsat4_Type( Get( slices, 275 ));
            rec.jbsat6 := Convert_Jbsat4_Type( Get( slices, 276 ));
            rec.jbsat7 := Convert_Jbsat_Type( Get( slices, 277 ));
            rec.jbsat := Convert_Jbsat_Type( Get( slices, 278 ));
            rec.paygl := Convert( slices, 279, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.paygw := Convert( slices, 280, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.paynl := Convert( slices, 281, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.paynw := Convert( slices, 282, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.payslp := Convert_Payslp_Type( Get( slices, 283 ));
            rec.payusl := Convert_Aidpl1_Type( Get( slices, 284 ));
            rec.payu := Convert( slices, 285, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.payuw := Convert( slices, 286, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.payug := Convert_Paylyg_Type( Get( slices, 287 ));
            rec.paydf1 := Convert_Paydf1_Type( Get( slices, 288 ));
            rec.paydf2 := Convert_Paydf2_Type( Get( slices, 289 ));
            rec.paydf3 := Convert_Paydf3_Type( Get( slices, 290 ));
            rec.paydf4 := Convert_Paydf4_Type( Get( slices, 291 ));
            rec.paydf5 := Convert_Paydf5_Type( Get( slices, 292 ));
            rec.paydf6 := Convert_Paydf6_Type( Get( slices, 293 ));
            rec.paydf7 := Convert_Paydf7_Type( Get( slices, 294 ));
            rec.paydf8 := Convert_Paydf8_Type( Get( slices, 295 ));
            rec.jbbgd := Convert( slices, 296, ( -9, -8, -7, -2, -1 ) );
            rec.jbbgm := Convert_Cjsbgm_Type( Get( slices, 297 ));
            rec.jbbgy := Convert( slices, 298, ( -9, -8, -7, -2, -1 ) );
            rec.jbbgly := Convert_Jbbgly_Type( Get( slices, 299 ));
            rec.jbsect := Convert_Jbsect_Type( Get( slices, 300 ));
            rec.jbonus := Convert_Aidpl1_Type( Get( slices, 301 ));
            rec.jbrise := Convert_Aidpl1_Type( Get( slices, 302 ));
            rec.tujbpl := Convert_Aidpl1_Type( Get( slices, 303 ));
            rec.tuin1 := Convert_Aidpl1_Type( Get( slices, 304 ));
            rec.tuin2 := Convert_Aidpl1_Type( Get( slices, 305 ));
            rec.jbopps := Convert_Aidpl1_Type( Get( slices, 306 ));
            rec.jbtime := Convert_Jbtime_Type( Get( slices, 307 ));
            rec.pays := Convert( slices, 308, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.paysw := Convert( slices, 309, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.paysg := Convert_Paylyg_Type( Get( slices, 310 ));
            rec.jbpen := Convert_Aidpl1_Type( Get( slices, 311 ));
            rec.jbpenm := Convert_Aidpl1_Type( Get( slices, 312 ));
            rec.payly := Convert( slices, 313, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.paylyw := Convert( slices, 314, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.paylyg := Convert_Paylyg_Type( Get( slices, 315 ));
            rec.jsboss := Convert_Jsboss_Type( Get( slices, 316 ));
            rec.jssize := Convert_Jssize_Type( Get( slices, 317 ));
            rec.jshrs := Convert( slices, 318, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jshrlk := Convert_Jbhrlk_Type( Get( slices, 319 ));
            rec.jstime := Convert_Jstime_Type( Get( slices, 320 ));
            rec.jstype := Convert_Jstype_Type( Get( slices, 321 ));
            rec.jsaccs := Convert_Jsaccs_Type( Get( slices, 322 ));
            rec.jsprf := Convert( slices, 323, ( -9, -8, -7, -3, -2, -1 ) );
            rec.jsprbm := Convert_Cjsbgm_Type( Get( slices, 324 ));
            rec.jsprby := Convert( slices, 325, ( -9, -8, -7, -2, -1 ) );
            rec.jsprem := Convert_Cjsbgm_Type( Get( slices, 326 ));
            rec.jsprey := Convert( slices, 327, ( -9, -8, -7, -2, -1 ) );
            rec.jspayl := Convert( slices, 328, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jspybm := Convert_Cjsbgm_Type( Get( slices, 329 ));
            rec.jspyby := Convert( slices, 330, ( -9, -8, -7, -2, -1 ) );
            rec.jspyem := Convert_Cjsbgm_Type( Get( slices, 331 ));
            rec.jspyey := Convert( slices, 332, ( -9, -8, -7, -2, -1 ) );
            rec.jspl := Convert_Jspl_Type( Get( slices, 333 ));
            rec.jsttwt := Convert( slices, 334, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.jsttwm := Convert_Jsttwm_Type( Get( slices, 335 ));
            rec.jssat1 := Convert_Jssat1_Type( Get( slices, 336 ));
            rec.jssat2 := Convert_Jbsat_Type( Get( slices, 337 ));
            rec.jssat3 := Convert_Jbsat_Type( Get( slices, 338 ));
            rec.jssat4 := Convert_Jbsat_Type( Get( slices, 339 ));
            rec.jssat5 := Convert_Jbsat_Type( Get( slices, 340 ));
            rec.jssat := Convert_Jbsat_Type( Get( slices, 341 ));
            rec.jsbgd := Convert( slices, 342, ( -9, -8, -7, -2, -1 ) );
            rec.jsbgm := Convert_Cjsbgm_Type( Get( slices, 343 ));
            rec.jsbgy := Convert( slices, 344, ( -9, -8, -7, -2, -1 ) );
            rec.jbed := Convert_Aidpl1_Type( Get( slices, 345 ));
            rec.jbed1 := Convert_Aidpl1_Type( Get( slices, 346 ));
            rec.jbed2 := Convert_Aidpl1_Type( Get( slices, 347 ));
            rec.jbed3 := Convert_Aidpl1_Type( Get( slices, 348 ));
            rec.jbed4 := Convert_Aidpl1_Type( Get( slices, 349 ));
            rec.jbed5 := Convert_Aidpl1_Type( Get( slices, 350 ));
            rec.jbedq := Convert( slices, 351, ( -9.0, -8.0, -7.0, -1.0 ) );
            rec.jbedp1 := Convert_Ednewp1_Type( Get( slices, 352 ));
            rec.rach12 := Convert_Hhch12_Type( Get( slices, 353 ));
            rec.jbchc1 := Convert_Jbchc1_Type( Get( slices, 354 ));
            rec.jbchc2 := Convert_Jbchc2_Type( Get( slices, 355 ));
            rec.jbchc3 := Convert_Jbchc3_Type( Get( slices, 356 ));
            rec.xpchcf := Convert_Xpchcf_Type( Get( slices, 357 ));
            rec.xpchc := Convert( slices, 358, ( -9, -8, -7, -2, -1 ) );
            rec.huxpch := Convert_Huxpch_Type( Get( slices, 359 ));
            rec.hunurs := Convert_Hunurs_Type( Get( slices, 360 ));
            rec.julk1 := Convert_Aidpl1_Type( Get( slices, 361 ));
            rec.julk4 := Convert_Bscon_Type( Get( slices, 362 ));
            rec.julkjb := Convert_Aidpl1_Type( Get( slices, 363 ));
            rec.juspec := Convert_Juspec_Type( Get( slices, 364 ));
            rec.jusoc := Convert( slices, 365, ( -9, -8, -7, -2, -1 ) );
            rec.juhrsx := Convert( slices, 366, ( -9, -8, -7, -2, -1 ) );
            rec.jupayx := Convert( slices, 367, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jupayl := Convert( slices, 368, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.juhrsl := Convert( slices, 369, ( -9, -8, -7, -2, -1 ) );
            rec.eaage := Convert_Eaage_Type( Get( slices, 370 ));
            rec.jbub := Convert_Bscon_Type( Get( slices, 371 ));
            rec.jbuby := Convert_Jbuby_Type( Get( slices, 372 ));
            rec.j2has := Convert_Aidpl1_Type( Get( slices, 373 ));
            rec.j2soc := Convert( slices, 374, ( -9, -8, -7, -2, -1 ) );
            rec.j2semp := Convert_J2semp_Type( Get( slices, 375 ));
            rec.j2hrs := Convert( slices, 376, ( -9, -8, -7, -2, -1 ) );
            rec.j2pay := Convert( slices, 377, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbhha := Convert_Aidpl1_Type( Get( slices, 378 ));
            rec.jbhhb := Convert_Aidpl1_Type( Get( slices, 379 ));
            rec.jbhhc := Convert_Aidpl1_Type( Get( slices, 380 ));
            rec.jbhhd := Convert_Aidpl1_Type( Get( slices, 381 ));
            rec.jbhhe := Convert_Aidpl1_Type( Get( slices, 382 ));
            rec.jbhhf := Convert_Aidpl1_Type( Get( slices, 383 ));
            rec.ivea := Convert_Ivda_Type( Get( slices, 384 ));
            rec.iveb := Convert_Ivdb_Type( Get( slices, 385 ));
            rec.ivec := Convert_Ivec_Type( Get( slices, 386 ));
            rec.ived := Convert_Ivdd_Type( Get( slices, 387 ));
            rec.ivee := Convert_Ivee_Type( Get( slices, 388 ));
            rec.ednew := Convert_Aidpl1_Type( Get( slices, 389 ));
            rec.ednew1 := Convert_Aidpl1_Type( Get( slices, 390 ));
            rec.ednew2 := Convert_Aidpl1_Type( Get( slices, 391 ));
            rec.ednew3 := Convert_Aidpl1_Type( Get( slices, 392 ));
            rec.ednew4 := Convert_Aidpl1_Type( Get( slices, 393 ));
            rec.ednewq := Convert( slices, 394, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ednewp1 := Convert_Ednewp1_Type( Get( slices, 395 ));
            rec.nemst := Convert_Nemst_Type( Get( slices, 396 ));
            rec.cjsbgd := Convert( slices, 397, ( -9, -8, -7, -2, -1 ) );
            rec.cjsbgm := Convert_Cjsbgm_Type( Get( slices, 398 ));
            rec.cjsbgy := Convert( slices, 399, ( -9, -8, -7, -2, -1 ) );
            rec.cjsbly := Convert_Cjsbly_Type( Get( slices, 400 ));
            rec.njbs := Convert( slices, 401, ( -9, -8, -7 ) );
            rec.jbhad := Convert_Aidpl1_Type( Get( slices, 402 ));
            rec.jlend := Convert( slices, 403, ( -9, -8, -7, -2, -1 ) );
            rec.jlsoc := Convert( slices, 404, ( -9, -8, -7, -2, -1 ) );
            rec.jlsic := Convert( slices, 405, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jlsemp := Convert_J2semp_Type( Get( slices, 406 ));
            rec.jlboss := Convert_Aidpl1_Type( Get( slices, 407 ));
            rec.jlmngr := Convert_Jlmngr_Type( Get( slices, 408 ));
            rec.jlsize := Convert_Jlsize_Type( Get( slices, 409 ));
            rec.ivja := Convert_Ivda_Type( Get( slices, 410 ));
            rec.ivjb := Convert_Ivdb_Type( Get( slices, 411 ));
            rec.ivjc := Convert_Ivec_Type( Get( slices, 412 ));
            rec.ivjd := Convert_Ivdd_Type( Get( slices, 413 ));
            rec.ivje := Convert_Ivee_Type( Get( slices, 414 ));
            rec.oppola := Convert_Oppola_Type( Get( slices, 415 ));
            rec.oppolb := Convert_Oppola_Type( Get( slices, 416 ));
            rec.oppolc := Convert_Oppola_Type( Get( slices, 417 ));
            rec.oppold := Convert_Oppola_Type( Get( slices, 418 ));
            rec.vote1 := Convert_Aidpl1_Type( Get( slices, 419 ));
            rec.vote2 := Convert_Aidpl1_Type( Get( slices, 420 ));
            rec.vote3 := Convert_Vote3_Type( Get( slices, 421 ));
            rec.vote4 := Convert_Vote3_Type( Get( slices, 422 ));
            rec.vote5 := Convert_Vote5_Type( Get( slices, 423 ));
            rec.vote6 := Convert_Vote6_Type( Get( slices, 424 ));
            rec.oppol1 := Convert_Oppol1_Type( Get( slices, 425 ));
            rec.oppol2 := Convert_Oppol2_Type( Get( slices, 426 ));
            rec.oppol3 := Convert_Oppol3_Type( Get( slices, 427 ));
            rec.opiss1 := Convert_Opiss1_Type( Get( slices, 428 ));
            rec.opiss2 := Convert_Opiss1_Type( Get( slices, 429 ));
            rec.opiss3 := Convert_Opiss1_Type( Get( slices, 430 ));
            rec.opiss4 := Convert_Opiss1_Type( Get( slices, 431 ));
            rec.opiss5 := Convert_Opiss1_Type( Get( slices, 432 ));
            rec.opchd1 := Convert_Opchd1_Type( Get( slices, 433 ));
            rec.opchd2 := Convert_Opchd1_Type( Get( slices, 434 ));
            rec.opchd3 := Convert_Opchd1_Type( Get( slices, 435 ));
            rec.opchd4 := Convert_Opchd1_Type( Get( slices, 436 ));
            rec.orgm := Convert_Aidpl1_Type( Get( slices, 437 ));
            rec.orgma := Convert_Orgma_Type( Get( slices, 438 ));
            rec.orgaa := Convert_Orgaa_Type( Get( slices, 439 ));
            rec.orgmb := Convert_Orgmb_Type( Get( slices, 440 ));
            rec.orgab := Convert_Orgab_Type( Get( slices, 441 ));
            rec.orgmc := Convert_Orgmc_Type( Get( slices, 442 ));
            rec.orgac := Convert_Orgac_Type( Get( slices, 443 ));
            rec.orgmd := Convert_Orgmd_Type( Get( slices, 444 ));
            rec.orgad := Convert_Orgad_Type( Get( slices, 445 ));
            rec.orgme := Convert_Orgme_Type( Get( slices, 446 ));
            rec.orgae := Convert_Orgae_Type( Get( slices, 447 ));
            rec.orgmf := Convert_Orgmf_Type( Get( slices, 448 ));
            rec.orgaf := Convert_Orgaf_Type( Get( slices, 449 ));
            rec.orgmg := Convert_Orgmg_Type( Get( slices, 450 ));
            rec.orgag := Convert_Orgag_Type( Get( slices, 451 ));
            rec.orgmh := Convert_Orgmh_Type( Get( slices, 452 ));
            rec.orgah := Convert_Orgah_Type( Get( slices, 453 ));
            rec.orgmi := Convert_Orgmi_Type( Get( slices, 454 ));
            rec.orgai := Convert_Orgai_Type( Get( slices, 455 ));
            rec.orgmj := Convert_Orgmj_Type( Get( slices, 456 ));
            rec.orgaj := Convert_Orgaj_Type( Get( slices, 457 ));
            rec.orgmk := Convert_Orgmk_Type( Get( slices, 458 ));
            rec.orgak := Convert_Orgak_Type( Get( slices, 459 ));
            rec.orgml := Convert_Orgml_Type( Get( slices, 460 ));
            rec.orgal := Convert_Orgal_Type( Get( slices, 461 ));
            rec.orgmm := Convert_Orgmm_Type( Get( slices, 462 ));
            rec.orgam := Convert_Orgam_Type( Get( slices, 463 ));
            rec.orgmo := Convert_Orgmo_Type( Get( slices, 464 ));
            rec.orgao := Convert_Orgao_Type( Get( slices, 465 ));
            rec.orgmp := Convert_Orgmp_Type( Get( slices, 466 ));
            rec.orgap := Convert_Orgap_Type( Get( slices, 467 ));
            rec.orgmq := Convert_Orgmq_Type( Get( slices, 468 ));
            rec.orgaq := Convert_Orgaq_Type( Get( slices, 469 ));
            rec.orga := Convert_Aidpl1_Type( Get( slices, 470 ));
            rec.oprlg2 := Convert_Oprlg2_Type( Get( slices, 471 ));
            rec.caruse := Convert_Caruse_Type( Get( slices, 472 ));
            rec.yppar := Convert_Yppar_Type( Get( slices, 473 ));
            rec.pyrule := Convert_Pyrule_Type( Get( slices, 474 ));
            rec.pyenrl := Convert_Pyenrl_Type( Get( slices, 475 ));
            rec.pytvrl := Convert_Pytvrl_Type( Get( slices, 476 ));
            rec.pystm := Convert_Pybunk_Type( Get( slices, 477 ));
            rec.pyswr := Convert_Pybunk_Type( Get( slices, 478 ));
            rec.pysmok := Convert_Pybunk_Type( Get( slices, 479 ));
            rec.pylie := Convert_Pybunk_Type( Get( slices, 480 ));
            rec.pydrug := Convert_Pybunk_Type( Get( slices, 481 ));
            rec.pybunk := Convert_Pybunk_Type( Get( slices, 482 ));
            rec.pyser := Convert_Pyser_Type( Get( slices, 483 ));
            rec.pynyp := Convert( slices, 484, ( -9, -8, -7 ) );
            rec.pypno1 := Convert( slices, 485, ( -9, -8, -7 ) );
            rec.pypno2 := Convert( slices, 486, ( -9, -8, -7 ) );
            rec.pypno3 := Convert( slices, 487, ( -9, -8, -7 ) );
            rec.pywhr1 := Convert_Pywhr1_Type( Get( slices, 488 ));
            rec.pyarg1 := Convert_Pyarg1_Type( Get( slices, 489 ));
            rec.pytlk1 := Convert_Pyarg1_Type( Get( slices, 490 ));
            rec.pyasm1 := Convert( slices, 491, ( -9, -8, -7, -2, -1 ) );
            rec.pythh1 := Convert_Pythh1_Type( Get( slices, 492 ));
            rec.pyesm1 := Convert_Boolean_With_Missing( Get( slices, 493 ));
            rec.pytdr1 := Convert_Boolean_With_Missing( Get( slices, 494 ));
            rec.pysad1 := Convert_Pysad1_Type( Get( slices, 495 ));
            rec.pywor1 := Convert_Pywor1_Type( Get( slices, 496 ));
            rec.pyhsw1 := Convert_Pyhap1_Type( Get( slices, 497 ));
            rec.pyhap1 := Convert_Pyhap1_Type( Get( slices, 498 ));
            rec.pyhfm1 := Convert_Pyhap1_Type( Get( slices, 499 ));
            rec.pyhfr1 := Convert_Pyhap1_Type( Get( slices, 500 ));
            rec.pyhlf1 := Convert_Pyhap1_Type( Get( slices, 501 ));
            rec.pywhr2 := Convert_Pywhr1_Type( Get( slices, 502 ));
            rec.pyarg2 := Convert_Pyarg1_Type( Get( slices, 503 ));
            rec.pytlk2 := Convert_Pyarg1_Type( Get( slices, 504 ));
            rec.pyasm2 := Convert( slices, 505, ( -9, -8, -7, -2, -1 ) );
            rec.pythh2 := Convert_Pythh1_Type( Get( slices, 506 ));
            rec.pyesm2 := Convert_Boolean_With_Missing( Get( slices, 507 ));
            rec.pytdr2 := Convert_Boolean_With_Missing( Get( slices, 508 ));
            rec.pysad2 := Convert_Pysad1_Type( Get( slices, 509 ));
            rec.pywor2 := Convert_Pywor1_Type( Get( slices, 510 ));
            rec.pyhsw2 := Convert_Pyhap1_Type( Get( slices, 511 ));
            rec.pyhap2 := Convert_Pyhap1_Type( Get( slices, 512 ));
            rec.pyhfm2 := Convert_Pyhap1_Type( Get( slices, 513 ));
            rec.pyhfr2 := Convert_Pyhap1_Type( Get( slices, 514 ));
            rec.pyhlf2 := Convert_Pyhap1_Type( Get( slices, 515 ));
            rec.pywhr3 := Convert_Pywhr1_Type( Get( slices, 516 ));
            rec.pyarg3 := Convert_Pyarg1_Type( Get( slices, 517 ));
            rec.pytlk3 := Convert_Pyarg1_Type( Get( slices, 518 ));
            rec.pyasm3 := Convert( slices, 519, ( -9, -8, -7, -2, -1 ) );
            rec.pythh3 := Convert_Pythh1_Type( Get( slices, 520 ));
            rec.pyesm3 := Convert_Boolean_With_Missing( Get( slices, 521 ));
            rec.pytdr3 := Convert_Boolean_With_Missing( Get( slices, 522 ));
            rec.pysad3 := Convert_Pysad1_Type( Get( slices, 523 ));
            rec.pywor3 := Convert_Pywor1_Type( Get( slices, 524 ));
            rec.pyhsw3 := Convert_Pyhap1_Type( Get( slices, 525 ));
            rec.pyhap3 := Convert_Pyhap1_Type( Get( slices, 526 ));
            rec.pyhfm3 := Convert_Pyhap1_Type( Get( slices, 527 ));
            rec.pyhfr3 := Convert_Pyhap1_Type( Get( slices, 528 ));
            rec.pyhlf3 := Convert_Pyhap1_Type( Get( slices, 529 ));
            rec.f101 := Convert_F101_Type( Get( slices, 530 ));
            rec.f102 := Convert_F102_Type( Get( slices, 531 ));
            rec.f103 := Convert_F103_Type( Get( slices, 532 ));
            rec.f104 := Convert( slices, 533, ( -9, -8, -7 ) );
            rec.f105 := Convert_F105_Type( Get( slices, 534 ));
            rec.f106 := Convert_F106_Type( Get( slices, 535 ));
            rec.f116 := Convert_F116_Type( Get( slices, 536 ));
            rec.f117 := Convert_F117_Type( Get( slices, 537 ));
            rec.f118 := Convert_F118_Type( Get( slices, 538 ));
            rec.f119 := Convert_F119_Type( Get( slices, 539 ));
            rec.f120 := Convert_F120_Type( Get( slices, 540 ));
            rec.f121 := Convert_F121_Type( Get( slices, 541 ));
            rec.f122 := Convert_F122_Type( Get( slices, 542 ));
            rec.f123 := Convert_F123_Type( Get( slices, 543 ));
            rec.f124 := Convert_F124_Type( Get( slices, 544 ));
            rec.f131 := Convert_F131_Type( Get( slices, 545 ));
            rec.f132 := Convert_F132_Type( Get( slices, 546 ));
            rec.f133 := Convert_F133_Type( Get( slices, 547 ));
            rec.f134 := Convert_F134_Type( Get( slices, 548 ));
            rec.f135 := Convert_F135_Type( Get( slices, 549 ));
            rec.f136 := Convert_F136_Type( Get( slices, 550 ));
            rec.f137 := Convert_F137_Type( Get( slices, 551 ));
            rec.f138 := Convert_F138_Type( Get( slices, 552 ));
            rec.f139 := Convert_F139_Type( Get( slices, 553 ));
            rec.f140 := Convert_F140_Type( Get( slices, 554 ));
            rec.f141 := Convert_F141_Type( Get( slices, 555 ));
            rec.f151 := Convert_F151_Type( Get( slices, 556 ));
            rec.f152 := Convert_F152_Type( Get( slices, 557 ));
            rec.f153 := Convert_F153_Type( Get( slices, 558 ));
            rec.f154 := Convert_F154_Type( Get( slices, 559 ));
            rec.f155 := Convert_F155_Type( Get( slices, 560 ));
            rec.f156 := Convert_F156_Type( Get( slices, 561 ));
            rec.f157 := Convert_F157_Type( Get( slices, 562 ));
            rec.f158 := Convert_F158_Type( Get( slices, 563 ));
            rec.f159 := Convert_F159_Type( Get( slices, 564 ));
            rec.nf1 := Convert( slices, 565, ( -9, -8, -7, -2, -1 ) );
            rec.fisit := Convert_Fisit_Type( Get( slices, 566 ));
            rec.fisitc := Convert( slices, 567, ( -9, -8, -7, -2, -1 ) );
            rec.fisity := Convert_Fisity_Type( Get( slices, 568 ));
            rec.fisitx := Convert( slices, 569, ( -9, -8, -7, -2, -1 ) );
            rec.opxpsv := Convert_Opxpsv_Type( Get( slices, 570 ));
            rec.opxpcr := Convert_Opxpcr_Type( Get( slices, 571 ));
            rec.fiyrdi := Convert( slices, 572, ( -9, -8, -7, -2, -1 ) );
            rec.fiyrdiu := Convert_Fiyrdiu_Type( Get( slices, 573 ));
            rec.save := Convert_Aidpl1_Type( Get( slices, 574 ));
            rec.saved := Convert( slices, 575, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.savey1 := Convert_Savey1_Type( Get( slices, 576 ));
            rec.savey2 := Convert_Savey1_Type( Get( slices, 577 ));
            rec.pppen := Convert_Aidpl1_Type( Get( slices, 578 ));
            rec.penb4 := Convert_Penb4_Type( Get( slices, 579 ));
            rec.penb4yr := Convert( slices, 580, ( -9, -8, -7, -2, -1 ) );
            rec.penb4v := Convert( slices, 581, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.penb4w := Convert( slices, 582, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.penyr := Convert( slices, 583, ( -9, -8, -7, -2, -1 ) );
            rec.penadd := Convert_Aidpl1_Type( Get( slices, 584 ));
            rec.penadv := Convert( slices, 585, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.penadw := Convert( slices, 586, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.fthh := Convert_Aidpl1_Type( Get( slices, 587 ));
            rec.fthh1 := Convert( slices, 588, ( -9, -8, -7, -2, -1 ) );
            rec.fthh11 := Convert_Fthh11_Type( Get( slices, 589 ));
            rec.fthh12 := Convert_Fthh12_Type( Get( slices, 590 ));
            rec.fthh13 := Convert_Fthh13_Type( Get( slices, 591 ));
            rec.fthh14 := Convert_Fthh14_Type( Get( slices, 592 ));
            rec.fthh15 := Convert_Fthh15_Type( Get( slices, 593 ));
            rec.fthh16 := Convert_Ftexa6_Type( Get( slices, 594 ));
            rec.fthh1v := Convert( slices, 595, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.fthh1w := Convert( slices, 596, ( -9.0, -8.0, -7.0, -5.0, -3.0, -2.0, -1.0 ) );
            rec.fthh2 := Convert( slices, 597, ( -9, -8, -7, -2, -1 ) );
            rec.fthh21 := Convert_Fthh11_Type( Get( slices, 598 ));
            rec.fthh22 := Convert_Fthh12_Type( Get( slices, 599 ));
            rec.fthh23 := Convert_Fthh13_Type( Get( slices, 600 ));
            rec.fthh24 := Convert_Fthh24_Type( Get( slices, 601 ));
            rec.fthh25 := Convert_Fthh15_Type( Get( slices, 602 ));
            rec.fthh26 := Convert_Ftexa6_Type( Get( slices, 603 ));
            rec.fthh2v := Convert( slices, 604, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.fthh2w := Convert( slices, 605, ( -9.0, -8.0, -7.0, -5.0, -3.0, -2.0, -1.0 ) );
            rec.fthh3 := Convert( slices, 606, ( -9, -8, -7, -2, -1 ) );
            rec.fthh31 := Convert_Fthh11_Type( Get( slices, 607 ));
            rec.fthh32 := Convert_Fthh12_Type( Get( slices, 608 ));
            rec.fthh33 := Convert_Fthh13_Type( Get( slices, 609 ));
            rec.fthh34 := Convert_Fthh24_Type( Get( slices, 610 ));
            rec.fthh35 := Convert_Fthh15_Type( Get( slices, 611 ));
            rec.fthh36 := Convert_Ftexa6_Type( Get( slices, 612 ));
            rec.fthh3v := Convert( slices, 613, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.fthh3w := Convert( slices, 614, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.ftexhh := Convert_Aidpl1_Type( Get( slices, 615 ));
            rec.ftexa := Convert_Ftexa_Type( Get( slices, 616 ));
            rec.ftexa1 := Convert_Ftexa1_Type( Get( slices, 617 ));
            rec.ftexa2 := Convert_Ftexa2_Type( Get( slices, 618 ));
            rec.ftexa3 := Convert_Ftexa3_Type( Get( slices, 619 ));
            rec.ftexa4 := Convert_Ftexa4_Type( Get( slices, 620 ));
            rec.ftexa5 := Convert_Ftexa5_Type( Get( slices, 621 ));
            rec.ftexa6 := Convert_Ftexa6_Type( Get( slices, 622 ));
            rec.ftexav := Convert( slices, 623, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ftexaw := Convert( slices, 624, ( -9.0, -8.0, -7.0, -5.0, -3.0, -2.0, -1.0 ) );
            rec.ftexb := Convert_Ftexb_Type( Get( slices, 625 ));
            rec.ftexb1 := Convert_Ftexa1_Type( Get( slices, 626 ));
            rec.ftexb2 := Convert_Ftexa2_Type( Get( slices, 627 ));
            rec.ftexb3 := Convert_Ftexa3_Type( Get( slices, 628 ));
            rec.ftexb4 := Convert_Ftexa4_Type( Get( slices, 629 ));
            rec.ftexb5 := Convert_Ftexa5_Type( Get( slices, 630 ));
            rec.ftexb6 := Convert_Ftexa6_Type( Get( slices, 631 ));
            rec.ftexbv := Convert( slices, 632, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ftexbw := Convert( slices, 633, ( -9.0, -8.0, -7.0, -5.0, -3.0, -2.0, -1.0 ) );
            rec.ftexc := Convert_Ftexc_Type( Get( slices, 634 ));
            rec.ftexc1 := Convert_Ftexa1_Type( Get( slices, 635 ));
            rec.ftexc2 := Convert_Ftexa2_Type( Get( slices, 636 ));
            rec.ftexc3 := Convert_Ftexa3_Type( Get( slices, 637 ));
            rec.ftexc4 := Convert_Ftexa4_Type( Get( slices, 638 ));
            rec.ftexc5 := Convert_Ftexa5_Type( Get( slices, 639 ));
            rec.ftexc6 := Convert_Ftexa6_Type( Get( slices, 640 ));
            rec.ftexcv := Convert( slices, 641, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ftexcw := Convert( slices, 642, ( -9.0, -8.0, -7.0, -5.0, -3.0, -2.0, -1.0 ) );
            rec.spinhh := Convert_Hhch12_Type( Get( slices, 643 ));
            rec.huruns := Convert_Huruns_Type( Get( slices, 644 ));
            rec.huboss := Convert_Huboss_Type( Get( slices, 645 ));
            rec.hubuys := Convert_Hubuys_Type( Get( slices, 646 ));
            rec.hufrys := Convert_Hubuys_Type( Get( slices, 647 ));
            rec.humops := Convert_Hubuys_Type( Get( slices, 648 ));
            rec.huiron := Convert_Hubuys_Type( Get( slices, 649 ));
            rec.hhch12 := Convert_Hhch12_Type( Get( slices, 650 ));
            rec.husits := Convert_Husits_Type( Get( slices, 651 ));
            rec.howlng := Convert( slices, 652, ( -9, -8, -7, -3, -2, -1 ) );
            rec.ivfa := Convert_Ivda_Type( Get( slices, 653 ));
            rec.ivfb := Convert_Ivdb_Type( Get( slices, 654 ));
            rec.ivfc := Convert_Ivfc_Type( Get( slices, 655 ));
            rec.ivfd := Convert_Ivdd_Type( Get( slices, 656 ));
            rec.ivfe := Convert_Ivee_Type( Get( slices, 657 ));
            rec.ivfoih := Convert( slices, 658, ( -9, -8 ) );
            rec.ivfoim := Convert( slices, 659, ( -9, -8 ) );
            rec.ivsc := Convert_Ivsc_Type( Get( slices, 660 ));
            rec.iv1 := Convert_Hhch12_Type( Get( slices, 661 ));
            rec.iv2 := Convert_Iv2_Type( Get( slices, 662 ));
            rec.iv4 := Convert_Iv4_Type( Get( slices, 663 ));
            rec.iv5 := Convert_Iv5_Type( Get( slices, 664 ));
            rec.iv6a := Convert_Hhch12_Type( Get( slices, 665 ));
            rec.iv6b := Convert_Hhch12_Type( Get( slices, 666 ));
            rec.iv6c := Convert_Hhch12_Type( Get( slices, 667 ));
            rec.iv6d := Convert_Hhch12_Type( Get( slices, 668 ));
            rec.iv6e := Convert_Hhch12_Type( Get( slices, 669 ));
            rec.iv6f := Convert_Hhch12_Type( Get( slices, 670 ));
            rec.iv7 := Convert( slices, 671, ( -9, -8, -7 ) );
            rec.ghqa := Convert_Ghqa_Type( Get( slices, 672 ));
            rec.ghqb := Convert_Ghqb_Type( Get( slices, 673 ));
            rec.ghqc := Convert_Ghqc_Type( Get( slices, 674 ));
            rec.ghqd := Convert_Ghqc_Type( Get( slices, 675 ));
            rec.ghqe := Convert_Ghqe_Type( Get( slices, 676 ));
            rec.ghqf := Convert_Ghqe_Type( Get( slices, 677 ));
            rec.ghqg := Convert_Ghqc_Type( Get( slices, 678 ));
            rec.ghqh := Convert_Ghqc_Type( Get( slices, 679 ));
            rec.ghqi := Convert_Ghqb_Type( Get( slices, 680 ));
            rec.ghqj := Convert_Ghqe_Type( Get( slices, 681 ));
            rec.ghqk := Convert_Ghqe_Type( Get( slices, 682 ));
            rec.ghql := Convert_Ghqc_Type( Get( slices, 683 ));
            rec.opfamj := Convert_Opfamj_Type( Get( slices, 684 ));
            rec.opfamk := Convert_Opfamj_Type( Get( slices, 685 ));
            rec.opfaml := Convert_Opfamj_Type( Get( slices, 686 ));
            rec.opfamm := Convert_Opfamj_Type( Get( slices, 687 ));
            rec.opfamn := Convert_Opfamj_Type( Get( slices, 688 ));
            rec.netsx1 := Convert_Netsx1_Type( Get( slices, 689 ));
            rec.netsx2 := Convert_Netsx1_Type( Get( slices, 690 ));
            rec.netsx3 := Convert_Netsx1_Type( Get( slices, 691 ));
            rec.net1wr := Convert_Aidpl1_Type( Get( slices, 692 ));
            rec.net2wr := Convert_Aidpl1_Type( Get( slices, 693 ));
            rec.net3wr := Convert_Aidpl1_Type( Get( slices, 694 ));
            rec.net1rl := Convert_Net1rl_Type( Get( slices, 695 ));
            rec.net2rl := Convert_Net1rl_Type( Get( slices, 696 ));
            rec.net3rl := Convert_Net1rl_Type( Get( slices, 697 ));
            rec.net1ag := Convert( slices, 698, ( -9, -8, -7, -2, -1 ) );
            rec.net2ag := Convert( slices, 699, ( -9, -8, -7, -2, -1 ) );
            rec.net3ag := Convert( slices, 700, ( -9, -8, -7, -2, -1 ) );
            rec.net1kn := Convert_Net1kn_Type( Get( slices, 701 ));
            rec.net2kn := Convert_Net1kn_Type( Get( slices, 702 ));
            rec.net3kn := Convert_Net1kn_Type( Get( slices, 703 ));
            rec.net1ph := Convert_Net1ph_Type( Get( slices, 704 ));
            rec.net2ph := Convert_Net1ph_Type( Get( slices, 705 ));
            rec.net3ph := Convert_Net1ph_Type( Get( slices, 706 ));
            rec.net1lv := Convert_Net1lv_Type( Get( slices, 707 ));
            rec.net2lv := Convert_Net1lv_Type( Get( slices, 708 ));
            rec.net3lv := Convert_Net1lv_Type( Get( slices, 709 ));
            rec.net1jb := Convert_Net1jb_Type( Get( slices, 710 ));
            rec.net2jb := Convert_Net1jb_Type( Get( slices, 711 ));
            rec.net3jb := Convert_Net1jb_Type( Get( slices, 712 ));
            rec.netsoc := Convert( slices, 713, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.prrs2i := Convert_Prrs2i_Type( Get( slices, 714 ));
            rec.pripn := Convert( slices, 715, ( -9, -8 ) );
            rec.prwhy := Convert_Prwhy_Type( Get( slices, 716 ));
            rec.pplevr := Convert_Plever_Type( Get( slices, 717 ));
            rec.prfehq := Convert_Prfehq_Type( Get( slices, 718 ));
            rec.prsehq := Convert_Prsehq_Type( Get( slices, 719 ));
            rec.presbgm := Convert_Presbgm_Type( Get( slices, 720 ));
            rec.presbgy := Convert( slices, 721, ( -9, -8, -2, -1 ) );
            rec.presly := Convert_Presly_Type( Get( slices, 722 ));
            rec.prf101 := Convert_Prf101_Type( Get( slices, 723 ));
            rec.prf102 := Convert_Prf102_Type( Get( slices, 724 ));
            rec.prf116 := Convert_Prf116_Type( Get( slices, 725 ));
            rec.prf131 := Convert_Prf131_Type( Get( slices, 726 ));
            rec.prf134 := Convert_Prf134_Type( Get( slices, 727 ));
            rec.prf135 := Convert_Prf135_Type( Get( slices, 728 ));
            rec.prf137 := Convert_Prf137_Type( Get( slices, 729 ));
            rec.prf139 := Convert_Prf139_Type( Get( slices, 730 ));
            rec.prf141 := Convert_Prf141_Type( Get( slices, 731 ));
            rec.prfirn := Convert_Prfirn_Type( Get( slices, 732 ));
            rec.prearn := Convert_Prearn_Type( Get( slices, 733 ));
            rec.prjbbgm := Convert_Presbgm_Type( Get( slices, 734 ));
            rec.prjbbgy := Convert( slices, 735, ( -9, -8, -1 ) );
            rec.prjbly := Convert_Prjbly_Type( Get( slices, 736 ));
            rec.prfitb := Convert_Prfitb_Type( Get( slices, 737 ));
            rec.ivpa := Convert_Ivpa_Type( Get( slices, 738 ));
            rec.ivpb := Convert_Ivpb_Type( Get( slices, 739 ));
            rec.ivpc := Convert_Ivpc_Type( Get( slices, 740 ));
            rec.ivpd := Convert_Ivpd_Type( Get( slices, 741 ));
            rec.ivpe := Convert_Ivpe_Type( Get( slices, 742 ));
            rec.telwhy := Convert_Telwhy_Type( Get( slices, 743 ));
            rec.prjbft := Convert_Prjbft_Type( Get( slices, 744 ));
            rec.tlfiyrl := Convert( slices, 745, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.tlfiyr := Convert( slices, 746, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.pid := Convert( slices, 747 );
            rec.iviow3 := Convert_Iviow3_Type( Get( slices, 748 ));
            rec.hhmem := Convert_Hhmem_Type( Get( slices, 749 ));
            rec.newhy := Convert_Newhy_Type( Get( slices, 750 ));
            rec.nemnjn := Convert_Nemnjn_Type( Get( slices, 751 ));
            rec.neyrjn := Convert( slices, 752, ( -9, -8, -2, -1 ) );
            rec.ivfio := Convert_Ivfio_Type( Get( slices, 753 ));
            rec.iodc := Convert_Iodc_Type( Get( slices, 754 ));
            rec.hgr2r := Convert_Hgr2r_Type( Get( slices, 755 ));
            rec.hgsex := Convert_Hgsex_Type( Get( slices, 756 ));
            rec.hgbm := Convert_Hgbm_Type( Get( slices, 757 ));
            rec.hgby := Convert( slices, 758, ( -2, -1 ) );
            rec.mastat := Convert_Mastat_Type( Get( slices, 759 ));
            rec.hgspn := Convert( slices, 760, ( -9, -8, -2, -1 ) );
            rec.hgemp := Convert_Hgemp_Type( Get( slices, 761 ));
            rec.hgfno := Convert( slices, 762, ( -9, -8, -2, -1 ) );
            rec.hgmno := Convert( slices, 763, ( -9, -8, -2, -1 ) );
            rec.hgra := Convert( slices, 764, ( -9, -8, -2, -1 ) );
            rec.age := Convert( slices, 765, ( -9, -8 ) );
            rec.age12 := Convert( slices, 766, ( -9, -8 ) );
            rec.butype := Convert_Butype_Type( Get( slices, 767 ));
            rec.buno := Convert( slices, 768, ( -9, -8 ) );
            rec.nchild := Convert( slices, 769, ( -9, -8 ) );
            rec.hoh := Convert_Hoh_Type( Get( slices, 770 ));
            rec.rach16 := Convert_Hhch12_Type( Get( slices, 771 ));
            rec.sampst := Convert_Sampst_Type( Get( slices, 772 ));
            rec.movest := Convert_Movest_Type( Get( slices, 773 ));
            rec.region := Convert_Region_Type( Get( slices, 774 ));
            rec.hhsize := Convert( slices, 775, ( -9, -8 ) );
            rec.hhtype := Convert_Hhtype_Type( Get( slices, 776 ));
            rec.tenure := Convert_Tenure_Type( Get( slices, 777 ));
            rec.qfedhi := Convert_Qfedhi_Type( Get( slices, 778 ));
            rec.qfvoc := Convert_Qfvoc_Type( Get( slices, 779 ));
            rec.qfachi := Convert_Qfachi_Type( Get( slices, 780 ));
            rec.jbft := Convert_Jbft_Type( Get( slices, 781 ));
            rec.payg := Convert( slices, 782, ( -9.0, -8.0, -7.0 ) );
            rec.payn := Convert( slices, 783, ( -9.0, -8.0, -7.0 ) );
            rec.paygu := Convert( slices, 784, ( -9.0, -8.0, -7.0 ) );
            rec.paynu := Convert( slices, 785, ( -9.0, -8.0, -7.0 ) );
            rec.paygty := Convert( slices, 786, ( -9.0, -8.0, -7.0 ) );
            rec.paygly := Convert( slices, 787, ( -9.0, -8.0, -7.0 ) );
            rec.paynty := Convert( slices, 788, ( -9.0, -8.0, -7.0 ) );
            rec.paynly := Convert( slices, 789, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jsprof := Convert( slices, 790, ( -9.0, -8.0, -7.0 ) );
            rec.jspayg := Convert( slices, 791, ( -9.0, -8.0, -7.0 ) );
            rec.cjsten := Convert( slices, 792, ( -9.0, -8.0, -7.0 ) );
            rec.cjswk9 := Convert( slices, 793, ( -9.0, -8.0, -7.0 ) );
            rec.jlid := Convert_Jlid_Type( Get( slices, 794 ));
            rec.jlyid := Convert_Jlyid_Type( Get( slices, 795 ));
            rec.jtyid := Convert_Jtyid_Type( Get( slices, 796 ));
            rec.jbseg := Convert_Jbseg_Type( Get( slices, 797 ));
            rec.jbgold := Convert( slices, 798, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbrgsc := Convert_Jbrgsc_Type( Get( slices, 799 ));
            rec.jbisco := Convert( slices, 800 );
            rec.jbcssm := Convert( slices, 801, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbcssf := Convert( slices, 802, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbhgs := Convert( slices, 803, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbsec := Convert_Jbsec_Type( Get( slices, 804 ));
            rec.njbwks := Convert( slices, 805, ( -9.0, -8.0, -7.0 ) );
            rec.njuwks := Convert( slices, 806, ( -9.0, -8.0, -7.0 ) );
            rec.njiwks := Convert( slices, 807, ( -9.0, -8.0, -7.0 ) );
            rec.njbnew := Convert( slices, 808, ( -9, -8, -7 ) );
            rec.njbsp := Convert( slices, 809, ( -9, -8, -7 ) );
            rec.njusp := Convert( slices, 810, ( -9, -8, -7 ) );
            rec.njisp := Convert( slices, 811, ( -9, -8, -7 ) );
            rec.jbstatl := Convert( slices, 812, ( -9, -8, -7, -2, -1 ) );
            rec.jbstatt := Convert( slices, 813, ( -9, -8, -7, -2, -1 ) );
            rec.jbsocly := Convert( slices, 814, ( -9, -8, -7 ) );
            rec.jlseg := Convert_Jlseg_Type( Get( slices, 815 ));
            rec.jlgold := Convert( slices, 816, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlrgsc := Convert_Jlrgsc_Type( Get( slices, 817 ));
            rec.jlisco := Convert( slices, 818 );
            rec.jlcssm := Convert( slices, 819, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlcssf := Convert( slices, 820, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlhgs := Convert( slices, 821, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlsec := Convert_Jlsec_Type( Get( slices, 822 ));
            rec.norgm := Convert( slices, 823, ( -9, -8, -7 ) );
            rec.norga := Convert( slices, 824, ( -9, -8, -7 ) );
            rec.vote := Convert_Vote_Type( Get( slices, 825 ));
            rec.fimnp := Convert( slices, 826, ( -9.0, -8.0, -7.0 ) );
            rec.fimnb := Convert( slices, 827, ( -9.0, -8.0, -7.0 ) );
            rec.fimni := Convert( slices, 828, ( -9.0, -8.0, -7.0 ) );
            rec.fimnt := Convert( slices, 829, ( -9.0, -8.0, -7.0 ) );
            rec.fimnl := Convert( slices, 830, ( -9.0, -8.0, -7.0 ) );
            rec.fimnnl := Convert( slices, 831, ( -9.0, -8.0, -7.0 ) );
            rec.fimn := Convert( slices, 832, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrl := Convert( slices, 833, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrnl := Convert( slices, 834, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrp := Convert( slices, 835, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrb := Convert( slices, 836, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrt := Convert( slices, 837, ( -9.0, -8.0, -7.0 ) );
            rec.fiyri := Convert( slices, 838, ( -9.0, -8.0, -7.0 ) );
            rec.fiyr := Convert( slices, 839, ( -9.0, -8.0, -7.0 ) );
            rec.fihhmn := Convert( slices, 840, ( -9.0, -8.0, -7.0 ) );
            rec.hlghq1 := Convert( slices, 841, ( -9, -8, -7 ) );
            rec.hlghq2 := Convert( slices, 842, ( -9, -8, -7 ) );
            rec.spjb := Convert_Spjb_Type( Get( slices, 843 ));
            rec.spsoc := Convert( slices, 844, ( -9.0, -8.0 ) );
            rec.spjbhr := Convert( slices, 845, ( -9, -8, -7 ) );
            rec.spjbot := Convert( slices, 846, ( -9, -8, -7 ) );
            rec.sppayg := Convert( slices, 847, ( -9.0, -8.0, -7.0 ) );
            rec.spjbyr := Convert( slices, 848, ( -9, -8, -7 ) );
            rec.lrwght := Convert( slices, 849 );
            rec.lewght := Convert( slices, 850 );
            rec.xrwght := Convert( slices, 851 );
            rec.xewght := Convert( slices, 852 );
            rec.j2payi := Convert( slices, 853, ( -9, -8, -7, -3, -2, -1 ) );
            rec.fiyrdii := Convert_Fiyrdii_Type( Get( slices, 854 ));
            rec.prearni := Convert( slices, 855, ( -9, -8, -2, -1 ) );
            rec.prfitbi := Convert_Prfitbi_Type( Get( slices, 856 ));
            rec.paygui := Convert_Fimnbi_Type( Get( slices, 857 ));
            rec.paynui := Convert_Fimnbi_Type( Get( slices, 858 ));
            rec.paygti := Convert_Fimnbi_Type( Get( slices, 859 ));
            rec.paygli := Convert_Fimnbi_Type( Get( slices, 860 ));
            rec.paynti := Convert_Fimnbi_Type( Get( slices, 861 ));
            rec.paynli := Convert_Fimnbi_Type( Get( slices, 862 ));
            rec.jsprofi := Convert_Fimnbi_Type( Get( slices, 863 ));
            rec.jspaygi := Convert_Fimnbi_Type( Get( slices, 864 ));
            rec.fimnpi := Convert_Fimnbi_Type( Get( slices, 865 ));
            rec.fimnbi := Convert_Fimnbi_Type( Get( slices, 866 ));
            rec.fimnii := Convert_Fimnii_Type( Get( slices, 867 ));
            rec.fimnti := Convert_Fimnii_Type( Get( slices, 868 ));
            rec.fimnnli := Convert_Fimnbi_Type( Get( slices, 869 ));
            rec.fimnli := Convert_Fimnbi_Type( Get( slices, 870 ));
            rec.fimnthi := Convert_Fimnii_Type( Get( slices, 871 ));
            rec.fiyrli := Convert_Fimnbi_Type( Get( slices, 872 ));
            rec.fiyrnli := Convert_Fimnbi_Type( Get( slices, 873 ));
            rec.fiyrpi := Convert_Fimnii_Type( Get( slices, 874 ));
            rec.fiyrbi := Convert_Fimnbi_Type( Get( slices, 875 ));
            rec.fiyrti := Convert_Fimnbi_Type( Get( slices, 876 ));
            rec.fiyrii := Convert_Fimnbi_Type( Get( slices, 877 ));
            rec.fiyeari := Convert_Fimnbi_Type( Get( slices, 878 ));
            rec.sppaygi := Convert_Prfitbi_Type( Get( slices, 879 ));
            rec.fihhmni := Convert_Fihhmni_Type( Get( slices, 880 ));
            rec.event1 := Convert( slices, 881, ( -9, -8, -7, -1 ) );
            rec.event1s := Convert( slices, 882, ( -9, -8, -7 ) );
            rec.event2 := Convert( slices, 883, ( -9, -8, -7, -1 ) );
            rec.event2s := Convert( slices, 884, ( -9, -8, -7 ) );
            rec.event3 := Convert( slices, 885, ( -9, -8, -7, -1 ) );
            rec.event3s := Convert( slices, 886, ( -9, -8, -7 ) );
            rec.event4 := Convert( slices, 887, ( -9, -8, -7, -1 ) );
            rec.event4s := Convert( slices, 888, ( -9, -8, -7 ) );
            rec.mrjend := Convert( slices, 889, ( -9, -8, -7, -3, -2, -1 ) );
            rec.mrjsoc := Convert( slices, 890, ( -9, -8, -7, -3 ) );
            rec.mrjsic := Convert( slices, 891, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjsemp := Convert_Mrjsemp_Type( Get( slices, 892 ));
            rec.mrjboss := Convert_Mrjboss_Type( Get( slices, 893 ));
            rec.mrjmngr := Convert_Mrjmngr_Type( Get( slices, 894 ));
            rec.mrjsize := Convert_Mrjsize_Type( Get( slices, 895 ));
            rec.mrjseg := Convert_Maseg_Type( Get( slices, 896 ));
            rec.mrjgold := Convert( slices, 897, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjrgsc := Convert_Margsc_Type( Get( slices, 898 ));
            rec.mrjisco := Convert( slices, 899 );
            rec.mrjcssm := Convert( slices, 900, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjcssf := Convert( slices, 901, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjhgs := Convert( slices, 902, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjsec := Convert_J1sec_Type( Get( slices, 903 ));
            rec.doiy4 := Convert( slices, 904, ( -9, -8, -7, -2, -1 ) );
            rec.plnowy4 := Convert( slices, 905, ( -9, -8, -7, -2, -1 ) );
            rec.edendy4 := Convert( slices, 906, ( -9, -8, -7, -3, -2, -1 ) );
            rec.mlchy4 := Convert( slices, 907, ( -9, -8, -7, -2, -1 ) );
            rec.yr2uk4 := Convert( slices, 908, ( -9, -8, -7, -2, -1 ) );
            rec.jbbgy4 := Convert( slices, 909, ( -9, -8, -7, -2, -1 ) );
            rec.jsprby4 := Convert( slices, 910, ( -9, -8, -7, -2, -1 ) );
            rec.jsprey4 := Convert( slices, 911, ( -9, -8, -7, -2, -1 ) );
            rec.jspyby4 := Convert( slices, 912, ( -9, -8, -7, -2, -1 ) );
            rec.jspyey4 := Convert( slices, 913, ( -9, -8, -7, -2, -1 ) );
            rec.jsbgy4 := Convert( slices, 914, ( -9, -8, -7, -2, -1 ) );
            rec.cjsbgy4 := Convert( slices, 915, ( -9, -8, -7, -2, -1 ) );
            rec.jlend4 := Convert( slices, 916, ( -9, -8, -7, -2, -1 ) );
            rec.penb4y4 := Convert( slices, 917, ( -9, -8, -7, -2, -1 ) );
            rec.penyr4 := Convert( slices, 918, ( -9, -8, -7, -2, -1 ) );
            rec.presby4 := Convert( slices, 919, ( -9, -8, -7, -2, -1 ) );
            rec.prjbby4 := Convert( slices, 920, ( -9, -8, -7, -2, -1 ) );
            rec.neyrjn4 := Convert( slices, 921, ( -9, -8, -7, -2, -1 ) );
            rec.sppid := Convert( slices, 922 );
            rec.fpid := Convert( slices, 923 );
            rec.mpid := Convert( slices, 924 );
            rec.distmov := Convert( slices, 925, ( -9.0, -8.0, -7.0 ) );
            rec.region2 := Convert_Region2_Type( Get( slices, 926 ));
            rec.isced := Convert_Isced_Type( Get( slices, 927 ));
            rec.casmin := Convert_Casmin_Type( Get( slices, 928 ));
            rec.jbiscon := Convert( slices, 929, ( -9, -8, -7, -2, -1 ) );
            rec.jliscon := Convert( slices, 930, ( -9, -8, -7, -2, -1 ) );
            rec.mrjiscn := Convert( slices, 931, ( -9, -8, -7, -2, -1 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Indresp_component ).start_pos = 0 ) then
               index.pointers( Indresp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Indresp_component ).counter := index.pointers( Indresp_component ).counter + 1;
            Put_Index( index_map, index );
            Indresp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Indresp_IO.Close( bin_file );
   end Create_Indresp_Wave_D;




   procedure Create_Indsamp_Wave_D( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Indsamp_IO.File_Type;
      rec         : Indsamp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Indsamp_IO.Create (bin_file, Indsamp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.pid := Convert( slices, 3 );
            rec.iviow3 := Convert_Iviow3_Type( Get( slices, 4 ));
            rec.ivievr := Convert_Ivievr_Type( Get( slices, 5 ));
            rec.ivelig := Convert_Ivelig_Type( Get( slices, 6 ));
            rec.hhmem := Convert_Hhmem_Type( Get( slices, 7 ));
            rec.newhy := Convert_Newhy_Type( Get( slices, 8 ));
            rec.nemnjn := Convert_Nemnjn_Type( Get( slices, 9 ));
            rec.neyrjn := Convert( slices, 10, ( -9, -8, -2, -1 ) );
            rec.lvwhy := Convert_Lvwhy_Type( Get( slices, 11 ));
            rec.lvmn := Convert_Lvmn_Type( Get( slices, 12 ));
            rec.lvyr := Convert( slices, 13, ( -9, -8, -2, -1 ) );
            rec.lvloc := Convert_Lvloc_Type( Get( slices, 14 ));
            rec.ivfio := Convert_Ivfio_Type( Get( slices, 15 ));
            rec.ivrref := Convert_Ivrref_Type( Get( slices, 16 ));
            rec.ivireis := Convert_Ivireis_Type( Get( slices, 17 ));
            rec.finloc := Convert_Finloc_Type( Get( slices, 18 ));
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 19 ));
            rec.sampst := Convert_Sampst_Type( Get( slices, 20 ));
            rec.movest := Convert_Movest_Type( Get( slices, 21 ));
            rec.lewght := Convert( slices, 22, ( -9.0, -8.0, -1.0 ) );
            rec.lrwght := Convert( slices, 23, ( -9.0, -8.0, -1.0 ) );
            rec.neyrjn4 := Convert( slices, 24, ( -9, -8, -7, -2, -1 ) );
            rec.lvyr4 := Convert( slices, 25, ( -9, -8, -7, -2, -1 ) );
            rec.distmov := Convert( slices, 26, ( -9.0, -8.0 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Indsamp_component ).start_pos = 0 ) then
               index.pointers( Indsamp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Indsamp_component ).counter := index.pointers( Indsamp_component ).counter + 1;
            Put_Index( index_map, index );
            Indsamp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Indsamp_IO.Close( bin_file );
   end Create_Indsamp_Wave_D;




   procedure Create_Jobhist_Wave_D( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Jobhist_IO.File_Type;
      rec         : Jobhist_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Jobhist_IO.Create (bin_file, Jobhist_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.jhstat := Convert_Jhstat_Type( Get( slices, 3 ));
            rec.jhbgd := Convert( slices, 4, ( -9, -8, -7, -2, -1 ) );
            rec.jhbgm := Convert_Jbbgm1_Type( Get( slices, 5 ));
            rec.jhbgy := Convert( slices, 6, ( -9, -8, -2, -1 ) );
            rec.jspno := Convert( slices, 7 );
            rec.jhsoc := Convert( slices, 8, ( -9, -8, -2, -1 ) );
            rec.jhsemp := Convert_Jhsemp_Type( Get( slices, 9 ));
            rec.jhboss := Convert_Bscon_Type( Get( slices, 10 ));
            rec.jhsect := Convert_Jhsect_Type( Get( slices, 11 ));
            rec.jhmngr := Convert_Jhmngr_Type( Get( slices, 12 ));
            rec.jhpldf := Convert_Jhpldf_Type( Get( slices, 13 ));
            rec.jhsic := Convert( slices, 14, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.jhsize := Convert_Jhsize_Type( Get( slices, 15 ));
            rec.jhpayl := Convert( slices, 16, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhpylw := Convert( slices, 17, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.jhpylg := Convert_Jhpylg_Type( Get( slices, 18 ));
            rec.jhstpy := Convert_Jhstpy_Type( Get( slices, 19 ));
            rec.jblky := Convert_Jblky_Type( Get( slices, 20 ));
            rec.jhendd := Convert( slices, 21, ( -9, -8, -7, -2, -1 ) );
            rec.jhendm := Convert_Jbbgm1_Type( Get( slices, 22 ));
            rec.jhendy := Convert( slices, 23, ( -9, -8, -2, -1 ) );
            rec.jha9ly := Convert_Jha9ly_Type( Get( slices, 24 ));
            rec.jhseg := Convert_Jhseg_Type( Get( slices, 25 ));
            rec.jhgold := Convert( slices, 26, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhrgsc := Convert_Jhrgsc_Type( Get( slices, 27 ));
            rec.jhisco := Convert( slices, 28, ( -9, -8 ) );
            rec.jhcssm := Convert( slices, 29, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhcssf := Convert( slices, 30, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhhgs := Convert( slices, 31, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhsec := Convert_Jhsec_Type( Get( slices, 32 ));
            rec.jhspw := Convert( slices, 33, ( -9.0, -8.0 ) );
            rec.jhgpay := Convert( slices, 34, ( -9.0, -8.0, -7.0 ) );
            rec.jhnpay := Convert( slices, 35, ( -9.0, -8.0, -7.0, -1.0 ) );
            rec.jhgpayi := Convert_Jhgpayi_Type( Get( slices, 36 ));
            rec.jhnpayi := Convert_Jhgpayi_Type( Get( slices, 37 ));
            rec.jhbgy4 := Convert( slices, 38, ( -9, -8, -7, -2, -1 ) );
            rec.jhendy4 := Convert( slices, 39, ( -9, -8, -7, -2, -1 ) );
            rec.pid := Convert( slices, 40 );
            rec.jhiscon := Convert( slices, 41, ( -9, -8, -7, -2, -1 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Jobhist_component ).start_pos = 0 ) then
               index.pointers( Jobhist_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Jobhist_component ).counter := index.pointers( Jobhist_component ).counter + 1;
            Put_Index( index_map, index );
            Jobhist_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Jobhist_IO.Close( bin_file );
   end Create_Jobhist_Wave_D;




   procedure Create_Youth_Wave_D( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Youth_IO.File_Type;
      rec         : Youth_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Youth_IO.Create (bin_file, Youth_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.pno := Convert( slices, 1 );
            rec.ypdobm := Convert_Ypdobm_Type( Get( slices, 2 ));
            rec.ypdoby := Convert( slices, 3, ( -9, -8, -2, -1 ) );
            rec.ypsex := Convert_Ypsex_Type( Get( slices, 4 ));
            rec.ypntv := Convert_Ypntv_Type( Get( slices, 5 ));
            rec.ytvhrs := Convert_Ytvhrs_Type( Get( slices, 6 ));
            rec.ytvlmt := Convert_Ytvlmt_Type( Get( slices, 7 ));
            rec.ytvstp := Convert_Ytvlmt_Type( Get( slices, 8 ));
            rec.ypcomp := Convert_Ypcomp_Type( Get( slices, 9 ));
            rec.yppals := Convert_Yppalo_Type( Get( slices, 10 ));
            rec.yputel := Convert_Yputel_Type( Get( slices, 11 ));
            rec.yptell := Convert_Yptell_Type( Get( slices, 12 ));
            rec.yplate := Convert_Yplate_Type( Get( slices, 13 ));
            rec.ypargm := Convert_Ypargm_Type( Get( slices, 14 ));
            rec.ypargf := Convert_Ypargf_Type( Get( slices, 15 ));
            rec.yptlkm := Convert_Ypargm_Type( Get( slices, 16 ));
            rec.yptlkf := Convert_Ypargf_Type( Get( slices, 17 ));
            rec.ypnpal := Convert( slices, 18, ( -9, -8, -2, -1 ) );
            rec.ypfght := Convert_Ypfght_Type( Get( slices, 19 ));
            rec.ypasmk := Convert( slices, 20, ( -9, -2, -1 ) );
            rec.ypeatn := Convert_Ypeatn_Type( Get( slices, 21 ));
            rec.ypmenu := Convert_Ypmenu_Type( Get( slices, 22 ));
            rec.ypthhc := Convert_Ypthhc_Type( Get( slices, 23 ));
            rec.ypshhc := Convert_Ypshhc_Type( Get( slices, 24 ));
            rec.yppkml := Convert( slices, 25, ( -9, -2, -1 ) );
            rec.yppkmp := Convert( slices, 26, ( -9, -2, -1 ) );
            rec.ypstm := Convert_Ypbunk_Type( Get( slices, 27 ));
            rec.ypswr := Convert_Ypbunk_Type( Get( slices, 28 ));
            rec.ypsmok := Convert_Ypbunk_Type( Get( slices, 29 ));
            rec.yplie := Convert_Ypbunk_Type( Get( slices, 30 ));
            rec.ypdrug := Convert_Ypbunk_Type( Get( slices, 31 ));
            rec.ypbunk := Convert_Ypbunk_Type( Get( slices, 32 ));
            rec.ypser := Convert_Ypser_Type( Get( slices, 33 ));
            rec.ypsmev := Convert_Ypbeau_Type( Get( slices, 34 ));
            rec.ypsmag := Convert( slices, 35, ( -9, -8, -2, -1 ) );
            rec.ypsmof := Convert_Ypsmof_Type( Get( slices, 36 ));
            rec.ypsmlw := Convert( slices, 37, ( -9, -8, -2, -1 ) );
            rec.ypsmyr := Convert( slices, 38, ( -9, -8, -2, -1 ) );
            rec.ypsmop := Convert_Ypsmop_Type( Get( slices, 39 ));
            rec.ypdgsc := Convert_Ypbeau_Type( Get( slices, 40 ));
            rec.ypdgpa := Convert_Ypbeau_Type( Get( slices, 41 ));
            rec.ypdgfr := Convert_Ypdgfr_Type( Get( slices, 42 ));
            rec.ypdgyr := Convert_Ypbeau_Type( Get( slices, 43 ));
            rec.ypopha := Convert_Ypopfj_Type( Get( slices, 44 ));
            rec.ypophb := Convert_Ypopfj_Type( Get( slices, 45 ));
            rec.ypophc := Convert_Ypopfj_Type( Get( slices, 46 ));
            rec.ypopfj := Convert_Ypopfj_Type( Get( slices, 47 ));
            rec.ypopfl := Convert_Ypopfj_Type( Get( slices, 48 ));
            rec.ypopfm := Convert_Ypopfj_Type( Get( slices, 49 ));
            rec.ypopfn := Convert_Ypopfj_Type( Get( slices, 50 ));
            rec.ypsad := Convert_Ypsad_Type( Get( slices, 51 ));
            rec.ypwor := Convert_Ypwor_Type( Get( slices, 52 ));
            rec.ypesta := Convert_Ypesta_Type( Get( slices, 53 ));
            rec.ypestb := Convert_Ypesta_Type( Get( slices, 54 ));
            rec.ypestc := Convert_Ypesta_Type( Get( slices, 55 ));
            rec.ypestd := Convert_Ypesta_Type( Get( slices, 56 ));
            rec.ypeste := Convert_Ypesta_Type( Get( slices, 57 ));
            rec.ypestf := Convert_Ypesta_Type( Get( slices, 58 ));
            rec.ypestg := Convert_Ypesta_Type( Get( slices, 59 ));
            rec.yphsw := Convert_Yphap_Type( Get( slices, 60 ));
            rec.yphap := Convert_Yphap_Type( Get( slices, 61 ));
            rec.yphfm := Convert_Yphap_Type( Get( slices, 62 ));
            rec.yphfr := Convert_Yphap_Type( Get( slices, 63 ));
            rec.yphlf := Convert_Yphap_Type( Get( slices, 64 ));
            rec.ypcoma := Convert_Ypcoma_Type( Get( slices, 65 ));
            rec.ypcomb := Convert_Ypcomb_Type( Get( slices, 66 ));
            rec.ypcomc := Convert_Ypcomc_Type( Get( slices, 67 ));
            rec.ypcomd := Convert_Ypcomd_Type( Get( slices, 68 ));
            rec.ypcome := Convert_Ypcome_Type( Get( slices, 69 ));
            rec.ypcomf := Convert_Ypcomf_Type( Get( slices, 70 ));
            rec.ypcomg := Convert_Ypcomg_Type( Get( slices, 71 ));
            rec.ypnbks := Convert( slices, 72, ( -9, -8, -2, -1 ) );
            rec.ypvte6 := Convert_Ypvte6_Type( Get( slices, 73 ));
            rec.ypvte3 := Convert_Ypvte3_Type( Get( slices, 74 ));
            rec.yplvsc := Convert_Yplvsc_Type( Get( slices, 75 ));
            rec.yplvhm := Convert( slices, 76, ( -9, -8, -2, -1 ) );
            rec.ypamar := Convert( slices, 77, ( -9, -8, -2, -1 ) );
            rec.ypapar := Convert( slices, 78, ( -9, -8, -2, -1 ) );
            rec.ypwhrs := Convert( slices, 79, ( -9, -8, -2, -1 ) );
            rec.yppay := Convert( slices, 80, ( -9, -8, -2, -1 ) );
            rec.ypfjob := Convert_Ypfjob_Type( Get( slices, 81 ));
            rec.ypfsoc := Convert( slices, 82, ( -9.0, -8.0, -7.0, -1.0 ) );
            rec.ypsoc := Convert( slices, 83, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.ypjbqa := Convert_Ypjbqa_Type( Get( slices, 84 ));
            rec.ypjbqb := Convert_Ypjbqa_Type( Get( slices, 85 ));
            rec.ypjbqc := Convert_Ypjbqa_Type( Get( slices, 86 ));
            rec.ypjbqd := Convert_Ypjbqa_Type( Get( slices, 87 ));
            rec.ypjbqe := Convert_Ypjbqa_Type( Get( slices, 88 ));
            rec.ypjbqt := Convert_Ypjbqt_Type( Get( slices, 89 ));
            rec.ypevnt1 := Convert( slices, 90, ( -9, -8, -2, -1 ) );
            rec.ypevnt2 := Convert( slices, 91, ( -9, -8, -2, -1 ) );
            rec.ypevnt3 := Convert( slices, 92, ( -9, -8, -2, -1 ) );
            rec.ypevnt4 := Convert( slices, 93, ( -9, -8, -2, -1 ) );
            rec.ypwght := Convert( slices, 94 );
            rec.hid := Convert( slices, 95 );
            rec.ypdoby4 := Convert( slices, 96, ( -9, -8, -7, -2, -1 ) );
            rec.pid := Convert( slices, 97 );
            rec.fnspno := Convert( slices, 98, ( -9, -8 ) );
            rec.fnspid := Convert( slices, 99, ( -9.0, -8.0 ) );
            rec.mnspno := Convert( slices, 100, ( -9, -8 ) );
            rec.mnspid := Convert( slices, 101, ( -9.0, -8.0 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Youth_component ).start_pos = 0 ) then
               index.pointers( Youth_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Youth_component ).counter := index.pointers( Youth_component ).counter + 1;
            Put_Index( index_map, index );
            Youth_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Youth_IO.Close( bin_file );
   end Create_Youth_Wave_D;




   procedure Create_Egoalt_Wave_E( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Egoalt_IO.File_Type;
      rec         : Egoalt_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Egoalt_IO.Create (bin_file, Egoalt_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.opno := Convert( slices, 3, (  1 .. 0 => -9 ) );
            rec.rel := Convert_Rel_Type( Get( slices, 4 ));
            rec.sex := Convert_Sex_Type( Get( slices, 5 ));
            rec.osex := Convert_Hgsex_Type( Get( slices, 6 ));
            rec.lwstat := Convert_Lwstat_Type( Get( slices, 7 ));
            rec.nwstat := Convert_Nwstat_Type( Get( slices, 8 ));
            rec.pid := Convert( slices, 9 );
            rec.opid := Convert( slices, 10 );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Egoalt_component ).start_pos = 0 ) then
               index.pointers( Egoalt_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Egoalt_component ).counter := index.pointers( Egoalt_component ).counter + 1;
            Put_Index( index_map, index );
            Egoalt_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Egoalt_IO.Close( bin_file );
   end Create_Egoalt_Wave_E;




   procedure Create_Hhresp_Wave_E( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Hhresp_IO.File_Type;
      rec         : Hhresp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Hhresp_IO.Create (bin_file, Hhresp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.hhdoi := Convert( slices, 2, ( -9, -8, -7 ) );
            rec.hhmoi := Convert_Doim_Type( Get( slices, 3 ));
            rec.hhyoi := Convert( slices, 4, ( -9, -8, -7 ) );
            rec.hstype := Convert_Hstype_Type( Get( slices, 5 ));
            rec.hsrins := Convert_Cjsck2_Type( Get( slices, 6 ));
            rec.hsroom := Convert( slices, 7, ( -9, -8, -7, -2, -1 ) );
            rec.hsownd := Convert_Hsownd_Type( Get( slices, 8 ));
            rec.hsowr1 := Convert( slices, 9, ( -9, -8, -7, -2, -1 ) );
            rec.hsowr2 := Convert( slices, 10, ( -9, -8, -7, -2, -1 ) );
            rec.mghave := Convert_Mghave_Type( Get( slices, 11 ));
            rec.hsowrp := Convert_Bscon_Type( Get( slices, 12 ));
            rec.mgynot := Convert_Mgynot_Type( Get( slices, 13 ));
            rec.hscost := Convert( slices, 14, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.mgly := Convert_Bscon_Type( Get( slices, 15 ));
            rec.hsivw4 := Convert( slices, 16, ( -9, -8, -7, -2, -1 ) );
            rec.mgxtra := Convert_Bscon_Type( Get( slices, 17 ));
            rec.mgnew := Convert( slices, 18, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.mgxty1 := Convert_Mgxty1_Type( Get( slices, 19 ));
            rec.mgxty2 := Convert_Mgxty2_Type( Get( slices, 20 ));
            rec.mgxty3 := Convert_Mgxty3_Type( Get( slices, 21 ));
            rec.mgxty4 := Convert_Mgxty4_Type( Get( slices, 22 ));
            rec.mgxty5 := Convert_Mgxty5_Type( Get( slices, 23 ));
            rec.mgold := Convert( slices, 24, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.mglife := Convert( slices, 25, ( -9, -8, -7, -2, -1 ) );
            rec.mgtype := Convert_Mgtype_Type( Get( slices, 26 ));
            rec.xpmg := Convert( slices, 27, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.xpmg1 := Convert_Bscon_Type( Get( slices, 28 ));
            rec.xpmg2 := Convert_Bscon_Type( Get( slices, 29 ));
            rec.xpmg3 := Convert_Bscon_Type( Get( slices, 30 ));
            rec.xpmg4 := Convert_Bscon_Type( Get( slices, 31 ));
            rec.mgyr0 := Convert( slices, 32, ( -9, -8, -7, -2, -1 ) );
            rec.hsyr0 := Convert( slices, 33, ( -9, -8, -7, -1 ) );
            rec.hsval := Convert( slices, 34, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.hsjb := Convert_Bscon_Type( Get( slices, 35 ));
            rec.rentp1 := Convert( slices, 36, ( -9, -8, -7, -2, -1 ) );
            rec.rentp2 := Convert( slices, 37, ( -9, -8, -7, -2, -1 ) );
            rec.rentll := Convert_Rentll_Type( Get( slices, 38 ));
            rec.rentf := Convert_Rentf_Type( Get( slices, 39 ));
            rec.rent := Convert( slices, 40, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.rentw := Convert( slices, 41, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.rent1 := Convert_Rent1_Type( Get( slices, 42 ));
            rec.rent2 := Convert_Rent1_Type( Get( slices, 43 ));
            rec.rent3 := Convert_Bscon_Type( Get( slices, 44 ));
            rec.rent4 := Convert_Bscon_Type( Get( slices, 45 ));
            rec.rent5 := Convert_Bscon_Type( Get( slices, 46 ));
            rec.rent6 := Convert_Bscon_Type( Get( slices, 47 ));
            rec.rent7 := Convert_Rent7_Type( Get( slices, 48 ));
            rec.rent8 := Convert_Coh1mr_Type( Get( slices, 49 ));
            rec.renthb := Convert_Renthb_Type( Get( slices, 50 ));
            rec.rentg := Convert( slices, 51, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.rentgw := Convert( slices, 52, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.xphsdf := Convert( slices, 53, ( -9, -8, -7, -2, -1 ) );
            rec.xphsd1 := Convert_Bscon_Type( Get( slices, 54 ));
            rec.xphsd2 := Convert_Bscon_Type( Get( slices, 55 ));
            rec.xphsdb := Convert_Bscon_Type( Get( slices, 56 ));
            rec.hs2ownd := Convert_Bscon_Type( Get( slices, 57 ));
            rec.hs2val := Convert_Hs2val_Type( Get( slices, 58 ));
            rec.mgtot := Convert( slices, 59, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.cdhave := Convert_Bscon_Type( Get( slices, 60 ));
            rec.cdbght := Convert_Bscon_Type( Get( slices, 61 ));
            rec.cd1use := Convert_Cd1new_Type( Get( slices, 62 ));
            rec.cd1new := Convert( slices, 63, ( -9, -8, -7, -2, -1 ) );
            rec.cd2use := Convert_Cd1new_Type( Get( slices, 64 ));
            rec.cd2new := Convert( slices, 65, ( -9, -8, -7, -2, -1 ) );
            rec.cd3use := Convert_Cd1new_Type( Get( slices, 66 ));
            rec.cd3new := Convert( slices, 67, ( -9, -8, -7, -2, -1 ) );
            rec.cd4use := Convert_Cd1new_Type( Get( slices, 68 ));
            rec.cd4new := Convert( slices, 69, ( -9, -8, -7, -2, -1 ) );
            rec.cd5use := Convert_Cd1new_Type( Get( slices, 70 ));
            rec.cd5new := Convert( slices, 71, ( -9, -8, -7, -2, -1 ) );
            rec.cd6use := Convert_Cd1new_Type( Get( slices, 72 ));
            rec.cd6new := Convert( slices, 73, ( -9, -8, -7, -2, -1 ) );
            rec.cd7use := Convert_Cd1new_Type( Get( slices, 74 ));
            rec.cd7new := Convert( slices, 75, ( -9, -8, -7, -2, -1 ) );
            rec.cd8use := Convert_Cd1new_Type( Get( slices, 76 ));
            rec.cd8new := Convert( slices, 77, ( -9, -8, -7, -2, -1 ) );
            rec.cd9use := Convert_Cd1new_Type( Get( slices, 78 ));
            rec.cd9new := Convert( slices, 79, ( -9, -8, -7, -2, -1 ) );
            rec.cdnuxp := Convert( slices, 80, ( -9, -8, -7, -2, -1 ) );
            rec.hsip := Convert( slices, 81, ( -9, -8, -7, -2, -1 ) );
            rec.hsipxp := Convert( slices, 82, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.heatch := Convert_Bscon_Type( Get( slices, 83 ));
            rec.heatyp := Convert_Heatyp_Type( Get( slices, 84 ));
            rec.xpoily := Convert( slices, 85, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.gasuse := Convert_Bscon_Type( Get( slices, 86 ));
            rec.gasway := Convert_Gasway_Type( Get( slices, 87 ));
            rec.xpgasl := Convert( slices, 88, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.xpgasw := Convert( slices, 89, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.xpgaslw := Convert( slices, 90, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.lecway := Convert_Gasway_Type( Get( slices, 91 ));
            rec.xplecl := Convert( slices, 92, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.xplecw := Convert( slices, 93, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.xpleclw := Convert( slices, 94, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.xpbldf := Convert_Xpbldf_Type( Get( slices, 95 ));
            rec.xphp := Convert_Bscon_Type( Get( slices, 96 ));
            rec.xphpdf := Convert_Xphpdf_Type( Get( slices, 97 ));
            rec.xpfood := Convert( slices, 98, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ncars := Convert_Ncars_Type( Get( slices, 99 ));
            rec.carown := Convert_Carown_Type( Get( slices, 100 ));
            rec.carval := Convert( slices, 101, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ivh1 := Convert( slices, 102, ( -9, -8, -7, -1 ) );
            rec.ivh2 := Convert( slices, 103, ( -9, -8, -7 ) );
            rec.ivh3 := Convert( slices, 104, ( -9, -8, -7 ) );
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 105 ));
            rec.hhdc := Convert_Hhdc_Type( Get( slices, 106 ));
            rec.xhwght := Convert( slices, 107, ( -9.0, -8.0 ) );
            rec.hhsize := Convert( slices, 108, ( -9, -8 ) );
            rec.hhtype := Convert_Hhtype_Type( Get( slices, 109 ));
            rec.region := Convert_Region_Type( Get( slices, 110 ));
            rec.nch02 := Convert( slices, 111, ( -9, -8 ) );
            rec.nch34 := Convert( slices, 112, ( -9, -8 ) );
            rec.nch511 := Convert( slices, 113, ( -9, -8 ) );
            rec.nch1215 := Convert( slices, 114, ( -9, -8 ) );
            rec.nch1618 := Convert( slices, 115, ( -9, -8 ) );
            rec.nkids := Convert( slices, 116, ( -9, -8 ) );
            rec.nwed := Convert( slices, 117, ( -9, -8 ) );
            rec.npens := Convert( slices, 118, ( -9, -8 ) );
            rec.na75pl := Convert( slices, 119, ( -9, -8 ) );
            rec.agechy := Convert( slices, 120, ( -9, -8 ) );
            rec.ncouple := Convert( slices, 121, ( -9, -8 ) );
            rec.nonepar := Convert( slices, 122, ( -9, -8 ) );
            rec.nemp := Convert( slices, 123, ( -9, -8 ) );
            rec.nwage := Convert( slices, 124, ( -9, -8 ) );
            rec.tenure := Convert_Tenure_Type( Get( slices, 125 ));
            rec.xphsn := Convert( slices, 126, ( -9.0, -8.0, -7.0 ) );
            rec.xphsg := Convert( slices, 127, ( -9.0, -8.0, -7.0 ) );
            rec.xpoil := Convert( slices, 128, ( -9.0, -8.0, -7.0 ) );
            rec.xpgas := Convert( slices, 129, ( -9.0, -8.0, -7.0 ) );
            rec.xplec := Convert( slices, 130, ( -9.0, -8.0, -7.0 ) );
            rec.xpfuel := Convert( slices, 131, ( -9.0, -8.0, -7.0 ) );
            rec.fieqfcb := Convert( slices, 132, ( -9.0, -8.0 ) );
            rec.fieqfca := Convert( slices, 133, ( -9.0, -8.0 ) );
            rec.fihhyr := Convert( slices, 134, ( -9.0, -8.0, -7.0 ) );
            rec.fihhmn := Convert( slices, 135, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyl := Convert( slices, 136, ( -9.0, -8.0, -7.0 ) );
            rec.fihhynl := Convert( slices, 137, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyp := Convert( slices, 138, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyb := Convert( slices, 139, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyt := Convert( slices, 140, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyi := Convert( slices, 141, ( -9.0, -8.0, -7.0 ) );
            rec.fihhml := Convert( slices, 142, (  1 .. 0 => -9.0 ) );
            rec.fihhmnl := Convert( slices, 143, (  1 .. 0 => -9.0 ) );
            rec.fihhmp := Convert( slices, 144, (  1 .. 0 => -9.0 ) );
            rec.fihhmb := Convert( slices, 145, (  1 .. 0 => -9.0 ) );
            rec.fihhmt := Convert( slices, 146, (  1 .. 0 => -9.0 ) );
            rec.fihhmi := Convert( slices, 147, (  1 .. 0 => -9.0 ) );
            rec.hhmove := Convert_Hhmove_Type( Get( slices, 148 ));
            rec.mgnewi := Convert( slices, 149, ( -9, -8, -7, -2, -1 ) );
            rec.xpmgi := Convert( slices, 150, ( -9, -8, -7, -2, -1 ) );
            rec.hsvali := Convert( slices, 151, ( -9, -8, -7, -2, -1 ) );
            rec.renti := Convert( slices, 152, ( -9, -8, -7, -4, -3, -2, -1 ) );
            rec.rentgi := Convert( slices, 153, ( -9, -8, -7, -2, -1 ) );
            rec.xphsni := Convert_Jhgpayi_Type( Get( slices, 154 ));
            rec.xphsgi := Convert_Jhgpayi_Type( Get( slices, 155 ));
            rec.fihhmni := Convert_Fihhmni_Type( Get( slices, 156 ));
            rec.fihhmli := Convert_Fihhmbi_Type( Get( slices, 157 ));
            rec.fihmnli := Convert_Fihhmbi_Type( Get( slices, 158 ));
            rec.fihhmpi := Convert_Fihhmbi_Type( Get( slices, 159 ));
            rec.fihhmbi := Convert_Fihhmbi_Type( Get( slices, 160 ));
            rec.fihhmti := Convert_Fihhmbi_Type( Get( slices, 161 ));
            rec.fihhmii := Convert_Fihhmbi_Type( Get( slices, 162 ));
            rec.fihhyri := Convert_Fihhmbi_Type( Get( slices, 163 ));
            rec.fihhyli := Convert_Fihhmbi_Type( Get( slices, 164 ));
            rec.fihhyni := Convert_Fihhmbi_Type( Get( slices, 165 ));
            rec.fihhypi := Convert_Fihhmbi_Type( Get( slices, 166 ));
            rec.fihhybi := Convert_Fihhmbi_Type( Get( slices, 167 ));
            rec.fihhyti := Convert_Fihhmbi_Type( Get( slices, 168 ));
            rec.fihhyii := Convert_Fihhmbi_Type( Get( slices, 169 ));
            rec.hhyoi4 := Convert( slices, 170, ( -9, -8, -7, -2, -1 ) );
            rec.mgyr04 := Convert( slices, 171, ( -9, -8, -7, -2, -1 ) );
            rec.hsyr04 := Convert( slices, 172, ( -9, -8, -7, -2, -1 ) );
            rec.region2 := Convert_Region2_Type( Get( slices, 173 ));
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Hhresp_component ).start_pos = 0 ) then
               index.pointers( Hhresp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Hhresp_component ).counter := index.pointers( Hhresp_component ).counter + 1;
            Put_Index( index_map, index );
            Hhresp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Hhresp_IO.Close( bin_file );
   end Create_Hhresp_Wave_E;




   procedure Create_Hhsamp_Wave_E( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Hhsamp_IO.File_Type;
      rec         : Hhsamp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Hhsamp_IO.Create (bin_file, Hhsamp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.fid := Convert( slices, 2 );
            rec.ivnadd := Convert( slices, 3, ( -9.0, -8.0 ) );
            rec.ivia := Convert_Ivia_Type( Get( slices, 4 ));
--             rec.ivid := Convert( slices, 5 );
            rec.ivlnc := Convert( slices, 6, ( -9, -1 ) );
            rec.ivtnc := Convert( slices, 7, ( -9, -8, -1 ) );
            rec.iviam := Convert_Iviam_Type( Get( slices, 8 ));
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 9 ));
            rec.ivosmrh := Convert( slices, 10, ( -9, -8, -1 ) );
            rec.ivnsmrh := Convert( slices, 11, ( -9, -8, -1 ) );
            rec.ivrrefh := Convert_Ivrrefh_Type( Get( slices, 12 ));
            rec.ivisst := Convert_Ivisst_Type( Get( slices, 13 ));
            rec.ivconv := Convert_Ivconv_Type( Get( slices, 14 ));
            rec.ivreis := Convert_Ivreis_Type( Get( slices, 15 ));
            rec.hhdc := Convert_Hhdc_Type( Get( slices, 16 ));
            rec.xhwght := Convert( slices, 17, ( -9.0, -8.0, -1.0 ) );
            rec.region := Convert_Region_Type( Get( slices, 18 ));
            rec.hhmove := Convert_Hhmove_Type( Get( slices, 19 ));
            rec.ahid := Convert( slices, 20 );
            rec.strata := Convert( slices, 21, ( -9, -8, -1 ) );
            rec.psu := Convert( slices, 22, ( -9, -8, -1 ) );
            rec.region2 := Convert_Region2_Type( Get( slices, 23 ));
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Hhsamp_component ).start_pos = 0 ) then
               index.pointers( Hhsamp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Hhsamp_component ).counter := index.pointers( Hhsamp_component ).counter + 1;
            Put_Index( index_map, index );
            Hhsamp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Hhsamp_IO.Close( bin_file );
   end Create_Hhsamp_Wave_E;




   procedure Create_Income_Wave_E( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Income_IO.File_Type;
      rec         : Income_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Income_IO.Create (bin_file, Income_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.pno := Convert( slices, 1 );
            rec.ficode := Convert_Ficode_Type( Get( slices, 2 ));
            rec.nfr := Convert( slices, 3, (  1 .. 0 => -9 ) );
            rec.frall := Convert_Frall_Type( Get( slices, 4 ));
            rec.fr01 := Convert_Cd1own_Type( Get( slices, 5 ));
            rec.fr02 := Convert_Cd1own_Type( Get( slices, 6 ));
            rec.fr03 := Convert_Cd1own_Type( Get( slices, 7 ));
            rec.fr04 := Convert( slices, 8, ( -9, -8, -2, -1 ) );
            rec.fr05 := Convert_Cd1own_Type( Get( slices, 9 ));
            rec.fr06 := Convert_Cd1own_Type( Get( slices, 10 ));
            rec.fr07 := Convert_Cd1own_Type( Get( slices, 11 ));
            rec.fr08 := Convert_Cd1own_Type( Get( slices, 12 ));
            rec.fr09 := Convert_Cd1own_Type( Get( slices, 13 ));
            rec.fr10 := Convert_Cd1own_Type( Get( slices, 14 ));
            rec.fr11 := Convert_Cd1own_Type( Get( slices, 15 ));
            rec.fr12 := Convert_Cd1own_Type( Get( slices, 16 ));
            rec.fr13 := Convert_Cd1own_Type( Get( slices, 17 ));
            rec.fr14 := Convert_Cd1own_Type( Get( slices, 18 ));
            rec.fr15 := Convert_Cd1own_Type( Get( slices, 19 ));
            rec.fr16 := Convert_Cd1own_Type( Get( slices, 20 ));
            rec.fr17 := Convert_Cd1own_Type( Get( slices, 21 ));
            rec.frnow := Convert_Frnow_Type( Get( slices, 22 ));
            rec.frval := Convert( slices, 23, ( -9.0, -8.0, -3.0, -2.0, -1.0 ) );
            rec.frw := Convert( slices, 24, ( -9.0, -8.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.frjt := Convert_Frjt_Type( Get( slices, 25 ));
            rec.frjtpn := Convert( slices, 26, ( -9, -8, -2, -1 ) );
            rec.hid := Convert( slices, 27 );
            rec.fiseq := Convert( slices, 28 );
            rec.fim09l := Convert( slices, 29, ( -9.0, -8.0, -3.0 ) );
            rec.fim10l := Convert( slices, 30, ( -9.0, -8.0, -3.0 ) );
            rec.fim11l := Convert( slices, 31, ( -9.0, -8.0, -3.0 ) );
            rec.fim12l := Convert( slices, 32, ( -9.0, -8.0, -3.0 ) );
            rec.fim01t := Convert( slices, 33, ( -9.0, -8.0, -3.0 ) );
            rec.fim02t := Convert( slices, 34, ( -9.0, -8.0, -3.0 ) );
            rec.fim03t := Convert( slices, 35, ( -9.0, -8.0, -3.0 ) );
            rec.fim04t := Convert( slices, 36, ( -9.0, -8.0, -3.0 ) );
            rec.fim05t := Convert( slices, 37, ( -9.0, -8.0, -3.0 ) );
            rec.fim06t := Convert( slices, 38, ( -9.0, -8.0, -3.0 ) );
            rec.fim07t := Convert( slices, 39, ( -9.0, -8.0, -3.0 ) );
            rec.fim08t := Convert( slices, 40, ( -9.0, -8.0, -3.0 ) );
            rec.fim09t := Convert( slices, 41, ( -9.0, -8.0, -3.0 ) );
            rec.fim10t := Convert( slices, 42, ( -9.0, -8.0, -3.0 ) );
            rec.fim11t := Convert( slices, 43, ( -9.0, -8.0, -3.0 ) );
            rec.fim12t := Convert( slices, 44, ( -9.0, -8.0, -3.0 ) );
            rec.fim01n := Convert( slices, 45, ( -9.0, -8.0, -3.0 ) );
            rec.frjtvf := Convert_Frjtvf_Type( Get( slices, 46 ));
            rec.frvali := Convert( slices, 47, ( -9, -8, -3, -2, -1 ) );
            rec.pid := Convert( slices, 48 );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Income_component ).start_pos = 0 ) then
               index.pointers( Income_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Income_component ).counter := index.pointers( Income_component ).counter + 1;
            Put_Index( index_map, index );
            Income_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Income_IO.Close( bin_file );
   end Create_Income_Wave_E;




   procedure Create_Indall_Wave_E( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Indall_IO.File_Type;
      rec         : Indall_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Indall_IO.Create (bin_file, Indall_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.pid := Convert( slices, 3 );
            rec.iviow4 := Convert_Iviow4_Type( Get( slices, 4 ));
            rec.ivievr := Convert_Ivievr_Type( Get( slices, 5 ));
            rec.hhmem := Convert_Hhmem_Type( Get( slices, 6 ));
            rec.newhy := Convert_Newhy_Type( Get( slices, 7 ));
            rec.nemnjn := Convert_Nemnjn_Type( Get( slices, 8 ));
            rec.neyrjn := Convert( slices, 9, ( -9, -8, -2, -1 ) );
            rec.ivfio := Convert_Ivfio_Type( Get( slices, 10 ));
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 11 ));
            rec.iodc := Convert_Iodc_Type( Get( slices, 12 ));
            rec.hgr2r := Convert_Hgr2r_Type( Get( slices, 13 ));
            rec.hgsex := Convert_Hgsex_Type( Get( slices, 14 ));
            rec.hgbm := Convert_Hgbm_Type( Get( slices, 15 ));
            rec.hgby := Convert( slices, 16, ( -9, -8, -2, -1 ) );
            rec.mastat := Convert_Mastat_Type( Get( slices, 17 ));
            rec.hgspn := Convert( slices, 18, ( -9, -8, -2, -1 ) );
            rec.hgemp := Convert_Hgemp_Type( Get( slices, 19 ));
            rec.hgfno := Convert( slices, 20, ( -9, -8, -2, -1 ) );
            rec.hgmno := Convert( slices, 21, ( -9, -8, -2, -1 ) );
            rec.hgra := Convert( slices, 22, ( -9, -8, -2, -1 ) );
            rec.age := Convert( slices, 23, ( -9, -8, -2, -1 ) );
            rec.age12 := Convert( slices, 24, ( -9, -8, -2, -1 ) );
            rec.butype := Convert_Butype_Type( Get( slices, 25 ));
            rec.buno := Convert( slices, 26, ( -9, -8 ) );
            rec.nchild := Convert( slices, 27, ( -9, -8 ) );
            rec.depchl := Convert_Depchl_Type( Get( slices, 28 ));
            rec.hoh := Convert_Hoh_Type( Get( slices, 29 ));
            rec.rach16 := Convert_Hhch12_Type( Get( slices, 30 ));
            rec.agei := Convert_Agei_Type( Get( slices, 31 ));
            rec.lrwght := Convert( slices, 32, ( -9.0, -8.0 ) );
            rec.lewght := Convert( slices, 33, ( -9.0, -8.0 ) );
            rec.xrwght := Convert( slices, 34, ( -9.0, -8.0 ) );
            rec.xewght := Convert( slices, 35, ( -9.0, -8.0 ) );
            rec.movest := Convert_Movest_Type( Get( slices, 36 ));
            rec.sampst := Convert_Sampst_Type( Get( slices, 37 ));
            rec.neyrjn4 := Convert( slices, 38, ( -9, -8, -7, -2, -1 ) );
            rec.sppid := Convert( slices, 39 );
            rec.fpid := Convert( slices, 40 );
            rec.mpid := Convert( slices, 41 );
            rec.rapid := Convert( slices, 42 );
            rec.distmov := Convert( slices, 43, ( -9.0, -8.0 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Indall_component ).start_pos = 0 ) then
               index.pointers( Indall_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Indall_component ).counter := index.pointers( Indall_component ).counter + 1;
            Put_Index( index_map, index );
            Indall_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Indall_IO.Close( bin_file );
   end Create_Indall_Wave_E;




   procedure Create_Indresp_Wave_E( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Indresp_IO.File_Type;
      rec         : Indresp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Indresp_IO.Create (bin_file, Indresp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.doid := Convert( slices, 3, ( -9, -7 ) );
            rec.doim := Convert_Doim_Type( Get( slices, 4 ));
            rec.doiy := Convert( slices, 5, ( -9, -8 ) );
            rec.ivsoih := Convert( slices, 6, ( -9, -8 ) );
            rec.ivsoim := Convert( slices, 7, ( -9, -8 ) );
            rec.ivlyr := Convert( slices, 8, ( -9, -8, -7 ) );
            rec.ivievr := Convert_Ivievr_Type( Get( slices, 9 ));
            rec.lknbrd := Convert_Aidpl1_Type( Get( slices, 10 ));
            rec.lkmove := Convert_Lkmove_Type( Get( slices, 11 ));
            rec.lkmovy := Convert_Lkmovy_Type( Get( slices, 12 ));
            rec.plnew := Convert( slices, 13, ( -9, -8, -7, -2, -1 ) );
            rec.plnowm := Convert_Jbbgm1_Type( Get( slices, 14 ));
            rec.plnowy := Convert( slices, 15, ( -9, -8, -2, -1 ) );
            rec.movjb := Convert_Aidpl1_Type( Get( slices, 16 ));
            rec.movjba := Convert_Movjba_Type( Get( slices, 17 ));
            rec.movjbb := Convert_Movjba_Type( Get( slices, 18 ));
            rec.movjbc := Convert_Movjba_Type( Get( slices, 19 ));
            rec.movjbd := Convert_Movjba_Type( Get( slices, 20 ));
            rec.movjbe := Convert_Movjba_Type( Get( slices, 21 ));
            rec.movjbf := Convert_Movjba_Type( Get( slices, 22 ));
            rec.movjbg := Convert_Movjba_Type( Get( slices, 23 ));
            rec.movjbh := Convert_Movjba_Type( Get( slices, 24 ));
            rec.movjbi := Convert_Movjba_Type( Get( slices, 25 ));
            rec.movy1 := Convert_Movy1_Type( Get( slices, 26 ));
            rec.movy2 := Convert_Movy2_Type( Get( slices, 27 ));
            rec.dobm := Convert_Cjsem_Type( Get( slices, 28 ));
            rec.doby := Convert( slices, 29, ( -9, -8, -7, -2, -1 ) );
            rec.sex := Convert_Sex_Type( Get( slices, 30 ));
            rec.jbstat := Convert_Jbstat_Type( Get( slices, 31 ));
            rec.edlyr := Convert_Aidpl1_Type( Get( slices, 32 ));
            rec.edendm := Convert_Edendm_Type( Get( slices, 33 ));
            rec.edendy := Convert( slices, 34, ( -9, -8, -7, -3, -2, -1 ) );
            rec.edtype := Convert_Edtype_Type( Get( slices, 35 ));
            rec.qfx := Convert_Aidpl1_Type( Get( slices, 36 ));
            rec.qfxa := Convert_Qfa_Type( Get( slices, 37 ));
            rec.qfxb := Convert_Qfb_Type( Get( slices, 38 ));
            rec.qfxc := Convert_Qfc_Type( Get( slices, 39 ));
            rec.qfxd := Convert_Qfd_Type( Get( slices, 40 ));
            rec.qfxe := Convert_Qfe_Type( Get( slices, 41 ));
            rec.qfxf := Convert_Qff_Type( Get( slices, 42 ));
            rec.qfxg := Convert_Qfg_Type( Get( slices, 43 ));
            rec.qfxh := Convert_Qfh_Type( Get( slices, 44 ));
            rec.qfxi := Convert_Qfi_Type( Get( slices, 45 ));
            rec.qfxj := Convert_Qfj_Type( Get( slices, 46 ));
            rec.qfxk := Convert_Qfk_Type( Get( slices, 47 ));
            rec.qfxl := Convert_Qfl_Type( Get( slices, 48 ));
            rec.qfxm := Convert_Qfm_Type( Get( slices, 49 ));
            rec.qfxn := Convert_Qfn_Type( Get( slices, 50 ));
            rec.qfedx := Convert_Aidpl1_Type( Get( slices, 51 ));
            rec.qfedxa := Convert_Qfedd_Type( Get( slices, 52 ));
            rec.nqfexa := Convert( slices, 53, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxb := Convert_Qfede_Type( Get( slices, 54 ));
            rec.nqfexb := Convert( slices, 55, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxc := Convert_Qfedj_Type( Get( slices, 56 ));
            rec.nqfexc := Convert( slices, 57, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxd := Convert_Qfedxd_Type( Get( slices, 58 ));
            rec.qfedxe := Convert_Qfedk_Type( Get( slices, 59 ));
            rec.nqfexe := Convert( slices, 60, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxf := Convert_Qfedxf_Type( Get( slices, 61 ));
            rec.nqfexf := Convert( slices, 62, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxg := Convert_Qfedm_Type( Get( slices, 63 ));
            rec.nqfexg := Convert( slices, 64, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxh := Convert_Qfedxh_Type( Get( slices, 65 ));
            rec.nqfexh := Convert( slices, 66, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxi := Convert_Qfedo_Type( Get( slices, 67 ));
            rec.nqfexi := Convert( slices, 68, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxj := Convert( slices, 69, ( -9, -8, -7 ) );
            rec.nqfexj := Convert( slices, 70, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxk := Convert_Hlprbm_Type( Get( slices, 71 ));
            rec.nqfexk := Convert( slices, 72, ( -9, -8, -7, -2, -1 ) );
            rec.mlstat := Convert_Mlstat_Type( Get( slices, 73 ));
            rec.mlchng := Convert_Bscon_Type( Get( slices, 74 ));
            rec.mlchm := Convert_Mlchm_Type( Get( slices, 75 ));
            rec.mlchy := Convert( slices, 76, ( -9, -8, -2 ) );
            rec.plbornd := Convert_Plbornd_Type( Get( slices, 77 ));
            rec.plbornc := Convert_Plbornc_Type( Get( slices, 78 ));
            rec.yr2uk := Convert( slices, 79, ( -9, -8, -7, -2, -1 ) );
            rec.race := Convert_Race_Type( Get( slices, 80 ));
            rec.school := Convert_School_Type( Get( slices, 81 ));
            rec.scend := Convert( slices, 82, ( -9, -8, -7, -2, -1 ) );
            rec.sctype := Convert_Sctype_Type( Get( slices, 83 ));
            rec.scnow := Convert_Cjsck2_Type( Get( slices, 84 ));
            rec.fetype := Convert_Fetype_Type( Get( slices, 85 ));
            rec.fenow := Convert_Fenow_Type( Get( slices, 86 ));
            rec.feend := Convert( slices, 87, ( -9, -8, -7, -2, -1 ) );
            rec.qfhas := Convert_Bscon_Type( Get( slices, 88 ));
            rec.qfa := Convert_Qfa_Type( Get( slices, 89 ));
            rec.qfb := Convert_Qfb_Type( Get( slices, 90 ));
            rec.qfc := Convert_Qfc_Type( Get( slices, 91 ));
            rec.qfd := Convert_Qfd_Type( Get( slices, 92 ));
            rec.qfe := Convert_Qfe_Type( Get( slices, 93 ));
            rec.qff := Convert_Qff_Type( Get( slices, 94 ));
            rec.qfg := Convert_Qfg_Type( Get( slices, 95 ));
            rec.qfh := Convert_Qfh_Type( Get( slices, 96 ));
            rec.qfi := Convert_Qfi_Type( Get( slices, 97 ));
            rec.qfj := Convert_Qfj_Type( Get( slices, 98 ));
            rec.qfk := Convert_Qfk_Type( Get( slices, 99 ));
            rec.qfl := Convert_Qfl_Type( Get( slices, 100 ));
            rec.qfm := Convert_Qfm_Type( Get( slices, 101 ));
            rec.qfn := Convert_Qfn_Type( Get( slices, 102 ));
            rec.qfed := Convert_Bscon_Type( Get( slices, 103 ));
            rec.qfeda := Convert_Qfeda_Type( Get( slices, 104 ));
            rec.nqfeda := Convert( slices, 105, ( -9, -8, -7, -2, -1 ) );
            rec.qfedb := Convert_Qfedb_Type( Get( slices, 106 ));
            rec.nqfedb := Convert( slices, 107, ( -9, -8, -7, -2, -1 ) );
            rec.qfedc := Convert_Qfedc_Type( Get( slices, 108 ));
            rec.nqfedc := Convert( slices, 109, ( -9, -8, -7, -2, -1 ) );
            rec.qfedd := Convert_Qfedd_Type( Get( slices, 110 ));
            rec.nqfedd := Convert( slices, 111, ( -9, -8, -7, -2, -1 ) );
            rec.qfede := Convert_Qfede_Type( Get( slices, 112 ));
            rec.nqfede := Convert( slices, 113, ( -9, -8, -7, -2, -1 ) );
            rec.qfedf := Convert_Qfedf_Type( Get( slices, 114 ));
            rec.nqfedf := Convert( slices, 115, ( -9, -8, -7, -2, -1 ) );
            rec.qfedg := Convert_Qfedg_Type( Get( slices, 116 ));
            rec.nqfedg := Convert( slices, 117, ( -9, -8, -7, -2, -1 ) );
            rec.qfedh := Convert_Qfedh_Type( Get( slices, 118 ));
            rec.nqfedh := Convert( slices, 119, ( -9, -8, -7, -2, -1 ) );
            rec.qfedi := Convert_Qfedi_Type( Get( slices, 120 ));
            rec.nqfedi := Convert( slices, 121, ( -9, -8, -7, -2, -1 ) );
            rec.qfedj := Convert_Qfedj_Type( Get( slices, 122 ));
            rec.nqfedj := Convert( slices, 123, ( -9, -8, -7, -2, -1 ) );
            rec.qfedk := Convert_Qfedk_Type( Get( slices, 124 ));
            rec.nqfedk := Convert( slices, 125, ( -9, -8, -7, -2, -1 ) );
            rec.qfedl := Convert_Qfedl_Type( Get( slices, 126 ));
            rec.nqfedl := Convert( slices, 127, ( -9, -8, -7, -2, -1 ) );
            rec.qfedm := Convert_Qfedm_Type( Get( slices, 128 ));
            rec.nqfedm := Convert( slices, 129, ( -9, -8, -7, -2, -1 ) );
            rec.qfedn := Convert_Qfedn_Type( Get( slices, 130 ));
            rec.nqfedn := Convert( slices, 131, ( -9, -8, -7, -2, -1 ) );
            rec.qfedo := Convert_Qfedo_Type( Get( slices, 132 ));
            rec.nqfedo := Convert( slices, 133, ( -9, -8, -7, -2, -1 ) );
            rec.qfedp := Convert( slices, 134, ( -9, -8, -7 ) );
            rec.nqfedp := Convert( slices, 135, ( -9, -8, -7, -2, -1 ) );
            rec.qfedq := Convert_Qfedq_Type( Get( slices, 136 ));
            rec.nqfedq := Convert( slices, 137, ( -9, -8, -7, -2, -1 ) );
            rec.qfedr := Convert_Qfedr_Type( Get( slices, 138 ));
            rec.nqfedr := Convert( slices, 139, ( -9, -8, -7, -2, -1 ) );
            rec.qfeds := Convert_Hlprbm_Type( Get( slices, 140 ));
            rec.nqfeds := Convert( slices, 141, ( -9, -8, -7, -2, -1 ) );
            rec.hlstat := Convert_Hlstat_Type( Get( slices, 142 ));
            rec.hlzest := Convert_Hlzest_Type( Get( slices, 143 ));
            rec.hldsbl := Convert_Bscon_Type( Get( slices, 144 ));
            rec.hlprb := Convert( slices, 145, ( -9, -8, -7, -2, -1 ) );
            rec.hlprba := Convert_Hlprba_Type( Get( slices, 146 ));
            rec.hlprbb := Convert_Hlprbb_Type( Get( slices, 147 ));
            rec.hlprbc := Convert_Hlprbc_Type( Get( slices, 148 ));
            rec.hlprbd := Convert_Hlprbd_Type( Get( slices, 149 ));
            rec.hlprbe := Convert_Hlprbe_Type( Get( slices, 150 ));
            rec.hlprbf := Convert_Hlprbf_Type( Get( slices, 151 ));
            rec.hlprbg := Convert_Hlprbg_Type( Get( slices, 152 ));
            rec.hlprbh := Convert_Hlprbh_Type( Get( slices, 153 ));
            rec.hlprbi := Convert_Hlprbi_Type( Get( slices, 154 ));
            rec.hlprbj := Convert_Hlprbj_Type( Get( slices, 155 ));
            rec.hlprbk := Convert_Hlprbk_Type( Get( slices, 156 ));
            rec.hlprbl := Convert_Hlprbl_Type( Get( slices, 157 ));
            rec.hlprbm := Convert_Hlprbm_Type( Get( slices, 158 ));
            rec.hllt := Convert_Bscon_Type( Get( slices, 159 ));
            rec.hllta := Convert_Hllta_Type( Get( slices, 160 ));
            rec.hlltb := Convert_Hlltb_Type( Get( slices, 161 ));
            rec.hlltc := Convert_Hlltc_Type( Get( slices, 162 ));
            rec.hlltd := Convert_Hlltd_Type( Get( slices, 163 ));
            rec.hllte := Convert_Hllte_Type( Get( slices, 164 ));
            rec.hlltw := Convert_Bscon_Type( Get( slices, 165 ));
            rec.hlendw := Convert_Hlendw_Type( Get( slices, 166 ));
            rec.hlltwa := Convert_Hlltwa_Type( Get( slices, 167 ));
            rec.hl2gp := Convert_Hl2gp_Type( Get( slices, 168 ));
            rec.xdts := Convert_Bscon_Type( Get( slices, 169 ));
            rec.nxdts := Convert_Nxdts_Type( Get( slices, 170 ));
            rec.xdt1m := Convert_Xdt1m_Type( Get( slices, 171 ));
            rec.xdt2m := Convert_Xdt2m_Type( Get( slices, 172 ));
            rec.xdt3m := Convert_Xdt2m_Type( Get( slices, 173 ));
            rec.xdt1y := Convert( slices, 174, ( -9, -8, -7, -2, -1 ) );
            rec.xdt2y := Convert( slices, 175, ( -9, -8, -7, -2, -1 ) );
            rec.xdt3y := Convert( slices, 176, ( -9, -8, -7, -2, -1 ) );
            rec.xdt1pl := Convert_Xdt1pl_Type( Get( slices, 177 ));
            rec.xdt2pl := Convert_Xdt1pl_Type( Get( slices, 178 ));
            rec.xdt3pl := Convert_Xdt1pl_Type( Get( slices, 179 ));
            rec.hosp := Convert_Hlsv_Type( Get( slices, 180 ));
            rec.hospd := Convert( slices, 181, ( -9, -8, -7, -2, -1 ) );
            rec.hospch := Convert_Hospch_Type( Get( slices, 182 ));
            rec.hospnhs := Convert_Hospnhs_Type( Get( slices, 183 ));
            rec.hlsv := Convert_Hlsv_Type( Get( slices, 184 ));
            rec.hlsva := Convert_Hlsva_Type( Get( slices, 185 ));
            rec.hlsvan := Convert_Hlsvan_Type( Get( slices, 186 ));
            rec.hlsvaf := Convert_Hlsvaf_Type( Get( slices, 187 ));
            rec.hlsvb := Convert_Hlsvb_Type( Get( slices, 188 ));
            rec.hlsvbn := Convert_Hlsvan_Type( Get( slices, 189 ));
            rec.hlsvbf := Convert_Hlsvaf_Type( Get( slices, 190 ));
            rec.hlsvc := Convert_Hlsvc_Type( Get( slices, 191 ));
            rec.hlsvcn := Convert_Hlsvan_Type( Get( slices, 192 ));
            rec.hlsvcf := Convert_Hlsvaf_Type( Get( slices, 193 ));
            rec.hlsvd := Convert_Hlsvd_Type( Get( slices, 194 ));
            rec.hlsvdn := Convert_Hlsvan_Type( Get( slices, 195 ));
            rec.hlsvdf := Convert_Hlsvaf_Type( Get( slices, 196 ));
            rec.hlsve := Convert_Hlsve_Type( Get( slices, 197 ));
            rec.hlsven := Convert_Hlsvan_Type( Get( slices, 198 ));
            rec.hlsvef := Convert_Hlsvaf_Type( Get( slices, 199 ));
            rec.hlsvf := Convert_Hlsvf_Type( Get( slices, 200 ));
            rec.hlsvfn := Convert_Hlsvan_Type( Get( slices, 201 ));
            rec.hlsvff := Convert_Hlsvaf_Type( Get( slices, 202 ));
            rec.hlsvg := Convert_Hlsvg_Type( Get( slices, 203 ));
            rec.hlsvgn := Convert_Hlsvan_Type( Get( slices, 204 ));
            rec.hlsvgf := Convert_Hlsvaf_Type( Get( slices, 205 ));
            rec.hlsvh := Convert_Hlsvh_Type( Get( slices, 206 ));
            rec.hlsvhn := Convert_Hlsvan_Type( Get( slices, 207 ));
            rec.hlsvhf := Convert_Hlsvaf_Type( Get( slices, 208 ));
            rec.hlsvi := Convert_Hlsvi_Type( Get( slices, 209 ));
            rec.hlsvin := Convert_Hlsvan_Type( Get( slices, 210 ));
            rec.hlsvif := Convert_Hlsvaf_Type( Get( slices, 211 ));
            rec.hlsvj := Convert_Hlsvj_Type( Get( slices, 212 ));
            rec.hlsvjn := Convert_Hlsvan_Type( Get( slices, 213 ));
            rec.hlsvjf := Convert_Hlsvaf_Type( Get( slices, 214 ));
            rec.hlsvk := Convert_Hlsvk_Type( Get( slices, 215 ));
            rec.hlsvkn := Convert_Hlsvan_Type( Get( slices, 216 ));
            rec.hlsvkf := Convert_Hlsvaf_Type( Get( slices, 217 ));
            rec.hlsvl := Convert_Hlsvl_Type( Get( slices, 218 ));
            rec.hlsvln := Convert_Hlsvln_Type( Get( slices, 219 ));
            rec.hlsvlf := Convert_Hlsvlf_Type( Get( slices, 220 ));
            rec.hlsvm := Convert_Hlsvm_Type( Get( slices, 221 ));
            rec.hlsvmn := Convert_Hlsvln_Type( Get( slices, 222 ));
            rec.hlsvmf := Convert_Hlsvlf_Type( Get( slices, 223 ));
            rec.hlck := Convert_Aidpl1_Type( Get( slices, 224 ));
            rec.hlcka := Convert_Hlcka_Type( Get( slices, 225 ));
            rec.hlckan := Convert_Hlckan_Type( Get( slices, 226 ));
            rec.hlckb := Convert_Hlcka_Type( Get( slices, 227 ));
            rec.hlckbn := Convert_Hlckan_Type( Get( slices, 228 ));
            rec.hlckc := Convert_Hlcka_Type( Get( slices, 229 ));
            rec.hlckcn := Convert_Hlckan_Type( Get( slices, 230 ));
            rec.hlckd := Convert_Hlcka_Type( Get( slices, 231 ));
            rec.hlckdn := Convert_Hlckan_Type( Get( slices, 232 ));
            rec.hlcke := Convert_Hlcka_Type( Get( slices, 233 ));
            rec.hlcken := Convert_Hlckan_Type( Get( slices, 234 ));
            rec.hlckf := Convert_Hlcka_Type( Get( slices, 235 ));
            rec.hlckfn := Convert_Hlckan_Type( Get( slices, 236 ));
            rec.hlckg := Convert_Hlcka_Type( Get( slices, 237 ));
            rec.hlckgn := Convert_Hlckan_Type( Get( slices, 238 ));
            rec.hlckh := Convert_Hlcka_Type( Get( slices, 239 ));
            rec.hlckhn := Convert_Hlckan_Type( Get( slices, 240 ));
            rec.hlcki := Convert_Hlcki_Type( Get( slices, 241 ));
            rec.hlckin := Convert_Hlckin_Type( Get( slices, 242 ));
            rec.smoker := Convert_Bscon_Type( Get( slices, 243 ));
            rec.ncigs := Convert( slices, 244, ( -9, -8, -7, -2, -1 ) );
            rec.ophla := Convert_Ophla_Type( Get( slices, 245 ));
            rec.ophlb := Convert_Ophlb_Type( Get( slices, 246 ));
            rec.ophlc := Convert_Ophlb_Type( Get( slices, 247 ));
            rec.aidhh := Convert_Aidhh_Type( Get( slices, 248 ));
            rec.aidhua := Convert( slices, 249, ( -9, -8, -7, -1 ) );
            rec.aidhub := Convert( slices, 250, ( -9, -8, -7 ) );
            rec.aidhuc := Convert( slices, 251, ( -9, -8, -7 ) );
            rec.aidxhh := Convert_Aidxhh_Type( Get( slices, 252 ));
            rec.naidxhh := Convert_Naidxhh_Type( Get( slices, 253 ));
            rec.aidhu1 := Convert_Aidhu1_Type( Get( slices, 254 ));
            rec.aidhu2 := Convert_Aidhu2_Type( Get( slices, 255 ));
            rec.aidhrs := Convert_Aidhrs_Type( Get( slices, 256 ));
            rec.ivma := Convert_Ivda_Type( Get( slices, 257 ));
            rec.ivmb := Convert_Ivdb_Type( Get( slices, 258 ));
            rec.ivmc := Convert_Ivec_Type( Get( slices, 259 ));
            rec.ivmd := Convert_Ivdd_Type( Get( slices, 260 ));
            rec.ivme := Convert_Ivee_Type( Get( slices, 261 ));
            rec.jbhas := Convert_Frnow_Type( Get( slices, 262 ));
            rec.jboff := Convert_Jboff_Type( Get( slices, 263 ));
            rec.jboffy := Convert_Jboffy_Type( Get( slices, 264 ));
            rec.jbterm := Convert_Jbterm_Type( Get( slices, 265 ));
            rec.jbsoc := Convert( slices, 266, ( -9, -8, -2, -1 ) );
            rec.jbsic := Convert( slices, 267, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.jbsemp := Convert_Jbsemp_Type( Get( slices, 268 ));
            rec.jbmngr := Convert_Jbmngr_Type( Get( slices, 269 ));
            rec.jbsize := Convert_Jbsize_Type( Get( slices, 270 ));
            rec.jbhrs := Convert( slices, 271, ( -9, -8, -7, -2, -1 ) );
            rec.jbot := Convert( slices, 272, ( -9, -8, -7, -2, -1 ) );
            rec.jbotpd := Convert( slices, 273, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbhrlk := Convert_Jbhrlk_Type( Get( slices, 274 ));
            rec.jbpl := Convert_Jbpl_Type( Get( slices, 275 ));
            rec.jbttwt := Convert( slices, 276, ( -9, -8, -7, -3, -2, -1 ) );
            rec.jbttwm := Convert_Jbttwm_Type( Get( slices, 277 ));
            rec.jbsat1 := Convert_Jbsat1_Type( Get( slices, 278 ));
            rec.jbsat2 := Convert( slices, 279, ( -9, -8, -7, -2, -1 ) );
            rec.jbsat3 := Convert_Jbsat_Type( Get( slices, 280 ));
            rec.jbsat4 := Convert_Jbsat4_Type( Get( slices, 281 ));
            rec.jbsat5 := Convert_Jbsat4_Type( Get( slices, 282 ));
            rec.jbsat6 := Convert_Jbsat4_Type( Get( slices, 283 ));
            rec.jbsat7 := Convert_Jbsat_Type( Get( slices, 284 ));
            rec.jbsat := Convert_Jbsat_Type( Get( slices, 285 ));
            rec.paygl := Convert( slices, 286, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.paygw := Convert( slices, 287, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.paynl := Convert( slices, 288, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.paynw := Convert( slices, 289, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.payslp := Convert_Payslp_Type( Get( slices, 290 ));
            rec.payusl := Convert_Aidpl1_Type( Get( slices, 291 ));
            rec.payu := Convert( slices, 292, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.payuw := Convert( slices, 293, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.payug := Convert_Paylyg_Type( Get( slices, 294 ));
            rec.paydf1 := Convert_Paydf1_Type( Get( slices, 295 ));
            rec.paydf2 := Convert_Paydf2_Type( Get( slices, 296 ));
            rec.paydf3 := Convert_Paydf3_Type( Get( slices, 297 ));
            rec.paydf4 := Convert_Paydf4_Type( Get( slices, 298 ));
            rec.paydf5 := Convert_Paydf5_Type( Get( slices, 299 ));
            rec.paydf6 := Convert_Paydf6_Type( Get( slices, 300 ));
            rec.paydf7 := Convert_Paydf7_Type( Get( slices, 301 ));
            rec.paydf8 := Convert_Paydf8_Type( Get( slices, 302 ));
            rec.jbbgd := Convert( slices, 303, ( -9, -8, -7, -2, -1 ) );
            rec.jbbgm := Convert_Cjsbgm_Type( Get( slices, 304 ));
            rec.jbbgy := Convert( slices, 305, ( -9, -8, -7, -2, -1 ) );
            rec.jbbgly := Convert_Jbbgly_Type( Get( slices, 306 ));
            rec.jbsect := Convert_Jbsect_Type( Get( slices, 307 ));
            rec.jbonus := Convert_Aidpl1_Type( Get( slices, 308 ));
            rec.jbrise := Convert_Aidpl1_Type( Get( slices, 309 ));
            rec.tujbpl := Convert_Aidpl1_Type( Get( slices, 310 ));
            rec.tuin1 := Convert_Aidpl1_Type( Get( slices, 311 ));
            rec.tuin2 := Convert_Aidpl1_Type( Get( slices, 312 ));
            rec.jbopps := Convert_Aidpl1_Type( Get( slices, 313 ));
            rec.jbtime := Convert_Jbtime_Type( Get( slices, 314 ));
            rec.pays := Convert( slices, 315, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.paysw := Convert( slices, 316, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.paysg := Convert_Paylyg_Type( Get( slices, 317 ));
            rec.jbpen := Convert_Aidpl1_Type( Get( slices, 318 ));
            rec.jbpenm := Convert_Aidpl1_Type( Get( slices, 319 ));
            rec.payly := Convert( slices, 320, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.paylyw := Convert( slices, 321, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.paylyg := Convert_Paylyg_Type( Get( slices, 322 ));
            rec.jsboss := Convert_Jsboss_Type( Get( slices, 323 ));
            rec.jssize := Convert_Jssize_Type( Get( slices, 324 ));
            rec.jshrs := Convert( slices, 325, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jshrlk := Convert_Jbhrlk_Type( Get( slices, 326 ));
            rec.jstime := Convert_Jstime_Type( Get( slices, 327 ));
            rec.jstype := Convert_Jstype_Type( Get( slices, 328 ));
            rec.jsaccs := Convert_Jsaccs_Type( Get( slices, 329 ));
            rec.jsprf := Convert( slices, 330, ( -9, -8, -7, -3, -2, -1 ) );
            rec.jsprbm := Convert_Cjsbgm_Type( Get( slices, 331 ));
            rec.jsprby := Convert( slices, 332, ( -9, -8, -7, -2, -1 ) );
            rec.jsprem := Convert_Cjsbgm_Type( Get( slices, 333 ));
            rec.jsprey := Convert( slices, 334, ( -9, -8, -7, -2, -1 ) );
            rec.jspayl := Convert( slices, 335, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jspybm := Convert_Cjsbgm_Type( Get( slices, 336 ));
            rec.jspyby := Convert( slices, 337, ( -9, -8, -7, -2, -1 ) );
            rec.jspyem := Convert_Cjsbgm_Type( Get( slices, 338 ));
            rec.jspyey := Convert( slices, 339, ( -9, -8, -7, -2, -1 ) );
            rec.jspl := Convert_Jspl_Type( Get( slices, 340 ));
            rec.jsttwt := Convert( slices, 341, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.jsttwm := Convert_Jsttwm_Type( Get( slices, 342 ));
            rec.jssat1 := Convert_Jssat1_Type( Get( slices, 343 ));
            rec.jssat2 := Convert_Jbsat_Type( Get( slices, 344 ));
            rec.jssat3 := Convert_Jbsat_Type( Get( slices, 345 ));
            rec.jssat4 := Convert_Jbsat_Type( Get( slices, 346 ));
            rec.jssat5 := Convert_Jbsat_Type( Get( slices, 347 ));
            rec.jssat := Convert_Jbsat_Type( Get( slices, 348 ));
            rec.jsbgd := Convert( slices, 349, ( -9, -8, -7, -2, -1 ) );
            rec.jsbgm := Convert_Cjsbgm_Type( Get( slices, 350 ));
            rec.jsbgy := Convert( slices, 351, ( -9, -8, -7, -2, -1 ) );
            rec.jbed := Convert_Aidpl1_Type( Get( slices, 352 ));
            rec.jbed1 := Convert_Aidpl1_Type( Get( slices, 353 ));
            rec.jbed2 := Convert_Aidpl1_Type( Get( slices, 354 ));
            rec.jbed3 := Convert_Aidpl1_Type( Get( slices, 355 ));
            rec.jbed4 := Convert_Aidpl1_Type( Get( slices, 356 ));
            rec.jbed5 := Convert_Aidpl1_Type( Get( slices, 357 ));
            rec.jbedq := Convert( slices, 358, ( -9.0, -8.0, -7.0, -1.0 ) );
            rec.jbedp1 := Convert_Ednewp1_Type( Get( slices, 359 ));
            rec.rach12 := Convert_Hhch12_Type( Get( slices, 360 ));
            rec.jbchc1 := Convert_Jbchc1_Type( Get( slices, 361 ));
            rec.jbchc2 := Convert_Jbchc2_Type( Get( slices, 362 ));
            rec.jbchc3 := Convert_Jbchc3_Type( Get( slices, 363 ));
            rec.xpchcf := Convert_Xpchcf_Type( Get( slices, 364 ));
            rec.xpchc := Convert( slices, 365, ( -9, -8, -7, -2, -1 ) );
            rec.huxpch := Convert_Huxpch_Type( Get( slices, 366 ));
            rec.hunurs := Convert_Hunurs_Type( Get( slices, 367 ));
            rec.julk1 := Convert_Aidpl1_Type( Get( slices, 368 ));
            rec.julk4 := Convert_Bscon_Type( Get( slices, 369 ));
            rec.julkjb := Convert_Aidpl1_Type( Get( slices, 370 ));
            rec.juspec := Convert_Juspec_Type( Get( slices, 371 ));
            rec.jusoc := Convert( slices, 372, ( -9, -8, -7, -2, -1 ) );
            rec.juhrsx := Convert( slices, 373, ( -9, -8, -7, -2, -1 ) );
            rec.jupayx := Convert( slices, 374, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jupayl := Convert( slices, 375, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.juhrsl := Convert( slices, 376, ( -9, -8, -7, -2, -1 ) );
            rec.eaage := Convert_Eaage_Type( Get( slices, 377 ));
            rec.jbub := Convert_Bscon_Type( Get( slices, 378 ));
            rec.jbuby := Convert_Jbuby_Type( Get( slices, 379 ));
            rec.j2has := Convert_Aidpl1_Type( Get( slices, 380 ));
            rec.j2soc := Convert( slices, 381, ( -9, -8, -7, -2, -1 ) );
            rec.j2semp := Convert_J2semp_Type( Get( slices, 382 ));
            rec.j2hrs := Convert( slices, 383, ( -9, -8, -7, -2, -1 ) );
            rec.j2pay := Convert( slices, 384, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbhha := Convert_Aidpl1_Type( Get( slices, 385 ));
            rec.jbhhb := Convert_Aidpl1_Type( Get( slices, 386 ));
            rec.jbhhc := Convert_Aidpl1_Type( Get( slices, 387 ));
            rec.jbhhd := Convert_Aidpl1_Type( Get( slices, 388 ));
            rec.jbhhe := Convert_Aidpl1_Type( Get( slices, 389 ));
            rec.jbhhf := Convert_Aidpl1_Type( Get( slices, 390 ));
            rec.ivea := Convert_Ivda_Type( Get( slices, 391 ));
            rec.iveb := Convert_Ivdb_Type( Get( slices, 392 ));
            rec.ivec := Convert_Ivec_Type( Get( slices, 393 ));
            rec.ived := Convert_Ivdd_Type( Get( slices, 394 ));
            rec.ivee := Convert_Ivee_Type( Get( slices, 395 ));
            rec.ednew := Convert_Aidpl1_Type( Get( slices, 396 ));
            rec.ednew1 := Convert_Aidpl1_Type( Get( slices, 397 ));
            rec.ednew2 := Convert_Aidpl1_Type( Get( slices, 398 ));
            rec.ednew3 := Convert_Aidpl1_Type( Get( slices, 399 ));
            rec.ednew4 := Convert_Aidpl1_Type( Get( slices, 400 ));
            rec.ednewq := Convert( slices, 401, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ednewp1 := Convert_Ednewp1_Type( Get( slices, 402 ));
            rec.nemst := Convert_Nemst_Type( Get( slices, 403 ));
            rec.cjsbgd := Convert( slices, 404, ( -9, -8, -7, -2, -1 ) );
            rec.cjsbgm := Convert_Cjsbgm_Type( Get( slices, 405 ));
            rec.cjsbgy := Convert( slices, 406, ( -9, -8, -7, -2, -1 ) );
            rec.cjsbly := Convert_Cjsbly_Type( Get( slices, 407 ));
            rec.njbs := Convert( slices, 408, ( -9, -8, -7 ) );
            rec.jbhad := Convert_Aidpl1_Type( Get( slices, 409 ));
            rec.jlend := Convert( slices, 410, ( -9, -8, -7, -2, -1 ) );
            rec.jlsoc := Convert( slices, 411, ( -9, -8, -7, -2, -1 ) );
            rec.jlsic := Convert( slices, 412, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jlsemp := Convert_J2semp_Type( Get( slices, 413 ));
            rec.jlboss := Convert_Aidpl1_Type( Get( slices, 414 ));
            rec.jlmngr := Convert_Jlmngr_Type( Get( slices, 415 ));
            rec.jlsize := Convert_Jlsize_Type( Get( slices, 416 ));
            rec.ivja := Convert_Ivda_Type( Get( slices, 417 ));
            rec.ivjb := Convert_Ivdb_Type( Get( slices, 418 ));
            rec.ivjc := Convert_Ivec_Type( Get( slices, 419 ));
            rec.ivjd := Convert_Ivdd_Type( Get( slices, 420 ));
            rec.ivje := Convert_Ivee_Type( Get( slices, 421 ));
            rec.opsoca := Convert_Ophla_Type( Get( slices, 422 ));
            rec.opsocb := Convert_Opsocb_Type( Get( slices, 423 ));
            rec.opsocc := Convert_Ophlb_Type( Get( slices, 424 ));
            rec.opsocd := Convert_Opsocd_Type( Get( slices, 425 ));
            rec.opsoce := Convert_Opsocd_Type( Get( slices, 426 ));
            rec.opsocf := Convert_Opsocd_Type( Get( slices, 427 ));
            rec.vote1 := Convert_Aidpl1_Type( Get( slices, 428 ));
            rec.vote2 := Convert_Aidpl1_Type( Get( slices, 429 ));
            rec.vote3 := Convert_Vote3_Type( Get( slices, 430 ));
            rec.vote4 := Convert_Vote3_Type( Get( slices, 431 ));
            rec.vote5 := Convert_Vote5_Type( Get( slices, 432 ));
            rec.vote7 := Convert_Vote7_Type( Get( slices, 433 ));
            rec.vote8 := Convert_Vote8_Type( Get( slices, 434 ));
            rec.vote6 := Convert_Vote6_Type( Get( slices, 435 ));
            rec.oppol1 := Convert_Oppol1_Type( Get( slices, 436 ));
            rec.oppol2 := Convert_Oppol2_Type( Get( slices, 437 ));
            rec.oppol3 := Convert_Oppol3_Type( Get( slices, 438 ));
            rec.oppol4 := Convert_Oppol4_Type( Get( slices, 439 ));
            rec.opchd1 := Convert_Opchd1_Type( Get( slices, 440 ));
            rec.opchd2 := Convert_Opchd1_Type( Get( slices, 441 ));
            rec.opchd3 := Convert_Opchd1_Type( Get( slices, 442 ));
            rec.opchd4 := Convert_Opchd1_Type( Get( slices, 443 ));
            rec.orgm := Convert_Aidpl1_Type( Get( slices, 444 ));
            rec.orgma := Convert_Orgma_Type( Get( slices, 445 ));
            rec.orgaa := Convert_Orgaa_Type( Get( slices, 446 ));
            rec.orgmb := Convert_Orgmb_Type( Get( slices, 447 ));
            rec.orgab := Convert_Orgab_Type( Get( slices, 448 ));
            rec.orgmc := Convert_Orgmc_Type( Get( slices, 449 ));
            rec.orgac := Convert_Orgac_Type( Get( slices, 450 ));
            rec.orgmd := Convert_Orgmd_Type( Get( slices, 451 ));
            rec.orgad := Convert_Orgad_Type( Get( slices, 452 ));
            rec.orgme := Convert_Orgme_Type( Get( slices, 453 ));
            rec.orgae := Convert_Orgae_Type( Get( slices, 454 ));
            rec.orgmf := Convert_Orgmf_Type( Get( slices, 455 ));
            rec.orgaf := Convert_Orgaf_Type( Get( slices, 456 ));
            rec.orgmg := Convert_Orgmg_Type( Get( slices, 457 ));
            rec.orgag := Convert_Orgag_Type( Get( slices, 458 ));
            rec.orgmh := Convert_Orgmh_Type( Get( slices, 459 ));
            rec.orgah := Convert_Orgah_Type( Get( slices, 460 ));
            rec.orgmi := Convert_Orgmi_Type( Get( slices, 461 ));
            rec.orgai := Convert_Orgai_Type( Get( slices, 462 ));
            rec.orgmj := Convert_Orgmj_Type( Get( slices, 463 ));
            rec.orgaj := Convert_Orgaj_Type( Get( slices, 464 ));
            rec.orgmk := Convert_Orgmk_Type( Get( slices, 465 ));
            rec.orgak := Convert_Orgak_Type( Get( slices, 466 ));
            rec.orgml := Convert_Orgml_Type( Get( slices, 467 ));
            rec.orgal := Convert_Orgal_Type( Get( slices, 468 ));
            rec.orgmm := Convert_Orgmm_Type( Get( slices, 469 ));
            rec.orgam := Convert_Orgam_Type( Get( slices, 470 ));
            rec.orgmo := Convert_Orgmo_Type( Get( slices, 471 ));
            rec.orgao := Convert_Orgao_Type( Get( slices, 472 ));
            rec.orgmp := Convert_Orgmp_Type( Get( slices, 473 ));
            rec.orgap := Convert_Orgap_Type( Get( slices, 474 ));
            rec.orgmq := Convert_Orgmq_Type( Get( slices, 475 ));
            rec.orgaq := Convert_Orgaq_Type( Get( slices, 476 ));
            rec.orga := Convert_Aidpl1_Type( Get( slices, 477 ));
            rec.oprlg2 := Convert_Oprlg2_Type( Get( slices, 478 ));
            rec.caruse := Convert_Caruse_Type( Get( slices, 479 ));
            rec.yppar := Convert_Yppar_Type( Get( slices, 480 ));
            rec.pyhlth := Convert_Pyhlth_Type( Get( slices, 481 ));
            rec.pyhwrk := Convert_Pyhwrk_Type( Get( slices, 482 ));
            rec.pysxed := Convert_Pysxed_Type( Get( slices, 483 ));
            rec.pysxag := Convert( slices, 484, ( -9, -8, -7, -3, -2, -1 ) );
            rec.pynyp := Convert( slices, 485, ( -9, -8, -7 ) );
            rec.pypno1 := Convert( slices, 486, ( -9, -8, -7 ) );
            rec.pyage1 := Convert( slices, 487, ( -9, -8, -7, -2, -1 ) );
            rec.pypno2 := Convert( slices, 488, ( -9, -8, -7 ) );
            rec.pyage2 := Convert( slices, 489, ( -9, -8, -7, -2, -1 ) );
            rec.pypno3 := Convert( slices, 490, ( -9, -8, -7 ) );
            rec.pyage3 := Convert( slices, 491, ( -9, -8, -7, -2, -1 ) );
            rec.pywhr1 := Convert_Pywhr1_Type( Get( slices, 492 ));
            rec.pyman1 := Convert_Pyman1_Type( Get( slices, 493 ));
            rec.pyarg1 := Convert_Pyarg1_Type( Get( slices, 494 ));
            rec.pytlk1 := Convert_Pyarg1_Type( Get( slices, 495 ));
            rec.pysmk1 := Convert_Pysmk1_Type( Get( slices, 496 ));
            rec.pysad1 := Convert_Pysad1_Type( Get( slices, 497 ));
            rec.pywor1 := Convert_Pywor1_Type( Get( slices, 498 ));
            rec.pyhsw1 := Convert_Pyhap1_Type( Get( slices, 499 ));
            rec.pyhap1 := Convert_Pyhap1_Type( Get( slices, 500 ));
            rec.pyhfm1 := Convert_Pyhap1_Type( Get( slices, 501 ));
            rec.pyhfr1 := Convert_Pyhap1_Type( Get( slices, 502 ));
            rec.pyhlf1 := Convert_Pyhap1_Type( Get( slices, 503 ));
            rec.pyhlt1 := Convert_Pyhlt1_Type( Get( slices, 504 ));
            rec.pywhr2 := Convert_Pywhr1_Type( Get( slices, 505 ));
            rec.pyman2 := Convert_Pyman1_Type( Get( slices, 506 ));
            rec.pyarg2 := Convert_Pyarg1_Type( Get( slices, 507 ));
            rec.pytlk2 := Convert_Pyarg1_Type( Get( slices, 508 ));
            rec.pysmk2 := Convert_Pysmk1_Type( Get( slices, 509 ));
            rec.pysad2 := Convert_Pysad1_Type( Get( slices, 510 ));
            rec.pywor2 := Convert_Pywor1_Type( Get( slices, 511 ));
            rec.pyhsw2 := Convert_Pyhap1_Type( Get( slices, 512 ));
            rec.pyhap2 := Convert_Pyhap1_Type( Get( slices, 513 ));
            rec.pyhfm2 := Convert_Pyhap1_Type( Get( slices, 514 ));
            rec.pyhfr2 := Convert_Pyhap1_Type( Get( slices, 515 ));
            rec.pyhlf2 := Convert_Pyhap1_Type( Get( slices, 516 ));
            rec.pyhlt2 := Convert_Pyhlt1_Type( Get( slices, 517 ));
            rec.pywhr3 := Convert_Pywhr1_Type( Get( slices, 518 ));
            rec.pyman3 := Convert_Pyman1_Type( Get( slices, 519 ));
            rec.pyarg3 := Convert_Pyarg1_Type( Get( slices, 520 ));
            rec.pytlk3 := Convert_Pyarg1_Type( Get( slices, 521 ));
            rec.pysmk3 := Convert_Pysmk1_Type( Get( slices, 522 ));
            rec.pysad3 := Convert_Pysad1_Type( Get( slices, 523 ));
            rec.pywor3 := Convert_Pywor1_Type( Get( slices, 524 ));
            rec.pyhsw3 := Convert_Pyhap1_Type( Get( slices, 525 ));
            rec.pyhap3 := Convert_Pyhap1_Type( Get( slices, 526 ));
            rec.pyhfm3 := Convert_Pyhap1_Type( Get( slices, 527 ));
            rec.pyhfr3 := Convert_Pyhap1_Type( Get( slices, 528 ));
            rec.pyhlf3 := Convert_Pyhap1_Type( Get( slices, 529 ));
            rec.pyhlt3 := Convert_Pyhlt1_Type( Get( slices, 530 ));
            rec.pyra := Convert_Aglt20_Type( Get( slices, 531 ));
            rec.pysat1 := Convert_Pysat1_Type( Get( slices, 532 ));
            rec.pysat2 := Convert_Pysat1_Type( Get( slices, 533 ));
            rec.pysat3 := Convert_Pysat1_Type( Get( slices, 534 ));
            rec.pyspn1 := Convert( slices, 535, ( -9, -8, -7 ) );
            rec.pysty1 := Convert_Pysty1_Type( Get( slices, 536 ));
            rec.pytae1 := Convert_Pyste1_Type( Get( slices, 537 ));
            rec.pytam1 := Convert_Pyste1_Type( Get( slices, 538 ));
            rec.pytas1 := Convert_Pyste1_Type( Get( slices, 539 ));
            rec.pyste1 := Convert_Pyste1_Type( Get( slices, 540 ));
            rec.pystm1 := Convert_Pyste1_Type( Get( slices, 541 ));
            rec.pysts1 := Convert_Pyste1_Type( Get( slices, 542 ));
            rec.pyspn2 := Convert( slices, 543, ( -9, -8, -7 ) );
            rec.pysty2 := Convert_Pysty1_Type( Get( slices, 544 ));
            rec.pytae2 := Convert_Pyste1_Type( Get( slices, 545 ));
            rec.pytam2 := Convert_Pyste1_Type( Get( slices, 546 ));
            rec.pytas2 := Convert_Pyste1_Type( Get( slices, 547 ));
            rec.pyste2 := Convert_Pyste1_Type( Get( slices, 548 ));
            rec.pystm2 := Convert_Pyste1_Type( Get( slices, 549 ));
            rec.pysts2 := Convert_Pyste1_Type( Get( slices, 550 ));
            rec.pyspn3 := Convert( slices, 551, ( -9, -8, -7 ) );
            rec.pysty3 := Convert_Pysty1_Type( Get( slices, 552 ));
            rec.pytae3 := Convert_Pyste1_Type( Get( slices, 553 ));
            rec.pytam3 := Convert_Pyste1_Type( Get( slices, 554 ));
            rec.pytas3 := Convert_Pyste1_Type( Get( slices, 555 ));
            rec.pyste3 := Convert_Pyste1_Type( Get( slices, 556 ));
            rec.pystm3 := Convert_Pyste1_Type( Get( slices, 557 ));
            rec.pysts3 := Convert_Pyste1_Type( Get( slices, 558 ));
            rec.f101 := Convert_F101_Type( Get( slices, 559 ));
            rec.f102 := Convert_F102_Type( Get( slices, 560 ));
            rec.f103 := Convert_F103_Type( Get( slices, 561 ));
            rec.f104 := Convert( slices, 562, ( -9, -8, -7 ) );
            rec.f105 := Convert_F105_Type( Get( slices, 563 ));
            rec.f106 := Convert_F106_Type( Get( slices, 564 ));
            rec.f116 := Convert_F116_Type( Get( slices, 565 ));
            rec.f117 := Convert_F117_Type( Get( slices, 566 ));
            rec.f118 := Convert_F118_Type( Get( slices, 567 ));
            rec.f119 := Convert_F119_Type( Get( slices, 568 ));
            rec.f120 := Convert_F120_Type( Get( slices, 569 ));
            rec.f121 := Convert_F121_Type( Get( slices, 570 ));
            rec.f122 := Convert_F122_Type( Get( slices, 571 ));
            rec.f123 := Convert_F123_Type( Get( slices, 572 ));
            rec.f124 := Convert_F124_Type( Get( slices, 573 ));
            rec.f125 := Convert_F125_Type( Get( slices, 574 ));
            rec.f131 := Convert_F131_Type( Get( slices, 575 ));
            rec.f132 := Convert_F132_Type( Get( slices, 576 ));
            rec.f133 := Convert_F133_Type( Get( slices, 577 ));
            rec.f134 := Convert_F134_Type( Get( slices, 578 ));
            rec.f135 := Convert_F135_Type( Get( slices, 579 ));
            rec.f136 := Convert_F136_Type( Get( slices, 580 ));
            rec.f137 := Convert_F137_Type( Get( slices, 581 ));
            rec.f138 := Convert_F138_Type( Get( slices, 582 ));
            rec.f139 := Convert_F139_Type( Get( slices, 583 ));
            rec.f140 := Convert_F140_Type( Get( slices, 584 ));
            rec.f141 := Convert_F141_Type( Get( slices, 585 ));
            rec.f151 := Convert_F151_Type( Get( slices, 586 ));
            rec.f152 := Convert_F152_Type( Get( slices, 587 ));
            rec.f153 := Convert_F153_Type( Get( slices, 588 ));
            rec.f154 := Convert_F154_Type( Get( slices, 589 ));
            rec.f155 := Convert_F155_Type( Get( slices, 590 ));
            rec.f156 := Convert_F156_Type( Get( slices, 591 ));
            rec.f157 := Convert_F157_Type( Get( slices, 592 ));
            rec.f158 := Convert_F158_Type( Get( slices, 593 ));
            rec.f159 := Convert_F159_Type( Get( slices, 594 ));
            rec.nf1 := Convert( slices, 595, ( -9, -8, -7, -2, -1 ) );
            rec.fisit := Convert_Fisit_Type( Get( slices, 596 ));
            rec.fisitc := Convert( slices, 597, ( -9, -8, -7, -2, -1 ) );
            rec.fisity := Convert_Fisity_Type( Get( slices, 598 ));
            rec.fisitx := Convert( slices, 599, ( -9, -8, -7, -2, -1 ) );
            rec.opxpsv := Convert_Opxpsv_Type( Get( slices, 600 ));
            rec.opxpcr := Convert_Opxpcr_Type( Get( slices, 601 ));
            rec.fccard := Convert_Boolean_With_Missing( Get( slices, 602 ));
            rec.fiyrdi := Convert( slices, 603, ( -9, -8, -7, -2, -1 ) );
            rec.fiyrdiu := Convert_Fiyrdiu_Type( Get( slices, 604 ));
            rec.save := Convert_Aidpl1_Type( Get( slices, 605 ));
            rec.saved := Convert( slices, 606, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.savey1 := Convert_Savey1_Type( Get( slices, 607 ));
            rec.savey2 := Convert_Savey1_Type( Get( slices, 608 ));
            rec.savek := Convert( slices, 609, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.savekb1 := Convert_Boolean_With_Missing( Get( slices, 610 ));
            rec.savekb2 := Convert_Boolean_With_Missing( Get( slices, 611 ));
            rec.savekb3 := Convert_Boolean_With_Missing( Get( slices, 612 ));
            rec.savekb4 := Convert_Boolean_With_Missing( Get( slices, 613 ));
            rec.savej := Convert_Bankj_Type( Get( slices, 614 ));
            rec.bank := Convert_Boolean_With_Missing( Get( slices, 615 ));
            rec.bankk := Convert( slices, 616, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.bankkb1 := Convert_Boolean_With_Missing( Get( slices, 617 ));
            rec.bankkb2 := Convert_Boolean_With_Missing( Get( slices, 618 ));
            rec.bankkb3 := Convert_Boolean_With_Missing( Get( slices, 619 ));
            rec.bankkb4 := Convert_Boolean_With_Missing( Get( slices, 620 ));
            rec.bankj := Convert_Bankj_Type( Get( slices, 621 ));
            rec.nvest := Convert_Debt_Type( Get( slices, 622 ));
            rec.nvesta := Convert_Nvesta_Type( Get( slices, 623 ));
            rec.nvestb := Convert_Nvestb_Type( Get( slices, 624 ));
            rec.nvestc := Convert_Nvestc_Type( Get( slices, 625 ));
            rec.nvestd := Convert_Nvestd_Type( Get( slices, 626 ));
            rec.nveste := Convert_Nveste_Type( Get( slices, 627 ));
            rec.nvestf := Convert_Nvestf_Type( Get( slices, 628 ));
            rec.nvestg := Convert_Nvestg_Type( Get( slices, 629 ));
            rec.nvestn := Convert_Nvestn_Type( Get( slices, 630 ));
            rec.nvestl := Convert_Nvestl_Type( Get( slices, 631 ));
            rec.nvestk := Convert( slices, 632, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.nvestc1 := Convert_Boolean_With_Missing( Get( slices, 633 ));
            rec.nvestc2 := Convert_Boolean_With_Missing( Get( slices, 634 ));
            rec.nvestc3 := Convert_Boolean_With_Missing( Get( slices, 635 ));
            rec.nvestc4 := Convert_Boolean_With_Missing( Get( slices, 636 ));
            rec.nvestj := Convert_Nvestj_Type( Get( slices, 637 ));
            rec.pppen := Convert_Aidpl1_Type( Get( slices, 638 ));
            rec.penb4 := Convert_Penb4_Type( Get( slices, 639 ));
            rec.penb4yr := Convert( slices, 640, ( -9, -8, -7, -2, -1 ) );
            rec.penb4v := Convert( slices, 641, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.penb4w := Convert( slices, 642, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.penyr := Convert( slices, 643, ( -9, -8, -7, -2, -1 ) );
            rec.penadd := Convert_Aidpl1_Type( Get( slices, 644 ));
            rec.penadv := Convert( slices, 645, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.penadw := Convert( slices, 646, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.windf := Convert_Debt_Type( Get( slices, 647 ));
            rec.windfa := Convert_Windfa_Type( Get( slices, 648 ));
            rec.windfb := Convert_Windfb_Type( Get( slices, 649 ));
            rec.windfc := Convert_Windfc_Type( Get( slices, 650 ));
            rec.windfd := Convert_Windfd_Type( Get( slices, 651 ));
            rec.windfe := Convert_Windfe_Type( Get( slices, 652 ));
            rec.windff := Convert_Windff_Type( Get( slices, 653 ));
            rec.windfg := Convert_Windfg_Type( Get( slices, 654 ));
            rec.windfh := Convert_Nisjsa_Type( Get( slices, 655 ));
            rec.windfy := Convert( slices, 656, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.fthh := Convert_Aidpl1_Type( Get( slices, 657 ));
            rec.fthh1 := Convert( slices, 658, ( -9, -8, -7, -2, -1 ) );
            rec.fthh11 := Convert_Fthh11_Type( Get( slices, 659 ));
            rec.fthh12 := Convert_Fthh12_Type( Get( slices, 660 ));
            rec.fthh13 := Convert_Fthh13_Type( Get( slices, 661 ));
            rec.fthh14 := Convert_Fthh14_Type( Get( slices, 662 ));
            rec.fthh15 := Convert_Fthh15_Type( Get( slices, 663 ));
            rec.fthh16 := Convert_Ftexa6_Type( Get( slices, 664 ));
            rec.fthh1v := Convert( slices, 665, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.fthh1w := Convert( slices, 666, ( -9.0, -8.0, -7.0, -5.0, -3.0, -2.0, -1.0 ) );
            rec.fthh2 := Convert( slices, 667, ( -9, -8, -7, -2, -1 ) );
            rec.fthh21 := Convert_Fthh11_Type( Get( slices, 668 ));
            rec.fthh22 := Convert_Fthh12_Type( Get( slices, 669 ));
            rec.fthh23 := Convert_Fthh13_Type( Get( slices, 670 ));
            rec.fthh24 := Convert_Fthh24_Type( Get( slices, 671 ));
            rec.fthh25 := Convert_Fthh15_Type( Get( slices, 672 ));
            rec.fthh26 := Convert_Ftexa6_Type( Get( slices, 673 ));
            rec.fthh2v := Convert( slices, 674, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.fthh2w := Convert( slices, 675, ( -9.0, -8.0, -7.0, -5.0, -3.0, -2.0, -1.0 ) );
            rec.fthh3 := Convert( slices, 676, ( -9, -8, -7, -2, -1 ) );
            rec.fthh31 := Convert_Fthh11_Type( Get( slices, 677 ));
            rec.fthh32 := Convert_Fthh12_Type( Get( slices, 678 ));
            rec.fthh33 := Convert_Fthh13_Type( Get( slices, 679 ));
            rec.fthh34 := Convert_Fthh24_Type( Get( slices, 680 ));
            rec.fthh35 := Convert_Fthh15_Type( Get( slices, 681 ));
            rec.fthh36 := Convert_Ftexa6_Type( Get( slices, 682 ));
            rec.fthh3v := Convert( slices, 683, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.fthh3w := Convert( slices, 684, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.ftexhh := Convert_Aidpl1_Type( Get( slices, 685 ));
            rec.ftexa := Convert_Ftexa_Type( Get( slices, 686 ));
            rec.ftexa1 := Convert_Ftexa1_Type( Get( slices, 687 ));
            rec.ftexa2 := Convert_Ftexa2_Type( Get( slices, 688 ));
            rec.ftexa3 := Convert_Ftexa3_Type( Get( slices, 689 ));
            rec.ftexa4 := Convert_Ftexa4_Type( Get( slices, 690 ));
            rec.ftexa5 := Convert_Ftexa5_Type( Get( slices, 691 ));
            rec.ftexa6 := Convert_Ftexa6_Type( Get( slices, 692 ));
            rec.ftexav := Convert( slices, 693, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ftexaw := Convert( slices, 694, ( -9.0, -8.0, -7.0, -5.0, -3.0, -2.0, -1.0 ) );
            rec.ftexb := Convert_Ftexb_Type( Get( slices, 695 ));
            rec.ftexb1 := Convert_Ftexa1_Type( Get( slices, 696 ));
            rec.ftexb2 := Convert_Ftexa2_Type( Get( slices, 697 ));
            rec.ftexb3 := Convert_Ftexa3_Type( Get( slices, 698 ));
            rec.ftexb4 := Convert_Ftexa4_Type( Get( slices, 699 ));
            rec.ftexb5 := Convert_Ftexa5_Type( Get( slices, 700 ));
            rec.ftexb6 := Convert_Ftexa6_Type( Get( slices, 701 ));
            rec.ftexbv := Convert( slices, 702, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ftexbw := Convert( slices, 703, ( -9.0, -8.0, -7.0, -5.0, -3.0, -2.0, -1.0 ) );
            rec.ftexc := Convert_Ftexc_Type( Get( slices, 704 ));
            rec.ftexc1 := Convert_Ftexa1_Type( Get( slices, 705 ));
            rec.ftexc2 := Convert_Ftexa2_Type( Get( slices, 706 ));
            rec.ftexc3 := Convert_Ftexa3_Type( Get( slices, 707 ));
            rec.ftexc4 := Convert_Ftexa4_Type( Get( slices, 708 ));
            rec.ftexc5 := Convert_Ftexa5_Type( Get( slices, 709 ));
            rec.ftexc6 := Convert_Ftexa6_Type( Get( slices, 710 ));
            rec.ftexcv := Convert( slices, 711, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ftexcw := Convert( slices, 712, ( -9.0, -8.0, -7.0, -5.0, -3.0, -2.0, -1.0 ) );
            rec.debt := Convert_Debt_Type( Get( slices, 713 ));
            rec.debta := Convert_Debta_Type( Get( slices, 714 ));
            rec.debtb := Convert_Debtb_Type( Get( slices, 715 ));
            rec.debtc := Convert_Debtc_Type( Get( slices, 716 ));
            rec.debtd := Convert_Debtd_Type( Get( slices, 717 ));
            rec.debte := Convert_Debte_Type( Get( slices, 718 ));
            rec.debtf := Convert_Debtf_Type( Get( slices, 719 ));
            rec.debtg := Convert_Debtg_Type( Get( slices, 720 ));
            rec.debty := Convert( slices, 721, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.debtc1 := Convert_Boolean_With_Missing( Get( slices, 722 ));
            rec.debtc2 := Convert_Boolean_With_Missing( Get( slices, 723 ));
            rec.debtc3 := Convert_Boolean_With_Missing( Get( slices, 724 ));
            rec.debtc4 := Convert_Boolean_With_Missing( Get( slices, 725 ));
            rec.debtj := Convert_Boolean_With_Missing( Get( slices, 726 ));
            rec.spinhh := Convert_Hhch12_Type( Get( slices, 727 ));
            rec.huruns := Convert_Huruns_Type( Get( slices, 728 ));
            rec.huboss := Convert_Huboss_Type( Get( slices, 729 ));
            rec.hubuys := Convert_Hubuys_Type( Get( slices, 730 ));
            rec.hufrys := Convert_Hubuys_Type( Get( slices, 731 ));
            rec.humops := Convert_Hubuys_Type( Get( slices, 732 ));
            rec.huiron := Convert_Hubuys_Type( Get( slices, 733 ));
            rec.hhch12 := Convert_Hhch12_Type( Get( slices, 734 ));
            rec.husits := Convert_Husits_Type( Get( slices, 735 ));
            rec.howlng := Convert( slices, 736, ( -9, -8, -7, -3, -2, -1 ) );
            rec.ivfa := Convert_Ivda_Type( Get( slices, 737 ));
            rec.ivfb := Convert_Ivdb_Type( Get( slices, 738 ));
            rec.ivfc := Convert_Ivfc_Type( Get( slices, 739 ));
            rec.ivfd := Convert_Ivdd_Type( Get( slices, 740 ));
            rec.ivfe := Convert_Ivee_Type( Get( slices, 741 ));
            rec.ivfoih := Convert( slices, 742, ( -9, -8 ) );
            rec.ivfoim := Convert( slices, 743, ( -9, -8 ) );
            rec.ivsc := Convert_Ivsc_Type( Get( slices, 744 ));
            rec.mrssci := Convert_Mrssch_Type( Get( slices, 745 ));
            rec.mrssch := Convert_Mrssch_Type( Get( slices, 746 ));
            rec.iv1 := Convert_Hhch12_Type( Get( slices, 747 ));
            rec.iv2 := Convert_Iv2_Type( Get( slices, 748 ));
            rec.iv4 := Convert_Iv4_Type( Get( slices, 749 ));
            rec.iv5 := Convert_Iv5_Type( Get( slices, 750 ));
            rec.iv6a := Convert_Hhch12_Type( Get( slices, 751 ));
            rec.iv6b := Convert_Hhch12_Type( Get( slices, 752 ));
            rec.iv6c := Convert_Hhch12_Type( Get( slices, 753 ));
            rec.iv6d := Convert_Hhch12_Type( Get( slices, 754 ));
            rec.iv6e := Convert_Hhch12_Type( Get( slices, 755 ));
            rec.iv6f := Convert_Hhch12_Type( Get( slices, 756 ));
            rec.iv7 := Convert( slices, 757, ( -9, -8, -7 ) );
            rec.ghqa := Convert_Ghqa_Type( Get( slices, 758 ));
            rec.ghqb := Convert_Ghqb_Type( Get( slices, 759 ));
            rec.ghqc := Convert_Ghqc_Type( Get( slices, 760 ));
            rec.ghqd := Convert_Ghqc_Type( Get( slices, 761 ));
            rec.ghqe := Convert_Ghqe_Type( Get( slices, 762 ));
            rec.ghqf := Convert_Ghqe_Type( Get( slices, 763 ));
            rec.ghqg := Convert_Ghqc_Type( Get( slices, 764 ));
            rec.ghqh := Convert_Ghqc_Type( Get( slices, 765 ));
            rec.ghqi := Convert_Ghqb_Type( Get( slices, 766 ));
            rec.ghqj := Convert_Ghqe_Type( Get( slices, 767 ));
            rec.ghqk := Convert_Ghqe_Type( Get( slices, 768 ));
            rec.ghql := Convert_Ghqc_Type( Get( slices, 769 ));
            rec.opfama := Convert_Opfama_Type( Get( slices, 770 ));
            rec.opfamb := Convert_Opfama_Type( Get( slices, 771 ));
            rec.opfamc := Convert_Opfama_Type( Get( slices, 772 ));
            rec.opfamd := Convert_Opfama_Type( Get( slices, 773 ));
            rec.opfame := Convert_Opfama_Type( Get( slices, 774 ));
            rec.opfamf := Convert_Opfama_Type( Get( slices, 775 ));
            rec.opfamg := Convert_Opfama_Type( Get( slices, 776 ));
            rec.opfamh := Convert_Opfama_Type( Get( slices, 777 ));
            rec.opfami := Convert_Opfama_Type( Get( slices, 778 ));
            rec.ssupa := Convert_Ssupa_Type( Get( slices, 779 ));
            rec.ssupb := Convert_Ssupa_Type( Get( slices, 780 ));
            rec.ssupc := Convert_Ssupa_Type( Get( slices, 781 ));
            rec.ssupd := Convert_Ssupa_Type( Get( slices, 782 ));
            rec.ssupe := Convert_Ssupa_Type( Get( slices, 783 ));
            rec.ssup1 := Convert_Netsx1_Type( Get( slices, 784 ));
            rec.ssupr2r := Convert_Ssupr2r_Type( Get( slices, 785 ));
            rec.prrs2i := Convert_Prrs2i_Type( Get( slices, 786 ));
            rec.pripn := Convert( slices, 787, ( -9, -8 ) );
            rec.prwhy := Convert_Prwhy_Type( Get( slices, 788 ));
            rec.pplevr := Convert_Plever_Type( Get( slices, 789 ));
            rec.prfehq := Convert_Prfehq_Type( Get( slices, 790 ));
            rec.prsehq := Convert_Prsehq_Type( Get( slices, 791 ));
            rec.presbgm := Convert_Presbgm_Type( Get( slices, 792 ));
            rec.presbgy := Convert( slices, 793, ( -9, -8, -2, -1 ) );
            rec.presly := Convert_Presly_Type( Get( slices, 794 ));
            rec.prf101 := Convert_Prf101_Type( Get( slices, 795 ));
            rec.prf102 := Convert_Prf102_Type( Get( slices, 796 ));
            rec.prf116 := Convert_Prf116_Type( Get( slices, 797 ));
            rec.prf125 := Convert_Prf125_Type( Get( slices, 798 ));
            rec.prf131 := Convert_Prf131_Type( Get( slices, 799 ));
            rec.prf134 := Convert_Prf134_Type( Get( slices, 800 ));
            rec.prf135 := Convert_Prf135_Type( Get( slices, 801 ));
            rec.prf137 := Convert_Prf137_Type( Get( slices, 802 ));
            rec.prf139 := Convert_Prf139_Type( Get( slices, 803 ));
            rec.prf141 := Convert_Prf141_Type( Get( slices, 804 ));
            rec.prfirn := Convert_Prfirn_Type( Get( slices, 805 ));
            rec.prearn := Convert_Prearn_Type( Get( slices, 806 ));
            rec.prjbbgm := Convert_Presbgm_Type( Get( slices, 807 ));
            rec.prjbbgy := Convert( slices, 808, ( -9, -8, -1 ) );
            rec.prjbly := Convert_Prjbly_Type( Get( slices, 809 ));
            rec.prfitb := Convert_Prfitb_Type( Get( slices, 810 ));
            rec.ivpa := Convert_Ivpa_Type( Get( slices, 811 ));
            rec.ivpb := Convert_Ivpb_Type( Get( slices, 812 ));
            rec.ivpc := Convert_Ivpc_Type( Get( slices, 813 ));
            rec.ivpd := Convert_Ivpd_Type( Get( slices, 814 ));
            rec.ivpe := Convert_Ivpe_Type( Get( slices, 815 ));
            rec.telwhy := Convert_Telwhy_Type( Get( slices, 816 ));
            rec.prjbft := Convert_Prjbft_Type( Get( slices, 817 ));
            rec.tlfiyrl := Convert( slices, 818, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.tlfiyr := Convert( slices, 819, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.pid := Convert( slices, 820 );
            rec.iviow4 := Convert_Iviow4_Type( Get( slices, 821 ));
            rec.hhmem := Convert_Hhmem_Type( Get( slices, 822 ));
            rec.newhy := Convert_Newhy_Type( Get( slices, 823 ));
            rec.nemnjn := Convert_Nemnjn_Type( Get( slices, 824 ));
            rec.neyrjn := Convert( slices, 825, ( -9, -8, -2, -1 ) );
            rec.ivfio := Convert_Ivfio_Type( Get( slices, 826 ));
            rec.iodc := Convert_Iodc_Type( Get( slices, 827 ));
            rec.hgr2r := Convert_Hgr2r_Type( Get( slices, 828 ));
            rec.hgsex := Convert_Hgsex_Type( Get( slices, 829 ));
            rec.hgbm := Convert_Hgbm_Type( Get( slices, 830 ));
            rec.hgby := Convert( slices, 831, ( -2, -1 ) );
            rec.mastat := Convert_Mastat_Type( Get( slices, 832 ));
            rec.hgspn := Convert( slices, 833, ( -9, -8, -2, -1 ) );
            rec.hgemp := Convert_Hgemp_Type( Get( slices, 834 ));
            rec.hgfno := Convert( slices, 835, ( -9, -8, -2, -1 ) );
            rec.hgmno := Convert( slices, 836, ( -9, -8, -2, -1 ) );
            rec.hgra := Convert( slices, 837, ( -9, -8, -2, -1 ) );
            rec.age := Convert( slices, 838, ( -9, -8 ) );
            rec.age12 := Convert( slices, 839, ( -9, -8 ) );
            rec.butype := Convert_Butype_Type( Get( slices, 840 ));
            rec.buno := Convert( slices, 841, ( -9, -8 ) );
            rec.nchild := Convert( slices, 842, ( -9, -8 ) );
            rec.hoh := Convert_Hoh_Type( Get( slices, 843 ));
            rec.rach16 := Convert_Hhch12_Type( Get( slices, 844 ));
            rec.sampst := Convert_Sampst_Type( Get( slices, 845 ));
            rec.movest := Convert_Movest_Type( Get( slices, 846 ));
            rec.region := Convert_Region_Type( Get( slices, 847 ));
            rec.hhsize := Convert( slices, 848, ( -9, -8 ) );
            rec.hhtype := Convert_Hhtype_Type( Get( slices, 849 ));
            rec.tenure := Convert_Tenure_Type( Get( slices, 850 ));
            rec.qfedhi := Convert_Qfedhi_Type( Get( slices, 851 ));
            rec.qfvoc := Convert_Qfvoc_Type( Get( slices, 852 ));
            rec.qfachi := Convert_Qfachi_Type( Get( slices, 853 ));
            rec.jbft := Convert_Jbft_Type( Get( slices, 854 ));
            rec.payg := Convert( slices, 855, ( -9.0, -8.0, -7.0 ) );
            rec.payn := Convert( slices, 856, ( -9.0, -8.0, -7.0 ) );
            rec.paygu := Convert( slices, 857, ( -9.0, -8.0, -7.0 ) );
            rec.paynu := Convert( slices, 858, ( -9.0, -8.0, -7.0 ) );
            rec.paygty := Convert( slices, 859, ( -9.0, -8.0, -7.0 ) );
            rec.paygly := Convert( slices, 860, ( -9.0, -8.0, -7.0 ) );
            rec.paynty := Convert( slices, 861, ( -9.0, -8.0, -7.0 ) );
            rec.paynly := Convert( slices, 862, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jsprof := Convert( slices, 863, ( -9.0, -8.0, -7.0 ) );
            rec.jspayg := Convert( slices, 864, ( -9.0, -8.0, -7.0 ) );
            rec.cjsten := Convert( slices, 865, ( -9.0, -8.0, -7.0 ) );
            rec.cjswk9 := Convert( slices, 866, ( -9.0, -8.0, -7.0 ) );
            rec.jlid := Convert_Jlid_Type( Get( slices, 867 ));
            rec.jlyid := Convert_Jlyid_Type( Get( slices, 868 ));
            rec.jtyid := Convert_Jtyid_Type( Get( slices, 869 ));
            rec.jbseg := Convert_Jbseg_Type( Get( slices, 870 ));
            rec.jbgold := Convert( slices, 871, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbrgsc := Convert_Jbrgsc_Type( Get( slices, 872 ));
            rec.jbisco := Convert( slices, 873 );
            rec.jbcssm := Convert( slices, 874, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbcssf := Convert( slices, 875, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbhgs := Convert( slices, 876, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbsec := Convert_Jbsec_Type( Get( slices, 877 ));
            rec.njbwks := Convert( slices, 878, ( -9.0, -8.0, -7.0 ) );
            rec.njuwks := Convert( slices, 879, ( -9.0, -8.0, -7.0 ) );
            rec.njiwks := Convert( slices, 880, ( -9.0, -8.0, -7.0 ) );
            rec.njbnew := Convert( slices, 881, ( -9, -8, -7 ) );
            rec.njbsp := Convert( slices, 882, ( -9, -8, -7 ) );
            rec.njusp := Convert( slices, 883, ( -9, -8, -7 ) );
            rec.njisp := Convert( slices, 884, ( -9, -8, -7 ) );
            rec.jbstatl := Convert( slices, 885, ( -9, -8, -7, -2, -1 ) );
            rec.jbstatt := Convert( slices, 886, ( -9, -8, -7, -2, -1 ) );
            rec.jbsocly := Convert( slices, 887, ( -9, -8, -7 ) );
            rec.jlseg := Convert_Jlseg_Type( Get( slices, 888 ));
            rec.jlgold := Convert( slices, 889, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlrgsc := Convert_Jlrgsc_Type( Get( slices, 890 ));
            rec.jlisco := Convert( slices, 891 );
            rec.jlcssm := Convert( slices, 892, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlcssf := Convert( slices, 893, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlhgs := Convert( slices, 894, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlsec := Convert_Jlsec_Type( Get( slices, 895 ));
            rec.norgm := Convert( slices, 896, ( -9, -8, -7 ) );
            rec.norga := Convert( slices, 897, ( -9, -8, -7 ) );
            rec.vote := Convert_Vote_Type( Get( slices, 898 ));
            rec.fimnp := Convert( slices, 899, ( -9.0, -8.0, -7.0 ) );
            rec.fimnb := Convert( slices, 900, ( -9.0, -8.0, -7.0 ) );
            rec.fimni := Convert( slices, 901, ( -9.0, -8.0, -7.0 ) );
            rec.fimnt := Convert( slices, 902, ( -9.0, -8.0, -7.0 ) );
            rec.fimnl := Convert( slices, 903, ( -9.0, -8.0, -7.0 ) );
            rec.fimnnl := Convert( slices, 904, ( -9.0, -8.0, -7.0 ) );
            rec.fimn := Convert( slices, 905, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrl := Convert( slices, 906, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrnl := Convert( slices, 907, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrp := Convert( slices, 908, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrb := Convert( slices, 909, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrt := Convert( slices, 910, ( -9.0, -8.0, -7.0 ) );
            rec.fiyri := Convert( slices, 911, ( -9.0, -8.0, -7.0 ) );
            rec.fiyr := Convert( slices, 912, ( -9.0, -8.0, -7.0 ) );
            rec.fihhmn := Convert( slices, 913, ( -9.0, -8.0, -7.0 ) );
            rec.hlghq1 := Convert( slices, 914, ( -9, -8, -7 ) );
            rec.hlghq2 := Convert( slices, 915, ( -9, -8, -7 ) );
            rec.spjb := Convert_Spjb_Type( Get( slices, 916 ));
            rec.spsoc := Convert( slices, 917, ( -9.0, -8.0 ) );
            rec.spjbhr := Convert( slices, 918, ( -9, -8, -7 ) );
            rec.spjbot := Convert( slices, 919, ( -9, -8, -7 ) );
            rec.sppayg := Convert( slices, 920, ( -9.0, -8.0, -7.0 ) );
            rec.spjbyr := Convert( slices, 921, ( -9, -8, -7 ) );
            rec.lrwght := Convert( slices, 922 );
            rec.lewght := Convert( slices, 923 );
            rec.xrwght := Convert( slices, 924 );
            rec.xewght := Convert( slices, 925 );
            rec.j2payi := Convert( slices, 926, ( -9, -8, -7, -3, -2, -1 ) );
            rec.fiyrdii := Convert_Fiyrdii_Type( Get( slices, 927 ));
            rec.prearni := Convert( slices, 928, ( -9, -8, -2, -1 ) );
            rec.prfitbi := Convert_Prfitbi_Type( Get( slices, 929 ));
            rec.paygui := Convert_Fimnbi_Type( Get( slices, 930 ));
            rec.paynui := Convert_Fimnbi_Type( Get( slices, 931 ));
            rec.paygti := Convert_Fimnbi_Type( Get( slices, 932 ));
            rec.paygli := Convert_Fimnbi_Type( Get( slices, 933 ));
            rec.paynti := Convert_Fimnbi_Type( Get( slices, 934 ));
            rec.paynli := Convert_Fimnbi_Type( Get( slices, 935 ));
            rec.jsprofi := Convert_Fimnbi_Type( Get( slices, 936 ));
            rec.jspaygi := Convert_Fimnbi_Type( Get( slices, 937 ));
            rec.fimnpi := Convert_Fimnbi_Type( Get( slices, 938 ));
            rec.fimnbi := Convert_Fimnbi_Type( Get( slices, 939 ));
            rec.fimnii := Convert_Fimnii_Type( Get( slices, 940 ));
            rec.fimnti := Convert_Fimnii_Type( Get( slices, 941 ));
            rec.fimnnli := Convert_Fimnbi_Type( Get( slices, 942 ));
            rec.fimnli := Convert_Fimnbi_Type( Get( slices, 943 ));
            rec.fimnthi := Convert_Fimnii_Type( Get( slices, 944 ));
            rec.fiyrli := Convert_Fimnbi_Type( Get( slices, 945 ));
            rec.fiyrnli := Convert_Fimnbi_Type( Get( slices, 946 ));
            rec.fiyrpi := Convert_Fimnii_Type( Get( slices, 947 ));
            rec.fiyrbi := Convert_Fimnbi_Type( Get( slices, 948 ));
            rec.fiyrti := Convert_Fimnbi_Type( Get( slices, 949 ));
            rec.fiyrii := Convert_Fimnbi_Type( Get( slices, 950 ));
            rec.fiyeari := Convert_Fimnbi_Type( Get( slices, 951 ));
            rec.sppaygi := Convert_Prfitbi_Type( Get( slices, 952 ));
            rec.fihhmni := Convert_Fihhmni_Type( Get( slices, 953 ));
            rec.event1 := Convert( slices, 954, ( -9, -8, -7, -1 ) );
            rec.event1s := Convert( slices, 955, ( -9, -8, -7 ) );
            rec.event2 := Convert( slices, 956, ( -9, -8, -7, -1 ) );
            rec.event2s := Convert( slices, 957, ( -9, -8, -7 ) );
            rec.event3 := Convert( slices, 958, ( -9, -8, -7, -1 ) );
            rec.event3s := Convert( slices, 959, ( -9, -8, -7 ) );
            rec.event4 := Convert( slices, 960, ( -9, -8, -7, -1 ) );
            rec.event4s := Convert( slices, 961, ( -9, -8, -7 ) );
            rec.mrjend := Convert( slices, 962, ( -9, -8, -7, -3, -2, -1 ) );
            rec.mrjsoc := Convert( slices, 963, ( -9, -8, -7, -3 ) );
            rec.mrjsic := Convert( slices, 964, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjsemp := Convert_Mrjsemp_Type( Get( slices, 965 ));
            rec.mrjboss := Convert_Mrjboss_Type( Get( slices, 966 ));
            rec.mrjmngr := Convert_Mrjmngr_Type( Get( slices, 967 ));
            rec.mrjsize := Convert_Mrjsize_Type( Get( slices, 968 ));
            rec.mrjseg := Convert_Maseg_Type( Get( slices, 969 ));
            rec.mrjgold := Convert( slices, 970, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjrgsc := Convert_Margsc_Type( Get( slices, 971 ));
            rec.mrjisco := Convert( slices, 972 );
            rec.mrjcssm := Convert( slices, 973, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjcssf := Convert( slices, 974, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjhgs := Convert( slices, 975, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjsec := Convert_J1sec_Type( Get( slices, 976 ));
            rec.doiy4 := Convert( slices, 977, ( -9, -8, -7, -2, -1 ) );
            rec.plnowy4 := Convert( slices, 978, ( -9, -8, -7, -2, -1 ) );
            rec.edendy4 := Convert( slices, 979, ( -9, -8, -7, -3, -2, -1 ) );
            rec.mlchy4 := Convert( slices, 980, ( -9, -8, -7, -2, -1 ) );
            rec.yr2uk4 := Convert( slices, 981, ( -9, -8, -7, -2, -1 ) );
            rec.jbbgy4 := Convert( slices, 982, ( -9, -8, -7, -2, -1 ) );
            rec.jsprby4 := Convert( slices, 983, ( -9, -8, -7, -2, -1 ) );
            rec.jsprey4 := Convert( slices, 984, ( -9, -8, -7, -2, -1 ) );
            rec.jspyby4 := Convert( slices, 985, ( -9, -8, -7, -2, -1 ) );
            rec.jspyey4 := Convert( slices, 986, ( -9, -8, -7, -2, -1 ) );
            rec.jsbgy4 := Convert( slices, 987, ( -9, -8, -7, -2, -1 ) );
            rec.cjsbgy4 := Convert( slices, 988, ( -9, -8, -7, -2, -1 ) );
            rec.jlend4 := Convert( slices, 989, ( -9, -8, -7, -2, -1 ) );
            rec.penb4y4 := Convert( slices, 990, ( -9, -8, -7, -2, -1 ) );
            rec.penyr4 := Convert( slices, 991, ( -9, -8, -7, -2, -1 ) );
            rec.presby4 := Convert( slices, 992, ( -9, -8, -7, -2, -1 ) );
            rec.prjbby4 := Convert( slices, 993, ( -9, -8, -7, -2, -1 ) );
            rec.neyrjn4 := Convert( slices, 994, ( -9, -8, -7, -2, -1 ) );
            rec.sppid := Convert( slices, 995 );
            rec.fpid := Convert( slices, 996 );
            rec.mpid := Convert( slices, 997 );
            rec.distmov := Convert( slices, 998, ( -9.0, -8.0, -7.0 ) );
            rec.region2 := Convert_Region2_Type( Get( slices, 999 ));
            rec.isced := Convert_Isced_Type( Get( slices, 1000 ));
            rec.casmin := Convert_Casmin_Type( Get( slices, 1001 ));
            rec.jbiscon := Convert( slices, 1002, ( -9, -8, -7, -2, -1 ) );
            rec.jliscon := Convert( slices, 1003, ( -9, -8, -7, -2, -1 ) );
            rec.mrjiscn := Convert( slices, 1004, ( -9, -8, -7, -2, -1 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Indresp_component ).start_pos = 0 ) then
               index.pointers( Indresp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Indresp_component ).counter := index.pointers( Indresp_component ).counter + 1;
            Put_Index( index_map, index );
            Indresp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Indresp_IO.Close( bin_file );
   end Create_Indresp_Wave_E;




   procedure Create_Indsamp_Wave_E( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Indsamp_IO.File_Type;
      rec         : Indsamp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Indsamp_IO.Create (bin_file, Indsamp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.pid := Convert( slices, 3 );
            rec.iviow4 := Convert_Iviow4_Type( Get( slices, 4 ));
            rec.ivievr := Convert_Ivievr_Type( Get( slices, 5 ));
            rec.ivelig := Convert_Ivelig_Type( Get( slices, 6 ));
            rec.hhmem := Convert_Hhmem_Type( Get( slices, 7 ));
            rec.newhy := Convert_Newhy_Type( Get( slices, 8 ));
            rec.nemnjn := Convert_Nemnjn_Type( Get( slices, 9 ));
            rec.neyrjn := Convert( slices, 10, ( -9, -8, -2, -1 ) );
            rec.lvwhy := Convert_Lvwhy_Type( Get( slices, 11 ));
            rec.lvmn := Convert_Lvmn_Type( Get( slices, 12 ));
            rec.lvyr := Convert( slices, 13, ( -9, -8, -2, -1 ) );
            rec.lvloc := Convert_Lvloc_Type( Get( slices, 14 ));
            rec.ivfio := Convert_Ivfio_Type( Get( slices, 15 ));
            rec.ivrref := Convert_Ivrref_Type( Get( slices, 16 ));
            rec.ivireis := Convert_Ivireis_Type( Get( slices, 17 ));
            rec.finloc := Convert_Finloc_Type( Get( slices, 18 ));
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 19 ));
            rec.sampst := Convert_Sampst_Type( Get( slices, 20 ));
            rec.movest := Convert_Movest_Type( Get( slices, 21 ));
            rec.chppid := Convert( slices, 21 );
            rec.lewght := Convert( slices, 22, ( -9.0, -8.0, -1.0 ) );
            rec.lrwght := Convert( slices, 23, ( -9.0, -8.0, -1.0 ) );
            rec.neyrjn4 := Convert( slices, 24, ( -9, -8, -7, -2, -1 ) );
            rec.lvyr4 := Convert( slices, 25, ( -9, -8, -7, -2, -1 ) );
            rec.distmov := Convert( slices, 26, ( -9.0, -8.0 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Indsamp_component ).start_pos = 0 ) then
               index.pointers( Indsamp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Indsamp_component ).counter := index.pointers( Indsamp_component ).counter + 1;
            Put_Index( index_map, index );
            Indsamp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Indsamp_IO.Close( bin_file );
   end Create_Indsamp_Wave_E;




   procedure Create_Jobhist_Wave_E( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Jobhist_IO.File_Type;
      rec         : Jobhist_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Jobhist_IO.Create (bin_file, Jobhist_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.jhstat := Convert_Jhstat_Type( Get( slices, 3 ));
            rec.jhbgd := Convert( slices, 4, ( -9, -8, -7, -2, -1 ) );
            rec.jhbgm := Convert_Jbbgm1_Type( Get( slices, 5 ));
            rec.jhbgy := Convert( slices, 6, ( -9, -8, -2, -1 ) );
            rec.jspno := Convert( slices, 7 );
            rec.jhsoc := Convert( slices, 8, ( -9, -8, -2, -1 ) );
            rec.jhsemp := Convert_Jhsemp_Type( Get( slices, 9 ));
            rec.jhboss := Convert_Bscon_Type( Get( slices, 10 ));
            rec.jhsect := Convert_Jhsect_Type( Get( slices, 11 ));
            rec.jhmngr := Convert_Jhmngr_Type( Get( slices, 12 ));
            rec.jhpldf := Convert_Jhpldf_Type( Get( slices, 13 ));
            rec.jhsic := Convert( slices, 14, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.jhsize := Convert_Jhsize_Type( Get( slices, 15 ));
            rec.jhpayl := Convert( slices, 16, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhpylw := Convert( slices, 17, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.jhpylg := Convert_Jhpylg_Type( Get( slices, 18 ));
            rec.jhstpy := Convert_Jhstpy_Type( Get( slices, 19 ));
            rec.jblky := Convert_Jblky_Type( Get( slices, 20 ));
            rec.jhendd := Convert( slices, 21, ( -9, -8, -7, -2, -1 ) );
            rec.jhendm := Convert_Jbbgm1_Type( Get( slices, 22 ));
            rec.jhendy := Convert( slices, 23, ( -9, -8, -2, -1 ) );
            rec.jha9ly := Convert_Jha9ly_Type( Get( slices, 24 ));
            rec.jhseg := Convert_Jhseg_Type( Get( slices, 25 ));
            rec.jhgold := Convert( slices, 26, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhrgsc := Convert_Jhrgsc_Type( Get( slices, 27 ));
            rec.jhisco := Convert( slices, 28, ( -9, -8 ) );
            rec.jhcssm := Convert( slices, 29, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhcssf := Convert( slices, 30, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhhgs := Convert( slices, 31, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhsec := Convert_Jhsec_Type( Get( slices, 32 ));
            rec.jhspw := Convert( slices, 33, ( -9.0, -8.0 ) );
            rec.jhgpay := Convert( slices, 34, ( -9.0, -8.0, -7.0 ) );
            rec.jhnpay := Convert( slices, 35, ( -9.0, -8.0, -7.0, -1.0 ) );
            rec.jhgpayi := Convert_Jhgpayi_Type( Get( slices, 36 ));
            rec.jhnpayi := Convert_Jhgpayi_Type( Get( slices, 37 ));
            rec.jhbgy4 := Convert( slices, 38, ( -9, -8, -7, -2, -1 ) );
            rec.jhendy4 := Convert( slices, 39, ( -9, -8, -7, -2, -1 ) );
            rec.pid := Convert( slices, 40 );
            rec.jhiscon := Convert( slices, 41, ( -9, -8, -7, -2, -1 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Jobhist_component ).start_pos = 0 ) then
               index.pointers( Jobhist_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Jobhist_component ).counter := index.pointers( Jobhist_component ).counter + 1;
            Put_Index( index_map, index );
            Jobhist_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Jobhist_IO.Close( bin_file );
   end Create_Jobhist_Wave_E;




   procedure Create_Youth_Wave_E( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Youth_IO.File_Type;
      rec         : Youth_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Youth_IO.Create (bin_file, Youth_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.pno := Convert( slices, 1 );
            rec.ypdobm := Convert_Ypdobm_Type( Get( slices, 2 ));
            rec.ypdoby := Convert( slices, 3, ( -9, -8, -2, -1 ) );
            rec.ypsex := Convert_Ypsex_Type( Get( slices, 4 ));
            rec.yptvbr := Convert_Ypbeau_Type( Get( slices, 5 ));
            rec.ytvhrs := Convert_Ytvhrs_Type( Get( slices, 6 ));
            rec.ytvlmt := Convert_Ytvlmt_Type( Get( slices, 7 ));
            rec.ytvstp := Convert_Ytvlmt_Type( Get( slices, 8 ));
            rec.ypcomp := Convert_Ypcomp_Type( Get( slices, 9 ));
            rec.yppals := Convert_Yppalo_Type( Get( slices, 10 ));
            rec.yputel := Convert_Yputel_Type( Get( slices, 11 ));
            rec.yplate := Convert_Yplate_Type( Get( slices, 12 ));
            rec.ypargm := Convert_Ypargm_Type( Get( slices, 13 ));
            rec.ypargf := Convert_Ypargf_Type( Get( slices, 14 ));
            rec.yptlkm := Convert_Ypargm_Type( Get( slices, 15 ));
            rec.yptlkf := Convert_Ypargf_Type( Get( slices, 16 ));
            rec.yptlkp := Convert_Yptlkp_Type( Get( slices, 17 ));
            rec.ypnpal := Convert( slices, 18, ( -9, -8, -2, -1 ) );
            rec.ypfght := Convert_Ypfght_Type( Get( slices, 19 ));
            rec.ypeatn := Convert_Ypeatn_Type( Get( slices, 20 ));
            rec.yppkml := Convert( slices, 21, ( -9, -2, -1 ) );
            rec.yppkmp := Convert( slices, 22, ( -9, -2, -1 ) );
            rec.ypbeau := Convert_Ypbeau_Type( Get( slices, 23 ));
            rec.ypdklm := Convert_Ypdklm_Type( Get( slices, 24 ));
            rec.ypsmev := Convert_Ypbeau_Type( Get( slices, 25 ));
            rec.ypsmag := Convert( slices, 26, ( -9, -8, -2, -1 ) );
            rec.ypsmof := Convert_Ypsmof_Type( Get( slices, 27 ));
            rec.ypsmlw := Convert( slices, 28, ( -9, -8, -2, -1 ) );
            rec.ypsmyr := Convert( slices, 29, ( -9, -8, -2, -1 ) );
            rec.ypsmpa := Convert_Ypbeau_Type( Get( slices, 30 ));
            rec.ypnosm := Convert_Ypnosm_Type( Get( slices, 31 ));
            rec.ypedsm := Convert_Ypdgwh_Type( Get( slices, 32 ));
            rec.ypsmop := Convert_Ypsmop_Type( Get( slices, 33 ));
            rec.ypdgsc := Convert_Ypbeau_Type( Get( slices, 34 ));
            rec.ypdgpa := Convert_Ypbeau_Type( Get( slices, 35 ));
            rec.ypdgwh := Convert_Ypdgwh_Type( Get( slices, 36 ));
            rec.ypdgfr := Convert_Ypdgfr_Type( Get( slices, 37 ));
            rec.ypdgyr := Convert_Ypbeau_Type( Get( slices, 38 ));
            rec.ypnodg := Convert_Ypnodg_Type( Get( slices, 39 ));
            rec.ypophd := Convert_Ypopfj_Type( Get( slices, 40 ));
            rec.ypopha := Convert_Ypopfj_Type( Get( slices, 41 ));
            rec.ypophe := Convert_Ypopfj_Type( Get( slices, 42 ));
            rec.ypophc := Convert_Ypopfj_Type( Get( slices, 43 ));
            rec.ypmenu := Convert_Ypmenu_Type( Get( slices, 44 ));
            rec.yphlta := Convert_Yphlta_Type( Get( slices, 45 ));
            rec.yphltb := Convert_Yphltb_Type( Get( slices, 46 ));
            rec.ypsad := Convert_Ypsad_Type( Get( slices, 47 ));
            rec.ypwor := Convert_Ypwor_Type( Get( slices, 48 ));
            rec.ypbull := Convert_Ypbull_Type( Get( slices, 49 ));
            rec.yplone := Convert_Ypbored_Type( Get( slices, 50 ));
            rec.ypesta := Convert_Ypesta_Type( Get( slices, 51 ));
            rec.ypestb := Convert_Ypesta_Type( Get( slices, 52 ));
            rec.ypestc := Convert_Ypesta_Type( Get( slices, 53 ));
            rec.ypestd := Convert_Ypesta_Type( Get( slices, 54 ));
            rec.ypeste := Convert_Ypesta_Type( Get( slices, 55 ));
            rec.ypestf := Convert_Ypesta_Type( Get( slices, 56 ));
            rec.ypestg := Convert_Ypesta_Type( Get( slices, 57 ));
            rec.yphsw := Convert_Yphap_Type( Get( slices, 58 ));
            rec.yphap := Convert_Yphap_Type( Get( slices, 59 ));
            rec.yphfm := Convert_Yphap_Type( Get( slices, 60 ));
            rec.yphfr := Convert_Yphap_Type( Get( slices, 61 ));
            rec.yphlf := Convert_Yphap_Type( Get( slices, 62 ));
            rec.ypopla := Convert_Ypopfb_Type( Get( slices, 63 ));
            rec.ypopff := Convert_Ypopfb_Type( Get( slices, 64 ));
            rec.ypopfb := Convert_Ypopfb_Type( Get( slices, 65 ));
            rec.ypoplb := Convert_Ypopfb_Type( Get( slices, 66 ));
            rec.ypoplc := Convert_Ypopfb_Type( Get( slices, 67 ));
            rec.ypvte6 := Convert_Ypvte6_Type( Get( slices, 68 ));
            rec.ypvte3 := Convert_Ypvte3_Type( Get( slices, 69 ));
            rec.ypoprl := Convert_Ypoprl_Type( Get( slices, 70 ));
            rec.ypnbks := Convert( slices, 71, ( -9, -8, -2, -1 ) );
            rec.ypopsc := Convert_Ypopsc_Type( Get( slices, 72 ));
            rec.yppasc := Convert_Yppasc_Type( Get( slices, 73 ));
            rec.yplvsc := Convert_Yplvsc_Type( Get( slices, 74 ));
            rec.yplvhm := Convert( slices, 75, ( -9, -8, -2, -1 ) );
            rec.ypamar := Convert( slices, 76, ( -9, -8, -2, -1 ) );
            rec.ypapar := Convert( slices, 77, ( -9, -8, -2, -1 ) );
            rec.ypwhrs := Convert( slices, 78, ( -9, -8, -2, -1 ) );
            rec.yppay := Convert( slices, 79, ( -9, -8, -2, -1 ) );
            rec.ypsoc := Convert( slices, 80, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.ypsocy := Convert_Ypsocy_Type( Get( slices, 81 ));
            rec.ypjbqa := Convert_Ypjbqa_Type( Get( slices, 82 ));
            rec.ypjbqb := Convert_Ypjbqa_Type( Get( slices, 83 ));
            rec.ypjbqc := Convert_Ypjbqa_Type( Get( slices, 84 ));
            rec.ypjbqd := Convert_Ypjbqa_Type( Get( slices, 85 ));
            rec.ypjbqe := Convert_Ypjbqa_Type( Get( slices, 86 ));
            rec.ypjbqt := Convert_Ypjbqt_Type( Get( slices, 87 ));
            rec.ypevnt1 := Convert( slices, 88, ( -9, -8, -2, -1 ) );
            rec.ypevnt2 := Convert( slices, 89, ( -9, -8, -2, -1 ) );
            rec.ypevnt3 := Convert( slices, 90, ( -9, -8, -2, -1 ) );
            rec.ypevnt4 := Convert( slices, 91, ( -9, -8, -2, -1 ) );
            rec.ypwght := Convert( slices, 92 );
            rec.hid := Convert( slices, 93 );
            rec.ypdoby4 := Convert( slices, 94, ( -9, -8, -7, -2, -1 ) );
            rec.pid := Convert( slices, 95 );
            rec.fnspno := Convert( slices, 96, ( -9, -8 ) );
            rec.fnspid := Convert( slices, 97, ( -9.0, -8.0 ) );
            rec.mnspno := Convert( slices, 98, ( -9, -8 ) );
            rec.mnspid := Convert( slices, 99, ( -9.0, -8.0 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Youth_component ).start_pos = 0 ) then
               index.pointers( Youth_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Youth_component ).counter := index.pointers( Youth_component ).counter + 1;
            Put_Index( index_map, index );
            Youth_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Youth_IO.Close( bin_file );
   end Create_Youth_Wave_E;




   procedure Create_Egoalt_Wave_F( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Egoalt_IO.File_Type;
      rec         : Egoalt_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Egoalt_IO.Create (bin_file, Egoalt_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.opno := Convert( slices, 3, (  1 .. 0 => -9 ) );
            rec.rel := Convert_Rel_Type( Get( slices, 4 ));
            rec.sex := Convert_Sex_Type( Get( slices, 5 ));
            rec.osex := Convert_Hgsex_Type( Get( slices, 6 ));
            rec.lwstat := Convert_Lwstat_Type( Get( slices, 7 ));
            rec.nwstat := Convert_Nwstat_Type( Get( slices, 8 ));
            rec.pid := Convert( slices, 9 );
            rec.opid := Convert( slices, 10 );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Egoalt_component ).start_pos = 0 ) then
               index.pointers( Egoalt_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Egoalt_component ).counter := index.pointers( Egoalt_component ).counter + 1;
            Put_Index( index_map, index );
            Egoalt_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Egoalt_IO.Close( bin_file );
   end Create_Egoalt_Wave_F;




   procedure Create_Hhresp_Wave_F( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Hhresp_IO.File_Type;
      rec         : Hhresp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Hhresp_IO.Create (bin_file, Hhresp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.hhdoi := Convert( slices, 2, ( -9, -8, -7 ) );
            rec.hhmoi := Convert_Doim_Type( Get( slices, 3 ));
            rec.hhyoi := Convert( slices, 4, ( -9, -8, -7 ) );
            rec.hstype := Convert_Hstype_Type( Get( slices, 5 ));
            rec.hsrins := Convert_Cjsck2_Type( Get( slices, 6 ));
            rec.hsroom := Convert( slices, 7, ( -9, -8, -7, -2, -1 ) );
            rec.hsownd := Convert_Hsownd_Type( Get( slices, 8 ));
            rec.hsowr1 := Convert( slices, 9, ( -9, -8, -7, -2, -1 ) );
            rec.hsowr2 := Convert( slices, 10, ( -9, -8, -7, -2, -1 ) );
            rec.mghave := Convert_Mghave_Type( Get( slices, 11 ));
            rec.hsowrp := Convert_Bscon_Type( Get( slices, 12 ));
            rec.mgynot := Convert_Mgynot_Type( Get( slices, 13 ));
            rec.hscost := Convert( slices, 14, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.mgly := Convert_Bscon_Type( Get( slices, 15 ));
            rec.hsivw5 := Convert( slices, 16, ( -9, -8, -7, -2, -1 ) );
            rec.mgxtra := Convert_Bscon_Type( Get( slices, 17 ));
            rec.mgnew := Convert( slices, 18, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.mgxty1 := Convert_Mgxty1_Type( Get( slices, 19 ));
            rec.mgxty2 := Convert_Mgxty2_Type( Get( slices, 20 ));
            rec.mgxty3 := Convert_Mgxty3_Type( Get( slices, 21 ));
            rec.mgxty4 := Convert_Mgxty4_Type( Get( slices, 22 ));
            rec.mgxty5 := Convert_Mgxty5_Type( Get( slices, 23 ));
            rec.mgold := Convert( slices, 24, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.mglife := Convert( slices, 25, ( -9, -8, -7, -2, -1 ) );
            rec.mgtype := Convert_Mgtype_Type( Get( slices, 26 ));
            rec.xpmg := Convert( slices, 27, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.xpmg1 := Convert_Bscon_Type( Get( slices, 28 ));
            rec.xpmg2 := Convert_Bscon_Type( Get( slices, 29 ));
            rec.xpmg3 := Convert_Bscon_Type( Get( slices, 30 ));
            rec.xpmg4 := Convert_Bscon_Type( Get( slices, 31 ));
            rec.mgyr0 := Convert( slices, 32, ( -9, -8, -7, -2, -1 ) );
            rec.hsyr0 := Convert( slices, 33, ( -9, -8, -7, -1 ) );
            rec.hsval := Convert( slices, 34, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.mgtot := Convert( slices, 35, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.hsjb := Convert_Bscon_Type( Get( slices, 36 ));
            rec.rentp1 := Convert( slices, 37, ( -9, -8, -7, -2, -1 ) );
            rec.rentp2 := Convert( slices, 38, ( -9, -8, -7, -2, -1 ) );
            rec.rentll := Convert_Rentll_Type( Get( slices, 39 ));
            rec.rentf := Convert_Rentf_Type( Get( slices, 40 ));
            rec.rent := Convert( slices, 41, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.rentw := Convert( slices, 42, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.rent1 := Convert_Rent1_Type( Get( slices, 43 ));
            rec.rent2 := Convert_Rent1_Type( Get( slices, 44 ));
            rec.rent3 := Convert_Bscon_Type( Get( slices, 45 ));
            rec.rent4 := Convert_Bscon_Type( Get( slices, 46 ));
            rec.rent5 := Convert_Bscon_Type( Get( slices, 47 ));
            rec.rent6 := Convert_Bscon_Type( Get( slices, 48 ));
            rec.rent7 := Convert_Rent7_Type( Get( slices, 49 ));
            rec.rent8 := Convert_Coh1mr_Type( Get( slices, 50 ));
            rec.renthb := Convert_Renthb_Type( Get( slices, 51 ));
            rec.rentg := Convert( slices, 52, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.rentgw := Convert( slices, 53, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.xphsdf := Convert( slices, 54, ( -9, -8, -7, -2, -1 ) );
            rec.xphsd1 := Convert_Bscon_Type( Get( slices, 55 ));
            rec.xphsd2 := Convert_Bscon_Type( Get( slices, 56 ));
            rec.xphsdb := Convert_Bscon_Type( Get( slices, 57 ));
            rec.hskch := Convert_Boolean_With_Missing( Get( slices, 58 ));
            rec.hskchs := Convert_Boolean_With_Missing( Get( slices, 59 ));
            rec.hsbth := Convert_Boolean_With_Missing( Get( slices, 60 ));
            rec.hsbths := Convert_Boolean_With_Missing( Get( slices, 61 ));
            rec.hstlt := Convert_Boolean_With_Missing( Get( slices, 62 ));
            rec.hstlts := Convert_Boolean_With_Missing( Get( slices, 63 ));
            rec.hsgdn := Convert_Boolean_With_Missing( Get( slices, 64 ));
            rec.hsgdns := Convert_Boolean_With_Missing( Get( slices, 65 ));
            rec.heatch := Convert_Bscon_Type( Get( slices, 66 ));
            rec.heatyp := Convert_Heatyp_Type( Get( slices, 67 ));
            rec.hsprbg := Convert_Boolean_With_Missing( Get( slices, 68 ));
            rec.hsprbh := Convert_Boolean_With_Missing( Get( slices, 69 ));
            rec.hsprbi := Convert_Boolean_With_Missing( Get( slices, 70 ));
            rec.hsprbj := Convert_Boolean_With_Missing( Get( slices, 71 ));
            rec.hsprbk := Convert_Boolean_With_Missing( Get( slices, 72 ));
            rec.hsprbl := Convert_Boolean_With_Missing( Get( slices, 73 ));
            rec.hsprbm := Convert_Boolean_With_Missing( Get( slices, 74 ));
            rec.hsprbn := Convert_Boolean_With_Missing( Get( slices, 75 ));
            rec.hsprbo := Convert_Boolean_With_Missing( Get( slices, 76 ));
            rec.hsprbp := Convert_Boolean_With_Missing( Get( slices, 77 ));
            rec.hsprbq := Convert_Boolean_With_Missing( Get( slices, 78 ));
            rec.hsctax := Convert_Hsctax_Type( Get( slices, 79 ));
            rec.cdhave := Convert_Bscon_Type( Get( slices, 80 ));
            rec.cdbght := Convert_Bscon_Type( Get( slices, 81 ));
            rec.cd1use := Convert_Cd1new_Type( Get( slices, 82 ));
            rec.cd1new := Convert( slices, 83, ( -9, -8, -7, -2, -1 ) );
            rec.cd2use := Convert_Cd1new_Type( Get( slices, 84 ));
            rec.cd2new := Convert( slices, 85, ( -9, -8, -7, -2, -1 ) );
            rec.cd4use := Convert_Cd1new_Type( Get( slices, 86 ));
            rec.cd4new := Convert( slices, 87, ( -9, -8, -7, -2, -1 ) );
            rec.cd6use := Convert_Cd1new_Type( Get( slices, 88 ));
            rec.cd6new := Convert( slices, 89, ( -9, -8, -7, -2, -1 ) );
            rec.cd7use := Convert_Cd1new_Type( Get( slices, 90 ));
            rec.cd7new := Convert( slices, 91, ( -9, -8, -7, -2, -1 ) );
            rec.cd8use := Convert_Cd1new_Type( Get( slices, 92 ));
            rec.cd8new := Convert( slices, 93, ( -9, -8, -7, -2, -1 ) );
            rec.cd9use := Convert_Cd1new_Type( Get( slices, 94 ));
            rec.cd9new := Convert( slices, 95, ( -9, -8, -7, -2, -1 ) );
            rec.cd10use := Convert_Cd10new_Type( Get( slices, 96 ));
            rec.cd10new := Convert( slices, 97, ( -9, -8, -7, -2, -1 ) );
            rec.cd11use := Convert_Cd10new_Type( Get( slices, 98 ));
            rec.cd11new := Convert( slices, 99, ( -9, -8, -7, -2, -1 ) );
            rec.cd12use := Convert_Cd10new_Type( Get( slices, 100 ));
            rec.cd12new := Convert( slices, 101, ( -9, -8, -7, -2, -1 ) );
            rec.cdnuxp := Convert( slices, 102, ( -9, -8, -7, -2, -1 ) );
            rec.hspc := Convert_Aglt20_Type( Get( slices, 103 ));
            rec.hswpc := Convert_Hswpc_Type( Get( slices, 104 ));
            rec.pcwhen := Convert_Pcwhen_Type( Get( slices, 105 ));
            rec.pcmodm := Convert_Boolean_With_Missing( Get( slices, 106 ));
            rec.pcnet := Convert_Boolean_With_Missing( Get( slices, 107 ));
            rec.pcusr1 := Convert( slices, 108, ( -9, -8, -7, -2, -1 ) );
            rec.pcusr2 := Convert( slices, 109, ( -9, -8, -7 ) );
            rec.pcusr3 := Convert( slices, 110, ( -9, -8, -7 ) );
            rec.pcusr4 := Convert( slices, 111, ( -9, -8, -7 ) );
            rec.pcusr5 := Convert( slices, 112, ( -9, -8, -7 ) );
            rec.pcusr6 := Convert( slices, 113, ( -9, -8, -7 ) );
            rec.pcuse1 := Convert_Boolean_With_Missing( Get( slices, 114 ));
            rec.pcuse2 := Convert_Boolean_With_Missing( Get( slices, 115 ));
            rec.pcuse3 := Convert_Boolean_With_Missing( Get( slices, 116 ));
            rec.pcuse4 := Convert_Boolean_With_Missing( Get( slices, 117 ));
            rec.pcuse5 := Convert_Boolean_With_Missing( Get( slices, 118 ));
            rec.pcuse6 := Convert_Boolean_With_Missing( Get( slices, 119 ));
            rec.pcuse7 := Convert_Boolean_With_Missing( Get( slices, 120 ));
            rec.pcuses := Convert_Pcoftn_Type( Get( slices, 121 ));
            rec.xphp := Convert_Bscon_Type( Get( slices, 122 ));
            rec.xphpdf := Convert_Xphpdf_Type( Get( slices, 123 ));
            rec.hscana := Convert_Boolean_With_Missing( Get( slices, 124 ));
            rec.hscnta := Convert_Boolean_With_Missing( Get( slices, 125 ));
            rec.hscanb := Convert_Boolean_With_Missing( Get( slices, 126 ));
            rec.hscntb := Convert_Boolean_With_Missing( Get( slices, 127 ));
            rec.hscanc := Convert_Boolean_With_Missing( Get( slices, 128 ));
            rec.hscntc := Convert_Boolean_With_Missing( Get( slices, 129 ));
            rec.hscand := Convert_Boolean_With_Missing( Get( slices, 130 ));
            rec.hscntd := Convert_Boolean_With_Missing( Get( slices, 131 ));
            rec.hscane := Convert_Boolean_With_Missing( Get( slices, 132 ));
            rec.hscnte := Convert_Boolean_With_Missing( Get( slices, 133 ));
            rec.hscanf := Convert_Boolean_With_Missing( Get( slices, 134 ));
            rec.hscntf := Convert_Boolean_With_Missing( Get( slices, 135 ));
            rec.xpfood := Convert( slices, 136, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ncars := Convert_Ncars_Type( Get( slices, 137 ));
            rec.carown := Convert_Carown_Type( Get( slices, 138 ));
            rec.ivh1 := Convert( slices, 139, ( -9, -8, -7, -1 ) );
            rec.ivh2 := Convert( slices, 140, ( -9, -8, -7 ) );
            rec.ivh3 := Convert( slices, 141, ( -9, -8, -7 ) );
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 142 ));
            rec.hhdc := Convert_Hhdc_Type( Get( slices, 143 ));
            rec.xhwght := Convert( slices, 144, ( -9.0, -8.0 ) );
            rec.hhsize := Convert( slices, 145, ( -9, -8 ) );
            rec.hhtype := Convert_Hhtype_Type( Get( slices, 146 ));
            rec.region := Convert_Region_Type( Get( slices, 147 ));
            rec.nch02 := Convert( slices, 148, ( -9, -8 ) );
            rec.nch34 := Convert( slices, 149, ( -9, -8 ) );
            rec.nch511 := Convert( slices, 150, ( -9, -8 ) );
            rec.nch1215 := Convert( slices, 151, ( -9, -8 ) );
            rec.nch1618 := Convert( slices, 152, ( -9, -8 ) );
            rec.nkids := Convert( slices, 153, ( -9, -8 ) );
            rec.nwed := Convert( slices, 154, ( -9, -8 ) );
            rec.npens := Convert( slices, 155, ( -9, -8 ) );
            rec.na75pl := Convert( slices, 156, ( -9, -8 ) );
            rec.agechy := Convert( slices, 157, ( -9, -8 ) );
            rec.ncouple := Convert( slices, 158, ( -9, -8 ) );
            rec.nonepar := Convert( slices, 159, ( -9, -8 ) );
            rec.nemp := Convert( slices, 160, ( -9, -8 ) );
            rec.nwage := Convert( slices, 161, ( -9, -8 ) );
            rec.tenure := Convert_Tenure_Type( Get( slices, 162 ));
            rec.xphsn := Convert( slices, 163, ( -9.0, -8.0, -7.0 ) );
            rec.xphsg := Convert( slices, 164, ( -9.0, -8.0, -7.0 ) );
            rec.fieqfcb := Convert( slices, 165, ( -9.0, -8.0 ) );
            rec.fieqfca := Convert( slices, 166, ( -9.0, -8.0 ) );
            rec.fihhyr := Convert( slices, 167, ( -9.0, -8.0, -7.0 ) );
            rec.fihhmn := Convert( slices, 168, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyl := Convert( slices, 169, ( -9.0, -8.0, -7.0 ) );
            rec.fihhynl := Convert( slices, 170, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyp := Convert( slices, 171, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyb := Convert( slices, 172, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyt := Convert( slices, 173, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyi := Convert( slices, 174, ( -9.0, -8.0, -7.0 ) );
            rec.fihhml := Convert( slices, 175, (  1 .. 0 => -9.0 ) );
            rec.fihhmnl := Convert( slices, 176, (  1 .. 0 => -9.0 ) );
            rec.fihhmp := Convert( slices, 177, (  1 .. 0 => -9.0 ) );
            rec.fihhmb := Convert( slices, 178, (  1 .. 0 => -9.0 ) );
            rec.fihhmt := Convert( slices, 179, (  1 .. 0 => -9.0 ) );
            rec.fihhmi := Convert( slices, 180, (  1 .. 0 => -9.0 ) );
            rec.hhmove := Convert_Hhmove_Type( Get( slices, 181 ));
            rec.mgnewi := Convert( slices, 182, ( -9, -8, -7, -2, -1 ) );
            rec.xpmgi := Convert( slices, 183, ( -9, -8, -7, -2, -1 ) );
            rec.hsvali := Convert( slices, 184, ( -9, -8, -7, -2, -1 ) );
            rec.renti := Convert( slices, 185, ( -9, -8, -7, -4, -3, -2, -1 ) );
            rec.rentgi := Convert( slices, 186, ( -9, -8, -7, -2, -1 ) );
            rec.xphsni := Convert_Jhgpayi_Type( Get( slices, 187 ));
            rec.xphsgi := Convert_Jhgpayi_Type( Get( slices, 188 ));
            rec.fihhmni := Convert_Fihhmni_Type( Get( slices, 189 ));
            rec.fihhmli := Convert_Fihhmbi_Type( Get( slices, 190 ));
            rec.fihmnli := Convert_Fihhmbi_Type( Get( slices, 191 ));
            rec.fihhmpi := Convert_Fihhmbi_Type( Get( slices, 192 ));
            rec.fihhmbi := Convert_Fihhmbi_Type( Get( slices, 193 ));
            rec.fihhmti := Convert_Fihhmbi_Type( Get( slices, 194 ));
            rec.fihhmii := Convert_Fihhmbi_Type( Get( slices, 195 ));
            rec.fihhyri := Convert_Fihhmbi_Type( Get( slices, 196 ));
            rec.fihhyli := Convert_Fihhmbi_Type( Get( slices, 197 ));
            rec.fihhyni := Convert_Fihhmbi_Type( Get( slices, 198 ));
            rec.fihhypi := Convert_Fihhmbi_Type( Get( slices, 199 ));
            rec.fihhybi := Convert_Fihhmbi_Type( Get( slices, 200 ));
            rec.fihhyti := Convert_Fihhmbi_Type( Get( slices, 201 ));
            rec.fihhyii := Convert_Fihhmbi_Type( Get( slices, 202 ));
            rec.hhyoi4 := Convert( slices, 203, ( -9, -8, -7, -2, -1 ) );
            rec.mgyr04 := Convert( slices, 204, ( -9, -8, -7, -2, -1 ) );
            rec.hsyr04 := Convert( slices, 205, ( -9, -8, -7, -2, -1 ) );
            rec.region2 := Convert_Region2_Type( Get( slices, 206 ));
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Hhresp_component ).start_pos = 0 ) then
               index.pointers( Hhresp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Hhresp_component ).counter := index.pointers( Hhresp_component ).counter + 1;
            Put_Index( index_map, index );
            Hhresp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Hhresp_IO.Close( bin_file );
   end Create_Hhresp_Wave_F;




   procedure Create_Hhsamp_Wave_F( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Hhsamp_IO.File_Type;
      rec         : Hhsamp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Hhsamp_IO.Create (bin_file, Hhsamp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.fid := Convert( slices, 2 );
            rec.ivnadd := Convert( slices, 3, ( -9.0, -8.0 ) );
            rec.ivia := Convert_Ivia_Type( Get( slices, 4 ));
--             rec.ivid := Convert( slices, 5 );
            rec.ivlnc := Convert( slices, 6, ( -9, -1 ) );
            rec.ivtnc := Convert( slices, 7, ( -9, -8, -1 ) );
            rec.iviam := Convert_Iviam_Type( Get( slices, 8 ));
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 9 ));
            rec.ivosmrh := Convert( slices, 10, ( -9, -8, -1 ) );
            rec.ivnsmrh := Convert( slices, 11, ( -9, -8, -1 ) );
            rec.ivrrefh := Convert_Ivrrefh_Type( Get( slices, 12 ));
            rec.ivisst := Convert_Ivisst_Type( Get( slices, 13 ));
            rec.ivconv := Convert_Ivconv_Type( Get( slices, 14 ));
            rec.ivreis := Convert_Ivreis_Type( Get( slices, 15 ));
            rec.hhdc := Convert_Hhdc_Type( Get( slices, 16 ));
            rec.xhwght := Convert( slices, 17, ( -9.0, -8.0, -1.0 ) );
            rec.region := Convert_Region_Type( Get( slices, 18 ));
            rec.hhmove := Convert_Hhmove_Type( Get( slices, 19 ));
            rec.ahid := Convert( slices, 20 );
            rec.strata := Convert( slices, 21, ( -9, -8, -1 ) );
            rec.psu := Convert( slices, 22, ( -9, -8, -1 ) );
            rec.region2 := Convert_Region2_Type( Get( slices, 23 ));
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Hhsamp_component ).start_pos = 0 ) then
               index.pointers( Hhsamp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Hhsamp_component ).counter := index.pointers( Hhsamp_component ).counter + 1;
            Put_Index( index_map, index );
            Hhsamp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Hhsamp_IO.Close( bin_file );
   end Create_Hhsamp_Wave_F;




   procedure Create_Income_Wave_F( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Income_IO.File_Type;
      rec         : Income_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Income_IO.Create (bin_file, Income_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.pno := Convert( slices, 1 );
            rec.ficode := Convert_Ficode_Type( Get( slices, 2 ));
            rec.nfr := Convert( slices, 3, (  1 .. 0 => -9 ) );
            rec.frall := Convert_Frall_Type( Get( slices, 4 ));
            rec.fr01 := Convert_Cd1own_Type( Get( slices, 5 ));
            rec.fr02 := Convert_Cd1own_Type( Get( slices, 6 ));
            rec.fr03 := Convert_Cd1own_Type( Get( slices, 7 ));
            rec.fr04 := Convert( slices, 8, ( -9, -8, -2, -1 ) );
            rec.fr05 := Convert_Cd1own_Type( Get( slices, 9 ));
            rec.fr06 := Convert_Cd1own_Type( Get( slices, 10 ));
            rec.fr07 := Convert_Cd1own_Type( Get( slices, 11 ));
            rec.fr08 := Convert_Cd1own_Type( Get( slices, 12 ));
            rec.fr09 := Convert_Cd1own_Type( Get( slices, 13 ));
            rec.fr10 := Convert_Cd1own_Type( Get( slices, 14 ));
            rec.fr11 := Convert_Cd1own_Type( Get( slices, 15 ));
            rec.fr12 := Convert_Cd1own_Type( Get( slices, 16 ));
            rec.fr13 := Convert_Cd1own_Type( Get( slices, 17 ));
            rec.fr14 := Convert_Cd1own_Type( Get( slices, 18 ));
            rec.fr15 := Convert_Cd1own_Type( Get( slices, 19 ));
            rec.fr16 := Convert_Cd1own_Type( Get( slices, 20 ));
            rec.fr17 := Convert_Cd1own_Type( Get( slices, 21 ));
            rec.frnow := Convert_Frnow_Type( Get( slices, 22 ));
            rec.frval := Convert( slices, 23, ( -9.0, -8.0, -3.0, -2.0, -1.0 ) );
            rec.frw := Convert( slices, 24, ( -9.0, -8.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.frjt := Convert_Frjt_Type( Get( slices, 25 ));
            rec.frjtpn := Convert( slices, 26, ( -9, -8, -2, -1 ) );
            rec.hid := Convert( slices, 27 );
            rec.fiseq := Convert( slices, 28 );
            rec.fim09l := Convert( slices, 29, ( -9.0, -8.0, -3.0 ) );
            rec.fim10l := Convert( slices, 30, ( -9.0, -8.0, -3.0 ) );
            rec.fim11l := Convert( slices, 31, ( -9.0, -8.0, -3.0 ) );
            rec.fim12l := Convert( slices, 32, ( -9.0, -8.0, -3.0 ) );
            rec.fim01t := Convert( slices, 33, ( -9.0, -8.0, -3.0 ) );
            rec.fim02t := Convert( slices, 34, ( -9.0, -8.0, -3.0 ) );
            rec.fim03t := Convert( slices, 35, ( -9.0, -8.0, -3.0 ) );
            rec.fim04t := Convert( slices, 36, ( -9.0, -8.0, -3.0 ) );
            rec.fim05t := Convert( slices, 37, ( -9.0, -8.0, -3.0 ) );
            rec.fim06t := Convert( slices, 38, ( -9.0, -8.0, -3.0 ) );
            rec.fim07t := Convert( slices, 39, ( -9.0, -8.0, -3.0 ) );
            rec.fim08t := Convert( slices, 40, ( -9.0, -8.0, -3.0 ) );
            rec.fim09t := Convert( slices, 41, ( -9.0, -8.0, -3.0 ) );
            rec.fim10t := Convert( slices, 42, ( -9.0, -8.0, -3.0 ) );
            rec.fim11t := Convert( slices, 43, ( -9.0, -8.0, -3.0 ) );
            rec.fim12t := Convert( slices, 44, ( -9.0, -8.0, -3.0 ) );
            rec.fim01n := Convert( slices, 45, ( -9.0, -8.0, -3.0 ) );
            rec.frjtvf := Convert_Frjtvf_Type( Get( slices, 46 ));
            rec.frvali := Convert( slices, 47, ( -9, -8, -3, -2, -1 ) );
            rec.pid := Convert( slices, 48 );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Income_component ).start_pos = 0 ) then
               index.pointers( Income_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Income_component ).counter := index.pointers( Income_component ).counter + 1;
            Put_Index( index_map, index );
            Income_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Income_IO.Close( bin_file );
   end Create_Income_Wave_F;




   procedure Create_Indall_Wave_F( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Indall_IO.File_Type;
      rec         : Indall_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Indall_IO.Create (bin_file, Indall_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.pid := Convert( slices, 3 );
            rec.iviow5 := Convert_Iviow4_Type( Get( slices, 4 ));
            rec.ivievr := Convert_Ivievr_Type( Get( slices, 5 ));
            rec.hhmem := Convert_Hhmem_Type( Get( slices, 6 ));
            rec.newhy := Convert_Newhy_Type( Get( slices, 7 ));
            rec.nemnjn := Convert_Nemnjn_Type( Get( slices, 8 ));
            rec.neyrjn := Convert( slices, 9, ( -9, -8, -2, -1 ) );
            rec.ivfio := Convert_Ivfio_Type( Get( slices, 10 ));
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 11 ));
            rec.iodc := Convert_Iodc_Type( Get( slices, 12 ));
            rec.hgr2r := Convert_Hgr2r_Type( Get( slices, 13 ));
            rec.hgsex := Convert_Hgsex_Type( Get( slices, 14 ));
            rec.hgbm := Convert_Hgbm_Type( Get( slices, 15 ));
            rec.hgby := Convert( slices, 16, ( -9, -8, -2, -1 ) );
            rec.mastat := Convert_Mastat_Type( Get( slices, 17 ));
            rec.hgspn := Convert( slices, 18, ( -9, -8, -2, -1 ) );
            rec.hgemp := Convert_Hgemp_Type( Get( slices, 19 ));
            rec.hgfno := Convert( slices, 20, ( -9, -8, -2, -1 ) );
            rec.hgmno := Convert( slices, 21, ( -9, -8, -2, -1 ) );
            rec.hgra := Convert( slices, 22, ( -9, -8, -2, -1 ) );
            rec.age := Convert( slices, 23, ( -9, -8, -2, -1 ) );
            rec.age12 := Convert( slices, 24, ( -9, -8, -2, -1 ) );
            rec.butype := Convert_Butype_Type( Get( slices, 25 ));
            rec.buno := Convert( slices, 26, ( -9, -8 ) );
            rec.nchild := Convert( slices, 27, ( -9, -8 ) );
            rec.depchl := Convert_Depchl_Type( Get( slices, 28 ));
            rec.hoh := Convert_Hoh_Type( Get( slices, 29 ));
            rec.rach16 := Convert_Hhch12_Type( Get( slices, 30 ));
            rec.agei := Convert_Agei_Type( Get( slices, 31 ));
            rec.lrwght := Convert( slices, 32, ( -9.0, -8.0 ) );
            rec.lewght := Convert( slices, 33, ( -9.0, -8.0 ) );
            rec.xrwght := Convert( slices, 34, ( -9.0, -8.0 ) );
            rec.xewght := Convert( slices, 35, ( -9.0, -8.0 ) );
            rec.movest := Convert_Movest_Type( Get( slices, 36 ));
            rec.sampst := Convert_Sampst_Type( Get( slices, 37 ));
            rec.neyrjn4 := Convert( slices, 38, ( -9, -8, -7, -2, -1 ) );
            rec.sppid := Convert( slices, 39 );
            rec.fpid := Convert( slices, 40 );
            rec.mpid := Convert( slices, 41 );
            rec.rapid := Convert( slices, 42 );
            rec.distmov := Convert( slices, 43, ( -9.0, -8.0 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Indall_component ).start_pos = 0 ) then
               index.pointers( Indall_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Indall_component ).counter := index.pointers( Indall_component ).counter + 1;
            Put_Index( index_map, index );
            Indall_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Indall_IO.Close( bin_file );
   end Create_Indall_Wave_F;




   procedure Create_Indresp_Wave_F( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Indresp_IO.File_Type;
      rec         : Indresp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Indresp_IO.Create (bin_file, Indresp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.doid := Convert( slices, 3, ( -9, -7 ) );
            rec.doim := Convert_Doim_Type( Get( slices, 4 ));
            rec.doiy := Convert( slices, 5, ( -9, -8 ) );
            rec.ivsoih := Convert( slices, 6, ( -9, -8 ) );
            rec.ivsoim := Convert( slices, 7, ( -9, -8 ) );
            rec.ivlyr := Convert( slices, 8, ( -9, -8, -7 ) );
            rec.ivievr := Convert_Ivievr_Type( Get( slices, 9 ));
            rec.lknbrd := Convert_Aidpl1_Type( Get( slices, 10 ));
            rec.lkmove := Convert_Lkmove_Type( Get( slices, 11 ));
            rec.lkmovy := Convert_Lkmovy_Type( Get( slices, 12 ));
            rec.plnew := Convert( slices, 13, ( -9, -8, -7, -2, -1 ) );
            rec.plnowm := Convert_Jbbgm1_Type( Get( slices, 14 ));
            rec.plnowy := Convert( slices, 15, ( -9, -8, -2, -1 ) );
            rec.movjb := Convert_Aidpl1_Type( Get( slices, 16 ));
            rec.movjba := Convert_Movjba_Type( Get( slices, 17 ));
            rec.movjbb := Convert_Movjba_Type( Get( slices, 18 ));
            rec.movjbc := Convert_Movjba_Type( Get( slices, 19 ));
            rec.movjbd := Convert_Movjba_Type( Get( slices, 20 ));
            rec.movjbe := Convert_Movjba_Type( Get( slices, 21 ));
            rec.movjbf := Convert_Movjba_Type( Get( slices, 22 ));
            rec.movjbg := Convert_Movjba_Type( Get( slices, 23 ));
            rec.movjbh := Convert_Movjba_Type( Get( slices, 24 ));
            rec.movjbi := Convert_Movjba_Type( Get( slices, 25 ));
            rec.movy1 := Convert_Movy1_Type( Get( slices, 26 ));
            rec.movy2 := Convert_Movy2_Type( Get( slices, 27 ));
            rec.dobm := Convert_Cjsem_Type( Get( slices, 28 ));
            rec.doby := Convert( slices, 29, ( -9, -8, -7, -2, -1 ) );
            rec.sex := Convert_Sex_Type( Get( slices, 30 ));
            rec.jbstat := Convert_Jbstat_Type( Get( slices, 31 ));
            rec.edlyr := Convert_Aidpl1_Type( Get( slices, 32 ));
            rec.edendm := Convert_Edendm_Type( Get( slices, 33 ));
            rec.edendy := Convert( slices, 34, ( -9, -8, -7, -3, -2, -1 ) );
            rec.edtype := Convert_Edtype_Type( Get( slices, 35 ));
            rec.qfx := Convert_Aidpl1_Type( Get( slices, 36 ));
            rec.qfxa := Convert_Qfa_Type( Get( slices, 37 ));
            rec.qfxb := Convert_Qfb_Type( Get( slices, 38 ));
            rec.qfxc := Convert_Qfc_Type( Get( slices, 39 ));
            rec.qfxd := Convert_Qfd_Type( Get( slices, 40 ));
            rec.qfxe := Convert_Qfe_Type( Get( slices, 41 ));
            rec.qfxf := Convert_Qff_Type( Get( slices, 42 ));
            rec.qfxg := Convert_Qfg_Type( Get( slices, 43 ));
            rec.qfxh := Convert_Qfh_Type( Get( slices, 44 ));
            rec.qfxi := Convert_Qfi_Type( Get( slices, 45 ));
            rec.qfxj := Convert_Qfj_Type( Get( slices, 46 ));
            rec.qfxk := Convert_Qfk_Type( Get( slices, 47 ));
            rec.qfxl := Convert_Qfl_Type( Get( slices, 48 ));
            rec.qfxm := Convert_Qfm_Type( Get( slices, 49 ));
            rec.qfxn := Convert_Qfn_Type( Get( slices, 50 ));
            rec.qfedx := Convert_Aidpl1_Type( Get( slices, 51 ));
            rec.qfedxa := Convert_Qfedd_Type( Get( slices, 52 ));
            rec.nqfexa := Convert( slices, 53, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxb := Convert_Qfede_Type( Get( slices, 54 ));
            rec.nqfexb := Convert( slices, 55, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxc := Convert_Qfedj_Type( Get( slices, 56 ));
            rec.nqfexc := Convert( slices, 57, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxd := Convert_Qfedxd_Type( Get( slices, 58 ));
            rec.qfedxe := Convert_Qfedk_Type( Get( slices, 59 ));
            rec.nqfexe := Convert( slices, 60, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxf := Convert_Qfedxf_Type( Get( slices, 61 ));
            rec.nqfexf := Convert( slices, 62, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxg := Convert_Qfedm_Type( Get( slices, 63 ));
            rec.nqfexg := Convert( slices, 64, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxh := Convert_Qfedxh_Type( Get( slices, 65 ));
            rec.nqfexh := Convert( slices, 66, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxi := Convert_Qfedo_Type( Get( slices, 67 ));
            rec.nqfexi := Convert( slices, 68, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxj := Convert( slices, 69, ( -9, -8, -7 ) );
            rec.nqfexj := Convert( slices, 70, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxk := Convert_Hlprbm_Type( Get( slices, 71 ));
            rec.nqfexk := Convert( slices, 72, ( -9, -8, -7, -2, -1 ) );
            rec.mlstat := Convert_Mlstat_Type( Get( slices, 73 ));
            rec.mlchng := Convert_Bscon_Type( Get( slices, 74 ));
            rec.mlchm := Convert_Mlchm_Type( Get( slices, 75 ));
            rec.mlchy := Convert( slices, 76, ( -9, -8, -2 ) );
            rec.plbornd := Convert_Plbornd_Type( Get( slices, 77 ));
            rec.plbornc := Convert_Plbornc_Type( Get( slices, 78 ));
            rec.yr2uk := Convert( slices, 79, ( -9, -8, -7, -2, -1 ) );
            rec.race := Convert_Race_Type( Get( slices, 80 ));
            rec.school := Convert_School_Type( Get( slices, 81 ));
            rec.scend := Convert( slices, 82, ( -9, -8, -7, -2, -1 ) );
            rec.sctype := Convert_Sctype_Type( Get( slices, 83 ));
            rec.scnow := Convert_Cjsck2_Type( Get( slices, 84 ));
            rec.fetype := Convert_Fetype_Type( Get( slices, 85 ));
            rec.fenow := Convert_Fenow_Type( Get( slices, 86 ));
            rec.feend := Convert( slices, 87, ( -9, -8, -7, -2, -1 ) );
            rec.qfhas := Convert_Bscon_Type( Get( slices, 88 ));
            rec.qfa := Convert_Qfa_Type( Get( slices, 89 ));
            rec.qfb := Convert_Qfb_Type( Get( slices, 90 ));
            rec.qfc := Convert_Qfc_Type( Get( slices, 91 ));
            rec.qfd := Convert_Qfd_Type( Get( slices, 92 ));
            rec.qfe := Convert_Qfe_Type( Get( slices, 93 ));
            rec.qff := Convert_Qff_Type( Get( slices, 94 ));
            rec.qfg := Convert_Qfg_Type( Get( slices, 95 ));
            rec.qfh := Convert_Qfh_Type( Get( slices, 96 ));
            rec.qfi := Convert_Qfi_Type( Get( slices, 97 ));
            rec.qfj := Convert_Qfj_Type( Get( slices, 98 ));
            rec.qfk := Convert_Qfk_Type( Get( slices, 99 ));
            rec.qfl := Convert_Qfl_Type( Get( slices, 100 ));
            rec.qfm := Convert_Qfm_Type( Get( slices, 101 ));
            rec.qfn := Convert_Qfn_Type( Get( slices, 102 ));
            rec.qfed := Convert_Bscon_Type( Get( slices, 103 ));
            rec.qfeda := Convert_Qfeda_Type( Get( slices, 104 ));
            rec.nqfeda := Convert( slices, 105, ( -9, -8, -7, -2, -1 ) );
            rec.qfedb := Convert_Qfedb_Type( Get( slices, 106 ));
            rec.nqfedb := Convert( slices, 107, ( -9, -8, -7, -2, -1 ) );
            rec.qfedc := Convert_Qfedc_Type( Get( slices, 108 ));
            rec.nqfedc := Convert( slices, 109, ( -9, -8, -7, -2, -1 ) );
            rec.qfedd := Convert_Qfedd_Type( Get( slices, 110 ));
            rec.nqfedd := Convert( slices, 111, ( -9, -8, -7, -2, -1 ) );
            rec.qfede := Convert_Qfede_Type( Get( slices, 112 ));
            rec.nqfede := Convert( slices, 113, ( -9, -8, -7, -2, -1 ) );
            rec.qfedf := Convert_Qfedf_Type( Get( slices, 114 ));
            rec.nqfedf := Convert( slices, 115, ( -9, -8, -7, -2, -1 ) );
            rec.qfedg := Convert_Qfedg_Type( Get( slices, 116 ));
            rec.nqfedg := Convert( slices, 117, ( -9, -8, -7, -2, -1 ) );
            rec.qfedh := Convert_Qfedh_Type( Get( slices, 118 ));
            rec.nqfedh := Convert( slices, 119, ( -9, -8, -7, -2, -1 ) );
            rec.qfedi := Convert_Qfedi_Type( Get( slices, 120 ));
            rec.nqfedi := Convert( slices, 121, ( -9, -8, -7, -2, -1 ) );
            rec.qfedj := Convert_Qfedj_Type( Get( slices, 122 ));
            rec.nqfedj := Convert( slices, 123, ( -9, -8, -7, -2, -1 ) );
            rec.qfedk := Convert_Qfedk_Type( Get( slices, 124 ));
            rec.nqfedk := Convert( slices, 125, ( -9, -8, -7, -2, -1 ) );
            rec.qfedl := Convert_Qfedl_Type( Get( slices, 126 ));
            rec.nqfedl := Convert( slices, 127, ( -9, -8, -7, -2, -1 ) );
            rec.qfedm := Convert_Qfedm_Type( Get( slices, 128 ));
            rec.nqfedm := Convert( slices, 129, ( -9, -8, -7, -2, -1 ) );
            rec.qfedn := Convert_Qfedn_Type( Get( slices, 130 ));
            rec.nqfedn := Convert( slices, 131, ( -9, -8, -7, -2, -1 ) );
            rec.qfedo := Convert_Qfedo_Type( Get( slices, 132 ));
            rec.nqfedo := Convert( slices, 133, ( -9, -8, -7, -2, -1 ) );
            rec.qfedp := Convert( slices, 134, ( -9, -8, -7 ) );
            rec.nqfedp := Convert( slices, 135, ( -9, -8, -7, -2, -1 ) );
            rec.qfedq := Convert_Qfedq_Type( Get( slices, 136 ));
            rec.nqfedq := Convert( slices, 137, ( -9, -8, -7, -2, -1 ) );
            rec.qfedr := Convert_Qfedr_Type( Get( slices, 138 ));
            rec.nqfedr := Convert( slices, 139, ( -9, -8, -7, -2, -1 ) );
            rec.qfeds := Convert_Hlprbm_Type( Get( slices, 140 ));
            rec.nqfeds := Convert( slices, 141, ( -9, -8, -7, -2, -1 ) );
            rec.bpar16 := Convert_Bpar16_Type( Get( slices, 142 ));
            rec.lvhmag := Convert( slices, 143, ( -9, -8, -7, -3, -1 ) );
            rec.whr14 := Convert_Whr14_Type( Get( slices, 144 ));
            rec.paperr := Convert_Aidpl1_Type( Get( slices, 145 ));
            rec.paperm := Convert_Paperm_Type( Get( slices, 146 ));
            rec.paperp := Convert_Paperp_Type( Get( slices, 147 ));
            rec.hlstat := Convert_Hlstat_Type( Get( slices, 148 ));
            rec.hldsbl := Convert_Bscon_Type( Get( slices, 149 ));
            rec.hlprb := Convert( slices, 150, ( -9, -8, -7, -2, -1 ) );
            rec.hlprba := Convert_Hlprba_Type( Get( slices, 151 ));
            rec.hlprbb := Convert_Hlprbb_Type( Get( slices, 152 ));
            rec.hlprbc := Convert_Hlprbc_Type( Get( slices, 153 ));
            rec.hlprbd := Convert_Hlprbd_Type( Get( slices, 154 ));
            rec.hlprbe := Convert_Hlprbe_Type( Get( slices, 155 ));
            rec.hlprbf := Convert_Hlprbf_Type( Get( slices, 156 ));
            rec.hlprbg := Convert_Hlprbg_Type( Get( slices, 157 ));
            rec.hlprbh := Convert_Hlprbh_Type( Get( slices, 158 ));
            rec.hlprbi := Convert_Hlprbi_Type( Get( slices, 159 ));
            rec.hlprbj := Convert_Hlprbj_Type( Get( slices, 160 ));
            rec.hlprbk := Convert_Hlprbk_Type( Get( slices, 161 ));
            rec.hlprbl := Convert_Hlprbl_Type( Get( slices, 162 ));
            rec.hlprbm := Convert_Hlprbm_Type( Get( slices, 163 ));
            rec.hllt := Convert_Bscon_Type( Get( slices, 164 ));
            rec.hllta := Convert_Hllta_Type( Get( slices, 165 ));
            rec.hlltb := Convert_Hlltb_Type( Get( slices, 166 ));
            rec.hlltc := Convert_Hlltc_Type( Get( slices, 167 ));
            rec.hlltd := Convert_Hlltd_Type( Get( slices, 168 ));
            rec.hllte := Convert_Hllte_Type( Get( slices, 169 ));
            rec.hlltw := Convert_Bscon_Type( Get( slices, 170 ));
            rec.hlendw := Convert_Hlendw_Type( Get( slices, 171 ));
            rec.hlltwa := Convert_Hlltwa_Type( Get( slices, 172 ));
            rec.hl2gp := Convert_Hl2gp_Type( Get( slices, 173 ));
            rec.xdts := Convert_Bscon_Type( Get( slices, 174 ));
            rec.nxdts := Convert_Nxdts_Type( Get( slices, 175 ));
            rec.hosp := Convert_Hlsv_Type( Get( slices, 176 ));
            rec.hospd := Convert( slices, 177, ( -9, -8, -7, -2, -1 ) );
            rec.hospch := Convert_Hospch_Type( Get( slices, 178 ));
            rec.hospnhs := Convert_Hospnhs_Type( Get( slices, 179 ));
            rec.hlcvr := Convert_Hlcvr_Type( Get( slices, 180 ));
            rec.hlcvrh := Convert_Hlcvrh_Type( Get( slices, 181 ));
            rec.hlcvrl := Convert( slices, 182, ( -9, -8, -7, -2, -1 ) );
            rec.hlsv := Convert_Hlsv_Type( Get( slices, 183 ));
            rec.hlsva := Convert_Hlsva_Type( Get( slices, 184 ));
            rec.hlsvan := Convert_Hlsvan_Type( Get( slices, 185 ));
            rec.hlsvaf := Convert_Hlsvaf_Type( Get( slices, 186 ));
            rec.hlsvb := Convert_Hlsvb_Type( Get( slices, 187 ));
            rec.hlsvbn := Convert_Hlsvan_Type( Get( slices, 188 ));
            rec.hlsvbf := Convert_Hlsvaf_Type( Get( slices, 189 ));
            rec.hlsvc := Convert_Hlsvc_Type( Get( slices, 190 ));
            rec.hlsvcn := Convert_Hlsvan_Type( Get( slices, 191 ));
            rec.hlsvcf := Convert_Hlsvaf_Type( Get( slices, 192 ));
            rec.hlsvd := Convert_Hlsvd_Type( Get( slices, 193 ));
            rec.hlsvdn := Convert_Hlsvan_Type( Get( slices, 194 ));
            rec.hlsvdf := Convert_Hlsvaf_Type( Get( slices, 195 ));
            rec.hlsve := Convert_Hlsve_Type( Get( slices, 196 ));
            rec.hlsven := Convert_Hlsvan_Type( Get( slices, 197 ));
            rec.hlsvef := Convert_Hlsvaf_Type( Get( slices, 198 ));
            rec.hlsvf := Convert_Hlsvf_Type( Get( slices, 199 ));
            rec.hlsvfn := Convert_Hlsvan_Type( Get( slices, 200 ));
            rec.hlsvff := Convert_Hlsvaf_Type( Get( slices, 201 ));
            rec.hlsvg := Convert_Hlsvg_Type( Get( slices, 202 ));
            rec.hlsvgn := Convert_Hlsvan_Type( Get( slices, 203 ));
            rec.hlsvgf := Convert_Hlsvaf_Type( Get( slices, 204 ));
            rec.hlsvh := Convert_Hlsvh_Type( Get( slices, 205 ));
            rec.hlsvhn := Convert_Hlsvan_Type( Get( slices, 206 ));
            rec.hlsvhf := Convert_Hlsvaf_Type( Get( slices, 207 ));
            rec.hlsvi := Convert_Hlsvi_Type( Get( slices, 208 ));
            rec.hlsvin := Convert_Hlsvan_Type( Get( slices, 209 ));
            rec.hlsvif := Convert_Hlsvaf_Type( Get( slices, 210 ));
            rec.hlsvj := Convert_Hlsvj_Type( Get( slices, 211 ));
            rec.hlsvjn := Convert_Hlsvan_Type( Get( slices, 212 ));
            rec.hlsvjf := Convert_Hlsvaf_Type( Get( slices, 213 ));
            rec.hlsvk := Convert_Hlsvk_Type( Get( slices, 214 ));
            rec.hlsvkn := Convert_Hlsvan_Type( Get( slices, 215 ));
            rec.hlsvkf := Convert_Hlsvaf_Type( Get( slices, 216 ));
            rec.hlsvl := Convert_Hlsvl_Type( Get( slices, 217 ));
            rec.hlsvln := Convert_Hlsvln_Type( Get( slices, 218 ));
            rec.hlsvlf := Convert_Hlsvlf_Type( Get( slices, 219 ));
            rec.hlsvm := Convert_Hlsvm_Type( Get( slices, 220 ));
            rec.hlsvmn := Convert_Hlsvln_Type( Get( slices, 221 ));
            rec.hlsvmf := Convert_Hlsvlf_Type( Get( slices, 222 ));
            rec.hlck := Convert_Aidpl1_Type( Get( slices, 223 ));
            rec.hlcka := Convert_Hlcka_Type( Get( slices, 224 ));
            rec.hlckan := Convert_Hlckan_Type( Get( slices, 225 ));
            rec.hlckb := Convert_Hlcka_Type( Get( slices, 226 ));
            rec.hlckbn := Convert_Hlckan_Type( Get( slices, 227 ));
            rec.hlckc := Convert_Hlcka_Type( Get( slices, 228 ));
            rec.hlckcn := Convert_Hlckan_Type( Get( slices, 229 ));
            rec.hlckd := Convert_Hlcka_Type( Get( slices, 230 ));
            rec.hlckdn := Convert_Hlckan_Type( Get( slices, 231 ));
            rec.hlcke := Convert_Hlcka_Type( Get( slices, 232 ));
            rec.hlcken := Convert_Hlckan_Type( Get( slices, 233 ));
            rec.hlckf := Convert_Hlcka_Type( Get( slices, 234 ));
            rec.hlckfn := Convert_Hlckan_Type( Get( slices, 235 ));
            rec.hlckg := Convert_Hlcka_Type( Get( slices, 236 ));
            rec.hlckgn := Convert_Hlckan_Type( Get( slices, 237 ));
            rec.hlckh := Convert_Hlcka_Type( Get( slices, 238 ));
            rec.hlckhn := Convert_Hlckan_Type( Get( slices, 239 ));
            rec.hlcki := Convert_Hlcki_Type( Get( slices, 240 ));
            rec.hlckin := Convert_Hlckin_Type( Get( slices, 241 ));
            rec.smoker := Convert_Bscon_Type( Get( slices, 242 ));
            rec.ncigs := Convert( slices, 243, ( -9, -8, -7, -2, -1 ) );
            rec.aidhh := Convert_Aidhh_Type( Get( slices, 244 ));
            rec.aidhua := Convert( slices, 245, ( -9, -8, -7, -1 ) );
            rec.aidhub := Convert( slices, 246, ( -9, -8, -7 ) );
            rec.aidhuc := Convert( slices, 247, ( -9, -8, -7 ) );
            rec.aidxhh := Convert_Aidxhh_Type( Get( slices, 248 ));
            rec.naidxhh := Convert_Naidxhh_Type( Get( slices, 249 ));
            rec.aidhu1 := Convert_Aidhu1_Type( Get( slices, 250 ));
            rec.aidhu2 := Convert_Aidhu2_Type( Get( slices, 251 ));
            rec.aidhrs := Convert_Aidhrs_Type( Get( slices, 252 ));
            rec.ivma := Convert_Ivda_Type( Get( slices, 253 ));
            rec.ivmb := Convert_Ivdb_Type( Get( slices, 254 ));
            rec.ivmc := Convert_Ivec_Type( Get( slices, 255 ));
            rec.ivmd := Convert_Ivdd_Type( Get( slices, 256 ));
            rec.ivme := Convert_Ivee_Type( Get( slices, 257 ));
            rec.jbhas := Convert_Frnow_Type( Get( slices, 258 ));
            rec.jboff := Convert_Jboff_Type( Get( slices, 259 ));
            rec.jboffy := Convert_Jboffy_Type( Get( slices, 260 ));
            rec.jbterm := Convert_Jbterm_Type( Get( slices, 261 ));
            rec.jbsoc := Convert( slices, 262, ( -9, -8, -2, -1 ) );
            rec.jbsic := Convert( slices, 263, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.jbsemp := Convert_Jbsemp_Type( Get( slices, 264 ));
            rec.jbmngr := Convert_Jbmngr_Type( Get( slices, 265 ));
            rec.jbsize := Convert_Jbsize_Type( Get( slices, 266 ));
            rec.jbmix := Convert_Jbmix_Type( Get( slices, 267 ));
            rec.jbhrs := Convert( slices, 268, ( -9, -8, -7, -2, -1 ) );
            rec.jbot := Convert( slices, 269, ( -9, -8, -7, -2, -1 ) );
            rec.jbotpd := Convert( slices, 270, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbhrlk := Convert_Jbhrlk_Type( Get( slices, 271 ));
            rec.jbpl := Convert_Jbpl_Type( Get( slices, 272 ));
            rec.jbttwt := Convert( slices, 273, ( -9, -8, -7, -3, -2, -1 ) );
            rec.jbttwm := Convert_Jbttwm_Type( Get( slices, 274 ));
            rec.jbsat1 := Convert_Jbsat1_Type( Get( slices, 275 ));
            rec.jbsat2 := Convert( slices, 276, ( -9, -8, -7, -2, -1 ) );
            rec.jbsat3 := Convert_Jbsat_Type( Get( slices, 277 ));
            rec.jbsat4 := Convert_Jbsat4_Type( Get( slices, 278 ));
            rec.jbsat5 := Convert_Jbsat4_Type( Get( slices, 279 ));
            rec.jbsat6 := Convert_Jbsat4_Type( Get( slices, 280 ));
            rec.jbsat7 := Convert_Jbsat_Type( Get( slices, 281 ));
            rec.jbsat := Convert_Jbsat_Type( Get( slices, 282 ));
            rec.paygl := Convert( slices, 283, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.paygw := Convert( slices, 284, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.paynl := Convert( slices, 285, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.paynw := Convert( slices, 286, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.payslp := Convert_Payslp_Type( Get( slices, 287 ));
            rec.payusl := Convert_Aidpl1_Type( Get( slices, 288 ));
            rec.payu := Convert( slices, 289, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.payuw := Convert( slices, 290, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.payug := Convert_Paylyg_Type( Get( slices, 291 ));
            rec.paydf1 := Convert_Paydf1_Type( Get( slices, 292 ));
            rec.paydf2 := Convert_Paydf2_Type( Get( slices, 293 ));
            rec.paydf3 := Convert_Paydf3_Type( Get( slices, 294 ));
            rec.paydf4 := Convert_Paydf4_Type( Get( slices, 295 ));
            rec.paydf5 := Convert_Paydf5_Type( Get( slices, 296 ));
            rec.paydf6 := Convert_Paydf6_Type( Get( slices, 297 ));
            rec.paydf7 := Convert_Paydf7_Type( Get( slices, 298 ));
            rec.paydf8 := Convert_Paydf8_Type( Get( slices, 299 ));
            rec.jbbgd := Convert( slices, 300, ( -9, -8, -7, -2, -1 ) );
            rec.jbbgm := Convert_Cjsbgm_Type( Get( slices, 301 ));
            rec.jbbgy := Convert( slices, 302, ( -9, -8, -7, -2, -1 ) );
            rec.jbbgly := Convert_Jbbgly_Type( Get( slices, 303 ));
            rec.jbsect := Convert_Jbsect_Type( Get( slices, 304 ));
            rec.jbonus := Convert_Aidpl1_Type( Get( slices, 305 ));
            rec.jbrise := Convert_Aidpl1_Type( Get( slices, 306 ));
            rec.tujbpl := Convert_Aidpl1_Type( Get( slices, 307 ));
            rec.tuin1 := Convert_Aidpl1_Type( Get( slices, 308 ));
            rec.tuin2 := Convert_Aidpl1_Type( Get( slices, 309 ));
            rec.jbopps := Convert_Aidpl1_Type( Get( slices, 310 ));
            rec.jbtime := Convert_Jbtime_Type( Get( slices, 311 ));
            rec.pays := Convert( slices, 312, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.paysw := Convert( slices, 313, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.paysg := Convert_Paylyg_Type( Get( slices, 314 ));
            rec.jbpen := Convert_Aidpl1_Type( Get( slices, 315 ));
            rec.jbpenm := Convert_Aidpl1_Type( Get( slices, 316 ));
            rec.payly := Convert( slices, 317, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.paylyw := Convert( slices, 318, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.paylyg := Convert_Paylyg_Type( Get( slices, 319 ));
            rec.jsboss := Convert_Jsboss_Type( Get( slices, 320 ));
            rec.jssize := Convert_Jssize_Type( Get( slices, 321 ));
            rec.jshrs := Convert( slices, 322, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jshrlk := Convert_Jbhrlk_Type( Get( slices, 323 ));
            rec.jstime := Convert_Jstime_Type( Get( slices, 324 ));
            rec.jstype := Convert_Jstype_Type( Get( slices, 325 ));
            rec.jsaccs := Convert_Jsaccs_Type( Get( slices, 326 ));
            rec.jsprf := Convert( slices, 327, ( -9, -8, -7, -3, -2, -1 ) );
            rec.jsprbm := Convert_Cjsbgm_Type( Get( slices, 328 ));
            rec.jsprby := Convert( slices, 329, ( -9, -8, -7, -2, -1 ) );
            rec.jsprem := Convert_Cjsbgm_Type( Get( slices, 330 ));
            rec.jsprey := Convert( slices, 331, ( -9, -8, -7, -2, -1 ) );
            rec.jspayl := Convert( slices, 332, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jspybm := Convert_Cjsbgm_Type( Get( slices, 333 ));
            rec.jspyby := Convert( slices, 334, ( -9, -8, -7, -2, -1 ) );
            rec.jspyem := Convert_Cjsbgm_Type( Get( slices, 335 ));
            rec.jspyey := Convert( slices, 336, ( -9, -8, -7, -2, -1 ) );
            rec.jspl := Convert_Jspl_Type( Get( slices, 337 ));
            rec.jsttwt := Convert( slices, 338, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.jsttwm := Convert_Jsttwm_Type( Get( slices, 339 ));
            rec.jssat1 := Convert_Jssat1_Type( Get( slices, 340 ));
            rec.jssat2 := Convert_Jbsat_Type( Get( slices, 341 ));
            rec.jssat3 := Convert_Jbsat_Type( Get( slices, 342 ));
            rec.jssat4 := Convert_Jbsat_Type( Get( slices, 343 ));
            rec.jssat5 := Convert_Jbsat_Type( Get( slices, 344 ));
            rec.jssat := Convert_Jbsat_Type( Get( slices, 345 ));
            rec.jsbgd := Convert( slices, 346, ( -9, -8, -7, -2, -1 ) );
            rec.jsbgm := Convert_Cjsbgm_Type( Get( slices, 347 ));
            rec.jsbgy := Convert( slices, 348, ( -9, -8, -7, -2, -1 ) );
            rec.jbed := Convert_Aidpl1_Type( Get( slices, 349 ));
            rec.jbed1 := Convert_Aidpl1_Type( Get( slices, 350 ));
            rec.jbed2 := Convert_Aidpl1_Type( Get( slices, 351 ));
            rec.jbed3 := Convert_Aidpl1_Type( Get( slices, 352 ));
            rec.jbed4 := Convert_Aidpl1_Type( Get( slices, 353 ));
            rec.jbed5 := Convert_Aidpl1_Type( Get( slices, 354 ));
            rec.jbedq := Convert( slices, 355, ( -9.0, -8.0, -7.0, -1.0 ) );
            rec.jbedp1 := Convert_Ednewp1_Type( Get( slices, 356 ));
            rec.eprosa := Convert_Eprosa_Type( Get( slices, 357 ));
            rec.eprosb := Convert_Cohxpm2_Type( Get( slices, 358 ));
            rec.eprosc := Convert_Cohxpm2_Type( Get( slices, 359 ));
            rec.eprosd := Convert_Cohxpm2_Type( Get( slices, 360 ));
            rec.eprose := Convert_Cohxpm2_Type( Get( slices, 361 ));
            rec.eprosf := Convert_Cohxpm2_Type( Get( slices, 362 ));
            rec.rach12 := Convert_Hhch12_Type( Get( slices, 363 ));
            rec.jbchc1 := Convert_Jbchc1_Type( Get( slices, 364 ));
            rec.jbchc2 := Convert_Jbchc2_Type( Get( slices, 365 ));
            rec.jbchc3 := Convert_Jbchc3_Type( Get( slices, 366 ));
            rec.xpchcf := Convert_Xpchcf_Type( Get( slices, 367 ));
            rec.xpchc := Convert( slices, 368, ( -9, -8, -7, -2, -1 ) );
            rec.huxpch := Convert_Huxpch_Type( Get( slices, 369 ));
            rec.hunurs := Convert_Hunurs_Type( Get( slices, 370 ));
            rec.julk1 := Convert_Aidpl1_Type( Get( slices, 371 ));
            rec.julk4 := Convert_Bscon_Type( Get( slices, 372 ));
            rec.julka := Convert_Boolean_With_Missing( Get( slices, 373 ));
            rec.julkb := Convert_Boolean_With_Missing( Get( slices, 374 ));
            rec.julkc := Convert_Boolean_With_Missing( Get( slices, 375 ));
            rec.julkd := Convert_Boolean_With_Missing( Get( slices, 376 ));
            rec.julke := Convert_Boolean_With_Missing( Get( slices, 377 ));
            rec.julkjb := Convert_Aidpl1_Type( Get( slices, 378 ));
            rec.jubgn := Convert_Boolean_With_Missing( Get( slices, 379 ));
            rec.juspec := Convert_Juspec_Type( Get( slices, 380 ));
            rec.jusoc := Convert( slices, 381, ( -9, -8, -7, -2, -1 ) );
            rec.juhrsx := Convert( slices, 382, ( -9, -8, -7, -2, -1 ) );
            rec.jupayx := Convert( slices, 383, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jupayl := Convert( slices, 384, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.juhrsl := Convert( slices, 385, ( -9, -8, -7, -2, -1 ) );
            rec.eprosg := Convert_Cohxpm2_Type( Get( slices, 386 ));
            rec.eprosh := Convert_Cohxpm2_Type( Get( slices, 387 ));
            rec.eaage := Convert_Eaage_Type( Get( slices, 388 ));
            rec.jbub := Convert_Bscon_Type( Get( slices, 389 ));
            rec.jbuby := Convert_Jbuby_Type( Get( slices, 390 ));
            rec.j2has := Convert_Aidpl1_Type( Get( slices, 391 ));
            rec.j2soc := Convert( slices, 392, ( -9, -8, -7, -2, -1 ) );
            rec.j2semp := Convert_J2semp_Type( Get( slices, 393 ));
            rec.j2hrs := Convert( slices, 394, ( -9, -8, -7, -2, -1 ) );
            rec.j2pay := Convert( slices, 395, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbhha := Convert_Aidpl1_Type( Get( slices, 396 ));
            rec.jbhhb := Convert_Aidpl1_Type( Get( slices, 397 ));
            rec.jbhhc := Convert_Aidpl1_Type( Get( slices, 398 ));
            rec.jbhhd := Convert_Aidpl1_Type( Get( slices, 399 ));
            rec.jbhhe := Convert_Aidpl1_Type( Get( slices, 400 ));
            rec.jbhhf := Convert_Aidpl1_Type( Get( slices, 401 ));
            rec.ivea := Convert_Ivda_Type( Get( slices, 402 ));
            rec.iveb := Convert_Ivdb_Type( Get( slices, 403 ));
            rec.ivec := Convert_Ivec_Type( Get( slices, 404 ));
            rec.ived := Convert_Ivdd_Type( Get( slices, 405 ));
            rec.ivee := Convert_Ivee_Type( Get( slices, 406 ));
            rec.ednew := Convert_Aidpl1_Type( Get( slices, 407 ));
            rec.ednew1 := Convert_Aidpl1_Type( Get( slices, 408 ));
            rec.ednew2 := Convert_Aidpl1_Type( Get( slices, 409 ));
            rec.ednew3 := Convert_Aidpl1_Type( Get( slices, 410 ));
            rec.ednew4 := Convert_Aidpl1_Type( Get( slices, 411 ));
            rec.ednewq := Convert( slices, 412, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ednewp1 := Convert_Ednewp1_Type( Get( slices, 413 ));
            rec.nemst := Convert_Nemst_Type( Get( slices, 414 ));
            rec.cjsbgd := Convert( slices, 415, ( -9, -8, -7, -2, -1 ) );
            rec.cjsbgm := Convert_Cjsbgm_Type( Get( slices, 416 ));
            rec.cjsbgy := Convert( slices, 417, ( -9, -8, -7, -2, -1 ) );
            rec.cjsbly := Convert_Cjsbly_Type( Get( slices, 418 ));
            rec.njbs := Convert( slices, 419, ( -9, -8, -7 ) );
            rec.jbhad := Convert_Aidpl1_Type( Get( slices, 420 ));
            rec.jlend := Convert( slices, 421, ( -9, -8, -7, -2, -1 ) );
            rec.jlsoc := Convert( slices, 422, ( -9, -8, -7, -2, -1 ) );
            rec.jlsic := Convert( slices, 423, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jlsemp := Convert_J2semp_Type( Get( slices, 424 ));
            rec.jlboss := Convert_Aidpl1_Type( Get( slices, 425 ));
            rec.jlmngr := Convert_Jlmngr_Type( Get( slices, 426 ));
            rec.jlsize := Convert_Jlsize_Type( Get( slices, 427 ));
            rec.ivja := Convert_Ivda_Type( Get( slices, 428 ));
            rec.ivjb := Convert_Ivdb_Type( Get( slices, 429 ));
            rec.ivjc := Convert_Ivec_Type( Get( slices, 430 ));
            rec.ivjd := Convert_Ivdd_Type( Get( slices, 431 ));
            rec.ivje := Convert_Ivee_Type( Get( slices, 432 ));
            rec.oppola := Convert_Oppola_Type( Get( slices, 433 ));
            rec.oppolb := Convert_Oppola_Type( Get( slices, 434 ));
            rec.oppolc := Convert_Oppola_Type( Get( slices, 435 ));
            rec.oppold := Convert_Oppola_Type( Get( slices, 436 ));
            rec.opcls1 := Convert_Aidpl1_Type( Get( slices, 437 ));
            rec.opcls2 := Convert_Opcls2_Type( Get( slices, 438 ));
            rec.opcls3 := Convert_Opcls3_Type( Get( slices, 439 ));
            rec.vote1 := Convert_Aidpl1_Type( Get( slices, 440 ));
            rec.vote2 := Convert_Aidpl1_Type( Get( slices, 441 ));
            rec.vote3 := Convert_Vote3_Type( Get( slices, 442 ));
            rec.vote4 := Convert_Vote3_Type( Get( slices, 443 ));
            rec.vote5 := Convert_Vote5_Type( Get( slices, 444 ));
            rec.vote6 := Convert_Vote6_Type( Get( slices, 445 ));
            rec.vote9 := Convert_Boolean_With_Missing( Get( slices, 446 ));
            rec.vote10a := Convert_Vote10a_Type( Get( slices, 447 ));
            rec.vote10b := Convert_Vote10a_Type( Get( slices, 448 ));
            rec.opiss1 := Convert_Opiss1_Type( Get( slices, 449 ));
            rec.opiss2 := Convert_Opiss1_Type( Get( slices, 450 ));
            rec.opiss3 := Convert_Opiss1_Type( Get( slices, 451 ));
            rec.opiss4 := Convert_Opiss1_Type( Get( slices, 452 ));
            rec.opiss5 := Convert_Opiss1_Type( Get( slices, 453 ));
            rec.lacta := Convert_Lacta_Type( Get( slices, 454 ));
            rec.lactb := Convert_Lacta_Type( Get( slices, 455 ));
            rec.lactc := Convert_Lacta_Type( Get( slices, 456 ));
            rec.lactd := Convert_Lacta_Type( Get( slices, 457 ));
            rec.lacte := Convert_Lacta_Type( Get( slices, 458 ));
            rec.lactf := Convert_Lacta_Type( Get( slices, 459 ));
            rec.lactg := Convert_Lacta_Type( Get( slices, 460 ));
            rec.lacth := Convert_Lacta_Type( Get( slices, 461 ));
            rec.lacti := Convert_Lacta_Type( Get( slices, 462 ));
            rec.lactj := Convert_Lacta_Type( Get( slices, 463 ));
            rec.lactk := Convert_Lacta_Type( Get( slices, 464 ));
            rec.lactl := Convert_Lacta_Type( Get( slices, 465 ));
            rec.caruse := Convert_Caruse_Type( Get( slices, 466 ));
            rec.yppar := Convert_Yppar_Type( Get( slices, 467 ));
            rec.pyhlth := Convert_Pyhlth_Type( Get( slices, 468 ));
            rec.pyhwrk := Convert_Pyhwrk_Type( Get( slices, 469 ));
            rec.pysxed := Convert_Pysxed_Type( Get( slices, 470 ));
            rec.pysxag := Convert( slices, 471, ( -9, -8, -7, -3, -2, -1 ) );
            rec.pynyp := Convert( slices, 472, ( -9, -8, -7 ) );
            rec.pypno1 := Convert( slices, 473, ( -9, -8, -7 ) );
            rec.pyage1 := Convert( slices, 474, ( -9, -8, -7, -2, -1 ) );
            rec.pypno2 := Convert( slices, 475, ( -9, -8, -7 ) );
            rec.pyage2 := Convert( slices, 476, ( -9, -8, -7, -2, -1 ) );
            rec.pypno3 := Convert( slices, 477, ( -9, -8, -7 ) );
            rec.pyage3 := Convert( slices, 478, ( -9, -8, -7, -2, -1 ) );
            rec.pywhr1 := Convert_Pywhr1_Type( Get( slices, 479 ));
            rec.pyman1 := Convert_Pyman1_Type( Get( slices, 480 ));
            rec.pyarg1 := Convert_Pyarg1_Type( Get( slices, 481 ));
            rec.pytlk1 := Convert_Pyarg1_Type( Get( slices, 482 ));
            rec.pysmk1 := Convert_Pysmk1_Type( Get( slices, 483 ));
            rec.pysad1 := Convert_Pysad1_Type( Get( slices, 484 ));
            rec.pywor1 := Convert_Pywor1_Type( Get( slices, 485 ));
            rec.pyhsw1 := Convert_Pyhap1_Type( Get( slices, 486 ));
            rec.pyhap1 := Convert_Pyhap1_Type( Get( slices, 487 ));
            rec.pyhfm1 := Convert_Pyhap1_Type( Get( slices, 488 ));
            rec.pyhfr1 := Convert_Pyhap1_Type( Get( slices, 489 ));
            rec.pyhlf1 := Convert_Pyhap1_Type( Get( slices, 490 ));
            rec.pyhlt1 := Convert_Pyhlt1_Type( Get( slices, 491 ));
            rec.pywhr2 := Convert_Pywhr1_Type( Get( slices, 492 ));
            rec.pyman2 := Convert_Pyman1_Type( Get( slices, 493 ));
            rec.pyarg2 := Convert_Pyarg1_Type( Get( slices, 494 ));
            rec.pytlk2 := Convert_Pyarg1_Type( Get( slices, 495 ));
            rec.pysmk2 := Convert_Pysmk1_Type( Get( slices, 496 ));
            rec.pysad2 := Convert_Pysad1_Type( Get( slices, 497 ));
            rec.pywor2 := Convert_Pywor1_Type( Get( slices, 498 ));
            rec.pyhsw2 := Convert_Pyhap1_Type( Get( slices, 499 ));
            rec.pyhap2 := Convert_Pyhap1_Type( Get( slices, 500 ));
            rec.pyhfm2 := Convert_Pyhap1_Type( Get( slices, 501 ));
            rec.pyhfr2 := Convert_Pyhap1_Type( Get( slices, 502 ));
            rec.pyhlf2 := Convert_Pyhap1_Type( Get( slices, 503 ));
            rec.pyhlt2 := Convert_Pyhlt1_Type( Get( slices, 504 ));
            rec.pywhr3 := Convert_Pywhr1_Type( Get( slices, 505 ));
            rec.pyman3 := Convert_Pyman1_Type( Get( slices, 506 ));
            rec.pyarg3 := Convert_Pyarg1_Type( Get( slices, 507 ));
            rec.pytlk3 := Convert_Pyarg1_Type( Get( slices, 508 ));
            rec.pysmk3 := Convert_Pysmk1_Type( Get( slices, 509 ));
            rec.pysad3 := Convert_Pysad1_Type( Get( slices, 510 ));
            rec.pywor3 := Convert_Pywor1_Type( Get( slices, 511 ));
            rec.pyhsw3 := Convert_Pyhap1_Type( Get( slices, 512 ));
            rec.pyhap3 := Convert_Pyhap1_Type( Get( slices, 513 ));
            rec.pyhfm3 := Convert_Pyhap1_Type( Get( slices, 514 ));
            rec.pyhfr3 := Convert_Pyhap1_Type( Get( slices, 515 ));
            rec.pyhlf3 := Convert_Pyhap1_Type( Get( slices, 516 ));
            rec.pyhlt3 := Convert_Pyhlt1_Type( Get( slices, 517 ));
            rec.pyra := Convert_Aglt20_Type( Get( slices, 518 ));
            rec.pysat1 := Convert_Pysat1_Type( Get( slices, 519 ));
            rec.pysat2 := Convert_Pysat1_Type( Get( slices, 520 ));
            rec.pysat3 := Convert_Pysat1_Type( Get( slices, 521 ));
            rec.pyspn1 := Convert( slices, 522, ( -9, -8, -7 ) );
            rec.pysty1 := Convert_Pysty1_Type( Get( slices, 523 ));
            rec.pytae1 := Convert_Pyste1_Type( Get( slices, 524 ));
            rec.pytam1 := Convert_Pyste1_Type( Get( slices, 525 ));
            rec.pytas1 := Convert_Pyste1_Type( Get( slices, 526 ));
            rec.pyste1 := Convert_Pyste1_Type( Get( slices, 527 ));
            rec.pystm1 := Convert_Pyste1_Type( Get( slices, 528 ));
            rec.pysts1 := Convert_Pyste1_Type( Get( slices, 529 ));
            rec.pyspn2 := Convert( slices, 530, ( -9, -8, -7 ) );
            rec.pysty2 := Convert_Pysty1_Type( Get( slices, 531 ));
            rec.pytae2 := Convert_Pyste1_Type( Get( slices, 532 ));
            rec.pytam2 := Convert_Pyste1_Type( Get( slices, 533 ));
            rec.pytas2 := Convert_Pyste1_Type( Get( slices, 534 ));
            rec.pyste2 := Convert_Pyste1_Type( Get( slices, 535 ));
            rec.pystm2 := Convert_Pyste1_Type( Get( slices, 536 ));
            rec.pysts2 := Convert_Pyste1_Type( Get( slices, 537 ));
            rec.pyspn3 := Convert( slices, 538, ( -9, -8, -7 ) );
            rec.pysty3 := Convert_Pysty1_Type( Get( slices, 539 ));
            rec.pytae3 := Convert_Pyste1_Type( Get( slices, 540 ));
            rec.pytam3 := Convert_Pyste1_Type( Get( slices, 541 ));
            rec.pytas3 := Convert_Pyste1_Type( Get( slices, 542 ));
            rec.pyste3 := Convert_Pyste1_Type( Get( slices, 543 ));
            rec.pystm3 := Convert_Pyste1_Type( Get( slices, 544 ));
            rec.pysts3 := Convert_Pyste1_Type( Get( slices, 545 ));
            rec.f101 := Convert_F101_Type( Get( slices, 546 ));
            rec.f102 := Convert_F102_Type( Get( slices, 547 ));
            rec.f103 := Convert_F103_Type( Get( slices, 548 ));
            rec.f104 := Convert( slices, 549, ( -9, -8, -7 ) );
            rec.f105 := Convert_F105_Type( Get( slices, 550 ));
            rec.f106 := Convert_F106_Type( Get( slices, 551 ));
            rec.f116 := Convert_F116_Type( Get( slices, 552 ));
            rec.f118 := Convert_F118_Type( Get( slices, 553 ));
            rec.f119 := Convert_F119_Type( Get( slices, 554 ));
            rec.f120 := Convert_F120_Type( Get( slices, 555 ));
            rec.f121 := Convert_F121_Type( Get( slices, 556 ));
            rec.f122 := Convert_F122_Type( Get( slices, 557 ));
            rec.f123 := Convert_F123_Type( Get( slices, 558 ));
            rec.f124 := Convert_F124_Type( Get( slices, 559 ));
            rec.f125 := Convert_F125_Type( Get( slices, 560 ));
            rec.f131 := Convert_F131_Type( Get( slices, 561 ));
            rec.f132 := Convert_F132_Type( Get( slices, 562 ));
            rec.f133 := Convert_F133_Type( Get( slices, 563 ));
            rec.f142 := Convert_F142_Type( Get( slices, 564 ));
            rec.f135 := Convert_F135_Type( Get( slices, 565 ));
            rec.f136 := Convert_F136_Type( Get( slices, 566 ));
            rec.f137 := Convert_F137_Type( Get( slices, 567 ));
            rec.f138 := Convert_F138_Type( Get( slices, 568 ));
            rec.f139 := Convert_F139_Type( Get( slices, 569 ));
            rec.f140 := Convert_F140_Type( Get( slices, 570 ));
            rec.f141 := Convert_F141_Type( Get( slices, 571 ));
            rec.f151 := Convert_F151_Type( Get( slices, 572 ));
            rec.f152 := Convert_F152_Type( Get( slices, 573 ));
            rec.f153 := Convert_F153_Type( Get( slices, 574 ));
            rec.f154 := Convert_F154_Type( Get( slices, 575 ));
            rec.f155 := Convert_F155_Type( Get( slices, 576 ));
            rec.f156 := Convert_F156_Type( Get( slices, 577 ));
            rec.f157 := Convert_F157_Type( Get( slices, 578 ));
            rec.f158 := Convert_F158_Type( Get( slices, 579 ));
            rec.f159 := Convert_F159_Type( Get( slices, 580 ));
            rec.nf1 := Convert( slices, 581, ( -9, -8, -7, -2, -1 ) );
            rec.fisit := Convert_Fisit_Type( Get( slices, 582 ));
            rec.fisitc := Convert( slices, 583, ( -9, -8, -7, -2, -1 ) );
            rec.fisity := Convert_Fisity_Type( Get( slices, 584 ));
            rec.fisitx := Convert( slices, 585, ( -9, -8, -7, -2, -1 ) );
            rec.fiyrdi := Convert( slices, 586, ( -9, -8, -7, -2, -1 ) );
            rec.fiyrdiu := Convert_Fiyrdiu_Type( Get( slices, 587 ));
            rec.save := Convert_Aidpl1_Type( Get( slices, 588 ));
            rec.saved := Convert( slices, 589, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.savey1 := Convert_Savey1_Type( Get( slices, 590 ));
            rec.savey2 := Convert_Savey1_Type( Get( slices, 591 ));
            rec.pppen := Convert_Aidpl1_Type( Get( slices, 592 ));
            rec.penb4 := Convert_Penb4_Type( Get( slices, 593 ));
            rec.penb4yr := Convert( slices, 594, ( -9, -8, -7, -2, -1 ) );
            rec.penb4v := Convert( slices, 595, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.penb4w := Convert( slices, 596, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.penyr := Convert( slices, 597, ( -9, -8, -7, -2, -1 ) );
            rec.penadd := Convert_Aidpl1_Type( Get( slices, 598 ));
            rec.penadv := Convert( slices, 599, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.penadw := Convert( slices, 600, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.ftexhh := Convert_Aidpl1_Type( Get( slices, 601 ));
            rec.ftexa := Convert_Ftexa_Type( Get( slices, 602 ));
            rec.ftexa1 := Convert_Ftexa1_Type( Get( slices, 603 ));
            rec.ftexa2 := Convert_Ftexa2_Type( Get( slices, 604 ));
            rec.ftexa3 := Convert_Ftexa3_Type( Get( slices, 605 ));
            rec.ftexa4 := Convert_Ftexa4_Type( Get( slices, 606 ));
            rec.ftexa5 := Convert_Ftexa5_Type( Get( slices, 607 ));
            rec.ftexa6 := Convert_Ftexa6_Type( Get( slices, 608 ));
            rec.ftexav := Convert( slices, 609, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ftexaw := Convert( slices, 610, ( -9.0, -8.0, -7.0, -5.0, -3.0, -2.0, -1.0 ) );
            rec.ftexb := Convert_Ftexb_Type( Get( slices, 611 ));
            rec.ftexb1 := Convert_Ftexa1_Type( Get( slices, 612 ));
            rec.ftexb2 := Convert_Ftexa2_Type( Get( slices, 613 ));
            rec.ftexb3 := Convert_Ftexa3_Type( Get( slices, 614 ));
            rec.ftexb4 := Convert_Ftexa4_Type( Get( slices, 615 ));
            rec.ftexb5 := Convert_Ftexa5_Type( Get( slices, 616 ));
            rec.ftexb6 := Convert_Ftexa6_Type( Get( slices, 617 ));
            rec.ftexbv := Convert( slices, 618, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ftexbw := Convert( slices, 619, ( -9.0, -8.0, -7.0, -5.0, -3.0, -2.0, -1.0 ) );
            rec.ftexc := Convert_Ftexc_Type( Get( slices, 620 ));
            rec.ftexc1 := Convert_Ftexa1_Type( Get( slices, 621 ));
            rec.ftexc2 := Convert_Ftexa2_Type( Get( slices, 622 ));
            rec.ftexc3 := Convert_Ftexa3_Type( Get( slices, 623 ));
            rec.ftexc4 := Convert_Ftexa4_Type( Get( slices, 624 ));
            rec.ftexc5 := Convert_Ftexa5_Type( Get( slices, 625 ));
            rec.ftexc6 := Convert_Ftexa6_Type( Get( slices, 626 ));
            rec.ftexcv := Convert( slices, 627, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ftexcw := Convert( slices, 628, ( -9.0, -8.0, -7.0, -5.0, -3.0, -2.0, -1.0 ) );
            rec.spinhh := Convert_Hhch12_Type( Get( slices, 629 ));
            rec.hubuys := Convert_Hubuys_Type( Get( slices, 630 ));
            rec.hufrys := Convert_Hubuys_Type( Get( slices, 631 ));
            rec.humops := Convert_Hubuys_Type( Get( slices, 632 ));
            rec.huiron := Convert_Hubuys_Type( Get( slices, 633 ));
            rec.hhch12 := Convert_Hhch12_Type( Get( slices, 634 ));
            rec.husits := Convert_Husits_Type( Get( slices, 635 ));
            rec.howlng := Convert( slices, 636, ( -9, -8, -7, -3, -2, -1 ) );
            rec.dfwld := Convert_Bscon_Type( Get( slices, 637 ));
            rec.dfwld1 := Convert_Dfwld1_Type( Get( slices, 638 ));
            rec.dfwld2 := Convert_Dfwld2_Type( Get( slices, 639 ));
            rec.dfwld3 := Convert_Dfwld2_Type( Get( slices, 640 ));
            rec.dfwld4 := Convert_Dfwld2_Type( Get( slices, 641 ));
            rec.ivfa := Convert_Ivda_Type( Get( slices, 642 ));
            rec.ivfb := Convert_Ivdb_Type( Get( slices, 643 ));
            rec.ivfc := Convert_Ivfc_Type( Get( slices, 644 ));
            rec.ivfd := Convert_Ivdd_Type( Get( slices, 645 ));
            rec.ivfe := Convert_Ivee_Type( Get( slices, 646 ));
            rec.ivfoih := Convert( slices, 647, ( -9, -8 ) );
            rec.ivfoim := Convert( slices, 648, ( -9, -8 ) );
            rec.ivsc := Convert_Ivsc_Type( Get( slices, 649 ));
            rec.iv1 := Convert_Hhch12_Type( Get( slices, 650 ));
            rec.iv2 := Convert_Iv2_Type( Get( slices, 651 ));
            rec.iv4 := Convert_Iv4_Type( Get( slices, 652 ));
            rec.iv5 := Convert_Iv5_Type( Get( slices, 653 ));
            rec.iv6a := Convert_Hhch12_Type( Get( slices, 654 ));
            rec.iv6b := Convert_Hhch12_Type( Get( slices, 655 ));
            rec.iv6c := Convert_Hhch12_Type( Get( slices, 656 ));
            rec.iv6d := Convert_Hhch12_Type( Get( slices, 657 ));
            rec.iv6e := Convert_Hhch12_Type( Get( slices, 658 ));
            rec.iv6f := Convert_Hhch12_Type( Get( slices, 659 ));
            rec.iv7 := Convert( slices, 660, ( -9, -8, -7 ) );
            rec.ghqa := Convert_Ghqa_Type( Get( slices, 661 ));
            rec.ghqb := Convert_Ghqb_Type( Get( slices, 662 ));
            rec.ghqc := Convert_Ghqc_Type( Get( slices, 663 ));
            rec.ghqd := Convert_Ghqc_Type( Get( slices, 664 ));
            rec.ghqe := Convert_Ghqe_Type( Get( slices, 665 ));
            rec.ghqf := Convert_Ghqe_Type( Get( slices, 666 ));
            rec.ghqg := Convert_Ghqc_Type( Get( slices, 667 ));
            rec.ghqh := Convert_Ghqc_Type( Get( slices, 668 ));
            rec.ghqi := Convert_Ghqb_Type( Get( slices, 669 ));
            rec.ghqj := Convert_Ghqe_Type( Get( slices, 670 ));
            rec.ghqk := Convert_Ghqe_Type( Get( slices, 671 ));
            rec.ghql := Convert_Ghqc_Type( Get( slices, 672 ));
            rec.opfamj := Convert_Opfamj_Type( Get( slices, 673 ));
            rec.opfamk := Convert_Opfamj_Type( Get( slices, 674 ));
            rec.opfaml := Convert_Opfamj_Type( Get( slices, 675 ));
            rec.opfamm := Convert_Opfamj_Type( Get( slices, 676 ));
            rec.opfamn := Convert_Opfamj_Type( Get( slices, 677 ));
            rec.lfsat1 := Convert_Lfsat1_Type( Get( slices, 678 ));
            rec.lfsat2 := Convert_Lfsat1_Type( Get( slices, 679 ));
            rec.lfsat3 := Convert_Lfsat1_Type( Get( slices, 680 ));
            rec.lfsat4 := Convert_Lfsat1_Type( Get( slices, 681 ));
            rec.lfsat5 := Convert_Lfsat1_Type( Get( slices, 682 ));
            rec.lfsat6 := Convert_Lfsat1_Type( Get( slices, 683 ));
            rec.lfsat7 := Convert_Lfsat1_Type( Get( slices, 684 ));
            rec.lfsat8 := Convert_Lfsat1_Type( Get( slices, 685 ));
            rec.lfsato := Convert_Lfsat1_Type( Get( slices, 686 ));
            rec.lfsatl := Convert( slices, 687, ( -9, -8, -7, -2, -1 ) );
            rec.netsx1 := Convert_Netsx1_Type( Get( slices, 688 ));
            rec.netsx2 := Convert_Netsx1_Type( Get( slices, 689 ));
            rec.netsx3 := Convert_Netsx1_Type( Get( slices, 690 ));
            rec.net1wr := Convert_Aidpl1_Type( Get( slices, 691 ));
            rec.net2wr := Convert_Aidpl1_Type( Get( slices, 692 ));
            rec.net3wr := Convert_Aidpl1_Type( Get( slices, 693 ));
            rec.net1ag := Convert( slices, 694, ( -9, -8, -7, -2, -1 ) );
            rec.net2ag := Convert( slices, 695, ( -9, -8, -7, -2, -1 ) );
            rec.net3ag := Convert( slices, 696, ( -9, -8, -7, -2, -1 ) );
            rec.net1ph := Convert_Net1ph_Type( Get( slices, 697 ));
            rec.net2ph := Convert_Net1ph_Type( Get( slices, 698 ));
            rec.net3ph := Convert_Net1ph_Type( Get( slices, 699 ));
            rec.net1jb := Convert_Net1jb_Type( Get( slices, 700 ));
            rec.net2jb := Convert_Net1jb_Type( Get( slices, 701 ));
            rec.net3jb := Convert_Net1jb_Type( Get( slices, 702 ));
            rec.prrs2i := Convert_Prrs2i_Type( Get( slices, 703 ));
            rec.pripn := Convert( slices, 704, ( -9, -8 ) );
            rec.prwhy := Convert_Prwhy_Type( Get( slices, 705 ));
            rec.pplevr := Convert_Plever_Type( Get( slices, 706 ));
            rec.prfehq := Convert_Prfehq_Type( Get( slices, 707 ));
            rec.prsehq := Convert_Prsehq_Type( Get( slices, 708 ));
            rec.presbgm := Convert_Presbgm_Type( Get( slices, 709 ));
            rec.presbgy := Convert( slices, 710, ( -9, -8, -2, -1 ) );
            rec.presly := Convert_Presly_Type( Get( slices, 711 ));
            rec.prf101 := Convert_Prf101_Type( Get( slices, 712 ));
            rec.prf102 := Convert_Prf102_Type( Get( slices, 713 ));
            rec.prf116 := Convert_Prf116_Type( Get( slices, 714 ));
            rec.prf125 := Convert_Prf125_Type( Get( slices, 715 ));
            rec.prf131 := Convert_Prf131_Type( Get( slices, 716 ));
            rec.prf135 := Convert_Prf135_Type( Get( slices, 717 ));
            rec.prf137 := Convert_Prf137_Type( Get( slices, 718 ));
            rec.prf139 := Convert_Prf139_Type( Get( slices, 719 ));
            rec.prf141 := Convert_Prf141_Type( Get( slices, 720 ));
            rec.prfirn := Convert_Prfirn_Type( Get( slices, 721 ));
            rec.prearn := Convert_Prearn_Type( Get( slices, 722 ));
            rec.prjbbgm := Convert_Presbgm_Type( Get( slices, 723 ));
            rec.prjbbgy := Convert( slices, 724, ( -9, -8, -1 ) );
            rec.prjbly := Convert_Prjbly_Type( Get( slices, 725 ));
            rec.prfitb := Convert_Prfitb_Type( Get( slices, 726 ));
            rec.ivpa := Convert_Ivpa_Type( Get( slices, 727 ));
            rec.ivpb := Convert_Ivpb_Type( Get( slices, 728 ));
            rec.ivpc := Convert_Ivpc_Type( Get( slices, 729 ));
            rec.ivpd := Convert_Ivpd_Type( Get( slices, 730 ));
            rec.ivpe := Convert_Ivpe_Type( Get( slices, 731 ));
            rec.telwhy := Convert_Telwhy_Type( Get( slices, 732 ));
            rec.prjbft := Convert_Prjbft_Type( Get( slices, 733 ));
            rec.tlfiyrl := Convert( slices, 734, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.tlfiyr := Convert( slices, 735, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.pid := Convert( slices, 736 );
            rec.iviow5 := Convert_Iviow4_Type( Get( slices, 737 ));
            rec.hhmem := Convert_Hhmem_Type( Get( slices, 738 ));
            rec.newhy := Convert_Newhy_Type( Get( slices, 739 ));
            rec.nemnjn := Convert_Nemnjn_Type( Get( slices, 740 ));
            rec.neyrjn := Convert( slices, 741, ( -9, -8, -2, -1 ) );
            rec.ivfio := Convert_Ivfio_Type( Get( slices, 742 ));
            rec.iodc := Convert_Iodc_Type( Get( slices, 743 ));
            rec.hgr2r := Convert_Hgr2r_Type( Get( slices, 744 ));
            rec.hgsex := Convert_Hgsex_Type( Get( slices, 745 ));
            rec.hgbm := Convert_Hgbm_Type( Get( slices, 746 ));
            rec.hgby := Convert( slices, 747, ( -2, -1 ) );
            rec.mastat := Convert_Mastat_Type( Get( slices, 748 ));
            rec.hgspn := Convert( slices, 749, ( -9, -8, -2, -1 ) );
            rec.hgemp := Convert_Hgemp_Type( Get( slices, 750 ));
            rec.hgfno := Convert( slices, 751, ( -9, -8, -2, -1 ) );
            rec.hgmno := Convert( slices, 752, ( -9, -8, -2, -1 ) );
            rec.hgra := Convert( slices, 753, ( -9, -8, -2, -1 ) );
            rec.age := Convert( slices, 754, ( -9, -8 ) );
            rec.age12 := Convert( slices, 755, ( -9, -8 ) );
            rec.butype := Convert_Butype_Type( Get( slices, 756 ));
            rec.buno := Convert( slices, 757, ( -9, -8 ) );
            rec.nchild := Convert( slices, 758, ( -9, -8 ) );
            rec.hoh := Convert_Hoh_Type( Get( slices, 759 ));
            rec.rach16 := Convert_Hhch12_Type( Get( slices, 760 ));
            rec.sampst := Convert_Sampst_Type( Get( slices, 761 ));
            rec.movest := Convert_Movest_Type( Get( slices, 762 ));
            rec.region := Convert_Region_Type( Get( slices, 763 ));
            rec.hhsize := Convert( slices, 764, ( -9, -8 ) );
            rec.hhtype := Convert_Hhtype_Type( Get( slices, 765 ));
            rec.tenure := Convert_Tenure_Type( Get( slices, 766 ));
            rec.qfedhi := Convert_Qfedhi_Type( Get( slices, 767 ));
            rec.qfvoc := Convert_Qfvoc_Type( Get( slices, 768 ));
            rec.qfachi := Convert_Qfachi_Type( Get( slices, 769 ));
            rec.jbft := Convert_Jbft_Type( Get( slices, 770 ));
            rec.payg := Convert( slices, 771, ( -9.0, -8.0, -7.0 ) );
            rec.payn := Convert( slices, 772, ( -9.0, -8.0, -7.0 ) );
            rec.paygu := Convert( slices, 773, ( -9.0, -8.0, -7.0 ) );
            rec.paynu := Convert( slices, 774, ( -9.0, -8.0, -7.0 ) );
            rec.paygty := Convert( slices, 775, ( -9.0, -8.0, -7.0 ) );
            rec.paygly := Convert( slices, 776, ( -9.0, -8.0, -7.0 ) );
            rec.paynty := Convert( slices, 777, ( -9.0, -8.0, -7.0 ) );
            rec.paynly := Convert( slices, 778, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jsprof := Convert( slices, 779, ( -9.0, -8.0, -7.0 ) );
            rec.jspayg := Convert( slices, 780, ( -9.0, -8.0, -7.0 ) );
            rec.cjsten := Convert( slices, 781, ( -9.0, -8.0, -7.0 ) );
            rec.cjswk9 := Convert( slices, 782, ( -9.0, -8.0, -7.0 ) );
            rec.jlid := Convert_Jlid_Type( Get( slices, 783 ));
            rec.jlyid := Convert_Jlyid_Type( Get( slices, 784 ));
            rec.jtyid := Convert_Jtyid_Type( Get( slices, 785 ));
            rec.jbseg := Convert_Jbseg_Type( Get( slices, 786 ));
            rec.jbgold := Convert( slices, 787, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbrgsc := Convert_Jbrgsc_Type( Get( slices, 788 ));
            rec.jbisco := Convert( slices, 789 );
            rec.jbcssm := Convert( slices, 790, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbcssf := Convert( slices, 791, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbhgs := Convert( slices, 792, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbsec := Convert_Jbsec_Type( Get( slices, 793 ));
            rec.njbwks := Convert( slices, 794, ( -9.0, -8.0, -7.0 ) );
            rec.njuwks := Convert( slices, 795, ( -9.0, -8.0, -7.0 ) );
            rec.njiwks := Convert( slices, 796, ( -9.0, -8.0, -7.0 ) );
            rec.njbnew := Convert( slices, 797, ( -9, -8, -7 ) );
            rec.njbsp := Convert( slices, 798, ( -9, -8, -7 ) );
            rec.njusp := Convert( slices, 799, ( -9, -8, -7 ) );
            rec.njisp := Convert( slices, 800, ( -9, -8, -7 ) );
            rec.jbstatl := Convert( slices, 801, ( -9, -8, -7, -2, -1 ) );
            rec.jbstatt := Convert( slices, 802, ( -9, -8, -7, -2, -1 ) );
            rec.jbsocly := Convert( slices, 803, ( -9, -8, -7 ) );
            rec.jlseg := Convert_Jlseg_Type( Get( slices, 804 ));
            rec.jlgold := Convert( slices, 805, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlrgsc := Convert_Jlrgsc_Type( Get( slices, 806 ));
            rec.jlisco := Convert( slices, 807 );
            rec.jlcssm := Convert( slices, 808, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlcssf := Convert( slices, 809, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlhgs := Convert( slices, 810, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlsec := Convert_Jlsec_Type( Get( slices, 811 ));
            rec.vote := Convert_Vote_Type( Get( slices, 812 ));
            rec.fimnp := Convert( slices, 813, ( -9.0, -8.0, -7.0 ) );
            rec.fimnb := Convert( slices, 814, ( -9.0, -8.0, -7.0 ) );
            rec.fimni := Convert( slices, 815, ( -9.0, -8.0, -7.0 ) );
            rec.fimnt := Convert( slices, 816, ( -9.0, -8.0, -7.0 ) );
            rec.fimnl := Convert( slices, 817, ( -9.0, -8.0, -7.0 ) );
            rec.fimnnl := Convert( slices, 818, ( -9.0, -8.0, -7.0 ) );
            rec.fimn := Convert( slices, 819, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrl := Convert( slices, 820, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrnl := Convert( slices, 821, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrp := Convert( slices, 822, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrb := Convert( slices, 823, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrt := Convert( slices, 824, ( -9.0, -8.0, -7.0 ) );
            rec.fiyri := Convert( slices, 825, ( -9.0, -8.0, -7.0 ) );
            rec.fiyr := Convert( slices, 826, ( -9.0, -8.0, -7.0 ) );
            rec.fihhmn := Convert( slices, 827, ( -9.0, -8.0, -7.0 ) );
            rec.hlghq1 := Convert( slices, 828, ( -9, -8, -7 ) );
            rec.hlghq2 := Convert( slices, 829, ( -9, -8, -7 ) );
            rec.spjb := Convert_Spjb_Type( Get( slices, 830 ));
            rec.spsoc := Convert( slices, 831, ( -9.0, -8.0 ) );
            rec.spjbhr := Convert( slices, 832, ( -9, -8, -7 ) );
            rec.spjbot := Convert( slices, 833, ( -9, -8, -7 ) );
            rec.sppayg := Convert( slices, 834, ( -9.0, -8.0, -7.0 ) );
            rec.spjbyr := Convert( slices, 835, ( -9, -8, -7 ) );
            rec.lrwght := Convert( slices, 836 );
            rec.lewght := Convert( slices, 837 );
            rec.xrwght := Convert( slices, 838 );
            rec.xewght := Convert( slices, 839 );
            rec.j2payi := Convert( slices, 840, ( -9, -8, -7, -3, -2, -1 ) );
            rec.fiyrdii := Convert_Fiyrdii_Type( Get( slices, 841 ));
            rec.prearni := Convert( slices, 842, ( -9, -8, -2, -1 ) );
            rec.prfitbi := Convert_Prfitbi_Type( Get( slices, 843 ));
            rec.paygui := Convert_Fimnbi_Type( Get( slices, 844 ));
            rec.paynui := Convert_Fimnbi_Type( Get( slices, 845 ));
            rec.paygti := Convert_Fimnbi_Type( Get( slices, 846 ));
            rec.paygli := Convert_Fimnbi_Type( Get( slices, 847 ));
            rec.paynti := Convert_Fimnbi_Type( Get( slices, 848 ));
            rec.paynli := Convert_Fimnbi_Type( Get( slices, 849 ));
            rec.jsprofi := Convert_Fimnbi_Type( Get( slices, 850 ));
            rec.jspaygi := Convert_Fimnbi_Type( Get( slices, 851 ));
            rec.fimnpi := Convert_Fimnbi_Type( Get( slices, 852 ));
            rec.fimnbi := Convert_Fimnbi_Type( Get( slices, 853 ));
            rec.fimnii := Convert_Fimnii_Type( Get( slices, 854 ));
            rec.fimnti := Convert_Fimnii_Type( Get( slices, 855 ));
            rec.fimnnli := Convert_Fimnbi_Type( Get( slices, 856 ));
            rec.fimnli := Convert_Fimnbi_Type( Get( slices, 857 ));
            rec.fimnthi := Convert_Fimnii_Type( Get( slices, 858 ));
            rec.fiyrli := Convert_Fimnbi_Type( Get( slices, 859 ));
            rec.fiyrnli := Convert_Fimnbi_Type( Get( slices, 860 ));
            rec.fiyrpi := Convert_Fimnii_Type( Get( slices, 861 ));
            rec.fiyrbi := Convert_Fimnbi_Type( Get( slices, 862 ));
            rec.fiyrti := Convert_Fimnbi_Type( Get( slices, 863 ));
            rec.fiyrii := Convert_Fimnbi_Type( Get( slices, 864 ));
            rec.fiyeari := Convert_Fimnbi_Type( Get( slices, 865 ));
            rec.sppaygi := Convert_Prfitbi_Type( Get( slices, 866 ));
            rec.fihhmni := Convert_Fihhmni_Type( Get( slices, 867 ));
            rec.mrjend := Convert( slices, 868, ( -9, -8, -7, -3, -2, -1 ) );
            rec.mrjsoc := Convert( slices, 869, ( -9, -8, -7, -3 ) );
            rec.mrjsic := Convert( slices, 870, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjsemp := Convert_Mrjsemp_Type( Get( slices, 871 ));
            rec.mrjboss := Convert_Mrjboss_Type( Get( slices, 872 ));
            rec.mrjmngr := Convert_Mrjmngr_Type( Get( slices, 873 ));
            rec.mrjsize := Convert_Mrjsize_Type( Get( slices, 874 ));
            rec.mrjseg := Convert_Maseg_Type( Get( slices, 875 ));
            rec.mrjgold := Convert( slices, 876, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjrgsc := Convert_Margsc_Type( Get( slices, 877 ));
            rec.mrjisco := Convert( slices, 878 );
            rec.mrjcssm := Convert( slices, 879, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjcssf := Convert( slices, 880, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjhgs := Convert( slices, 881, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjsec := Convert_J1sec_Type( Get( slices, 882 ));
            rec.doiy4 := Convert( slices, 883, ( -9, -8, -7, -2, -1 ) );
            rec.plnowy4 := Convert( slices, 884, ( -9, -8, -7, -2, -1 ) );
            rec.edendy4 := Convert( slices, 885, ( -9, -8, -7, -3, -2, -1 ) );
            rec.mlchy4 := Convert( slices, 886, ( -9, -8, -7, -2, -1 ) );
            rec.yr2uk4 := Convert( slices, 887, ( -9, -8, -7, -2, -1 ) );
            rec.jbbgy4 := Convert( slices, 888, ( -9, -8, -7, -2, -1 ) );
            rec.jsprby4 := Convert( slices, 889, ( -9, -8, -7, -2, -1 ) );
            rec.jsprey4 := Convert( slices, 890, ( -9, -8, -7, -2, -1 ) );
            rec.jspyby4 := Convert( slices, 891, ( -9, -8, -7, -2, -1 ) );
            rec.jspyey4 := Convert( slices, 892, ( -9, -8, -7, -2, -1 ) );
            rec.jsbgy4 := Convert( slices, 893, ( -9, -8, -7, -2, -1 ) );
            rec.cjsbgy4 := Convert( slices, 894, ( -9, -8, -7, -2, -1 ) );
            rec.jlend4 := Convert( slices, 895, ( -9, -8, -7, -2, -1 ) );
            rec.penb4y4 := Convert( slices, 896, ( -9, -8, -7, -2, -1 ) );
            rec.penyr4 := Convert( slices, 897, ( -9, -8, -7, -2, -1 ) );
            rec.presby4 := Convert( slices, 898, ( -9, -8, -7, -2, -1 ) );
            rec.prjbby4 := Convert( slices, 899, ( -9, -8, -7, -2, -1 ) );
            rec.neyrjn4 := Convert( slices, 900, ( -9, -8, -7, -2, -1 ) );
            rec.sppid := Convert( slices, 901 );
            rec.fpid := Convert( slices, 902 );
            rec.mpid := Convert( slices, 903 );
            rec.distmov := Convert( slices, 904, ( -9.0, -8.0, -7.0 ) );
            rec.region2 := Convert_Region2_Type( Get( slices, 905 ));
            rec.isced := Convert_Isced_Type( Get( slices, 906 ));
            rec.casmin := Convert_Casmin_Type( Get( slices, 907 ));
            rec.jbiscon := Convert( slices, 908, ( -9, -8, -7, -2, -1 ) );
            rec.jliscon := Convert( slices, 909, ( -9, -8, -7, -2, -1 ) );
            rec.mrjiscn := Convert( slices, 910, ( -9, -8, -7, -2, -1 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Indresp_component ).start_pos = 0 ) then
               index.pointers( Indresp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Indresp_component ).counter := index.pointers( Indresp_component ).counter + 1;
            Put_Index( index_map, index );
            Indresp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Indresp_IO.Close( bin_file );
   end Create_Indresp_Wave_F;




   procedure Create_Indsamp_Wave_F( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Indsamp_IO.File_Type;
      rec         : Indsamp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Indsamp_IO.Create (bin_file, Indsamp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.pid := Convert( slices, 3 );
            rec.iviow5 := Convert_Iviow4_Type( Get( slices, 4 ));
            rec.ivievr := Convert_Ivievr_Type( Get( slices, 5 ));
            rec.ivelig := Convert_Ivelig_Type( Get( slices, 6 ));
            rec.hhmem := Convert_Hhmem_Type( Get( slices, 7 ));
            rec.newhy := Convert_Newhy_Type( Get( slices, 8 ));
            rec.nemnjn := Convert_Nemnjn_Type( Get( slices, 9 ));
            rec.neyrjn := Convert( slices, 10, ( -9, -8, -2, -1 ) );
            rec.lvwhy := Convert_Lvwhy_Type( Get( slices, 11 ));
            rec.lvmn := Convert_Lvmn_Type( Get( slices, 12 ));
            rec.lvyr := Convert( slices, 13, ( -9, -8, -2, -1 ) );
            rec.lvloc := Convert_Lvloc_Type( Get( slices, 14 ));
            rec.ivfio := Convert_Ivfio_Type( Get( slices, 15 ));
            rec.ivrref := Convert_Ivrref_Type( Get( slices, 16 ));
            rec.ivireis := Convert_Ivireis_Type( Get( slices, 17 ));
            rec.finloc := Convert_Finloc_Type( Get( slices, 18 ));
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 19 ));
            rec.sampst := Convert_Sampst_Type( Get( slices, 20 ));
            rec.movest := Convert_Movest_Type( Get( slices, 21 ));
            rec.lewght := Convert( slices, 22, ( -9.0, -8.0, -1.0 ) );
            rec.lrwght := Convert( slices, 23, ( -9.0, -8.0, -1.0 ) );
            rec.neyrjn4 := Convert( slices, 24, ( -9, -8, -7, -2, -1 ) );
            rec.lvyr4 := Convert( slices, 25, ( -9, -8, -7, -2, -1 ) );
            rec.distmov := Convert( slices, 26, ( -9.0, -8.0 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Indsamp_component ).start_pos = 0 ) then
               index.pointers( Indsamp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Indsamp_component ).counter := index.pointers( Indsamp_component ).counter + 1;
            Put_Index( index_map, index );
            Indsamp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Indsamp_IO.Close( bin_file );
   end Create_Indsamp_Wave_F;




   procedure Create_Jobhist_Wave_F( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Jobhist_IO.File_Type;
      rec         : Jobhist_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Jobhist_IO.Create (bin_file, Jobhist_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.jhstat := Convert_Jhstat_Type( Get( slices, 3 ));
            rec.jhbgd := Convert( slices, 4, ( -9, -8, -7, -2, -1 ) );
            rec.jhbgm := Convert_Jbbgm1_Type( Get( slices, 5 ));
            rec.jhbgy := Convert( slices, 6, ( -9, -8, -2, -1 ) );
            rec.jspno := Convert( slices, 7 );
            rec.jhsoc := Convert( slices, 8, ( -9, -8, -2, -1 ) );
            rec.jhsemp := Convert_Jhsemp_Type( Get( slices, 9 ));
            rec.jhboss := Convert_Bscon_Type( Get( slices, 10 ));
            rec.jhsect := Convert_Jhsect_Type( Get( slices, 11 ));
            rec.jhmngr := Convert_Jhmngr_Type( Get( slices, 12 ));
            rec.jhpldf := Convert_Jhpldf_Type( Get( slices, 13 ));
            rec.jhsic := Convert( slices, 14, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.jhsize := Convert_Jhsize_Type( Get( slices, 15 ));
            rec.jhpayl := Convert( slices, 16, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhpylw := Convert( slices, 17, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.jhpylg := Convert_Jhpylg_Type( Get( slices, 18 ));
            rec.jhstpy := Convert_Jhstpy_Type( Get( slices, 19 ));
            rec.jblky := Convert_Jblky_Type( Get( slices, 20 ));
            rec.jhendd := Convert( slices, 21, ( -9, -8, -7, -2, -1 ) );
            rec.jhendm := Convert_Jbbgm1_Type( Get( slices, 22 ));
            rec.jhendy := Convert( slices, 23, ( -9, -8, -2, -1 ) );
            rec.jha9ly := Convert_Jha9ly_Type( Get( slices, 24 ));
            rec.jhseg := Convert_Jhseg_Type( Get( slices, 25 ));
            rec.jhgold := Convert( slices, 26, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhrgsc := Convert_Jhrgsc_Type( Get( slices, 27 ));
            rec.jhisco := Convert( slices, 28, ( -9, -8 ) );
            rec.jhcssm := Convert( slices, 29, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhcssf := Convert( slices, 30, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhhgs := Convert( slices, 31, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhsec := Convert_Jhsec_Type( Get( slices, 32 ));
            rec.jhspw := Convert( slices, 33, ( -9.0, -8.0 ) );
            rec.jhgpay := Convert( slices, 34, ( -9.0, -8.0, -7.0 ) );
            rec.jhnpay := Convert( slices, 35, ( -9.0, -8.0, -7.0, -1.0 ) );
            rec.jhgpayi := Convert_Jhgpayi_Type( Get( slices, 36 ));
            rec.jhnpayi := Convert_Jhgpayi_Type( Get( slices, 37 ));
            rec.jhbgy4 := Convert( slices, 38, ( -9, -8, -7, -2, -1 ) );
            rec.jhendy4 := Convert( slices, 39, ( -9, -8, -7, -2, -1 ) );
            rec.pid := Convert( slices, 40 );
            rec.jhiscon := Convert( slices, 41, ( -9, -8, -7, -2, -1 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Jobhist_component ).start_pos = 0 ) then
               index.pointers( Jobhist_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Jobhist_component ).counter := index.pointers( Jobhist_component ).counter + 1;
            Put_Index( index_map, index );
            Jobhist_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Jobhist_IO.Close( bin_file );
   end Create_Jobhist_Wave_F;




   procedure Create_Youth_Wave_F( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Youth_IO.File_Type;
      rec         : Youth_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Youth_IO.Create (bin_file, Youth_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.pno := Convert( slices, 1 );
            rec.ypdobm := Convert_Ypdobm_Type( Get( slices, 2 ));
            rec.ypdoby := Convert( slices, 3, ( -9, -8, -2, -1 ) );
            rec.ypsex := Convert_Ypsex_Type( Get( slices, 4 ));
            rec.yptvbr := Convert_Ypbeau_Type( Get( slices, 5 ));
            rec.ytvhrs := Convert_Ytvhrs_Type( Get( slices, 6 ));
            rec.ytvlmt := Convert_Ytvlmt_Type( Get( slices, 7 ));
            rec.ytvstp := Convert_Ytvlmt_Type( Get( slices, 8 ));
            rec.ypcomp := Convert_Ypcomp_Type( Get( slices, 9 ));
            rec.yppals := Convert_Yppalo_Type( Get( slices, 10 ));
            rec.yputel := Convert_Yputel_Type( Get( slices, 11 ));
            rec.yplate := Convert_Yplate_Type( Get( slices, 12 ));
            rec.ypargm := Convert_Ypargm_Type( Get( slices, 13 ));
            rec.ypargf := Convert_Ypargf_Type( Get( slices, 14 ));
            rec.yptlkm := Convert_Ypargm_Type( Get( slices, 15 ));
            rec.yptlkf := Convert_Ypargf_Type( Get( slices, 16 ));
            rec.yptlkp := Convert_Yptlkp_Type( Get( slices, 17 ));
            rec.ypnpal := Convert( slices, 18, ( -9, -8, -2, -1 ) );
            rec.ypfght := Convert_Ypfght_Type( Get( slices, 19 ));
            rec.ypeatn := Convert_Ypeatn_Type( Get( slices, 20 ));
            rec.yppkml := Convert( slices, 21, ( -9, -2, -1 ) );
            rec.yppkmp := Convert( slices, 22, ( -9, -2, -1 ) );
            rec.ypbeau := Convert_Ypbeau_Type( Get( slices, 23 ));
            rec.ypdklm := Convert_Ypdklm_Type( Get( slices, 24 ));
            rec.ypsmev := Convert_Ypbeau_Type( Get( slices, 25 ));
            rec.ypsmag := Convert( slices, 26, ( -9, -8, -2, -1 ) );
            rec.ypsmof := Convert_Ypsmof_Type( Get( slices, 27 ));
            rec.ypsmlw := Convert( slices, 28, ( -9, -8, -2, -1 ) );
            rec.ypsmyr := Convert( slices, 29, ( -9, -8, -2, -1 ) );
            rec.ypsmpa := Convert_Ypbeau_Type( Get( slices, 30 ));
            rec.ypnosm := Convert_Ypnosm_Type( Get( slices, 31 ));
            rec.ypedsm := Convert_Ypdgwh_Type( Get( slices, 32 ));
            rec.ypsmop := Convert_Ypsmop_Type( Get( slices, 33 ));
            rec.ypdgsc := Convert_Ypbeau_Type( Get( slices, 34 ));
            rec.ypdgpa := Convert_Ypbeau_Type( Get( slices, 35 ));
            rec.ypdgwh := Convert_Ypdgwh_Type( Get( slices, 36 ));
            rec.ypdgfr := Convert_Ypdgfr_Type( Get( slices, 37 ));
            rec.ypdgyr := Convert_Ypbeau_Type( Get( slices, 38 ));
            rec.ypnodg := Convert_Ypnodg_Type( Get( slices, 39 ));
            rec.ypophd := Convert_Ypopfj_Type( Get( slices, 40 ));
            rec.ypopha := Convert_Ypopfj_Type( Get( slices, 41 ));
            rec.ypophe := Convert_Ypopfj_Type( Get( slices, 42 ));
            rec.ypophc := Convert_Ypopfj_Type( Get( slices, 43 ));
            rec.ypmenu := Convert_Ypmenu_Type( Get( slices, 44 ));
            rec.yphlta := Convert_Yphlta_Type( Get( slices, 45 ));
            rec.yphltb := Convert_Yphltb_Type( Get( slices, 46 ));
            rec.ypsad := Convert_Ypsad_Type( Get( slices, 47 ));
            rec.ypwor := Convert_Ypwor_Type( Get( slices, 48 ));
            rec.ypbull := Convert_Ypbull_Type( Get( slices, 49 ));
            rec.yplone := Convert_Ypbored_Type( Get( slices, 50 ));
            rec.ypesta := Convert_Ypesta_Type( Get( slices, 51 ));
            rec.ypestb := Convert_Ypesta_Type( Get( slices, 52 ));
            rec.ypestc := Convert_Ypesta_Type( Get( slices, 53 ));
            rec.ypestd := Convert_Ypesta_Type( Get( slices, 54 ));
            rec.ypeste := Convert_Ypesta_Type( Get( slices, 55 ));
            rec.ypestf := Convert_Ypesta_Type( Get( slices, 56 ));
            rec.ypestg := Convert_Ypesta_Type( Get( slices, 57 ));
            rec.yphsw := Convert_Yphap_Type( Get( slices, 58 ));
            rec.yphap := Convert_Yphap_Type( Get( slices, 59 ));
            rec.yphfm := Convert_Yphap_Type( Get( slices, 60 ));
            rec.yphfr := Convert_Yphap_Type( Get( slices, 61 ));
            rec.yphlf := Convert_Yphap_Type( Get( slices, 62 ));
            rec.ypopla := Convert_Ypopfb_Type( Get( slices, 63 ));
            rec.ypopff := Convert_Ypopfb_Type( Get( slices, 64 ));
            rec.ypopfb := Convert_Ypopfb_Type( Get( slices, 65 ));
            rec.ypoplb := Convert_Ypopfb_Type( Get( slices, 66 ));
            rec.ypoplc := Convert_Ypopfb_Type( Get( slices, 67 ));
            rec.ypvte6 := Convert_Ypvte6_Type( Get( slices, 68 ));
            rec.ypvte3 := Convert_Ypvte3_Type( Get( slices, 69 ));
            rec.ypoprl := Convert_Ypoprl_Type( Get( slices, 70 ));
            rec.ypnbks := Convert( slices, 71, ( -9, -8, -2, -1 ) );
            rec.ypopsc := Convert_Ypopsc_Type( Get( slices, 72 ));
            rec.yppasc := Convert_Yppasc_Type( Get( slices, 73 ));
            rec.yplvsc := Convert_Yplvsc_Type( Get( slices, 74 ));
            rec.yplvhm := Convert( slices, 75, ( -9, -8, -2, -1 ) );
            rec.ypamar := Convert( slices, 76, ( -9, -8, -2, -1 ) );
            rec.ypapar := Convert( slices, 77, ( -9, -8, -2, -1 ) );
            rec.ypwhrs := Convert( slices, 78, ( -9, -8, -2, -1 ) );
            rec.yppay := Convert( slices, 79, ( -9, -8, -2, -1 ) );
            rec.ypsoc := Convert( slices, 80, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.ypsocy := Convert_Ypsocy_Type( Get( slices, 81 ));
            rec.ypjbqa := Convert_Ypjbqa_Type( Get( slices, 82 ));
            rec.ypjbqb := Convert_Ypjbqa_Type( Get( slices, 83 ));
            rec.ypjbqc := Convert_Ypjbqa_Type( Get( slices, 84 ));
            rec.ypjbqd := Convert_Ypjbqa_Type( Get( slices, 85 ));
            rec.ypjbqe := Convert_Ypjbqa_Type( Get( slices, 86 ));
            rec.ypjbqt := Convert_Ypjbqt_Type( Get( slices, 87 ));
            rec.ypevnt1 := Convert( slices, 88, ( -9, -8, -2, -1 ) );
            rec.ypevnt2 := Convert( slices, 89, ( -9, -8, -2, -1 ) );
            rec.ypevnt3 := Convert( slices, 90, ( -9, -8, -2, -1 ) );
            rec.ypevnt4 := Convert( slices, 91, ( -9, -8, -2, -1 ) );
            rec.ypwght := Convert( slices, 92 );
            rec.hid := Convert( slices, 93 );
            rec.ypdoby4 := Convert( slices, 94, ( -9, -8, -7, -2, -1 ) );
            rec.pid := Convert( slices, 95 );
            rec.fnspno := Convert( slices, 96, ( -9, -8 ) );
            rec.fnspid := Convert( slices, 97, ( -9.0, -8.0 ) );
            rec.mnspno := Convert( slices, 98, ( -9, -8 ) );
            rec.mnspid := Convert( slices, 99, ( -9.0, -8.0 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Youth_component ).start_pos = 0 ) then
               index.pointers( Youth_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Youth_component ).counter := index.pointers( Youth_component ).counter + 1;
            Put_Index( index_map, index );
            Youth_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Youth_IO.Close( bin_file );
   end Create_Youth_Wave_F;




   procedure Create_Egoalt_Wave_G( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Egoalt_IO.File_Type;
      rec         : Egoalt_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Egoalt_IO.Create (bin_file, Egoalt_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.opno := Convert( slices, 3, (  1 .. 0 => -9 ) );
            rec.rel := Convert_Rel_Type( Get( slices, 4 ));
            rec.sex := Convert_Sex_Type( Get( slices, 5 ));
            rec.osex := Convert_Hgsex_Type( Get( slices, 6 ));
            rec.lwstat := Convert_Lwstat_Type( Get( slices, 7 ));
            rec.nwstat := Convert_Nwstat_Type( Get( slices, 8 ));
            rec.pid := Convert( slices, 9 );
            rec.opid := Convert( slices, 10 );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Egoalt_component ).start_pos = 0 ) then
               index.pointers( Egoalt_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Egoalt_component ).counter := index.pointers( Egoalt_component ).counter + 1;
            Put_Index( index_map, index );
            Egoalt_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Egoalt_IO.Close( bin_file );
   end Create_Egoalt_Wave_G;




   procedure Create_Hhresp_Wave_G( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Hhresp_IO.File_Type;
      rec         : Hhresp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Hhresp_IO.Create (bin_file, Hhresp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.hhdoi := Convert( slices, 2, ( -9, -8, -7 ) );
            rec.hhmoi := Convert_Doim_Type( Get( slices, 3 ));
            rec.hhyoi4 := Convert( slices, 4, ( -9, -8, -7, -2, -1 ) );
            rec.hstype := Convert_Hstype_Type( Get( slices, 5 ));
            rec.hsrins := Convert_Cjsck2_Type( Get( slices, 6 ));
            rec.hsroom := Convert( slices, 7, ( -9, -8, -7, -2, -1 ) );
            rec.hsownd := Convert_Hsownd_Type( Get( slices, 8 ));
            rec.hsowr1 := Convert( slices, 9, ( -9, -8, -7, -2, -1 ) );
            rec.hsowr2 := Convert( slices, 10, ( -9, -8, -7, -2, -1 ) );
            rec.mghave := Convert_Mghave_Type( Get( slices, 11 ));
            rec.hsowrp := Convert_Bscon_Type( Get( slices, 12 ));
            rec.mgynot := Convert_Mgynot_Type( Get( slices, 13 ));
            rec.hscost := Convert( slices, 14, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.mgly := Convert_Bscon_Type( Get( slices, 15 ));
            rec.hsivw6 := Convert( slices, 16, ( -9, -8, -7, -2, -1 ) );
            rec.mgxtra := Convert_Bscon_Type( Get( slices, 17 ));
            rec.mgnew := Convert( slices, 18, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.mgxty1 := Convert_Mgxty1_Type( Get( slices, 19 ));
            rec.mgxty2 := Convert_Mgxty2_Type( Get( slices, 20 ));
            rec.mgxty3 := Convert_Mgxty3_Type( Get( slices, 21 ));
            rec.mgxty4 := Convert_Mgxty4_Type( Get( slices, 22 ));
            rec.mgxty5 := Convert_Mgxty5_Type( Get( slices, 23 ));
            rec.mgold := Convert( slices, 24, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.mglife := Convert( slices, 25, ( -9, -8, -7, -2, -1 ) );
            rec.mgtype := Convert_Mgtype_Type( Get( slices, 26 ));
            rec.xpmg := Convert( slices, 27, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.xpmg1 := Convert_Bscon_Type( Get( slices, 28 ));
            rec.xpmg2 := Convert_Bscon_Type( Get( slices, 29 ));
            rec.xpmg3 := Convert_Bscon_Type( Get( slices, 30 ));
            rec.xpmg4 := Convert_Bscon_Type( Get( slices, 31 ));
            rec.mgyr04 := Convert( slices, 32, ( -9, -8, -7, -2, -1 ) );
            rec.hsyr04 := Convert( slices, 33, ( -9, -8, -7, -2, -1 ) );
            rec.hsval := Convert( slices, 34, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.hsjb := Convert_Bscon_Type( Get( slices, 35 ));
            rec.rentp1 := Convert( slices, 36, ( -9, -8, -7, -2, -1 ) );
            rec.rentp2 := Convert( slices, 37, ( -9, -8, -7, -2, -1 ) );
            rec.rentll := Convert_Rentll_Type( Get( slices, 38 ));
            rec.rentf := Convert_Rentf_Type( Get( slices, 39 ));
            rec.rent := Convert( slices, 40, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.rentw := Convert( slices, 41, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.rent1 := Convert_Rent1_Type( Get( slices, 42 ));
            rec.rent2 := Convert_Rent1_Type( Get( slices, 43 ));
            rec.rent3 := Convert_Bscon_Type( Get( slices, 44 ));
            rec.rent4 := Convert_Bscon_Type( Get( slices, 45 ));
            rec.rent5 := Convert_Bscon_Type( Get( slices, 46 ));
            rec.rent6 := Convert_Bscon_Type( Get( slices, 47 ));
            rec.rent7 := Convert_Rent7_Type( Get( slices, 48 ));
            rec.rent8 := Convert_Coh1mr_Type( Get( slices, 49 ));
            rec.renthb := Convert_Renthb_Type( Get( slices, 50 ));
            rec.rentg := Convert( slices, 51, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.rentgw := Convert( slices, 52, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.xphsdf := Convert( slices, 53, ( -9, -8, -7, -2, -1 ) );
            rec.xphsd1 := Convert_Bscon_Type( Get( slices, 54 ));
            rec.xphsd2 := Convert_Bscon_Type( Get( slices, 55 ));
            rec.xphsdb := Convert_Bscon_Type( Get( slices, 56 ));
            rec.hskch := Convert_Boolean_With_Missing( Get( slices, 57 ));
            rec.hskchs := Convert_Boolean_With_Missing( Get( slices, 58 ));
            rec.hsbth := Convert_Boolean_With_Missing( Get( slices, 59 ));
            rec.hsbths := Convert_Boolean_With_Missing( Get( slices, 60 ));
            rec.hstlt := Convert_Boolean_With_Missing( Get( slices, 61 ));
            rec.hstlts := Convert_Boolean_With_Missing( Get( slices, 62 ));
            rec.hsgdn := Convert_Boolean_With_Missing( Get( slices, 63 ));
            rec.hsgdns := Convert_Boolean_With_Missing( Get( slices, 64 ));
            rec.heatch := Convert_Bscon_Type( Get( slices, 65 ));
            rec.heatyp := Convert_Heatyp_Type( Get( slices, 66 ));
            rec.xpgasy := Convert( slices, 67, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.xplecy := Convert( slices, 68, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.xpoily := Convert( slices, 69, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.xpsfly := Convert( slices, 70, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.hsprbg := Convert_Boolean_With_Missing( Get( slices, 71 ));
            rec.hsprbh := Convert_Boolean_With_Missing( Get( slices, 72 ));
            rec.hsprbi := Convert_Boolean_With_Missing( Get( slices, 73 ));
            rec.hsprbj := Convert_Boolean_With_Missing( Get( slices, 74 ));
            rec.hsprbk := Convert_Boolean_With_Missing( Get( slices, 75 ));
            rec.hsprbl := Convert_Boolean_With_Missing( Get( slices, 76 ));
            rec.hsprbm := Convert_Boolean_With_Missing( Get( slices, 77 ));
            rec.hsprbn := Convert_Boolean_With_Missing( Get( slices, 78 ));
            rec.hsprbo := Convert_Boolean_With_Missing( Get( slices, 79 ));
            rec.hsprbp := Convert_Boolean_With_Missing( Get( slices, 80 ));
            rec.hsprbq := Convert_Boolean_With_Missing( Get( slices, 81 ));
            rec.hsctax := Convert_Hsctax_Type( Get( slices, 82 ));
            rec.hs2ownd := Convert_Bscon_Type( Get( slices, 83 ));
            rec.hs2val := Convert_Hs2val_Type( Get( slices, 84 ));
            rec.mgtot := Convert( slices, 85, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.cdhave := Convert_Bscon_Type( Get( slices, 86 ));
            rec.cdbght := Convert_Bscon_Type( Get( slices, 87 ));
            rec.cd1use := Convert_Cd1new_Type( Get( slices, 88 ));
            rec.cd1new := Convert( slices, 89, ( -9, -8, -7, -2, -1 ) );
            rec.cd1cst := Convert( slices, 90, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd2use := Convert_Cd1new_Type( Get( slices, 91 ));
            rec.cd2new := Convert( slices, 92, ( -9, -8, -7, -2, -1 ) );
            rec.cd2cst := Convert( slices, 93, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd3use := Convert_Cd1new_Type( Get( slices, 94 ));
            rec.cd3new := Convert( slices, 95, ( -9, -8, -7, -2, -1 ) );
            rec.cd3cst := Convert( slices, 96, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd4use := Convert_Cd1new_Type( Get( slices, 97 ));
            rec.cd4new := Convert( slices, 98, ( -9, -8, -7, -2, -1 ) );
            rec.cd4cst := Convert( slices, 99, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd5use := Convert_Cd1new_Type( Get( slices, 100 ));
            rec.cd5new := Convert( slices, 101, ( -9, -8, -7, -2, -1 ) );
            rec.cd5cst := Convert( slices, 102, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd6use := Convert_Cd1new_Type( Get( slices, 103 ));
            rec.cd6new := Convert( slices, 104, ( -9, -8, -7, -2, -1 ) );
            rec.cd6cst := Convert( slices, 105, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd7use := Convert_Cd1new_Type( Get( slices, 106 ));
            rec.cd7new := Convert( slices, 107, ( -9, -8, -7, -2, -1 ) );
            rec.cd7cst := Convert( slices, 108, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd8use := Convert_Cd1new_Type( Get( slices, 109 ));
            rec.cd8new := Convert( slices, 110, ( -9, -8, -7, -2, -1 ) );
            rec.cd8cst := Convert( slices, 111, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd9use := Convert_Cd1new_Type( Get( slices, 112 ));
            rec.cd9new := Convert( slices, 113, ( -9, -8, -7, -2, -1 ) );
            rec.cd9cst := Convert( slices, 114, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd10use := Convert_Cd10new_Type( Get( slices, 115 ));
            rec.cd10new := Convert( slices, 116, ( -9, -8, -7, -2, -1 ) );
            rec.cd10cst := Convert( slices, 117, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd11use := Convert_Cd10new_Type( Get( slices, 118 ));
            rec.cd11new := Convert( slices, 119, ( -9, -8, -7, -2, -1 ) );
            rec.cd11cst := Convert( slices, 120, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd12use := Convert_Cd10new_Type( Get( slices, 121 ));
            rec.cd12new := Convert( slices, 122, ( -9, -8, -7, -2, -1 ) );
            rec.cd12cst := Convert( slices, 123, ( -9, -8, -7, -3, -2, -1 ) );
            rec.xphp := Convert_Bscon_Type( Get( slices, 124 ));
            rec.xphpdf := Convert_Xphpdf_Type( Get( slices, 125 ));
            rec.hscana := Convert_Boolean_With_Missing( Get( slices, 126 ));
            rec.hscnta := Convert_Boolean_With_Missing( Get( slices, 127 ));
            rec.hscanb := Convert_Boolean_With_Missing( Get( slices, 128 ));
            rec.hscntb := Convert_Boolean_With_Missing( Get( slices, 129 ));
            rec.hscanc := Convert_Boolean_With_Missing( Get( slices, 130 ));
            rec.hscntc := Convert_Boolean_With_Missing( Get( slices, 131 ));
            rec.hscand := Convert_Boolean_With_Missing( Get( slices, 132 ));
            rec.hscntd := Convert_Boolean_With_Missing( Get( slices, 133 ));
            rec.hscane := Convert_Boolean_With_Missing( Get( slices, 134 ));
            rec.hscnte := Convert_Boolean_With_Missing( Get( slices, 135 ));
            rec.hscanf := Convert_Boolean_With_Missing( Get( slices, 136 ));
            rec.hscntf := Convert_Boolean_With_Missing( Get( slices, 137 ));
            rec.xpfood := Convert( slices, 138, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ncars := Convert_Ncars_Type( Get( slices, 139 ));
            rec.carown := Convert_Carown_Type( Get( slices, 140 ));
            rec.carval := Convert( slices, 141, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ivh1 := Convert( slices, 142, ( -9, -8, -7, -1 ) );
            rec.ivh2 := Convert( slices, 143, ( -9, -8, -7 ) );
            rec.ivh3 := Convert( slices, 144, ( -9, -8, -7 ) );
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 145 ));
            rec.hhorig := Convert_Hhorig_Type( Get( slices, 146 ));
            rec.hhdc := Convert_Hhdc_Type( Get( slices, 147 ));
            rec.xhwght := Convert( slices, 148, ( -9.0, -8.0 ) );
            rec.hhsize := Convert( slices, 149, ( -9, -8 ) );
            rec.hhtype := Convert_Hhtype_Type( Get( slices, 150 ));
            rec.region := Convert_Region_Type( Get( slices, 151 ));
            rec.nch02 := Convert( slices, 152, ( -9, -8 ) );
            rec.nch34 := Convert( slices, 153, ( -9, -8 ) );
            rec.nch511 := Convert( slices, 154, ( -9, -8 ) );
            rec.nch1215 := Convert( slices, 155, ( -9, -8 ) );
            rec.nch1618 := Convert( slices, 156, ( -9, -8 ) );
            rec.nkids := Convert( slices, 157, ( -9, -8 ) );
            rec.nwed := Convert( slices, 158, ( -9, -8 ) );
            rec.npens := Convert( slices, 159, ( -9, -8 ) );
            rec.na75pl := Convert( slices, 160, ( -9, -8 ) );
            rec.agechy := Convert( slices, 161, ( -9, -8 ) );
            rec.ncouple := Convert( slices, 162, ( -9, -8 ) );
            rec.nonepar := Convert( slices, 163, ( -9, -8 ) );
            rec.nemp := Convert( slices, 164, ( -9, -8 ) );
            rec.nwage := Convert( slices, 165, ( -9, -8 ) );
            rec.tenure := Convert_Tenure_Type( Get( slices, 166 ));
            rec.xphsn := Convert( slices, 167, ( -9.0, -8.0, -7.0 ) );
            rec.xphsg := Convert( slices, 168, ( -9.0, -8.0, -7.0 ) );
            rec.fieqfcb := Convert( slices, 169, ( -9.0, -8.0 ) );
            rec.fieqfca := Convert( slices, 170, ( -9.0, -8.0 ) );
            rec.fihhyr := Convert( slices, 171, ( -9.0, -8.0, -7.0 ) );
            rec.fihhmn := Convert( slices, 172, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyl := Convert( slices, 173, ( -9.0, -8.0, -7.0 ) );
            rec.fihhynl := Convert( slices, 174, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyp := Convert( slices, 175, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyb := Convert( slices, 176, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyt := Convert( slices, 177, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyi := Convert( slices, 178, ( -9.0, -8.0, -7.0 ) );
            rec.fihhml := Convert( slices, 179, (  1 .. 0 => -9.0 ) );
            rec.fihhmnl := Convert( slices, 180, (  1 .. 0 => -9.0 ) );
            rec.fihhmp := Convert( slices, 181, (  1 .. 0 => -9.0 ) );
            rec.fihhmb := Convert( slices, 182, (  1 .. 0 => -9.0 ) );
            rec.fihhmt := Convert( slices, 183, (  1 .. 0 => -9.0 ) );
            rec.fihhmi := Convert( slices, 184, (  1 .. 0 => -9.0 ) );
            rec.hhmove := Convert_Hhmove_Type( Get( slices, 185 ));
            rec.mgnewi := Convert( slices, 186, ( -9, -8, -7, -2, -1 ) );
            rec.xpmgi := Convert( slices, 187, ( -9, -8, -7, -2, -1 ) );
            rec.hsvali := Convert( slices, 188, ( -9, -8, -7, -2, -1 ) );
            rec.renti := Convert( slices, 189, ( -9, -8, -7, -4, -3, -2, -1 ) );
            rec.rentgi := Convert( slices, 190, ( -9, -8, -7, -2, -1 ) );
            rec.xphsni := Convert_Jhgpayi_Type( Get( slices, 191 ));
            rec.xphsgi := Convert_Jhgpayi_Type( Get( slices, 192 ));
            rec.fihhmni := Convert_Fihhmni_Type( Get( slices, 193 ));
            rec.fihhmli := Convert_Fihhmbi_Type( Get( slices, 194 ));
            rec.fihmnli := Convert_Fihhmbi_Type( Get( slices, 195 ));
            rec.fihhmpi := Convert_Fihhmbi_Type( Get( slices, 196 ));
            rec.fihhmbi := Convert_Fihhmbi_Type( Get( slices, 197 ));
            rec.fihhmti := Convert_Fihhmbi_Type( Get( slices, 198 ));
            rec.fihhmii := Convert_Fihhmbi_Type( Get( slices, 199 ));
            rec.fihhyri := Convert_Fihhmbi_Type( Get( slices, 200 ));
            rec.fihhyli := Convert_Fihhmbi_Type( Get( slices, 201 ));
            rec.fihhyni := Convert_Fihhmbi_Type( Get( slices, 202 ));
            rec.fihhypi := Convert_Fihhmbi_Type( Get( slices, 203 ));
            rec.fihhybi := Convert_Fihhmbi_Type( Get( slices, 204 ));
            rec.fihhyti := Convert_Fihhmbi_Type( Get( slices, 205 ));
            rec.fihhyii := Convert_Fihhmbi_Type( Get( slices, 206 ));
            rec.fihhsel := Convert_Fihhsel_Type( Get( slices, 207 ));
            rec.xhwghte := Convert( slices, 208 );
            rec.region2 := Convert_Region2_Type( Get( slices, 209 ));
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Hhresp_component ).start_pos = 0 ) then
               index.pointers( Hhresp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Hhresp_component ).counter := index.pointers( Hhresp_component ).counter + 1;
            Put_Index( index_map, index );
            Hhresp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Hhresp_IO.Close( bin_file );
   end Create_Hhresp_Wave_G;




   procedure Create_Hhsamp_Wave_G( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Hhsamp_IO.File_Type;
      rec         : Hhsamp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Hhsamp_IO.Create (bin_file, Hhsamp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.fid := Convert( slices, 2 );
            rec.ivnadd := Convert( slices, 3, ( -9.0, -8.0 ) );
            rec.ivia := Convert_Ivia_Type( Get( slices, 4 ));
--             rec.ivid := Convert( slices, 5 );
            rec.ivlnc := Convert( slices, 6, ( -9, -1 ) );
            rec.ivtnc := Convert( slices, 7, ( -9, -8, -1 ) );
            rec.iviam := Convert_Iviam_Type( Get( slices, 8 ));
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 9 ));
            rec.ivosmrh := Convert( slices, 10, ( -9, -8, -1 ) );
            rec.ivnsmrh := Convert( slices, 11, ( -9, -8, -1 ) );
            rec.ivrrefh := Convert_Ivrrefh_Type( Get( slices, 12 ));
            rec.ivisst := Convert_Ivisst_Type( Get( slices, 13 ));
            rec.ivconv := Convert_Ivconv_Type( Get( slices, 14 ));
            rec.ivreis := Convert_Ivreis_Type( Get( slices, 15 ));
            rec.hhdc := Convert_Hhdc_Type( Get( slices, 16 ));
            rec.hhorig := Convert_Hhorig_Type( Get( slices, 17 ));
            rec.gechphid := Convert( slices, 18 );
            rec.xhwght := Convert( slices, 19, ( -9.0, -8.0, -1.0 ) );
            rec.region := Convert_Region_Type( Get( slices, 20 ));
            rec.hhmove := Convert_Hhmove_Type( Get( slices, 21 ));
            rec.ahid := Convert( slices, 22 );
            rec.xhwghte := Convert( slices, 23 );
            rec.strata := Convert( slices, 24, ( -9, -8, -1 ) );
            rec.psu := Convert( slices, 25, ( -9, -8, -1 ) );
            rec.region2 := Convert_Region2_Type( Get( slices, 26 ));
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Hhsamp_component ).start_pos = 0 ) then
               index.pointers( Hhsamp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Hhsamp_component ).counter := index.pointers( Hhsamp_component ).counter + 1;
            Put_Index( index_map, index );
            Hhsamp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Hhsamp_IO.Close( bin_file );
   end Create_Hhsamp_Wave_G;




   procedure Create_Income_Wave_G( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Income_IO.File_Type;
      rec         : Income_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Income_IO.Create (bin_file, Income_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.pno := Convert( slices, 1 );
            rec.ficode := Convert_Ficode_Type( Get( slices, 2 ));
            rec.nfr := Convert( slices, 3, (  1 .. 0 => -9 ) );
            rec.frall := Convert_Frall_Type( Get( slices, 4 ));
            rec.fr01 := Convert_Cd1own_Type( Get( slices, 5 ));
            rec.fr02 := Convert_Cd1own_Type( Get( slices, 6 ));
            rec.fr03 := Convert_Cd1own_Type( Get( slices, 7 ));
            rec.fr04 := Convert( slices, 8, ( -9, -8, -2, -1 ) );
            rec.fr05 := Convert_Cd1own_Type( Get( slices, 9 ));
            rec.fr06 := Convert_Cd1own_Type( Get( slices, 10 ));
            rec.fr07 := Convert_Cd1own_Type( Get( slices, 11 ));
            rec.fr08 := Convert_Cd1own_Type( Get( slices, 12 ));
            rec.fr09 := Convert_Cd1own_Type( Get( slices, 13 ));
            rec.fr10 := Convert_Cd1own_Type( Get( slices, 14 ));
            rec.fr11 := Convert_Cd1own_Type( Get( slices, 15 ));
            rec.fr12 := Convert_Cd1own_Type( Get( slices, 16 ));
            rec.fr13 := Convert_Cd1own_Type( Get( slices, 17 ));
            rec.fr14 := Convert_Cd1own_Type( Get( slices, 18 ));
            rec.fr15 := Convert_Cd1own_Type( Get( slices, 19 ));
            rec.fr16 := Convert_Cd1own_Type( Get( slices, 20 ));
            rec.fr17 := Convert_Cd1own_Type( Get( slices, 21 ));
            rec.frnow := Convert_Frnow_Type( Get( slices, 22 ));
            rec.frval := Convert( slices, 23, ( -9.0, -8.0, -3.0, -2.0, -1.0 ) );
            rec.frw := Convert( slices, 24, ( -9.0, -8.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.frjt := Convert_Frjt_Type( Get( slices, 25 ));
            rec.frjtpn := Convert( slices, 26, ( -9, -8, -2, -1 ) );
            rec.hid := Convert( slices, 27 );
            rec.fiseq := Convert( slices, 28 );
            rec.fim09l := Convert( slices, 29, ( -9.0, -8.0, -3.0 ) );
            rec.fim10l := Convert( slices, 30, ( -9.0, -8.0, -3.0 ) );
            rec.fim11l := Convert( slices, 31, ( -9.0, -8.0, -3.0 ) );
            rec.fim12l := Convert( slices, 32, ( -9.0, -8.0, -3.0 ) );
            rec.fim01t := Convert( slices, 33, ( -9.0, -8.0, -3.0 ) );
            rec.fim02t := Convert( slices, 34, ( -9.0, -8.0, -3.0 ) );
            rec.fim03t := Convert( slices, 35, ( -9.0, -8.0, -3.0 ) );
            rec.fim04t := Convert( slices, 36, ( -9.0, -8.0, -3.0 ) );
            rec.fim05t := Convert( slices, 37, ( -9.0, -8.0, -3.0 ) );
            rec.fim06t := Convert( slices, 38, ( -9.0, -8.0, -3.0 ) );
            rec.fim07t := Convert( slices, 39, ( -9.0, -8.0, -3.0 ) );
            rec.fim08t := Convert( slices, 40, ( -9.0, -8.0, -3.0 ) );
            rec.fim09t := Convert( slices, 41, ( -9.0, -8.0, -3.0 ) );
            rec.fim10t := Convert( slices, 42, ( -9.0, -8.0, -3.0 ) );
            rec.fim11t := Convert( slices, 43, ( -9.0, -8.0, -3.0 ) );
            rec.fim12t := Convert( slices, 44, ( -9.0, -8.0, -3.0 ) );
            rec.fim01n := Convert( slices, 45, ( -9.0, -8.0, -3.0 ) );
            rec.frjtvf := Convert_Frjtvf_Type( Get( slices, 46 ));
            rec.frvali := Convert( slices, 47, ( -9, -8, -3, -2, -1 ) );
            rec.frec01 := Convert_Frec01_Type( Get( slices, 48 ));
            rec.frec02 := Convert_Frec01_Type( Get( slices, 49 ));
            rec.frec03 := Convert_Frec01_Type( Get( slices, 50 ));
            rec.frec04 := Convert( slices, 51, ( -9, -8 ) );
            rec.frec05 := Convert_Frec01_Type( Get( slices, 52 ));
            rec.frec06 := Convert_Frec01_Type( Get( slices, 53 ));
            rec.frec07 := Convert_Frec01_Type( Get( slices, 54 ));
            rec.frec08 := Convert_Frec01_Type( Get( slices, 55 ));
            rec.fim01l := Convert( slices, 56, ( -9.0, -8.0, -3.0 ) );
            rec.fim02l := Convert( slices, 57, ( -9.0, -8.0, -3.0 ) );
            rec.fim03l := Convert( slices, 58, ( -9.0, -8.0, -3.0 ) );
            rec.fim04l := Convert( slices, 59, ( -9.0, -8.0, -3.0 ) );
            rec.fim05l := Convert( slices, 60, ( -9.0, -8.0, -3.0 ) );
            rec.fim06l := Convert( slices, 61, ( -9.0, -8.0, -3.0 ) );
            rec.fim07l := Convert( slices, 62, ( -9.0, -8.0, -3.0 ) );
            rec.fim08l := Convert( slices, 63, ( -9.0, -8.0, -3.0 ) );
            rec.pid := Convert( slices, 64 );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Income_component ).start_pos = 0 ) then
               index.pointers( Income_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Income_component ).counter := index.pointers( Income_component ).counter + 1;
            Put_Index( index_map, index );
            Income_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Income_IO.Close( bin_file );
   end Create_Income_Wave_G;




   procedure Create_Indall_Wave_G( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Indall_IO.File_Type;
      rec         : Indall_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Indall_IO.Create (bin_file, Indall_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.pid := Convert( slices, 3 );
            rec.iviow6 := Convert_Iviow4_Type( Get( slices, 4 ));
            rec.ivievr := Convert_Ivievr_Type( Get( slices, 5 ));
            rec.hhmem := Convert_Hhmem_Type( Get( slices, 6 ));
            rec.newhy := Convert_Newhy_Type( Get( slices, 7 ));
            rec.nemnjn := Convert_Nemnjn_Type( Get( slices, 8 ));
            rec.neyrjn4 := Convert( slices, 9, ( -9, -8, -7, -2, -1 ) );
            rec.ivfio := Convert_Ivfio_Type( Get( slices, 10 ));
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 11 ));
            rec.iodc := Convert_Iodc_Type( Get( slices, 12 ));
            rec.memorig := Convert_Memorig_Type( Get( slices, 13 ));
            rec.hgr2r := Convert_Hgr2r_Type( Get( slices, 14 ));
            rec.hgsex := Convert_Hgsex_Type( Get( slices, 15 ));
            rec.hgbm := Convert_Hgbm_Type( Get( slices, 16 ));
            rec.hgby := Convert( slices, 17, ( -9, -8, -2, -1 ) );
            rec.mastat := Convert_Mastat_Type( Get( slices, 18 ));
            rec.hgspn := Convert( slices, 19, ( -9, -8, -2, -1 ) );
            rec.hgemp := Convert_Hgemp_Type( Get( slices, 20 ));
            rec.hgfno := Convert( slices, 21, ( -9, -8, -2, -1 ) );
            rec.hgmno := Convert( slices, 22, ( -9, -8, -2, -1 ) );
            rec.hgra := Convert( slices, 23, ( -9, -8, -2, -1 ) );
            rec.age := Convert( slices, 24, ( -9, -8, -2, -1 ) );
            rec.age12 := Convert( slices, 25, ( -9, -8, -2, -1 ) );
            rec.butype := Convert_Butype_Type( Get( slices, 26 ));
            rec.buno := Convert( slices, 27, ( -9, -8 ) );
            rec.nchild := Convert( slices, 28, ( -9, -8 ) );
            rec.depchl := Convert_Depchl_Type( Get( slices, 29 ));
            rec.hoh := Convert_Hoh_Type( Get( slices, 30 ));
            rec.rach16 := Convert_Hhch12_Type( Get( slices, 31 ));
            rec.agei := Convert_Agei_Type( Get( slices, 32 ));
            rec.lrwght := Convert( slices, 33, ( -9.0, -8.0 ) );
            rec.lewght := Convert( slices, 34, ( -9.0, -8.0 ) );
            rec.xrwght := Convert( slices, 35, ( -9.0, -8.0 ) );
            rec.xewght := Convert( slices, 36, ( -9.0, -8.0 ) );
            rec.movest := Convert_Movest_Type( Get( slices, 37 ));
            rec.sampst := Convert_Sampst_Type( Get( slices, 38 ));
            rec.xrwghte := Convert( slices, 39 );
            rec.xewghte := Convert( slices, 40 );
            rec.sppid := Convert( slices, 41 );
            rec.fpid := Convert( slices, 42 );
            rec.mpid := Convert( slices, 43 );
            rec.rapid := Convert( slices, 44 );
            rec.distmov := Convert( slices, 45, ( -9.0, -8.0 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Indall_component ).start_pos = 0 ) then
               index.pointers( Indall_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Indall_component ).counter := index.pointers( Indall_component ).counter + 1;
            Put_Index( index_map, index );
            Indall_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Indall_IO.Close( bin_file );
   end Create_Indall_Wave_G;




   procedure Create_Indresp_Wave_G( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Indresp_IO.File_Type;
      rec         : Indresp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Indresp_IO.Create (bin_file, Indresp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.doid := Convert( slices, 3, ( -9, -7 ) );
            rec.doim := Convert_Doim_Type( Get( slices, 4 ));
            rec.doiy4 := Convert( slices, 5, ( -9, -8, -7, -2, -1 ) );
            rec.ivsoih := Convert( slices, 6, ( -9, -8 ) );
            rec.ivsoim := Convert( slices, 7, ( -9, -8 ) );
            rec.ivlyr := Convert( slices, 8, ( -9, -8, -7 ) );
            rec.ivievr := Convert_Ivievr_Type( Get( slices, 9 ));
            rec.lknbrd := Convert_Aidpl1_Type( Get( slices, 10 ));
            rec.lkmove := Convert_Lkmove_Type( Get( slices, 11 ));
            rec.lkmovy := Convert_Lkmovy_Type( Get( slices, 12 ));
            rec.plnew := Convert( slices, 13, ( -9, -8, -7, -2, -1 ) );
            rec.plnowm := Convert_Jbbgm1_Type( Get( slices, 14 ));
            rec.plnowy4 := Convert( slices, 15, ( -9, -8, -7, -2, -1 ) );
            rec.movjb := Convert_Aidpl1_Type( Get( slices, 16 ));
            rec.movjba := Convert_Movjba_Type( Get( slices, 17 ));
            rec.movjbb := Convert_Movjba_Type( Get( slices, 18 ));
            rec.movjbc := Convert_Movjba_Type( Get( slices, 19 ));
            rec.movjbd := Convert_Movjba_Type( Get( slices, 20 ));
            rec.movjbe := Convert_Movjba_Type( Get( slices, 21 ));
            rec.movjbf := Convert_Movjba_Type( Get( slices, 22 ));
            rec.movjbg := Convert_Movjba_Type( Get( slices, 23 ));
            rec.movjbh := Convert_Movjba_Type( Get( slices, 24 ));
            rec.movjbi := Convert_Movjba_Type( Get( slices, 25 ));
            rec.movy1 := Convert_Movy1_Type( Get( slices, 26 ));
            rec.movy2 := Convert_Movy2_Type( Get( slices, 27 ));
            rec.dobm := Convert_Cjsem_Type( Get( slices, 28 ));
            rec.doby := Convert( slices, 29, ( -9, -8, -7, -2, -1 ) );
            rec.sex := Convert_Sex_Type( Get( slices, 30 ));
            rec.citzn1 := Convert( slices, 31, ( -9, -8, -7, -2, -1 ) );
            rec.citzn2 := Convert_Citzn2_Type( Get( slices, 32 ));
            rec.jbstat := Convert_Jbstat_Type( Get( slices, 33 ));
            rec.edlyr := Convert_Aidpl1_Type( Get( slices, 34 ));
            rec.edendm := Convert_Edendm_Type( Get( slices, 35 ));
            rec.edendy := Convert( slices, 36, ( -9, -8, -7, -3, -2, -1 ) );
            rec.edtype := Convert_Edtype_Type( Get( slices, 37 ));
            rec.qfx := Convert_Aidpl1_Type( Get( slices, 38 ));
            rec.qfxa := Convert_Qfa_Type( Get( slices, 39 ));
            rec.qfxb := Convert_Qfb_Type( Get( slices, 40 ));
            rec.qfxc := Convert_Qfc_Type( Get( slices, 41 ));
            rec.qfxd := Convert_Qfd_Type( Get( slices, 42 ));
            rec.qfxe := Convert_Qfe_Type( Get( slices, 43 ));
            rec.qfxf := Convert_Qff_Type( Get( slices, 44 ));
            rec.qfxg := Convert_Qfg_Type( Get( slices, 45 ));
            rec.qfxh := Convert_Qfh_Type( Get( slices, 46 ));
            rec.qfxi := Convert_Qfi_Type( Get( slices, 47 ));
            rec.qfxj := Convert_Qfj_Type( Get( slices, 48 ));
            rec.qfxk := Convert_Qfk_Type( Get( slices, 49 ));
            rec.qfxl := Convert_Qfl_Type( Get( slices, 50 ));
            rec.qfxm := Convert_Qfm_Type( Get( slices, 51 ));
            rec.qfxn := Convert_Qfn_Type( Get( slices, 52 ));
            rec.qfedx := Convert_Aidpl1_Type( Get( slices, 53 ));
            rec.qfedxa := Convert_Qfedd_Type( Get( slices, 54 ));
            rec.nqfexa := Convert( slices, 55, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxb := Convert_Qfede_Type( Get( slices, 56 ));
            rec.nqfexb := Convert( slices, 57, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxc := Convert_Qfedj_Type( Get( slices, 58 ));
            rec.nqfexc := Convert( slices, 59, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxd := Convert_Qfedxd_Type( Get( slices, 60 ));
            rec.qfedxe := Convert_Qfedk_Type( Get( slices, 61 ));
            rec.nqfexe := Convert( slices, 62, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxf := Convert_Qfedxf_Type( Get( slices, 63 ));
            rec.nqfexf := Convert( slices, 64, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxg := Convert_Qfedm_Type( Get( slices, 65 ));
            rec.nqfexg := Convert( slices, 66, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxh := Convert_Qfedxh_Type( Get( slices, 67 ));
            rec.nqfexh := Convert( slices, 68, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxi := Convert_Qfedo_Type( Get( slices, 69 ));
            rec.nqfexi := Convert( slices, 70, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxj := Convert( slices, 71, ( -9, -8, -7 ) );
            rec.nqfexj := Convert( slices, 72, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxk := Convert_Hlprbm_Type( Get( slices, 73 ));
            rec.nqfexk := Convert( slices, 74, ( -9, -8, -7, -2, -1 ) );
            rec.mlstat := Convert_Mlstat_Type( Get( slices, 75 ));
            rec.mlchng := Convert_Bscon_Type( Get( slices, 76 ));
            rec.mlchm := Convert_Mlchm_Type( Get( slices, 77 ));
            rec.mlchy4 := Convert( slices, 78, ( -9, -8, -7, -2, -1 ) );
            rec.plbornd := Convert_Plbornd_Type( Get( slices, 79 ));
            rec.plbornc := Convert_Plbornc_Type( Get( slices, 80 ));
            rec.yr2uk4 := Convert( slices, 81, ( -9, -8, -7, -2, -1 ) );
            rec.race := Convert_Race_Type( Get( slices, 82 ));
            rec.school := Convert_School_Type( Get( slices, 83 ));
            rec.scend := Convert( slices, 84, ( -9, -8, -7, -2, -1 ) );
            rec.sctype := Convert_Sctype_Type( Get( slices, 85 ));
            rec.scnow := Convert_Cjsck2_Type( Get( slices, 86 ));
            rec.fetype := Convert_Fetype_Type( Get( slices, 87 ));
            rec.fenow := Convert_Fenow_Type( Get( slices, 88 ));
            rec.feend := Convert( slices, 89, ( -9, -8, -7, -2, -1 ) );
            rec.qfhas := Convert_Bscon_Type( Get( slices, 90 ));
            rec.qfa := Convert_Qfa_Type( Get( slices, 91 ));
            rec.qfb := Convert_Qfb_Type( Get( slices, 92 ));
            rec.qfc := Convert_Qfc_Type( Get( slices, 93 ));
            rec.qfd := Convert_Qfd_Type( Get( slices, 94 ));
            rec.qfe := Convert_Qfe_Type( Get( slices, 95 ));
            rec.qff := Convert_Qff_Type( Get( slices, 96 ));
            rec.qfg := Convert_Qfg_Type( Get( slices, 97 ));
            rec.qfh := Convert_Qfh_Type( Get( slices, 98 ));
            rec.qfi := Convert_Qfi_Type( Get( slices, 99 ));
            rec.qfj := Convert_Qfj_Type( Get( slices, 100 ));
            rec.qfk := Convert_Qfk_Type( Get( slices, 101 ));
            rec.qfl := Convert_Qfl_Type( Get( slices, 102 ));
            rec.qfm := Convert_Qfm_Type( Get( slices, 103 ));
            rec.qfn := Convert_Qfn_Type( Get( slices, 104 ));
            rec.qfed := Convert_Bscon_Type( Get( slices, 105 ));
            rec.qfeda := Convert_Qfeda_Type( Get( slices, 106 ));
            rec.nqfeda := Convert( slices, 107, ( -9, -8, -7, -2, -1 ) );
            rec.qfedb := Convert_Qfedb_Type( Get( slices, 108 ));
            rec.nqfedb := Convert( slices, 109, ( -9, -8, -7, -2, -1 ) );
            rec.qfedc := Convert_Qfedc_Type( Get( slices, 110 ));
            rec.nqfedc := Convert( slices, 111, ( -9, -8, -7, -2, -1 ) );
            rec.qfedd := Convert_Qfedd_Type( Get( slices, 112 ));
            rec.nqfedd := Convert( slices, 113, ( -9, -8, -7, -2, -1 ) );
            rec.qfede := Convert_Qfede_Type( Get( slices, 114 ));
            rec.nqfede := Convert( slices, 115, ( -9, -8, -7, -2, -1 ) );
            rec.qfedf := Convert_Qfedf_Type( Get( slices, 116 ));
            rec.nqfedf := Convert( slices, 117, ( -9, -8, -7, -2, -1 ) );
            rec.qfedg := Convert_Qfedg_Type( Get( slices, 118 ));
            rec.nqfedg := Convert( slices, 119, ( -9, -8, -7, -2, -1 ) );
            rec.qfedh := Convert_Qfedh_Type( Get( slices, 120 ));
            rec.nqfedh := Convert( slices, 121, ( -9, -8, -7, -2, -1 ) );
            rec.qfedi := Convert_Qfedi_Type( Get( slices, 122 ));
            rec.nqfedi := Convert( slices, 123, ( -9, -8, -7, -2, -1 ) );
            rec.qfedj := Convert_Qfedj_Type( Get( slices, 124 ));
            rec.nqfedj := Convert( slices, 125, ( -9, -8, -7, -2, -1 ) );
            rec.qfedk := Convert_Qfedk_Type( Get( slices, 126 ));
            rec.nqfedk := Convert( slices, 127, ( -9, -8, -7, -2, -1 ) );
            rec.qfedl := Convert_Qfedl_Type( Get( slices, 128 ));
            rec.nqfedl := Convert( slices, 129, ( -9, -8, -7, -2, -1 ) );
            rec.qfedm := Convert_Qfedm_Type( Get( slices, 130 ));
            rec.nqfedm := Convert( slices, 131, ( -9, -8, -7, -2, -1 ) );
            rec.qfedn := Convert_Qfedn_Type( Get( slices, 132 ));
            rec.nqfedn := Convert( slices, 133, ( -9, -8, -7, -2, -1 ) );
            rec.qfedo := Convert_Qfedo_Type( Get( slices, 134 ));
            rec.nqfedo := Convert( slices, 135, ( -9, -8, -7, -2, -1 ) );
            rec.qfedp := Convert( slices, 136, ( -9, -8, -7 ) );
            rec.nqfedp := Convert( slices, 137, ( -9, -8, -7, -2, -1 ) );
            rec.qfedq := Convert_Qfedq_Type( Get( slices, 138 ));
            rec.nqfedq := Convert( slices, 139, ( -9, -8, -7, -2, -1 ) );
            rec.qfedr := Convert_Qfedr_Type( Get( slices, 140 ));
            rec.nqfedr := Convert( slices, 141, ( -9, -8, -7, -2, -1 ) );
            rec.qfeds := Convert_Hlprbm_Type( Get( slices, 142 ));
            rec.nqfeds := Convert( slices, 143, ( -9, -8, -7, -2, -1 ) );
            rec.crwora := Convert_Boolean_With_Missing( Get( slices, 144 ));
            rec.crworb := Convert_Crworb_Type( Get( slices, 145 ));
            rec.crdark := Convert_Crdark_Type( Get( slices, 146 ));
            rec.crgraf := Convert_Crburg_Type( Get( slices, 147 ));
            rec.crteen := Convert_Crburg_Type( Get( slices, 148 ));
            rec.crdrnk := Convert_Crburg_Type( Get( slices, 149 ));
            rec.crvand := Convert_Crburg_Type( Get( slices, 150 ));
            rec.crrace := Convert_Crburg_Type( Get( slices, 151 ));
            rec.crburg := Convert_Crburg_Type( Get( slices, 152 ));
            rec.crcar := Convert_Crburg_Type( Get( slices, 153 ));
            rec.crmugg := Convert_Crburg_Type( Get( slices, 154 ));
            rec.paperr := Convert_Aidpl1_Type( Get( slices, 155 ));
            rec.paperm := Convert_Paperm_Type( Get( slices, 156 ));
            rec.paperp := Convert_Paperp_Type( Get( slices, 157 ));
            rec.pcuse := Convert_Boolean_With_Missing( Get( slices, 158 ));
            rec.pcusea := Convert_Yes_Or_Missing_Type( Get( slices, 159 ));
            rec.pcuseb := Convert_Yes_Or_Missing_Type( Get( slices, 160 ));
            rec.pcusec := Convert_Yes_Or_Missing_Type( Get( slices, 161 ));
            rec.pcused := Convert_Yes_Or_Missing_Type( Get( slices, 162 ));
            rec.pcusee := Convert_Yes_Or_Missing_Type( Get( slices, 163 ));
            rec.pcusef := Convert_Yes_Or_Missing_Type( Get( slices, 164 ));
            rec.pcuseg := Convert_Yes_Or_Missing_Type( Get( slices, 165 ));
            rec.pcuseh := Convert_Yes_Or_Missing_Type( Get( slices, 166 ));
            rec.pcusei := Convert_Pcusei_Type( Get( slices, 167 ));
            rec.pcusem := Convert_Pcusem_Type( Get( slices, 168 ));
            rec.pcoftn := Convert_Pcoftn_Type( Get( slices, 169 ));
            rec.hlstat := Convert_Hlstat_Type( Get( slices, 170 ));
            rec.hldsbl := Convert_Bscon_Type( Get( slices, 171 ));
            rec.hlprb := Convert( slices, 172, ( -9, -8, -7, -2, -1 ) );
            rec.hlprba := Convert_Hlprba_Type( Get( slices, 173 ));
            rec.hlprbb := Convert_Hlprbb_Type( Get( slices, 174 ));
            rec.hlprbc := Convert_Hlprbc_Type( Get( slices, 175 ));
            rec.hlprbd := Convert_Hlprbd_Type( Get( slices, 176 ));
            rec.hlprbe := Convert_Hlprbe_Type( Get( slices, 177 ));
            rec.hlprbf := Convert_Hlprbf_Type( Get( slices, 178 ));
            rec.hlprbg := Convert_Hlprbg_Type( Get( slices, 179 ));
            rec.hlprbh := Convert_Hlprbh_Type( Get( slices, 180 ));
            rec.hlprbi := Convert_Hlprbi_Type( Get( slices, 181 ));
            rec.hlprbj := Convert_Hlprbj_Type( Get( slices, 182 ));
            rec.hlprbk := Convert_Hlprbk_Type( Get( slices, 183 ));
            rec.hlprbl := Convert_Hlprbl_Type( Get( slices, 184 ));
            rec.hlprbm := Convert_Hlprbm_Type( Get( slices, 185 ));
            rec.hllt := Convert_Bscon_Type( Get( slices, 186 ));
            rec.hllta := Convert_Hllta_Type( Get( slices, 187 ));
            rec.hlltb := Convert_Hlltb_Type( Get( slices, 188 ));
            rec.hlltc := Convert_Hlltc_Type( Get( slices, 189 ));
            rec.hlltd := Convert_Hlltd_Type( Get( slices, 190 ));
            rec.hllte := Convert_Hllte_Type( Get( slices, 191 ));
            rec.hlltw := Convert_Bscon_Type( Get( slices, 192 ));
            rec.hlendw := Convert_Hlendw_Type( Get( slices, 193 ));
            rec.hlltwa := Convert_Hlltwa_Type( Get( slices, 194 ));
            rec.hliv65 := Convert_Hliv65_Type( Get( slices, 195 ));
            rec.adla := Convert_Adla_Type( Get( slices, 196 ));
            rec.adlad := Convert_Adlad_Type( Get( slices, 197 ));
            rec.adlb := Convert_Adla_Type( Get( slices, 198 ));
            rec.adlbd := Convert_Adlad_Type( Get( slices, 199 ));
            rec.adlc := Convert_Adla_Type( Get( slices, 200 ));
            rec.adlcd := Convert_Adlad_Type( Get( slices, 201 ));
            rec.adld := Convert_Adla_Type( Get( slices, 202 ));
            rec.adldd := Convert_Adlad_Type( Get( slices, 203 ));
            rec.adle := Convert_Adla_Type( Get( slices, 204 ));
            rec.adled := Convert_Adlad_Type( Get( slices, 205 ));
            rec.adlf := Convert_Adla_Type( Get( slices, 206 ));
            rec.adlfd := Convert_Adlad_Type( Get( slices, 207 ));
            rec.hl2gp := Convert_Hl2gp_Type( Get( slices, 208 ));
            rec.hl2hop := Convert( slices, 209, ( -9, -8, -7, -2, -1 ) );
            rec.xdts := Convert_Bscon_Type( Get( slices, 210 ));
            rec.nxdts := Convert_Nxdts_Type( Get( slices, 211 ));
            rec.hosp := Convert_Hlsv_Type( Get( slices, 212 ));
            rec.hospd := Convert( slices, 213, ( -9, -8, -7, -2, -1 ) );
            rec.hospch := Convert_Hospch_Type( Get( slices, 214 ));
            rec.hospnhs := Convert_Hospnhs_Type( Get( slices, 215 ));
            rec.hlcvr := Convert_Hlcvr_Type( Get( slices, 216 ));
            rec.hlcvrh := Convert_Hlcvrh_Type( Get( slices, 217 ));
            rec.hlcvrl := Convert( slices, 218, ( -9, -8, -7, -2, -1 ) );
            rec.hlsv := Convert_Hlsv_Type( Get( slices, 219 ));
            rec.hlsva := Convert_Hlsva_Type( Get( slices, 220 ));
            rec.hlsvan := Convert_Hlsvan_Type( Get( slices, 221 ));
            rec.hlsvaf := Convert_Hlsvaf_Type( Get( slices, 222 ));
            rec.hlsvb := Convert_Hlsvb_Type( Get( slices, 223 ));
            rec.hlsvbn := Convert_Hlsvan_Type( Get( slices, 224 ));
            rec.hlsvbf := Convert_Hlsvaf_Type( Get( slices, 225 ));
            rec.hlsvc := Convert_Hlsvc_Type( Get( slices, 226 ));
            rec.hlsvcn := Convert_Hlsvan_Type( Get( slices, 227 ));
            rec.hlsvcf := Convert_Hlsvaf_Type( Get( slices, 228 ));
            rec.hlsvd := Convert_Hlsvd_Type( Get( slices, 229 ));
            rec.hlsvdn := Convert_Hlsvan_Type( Get( slices, 230 ));
            rec.hlsvdf := Convert_Hlsvaf_Type( Get( slices, 231 ));
            rec.hlsve := Convert_Hlsve_Type( Get( slices, 232 ));
            rec.hlsven := Convert_Hlsvan_Type( Get( slices, 233 ));
            rec.hlsvef := Convert_Hlsvaf_Type( Get( slices, 234 ));
            rec.hlsvf := Convert_Hlsvf_Type( Get( slices, 235 ));
            rec.hlsvfn := Convert_Hlsvan_Type( Get( slices, 236 ));
            rec.hlsvff := Convert_Hlsvaf_Type( Get( slices, 237 ));
            rec.hlsvg := Convert_Hlsvg_Type( Get( slices, 238 ));
            rec.hlsvgn := Convert_Hlsvan_Type( Get( slices, 239 ));
            rec.hlsvgf := Convert_Hlsvaf_Type( Get( slices, 240 ));
            rec.hlsvh := Convert_Hlsvh_Type( Get( slices, 241 ));
            rec.hlsvhn := Convert_Hlsvan_Type( Get( slices, 242 ));
            rec.hlsvhf := Convert_Hlsvaf_Type( Get( slices, 243 ));
            rec.hlsvi := Convert_Hlsvi_Type( Get( slices, 244 ));
            rec.hlsvin := Convert_Hlsvan_Type( Get( slices, 245 ));
            rec.hlsvif := Convert_Hlsvaf_Type( Get( slices, 246 ));
            rec.hlsvj := Convert_Hlsvj_Type( Get( slices, 247 ));
            rec.hlsvjn := Convert_Hlsvan_Type( Get( slices, 248 ));
            rec.hlsvjf := Convert_Hlsvaf_Type( Get( slices, 249 ));
            rec.hlsvk := Convert_Hlsvk_Type( Get( slices, 250 ));
            rec.hlsvkn := Convert_Hlsvan_Type( Get( slices, 251 ));
            rec.hlsvkf := Convert_Hlsvaf_Type( Get( slices, 252 ));
            rec.hlsvl := Convert_Hlsvl_Type( Get( slices, 253 ));
            rec.hlsvln := Convert_Hlsvln_Type( Get( slices, 254 ));
            rec.hlsvlf := Convert_Hlsvlf_Type( Get( slices, 255 ));
            rec.hlsvm := Convert_Hlsvm_Type( Get( slices, 256 ));
            rec.hlsvmn := Convert_Hlsvln_Type( Get( slices, 257 ));
            rec.hlsvmf := Convert_Hlsvlf_Type( Get( slices, 258 ));
            rec.hlck := Convert_Aidpl1_Type( Get( slices, 259 ));
            rec.hlcka := Convert_Hlcka_Type( Get( slices, 260 ));
            rec.hlckan := Convert_Hlckan_Type( Get( slices, 261 ));
            rec.hlckb := Convert_Hlcka_Type( Get( slices, 262 ));
            rec.hlckbn := Convert_Hlckan_Type( Get( slices, 263 ));
            rec.hlckc := Convert_Hlcka_Type( Get( slices, 264 ));
            rec.hlckcn := Convert_Hlckan_Type( Get( slices, 265 ));
            rec.hlckd := Convert_Hlcka_Type( Get( slices, 266 ));
            rec.hlckdn := Convert_Hlckan_Type( Get( slices, 267 ));
            rec.hlcke := Convert_Hlcka_Type( Get( slices, 268 ));
            rec.hlcken := Convert_Hlckan_Type( Get( slices, 269 ));
            rec.hlckf := Convert_Hlcka_Type( Get( slices, 270 ));
            rec.hlckfn := Convert_Hlckan_Type( Get( slices, 271 ));
            rec.hlckg := Convert_Hlcka_Type( Get( slices, 272 ));
            rec.hlckgn := Convert_Hlckan_Type( Get( slices, 273 ));
            rec.hlckh := Convert_Hlcka_Type( Get( slices, 274 ));
            rec.hlckhn := Convert_Hlckan_Type( Get( slices, 275 ));
            rec.hlcki := Convert_Hlcki_Type( Get( slices, 276 ));
            rec.hlckin := Convert_Hlckin_Type( Get( slices, 277 ));
            rec.smoker := Convert_Bscon_Type( Get( slices, 278 ));
            rec.ncigs := Convert( slices, 279, ( -9, -8, -7, -2, -1 ) );
            rec.ophla := Convert_Ophla_Type( Get( slices, 280 ));
            rec.ophlb := Convert_Ophlb_Type( Get( slices, 281 ));
            rec.ophlc := Convert_Ophlb_Type( Get( slices, 282 ));
            rec.aidhh := Convert_Aidhh_Type( Get( slices, 283 ));
            rec.aidhua := Convert( slices, 284, ( -9, -8, -7, -1 ) );
            rec.aidhub := Convert( slices, 285, ( -9, -8, -7 ) );
            rec.aidhuc := Convert( slices, 286, ( -9, -8, -7 ) );
            rec.aidxhh := Convert_Aidxhh_Type( Get( slices, 287 ));
            rec.naidxhh := Convert_Naidxhh_Type( Get( slices, 288 ));
            rec.aidhu1 := Convert_Aidhu1_Type( Get( slices, 289 ));
            rec.aidhu2 := Convert_Aidhu2_Type( Get( slices, 290 ));
            rec.aidhrs := Convert_Aidhrs_Type( Get( slices, 291 ));
            rec.ivma := Convert_Ivda_Type( Get( slices, 292 ));
            rec.ivmb := Convert_Ivdb_Type( Get( slices, 293 ));
            rec.ivmc := Convert_Ivec_Type( Get( slices, 294 ));
            rec.ivmd := Convert_Ivdd_Type( Get( slices, 295 ));
            rec.ivme := Convert_Ivee_Type( Get( slices, 296 ));
            rec.jbhas := Convert_Frnow_Type( Get( slices, 297 ));
            rec.jboff := Convert_Jboff_Type( Get( slices, 298 ));
            rec.jboffy := Convert_Jboffy_Type( Get( slices, 299 ));
            rec.jbterm := Convert_Jbterm_Type( Get( slices, 300 ));
            rec.jbsoc := Convert( slices, 301, ( -9, -8, -2, -1 ) );
            rec.jbsic := Convert( slices, 302, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.jbsic92 := Convert( slices, 303, ( -9, -8, -7, -2, -1 ) );
            rec.jbsemp := Convert_Jbsemp_Type( Get( slices, 304 ));
            rec.jbmngr := Convert_Jbmngr_Type( Get( slices, 305 ));
            rec.jbsize := Convert_Jbsize_Type( Get( slices, 306 ));
            rec.jbhrs := Convert( slices, 307, ( -9, -8, -7, -2, -1 ) );
            rec.jbot := Convert( slices, 308, ( -9, -8, -7, -2, -1 ) );
            rec.jbotpd := Convert( slices, 309, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbhrlk := Convert_Jbhrlk_Type( Get( slices, 310 ));
            rec.jbpl := Convert_Jbpl_Type( Get( slices, 311 ));
            rec.jbttwt := Convert( slices, 312, ( -9, -8, -7, -3, -2, -1 ) );
            rec.jbttwm := Convert_Jbttwm_Type( Get( slices, 313 ));
            rec.jbsat1 := Convert_Jbsat1_Type( Get( slices, 314 ));
            rec.jbsat2 := Convert( slices, 315, ( -9, -8, -7, -2, -1 ) );
            rec.jbsat3 := Convert_Jbsat_Type( Get( slices, 316 ));
            rec.jbsat4 := Convert_Jbsat4_Type( Get( slices, 317 ));
            rec.jbsat5 := Convert_Jbsat4_Type( Get( slices, 318 ));
            rec.jbsat6 := Convert_Jbsat4_Type( Get( slices, 319 ));
            rec.jbsat7 := Convert_Jbsat_Type( Get( slices, 320 ));
            rec.jbsat := Convert_Jbsat_Type( Get( slices, 321 ));
            rec.paygl := Convert( slices, 322, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.paygw := Convert( slices, 323, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.paynl := Convert( slices, 324, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.paynw := Convert( slices, 325, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.payslp := Convert_Payslp_Type( Get( slices, 326 ));
            rec.payusl := Convert_Aidpl1_Type( Get( slices, 327 ));
            rec.payu := Convert( slices, 328, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.payuw := Convert( slices, 329, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.payug := Convert_Paylyg_Type( Get( slices, 330 ));
            rec.paydf1 := Convert_Paydf1_Type( Get( slices, 331 ));
            rec.paydf2 := Convert_Paydf2_Type( Get( slices, 332 ));
            rec.paydf3 := Convert_Paydf3_Type( Get( slices, 333 ));
            rec.paydf4 := Convert_Paydf4_Type( Get( slices, 334 ));
            rec.paydf5 := Convert_Paydf5_Type( Get( slices, 335 ));
            rec.paydf6 := Convert_Paydf6_Type( Get( slices, 336 ));
            rec.paydf7 := Convert_Paydf7_Type( Get( slices, 337 ));
            rec.paydf8 := Convert_Paydf8_Type( Get( slices, 338 ));
            rec.jbbgd := Convert( slices, 339, ( -9, -8, -7, -2, -1 ) );
            rec.jbbgm := Convert_Cjsbgm_Type( Get( slices, 340 ));
            rec.jbbgy4 := Convert( slices, 341, ( -9, -8, -7, -2, -1 ) );
            rec.jbbgly := Convert_Jbbgly_Type( Get( slices, 342 ));
            rec.jbsect := Convert_Jbsect_Type( Get( slices, 343 ));
            rec.jbonus := Convert_Aidpl1_Type( Get( slices, 344 ));
            rec.jbonam := Convert( slices, 345, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbong := Convert_Jbong_Type( Get( slices, 346 ));
            rec.jbrise := Convert_Aidpl1_Type( Get( slices, 347 ));
            rec.tujbpl := Convert_Aidpl1_Type( Get( slices, 348 ));
            rec.tuin1 := Convert_Aidpl1_Type( Get( slices, 349 ));
            rec.tuin2 := Convert_Aidpl1_Type( Get( slices, 350 ));
            rec.jbopps := Convert_Aidpl1_Type( Get( slices, 351 ));
            rec.jbopcr := Convert_Boolean_With_Missing( Get( slices, 352 ));
            rec.jbtime := Convert_Jbtime_Type( Get( slices, 353 ));
            rec.pays := Convert( slices, 354, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.paysw := Convert( slices, 355, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.paysg := Convert_Paylyg_Type( Get( slices, 356 ));
            rec.jbpen := Convert_Aidpl1_Type( Get( slices, 357 ));
            rec.jbpenm := Convert_Aidpl1_Type( Get( slices, 358 ));
            rec.payly := Convert( slices, 359, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.paylyw := Convert( slices, 360, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.paylyg := Convert_Paylyg_Type( Get( slices, 361 ));
            rec.jbbglye := Convert_Cjsblye_Type( Get( slices, 362 ));
            rec.paylye := Convert( slices, 363, ( -9, -8, -7, -3, -2, -1 ) );
            rec.paylywe := Convert( slices, 364, ( -9.0, -8.0, -7.0 ) );
            rec.paylyge := Convert_Paylyge_Type( Get( slices, 365 ));
            rec.jsboss := Convert_Jsboss_Type( Get( slices, 366 ));
            rec.jssize := Convert_Jssize_Type( Get( slices, 367 ));
            rec.jshrs := Convert( slices, 368, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jshrlk := Convert_Jbhrlk_Type( Get( slices, 369 ));
            rec.jstime := Convert_Jstime_Type( Get( slices, 370 ));
            rec.jstypeb := Convert_Jstypeb_Type( Get( slices, 371 ));
            rec.jsaccs := Convert_Jsaccs_Type( Get( slices, 372 ));
            rec.jspart := Convert_Jspart_Type( Get( slices, 373 ));
            rec.jsprbm := Convert_Cjsbgm_Type( Get( slices, 374 ));
            rec.jsprby4 := Convert( slices, 375, ( -9, -8, -7, -2, -1 ) );
            rec.jsprem := Convert_Cjsbgm_Type( Get( slices, 376 ));
            rec.jsprey4 := Convert( slices, 377, ( -9, -8, -7, -2, -1 ) );
            rec.jsprf := Convert( slices, 378, ( -9, -8, -7, -3, -2, -1 ) );
            rec.jsprls := Convert_Jsprls_Type( Get( slices, 379 ));
            rec.jsprtx := Convert_Jsprtx_Type( Get( slices, 380 ));
            rec.jsprni := Convert_Jsprni_Type( Get( slices, 381 ));
            rec.jspayu := Convert( slices, 382, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jspayw := Convert( slices, 383, ( -9.0, -8.0, -7.0, -4.0, -2.0, -1.0 ) );
            rec.jspytx := Convert_Jspytx_Type( Get( slices, 384 ));
            rec.jspyni := Convert_Jspyni_Type( Get( slices, 385 ));
            rec.jspl := Convert_Jspl_Type( Get( slices, 386 ));
            rec.jsttwt := Convert( slices, 387, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.jsttwm := Convert_Jsttwm_Type( Get( slices, 388 ));
            rec.jssat1 := Convert_Jssat1_Type( Get( slices, 389 ));
            rec.jssat2 := Convert_Jbsat_Type( Get( slices, 390 ));
            rec.jssat3 := Convert_Jbsat_Type( Get( slices, 391 ));
            rec.jssat4 := Convert_Jbsat_Type( Get( slices, 392 ));
            rec.jssat5 := Convert_Jbsat_Type( Get( slices, 393 ));
            rec.jssat := Convert_Jbsat_Type( Get( slices, 394 ));
            rec.jsbgd := Convert( slices, 395, ( -9, -8, -7, -2, -1 ) );
            rec.jsbgm := Convert_Cjsbgm_Type( Get( slices, 396 ));
            rec.jsbgy4 := Convert( slices, 397, ( -9, -8, -7, -2, -1 ) );
            rec.jbed := Convert_Aidpl1_Type( Get( slices, 398 ));
            rec.jbed1 := Convert_Aidpl1_Type( Get( slices, 399 ));
            rec.jbed2 := Convert_Aidpl1_Type( Get( slices, 400 ));
            rec.jbed3 := Convert_Aidpl1_Type( Get( slices, 401 ));
            rec.jbed4 := Convert_Aidpl1_Type( Get( slices, 402 ));
            rec.jbed5 := Convert_Aidpl1_Type( Get( slices, 403 ));
            rec.jbedq := Convert( slices, 404, ( -9.0, -8.0, -7.0, -1.0 ) );
            rec.jbedp1 := Convert_Ednewp1_Type( Get( slices, 405 ));
            rec.eprosa := Convert_Eprosa_Type( Get( slices, 406 ));
            rec.eprosb := Convert_Cohxpm2_Type( Get( slices, 407 ));
            rec.eprosc := Convert_Cohxpm2_Type( Get( slices, 408 ));
            rec.eprosd := Convert_Cohxpm2_Type( Get( slices, 409 ));
            rec.eprose := Convert_Cohxpm2_Type( Get( slices, 410 ));
            rec.eprosf := Convert_Cohxpm2_Type( Get( slices, 411 ));
            rec.rach12 := Convert_Hhch12_Type( Get( slices, 412 ));
            rec.jbchc1 := Convert_Jbchc1_Type( Get( slices, 413 ));
            rec.jbchc2 := Convert_Jbchc2_Type( Get( slices, 414 ));
            rec.jbchc3 := Convert_Jbchc3_Type( Get( slices, 415 ));
            rec.xpchcf := Convert_Xpchcf_Type( Get( slices, 416 ));
            rec.xpchc := Convert( slices, 417, ( -9, -8, -7, -2, -1 ) );
            rec.huxpch := Convert_Huxpch_Type( Get( slices, 418 ));
            rec.hunurs := Convert_Hunurs_Type( Get( slices, 419 ));
            rec.julk1 := Convert_Aidpl1_Type( Get( slices, 420 ));
            rec.julk4 := Convert_Bscon_Type( Get( slices, 421 ));
            rec.julka := Convert_Boolean_With_Missing( Get( slices, 422 ));
            rec.julkb := Convert_Boolean_With_Missing( Get( slices, 423 ));
            rec.julkc := Convert_Boolean_With_Missing( Get( slices, 424 ));
            rec.julkd := Convert_Boolean_With_Missing( Get( slices, 425 ));
            rec.julke := Convert_Boolean_With_Missing( Get( slices, 426 ));
            rec.julkjb := Convert_Aidpl1_Type( Get( slices, 427 ));
            rec.jubgn := Convert_Boolean_With_Missing( Get( slices, 428 ));
            rec.juspec := Convert_Juspec_Type( Get( slices, 429 ));
            rec.jusoc := Convert( slices, 430, ( -9, -8, -7, -2, -1 ) );
            rec.juhrsx := Convert( slices, 431, ( -9, -8, -7, -2, -1 ) );
            rec.jupayx := Convert( slices, 432, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jupayl := Convert( slices, 433, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.juhrsl := Convert( slices, 434, ( -9, -8, -7, -2, -1 ) );
            rec.eprosg := Convert_Cohxpm2_Type( Get( slices, 435 ));
            rec.eprosh := Convert_Cohxpm2_Type( Get( slices, 436 ));
            rec.eaage := Convert_Eaage_Type( Get( slices, 437 ));
            rec.jbub := Convert_Bscon_Type( Get( slices, 438 ));
            rec.jbuby := Convert_Jbuby_Type( Get( slices, 439 ));
            rec.j2has := Convert_Aidpl1_Type( Get( slices, 440 ));
            rec.j2soc := Convert( slices, 441, ( -9, -8, -7, -2, -1 ) );
            rec.j2semp := Convert_J2semp_Type( Get( slices, 442 ));
            rec.j2hrs := Convert( slices, 443, ( -9, -8, -7, -2, -1 ) );
            rec.j2pay := Convert( slices, 444, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbhha := Convert_Aidpl1_Type( Get( slices, 445 ));
            rec.jbhhb := Convert_Aidpl1_Type( Get( slices, 446 ));
            rec.jbhhc := Convert_Aidpl1_Type( Get( slices, 447 ));
            rec.jbhhd := Convert_Aidpl1_Type( Get( slices, 448 ));
            rec.jbhhe := Convert_Aidpl1_Type( Get( slices, 449 ));
            rec.jbhhf := Convert_Aidpl1_Type( Get( slices, 450 ));
            rec.ivea := Convert_Ivda_Type( Get( slices, 451 ));
            rec.iveb := Convert_Ivdb_Type( Get( slices, 452 ));
            rec.ivec := Convert_Ivec_Type( Get( slices, 453 ));
            rec.ived := Convert_Ivdd_Type( Get( slices, 454 ));
            rec.ivee := Convert_Ivee_Type( Get( slices, 455 ));
            rec.ednew := Convert_Aidpl1_Type( Get( slices, 456 ));
            rec.ednew1 := Convert_Aidpl1_Type( Get( slices, 457 ));
            rec.ednew2 := Convert_Aidpl1_Type( Get( slices, 458 ));
            rec.ednew3 := Convert_Aidpl1_Type( Get( slices, 459 ));
            rec.ednew4 := Convert_Aidpl1_Type( Get( slices, 460 ));
            rec.ednewq := Convert( slices, 461, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ednewp1 := Convert_Ednewp1_Type( Get( slices, 462 ));
            rec.nemst := Convert_Nemst_Type( Get( slices, 463 ));
            rec.cjsbgd := Convert( slices, 464, ( -9, -8, -7, -2, -1 ) );
            rec.cjsbgm := Convert_Cjsbgm_Type( Get( slices, 465 ));
            rec.cjsbgy4 := Convert( slices, 466, ( -9, -8, -7, -2, -1 ) );
            rec.cjsbly := Convert_Cjsbly_Type( Get( slices, 467 ));
            rec.cjsblye := Convert_Cjsblye_Type( Get( slices, 468 ));
            rec.njbs := Convert( slices, 469, ( -9, -8, -7 ) );
            rec.jbhad := Convert_Aidpl1_Type( Get( slices, 470 ));
            rec.jlend4 := Convert( slices, 471, ( -9, -8, -7, -2, -1 ) );
            rec.jlsoc := Convert( slices, 472, ( -9, -8, -7, -2, -1 ) );
            rec.jlsic := Convert( slices, 473, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jlsemp := Convert_J2semp_Type( Get( slices, 474 ));
            rec.jlboss := Convert_Aidpl1_Type( Get( slices, 475 ));
            rec.jlmngr := Convert_Jlmngr_Type( Get( slices, 476 ));
            rec.jlsize := Convert_Jlsize_Type( Get( slices, 477 ));
            rec.ivja := Convert_Ivda_Type( Get( slices, 478 ));
            rec.ivjb := Convert_Ivdb_Type( Get( slices, 479 ));
            rec.ivjc := Convert_Ivec_Type( Get( slices, 480 ));
            rec.ivjd := Convert_Ivdd_Type( Get( slices, 481 ));
            rec.ivje := Convert_Ivee_Type( Get( slices, 482 ));
            rec.opsoca := Convert_Ophla_Type( Get( slices, 483 ));
            rec.opsocb := Convert_Opsocb_Type( Get( slices, 484 ));
            rec.opsocc := Convert_Ophlb_Type( Get( slices, 485 ));
            rec.opsocd := Convert_Opsocd_Type( Get( slices, 486 ));
            rec.opsoce := Convert_Opsocd_Type( Get( slices, 487 ));
            rec.opsocf := Convert_Opsocd_Type( Get( slices, 488 ));
            rec.vote1 := Convert_Aidpl1_Type( Get( slices, 489 ));
            rec.vote2 := Convert_Aidpl1_Type( Get( slices, 490 ));
            rec.vote3 := Convert_Vote3_Type( Get( slices, 491 ));
            rec.vote4 := Convert_Vote3_Type( Get( slices, 492 ));
            rec.vote5 := Convert_Vote5_Type( Get( slices, 493 ));
            rec.vote7 := Convert_Vote7_Type( Get( slices, 494 ));
            rec.vote8 := Convert_Vote8_Type( Get( slices, 495 ));
            rec.orgm := Convert_Aidpl1_Type( Get( slices, 496 ));
            rec.orgma := Convert_Orgma_Type( Get( slices, 497 ));
            rec.orgaa := Convert_Orgaa_Type( Get( slices, 498 ));
            rec.orgmb := Convert_Orgmb_Type( Get( slices, 499 ));
            rec.orgab := Convert_Orgab_Type( Get( slices, 500 ));
            rec.orgmc := Convert_Orgmc_Type( Get( slices, 501 ));
            rec.orgac := Convert_Orgac_Type( Get( slices, 502 ));
            rec.orgmd := Convert_Orgmd_Type( Get( slices, 503 ));
            rec.orgad := Convert_Orgad_Type( Get( slices, 504 ));
            rec.orgme := Convert_Orgme_Type( Get( slices, 505 ));
            rec.orgae := Convert_Orgae_Type( Get( slices, 506 ));
            rec.orgmf := Convert_Orgmf_Type( Get( slices, 507 ));
            rec.orgaf := Convert_Orgaf_Type( Get( slices, 508 ));
            rec.orgmg := Convert_Orgmg_Type( Get( slices, 509 ));
            rec.orgag := Convert_Orgag_Type( Get( slices, 510 ));
            rec.orgmh := Convert_Orgmh_Type( Get( slices, 511 ));
            rec.orgah := Convert_Orgah_Type( Get( slices, 512 ));
            rec.orgmi := Convert_Orgmi_Type( Get( slices, 513 ));
            rec.orgai := Convert_Orgai_Type( Get( slices, 514 ));
            rec.orgmj := Convert_Orgmj_Type( Get( slices, 515 ));
            rec.orgaj := Convert_Orgaj_Type( Get( slices, 516 ));
            rec.orgmk := Convert_Orgmk_Type( Get( slices, 517 ));
            rec.orgak := Convert_Orgak_Type( Get( slices, 518 ));
            rec.orgml := Convert_Orgml_Type( Get( slices, 519 ));
            rec.orgal := Convert_Orgal_Type( Get( slices, 520 ));
            rec.orgmm := Convert_Orgmm_Type( Get( slices, 521 ));
            rec.orgam := Convert_Orgam_Type( Get( slices, 522 ));
            rec.orgmo := Convert_Orgmo_Type( Get( slices, 523 ));
            rec.orgao := Convert_Orgao_Type( Get( slices, 524 ));
            rec.orgmp := Convert_Orgmp_Type( Get( slices, 525 ));
            rec.orgap := Convert_Orgap_Type( Get( slices, 526 ));
            rec.orgmq := Convert_Orgmq_Type( Get( slices, 527 ));
            rec.orgaq := Convert_Orgaq_Type( Get( slices, 528 ));
            rec.orga := Convert_Aidpl1_Type( Get( slices, 529 ));
            rec.frna := Convert_Frna_Type( Get( slices, 530 ));
            rec.frnb := Convert_Frna_Type( Get( slices, 531 ));
            rec.frnc := Convert_Coh1mr_Type( Get( slices, 532 ));
            rec.frnd := Convert_Frnd_Type( Get( slices, 533 ));
            rec.frne := Convert_Frnd_Type( Get( slices, 534 ));
            rec.oprlg1 := Convert_Oprlg1_Type( Get( slices, 535 ));
            rec.oprlg2 := Convert_Oprlg2_Type( Get( slices, 536 ));
            rec.oprlg3 := Convert_Oprlg3_Type( Get( slices, 537 ));
            rec.caruse := Convert_Caruse_Type( Get( slices, 538 ));
            rec.yppar := Convert_Yppar_Type( Get( slices, 539 ));
            rec.pyhlth := Convert_Pyhlth_Type( Get( slices, 540 ));
            rec.pyhwrk := Convert_Pyhwrk_Type( Get( slices, 541 ));
            rec.pynyp := Convert( slices, 542, ( -9, -8, -7 ) );
            rec.pypno1 := Convert( slices, 543, ( -9, -8, -7 ) );
            rec.pyage1 := Convert( slices, 544, ( -9, -8, -7, -2, -1 ) );
            rec.pypno2 := Convert( slices, 545, ( -9, -8, -7 ) );
            rec.pyage2 := Convert( slices, 546, ( -9, -8, -7, -2, -1 ) );
            rec.pypno3 := Convert( slices, 547, ( -9, -8, -7 ) );
            rec.pyage3 := Convert( slices, 548, ( -9, -8, -7, -2, -1 ) );
            rec.pywhr1 := Convert_Pywhr1_Type( Get( slices, 549 ));
            rec.pyman1 := Convert_Pyman1_Type( Get( slices, 550 ));
            rec.pyarg1 := Convert_Pyarg1_Type( Get( slices, 551 ));
            rec.pytlk1 := Convert_Pyarg1_Type( Get( slices, 552 ));
            rec.pysmk1 := Convert_Pysmk1_Type( Get( slices, 553 ));
            rec.pysad1 := Convert_Pysad1_Type( Get( slices, 554 ));
            rec.pywor1 := Convert_Pywor1_Type( Get( slices, 555 ));
            rec.pywhr2 := Convert_Pywhr1_Type( Get( slices, 556 ));
            rec.pyman2 := Convert_Pyman1_Type( Get( slices, 557 ));
            rec.pyarg2 := Convert_Pyarg1_Type( Get( slices, 558 ));
            rec.pytlk2 := Convert_Pyarg1_Type( Get( slices, 559 ));
            rec.pysmk2 := Convert_Pysmk1_Type( Get( slices, 560 ));
            rec.pysad2 := Convert_Pysad1_Type( Get( slices, 561 ));
            rec.pywor2 := Convert_Pywor1_Type( Get( slices, 562 ));
            rec.pywhr3 := Convert_Pywhr1_Type( Get( slices, 563 ));
            rec.pyman3 := Convert_Pyman1_Type( Get( slices, 564 ));
            rec.pyarg3 := Convert_Pyarg1_Type( Get( slices, 565 ));
            rec.pytlk3 := Convert_Pyarg1_Type( Get( slices, 566 ));
            rec.pysmk3 := Convert_Pysmk1_Type( Get( slices, 567 ));
            rec.pysad3 := Convert_Pysad1_Type( Get( slices, 568 ));
            rec.pywor3 := Convert_Pywor1_Type( Get( slices, 569 ));
            rec.f101 := Convert_F101_Type( Get( slices, 570 ));
            rec.f102 := Convert_F102_Type( Get( slices, 571 ));
            rec.f103 := Convert_F103_Type( Get( slices, 572 ));
            rec.f104 := Convert( slices, 573, ( -9, -8, -7 ) );
            rec.f105 := Convert_F105_Type( Get( slices, 574 ));
            rec.f106 := Convert_F106_Type( Get( slices, 575 ));
            rec.f116 := Convert_F116_Type( Get( slices, 576 ));
            rec.f118 := Convert_F118_Type( Get( slices, 577 ));
            rec.f119 := Convert_F119_Type( Get( slices, 578 ));
            rec.f120 := Convert_F120_Type( Get( slices, 579 ));
            rec.f121 := Convert_F121_Type( Get( slices, 580 ));
            rec.f122 := Convert_F122_Type( Get( slices, 581 ));
            rec.f123 := Convert_F123_Type( Get( slices, 582 ));
            rec.f124 := Convert_F124_Type( Get( slices, 583 ));
            rec.f125 := Convert_F125_Type( Get( slices, 584 ));
            rec.f131 := Convert_F131_Type( Get( slices, 585 ));
            rec.f132 := Convert_F132_Type( Get( slices, 586 ));
            rec.f133 := Convert_F133_Type( Get( slices, 587 ));
            rec.f142 := Convert_F142_Type( Get( slices, 588 ));
            rec.f135 := Convert_F135_Type( Get( slices, 589 ));
            rec.f136 := Convert_F136_Type( Get( slices, 590 ));
            rec.f137 := Convert_F137_Type( Get( slices, 591 ));
            rec.f138 := Convert_F138_Type( Get( slices, 592 ));
            rec.f139 := Convert_F139_Type( Get( slices, 593 ));
            rec.f140 := Convert_F140_Type( Get( slices, 594 ));
            rec.f141 := Convert_F141_Type( Get( slices, 595 ));
            rec.f151 := Convert_F151_Type( Get( slices, 596 ));
            rec.f152 := Convert_F152_Type( Get( slices, 597 ));
            rec.f153 := Convert_F153_Type( Get( slices, 598 ));
            rec.f154 := Convert_F154_Type( Get( slices, 599 ));
            rec.f155 := Convert_F155_Type( Get( slices, 600 ));
            rec.f156 := Convert_F156_Type( Get( slices, 601 ));
            rec.f157 := Convert_F157_Type( Get( slices, 602 ));
            rec.f158 := Convert_F158_Type( Get( slices, 603 ));
            rec.f159 := Convert_F159_Type( Get( slices, 604 ));
            rec.nf1 := Convert( slices, 605, ( -9, -8, -7, -2, -1 ) );
            rec.fisit := Convert_Fisit_Type( Get( slices, 606 ));
            rec.fisitc := Convert( slices, 607, ( -9, -8, -7, -2, -1 ) );
            rec.fisity := Convert_Fisity_Type( Get( slices, 608 ));
            rec.fisitx := Convert( slices, 609, ( -9, -8, -7, -2, -1 ) );
            rec.fiyrdi := Convert( slices, 610, ( -9, -8, -7, -2, -1 ) );
            rec.fiyrdiu := Convert_Fiyrdiu_Type( Get( slices, 611 ));
            rec.save := Convert_Aidpl1_Type( Get( slices, 612 ));
            rec.saved := Convert( slices, 613, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.savey1 := Convert_Savey1_Type( Get( slices, 614 ));
            rec.savey2 := Convert_Savey1_Type( Get( slices, 615 ));
            rec.pppen := Convert_Aidpl1_Type( Get( slices, 616 ));
            rec.penb4 := Convert_Penb4_Type( Get( slices, 617 ));
            rec.penb4y4 := Convert( slices, 618, ( -9, -8, -7, -2, -1 ) );
            rec.penb4v := Convert( slices, 619, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.penb4w := Convert( slices, 620, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.penyr4 := Convert( slices, 621, ( -9, -8, -7, -2, -1 ) );
            rec.penadd := Convert_Aidpl1_Type( Get( slices, 622 ));
            rec.penadv := Convert( slices, 623, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.penadw := Convert( slices, 624, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.windf := Convert_Debt_Type( Get( slices, 625 ));
            rec.windfi := Convert_Windfi_Type( Get( slices, 626 ));
            rec.windfiy := Convert( slices, 627, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windfa := Convert_Windfa_Type( Get( slices, 628 ));
            rec.windfay := Convert( slices, 629, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windfb := Convert_Windfb_Type( Get( slices, 630 ));
            rec.windfby := Convert( slices, 631, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windfc := Convert_Windfc_Type( Get( slices, 632 ));
            rec.windfcy := Convert( slices, 633, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windfd := Convert_Windfd_Type( Get( slices, 634 ));
            rec.windfdy := Convert( slices, 635, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windff := Convert_Windff_Type( Get( slices, 636 ));
            rec.windffy := Convert( slices, 637, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windfg := Convert_Windfg_Type( Get( slices, 638 ));
            rec.windfgy := Convert( slices, 639, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windfh := Convert_Nisjsa_Type( Get( slices, 640 ));
            rec.windfhy := Convert( slices, 641, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.bscon := Convert_Bscon_Type( Get( slices, 642 ));
            rec.bscnsp := Convert_Bscnsp_Type( Get( slices, 643 ));
            rec.bscnsp1 := Convert_Bscnsp1_Type( Get( slices, 644 ));
            rec.bscnsp2 := Convert_Bscnsp2_Type( Get( slices, 645 ));
            rec.xpmeal := Convert_Xpleis_Type( Get( slices, 646 ));
            rec.xpleis := Convert_Xpleis_Type( Get( slices, 647 ));
            rec.ftexhh := Convert_Aidpl1_Type( Get( slices, 648 ));
            rec.ftexa := Convert_Ftexa_Type( Get( slices, 649 ));
            rec.ftexa1 := Convert_Ftexa1_Type( Get( slices, 650 ));
            rec.ftexa2 := Convert_Ftexa2_Type( Get( slices, 651 ));
            rec.ftexa3 := Convert_Ftexa3_Type( Get( slices, 652 ));
            rec.ftexa4 := Convert_Ftexa4_Type( Get( slices, 653 ));
            rec.ftexa5 := Convert_Ftexa5_Type( Get( slices, 654 ));
            rec.ftexa6 := Convert_Ftexa6_Type( Get( slices, 655 ));
            rec.ftexav := Convert( slices, 656, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ftexaw := Convert( slices, 657, ( -9.0, -8.0, -7.0, -5.0, -3.0, -2.0, -1.0 ) );
            rec.ftexb := Convert_Ftexb_Type( Get( slices, 658 ));
            rec.ftexb1 := Convert_Ftexa1_Type( Get( slices, 659 ));
            rec.ftexb2 := Convert_Ftexa2_Type( Get( slices, 660 ));
            rec.ftexb3 := Convert_Ftexa3_Type( Get( slices, 661 ));
            rec.ftexb4 := Convert_Ftexa4_Type( Get( slices, 662 ));
            rec.ftexb5 := Convert_Ftexa5_Type( Get( slices, 663 ));
            rec.ftexb6 := Convert_Ftexa6_Type( Get( slices, 664 ));
            rec.ftexbv := Convert( slices, 665, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ftexbw := Convert( slices, 666, ( -9.0, -8.0, -7.0, -5.0, -3.0, -2.0, -1.0 ) );
            rec.ftexc := Convert_Ftexc_Type( Get( slices, 667 ));
            rec.ftexc1 := Convert_Ftexa1_Type( Get( slices, 668 ));
            rec.ftexc2 := Convert_Ftexa2_Type( Get( slices, 669 ));
            rec.ftexc3 := Convert_Ftexa3_Type( Get( slices, 670 ));
            rec.ftexc4 := Convert_Ftexa4_Type( Get( slices, 671 ));
            rec.ftexc5 := Convert_Ftexa5_Type( Get( slices, 672 ));
            rec.ftexc6 := Convert_Ftexa6_Type( Get( slices, 673 ));
            rec.ftexcv := Convert( slices, 674, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ftexcw := Convert( slices, 675, ( -9.0, -8.0, -7.0, -5.0, -3.0, -2.0, -1.0 ) );
            rec.spinhh := Convert_Hhch12_Type( Get( slices, 676 ));
            rec.hubuys := Convert_Hubuys_Type( Get( slices, 677 ));
            rec.hufrys := Convert_Hubuys_Type( Get( slices, 678 ));
            rec.humops := Convert_Hubuys_Type( Get( slices, 679 ));
            rec.huiron := Convert_Hubuys_Type( Get( slices, 680 ));
            rec.fair1 := Convert_Fair1_Type( Get( slices, 681 ));
            rec.hhch12 := Convert_Hhch12_Type( Get( slices, 682 ));
            rec.husits := Convert_Husits_Type( Get( slices, 683 ));
            rec.fair2 := Convert_Fair1_Type( Get( slices, 684 ));
            rec.howlng := Convert( slices, 685, ( -9, -8, -7, -3, -2, -1 ) );
            rec.qallif1 := Convert_Qallif1_Type( Get( slices, 686 ));
            rec.qallif2 := Convert_Qallif2_Type( Get( slices, 687 ));
            rec.qallif3 := Convert_Qallif2_Type( Get( slices, 688 ));
            rec.qallif4 := Convert_Qallif2_Type( Get( slices, 689 ));
            rec.ivfa := Convert_Ivda_Type( Get( slices, 690 ));
            rec.ivfb := Convert_Ivdb_Type( Get( slices, 691 ));
            rec.ivfc := Convert_Ivfc_Type( Get( slices, 692 ));
            rec.ivfd := Convert_Ivdd_Type( Get( slices, 693 ));
            rec.ivfe := Convert_Ivee_Type( Get( slices, 694 ));
            rec.ivfoih := Convert( slices, 695, ( -9, -8 ) );
            rec.ivfoim := Convert( slices, 696, ( -9, -8 ) );
            rec.ivsc := Convert_Ivsc_Type( Get( slices, 697 ));
            rec.iv1 := Convert_Hhch12_Type( Get( slices, 698 ));
            rec.iv2 := Convert_Iv2_Type( Get( slices, 699 ));
            rec.iv4 := Convert_Iv4_Type( Get( slices, 700 ));
            rec.iv5 := Convert_Iv5_Type( Get( slices, 701 ));
            rec.iv6a := Convert_Hhch12_Type( Get( slices, 702 ));
            rec.iv6b := Convert_Hhch12_Type( Get( slices, 703 ));
            rec.iv6c := Convert_Hhch12_Type( Get( slices, 704 ));
            rec.iv6d := Convert_Hhch12_Type( Get( slices, 705 ));
            rec.iv6e := Convert_Hhch12_Type( Get( slices, 706 ));
            rec.iv6f := Convert_Hhch12_Type( Get( slices, 707 ));
            rec.iv7 := Convert( slices, 708, ( -9, -8, -7 ) );
            rec.ghqa := Convert_Ghqa_Type( Get( slices, 709 ));
            rec.ghqb := Convert_Ghqb_Type( Get( slices, 710 ));
            rec.ghqc := Convert_Ghqc_Type( Get( slices, 711 ));
            rec.ghqd := Convert_Ghqc_Type( Get( slices, 712 ));
            rec.ghqe := Convert_Ghqe_Type( Get( slices, 713 ));
            rec.ghqf := Convert_Ghqe_Type( Get( slices, 714 ));
            rec.ghqg := Convert_Ghqc_Type( Get( slices, 715 ));
            rec.ghqh := Convert_Ghqc_Type( Get( slices, 716 ));
            rec.ghqi := Convert_Ghqb_Type( Get( slices, 717 ));
            rec.ghqj := Convert_Ghqe_Type( Get( slices, 718 ));
            rec.ghqk := Convert_Ghqe_Type( Get( slices, 719 ));
            rec.ghql := Convert_Ghqc_Type( Get( slices, 720 ));
            rec.opfama := Convert_Opfama_Type( Get( slices, 721 ));
            rec.opfamb := Convert_Opfama_Type( Get( slices, 722 ));
            rec.opfamc := Convert_Opfama_Type( Get( slices, 723 ));
            rec.opfamd := Convert_Opfama_Type( Get( slices, 724 ));
            rec.opfame := Convert_Opfama_Type( Get( slices, 725 ));
            rec.opfamf := Convert_Opfama_Type( Get( slices, 726 ));
            rec.opfamg := Convert_Opfama_Type( Get( slices, 727 ));
            rec.opfamh := Convert_Opfama_Type( Get( slices, 728 ));
            rec.opfami := Convert_Opfama_Type( Get( slices, 729 ));
            rec.lfsat1 := Convert_Lfsat1_Type( Get( slices, 730 ));
            rec.lfsat2 := Convert_Lfsat1_Type( Get( slices, 731 ));
            rec.lfsat3 := Convert_Lfsat1_Type( Get( slices, 732 ));
            rec.lfsat4 := Convert_Lfsat1_Type( Get( slices, 733 ));
            rec.lfsat5 := Convert_Lfsat1_Type( Get( slices, 734 ));
            rec.lfsat6 := Convert_Lfsat1_Type( Get( slices, 735 ));
            rec.lfsat7 := Convert_Lfsat1_Type( Get( slices, 736 ));
            rec.lfsat8 := Convert_Lfsat1_Type( Get( slices, 737 ));
            rec.lfsato := Convert_Lfsat1_Type( Get( slices, 738 ));
            rec.lfsatl := Convert( slices, 739, ( -9, -8, -7, -2, -1 ) );
            rec.xsupa := Convert_Xsupa_Type( Get( slices, 740 ));
            rec.xsupb := Convert_Xsupa_Type( Get( slices, 741 ));
            rec.xsupc := Convert_Xsupa_Type( Get( slices, 742 ));
            rec.ssupa := Convert_Ssupa_Type( Get( slices, 743 ));
            rec.ssupb := Convert_Ssupa_Type( Get( slices, 744 ));
            rec.ssupc := Convert_Ssupa_Type( Get( slices, 745 ));
            rec.ssupd := Convert_Ssupa_Type( Get( slices, 746 ));
            rec.ssupe := Convert_Ssupa_Type( Get( slices, 747 ));
            rec.ssup1 := Convert_Netsx1_Type( Get( slices, 748 ));
            rec.ssupr2r := Convert_Ssupr2r_Type( Get( slices, 749 ));
            rec.prrs2i := Convert_Prrs2i_Type( Get( slices, 750 ));
            rec.pripn := Convert( slices, 751, ( -9, -8 ) );
            rec.prwhy := Convert_Prwhy_Type( Get( slices, 752 ));
            rec.pplevr := Convert_Plever_Type( Get( slices, 753 ));
            rec.prfehq := Convert_Prfehq_Type( Get( slices, 754 ));
            rec.prsehq := Convert_Prsehq_Type( Get( slices, 755 ));
            rec.presbgm := Convert_Presbgm_Type( Get( slices, 756 ));
            rec.presby4 := Convert( slices, 757, ( -9, -8, -7, -2, -1 ) );
            rec.presly := Convert_Presly_Type( Get( slices, 758 ));
            rec.prf101 := Convert_Prf101_Type( Get( slices, 759 ));
            rec.prf102 := Convert_Prf102_Type( Get( slices, 760 ));
            rec.prf116 := Convert_Prf116_Type( Get( slices, 761 ));
            rec.prf125 := Convert_Prf125_Type( Get( slices, 762 ));
            rec.prf131 := Convert_Prf131_Type( Get( slices, 763 ));
            rec.prf135 := Convert_Prf135_Type( Get( slices, 764 ));
            rec.prf137 := Convert_Prf137_Type( Get( slices, 765 ));
            rec.prf139 := Convert_Prf139_Type( Get( slices, 766 ));
            rec.prf141 := Convert_Prf141_Type( Get( slices, 767 ));
            rec.prfirn := Convert_Prfirn_Type( Get( slices, 768 ));
            rec.prearn := Convert_Prearn_Type( Get( slices, 769 ));
            rec.prjbbgm := Convert_Presbgm_Type( Get( slices, 770 ));
            rec.prjbby4 := Convert( slices, 771, ( -9, -8, -7, -2, -1 ) );
            rec.prjbly := Convert_Prjbly_Type( Get( slices, 772 ));
            rec.prfitb := Convert_Prfitb_Type( Get( slices, 773 ));
            rec.ivpa := Convert_Ivpa_Type( Get( slices, 774 ));
            rec.ivpb := Convert_Ivpb_Type( Get( slices, 775 ));
            rec.ivpc := Convert_Ivpc_Type( Get( slices, 776 ));
            rec.ivpd := Convert_Ivpd_Type( Get( slices, 777 ));
            rec.ivpe := Convert_Ivpe_Type( Get( slices, 778 ));
            rec.telwhy := Convert_Telwhy_Type( Get( slices, 779 ));
            rec.prjbft := Convert_Prjbft_Type( Get( slices, 780 ));
            rec.tlfiyrl := Convert( slices, 781, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.tlfiyr := Convert( slices, 782, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.pid := Convert( slices, 783 );
            rec.iviow6 := Convert_Iviow4_Type( Get( slices, 784 ));
            rec.hhmem := Convert_Hhmem_Type( Get( slices, 785 ));
            rec.newhy := Convert_Newhy_Type( Get( slices, 786 ));
            rec.nemnjn := Convert_Nemnjn_Type( Get( slices, 787 ));
            rec.neyrjn4 := Convert( slices, 788, ( -9, -8, -7, -2, -1 ) );
            rec.ivfio := Convert_Ivfio_Type( Get( slices, 789 ));
            rec.iodc := Convert_Iodc_Type( Get( slices, 790 ));
            rec.memorig := Convert_Memorig_Type( Get( slices, 791 ));
            rec.hgr2r := Convert_Hgr2r_Type( Get( slices, 792 ));
            rec.hgsex := Convert_Hgsex_Type( Get( slices, 793 ));
            rec.hgbm := Convert_Hgbm_Type( Get( slices, 794 ));
            rec.hgby := Convert( slices, 795, ( -2, -1 ) );
            rec.mastat := Convert_Mastat_Type( Get( slices, 796 ));
            rec.hgspn := Convert( slices, 797, ( -9, -8, -2, -1 ) );
            rec.hgemp := Convert_Hgemp_Type( Get( slices, 798 ));
            rec.hgfno := Convert( slices, 799, ( -9, -8, -2, -1 ) );
            rec.hgmno := Convert( slices, 800, ( -9, -8, -2, -1 ) );
            rec.hgra := Convert( slices, 801, ( -9, -8, -2, -1 ) );
            rec.age := Convert( slices, 802, ( -9, -8 ) );
            rec.age12 := Convert( slices, 803, ( -9, -8 ) );
            rec.butype := Convert_Butype_Type( Get( slices, 804 ));
            rec.buno := Convert( slices, 805, ( -9, -8 ) );
            rec.nchild := Convert( slices, 806, ( -9, -8 ) );
            rec.hoh := Convert_Hoh_Type( Get( slices, 807 ));
            rec.rach16 := Convert_Hhch12_Type( Get( slices, 808 ));
            rec.sampst := Convert_Sampst_Type( Get( slices, 809 ));
            rec.movest := Convert_Movest_Type( Get( slices, 810 ));
            rec.region := Convert_Region_Type( Get( slices, 811 ));
            rec.hhsize := Convert( slices, 812, ( -9, -8 ) );
            rec.hhtype := Convert_Hhtype_Type( Get( slices, 813 ));
            rec.tenure := Convert_Tenure_Type( Get( slices, 814 ));
            rec.qfedhi := Convert_Qfedhi_Type( Get( slices, 815 ));
            rec.qfvoc := Convert_Qfvoc_Type( Get( slices, 816 ));
            rec.qfachi := Convert_Qfachi_Type( Get( slices, 817 ));
            rec.jbft := Convert_Jbft_Type( Get( slices, 818 ));
            rec.payg := Convert( slices, 819, ( -9.0, -8.0, -7.0 ) );
            rec.payn := Convert( slices, 820, ( -9.0, -8.0, -7.0 ) );
            rec.paygu := Convert( slices, 821, ( -9.0, -8.0, -7.0 ) );
            rec.paynu := Convert( slices, 822, ( -9.0, -8.0, -7.0 ) );
            rec.paygty := Convert( slices, 823, ( -9.0, -8.0, -7.0 ) );
            rec.paygly := Convert( slices, 824, ( -9.0, -8.0, -7.0 ) );
            rec.paynty := Convert( slices, 825, ( -9.0, -8.0, -7.0 ) );
            rec.paynly := Convert( slices, 826, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jsprof := Convert( slices, 827, ( -9.0, -8.0, -7.0 ) );
            rec.jsloss := Convert( slices, 828, ( -9.0, -8.0, -7.0 ) );
            rec.jspayg := Convert( slices, 829, ( -9.0, -8.0, -7.0 ) );
            rec.cjsten := Convert( slices, 830, ( -9.0, -8.0, -7.0 ) );
            rec.cjswk9 := Convert( slices, 831, ( -9.0, -8.0, -7.0 ) );
            rec.jlid := Convert_Jlid_Type( Get( slices, 832 ));
            rec.jlyid := Convert_Jlyid_Type( Get( slices, 833 ));
            rec.jtyid := Convert_Jtyid_Type( Get( slices, 834 ));
            rec.jbseg := Convert_Jbseg_Type( Get( slices, 835 ));
            rec.jbgold := Convert( slices, 836, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbrgsc := Convert_Jbrgsc_Type( Get( slices, 837 ));
            rec.jbisco := Convert( slices, 838 );
            rec.jbcssm := Convert( slices, 839, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbcssf := Convert( slices, 840, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbhgs := Convert( slices, 841, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbsec := Convert_Jbsec_Type( Get( slices, 842 ));
            rec.njbwks := Convert( slices, 843, ( -9.0, -8.0, -7.0 ) );
            rec.njuwks := Convert( slices, 844, ( -9.0, -8.0, -7.0 ) );
            rec.njiwks := Convert( slices, 845, ( -9.0, -8.0, -7.0 ) );
            rec.njbnew := Convert( slices, 846, ( -9, -8, -7 ) );
            rec.njbsp := Convert( slices, 847, ( -9, -8, -7 ) );
            rec.njusp := Convert( slices, 848, ( -9, -8, -7 ) );
            rec.njisp := Convert( slices, 849, ( -9, -8, -7 ) );
            rec.jbstatl := Convert( slices, 850, ( -9, -8, -7, -2, -1 ) );
            rec.jbstatt := Convert( slices, 851, ( -9, -8, -7, -2, -1 ) );
            rec.jbsocly := Convert( slices, 852, ( -9, -8, -7 ) );
            rec.jlseg := Convert_Jlseg_Type( Get( slices, 853 ));
            rec.jlgold := Convert( slices, 854, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlrgsc := Convert_Jlrgsc_Type( Get( slices, 855 ));
            rec.jlisco := Convert( slices, 856 );
            rec.jlcssm := Convert( slices, 857, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlcssf := Convert( slices, 858, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlhgs := Convert( slices, 859, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlsec := Convert_Jlsec_Type( Get( slices, 860 ));
            rec.norgm := Convert( slices, 861, ( -9, -8, -7 ) );
            rec.norga := Convert( slices, 862, ( -9, -8, -7 ) );
            rec.vote := Convert_Vote_Type( Get( slices, 863 ));
            rec.fimnp := Convert( slices, 864, ( -9.0, -8.0, -7.0 ) );
            rec.fimnb := Convert( slices, 865, ( -9.0, -8.0, -7.0 ) );
            rec.fimni := Convert( slices, 866, ( -9.0, -8.0, -7.0 ) );
            rec.fimnt := Convert( slices, 867, ( -9.0, -8.0, -7.0 ) );
            rec.fimnl := Convert( slices, 868, ( -9.0, -8.0, -7.0 ) );
            rec.fimnnl := Convert( slices, 869, ( -9.0, -8.0, -7.0 ) );
            rec.fimn := Convert( slices, 870, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrl := Convert( slices, 871, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrnl := Convert( slices, 872, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrp := Convert( slices, 873, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrb := Convert( slices, 874, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrt := Convert( slices, 875, ( -9.0, -8.0, -7.0 ) );
            rec.fiyri := Convert( slices, 876, ( -9.0, -8.0, -7.0 ) );
            rec.fiyr := Convert( slices, 877, ( -9.0, -8.0, -7.0 ) );
            rec.fihhmn := Convert( slices, 878, ( -9.0, -8.0, -7.0 ) );
            rec.hlghq1 := Convert( slices, 879, ( -9, -8, -7 ) );
            rec.hlghq2 := Convert( slices, 880, ( -9, -8, -7 ) );
            rec.spjb := Convert_Spjb_Type( Get( slices, 881 ));
            rec.spsoc := Convert( slices, 882, ( -9.0, -8.0 ) );
            rec.spjbhr := Convert( slices, 883, ( -9, -8, -7 ) );
            rec.spjbot := Convert( slices, 884, ( -9, -8, -7 ) );
            rec.sppayg := Convert( slices, 885, ( -9.0, -8.0, -7.0 ) );
            rec.spjbyr := Convert( slices, 886, ( -9, -8, -7 ) );
            rec.lrwght := Convert( slices, 887 );
            rec.lewght := Convert( slices, 888 );
            rec.xrwght := Convert( slices, 889 );
            rec.xewght := Convert( slices, 890 );
            rec.j2payi := Convert( slices, 891, ( -9, -8, -7, -3, -2, -1 ) );
            rec.fiyrdii := Convert_Fiyrdii_Type( Get( slices, 892 ));
            rec.prearni := Convert( slices, 893, ( -9, -8, -2, -1 ) );
            rec.prfitbi := Convert_Prfitbi_Type( Get( slices, 894 ));
            rec.paygui := Convert_Fimnbi_Type( Get( slices, 895 ));
            rec.paynui := Convert_Fimnbi_Type( Get( slices, 896 ));
            rec.paygti := Convert_Fimnbi_Type( Get( slices, 897 ));
            rec.paygli := Convert_Fimnbi_Type( Get( slices, 898 ));
            rec.paynti := Convert_Fimnbi_Type( Get( slices, 899 ));
            rec.paynli := Convert_Fimnbi_Type( Get( slices, 900 ));
            rec.jsprofi := Convert_Fimnbi_Type( Get( slices, 901 ));
            rec.jspaygi := Convert_Fimnbi_Type( Get( slices, 902 ));
            rec.fimnpi := Convert_Fimnbi_Type( Get( slices, 903 ));
            rec.fimnbi := Convert_Fimnbi_Type( Get( slices, 904 ));
            rec.fimnii := Convert_Fimnii_Type( Get( slices, 905 ));
            rec.fimnti := Convert_Fimnii_Type( Get( slices, 906 ));
            rec.fimnnli := Convert_Fimnbi_Type( Get( slices, 907 ));
            rec.fimnli := Convert_Fimnbi_Type( Get( slices, 908 ));
            rec.fimnthi := Convert_Fimnii_Type( Get( slices, 909 ));
            rec.fiyrli := Convert_Fimnbi_Type( Get( slices, 910 ));
            rec.fiyrnli := Convert_Fimnbi_Type( Get( slices, 911 ));
            rec.fiyrpi := Convert_Fimnii_Type( Get( slices, 912 ));
            rec.fiyrbi := Convert_Fimnbi_Type( Get( slices, 913 ));
            rec.fiyrti := Convert_Fimnbi_Type( Get( slices, 914 ));
            rec.fiyrii := Convert_Fimnbi_Type( Get( slices, 915 ));
            rec.fiyeari := Convert_Fimnbi_Type( Get( slices, 916 ));
            rec.sppaygi := Convert_Prfitbi_Type( Get( slices, 917 ));
            rec.fihhmni := Convert_Fihhmni_Type( Get( slices, 918 ));
            rec.mrjend := Convert( slices, 919, ( -9, -8, -7, -3, -2, -1 ) );
            rec.mrjsoc := Convert( slices, 920, ( -9, -8, -7, -3 ) );
            rec.mrjsic := Convert( slices, 921, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjsemp := Convert_Mrjsemp_Type( Get( slices, 922 ));
            rec.mrjboss := Convert_Mrjboss_Type( Get( slices, 923 ));
            rec.mrjmngr := Convert_Mrjmngr_Type( Get( slices, 924 ));
            rec.mrjsize := Convert_Mrjsize_Type( Get( slices, 925 ));
            rec.mrjseg := Convert_Maseg_Type( Get( slices, 926 ));
            rec.mrjgold := Convert( slices, 927, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjrgsc := Convert_Margsc_Type( Get( slices, 928 ));
            rec.mrjisco := Convert( slices, 929 );
            rec.mrjcssm := Convert( slices, 930, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjcssf := Convert( slices, 931, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjhgs := Convert( slices, 932, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjsec := Convert_J1sec_Type( Get( slices, 933 ));
            rec.xrwghte := Convert( slices, 934 );
            rec.xewghte := Convert( slices, 935 );
            rec.fimnsel := Convert_Fimnsel_Type( Get( slices, 936 ));
            rec.sppid := Convert( slices, 937 );
            rec.fpid := Convert( slices, 938 );
            rec.mpid := Convert( slices, 939 );
            rec.distmov := Convert( slices, 940, ( -9.0, -8.0, -7.0 ) );
            rec.region2 := Convert_Region2_Type( Get( slices, 941 ));
            rec.isced := Convert_Isced_Type( Get( slices, 942 ));
            rec.casmin := Convert_Casmin_Type( Get( slices, 943 ));
            rec.jbiscon := Convert( slices, 944, ( -9, -8, -7, -2, -1 ) );
            rec.jliscon := Convert( slices, 945, ( -9, -8, -7, -2, -1 ) );
            rec.mrjiscn := Convert( slices, 946, ( -9, -8, -7, -2, -1 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Indresp_component ).start_pos = 0 ) then
               index.pointers( Indresp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Indresp_component ).counter := index.pointers( Indresp_component ).counter + 1;
            Put_Index( index_map, index );
            Indresp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Indresp_IO.Close( bin_file );
   end Create_Indresp_Wave_G;




   procedure Create_Indsamp_Wave_G( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Indsamp_IO.File_Type;
      rec         : Indsamp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Indsamp_IO.Create (bin_file, Indsamp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.pid := Convert( slices, 3 );
            rec.iviow6 := Convert_Iviow4_Type( Get( slices, 4 ));
            rec.ivievr := Convert_Ivievr_Type( Get( slices, 5 ));
            rec.ivelig := Convert_Ivelig_Type( Get( slices, 6 ));
            rec.hhmem := Convert_Hhmem_Type( Get( slices, 7 ));
            rec.newhy := Convert_Newhy_Type( Get( slices, 8 ));
            rec.nemnjn := Convert_Nemnjn_Type( Get( slices, 9 ));
            rec.neyrjn4 := Convert( slices, 10, ( -9, -8, -7, -2, -1 ) );
            rec.lvwhy := Convert_Lvwhy_Type( Get( slices, 11 ));
            rec.lvmn := Convert_Lvmn_Type( Get( slices, 12 ));
            rec.lvyr := Convert( slices, 13, ( -9, -8, -2, -1 ) );
            rec.lvloc := Convert_Lvloc_Type( Get( slices, 14 ));
            rec.ivfio := Convert_Ivfio_Type( Get( slices, 15 ));
            rec.ivrref := Convert_Ivrref_Type( Get( slices, 16 ));
            rec.ivireis := Convert_Ivireis_Type( Get( slices, 17 ));
            rec.finloc := Convert_Finloc_Type( Get( slices, 18 ));
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 19 ));
            rec.memorig := Convert_Memorig_Type( Get( slices, 20 ));
            rec.sampst := Convert_Sampst_Type( Get( slices, 22 ));
            rec.movest := Convert_Movest_Type( Get( slices, 23 ));
            rec.lewght := Convert( slices, 24, ( -9.0, -8.0, -1.0 ) );
            rec.lrwght := Convert( slices, 25, ( -9.0, -8.0, -1.0 ) );
            rec.distmov := Convert( slices, 26, ( -9.0, -8.0 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Indsamp_component ).start_pos = 0 ) then
               index.pointers( Indsamp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Indsamp_component ).counter := index.pointers( Indsamp_component ).counter + 1;
            Put_Index( index_map, index );
            Indsamp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Indsamp_IO.Close( bin_file );
   end Create_Indsamp_Wave_G;




   procedure Create_Jobhist_Wave_G( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Jobhist_IO.File_Type;
      rec         : Jobhist_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Jobhist_IO.Create (bin_file, Jobhist_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.jhstat := Convert_Jhstat_Type( Get( slices, 3 ));
            rec.jhbgd := Convert( slices, 4, ( -9, -8, -7, -2, -1 ) );
            rec.jhbgm := Convert_Jbbgm1_Type( Get( slices, 5 ));
            rec.jhbgy4 := Convert( slices, 6, ( -9, -8, -7, -2, -1 ) );
            rec.jspno := Convert( slices, 7 );
            rec.jhsoc := Convert( slices, 8, ( -9, -8, -2, -1 ) );
            rec.jhsemp := Convert_Jhsemp_Type( Get( slices, 9 ));
            rec.jhboss := Convert_Bscon_Type( Get( slices, 10 ));
            rec.jhsect := Convert_Jhsect_Type( Get( slices, 11 ));
            rec.jhmngr := Convert_Jhmngr_Type( Get( slices, 12 ));
            rec.jhpldf := Convert_Jhpldf_Type( Get( slices, 13 ));
            rec.jhsic := Convert( slices, 14, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.jhsize := Convert_Jhsize_Type( Get( slices, 15 ));
            rec.jhpayl := Convert( slices, 16, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhpylw := Convert( slices, 17, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.jhpylg := Convert_Jhpylg_Type( Get( slices, 18 ));
            rec.jhstpy := Convert_Jhstpy_Type( Get( slices, 19 ));
            rec.jblky := Convert_Jblky_Type( Get( slices, 20 ));
            rec.jhendd := Convert( slices, 21, ( -9, -8, -7, -2, -1 ) );
            rec.jhendm := Convert_Jbbgm1_Type( Get( slices, 22 ));
            rec.jhendy4 := Convert( slices, 23, ( -9, -8, -7, -2, -1 ) );
            rec.jha9ly := Convert_Jha9ly_Type( Get( slices, 24 ));
            rec.jhseg := Convert_Jhseg_Type( Get( slices, 25 ));
            rec.jhgold := Convert( slices, 26, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhrgsc := Convert_Jhrgsc_Type( Get( slices, 27 ));
            rec.jhisco := Convert( slices, 28, ( -9, -8 ) );
            rec.jhcssm := Convert( slices, 29, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhcssf := Convert( slices, 30, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhhgs := Convert( slices, 31, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhsec := Convert_Jhsec_Type( Get( slices, 32 ));
            rec.jhspw := Convert( slices, 33, ( -9.0, -8.0 ) );
            rec.jhgpay := Convert( slices, 34, ( -9.0, -8.0, -7.0 ) );
            rec.jhnpay := Convert( slices, 35, ( -9.0, -8.0, -7.0, -1.0 ) );
            rec.jhgpayi := Convert_Jhgpayi_Type( Get( slices, 36 ));
            rec.jhnpayi := Convert_Jhgpayi_Type( Get( slices, 37 ));
            rec.jhepflg := Convert_Jhepflg_Type( Get( slices, 38 ));
            rec.pid := Convert( slices, 39 );
            rec.jhiscon := Convert( slices, 40, ( -9, -8, -7, -2, -1 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Jobhist_component ).start_pos = 0 ) then
               index.pointers( Jobhist_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Jobhist_component ).counter := index.pointers( Jobhist_component ).counter + 1;
            Put_Index( index_map, index );
            Jobhist_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Jobhist_IO.Close( bin_file );
   end Create_Jobhist_Wave_G;




   procedure Create_Youth_Wave_G( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Youth_IO.File_Type;
      rec         : Youth_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Youth_IO.Create (bin_file, Youth_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.pno := Convert( slices, 1 );
            rec.ypdobm := Convert_Ypdobm_Type( Get( slices, 2 ));
            rec.ypdoby4 := Convert( slices, 3, ( -9, -8, -7, -2, -1 ) );
            rec.ypsex := Convert_Ypsex_Type( Get( slices, 4 ));
            rec.ytvhrs := Convert_Ytvhrs_Type( Get( slices, 5 ));
            rec.ytvstp := Convert_Ytvlmt_Type( Get( slices, 6 ));
            rec.ypfpc := Convert_Ypfpc_Type( Get( slices, 7 ));
            rec.ypfpcgm := Convert_Ypfpcgm_Type( Get( slices, 8 ));
            rec.yppals := Convert_Yppalo_Type( Get( slices, 9 ));
            rec.yputel := Convert_Yputel_Type( Get( slices, 10 ));
            rec.yplate := Convert_Yplate_Type( Get( slices, 11 ));
            rec.ypfpark := Convert_Ypfarca_Type( Get( slices, 12 ));
            rec.ypfbeau := Convert_Ypfbeau_Type( Get( slices, 13 ));
            rec.ypfclub := Convert_Ypfarca_Type( Get( slices, 14 ));
            rec.ypfdisc := Convert_Ypfarca_Type( Get( slices, 15 ));
            rec.ypfspor := Convert_Ypfarca_Type( Get( slices, 16 ));
            rec.ypfarca := Convert_Ypfarca_Type( Get( slices, 17 ));
            rec.ypargm := Convert_Ypargm_Type( Get( slices, 18 ));
            rec.ypargf := Convert_Ypargf_Type( Get( slices, 19 ));
            rec.yptlkm := Convert_Ypargm_Type( Get( slices, 20 ));
            rec.yptlkf := Convert_Ypargf_Type( Get( slices, 21 ));
            rec.ypnpal := Convert( slices, 22, ( -9, -8, -2, -1 ) );
            rec.ypgang := Convert_Ypbeau_Type( Get( slices, 23 ));
            rec.ypmkfrn := Convert_Ypmkfrn_Type( Get( slices, 24 ));
            rec.ypfght := Convert_Ypfght_Type( Get( slices, 25 ));
            rec.ypeatn := Convert_Ypeatn_Type( Get( slices, 26 ));
            rec.ypsave := Convert_Ypsave_Type( Get( slices, 27 ));
            rec.yppkml := Convert( slices, 28, ( -9, -2, -1 ) );
            rec.yppkmp := Convert( slices, 29, ( -9, -2, -1 ) );
            rec.ypbeau := Convert_Ypbeau_Type( Get( slices, 30 ));
            rec.ypdklm := Convert_Ypdklm_Type( Get( slices, 31 ));
            rec.ypsmev := Convert_Ypbeau_Type( Get( slices, 32 ));
            rec.ypsmag := Convert( slices, 33, ( -9, -8, -2, -1 ) );
            rec.ypsmof := Convert_Ypsmof_Type( Get( slices, 34 ));
            rec.ypsmlw := Convert( slices, 35, ( -9, -8, -2, -1 ) );
            rec.ypsmyr := Convert( slices, 36, ( -9, -8, -2, -1 ) );
            rec.ypdgfr := Convert_Ypdgfr_Type( Get( slices, 37 ));
            rec.ypsad := Convert_Ypsad_Type( Get( slices, 38 ));
            rec.ypwor := Convert_Ypwor_Type( Get( slices, 39 ));
            rec.ypbull := Convert_Ypbull_Type( Get( slices, 40 ));
            rec.yplone := Convert_Ypbored_Type( Get( slices, 41 ));
            rec.ypbored := Convert_Ypbored_Type( Get( slices, 42 ));
            rec.ypesta := Convert_Ypesta_Type( Get( slices, 43 ));
            rec.ypestb := Convert_Ypesta_Type( Get( slices, 44 ));
            rec.ypestc := Convert_Ypesta_Type( Get( slices, 45 ));
            rec.ypeste := Convert_Ypesta_Type( Get( slices, 46 ));
            rec.ypestf := Convert_Ypesta_Type( Get( slices, 47 ));
            rec.ypesth := Convert_Ypesta_Type( Get( slices, 48 ));
            rec.yptcha := Convert_Ypesta_Type( Get( slices, 49 ));
            rec.yptchb := Convert_Ypesta_Type( Get( slices, 50 ));
            rec.yptchc := Convert_Ypesta_Type( Get( slices, 51 ));
            rec.ypestg := Convert_Ypesta_Type( Get( slices, 52 ));
            rec.yphsw := Convert_Yphap_Type( Get( slices, 53 ));
            rec.yphap := Convert_Yphap_Type( Get( slices, 54 ));
            rec.yphfm := Convert_Yphap_Type( Get( slices, 55 ));
            rec.yphfr := Convert_Yphap_Type( Get( slices, 56 ));
            rec.yphlf := Convert_Yphap_Type( Get( slices, 57 ));
            rec.ypcoma := Convert_Ypcoma_Type( Get( slices, 58 ));
            rec.ypcomb := Convert_Ypcomb_Type( Get( slices, 59 ));
            rec.ypcomc := Convert_Ypcomc_Type( Get( slices, 60 ));
            rec.ypcomd := Convert_Ypcomd_Type( Get( slices, 61 ));
            rec.ypcome := Convert_Ypcome_Type( Get( slices, 62 ));
            rec.ypcomf := Convert_Ypcomf_Type( Get( slices, 63 ));
            rec.ypcomg := Convert_Ypcomg_Type( Get( slices, 64 ));
            rec.ypopla := Convert_Ypopfb_Type( Get( slices, 65 ));
            rec.ypopha := Convert_Ypopfj_Type( Get( slices, 66 ));
            rec.ypoppl := Convert_Ypopfj_Type( Get( slices, 67 ));
            rec.ypopscb := Convert_Ypopfj_Type( Get( slices, 68 ));
            rec.ypvte6 := Convert_Ypvte6_Type( Get( slices, 69 ));
            rec.ypvte3 := Convert_Ypvte3_Type( Get( slices, 70 ));
            rec.ypcrwra := Convert_Ypcrwra_Type( Get( slices, 71 ));
            rec.ypcrwrb := Convert_Ypcrwrb_Type( Get( slices, 72 ));
            rec.ypexpl := Convert_Ypbeau_Type( Get( slices, 73 ));
            rec.ypvand := Convert( slices, 74, ( -9, -8, -2, -1 ) );
            rec.yptrun := Convert_Yptrun_Type( Get( slices, 75 ));
            rec.ypopsc := Convert_Ypopsc_Type( Get( slices, 76 ));
            rec.yppasc := Convert_Yppasc_Type( Get( slices, 77 ));
            rec.yplvsc := Convert_Yplvsc_Type( Get( slices, 78 ));
            rec.yplvhm := Convert( slices, 79, ( -9, -8, -2, -1 ) );
            rec.ypamar := Convert( slices, 80, ( -9, -8, -2, -1 ) );
            rec.ypapar := Convert( slices, 81, ( -9, -8, -2, -1 ) );
            rec.ypwhrs := Convert( slices, 82, ( -9, -8, -2, -1 ) );
            rec.yppay := Convert( slices, 83, ( -9, -8, -2, -1 ) );
            rec.ypsoc := Convert( slices, 84, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.ypsocy := Convert_Ypsocy_Type( Get( slices, 85 ));
            rec.ypdlfa := Convert_Ypdlfa_Type( Get( slices, 86 ));
            rec.ypdlfb := Convert_Ypdlfb_Type( Get( slices, 87 ));
            rec.ypwght := Convert( slices, 88 );
            rec.hid := Convert( slices, 89 );
            rec.pid := Convert( slices, 90 );
            rec.fnspno := Convert( slices, 91, ( -9, -8 ) );
            rec.fnspid := Convert( slices, 92, ( -9.0, -8.0 ) );
            rec.mnspno := Convert( slices, 93, ( -9, -8 ) );
            rec.mnspid := Convert( slices, 94, ( -9.0, -8.0 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Youth_component ).start_pos = 0 ) then
               index.pointers( Youth_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Youth_component ).counter := index.pointers( Youth_component ).counter + 1;
            Put_Index( index_map, index );
            Youth_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Youth_IO.Close( bin_file );
   end Create_Youth_Wave_G;




   procedure Create_Egoalt_Wave_H( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Egoalt_IO.File_Type;
      rec         : Egoalt_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Egoalt_IO.Create (bin_file, Egoalt_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.opno := Convert( slices, 3, (  1 .. 0 => -9 ) );
            rec.rel := Convert_Rel_Type( Get( slices, 4 ));
            rec.sex := Convert_Sex_Type( Get( slices, 5 ));
            rec.osex := Convert_Hgsex_Type( Get( slices, 6 ));
            rec.lwstat := Convert_Lwstat_Type( Get( slices, 7 ));
            rec.nwstat := Convert_Nwstat_Type( Get( slices, 8 ));
            rec.pid := Convert( slices, 9 );
            rec.opid := Convert( slices, 10 );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Egoalt_component ).start_pos = 0 ) then
               index.pointers( Egoalt_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Egoalt_component ).counter := index.pointers( Egoalt_component ).counter + 1;
            Put_Index( index_map, index );
            Egoalt_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Egoalt_IO.Close( bin_file );
   end Create_Egoalt_Wave_H;




   procedure Create_Hhresp_Wave_H( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Hhresp_IO.File_Type;
      rec         : Hhresp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Hhresp_IO.Create (bin_file, Hhresp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.hhdoi := Convert( slices, 2, ( -9, -8, -7 ) );
            rec.hhmoi := Convert_Doim_Type( Get( slices, 3 ));
            rec.hhyoi4 := Convert( slices, 4, ( -9, -8, -7, -2, -1 ) );
            rec.hhsoih := Convert( slices, 5, ( -9, -8, -7 ) );
            rec.hhsoim := Convert( slices, 6, ( -9, -8, -7 ) );
            rec.hstype := Convert_Hstype_Type( Get( slices, 7 ));
            rec.hsrins := Convert_Cjsck2_Type( Get( slices, 8 ));
            rec.hsroom := Convert( slices, 9, ( -9, -8, -7, -2, -1 ) );
            rec.hsownd := Convert_Hsownd_Type( Get( slices, 10 ));
            rec.hsowr1 := Convert( slices, 11, ( -9, -8, -7, -2, -1 ) );
            rec.hsowr2 := Convert( slices, 12, ( -9, -8, -7, -2, -1 ) );
            rec.mghave := Convert_Mghave_Type( Get( slices, 13 ));
            rec.hsowrp := Convert_Bscon_Type( Get( slices, 14 ));
            rec.mgynot := Convert_Mgynot_Type( Get( slices, 15 ));
            rec.hscost := Convert( slices, 16, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.mgly := Convert_Bscon_Type( Get( slices, 17 ));
            rec.hsivw7 := Convert( slices, 18, ( -9, -8, -7, -2, -1 ) );
            rec.mgxtra := Convert_Bscon_Type( Get( slices, 19 ));
            rec.mgnew := Convert( slices, 20, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.mgxty1 := Convert_Mgxty1_Type( Get( slices, 21 ));
            rec.mgxty2 := Convert_Mgxty2_Type( Get( slices, 22 ));
            rec.mgxty3 := Convert_Mgxty3_Type( Get( slices, 23 ));
            rec.mgxty4 := Convert_Mgxty4_Type( Get( slices, 24 ));
            rec.mgxty5 := Convert_Mgxty5_Type( Get( slices, 25 ));
            rec.mgold := Convert( slices, 26, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.mglife := Convert( slices, 27, ( -9, -8, -7, -2, -1 ) );
            rec.mgtype := Convert_Mgtype_Type( Get( slices, 28 ));
            rec.xpmg := Convert( slices, 29, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.xpmg1 := Convert_Bscon_Type( Get( slices, 30 ));
            rec.xpmg2 := Convert_Bscon_Type( Get( slices, 31 ));
            rec.xpmg3 := Convert_Bscon_Type( Get( slices, 32 ));
            rec.xpmg4 := Convert_Bscon_Type( Get( slices, 33 ));
            rec.mgyr04 := Convert( slices, 34, ( -9, -8, -7, -2, -1 ) );
            rec.hsyr04 := Convert( slices, 35, ( -9, -8, -7, -2, -1 ) );
            rec.hsval := Convert( slices, 36, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.hsjb := Convert_Bscon_Type( Get( slices, 37 ));
            rec.rentp1 := Convert( slices, 38, ( -9, -8, -7, -2, -1 ) );
            rec.rentp2 := Convert( slices, 39, ( -9, -8, -7, -2, -1 ) );
            rec.rentll := Convert_Rentll_Type( Get( slices, 40 ));
            rec.rentf := Convert_Rentf_Type( Get( slices, 41 ));
            rec.rent := Convert( slices, 42, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.rentw := Convert( slices, 43, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.rent1 := Convert_Rent1_Type( Get( slices, 44 ));
            rec.rent2 := Convert_Rent1_Type( Get( slices, 45 ));
            rec.rent3 := Convert_Bscon_Type( Get( slices, 46 ));
            rec.rent4 := Convert_Bscon_Type( Get( slices, 47 ));
            rec.rent5 := Convert_Bscon_Type( Get( slices, 48 ));
            rec.rent6 := Convert_Bscon_Type( Get( slices, 49 ));
            rec.rent7 := Convert_Rent7_Type( Get( slices, 50 ));
            rec.rent8 := Convert_Coh1mr_Type( Get( slices, 51 ));
            rec.renthb := Convert_Renthb_Type( Get( slices, 52 ));
            rec.rentg := Convert( slices, 53, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.rentgw := Convert( slices, 54, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.xphsdf := Convert( slices, 55, ( -9, -8, -7, -2, -1 ) );
            rec.xphsd1 := Convert_Bscon_Type( Get( slices, 56 ));
            rec.xphsd2 := Convert_Bscon_Type( Get( slices, 57 ));
            rec.xphsdb := Convert_Bscon_Type( Get( slices, 58 ));
            rec.hskch := Convert_Boolean_With_Missing( Get( slices, 59 ));
            rec.hskchs := Convert_Boolean_With_Missing( Get( slices, 60 ));
            rec.hsbth := Convert_Boolean_With_Missing( Get( slices, 61 ));
            rec.hsbths := Convert_Boolean_With_Missing( Get( slices, 62 ));
            rec.hstlt := Convert_Boolean_With_Missing( Get( slices, 63 ));
            rec.hstlts := Convert_Boolean_With_Missing( Get( slices, 64 ));
            rec.hsgdn := Convert_Boolean_With_Missing( Get( slices, 65 ));
            rec.hsgdns := Convert_Boolean_With_Missing( Get( slices, 66 ));
            rec.heatch := Convert_Bscon_Type( Get( slices, 67 ));
            rec.heatyp := Convert_Heatyp_Type( Get( slices, 68 ));
            rec.xpgasy := Convert( slices, 69, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.xplecy := Convert( slices, 70, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.xpoily := Convert( slices, 71, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.xpsfly := Convert( slices, 72, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.hsprbg := Convert_Boolean_With_Missing( Get( slices, 73 ));
            rec.hsprbh := Convert_Boolean_With_Missing( Get( slices, 74 ));
            rec.hsprbi := Convert_Boolean_With_Missing( Get( slices, 75 ));
            rec.hsprbj := Convert_Boolean_With_Missing( Get( slices, 76 ));
            rec.hsprbk := Convert_Boolean_With_Missing( Get( slices, 77 ));
            rec.hsprbl := Convert_Boolean_With_Missing( Get( slices, 78 ));
            rec.hsprbm := Convert_Boolean_With_Missing( Get( slices, 79 ));
            rec.hsprbn := Convert_Boolean_With_Missing( Get( slices, 80 ));
            rec.hsprbo := Convert_Boolean_With_Missing( Get( slices, 81 ));
            rec.hsprbp := Convert_Boolean_With_Missing( Get( slices, 82 ));
            rec.hsprbq := Convert_Boolean_With_Missing( Get( slices, 83 ));
            rec.hsctax := Convert_Hsctax_Type( Get( slices, 84 ));
            rec.hs2ownd := Convert_Bscon_Type( Get( slices, 85 ));
            rec.hs2val := Convert_Hs2val_Type( Get( slices, 86 ));
            rec.mgtot := Convert( slices, 87, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.cdhave := Convert_Bscon_Type( Get( slices, 88 ));
            rec.cdbght := Convert_Bscon_Type( Get( slices, 89 ));
            rec.cd1use := Convert_Cd1new_Type( Get( slices, 90 ));
            rec.cd1new := Convert( slices, 91, ( -9, -8, -7, -2, -1 ) );
            rec.cd1cst := Convert( slices, 92, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd2use := Convert_Cd1new_Type( Get( slices, 93 ));
            rec.cd2new := Convert( slices, 94, ( -9, -8, -7, -2, -1 ) );
            rec.cd2cst := Convert( slices, 95, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd3use := Convert_Cd1new_Type( Get( slices, 96 ));
            rec.cd3new := Convert( slices, 97, ( -9, -8, -7, -2, -1 ) );
            rec.cd3cst := Convert( slices, 98, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd4use := Convert_Cd1new_Type( Get( slices, 99 ));
            rec.cd4new := Convert( slices, 100, ( -9, -8, -7, -2, -1 ) );
            rec.cd4cst := Convert( slices, 101, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd5use := Convert_Cd1new_Type( Get( slices, 102 ));
            rec.cd5new := Convert( slices, 103, ( -9, -8, -7, -2, -1 ) );
            rec.cd5cst := Convert( slices, 104, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd6use := Convert_Cd1new_Type( Get( slices, 105 ));
            rec.cd6new := Convert( slices, 106, ( -9, -8, -7, -2, -1 ) );
            rec.cd6cst := Convert( slices, 107, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd7use := Convert_Cd1new_Type( Get( slices, 108 ));
            rec.cd7new := Convert( slices, 109, ( -9, -8, -7, -2, -1 ) );
            rec.cd7cst := Convert( slices, 110, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd8use := Convert_Cd1new_Type( Get( slices, 111 ));
            rec.cd8new := Convert( slices, 112, ( -9, -8, -7, -2, -1 ) );
            rec.cd8cst := Convert( slices, 113, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd9use := Convert_Cd1new_Type( Get( slices, 114 ));
            rec.cd9new := Convert( slices, 115, ( -9, -8, -7, -2, -1 ) );
            rec.cd9cst := Convert( slices, 116, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd10use := Convert_Cd10new_Type( Get( slices, 117 ));
            rec.cd10new := Convert( slices, 118, ( -9, -8, -7, -2, -1 ) );
            rec.cd10cst := Convert( slices, 119, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd11use := Convert_Cd10new_Type( Get( slices, 120 ));
            rec.cd11new := Convert( slices, 121, ( -9, -8, -7, -2, -1 ) );
            rec.cd11cst := Convert( slices, 122, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd12use := Convert_Cd10new_Type( Get( slices, 123 ));
            rec.cd12new := Convert( slices, 124, ( -9, -8, -7, -2, -1 ) );
            rec.cd12cst := Convert( slices, 125, ( -9, -8, -7, -3, -2, -1 ) );
            rec.xphp := Convert_Bscon_Type( Get( slices, 126 ));
            rec.xphpdf := Convert_Xphpdf_Type( Get( slices, 127 ));
            rec.hscana := Convert_Boolean_With_Missing( Get( slices, 128 ));
            rec.hscnta := Convert_Boolean_With_Missing( Get( slices, 129 ));
            rec.hscanb := Convert_Boolean_With_Missing( Get( slices, 130 ));
            rec.hscntb := Convert_Boolean_With_Missing( Get( slices, 131 ));
            rec.hscanc := Convert_Boolean_With_Missing( Get( slices, 132 ));
            rec.hscntc := Convert_Boolean_With_Missing( Get( slices, 133 ));
            rec.hscand := Convert_Boolean_With_Missing( Get( slices, 134 ));
            rec.hscntd := Convert_Boolean_With_Missing( Get( slices, 135 ));
            rec.hscane := Convert_Boolean_With_Missing( Get( slices, 136 ));
            rec.hscnte := Convert_Boolean_With_Missing( Get( slices, 137 ));
            rec.hscanf := Convert_Boolean_With_Missing( Get( slices, 138 ));
            rec.hscntf := Convert_Boolean_With_Missing( Get( slices, 139 ));
            rec.xpfood := Convert( slices, 140, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ncars := Convert_Ncars_Type( Get( slices, 141 ));
            rec.carown := Convert_Carown_Type( Get( slices, 142 ));
            rec.ivh1 := Convert( slices, 143, ( -9, -8, -7, -1 ) );
            rec.ivh2 := Convert( slices, 144, ( -9, -8, -7 ) );
            rec.ivh3 := Convert( slices, 145, ( -9, -8, -7 ) );
            rec.hhfoih := Convert( slices, 146, ( -9, -8, -7 ) );
            rec.hhfoim := Convert( slices, 147, ( -9, -8, -7 ) );
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 148 ));
            rec.hhorig := Convert_Hhorig_Type( Get( slices, 149 ));
            rec.hhdc := Convert_Hhdc_Type( Get( slices, 150 ));
            rec.xhwght := Convert( slices, 151, ( -9.0, -8.0 ) );
            rec.hhsize := Convert( slices, 152, ( -9, -8 ) );
            rec.hhtype := Convert_Hhtype_Type( Get( slices, 153 ));
            rec.region := Convert_Region_Type( Get( slices, 154 ));
            rec.nch02 := Convert( slices, 155, ( -9, -8 ) );
            rec.nch34 := Convert( slices, 156, ( -9, -8 ) );
            rec.nch511 := Convert( slices, 157, ( -9, -8 ) );
            rec.nch1215 := Convert( slices, 158, ( -9, -8 ) );
            rec.nch1618 := Convert( slices, 159, ( -9, -8 ) );
            rec.nkids := Convert( slices, 160, ( -9, -8 ) );
            rec.nwed := Convert( slices, 161, ( -9, -8 ) );
            rec.npens := Convert( slices, 162, ( -9, -8 ) );
            rec.na75pl := Convert( slices, 163, ( -9, -8 ) );
            rec.agechy := Convert( slices, 164, ( -9, -8 ) );
            rec.ncouple := Convert( slices, 165, ( -9, -8 ) );
            rec.nonepar := Convert( slices, 166, ( -9, -8 ) );
            rec.nemp := Convert( slices, 167, ( -9, -8 ) );
            rec.nwage := Convert( slices, 168, ( -9, -8 ) );
            rec.tenure := Convert_Tenure_Type( Get( slices, 169 ));
            rec.xphsn := Convert( slices, 170, ( -9.0, -8.0, -7.0 ) );
            rec.xphsg := Convert( slices, 171, ( -9.0, -8.0, -7.0 ) );
            rec.fieqfcb := Convert( slices, 172, ( -9.0, -8.0 ) );
            rec.fieqfca := Convert( slices, 173, ( -9.0, -8.0 ) );
            rec.fihhyr := Convert( slices, 174, ( -9.0, -8.0, -7.0 ) );
            rec.fihhmn := Convert( slices, 175, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyl := Convert( slices, 176, ( -9.0, -8.0, -7.0 ) );
            rec.fihhynl := Convert( slices, 177, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyp := Convert( slices, 178, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyb := Convert( slices, 179, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyt := Convert( slices, 180, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyi := Convert( slices, 181, ( -9.0, -8.0, -7.0 ) );
            rec.fihhml := Convert( slices, 182, (  1 .. 0 => -9.0 ) );
            rec.fihhmnl := Convert( slices, 183, (  1 .. 0 => -9.0 ) );
            rec.fihhmp := Convert( slices, 184, (  1 .. 0 => -9.0 ) );
            rec.fihhmb := Convert( slices, 185, (  1 .. 0 => -9.0 ) );
            rec.fihhmt := Convert( slices, 186, (  1 .. 0 => -9.0 ) );
            rec.fihhmi := Convert( slices, 187, (  1 .. 0 => -9.0 ) );
            rec.hhmove := Convert_Hhmove_Type( Get( slices, 188 ));
            rec.mgnewi := Convert( slices, 189, ( -9, -8, -7, -2, -1 ) );
            rec.xpmgi := Convert( slices, 190, ( -9, -8, -7, -2, -1 ) );
            rec.hsvali := Convert( slices, 191, ( -9, -8, -7, -2, -1 ) );
            rec.renti := Convert( slices, 192, ( -9, -8, -7, -4, -3, -2, -1 ) );
            rec.rentgi := Convert( slices, 193, ( -9, -8, -7, -2, -1 ) );
            rec.xphsni := Convert_Jhgpayi_Type( Get( slices, 194 ));
            rec.xphsgi := Convert_Jhgpayi_Type( Get( slices, 195 ));
            rec.fihhmni := Convert_Fihhmni_Type( Get( slices, 196 ));
            rec.fihhmli := Convert_Fihhmbi_Type( Get( slices, 197 ));
            rec.fihmnli := Convert_Fihhmbi_Type( Get( slices, 198 ));
            rec.fihhmpi := Convert_Fihhmbi_Type( Get( slices, 199 ));
            rec.fihhmbi := Convert_Fihhmbi_Type( Get( slices, 200 ));
            rec.fihhmti := Convert_Fihhmbi_Type( Get( slices, 201 ));
            rec.fihhmii := Convert_Fihhmbi_Type( Get( slices, 202 ));
            rec.fihhyri := Convert_Fihhmbi_Type( Get( slices, 203 ));
            rec.fihhyli := Convert_Fihhmbi_Type( Get( slices, 204 ));
            rec.fihhyni := Convert_Fihhmbi_Type( Get( slices, 205 ));
            rec.fihhypi := Convert_Fihhmbi_Type( Get( slices, 206 ));
            rec.fihhybi := Convert_Fihhmbi_Type( Get( slices, 207 ));
            rec.fihhyti := Convert_Fihhmbi_Type( Get( slices, 208 ));
            rec.fihhyii := Convert_Fihhmbi_Type( Get( slices, 209 ));
            rec.fihhsel := Convert_Fihhsel_Type( Get( slices, 210 ));
            rec.xhwghte := Convert( slices, 211 );
            rec.region2 := Convert_Region2_Type( Get( slices, 212 ));
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Hhresp_component ).start_pos = 0 ) then
               index.pointers( Hhresp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Hhresp_component ).counter := index.pointers( Hhresp_component ).counter + 1;
            Put_Index( index_map, index );
            Hhresp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Hhresp_IO.Close( bin_file );
   end Create_Hhresp_Wave_H;




   procedure Create_Hhsamp_Wave_H( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Hhsamp_IO.File_Type;
      rec         : Hhsamp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Hhsamp_IO.Create (bin_file, Hhsamp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.fid := Convert( slices, 2 );
            rec.ivnadd := Convert( slices, 3, ( -9.0, -8.0 ) );
            rec.ivia := Convert_Ivia_Type( Get( slices, 4 ));
--             rec.ivid := Convert( slices, 5 );
            rec.ivlnc := Convert( slices, 6, ( -9, -1 ) );
            rec.ivtnc := Convert( slices, 7, ( -9, -8, -1 ) );
            rec.iviam := Convert_Iviam_Type( Get( slices, 8 ));
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 9 ));
            rec.ivosmrh := Convert( slices, 10, ( -9, -8, -1 ) );
            rec.ivnsmrh := Convert( slices, 11, ( -9, -8, -1 ) );
            rec.ivrrefh := Convert_Ivrrefh_Type( Get( slices, 12 ));
            rec.ivisst := Convert_Ivisst_Type( Get( slices, 13 ));
            rec.ivconv := Convert_Ivconv_Type( Get( slices, 14 ));
            rec.ivreis := Convert_Ivreis_Type( Get( slices, 15 ));
            rec.hhdc := Convert_Hhdc_Type( Get( slices, 16 ));
            rec.hhorig := Convert_Hhorig_Type( Get( slices, 17 ));
            rec.xhwght := Convert( slices, 18, ( -9.0, -8.0, -1.0 ) );
            rec.region := Convert_Region_Type( Get( slices, 19 ));
            rec.hhmove := Convert_Hhmove_Type( Get( slices, 20 ));
            rec.ahid := Convert( slices, 21 );
            rec.xhwghte := Convert( slices, 22 );
            rec.strata := Convert( slices, 23, ( -9, -8, -1 ) );
            rec.psu := Convert( slices, 24, ( -9, -8, -1 ) );
            rec.region2 := Convert_Region2_Type( Get( slices, 25 ));
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Hhsamp_component ).start_pos = 0 ) then
               index.pointers( Hhsamp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Hhsamp_component ).counter := index.pointers( Hhsamp_component ).counter + 1;
            Put_Index( index_map, index );
            Hhsamp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Hhsamp_IO.Close( bin_file );
   end Create_Hhsamp_Wave_H;




   procedure Create_Income_Wave_H( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Income_IO.File_Type;
      rec         : Income_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Income_IO.Create (bin_file, Income_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.pno := Convert( slices, 1 );
            rec.ficode := Convert_Ficode_Type( Get( slices, 2 ));
            rec.nfr := Convert( slices, 3, (  1 .. 0 => -9 ) );
            rec.frall := Convert_Frall_Type( Get( slices, 4 ));
            rec.fr01 := Convert_Cd1own_Type( Get( slices, 5 ));
            rec.fr02 := Convert_Cd1own_Type( Get( slices, 6 ));
            rec.fr03 := Convert_Cd1own_Type( Get( slices, 7 ));
            rec.fr04 := Convert( slices, 8, ( -9, -8, -2, -1 ) );
            rec.fr05 := Convert_Cd1own_Type( Get( slices, 9 ));
            rec.fr06 := Convert_Cd1own_Type( Get( slices, 10 ));
            rec.fr07 := Convert_Cd1own_Type( Get( slices, 11 ));
            rec.fr08 := Convert_Cd1own_Type( Get( slices, 12 ));
            rec.fr09 := Convert_Cd1own_Type( Get( slices, 13 ));
            rec.fr10 := Convert_Cd1own_Type( Get( slices, 14 ));
            rec.fr11 := Convert_Cd1own_Type( Get( slices, 15 ));
            rec.fr12 := Convert_Cd1own_Type( Get( slices, 16 ));
            rec.fr13 := Convert_Cd1own_Type( Get( slices, 17 ));
            rec.fr14 := Convert_Cd1own_Type( Get( slices, 18 ));
            rec.fr15 := Convert_Cd1own_Type( Get( slices, 19 ));
            rec.fr16 := Convert_Cd1own_Type( Get( slices, 20 ));
            rec.fr17 := Convert_Cd1own_Type( Get( slices, 21 ));
            rec.frnow := Convert_Frnow_Type( Get( slices, 22 ));
            rec.frval := Convert( slices, 23, ( -9.0, -8.0, -3.0, -2.0, -1.0 ) );
            rec.frw := Convert( slices, 24, ( -9.0, -8.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.frjt := Convert_Frjt_Type( Get( slices, 25 ));
            rec.frjtpn := Convert( slices, 26, ( -9, -8, -2, -1 ) );
            rec.hid := Convert( slices, 27 );
            rec.fiseq := Convert( slices, 28 );
            rec.fim09l := Convert( slices, 29, ( -9.0, -8.0, -3.0 ) );
            rec.fim10l := Convert( slices, 30, ( -9.0, -8.0, -3.0 ) );
            rec.fim11l := Convert( slices, 31, ( -9.0, -8.0, -3.0 ) );
            rec.fim12l := Convert( slices, 32, ( -9.0, -8.0, -3.0 ) );
            rec.fim01t := Convert( slices, 33, ( -9.0, -8.0, -3.0 ) );
            rec.fim02t := Convert( slices, 34, ( -9.0, -8.0, -3.0 ) );
            rec.fim03t := Convert( slices, 35, ( -9.0, -8.0, -3.0 ) );
            rec.fim04t := Convert( slices, 36, ( -9.0, -8.0, -3.0 ) );
            rec.fim05t := Convert( slices, 37, ( -9.0, -8.0, -3.0 ) );
            rec.fim06t := Convert( slices, 38, ( -9.0, -8.0, -3.0 ) );
            rec.fim07t := Convert( slices, 39, ( -9.0, -8.0, -3.0 ) );
            rec.fim08t := Convert( slices, 40, ( -9.0, -8.0, -3.0 ) );
            rec.fim09t := Convert( slices, 41, ( -9.0, -8.0, -3.0 ) );
            rec.fim10t := Convert( slices, 42, ( -9.0, -8.0, -3.0 ) );
            rec.fim11t := Convert( slices, 43, ( -9.0, -8.0, -3.0 ) );
            rec.fim12t := Convert( slices, 44, ( -9.0, -8.0, -3.0 ) );
            rec.fim01n := Convert( slices, 45, ( -9.0, -8.0, -3.0 ) );
            rec.frjtvf := Convert_Frjtvf_Type( Get( slices, 46 ));
            rec.frvali := Convert( slices, 47, ( -9, -8, -3, -2, -1 ) );
            rec.pid := Convert( slices, 48 );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Income_component ).start_pos = 0 ) then
               index.pointers( Income_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Income_component ).counter := index.pointers( Income_component ).counter + 1;
            Put_Index( index_map, index );
            Income_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Income_IO.Close( bin_file );
   end Create_Income_Wave_H;




   procedure Create_Indall_Wave_H( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Indall_IO.File_Type;
      rec         : Indall_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Indall_IO.Create (bin_file, Indall_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.pid := Convert( slices, 3 );
            rec.iviow7 := Convert_Iviow4_Type( Get( slices, 4 ));
            rec.ivstat1 := Convert_Ivstat1_Type( Get( slices, 5 ));
            rec.hhmem := Convert_Hhmem_Type( Get( slices, 6 ));
            rec.newhy := Convert_Newhy_Type( Get( slices, 7 ));
            rec.nemnjn := Convert_Nemnjn_Type( Get( slices, 8 ));
            rec.neyrjn4 := Convert( slices, 9, ( -9, -8, -7, -2, -1 ) );
            rec.ivfio := Convert_Ivfio_Type( Get( slices, 10 ));
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 11 ));
            rec.iodc := Convert_Iodc_Type( Get( slices, 12 ));
            rec.memorig := Convert_Memorig_Type( Get( slices, 13 ));
            rec.hgr2r := Convert_Hgr2r_Type( Get( slices, 14 ));
            rec.hgsex := Convert_Hgsex_Type( Get( slices, 15 ));
            rec.hgbm := Convert_Hgbm_Type( Get( slices, 16 ));
            rec.hgby := Convert( slices, 17, ( -9, -8, -2, -1 ) );
            rec.mastat := Convert_Mastat_Type( Get( slices, 18 ));
            rec.hgspn := Convert( slices, 19, ( -9, -8, -2, -1 ) );
            rec.hgemp := Convert_Hgemp_Type( Get( slices, 20 ));
            rec.hgfno := Convert( slices, 21, ( -9, -8, -2, -1 ) );
            rec.hgmno := Convert( slices, 22, ( -9, -8, -2, -1 ) );
            rec.hgra := Convert( slices, 23, ( -9, -8, -2, -1 ) );
            rec.age := Convert( slices, 24, ( -9, -8, -2, -1 ) );
            rec.age12 := Convert( slices, 25, ( -9, -8, -2, -1 ) );
            rec.butype := Convert_Butype_Type( Get( slices, 26 ));
            rec.buno := Convert( slices, 27, ( -9, -8 ) );
            rec.nchild := Convert( slices, 28, ( -9, -8 ) );
            rec.depchl := Convert_Depchl_Type( Get( slices, 29 ));
            rec.hoh := Convert_Hoh_Type( Get( slices, 30 ));
            rec.rach16 := Convert_Hhch12_Type( Get( slices, 31 ));
            rec.agei := Convert_Agei_Type( Get( slices, 32 ));
            rec.lrwght := Convert( slices, 33, ( -9.0, -8.0 ) );
            rec.lewght := Convert( slices, 34, ( -9.0, -8.0 ) );
            rec.xrwght := Convert( slices, 35, ( -9.0, -8.0 ) );
            rec.xewght := Convert( slices, 36, ( -9.0, -8.0 ) );
            rec.movest := Convert_Movest_Type( Get( slices, 37 ));
            rec.sampst := Convert_Sampst_Type( Get( slices, 38 ));
            rec.xrwghte := Convert( slices, 39 );
            rec.xewghte := Convert( slices, 40 );
            rec.sppid := Convert( slices, 41 );
            rec.fpid := Convert( slices, 42 );
            rec.mpid := Convert( slices, 43 );
            rec.rapid := Convert( slices, 44 );
            rec.distmov := Convert( slices, 45, ( -9.0, -8.0 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Indall_component ).start_pos = 0 ) then
               index.pointers( Indall_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Indall_component ).counter := index.pointers( Indall_component ).counter + 1;
            Put_Index( index_map, index );
            Indall_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Indall_IO.Close( bin_file );
   end Create_Indall_Wave_H;




   procedure Create_Indresp_Wave_H( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Indresp_IO.File_Type;
      rec         : Indresp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Indresp_IO.Create (bin_file, Indresp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.doid := Convert( slices, 3, ( -9, -7 ) );
            rec.doim := Convert_Doim_Type( Get( slices, 4 ));
            rec.doiy4 := Convert( slices, 5, ( -9, -8, -7, -2, -1 ) );
            rec.ivsoih := Convert( slices, 6, ( -9, -8 ) );
            rec.ivsoim := Convert( slices, 7, ( -9, -8 ) );
            rec.ivlyr := Convert( slices, 8, ( -9, -8, -7 ) );
            rec.ivstat2 := Convert_Ivstat2_Type( Get( slices, 9 ));
            rec.lknbrd := Convert_Aidpl1_Type( Get( slices, 10 ));
            rec.lkmove := Convert_Lkmove_Type( Get( slices, 11 ));
            rec.lkmovy := Convert_Lkmovy_Type( Get( slices, 12 ));
            rec.xpmove := Convert( slices, 13, ( -9, -8, -7, -2, -1 ) );
            rec.plnew := Convert( slices, 14, ( -9, -8, -7, -2, -1 ) );
            rec.plnowm := Convert_Jbbgm1_Type( Get( slices, 15 ));
            rec.plnowy4 := Convert( slices, 16, ( -9, -8, -7, -2, -1 ) );
            rec.movjb := Convert_Aidpl1_Type( Get( slices, 17 ));
            rec.movjba := Convert_Movjba_Type( Get( slices, 18 ));
            rec.movjbb := Convert_Movjba_Type( Get( slices, 19 ));
            rec.movjbc := Convert_Movjba_Type( Get( slices, 20 ));
            rec.movjbd := Convert_Movjba_Type( Get( slices, 21 ));
            rec.movjbe := Convert_Movjba_Type( Get( slices, 22 ));
            rec.movjbf := Convert_Movjba_Type( Get( slices, 23 ));
            rec.movjbg := Convert_Movjba_Type( Get( slices, 24 ));
            rec.movjbh := Convert_Movjba_Type( Get( slices, 25 ));
            rec.movjbi := Convert_Movjba_Type( Get( slices, 26 ));
            rec.movy1 := Convert_Movy1_Type( Get( slices, 27 ));
            rec.movy2 := Convert_Movy2_Type( Get( slices, 28 ));
            rec.dobm := Convert_Cjsem_Type( Get( slices, 29 ));
            rec.doby := Convert( slices, 30, ( -9, -8, -7, -2, -1 ) );
            rec.sex := Convert_Sex_Type( Get( slices, 31 ));
            rec.jbstat := Convert_Jbstat_Type( Get( slices, 32 ));
            rec.edlyr := Convert_Aidpl1_Type( Get( slices, 33 ));
            rec.edtype1 := Convert_Edtype1_Type( Get( slices, 34 ));
            rec.edblyr1 := Convert_Boolean_With_Missing( Get( slices, 35 ));
            rec.edbgm1 := Convert_Edbgm1_Type( Get( slices, 36 ));
            rec.edbgy1 := Convert( slices, 37, ( -9, -8, -7, -2, -1 ) );
            rec.edenm1 := Convert_Edbgm1_Type( Get( slices, 38 ));
            rec.edeny1 := Convert( slices, 39, ( -9, -8, -7, -2, -1 ) );
            rec.edenne1 := Convert_Edenne1_Type( Get( slices, 40 ));
            rec.edfeea1 := Convert_Yes_Or_Missing_Type( Get( slices, 41 ));
            rec.edfeeb1 := Convert_Yes_Or_Missing_Type( Get( slices, 42 ));
            rec.edfeec1 := Convert_Yes_Or_Missing_Type( Get( slices, 43 ));
            rec.edfeed1 := Convert_Yes_Or_Missing_Type( Get( slices, 44 ));
            rec.edfeee1 := Convert_Yes_Or_Missing_Type( Get( slices, 45 ));
            rec.edfeef1 := Convert_Yes_Or_Missing_Type( Get( slices, 46 ));
            rec.edfeeg1 := Convert_Yes_Or_Missing_Type( Get( slices, 47 ));
            rec.edqual1 := Convert_Edqual1_Type( Get( slices, 48 ));
            rec.edqnn1 := Convert( slices, 49, ( -9, -8, -7, -2, -1 ) );
            rec.edqla1 := Convert_Yes_Or_Missing_Type( Get( slices, 50 ));
            rec.edqlb1 := Convert_Yes_Or_Missing_Type( Get( slices, 51 ));
            rec.edqlc1 := Convert_Yes_Or_Missing_Type( Get( slices, 52 ));
            rec.edqld1 := Convert_Yes_Or_Missing_Type( Get( slices, 53 ));
            rec.edqle1 := Convert_Yes_Or_Missing_Type( Get( slices, 54 ));
            rec.edqlf1 := Convert_Yes_Or_Missing_Type( Get( slices, 55 ));
            rec.edqlg1 := Convert_Yes_Or_Missing_Type( Get( slices, 56 ));
            rec.edqlh1 := Convert_Yes_Or_Missing_Type( Get( slices, 57 ));
            rec.edqli1 := Convert_Yes_Or_Missing_Type( Get( slices, 58 ));
            rec.edqlj1 := Convert( slices, 59, ( -9, -8, -7 ) );
            rec.edqlan1 := Convert( slices, 60, ( -9, -8, -7, -2, -1 ) );
            rec.edqlbn1 := Convert( slices, 61, ( -9, -8, -7, -2, -1 ) );
            rec.edqlcn1 := Convert( slices, 62, ( -9, -8, -7, -2, -1 ) );
            rec.edqldn1 := Convert( slices, 63, ( -9, -8, -7, -2, -1 ) );
            rec.edqlen1 := Convert( slices, 64, ( -9, -8, -7, -2, -1 ) );
            rec.edqlfn1 := Convert( slices, 65, ( -9, -8, -7, -2, -1 ) );
            rec.edqlgn1 := Convert( slices, 66, ( -9, -8, -7, -2, -1 ) );
            rec.edqlhn1 := Convert( slices, 67, ( -9, -8, -7, -2, -1 ) );
            rec.edqlin1 := Convert( slices, 68, ( -9, -8, -7, -2, -1 ) );
            rec.edqljn1 := Convert( slices, 69, ( -9, -8, -7, -2, -1 ) );
            rec.edoqln1 := Convert( slices, 70, ( -9, -8, -7, -2, -1 ) );
            rec.edoql1 := Convert_Edoql1_Type( Get( slices, 71 ));
            rec.edmore1 := Convert_Boolean_With_Missing( Get( slices, 72 ));
            rec.edtype2 := Convert_Edtype1_Type( Get( slices, 73 ));
            rec.edblyr2 := Convert_Boolean_With_Missing( Get( slices, 74 ));
            rec.edbgm2 := Convert_Edbgm1_Type( Get( slices, 75 ));
            rec.edbgy2 := Convert( slices, 76, ( -9, -8, -7, -2, -1 ) );
            rec.edenm2 := Convert_Edbgm1_Type( Get( slices, 77 ));
            rec.edeny2 := Convert( slices, 78, ( -9, -8, -7, -2, -1 ) );
            rec.edenne2 := Convert_Edenne2_Type( Get( slices, 79 ));
            rec.edfeea2 := Convert_Yes_Or_Missing_Type( Get( slices, 80 ));
            rec.edfeeb2 := Convert_Yes_Or_Missing_Type( Get( slices, 81 ));
            rec.edfeec2 := Convert_Yes_Or_Missing_Type( Get( slices, 82 ));
            rec.edfeed2 := Convert_Yes_Or_Missing_Type( Get( slices, 83 ));
            rec.edfeee2 := Convert_Yes_Or_Missing_Type( Get( slices, 84 ));
            rec.edfeef2 := Convert_Yes_Or_Missing_Type( Get( slices, 85 ));
            rec.edfeeg2 := Convert_Yes_Or_Missing_Type( Get( slices, 86 ));
            rec.edqual2 := Convert_Edqual1_Type( Get( slices, 87 ));
            rec.edqnn2 := Convert( slices, 88, ( -9, -8, -7, -2, -1 ) );
            rec.edqla2 := Convert_Yes_Or_Missing_Type( Get( slices, 89 ));
            rec.edqlb2 := Convert_Yes_Or_Missing_Type( Get( slices, 90 ));
            rec.edqlc2 := Convert_Yes_Or_Missing_Type( Get( slices, 91 ));
            rec.edqld2 := Convert_Yes_Or_Missing_Type( Get( slices, 92 ));
            rec.edqle2 := Convert_Yes_Or_Missing_Type( Get( slices, 93 ));
            rec.edqlf2 := Convert_Yes_Or_Missing_Type( Get( slices, 94 ));
            rec.edqlg2 := Convert_Yes_Or_Missing_Type( Get( slices, 95 ));
            rec.edqlh2 := Convert_Yes_Or_Missing_Type( Get( slices, 96 ));
            rec.edqli2 := Convert_Yes_Or_Missing_Type( Get( slices, 97 ));
            rec.edqlj2 := Convert( slices, 98, ( -9, -8, -7 ) );
            rec.edqlan2 := Convert( slices, 99, ( -9, -8, -7, -2, -1 ) );
            rec.edqlbn2 := Convert( slices, 100, ( -9, -8, -7, -2, -1 ) );
            rec.edqlcn2 := Convert( slices, 101, ( -9, -8, -7, -2, -1 ) );
            rec.edqldn2 := Convert( slices, 102, ( -9, -8, -7, -2, -1 ) );
            rec.edqlen2 := Convert( slices, 103, ( -9, -8, -7, -2, -1 ) );
            rec.edqlfn2 := Convert( slices, 104, ( -9, -8, -7, -2, -1 ) );
            rec.edqlgn2 := Convert( slices, 105, ( -9, -8, -7, -2, -1 ) );
            rec.edqlhn2 := Convert( slices, 106, ( -9, -8, -7, -2, -1 ) );
            rec.edqlin2 := Convert( slices, 107, ( -9, -8, -7, -2, -1 ) );
            rec.edqljn2 := Convert( slices, 108, ( -9, -8, -7, -2, -1 ) );
            rec.edoqln2 := Convert( slices, 109, ( -9, -8, -7, -2, -1 ) );
            rec.edoql2 := Convert_Edoql1_Type( Get( slices, 110 ));
            rec.edmore2 := Convert_Boolean_With_Missing( Get( slices, 111 ));
            rec.mlstat := Convert_Mlstat_Type( Get( slices, 112 ));
            rec.mlchng := Convert_Bscon_Type( Get( slices, 113 ));
            rec.mlchm := Convert_Mlchm_Type( Get( slices, 114 ));
            rec.mlchy4 := Convert( slices, 115, ( -9, -8, -7, -2, -1 ) );
            rec.plbornd := Convert_Plbornd_Type( Get( slices, 116 ));
            rec.plbornc := Convert_Plbornc_Type( Get( slices, 117 ));
            rec.yr2uk4 := Convert( slices, 118, ( -9, -8, -7, -2, -1 ) );
            rec.citzn1 := Convert( slices, 119, ( -9, -8, -7, -2, -1 ) );
            rec.citzn2 := Convert_Citzn2_Type( Get( slices, 120 ));
            rec.race := Convert_Race_Type( Get( slices, 121 ));
            rec.paju := Convert_Paju_Type( Get( slices, 122 ));
            rec.pasoc := Convert( slices, 123, ( -9, -8, -7, -2, -1 ) );
            rec.pasemp := Convert_J2semp_Type( Get( slices, 124 ));
            rec.paboss := Convert_Maboss_Type( Get( slices, 125 ));
            rec.pamngr := Convert_Mamngr_Type( Get( slices, 126 ));
            rec.maju := Convert_Maju_Type( Get( slices, 127 ));
            rec.masoc := Convert( slices, 128, ( -9, -8, -7, -2, -1 ) );
            rec.masemp := Convert_J2semp_Type( Get( slices, 129 ));
            rec.maboss := Convert_Maboss_Type( Get( slices, 130 ));
            rec.mamngr := Convert_Mamngr_Type( Get( slices, 131 ));
            rec.j1soc := Convert( slices, 132, ( -9, -8, -7, -2, -1 ) );
            rec.j1none := Convert_J1none_Type( Get( slices, 133 ));
            rec.j1semp := Convert_J1semp_Type( Get( slices, 134 ));
            rec.j1boss := Convert_J1boss_Type( Get( slices, 135 ));
            rec.j1mngr := Convert_J1mngr_Type( Get( slices, 136 ));
            rec.lcoh := Convert_Aidpl1_Type( Get( slices, 137 ));
            rec.coh1bm := Convert_Ch1bm_Type( Get( slices, 138 ));
            rec.coh1by := Convert( slices, 139, ( -9, -8, -7, -2, -1 ) );
            rec.coh1mr := Convert_Coh1mr_Type( Get( slices, 140 ));
            rec.coh1em := Convert_Ch1bm_Type( Get( slices, 141 ));
            rec.coh1ey := Convert( slices, 142, ( -9, -8, -7, -2, -1 ) );
            rec.nmar := Convert_Nmar_Type( Get( slices, 143 ));
            rec.lmar1m := Convert_Ch1bm_Type( Get( slices, 144 ));
            rec.lmar1y := Convert( slices, 145, ( -9, -8, -7, -2, -1 ) );
            rec.lprnt := Convert_Lprnt_Type( Get( slices, 146 ));
            rec.lnprnt := Convert( slices, 147, ( -9, -8, -7, -2, -1 ) );
            rec.ch1bm := Convert_Ch1bm_Type( Get( slices, 148 ));
            rec.ch1by := Convert( slices, 149, ( -9, -8, -7, -2, -1 ) );
            rec.school := Convert_School_Type( Get( slices, 150 ));
            rec.scend := Convert( slices, 151, ( -9, -8, -7, -2, -1 ) );
            rec.sctype := Convert_Sctype_Type( Get( slices, 152 ));
            rec.scnow := Convert_Cjsck2_Type( Get( slices, 153 ));
            rec.fetype := Convert_Fetype_Type( Get( slices, 154 ));
            rec.fenow := Convert_Fenow_Type( Get( slices, 155 ));
            rec.feend := Convert( slices, 156, ( -9, -8, -7, -2, -1 ) );
            rec.qfhas := Convert_Bscon_Type( Get( slices, 157 ));
            rec.qfa := Convert_Qfa_Type( Get( slices, 158 ));
            rec.qfb := Convert_Qfb_Type( Get( slices, 159 ));
            rec.qfc := Convert_Qfc_Type( Get( slices, 160 ));
            rec.qfd := Convert_Qfd_Type( Get( slices, 161 ));
            rec.qfe := Convert_Qfe_Type( Get( slices, 162 ));
            rec.qff := Convert_Qff_Type( Get( slices, 163 ));
            rec.qfg := Convert_Qfg_Type( Get( slices, 164 ));
            rec.qfh := Convert_Qfh_Type( Get( slices, 165 ));
            rec.qfi := Convert_Qfi_Type( Get( slices, 166 ));
            rec.qfj := Convert_Qfj_Type( Get( slices, 167 ));
            rec.qfk := Convert_Qfk_Type( Get( slices, 168 ));
            rec.qfl := Convert_Qfl_Type( Get( slices, 169 ));
            rec.qfm := Convert_Qfm_Type( Get( slices, 170 ));
            rec.qfn := Convert_Qfn_Type( Get( slices, 171 ));
            rec.qfed := Convert_Bscon_Type( Get( slices, 172 ));
            rec.qfeda := Convert_Qfeda_Type( Get( slices, 173 ));
            rec.nqfeda := Convert( slices, 174, ( -9, -8, -7, -2, -1 ) );
            rec.qfedb := Convert_Qfedb_Type( Get( slices, 175 ));
            rec.nqfedb := Convert( slices, 176, ( -9, -8, -7, -2, -1 ) );
            rec.qfedc := Convert_Qfedc_Type( Get( slices, 177 ));
            rec.nqfedc := Convert( slices, 178, ( -9, -8, -7, -2, -1 ) );
            rec.qfedd := Convert_Qfedd_Type( Get( slices, 179 ));
            rec.nqfedd := Convert( slices, 180, ( -9, -8, -7, -2, -1 ) );
            rec.qfede := Convert_Qfede_Type( Get( slices, 181 ));
            rec.nqfede := Convert( slices, 182, ( -9, -8, -7, -2, -1 ) );
            rec.qfedf := Convert_Qfedf_Type( Get( slices, 183 ));
            rec.nqfedf := Convert( slices, 184, ( -9, -8, -7, -2, -1 ) );
            rec.qfedg := Convert_Qfedg_Type( Get( slices, 185 ));
            rec.nqfedg := Convert( slices, 186, ( -9, -8, -7, -2, -1 ) );
            rec.qfedh := Convert_Qfedh_Type( Get( slices, 187 ));
            rec.nqfedh := Convert( slices, 188, ( -9, -8, -7, -2, -1 ) );
            rec.qfedi := Convert_Qfedi_Type( Get( slices, 189 ));
            rec.nqfedi := Convert( slices, 190, ( -9, -8, -7, -2, -1 ) );
            rec.qfedj := Convert_Qfedj_Type( Get( slices, 191 ));
            rec.nqfedj := Convert( slices, 192, ( -9, -8, -7, -2, -1 ) );
            rec.qfedt := Convert_Qfedt_Type( Get( slices, 193 ));
            rec.nqfedt := Convert( slices, 194, ( -9, -8, -7, -2, -1 ) );
            rec.qfedk := Convert_Qfedk_Type( Get( slices, 195 ));
            rec.nqfedk := Convert( slices, 196, ( -9, -8, -7, -2, -1 ) );
            rec.qfedl := Convert_Qfedl_Type( Get( slices, 197 ));
            rec.nqfedl := Convert( slices, 198, ( -9, -8, -7, -2, -1 ) );
            rec.qfedm := Convert_Qfedm_Type( Get( slices, 199 ));
            rec.nqfedm := Convert( slices, 200, ( -9, -8, -7, -2, -1 ) );
            rec.qfedn := Convert_Qfedn_Type( Get( slices, 201 ));
            rec.nqfedn := Convert( slices, 202, ( -9, -8, -7, -2, -1 ) );
            rec.qfedo := Convert_Qfedo_Type( Get( slices, 203 ));
            rec.nqfedo := Convert( slices, 204, ( -9, -8, -7, -2, -1 ) );
            rec.qfedp := Convert( slices, 205, ( -9, -8, -7 ) );
            rec.nqfedp := Convert( slices, 206, ( -9, -8, -7, -2, -1 ) );
            rec.qfedq := Convert_Qfedq_Type( Get( slices, 207 ));
            rec.nqfedq := Convert( slices, 208, ( -9, -8, -7, -2, -1 ) );
            rec.qfedr := Convert_Qfedr_Type( Get( slices, 209 ));
            rec.nqfedr := Convert( slices, 210, ( -9, -8, -7, -2, -1 ) );
            rec.qfeds := Convert_Hlprbm_Type( Get( slices, 211 ));
            rec.nqfeds := Convert( slices, 212, ( -9, -8, -7, -2, -1 ) );
            rec.train := Convert_Boolean_With_Missing( Get( slices, 213 ));
            rec.ntrain := Convert( slices, 214, ( -9, -8, -7, -2, -1 ) );
            rec.trplce1 := Convert_Trplce1_Type( Get( slices, 215 ));
            rec.trwhya1 := Convert_Boolean_With_Missing( Get( slices, 216 ));
            rec.trwhyb1 := Convert_Boolean_With_Missing( Get( slices, 217 ));
            rec.trwhyc1 := Convert_Boolean_With_Missing( Get( slices, 218 ));
            rec.trwhyd1 := Convert_Boolean_With_Missing( Get( slices, 219 ));
            rec.trwhye1 := Convert_Boolean_With_Missing( Get( slices, 220 ));
            rec.trq1 := Convert( slices, 221, ( -9, -8, -7 ) );
            rec.tru1 := Convert_Tru1_Type( Get( slices, 222 ));
            rec.trfeea1 := Convert_Nisjsa_Type( Get( slices, 223 ));
            rec.trfeeb1 := Convert_Yes_Or_Missing_Type( Get( slices, 224 ));
            rec.trfeec1 := Convert_Yes_Or_Missing_Type( Get( slices, 225 ));
            rec.trfeee1 := Convert_Yes_Or_Missing_Type( Get( slices, 226 ));
            rec.trfeef1 := Convert_Yes_Or_Missing_Type( Get( slices, 227 ));
            rec.trfeeg1 := Convert_Yes_Or_Missing_Type( Get( slices, 228 ));
            rec.trqlxp1 := Convert_Trqlxp1_Type( Get( slices, 229 ));
            rec.trqlac1 := Convert_Trqlac1_Type( Get( slices, 230 ));
            rec.trqlnn1 := Convert( slices, 231, ( -9, -8, -7, -2, -1 ) );
            rec.trqla1 := Convert_Yes_Or_Missing_Type( Get( slices, 232 ));
            rec.trqlb1 := Convert_Yes_Or_Missing_Type( Get( slices, 233 ));
            rec.trqlc1 := Convert_Yes_Or_Missing_Type( Get( slices, 234 ));
            rec.trqld1 := Convert_Yes_Or_Missing_Type( Get( slices, 235 ));
            rec.trqle1 := Convert_Yes_Or_Missing_Type( Get( slices, 236 ));
            rec.trqlf1 := Convert_Yes_Or_Missing_Type( Get( slices, 237 ));
            rec.trqlg1 := Convert_Yes_Or_Missing_Type( Get( slices, 238 ));
            rec.trqlh1 := Convert_Yes_Or_Missing_Type( Get( slices, 239 ));
            rec.trqli1 := Convert_Yes_Or_Missing_Type( Get( slices, 240 ));
            rec.trqlj1 := Convert( slices, 241, ( -9, -8, -7 ) );
            rec.trqlan1 := Convert( slices, 242, ( -9, -8, -7, -2, -1 ) );
            rec.trqlbn1 := Convert( slices, 243, ( -9, -8, -7, -2, -1 ) );
            rec.trqlcn1 := Convert( slices, 244, ( -9, -8, -7, -2, -1 ) );
            rec.trqldn1 := Convert( slices, 245, ( -9, -8, -7, -2, -1 ) );
            rec.trqlen1 := Convert( slices, 246, ( -9, -8, -7, -2, -1 ) );
            rec.trqlfn1 := Convert( slices, 247, ( -9, -8, -7, -2, -1 ) );
            rec.trqlgn1 := Convert( slices, 248, ( -9, -8, -7, -2, -1 ) );
            rec.trqlhn1 := Convert( slices, 249, ( -9, -8, -7, -2, -1 ) );
            rec.trqlin1 := Convert( slices, 250, ( -9, -8, -7, -2, -1 ) );
            rec.trqljn1 := Convert( slices, 251, ( -9, -8, -7, -2, -1 ) );
            rec.troqln1 := Convert( slices, 252, ( -9, -8, -7, -2, -1 ) );
            rec.troql1 := Convert_Troql1_Type( Get( slices, 253 ));
            rec.trmore1 := Convert_Boolean_With_Missing( Get( slices, 254 ));
            rec.trplce2 := Convert_Trplce1_Type( Get( slices, 255 ));
            rec.trwhya2 := Convert_Boolean_With_Missing( Get( slices, 256 ));
            rec.trwhyb2 := Convert_Boolean_With_Missing( Get( slices, 257 ));
            rec.trwhyc2 := Convert_Boolean_With_Missing( Get( slices, 258 ));
            rec.trwhyd2 := Convert_Boolean_With_Missing( Get( slices, 259 ));
            rec.trwhye2 := Convert_Boolean_With_Missing( Get( slices, 260 ));
            rec.trq2 := Convert( slices, 261, ( -9, -8, -7 ) );
            rec.tru2 := Convert_Tru1_Type( Get( slices, 262 ));
            rec.trfeea2 := Convert_Nisjsa_Type( Get( slices, 263 ));
            rec.trfeeb2 := Convert_Yes_Or_Missing_Type( Get( slices, 264 ));
            rec.trfeec2 := Convert_Yes_Or_Missing_Type( Get( slices, 265 ));
            rec.trfeee2 := Convert_Yes_Or_Missing_Type( Get( slices, 266 ));
            rec.trfeef2 := Convert_Yes_Or_Missing_Type( Get( slices, 267 ));
            rec.trfeeg2 := Convert_Yes_Or_Missing_Type( Get( slices, 268 ));
            rec.trqlxp2 := Convert_Trqlxp1_Type( Get( slices, 269 ));
            rec.trqlac2 := Convert_Trqlac1_Type( Get( slices, 270 ));
            rec.trqlnn2 := Convert( slices, 271, ( -9, -8, -7, -2, -1 ) );
            rec.trqla2 := Convert_Yes_Or_Missing_Type( Get( slices, 272 ));
            rec.trqlb2 := Convert_Yes_Or_Missing_Type( Get( slices, 273 ));
            rec.trqlc2 := Convert_Yes_Or_Missing_Type( Get( slices, 274 ));
            rec.trqld2 := Convert_Yes_Or_Missing_Type( Get( slices, 275 ));
            rec.trqle2 := Convert_Yes_Or_Missing_Type( Get( slices, 276 ));
            rec.trqlf2 := Convert_Yes_Or_Missing_Type( Get( slices, 277 ));
            rec.trqlg2 := Convert_Yes_Or_Missing_Type( Get( slices, 278 ));
            rec.trqlh2 := Convert_Yes_Or_Missing_Type( Get( slices, 279 ));
            rec.trqli2 := Convert_Yes_Or_Missing_Type( Get( slices, 280 ));
            rec.trqlj2 := Convert( slices, 281, ( -9, -8, -7 ) );
            rec.trqlan2 := Convert( slices, 282, ( -9, -8, -7, -2, -1 ) );
            rec.trqlbn2 := Convert( slices, 283, ( -9, -8, -7, -2, -1 ) );
            rec.trqlcn2 := Convert( slices, 284, ( -9, -8, -7, -2, -1 ) );
            rec.trqldn2 := Convert( slices, 285, ( -9, -8, -7, -2, -1 ) );
            rec.trqlen2 := Convert( slices, 286, ( -9, -8, -7, -2, -1 ) );
            rec.trqlfn2 := Convert( slices, 287, ( -9, -8, -7, -2, -1 ) );
            rec.trqlgn2 := Convert( slices, 288, ( -9, -8, -7, -2, -1 ) );
            rec.trqlhn2 := Convert( slices, 289, ( -9, -8, -7, -2, -1 ) );
            rec.trqlin2 := Convert( slices, 290, ( -9, -8, -7, -2, -1 ) );
            rec.trqljn2 := Convert( slices, 291, ( -9, -8, -7, -2, -1 ) );
            rec.troqln2 := Convert( slices, 292, ( -9, -8, -7, -2, -1 ) );
            rec.troql2 := Convert_Troql2_Type( Get( slices, 293 ));
            rec.trmore2 := Convert_Boolean_With_Missing( Get( slices, 294 ));
            rec.trplce3 := Convert_Trplce1_Type( Get( slices, 295 ));
            rec.trwhya3 := Convert_Boolean_With_Missing( Get( slices, 296 ));
            rec.trwhyb3 := Convert_Boolean_With_Missing( Get( slices, 297 ));
            rec.trwhyc3 := Convert_Boolean_With_Missing( Get( slices, 298 ));
            rec.trwhyd3 := Convert_Boolean_With_Missing( Get( slices, 299 ));
            rec.trwhye3 := Convert_Boolean_With_Missing( Get( slices, 300 ));
            rec.trq3 := Convert( slices, 301, ( -9, -8, -7 ) );
            rec.tru3 := Convert_Tru1_Type( Get( slices, 302 ));
            rec.trfeea3 := Convert_Nisjsa_Type( Get( slices, 303 ));
            rec.trfeeb3 := Convert_Yes_Or_Missing_Type( Get( slices, 304 ));
            rec.trfeec3 := Convert_Yes_Or_Missing_Type( Get( slices, 305 ));
            rec.trfeee3 := Convert_Yes_Or_Missing_Type( Get( slices, 306 ));
            rec.trfeef3 := Convert_Yes_Or_Missing_Type( Get( slices, 307 ));
            rec.trfeeg3 := Convert_Yes_Or_Missing_Type( Get( slices, 308 ));
            rec.trqlxp3 := Convert_Trqlxp1_Type( Get( slices, 309 ));
            rec.trqlac3 := Convert_Trqlac1_Type( Get( slices, 310 ));
            rec.trqlnn3 := Convert( slices, 311, ( -9, -8, -7, -2, -1 ) );
            rec.trqla3 := Convert_Yes_Or_Missing_Type( Get( slices, 312 ));
            rec.trqlb3 := Convert_Yes_Or_Missing_Type( Get( slices, 313 ));
            rec.trqlc3 := Convert_Yes_Or_Missing_Type( Get( slices, 314 ));
            rec.trqld3 := Convert_Yes_Or_Missing_Type( Get( slices, 315 ));
            rec.trqle3 := Convert_Yes_Or_Missing_Type( Get( slices, 316 ));
            rec.trqlf3 := Convert_Yes_Or_Missing_Type( Get( slices, 317 ));
            rec.trqlg3 := Convert_Yes_Or_Missing_Type( Get( slices, 318 ));
            rec.trqlh3 := Convert_Yes_Or_Missing_Type( Get( slices, 319 ));
            rec.trqli3 := Convert_Yes_Or_Missing_Type( Get( slices, 320 ));
            rec.trqlj3 := Convert( slices, 321, ( -9, -8, -7 ) );
            rec.trqlan3 := Convert( slices, 322, ( -9, -8, -7, -2, -1 ) );
            rec.trqlbn3 := Convert( slices, 323, ( -9, -8, -7, -2, -1 ) );
            rec.trqlcn3 := Convert( slices, 324, ( -9, -8, -7, -2, -1 ) );
            rec.trqldn3 := Convert( slices, 325, ( -9, -8, -7, -2, -1 ) );
            rec.trqlen3 := Convert( slices, 326, ( -9, -8, -7, -2, -1 ) );
            rec.trqlfn3 := Convert( slices, 327, ( -9, -8, -7, -2, -1 ) );
            rec.trqlgn3 := Convert( slices, 328, ( -9, -8, -7, -2, -1 ) );
            rec.trqlhn3 := Convert( slices, 329, ( -9, -8, -7, -2, -1 ) );
            rec.trqlin3 := Convert( slices, 330, ( -9, -8, -7, -2, -1 ) );
            rec.trqljn3 := Convert( slices, 331, ( -9, -8, -7, -2, -1 ) );
            rec.troqln3 := Convert( slices, 332, ( -9, -8, -7, -2, -1 ) );
            rec.troql3 := Convert_Troql2_Type( Get( slices, 333 ));
            rec.ivlpar := Convert_Ivlpar_Type( Get( slices, 334 ));
            rec.nrpart := Convert_Boolean_With_Missing( Get( slices, 335 ));
            rec.nrptim := Convert_Nrptim_Type( Get( slices, 336 ));
            rec.nrpxpm1 := Convert_Nrpxpm1_Type( Get( slices, 337 ));
            rec.nrpxpm2 := Convert_Cohxpm2_Type( Get( slices, 338 ));
            rec.cohadv := Convert_Boolean_With_Missing( Get( slices, 339 ));
            rec.cohad1 := Convert_Cohad1_Type( Get( slices, 340 ));
            rec.cohad2 := Convert_Cohad2_Type( Get( slices, 341 ));
            rec.cohdis := Convert_Boolean_With_Missing( Get( slices, 342 ));
            rec.cohds1 := Convert_Cohds1_Type( Get( slices, 343 ));
            rec.cohds2 := Convert_Cohds2_Type( Get( slices, 344 ));
            rec.cohxpm1 := Convert_Cohxpm1_Type( Get( slices, 345 ));
            rec.cohxpm2 := Convert_Cohxpm2_Type( Get( slices, 346 ));
            rec.ivlpary := Convert_Boolean_With_Missing( Get( slices, 347 ));
            rec.cohlyr := Convert( slices, 348, ( -9, -8, -7, -2, -1 ) );
            rec.cohlbm1 := Convert_Ch1bm_Type( Get( slices, 349 ));
            rec.cohlby1 := Convert( slices, 350, ( -9, -8, -7, -2, -1 ) );
            rec.cohlem1 := Convert_Ch1bm_Type( Get( slices, 351 ));
            rec.cohley1 := Convert( slices, 352, ( -9, -8, -7, -2, -1 ) );
            rec.cohlbm2 := Convert_Ch1bm_Type( Get( slices, 353 ));
            rec.cohlby2 := Convert( slices, 354, ( -9, -8, -7, -2, -1 ) );
            rec.cohlem2 := Convert_Ch1bm_Type( Get( slices, 355 ));
            rec.cohley2 := Convert( slices, 356, ( -9, -8, -7, -2, -1 ) );
            rec.cohlbm3 := Convert_Ch1bm_Type( Get( slices, 357 ));
            rec.cohlby3 := Convert( slices, 358, ( -9, -8, -7, -2, -1 ) );
            rec.cohlem3 := Convert_Ch1bm_Type( Get( slices, 359 ));
            rec.cohley3 := Convert( slices, 360, ( -9, -8, -7, -2, -1 ) );
            rec.ivcbage := Convert_Ivcbage_Type( Get( slices, 361 ));
            rec.lchmor := Convert_Lchmor_Type( Get( slices, 362 ));
            rec.lchnmor := Convert( slices, 363, ( -9, -8, -7, -2, -1 ) );
            rec.ivda := Convert_Ivda_Type( Get( slices, 364 ));
            rec.ivdb := Convert_Ivdb_Type( Get( slices, 365 ));
            rec.ivdc := Convert_Ivdc_Type( Get( slices, 366 ));
            rec.ivdd := Convert_Ivdd_Type( Get( slices, 367 ));
            rec.ivde := Convert_Yes_Or_Missing_Type( Get( slices, 368 ));
            rec.hlstat := Convert_Hlstat_Type( Get( slices, 369 ));
            rec.hldsbl := Convert_Bscon_Type( Get( slices, 370 ));
            rec.hlprb := Convert( slices, 371, ( -9, -8, -7, -2, -1 ) );
            rec.hlprba := Convert_Hlprba_Type( Get( slices, 372 ));
            rec.hlprbb := Convert_Hlprbb_Type( Get( slices, 373 ));
            rec.hlprbc := Convert_Hlprbc_Type( Get( slices, 374 ));
            rec.hlprbd := Convert_Hlprbd_Type( Get( slices, 375 ));
            rec.hlprbe := Convert_Hlprbe_Type( Get( slices, 376 ));
            rec.hlprbf := Convert_Hlprbf_Type( Get( slices, 377 ));
            rec.hlprbg := Convert_Hlprbg_Type( Get( slices, 378 ));
            rec.hlprbh := Convert_Hlprbh_Type( Get( slices, 379 ));
            rec.hlprbi := Convert_Hlprbi_Type( Get( slices, 380 ));
            rec.hlprbj := Convert_Hlprbj_Type( Get( slices, 381 ));
            rec.hlprbk := Convert_Hlprbk_Type( Get( slices, 382 ));
            rec.hlprbl := Convert_Hlprbl_Type( Get( slices, 383 ));
            rec.hlprbm := Convert_Hlprbm_Type( Get( slices, 384 ));
            rec.hllt := Convert_Bscon_Type( Get( slices, 385 ));
            rec.hllta := Convert_Hllta_Type( Get( slices, 386 ));
            rec.hlltb := Convert_Hlltb_Type( Get( slices, 387 ));
            rec.hlltc := Convert_Hlltc_Type( Get( slices, 388 ));
            rec.hlltd := Convert_Hlltd_Type( Get( slices, 389 ));
            rec.hllte := Convert_Hllte_Type( Get( slices, 390 ));
            rec.hlltw := Convert_Bscon_Type( Get( slices, 391 ));
            rec.hlendw := Convert_Hlendw_Type( Get( slices, 392 ));
            rec.hlltwa := Convert_Hlltwa_Type( Get( slices, 393 ));
            rec.hliv65 := Convert_Hliv65_Type( Get( slices, 394 ));
            rec.adla := Convert_Adla_Type( Get( slices, 395 ));
            rec.adlad := Convert_Adlad_Type( Get( slices, 396 ));
            rec.adlb := Convert_Adla_Type( Get( slices, 397 ));
            rec.adlbd := Convert_Adlad_Type( Get( slices, 398 ));
            rec.adlc := Convert_Adla_Type( Get( slices, 399 ));
            rec.adlcd := Convert_Adlad_Type( Get( slices, 400 ));
            rec.adld := Convert_Adla_Type( Get( slices, 401 ));
            rec.adldd := Convert_Adlad_Type( Get( slices, 402 ));
            rec.adle := Convert_Adla_Type( Get( slices, 403 ));
            rec.adled := Convert_Adlad_Type( Get( slices, 404 ));
            rec.adlf := Convert_Adla_Type( Get( slices, 405 ));
            rec.adlfd := Convert_Adlad_Type( Get( slices, 406 ));
            rec.hl2gp := Convert_Hl2gp_Type( Get( slices, 407 ));
            rec.hl2hop := Convert( slices, 408, ( -9, -8, -7, -2, -1 ) );
            rec.xdts := Convert_Bscon_Type( Get( slices, 409 ));
            rec.nxdts := Convert_Nxdts_Type( Get( slices, 410 ));
            rec.hosp := Convert_Hlsv_Type( Get( slices, 411 ));
            rec.hospd := Convert( slices, 412, ( -9, -8, -7, -2, -1 ) );
            rec.hospch := Convert_Hospch_Type( Get( slices, 413 ));
            rec.hospnhs := Convert_Hospnhs_Type( Get( slices, 414 ));
            rec.hlcvr := Convert_Hlcvr_Type( Get( slices, 415 ));
            rec.hlcvrh := Convert_Hlcvrh_Type( Get( slices, 416 ));
            rec.hlcvrl := Convert( slices, 417, ( -9, -8, -7, -2, -1 ) );
            rec.hlsv := Convert_Hlsv_Type( Get( slices, 418 ));
            rec.hlsva := Convert_Hlsva_Type( Get( slices, 419 ));
            rec.hlsvan := Convert_Hlsvan_Type( Get( slices, 420 ));
            rec.hlsvaf := Convert_Hlsvaf_Type( Get( slices, 421 ));
            rec.hlsvb := Convert_Hlsvb_Type( Get( slices, 422 ));
            rec.hlsvbn := Convert_Hlsvan_Type( Get( slices, 423 ));
            rec.hlsvbf := Convert_Hlsvaf_Type( Get( slices, 424 ));
            rec.hlsvc := Convert_Hlsvc_Type( Get( slices, 425 ));
            rec.hlsvcn := Convert_Hlsvan_Type( Get( slices, 426 ));
            rec.hlsvcf := Convert_Hlsvaf_Type( Get( slices, 427 ));
            rec.hlsvd := Convert_Hlsvd_Type( Get( slices, 428 ));
            rec.hlsvdn := Convert_Hlsvan_Type( Get( slices, 429 ));
            rec.hlsvdf := Convert_Hlsvaf_Type( Get( slices, 430 ));
            rec.hlsve := Convert_Hlsve_Type( Get( slices, 431 ));
            rec.hlsven := Convert_Hlsvan_Type( Get( slices, 432 ));
            rec.hlsvef := Convert_Hlsvaf_Type( Get( slices, 433 ));
            rec.hlsvf := Convert_Hlsvf_Type( Get( slices, 434 ));
            rec.hlsvfn := Convert_Hlsvan_Type( Get( slices, 435 ));
            rec.hlsvff := Convert_Hlsvaf_Type( Get( slices, 436 ));
            rec.hlsvg := Convert_Hlsvg_Type( Get( slices, 437 ));
            rec.hlsvgn := Convert_Hlsvan_Type( Get( slices, 438 ));
            rec.hlsvgf := Convert_Hlsvaf_Type( Get( slices, 439 ));
            rec.hlsvh := Convert_Hlsvh_Type( Get( slices, 440 ));
            rec.hlsvhn := Convert_Hlsvan_Type( Get( slices, 441 ));
            rec.hlsvhf := Convert_Hlsvaf_Type( Get( slices, 442 ));
            rec.hlsvi := Convert_Hlsvi_Type( Get( slices, 443 ));
            rec.hlsvin := Convert_Hlsvan_Type( Get( slices, 444 ));
            rec.hlsvif := Convert_Hlsvaf_Type( Get( slices, 445 ));
            rec.hlsvj := Convert_Hlsvj_Type( Get( slices, 446 ));
            rec.hlsvjn := Convert_Hlsvan_Type( Get( slices, 447 ));
            rec.hlsvjf := Convert_Hlsvaf_Type( Get( slices, 448 ));
            rec.hlsvk := Convert_Hlsvk_Type( Get( slices, 449 ));
            rec.hlsvkn := Convert_Hlsvan_Type( Get( slices, 450 ));
            rec.hlsvkf := Convert_Hlsvaf_Type( Get( slices, 451 ));
            rec.hlsvl := Convert_Hlsvl_Type( Get( slices, 452 ));
            rec.hlsvln := Convert_Hlsvln_Type( Get( slices, 453 ));
            rec.hlsvlf := Convert_Hlsvlf_Type( Get( slices, 454 ));
            rec.hlsvm := Convert_Hlsvm_Type( Get( slices, 455 ));
            rec.hlsvmn := Convert_Hlsvln_Type( Get( slices, 456 ));
            rec.hlsvmf := Convert_Hlsvlf_Type( Get( slices, 457 ));
            rec.hlck := Convert_Aidpl1_Type( Get( slices, 458 ));
            rec.hlcka := Convert_Hlcka_Type( Get( slices, 459 ));
            rec.hlckan := Convert_Hlckan_Type( Get( slices, 460 ));
            rec.hlckb := Convert_Hlcka_Type( Get( slices, 461 ));
            rec.hlckbn := Convert_Hlckan_Type( Get( slices, 462 ));
            rec.hlckc := Convert_Hlcka_Type( Get( slices, 463 ));
            rec.hlckcn := Convert_Hlckan_Type( Get( slices, 464 ));
            rec.hlckd := Convert_Hlcka_Type( Get( slices, 465 ));
            rec.hlckdn := Convert_Hlckan_Type( Get( slices, 466 ));
            rec.hlcke := Convert_Hlcka_Type( Get( slices, 467 ));
            rec.hlcken := Convert_Hlckan_Type( Get( slices, 468 ));
            rec.hlckf := Convert_Hlcka_Type( Get( slices, 469 ));
            rec.hlckfn := Convert_Hlckan_Type( Get( slices, 470 ));
            rec.hlckg := Convert_Hlcka_Type( Get( slices, 471 ));
            rec.hlckgn := Convert_Hlckan_Type( Get( slices, 472 ));
            rec.hlckh := Convert_Hlcka_Type( Get( slices, 473 ));
            rec.hlckhn := Convert_Hlckan_Type( Get( slices, 474 ));
            rec.hlcki := Convert_Hlcki_Type( Get( slices, 475 ));
            rec.hlckin := Convert_Hlckin_Type( Get( slices, 476 ));
            rec.smoker := Convert_Bscon_Type( Get( slices, 477 ));
            rec.ncigs := Convert( slices, 478, ( -9, -8, -7, -2, -1 ) );
            rec.aidhh := Convert_Aidhh_Type( Get( slices, 479 ));
            rec.aidhua := Convert( slices, 480, ( -9, -8, -7, -1 ) );
            rec.aidhub := Convert( slices, 481, ( -9, -8, -7 ) );
            rec.aidhuc := Convert( slices, 482, ( -9, -8, -7 ) );
            rec.aidxhh := Convert_Aidxhh_Type( Get( slices, 483 ));
            rec.naidxhh := Convert_Naidxhh_Type( Get( slices, 484 ));
            rec.aidhu1 := Convert_Aidhu1_Type( Get( slices, 485 ));
            rec.aidhu2 := Convert_Aidhu2_Type( Get( slices, 486 ));
            rec.aidhrs := Convert_Aidhrs_Type( Get( slices, 487 ));
            rec.ivma := Convert_Ivda_Type( Get( slices, 488 ));
            rec.ivmb := Convert_Ivdb_Type( Get( slices, 489 ));
            rec.ivmc := Convert_Ivec_Type( Get( slices, 490 ));
            rec.ivmd := Convert_Ivdd_Type( Get( slices, 491 ));
            rec.ivme := Convert_Ivee_Type( Get( slices, 492 ));
            rec.jbhas := Convert_Frnow_Type( Get( slices, 493 ));
            rec.jboff := Convert_Jboff_Type( Get( slices, 494 ));
            rec.jboffy := Convert_Jboffy_Type( Get( slices, 495 ));
            rec.jbterm := Convert_Jbterm_Type( Get( slices, 496 ));
            rec.jbsoc := Convert( slices, 497, ( -9, -8, -2, -1 ) );
            rec.jbsic := Convert( slices, 498, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.jbsemp := Convert_Jbsemp_Type( Get( slices, 499 ));
            rec.jbmngr := Convert_Jbmngr_Type( Get( slices, 500 ));
            rec.jbsize := Convert_Jbsize_Type( Get( slices, 501 ));
            rec.jbhrs := Convert( slices, 502, ( -9, -8, -7, -2, -1 ) );
            rec.jbot := Convert( slices, 503, ( -9, -8, -7, -2, -1 ) );
            rec.jbotpd := Convert( slices, 504, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbhrlk := Convert_Jbhrlk_Type( Get( slices, 505 ));
            rec.jbpl := Convert_Jbpl_Type( Get( slices, 506 ));
            rec.jbttwt := Convert( slices, 507, ( -9, -8, -7, -3, -2, -1 ) );
            rec.jbttwm := Convert_Jbttwm_Type( Get( slices, 508 ));
            rec.jbsat2 := Convert( slices, 509, ( -9, -8, -7, -2, -1 ) );
            rec.jbsat4 := Convert_Jbsat4_Type( Get( slices, 510 ));
            rec.jbsat6 := Convert_Jbsat4_Type( Get( slices, 511 ));
            rec.jbsat7 := Convert_Jbsat_Type( Get( slices, 512 ));
            rec.jbsat := Convert_Jbsat_Type( Get( slices, 513 ));
            rec.paygl := Convert( slices, 514, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.paygw := Convert( slices, 515, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.paynl := Convert( slices, 516, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.paynw := Convert( slices, 517, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.payslp := Convert_Payslp_Type( Get( slices, 518 ));
            rec.payusl := Convert_Aidpl1_Type( Get( slices, 519 ));
            rec.payu := Convert( slices, 520, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.payuw := Convert( slices, 521, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.payug := Convert_Paylyg_Type( Get( slices, 522 ));
            rec.paydf1 := Convert_Paydf1_Type( Get( slices, 523 ));
            rec.paydf2 := Convert_Paydf2_Type( Get( slices, 524 ));
            rec.paydf3 := Convert_Paydf3_Type( Get( slices, 525 ));
            rec.paydf4 := Convert_Paydf4_Type( Get( slices, 526 ));
            rec.paydf5 := Convert_Paydf5_Type( Get( slices, 527 ));
            rec.paydf6 := Convert_Paydf6_Type( Get( slices, 528 ));
            rec.paydf7 := Convert_Paydf7_Type( Get( slices, 529 ));
            rec.paydf8 := Convert_Paydf8_Type( Get( slices, 530 ));
            rec.paydf9 := Convert_Paydf9_Type( Get( slices, 531 ));
            rec.jbperfp := Convert_Coh1mr_Type( Get( slices, 532 ));
            rec.jbbgd := Convert( slices, 533, ( -9, -8, -7, -2, -1 ) );
            rec.jbbgm := Convert_Cjsbgm_Type( Get( slices, 534 ));
            rec.jbbgy4 := Convert( slices, 535, ( -9, -8, -7, -2, -1 ) );
            rec.jbbgly := Convert_Jbbgly_Type( Get( slices, 536 ));
            rec.jbsect := Convert_Jbsect_Type( Get( slices, 537 ));
            rec.jbonus := Convert_Aidpl1_Type( Get( slices, 538 ));
            rec.jbonam := Convert( slices, 539, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbong := Convert_Jbong_Type( Get( slices, 540 ));
            rec.jbrise := Convert_Aidpl1_Type( Get( slices, 541 ));
            rec.tujbpl := Convert_Aidpl1_Type( Get( slices, 542 ));
            rec.tuin1 := Convert_Aidpl1_Type( Get( slices, 543 ));
            rec.jbopps := Convert_Aidpl1_Type( Get( slices, 544 ));
            rec.jbtime := Convert_Jbtime_Type( Get( slices, 545 ));
            rec.pays := Convert( slices, 546, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.paysw := Convert( slices, 547, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.paysg := Convert_Paylyg_Type( Get( slices, 548 ));
            rec.jbpen := Convert_Aidpl1_Type( Get( slices, 549 ));
            rec.jbpenm := Convert_Aidpl1_Type( Get( slices, 550 ));
            rec.payly := Convert( slices, 551, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.paylyw := Convert( slices, 552, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.paylyg := Convert_Paylyg_Type( Get( slices, 553 ));
            rec.jsboss := Convert_Jsboss_Type( Get( slices, 554 ));
            rec.jssize := Convert_Jssize_Type( Get( slices, 555 ));
            rec.jshrs := Convert( slices, 556, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jshrlk := Convert_Jbhrlk_Type( Get( slices, 557 ));
            rec.jstime := Convert_Jstime_Type( Get( slices, 558 ));
            rec.jstypeb := Convert_Jstypeb_Type( Get( slices, 559 ));
            rec.jsaccs := Convert_Jsaccs_Type( Get( slices, 560 ));
            rec.jspart := Convert_Jspart_Type( Get( slices, 561 ));
            rec.jsprbm := Convert_Cjsbgm_Type( Get( slices, 562 ));
            rec.jsprby4 := Convert( slices, 563, ( -9, -8, -7, -2, -1 ) );
            rec.jsprem := Convert_Cjsbgm_Type( Get( slices, 564 ));
            rec.jsprey4 := Convert( slices, 565, ( -9, -8, -7, -2, -1 ) );
            rec.jsprf := Convert( slices, 566, ( -9, -8, -7, -3, -2, -1 ) );
            rec.jsprls := Convert_Jsprls_Type( Get( slices, 567 ));
            rec.jsprtx := Convert_Jsprtx_Type( Get( slices, 568 ));
            rec.jsprni := Convert_Jsprni_Type( Get( slices, 569 ));
            rec.jspayu := Convert( slices, 570, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jspayw := Convert( slices, 571, ( -9.0, -8.0, -7.0, -4.0, -2.0, -1.0 ) );
            rec.jspytx := Convert_Jspytx_Type( Get( slices, 572 ));
            rec.jspyni := Convert_Jspyni_Type( Get( slices, 573 ));
            rec.jspl := Convert_Jspl_Type( Get( slices, 574 ));
            rec.jsttwt := Convert( slices, 575, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.jsttwm := Convert_Jsttwm_Type( Get( slices, 576 ));
            rec.jssat1 := Convert_Jssat1_Type( Get( slices, 577 ));
            rec.jssat2 := Convert_Jbsat_Type( Get( slices, 578 ));
            rec.jssat4 := Convert_Jbsat_Type( Get( slices, 579 ));
            rec.jssat5 := Convert_Jbsat_Type( Get( slices, 580 ));
            rec.jssat := Convert_Jbsat_Type( Get( slices, 581 ));
            rec.jsbgd := Convert( slices, 582, ( -9, -8, -7, -2, -1 ) );
            rec.jsbgm := Convert_Cjsbgm_Type( Get( slices, 583 ));
            rec.jsbgy4 := Convert( slices, 584, ( -9, -8, -7, -2, -1 ) );
            rec.jblkcha := Convert_Jblkcha_Type( Get( slices, 585 ));
            rec.jbxpcha := Convert_Jblkcha_Type( Get( slices, 586 ));
            rec.jblkchb := Convert_Boolean_With_Missing( Get( slices, 587 ));
            rec.jbxpchb := Convert_Boolean_With_Missing( Get( slices, 588 ));
            rec.jblkchc := Convert_Boolean_With_Missing( Get( slices, 589 ));
            rec.jbxpchc := Convert_Boolean_With_Missing( Get( slices, 590 ));
            rec.jblkchd := Convert_Boolean_With_Missing( Get( slices, 591 ));
            rec.jbxpchd := Convert_Boolean_With_Missing( Get( slices, 592 ));
            rec.jblkche := Convert_Boolean_With_Missing( Get( slices, 593 ));
            rec.jbxpche := Convert_Boolean_With_Missing( Get( slices, 594 ));
            rec.jbmrs := Convert_Jbmrs_Type( Get( slices, 595 ));
            rec.rach12 := Convert_Hhch12_Type( Get( slices, 596 ));
            rec.jbchc1 := Convert_Jbchc1_Type( Get( slices, 597 ));
            rec.jbchc2 := Convert_Jbchc2_Type( Get( slices, 598 ));
            rec.jbchc3 := Convert_Jbchc3_Type( Get( slices, 599 ));
            rec.xpchcf := Convert_Xpchcf_Type( Get( slices, 600 ));
            rec.xpchc := Convert( slices, 601, ( -9, -8, -7, -2, -1 ) );
            rec.huxpch := Convert_Huxpch_Type( Get( slices, 602 ));
            rec.hunurs := Convert_Hunurs_Type( Get( slices, 603 ));
            rec.julk1 := Convert_Aidpl1_Type( Get( slices, 604 ));
            rec.julk4 := Convert_Bscon_Type( Get( slices, 605 ));
            rec.julka := Convert_Boolean_With_Missing( Get( slices, 606 ));
            rec.julkb := Convert_Boolean_With_Missing( Get( slices, 607 ));
            rec.julkc := Convert_Boolean_With_Missing( Get( slices, 608 ));
            rec.julkd := Convert_Boolean_With_Missing( Get( slices, 609 ));
            rec.julke := Convert_Boolean_With_Missing( Get( slices, 610 ));
            rec.julkjb := Convert_Aidpl1_Type( Get( slices, 611 ));
            rec.jubgn := Convert_Boolean_With_Missing( Get( slices, 612 ));
            rec.juspec := Convert_Juspec_Type( Get( slices, 613 ));
            rec.jusoc := Convert( slices, 614, ( -9, -8, -7, -2, -1 ) );
            rec.juhrsx := Convert( slices, 615, ( -9, -8, -7, -2, -1 ) );
            rec.jupayx := Convert( slices, 616, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jupayl := Convert( slices, 617, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.juhrsl := Convert( slices, 618, ( -9, -8, -7, -2, -1 ) );
            rec.eprosh := Convert_Cohxpm2_Type( Get( slices, 619 ));
            rec.eaage := Convert_Eaage_Type( Get( slices, 620 ));
            rec.jbub := Convert_Bscon_Type( Get( slices, 621 ));
            rec.jbuby := Convert_Jbuby_Type( Get( slices, 622 ));
            rec.j2has := Convert_Aidpl1_Type( Get( slices, 623 ));
            rec.j2soc := Convert( slices, 624, ( -9, -8, -7, -2, -1 ) );
            rec.j2semp := Convert_J2semp_Type( Get( slices, 625 ));
            rec.j2hrs := Convert( slices, 626, ( -9, -8, -7, -2, -1 ) );
            rec.j2pay := Convert( slices, 627, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ivea := Convert_Ivda_Type( Get( slices, 628 ));
            rec.iveb := Convert_Ivdb_Type( Get( slices, 629 ));
            rec.ivec := Convert_Ivec_Type( Get( slices, 630 ));
            rec.ived := Convert_Ivdd_Type( Get( slices, 631 ));
            rec.ivee := Convert_Ivee_Type( Get( slices, 632 ));
            rec.nemst := Convert_Nemst_Type( Get( slices, 633 ));
            rec.cjsbgd := Convert( slices, 634, ( -9, -8, -7, -2, -1 ) );
            rec.cjsbgm := Convert_Cjsbgm_Type( Get( slices, 635 ));
            rec.cjsbgy4 := Convert( slices, 636, ( -9, -8, -7, -2, -1 ) );
            rec.cjsbly := Convert_Cjsbly_Type( Get( slices, 637 ));
            rec.njbs := Convert( slices, 638, ( -9, -8, -7 ) );
            rec.jbhad := Convert_Aidpl1_Type( Get( slices, 639 ));
            rec.jlend4 := Convert( slices, 640, ( -9, -8, -7, -2, -1 ) );
            rec.jlsoc := Convert( slices, 641, ( -9, -8, -7, -2, -1 ) );
            rec.jlsic := Convert( slices, 642, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jlsemp := Convert_J2semp_Type( Get( slices, 643 ));
            rec.jlboss := Convert_Aidpl1_Type( Get( slices, 644 ));
            rec.jlmngr := Convert_Jlmngr_Type( Get( slices, 645 ));
            rec.jlsize := Convert_Jlsize_Type( Get( slices, 646 ));
            rec.ivja := Convert_Ivda_Type( Get( slices, 647 ));
            rec.ivjb := Convert_Ivdb_Type( Get( slices, 648 ));
            rec.ivjc := Convert_Ivec_Type( Get( slices, 649 ));
            rec.ivjd := Convert_Ivdd_Type( Get( slices, 650 ));
            rec.ivje := Convert_Ivee_Type( Get( slices, 651 ));
            rec.oppola := Convert_Oppola_Type( Get( slices, 652 ));
            rec.oppolb := Convert_Oppola_Type( Get( slices, 653 ));
            rec.oppolc := Convert_Oppola_Type( Get( slices, 654 ));
            rec.oppold := Convert_Oppola_Type( Get( slices, 655 ));
            rec.vote1 := Convert_Aidpl1_Type( Get( slices, 656 ));
            rec.vote2 := Convert_Aidpl1_Type( Get( slices, 657 ));
            rec.vote3 := Convert_Vote3_Type( Get( slices, 658 ));
            rec.vote4 := Convert_Vote3_Type( Get( slices, 659 ));
            rec.vote5 := Convert_Vote5_Type( Get( slices, 660 ));
            rec.vote7 := Convert_Vote7_Type( Get( slices, 661 ));
            rec.vote8 := Convert_Vote8_Type( Get( slices, 662 ));
            rec.lacta := Convert_Lacta_Type( Get( slices, 663 ));
            rec.lactb := Convert_Lacta_Type( Get( slices, 664 ));
            rec.lactc := Convert_Lacta_Type( Get( slices, 665 ));
            rec.lactd := Convert_Lacta_Type( Get( slices, 666 ));
            rec.lacte := Convert_Lacta_Type( Get( slices, 667 ));
            rec.lactf := Convert_Lacta_Type( Get( slices, 668 ));
            rec.lacth := Convert_Lacta_Type( Get( slices, 669 ));
            rec.lacti := Convert_Lacta_Type( Get( slices, 670 ));
            rec.lactj := Convert_Lacta_Type( Get( slices, 671 ));
            rec.lactk := Convert_Lacta_Type( Get( slices, 672 ));
            rec.lactl := Convert_Lacta_Type( Get( slices, 673 ));
            rec.trust := Convert_Trust_Type( Get( slices, 674 ));
            rec.lfimpa := Convert_Lfimpa_Type( Get( slices, 675 ));
            rec.lfimpb := Convert_Lfimpa_Type( Get( slices, 676 ));
            rec.lfimpc := Convert_Lfimpa_Type( Get( slices, 677 ));
            rec.lfimpd := Convert_Lfimpa_Type( Get( slices, 678 ));
            rec.lfimpe := Convert_Lfimpa_Type( Get( slices, 679 ));
            rec.lfimpf := Convert_Lfimpa_Type( Get( slices, 680 ));
            rec.lfimpg := Convert_Lfimpa_Type( Get( slices, 681 ));
            rec.lfimph := Convert_Lfimpa_Type( Get( slices, 682 ));
            rec.locsera := Convert_Locsera_Type( Get( slices, 683 ));
            rec.locserb := Convert_Locsera_Type( Get( slices, 684 ));
            rec.locserc := Convert_Locsera_Type( Get( slices, 685 ));
            rec.locserd := Convert_Locsera_Type( Get( slices, 686 ));
            rec.locsere := Convert_Locsera_Type( Get( slices, 687 ));
            rec.locchd := Convert_Locchd_Type( Get( slices, 688 ));
            rec.opngbha := Convert_Opnata_Type( Get( slices, 689 ));
            rec.opngbhb := Convert_Opnata_Type( Get( slices, 690 ));
            rec.opngbhc := Convert_Opnata_Type( Get( slices, 691 ));
            rec.opngbhd := Convert_Opnata_Type( Get( slices, 692 ));
            rec.opngbhe := Convert_Opnata_Type( Get( slices, 693 ));
            rec.opngbhf := Convert_Opnata_Type( Get( slices, 694 ));
            rec.opngbhg := Convert_Opnata_Type( Get( slices, 695 ));
            rec.opngbhh := Convert_Opnata_Type( Get( slices, 696 ));
            rec.frna := Convert_Frna_Type( Get( slices, 697 ));
            rec.frnb := Convert_Frna_Type( Get( slices, 698 ));
            rec.frnc := Convert_Coh1mr_Type( Get( slices, 699 ));
            rec.caruse := Convert_Caruse_Type( Get( slices, 700 ));
            rec.yppar := Convert_Yppar_Type( Get( slices, 701 ));
            rec.pyhlth := Convert_Pyhlth_Type( Get( slices, 702 ));
            rec.pyhwrk := Convert_Pyhwrk_Type( Get( slices, 703 ));
            rec.pynyp := Convert( slices, 704, ( -9, -8, -7 ) );
            rec.pypno1 := Convert( slices, 705, ( -9, -8, -7 ) );
            rec.pyage1 := Convert( slices, 706, ( -9, -8, -7, -2, -1 ) );
            rec.pypno2 := Convert( slices, 707, ( -9, -8, -7 ) );
            rec.pyage2 := Convert( slices, 708, ( -9, -8, -7, -2, -1 ) );
            rec.pypno3 := Convert( slices, 709, ( -9, -8, -7 ) );
            rec.pyage3 := Convert( slices, 710, ( -9, -8, -7, -2, -1 ) );
            rec.pywhr1 := Convert_Pywhr1_Type( Get( slices, 711 ));
            rec.pyman1 := Convert_Pyman1_Type( Get( slices, 712 ));
            rec.pyarg1 := Convert_Pyarg1_Type( Get( slices, 713 ));
            rec.pytlk1 := Convert_Pyarg1_Type( Get( slices, 714 ));
            rec.pysmk1 := Convert_Pysmk1_Type( Get( slices, 715 ));
            rec.pysad1 := Convert_Pysad1_Type( Get( slices, 716 ));
            rec.pywor1 := Convert_Pywor1_Type( Get( slices, 717 ));
            rec.pywhr2 := Convert_Pywhr1_Type( Get( slices, 718 ));
            rec.pyman2 := Convert_Pyman1_Type( Get( slices, 719 ));
            rec.pyarg2 := Convert_Pyarg1_Type( Get( slices, 720 ));
            rec.pytlk2 := Convert_Pyarg1_Type( Get( slices, 721 ));
            rec.pysmk2 := Convert_Pysmk1_Type( Get( slices, 722 ));
            rec.pysad2 := Convert_Pysad1_Type( Get( slices, 723 ));
            rec.pywor2 := Convert_Pywor1_Type( Get( slices, 724 ));
            rec.pywhr3 := Convert_Pywhr1_Type( Get( slices, 725 ));
            rec.pyman3 := Convert_Pyman1_Type( Get( slices, 726 ));
            rec.pyarg3 := Convert_Pyarg1_Type( Get( slices, 727 ));
            rec.pytlk3 := Convert_Pyarg1_Type( Get( slices, 728 ));
            rec.pysmk3 := Convert_Pysmk1_Type( Get( slices, 729 ));
            rec.pysad3 := Convert_Pysad1_Type( Get( slices, 730 ));
            rec.pywor3 := Convert_Pywor1_Type( Get( slices, 731 ));
            rec.f101 := Convert_F101_Type( Get( slices, 732 ));
            rec.f102 := Convert_F102_Type( Get( slices, 733 ));
            rec.f103 := Convert_F103_Type( Get( slices, 734 ));
            rec.f104 := Convert( slices, 735, ( -9, -8, -7 ) );
            rec.f105 := Convert_F105_Type( Get( slices, 736 ));
            rec.f106 := Convert_F106_Type( Get( slices, 737 ));
            rec.f116 := Convert_F116_Type( Get( slices, 738 ));
            rec.f118 := Convert_F118_Type( Get( slices, 739 ));
            rec.f119 := Convert_F119_Type( Get( slices, 740 ));
            rec.f121 := Convert_F121_Type( Get( slices, 741 ));
            rec.f122 := Convert_F122_Type( Get( slices, 742 ));
            rec.f124 := Convert_F124_Type( Get( slices, 743 ));
            rec.f125 := Convert_F125_Type( Get( slices, 744 ));
            rec.f126 := Convert_F126_Type( Get( slices, 745 ));
            rec.f127 := Convert_F127_Type( Get( slices, 746 ));
            rec.f128 := Convert_F128_Type( Get( slices, 747 ));
            rec.f132 := Convert_F132_Type( Get( slices, 748 ));
            rec.f142 := Convert_F142_Type( Get( slices, 749 ));
            rec.f135 := Convert_F135_Type( Get( slices, 750 ));
            rec.f136 := Convert_F136_Type( Get( slices, 751 ));
            rec.f137 := Convert_F137_Type( Get( slices, 752 ));
            rec.f138 := Convert_F138_Type( Get( slices, 753 ));
            rec.f139 := Convert_F139_Type( Get( slices, 754 ));
            rec.f140 := Convert_F140_Type( Get( slices, 755 ));
            rec.f141 := Convert_F141_Type( Get( slices, 756 ));
            rec.f151 := Convert_F151_Type( Get( slices, 757 ));
            rec.f152 := Convert_F152_Type( Get( slices, 758 ));
            rec.f153 := Convert_F153_Type( Get( slices, 759 ));
            rec.f154 := Convert_F154_Type( Get( slices, 760 ));
            rec.f155 := Convert_F155_Type( Get( slices, 761 ));
            rec.f156 := Convert_F156_Type( Get( slices, 762 ));
            rec.f157 := Convert_F157_Type( Get( slices, 763 ));
            rec.f158 := Convert_F158_Type( Get( slices, 764 ));
            rec.f159 := Convert_F159_Type( Get( slices, 765 ));
            rec.nf1 := Convert( slices, 766, ( -9, -8, -7, -2, -1 ) );
            rec.fisit := Convert_Fisit_Type( Get( slices, 767 ));
            rec.fisitc := Convert( slices, 768, ( -9, -8, -7, -2, -1 ) );
            rec.fisity := Convert_Fisity_Type( Get( slices, 769 ));
            rec.fisitx := Convert( slices, 770, ( -9, -8, -7, -2, -1 ) );
            rec.fiyrdi := Convert( slices, 771, ( -9, -8, -7, -2, -1 ) );
            rec.fiyrdiu := Convert_Fiyrdiu_Type( Get( slices, 772 ));
            rec.save := Convert_Aidpl1_Type( Get( slices, 773 ));
            rec.saved := Convert( slices, 774, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.savey1 := Convert_Savey1_Type( Get( slices, 775 ));
            rec.savey2 := Convert_Savey1_Type( Get( slices, 776 ));
            rec.pppen := Convert_Aidpl1_Type( Get( slices, 777 ));
            rec.penb4 := Convert_Penb4_Type( Get( slices, 778 ));
            rec.penb4y4 := Convert( slices, 779, ( -9, -8, -7, -2, -1 ) );
            rec.penb4v := Convert( slices, 780, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.penb4w := Convert( slices, 781, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.penyr4 := Convert( slices, 782, ( -9, -8, -7, -2, -1 ) );
            rec.penadd := Convert_Aidpl1_Type( Get( slices, 783 ));
            rec.penadv := Convert( slices, 784, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.penadw := Convert( slices, 785, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.windf := Convert_Debt_Type( Get( slices, 786 ));
            rec.windfa := Convert_Windfa_Type( Get( slices, 787 ));
            rec.windfay := Convert( slices, 788, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windfb := Convert_Windfb_Type( Get( slices, 789 ));
            rec.windfby := Convert( slices, 790, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windfc := Convert_Windfc_Type( Get( slices, 791 ));
            rec.windfcy := Convert( slices, 792, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windfd := Convert_Windfd_Type( Get( slices, 793 ));
            rec.windfdy := Convert( slices, 794, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windff := Convert_Windff_Type( Get( slices, 795 ));
            rec.windffy := Convert( slices, 796, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windfg := Convert_Windfg_Type( Get( slices, 797 ));
            rec.windfgy := Convert( slices, 798, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windfh := Convert_Nisjsa_Type( Get( slices, 799 ));
            rec.windfhy := Convert( slices, 800, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.xpmeal := Convert_Xpleis_Type( Get( slices, 801 ));
            rec.xpleis := Convert_Xpleis_Type( Get( slices, 802 ));
            rec.ftexhh := Convert_Aidpl1_Type( Get( slices, 803 ));
            rec.ftexa := Convert_Ftexa_Type( Get( slices, 804 ));
            rec.ftexa1 := Convert_Ftexa1_Type( Get( slices, 805 ));
            rec.ftexa2 := Convert_Ftexa2_Type( Get( slices, 806 ));
            rec.ftexa3 := Convert_Ftexa3_Type( Get( slices, 807 ));
            rec.ftexa4 := Convert_Ftexa4_Type( Get( slices, 808 ));
            rec.ftexa5 := Convert_Ftexa5_Type( Get( slices, 809 ));
            rec.ftexa6 := Convert_Ftexa6_Type( Get( slices, 810 ));
            rec.ftexav := Convert( slices, 811, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ftexaw := Convert( slices, 812, ( -9.0, -8.0, -7.0, -5.0, -3.0, -2.0, -1.0 ) );
            rec.ftexb := Convert_Ftexb_Type( Get( slices, 813 ));
            rec.ftexb1 := Convert_Ftexa1_Type( Get( slices, 814 ));
            rec.ftexb2 := Convert_Ftexa2_Type( Get( slices, 815 ));
            rec.ftexb3 := Convert_Ftexa3_Type( Get( slices, 816 ));
            rec.ftexb4 := Convert_Ftexa4_Type( Get( slices, 817 ));
            rec.ftexb5 := Convert_Ftexa5_Type( Get( slices, 818 ));
            rec.ftexb6 := Convert_Ftexa6_Type( Get( slices, 819 ));
            rec.ftexbv := Convert( slices, 820, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ftexbw := Convert( slices, 821, ( -9.0, -8.0, -7.0, -5.0, -3.0, -2.0, -1.0 ) );
            rec.ftexc := Convert_Ftexc_Type( Get( slices, 822 ));
            rec.ftexc1 := Convert_Ftexa1_Type( Get( slices, 823 ));
            rec.ftexc2 := Convert_Ftexa2_Type( Get( slices, 824 ));
            rec.ftexc3 := Convert_Ftexa3_Type( Get( slices, 825 ));
            rec.ftexc4 := Convert_Ftexa4_Type( Get( slices, 826 ));
            rec.ftexc5 := Convert_Ftexa5_Type( Get( slices, 827 ));
            rec.ftexc6 := Convert_Ftexa6_Type( Get( slices, 828 ));
            rec.ftexcv := Convert( slices, 829, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ftexcw := Convert( slices, 830, ( -9.0, -8.0, -7.0, -5.0, -3.0, -2.0, -1.0 ) );
            rec.spinhh := Convert_Hhch12_Type( Get( slices, 831 ));
            rec.hubuys := Convert_Hubuys_Type( Get( slices, 832 ));
            rec.hufrys := Convert_Hubuys_Type( Get( slices, 833 ));
            rec.humops := Convert_Hubuys_Type( Get( slices, 834 ));
            rec.huiron := Convert_Hubuys_Type( Get( slices, 835 ));
            rec.hhch12 := Convert_Hhch12_Type( Get( slices, 836 ));
            rec.husits := Convert_Husits_Type( Get( slices, 837 ));
            rec.howlng := Convert( slices, 838, ( -9, -8, -7, -3, -2, -1 ) );
            rec.neigh := Convert_Neigh_Type( Get( slices, 839 ));
            rec.neigh1 := Convert_Neigh1_Type( Get( slices, 840 ));
            rec.neigh2 := Convert_Neigh2_Type( Get( slices, 841 ));
            rec.neigh3 := Convert_Neigh2_Type( Get( slices, 842 ));
            rec.neigh4 := Convert_Neigh2_Type( Get( slices, 843 ));
            rec.neigh5 := Convert_Neigh5_Type( Get( slices, 844 ));
            rec.neigh6 := Convert_Neigh5_Type( Get( slices, 845 ));
            rec.ivfa := Convert_Ivda_Type( Get( slices, 846 ));
            rec.ivfb := Convert_Ivdb_Type( Get( slices, 847 ));
            rec.ivfc := Convert_Ivfc_Type( Get( slices, 848 ));
            rec.ivfd := Convert_Ivdd_Type( Get( slices, 849 ));
            rec.ivfe := Convert_Ivee_Type( Get( slices, 850 ));
            rec.ivfoih := Convert( slices, 851, ( -9, -8 ) );
            rec.ivfoim := Convert( slices, 852, ( -9, -8 ) );
            rec.ivsc := Convert_Ivsc_Type( Get( slices, 853 ));
            rec.iv1 := Convert_Hhch12_Type( Get( slices, 854 ));
            rec.iv2 := Convert_Iv2_Type( Get( slices, 855 ));
            rec.iv4 := Convert_Iv4_Type( Get( slices, 856 ));
            rec.iv5 := Convert_Iv5_Type( Get( slices, 857 ));
            rec.iv6a := Convert_Hhch12_Type( Get( slices, 858 ));
            rec.iv6b := Convert_Hhch12_Type( Get( slices, 859 ));
            rec.iv6c := Convert_Hhch12_Type( Get( slices, 860 ));
            rec.iv6d := Convert_Hhch12_Type( Get( slices, 861 ));
            rec.iv6e := Convert_Hhch12_Type( Get( slices, 862 ));
            rec.iv6f := Convert_Hhch12_Type( Get( slices, 863 ));
            rec.iv7 := Convert( slices, 864, ( -9, -8, -7 ) );
            rec.ghqa := Convert_Ghqa_Type( Get( slices, 865 ));
            rec.ghqb := Convert_Ghqb_Type( Get( slices, 866 ));
            rec.ghqc := Convert_Ghqc_Type( Get( slices, 867 ));
            rec.ghqd := Convert_Ghqc_Type( Get( slices, 868 ));
            rec.ghqe := Convert_Ghqe_Type( Get( slices, 869 ));
            rec.ghqf := Convert_Ghqe_Type( Get( slices, 870 ));
            rec.ghqg := Convert_Ghqc_Type( Get( slices, 871 ));
            rec.ghqh := Convert_Ghqc_Type( Get( slices, 872 ));
            rec.ghqi := Convert_Ghqb_Type( Get( slices, 873 ));
            rec.ghqj := Convert_Ghqe_Type( Get( slices, 874 ));
            rec.ghqk := Convert_Ghqe_Type( Get( slices, 875 ));
            rec.ghql := Convert_Ghqc_Type( Get( slices, 876 ));
            rec.opfamo := Convert_Opfamo_Type( Get( slices, 877 ));
            rec.opfamk := Convert_Opfamj_Type( Get( slices, 878 ));
            rec.opfamp := Convert_Opfamo_Type( Get( slices, 879 ));
            rec.opfamq := Convert_Opfamq_Type( Get( slices, 880 ));
            rec.opfaml := Convert_Opfamj_Type( Get( slices, 881 ));
            rec.opfamr := Convert_Opfamr_Type( Get( slices, 882 ));
            rec.lfsat1 := Convert_Lfsat1_Type( Get( slices, 883 ));
            rec.lfsat2 := Convert_Lfsat1_Type( Get( slices, 884 ));
            rec.lfsat3 := Convert_Lfsat1_Type( Get( slices, 885 ));
            rec.lfsat4 := Convert_Lfsat1_Type( Get( slices, 886 ));
            rec.lfsat5 := Convert_Lfsat1_Type( Get( slices, 887 ));
            rec.lfsat6 := Convert_Lfsat1_Type( Get( slices, 888 ));
            rec.lfsat7 := Convert_Lfsat1_Type( Get( slices, 889 ));
            rec.lfsat8 := Convert_Lfsat1_Type( Get( slices, 890 ));
            rec.lfsato := Convert_Lfsat1_Type( Get( slices, 891 ));
            rec.lfsatl := Convert( slices, 892, ( -9, -8, -7, -2, -1 ) );
            rec.netsx1 := Convert_Netsx1_Type( Get( slices, 893 ));
            rec.netsx2 := Convert_Netsx1_Type( Get( slices, 894 ));
            rec.netsx3 := Convert_Netsx1_Type( Get( slices, 895 ));
            rec.net1wr := Convert_Aidpl1_Type( Get( slices, 896 ));
            rec.net2wr := Convert_Aidpl1_Type( Get( slices, 897 ));
            rec.net3wr := Convert_Aidpl1_Type( Get( slices, 898 ));
            rec.net1rl := Convert_Net1rl_Type( Get( slices, 899 ));
            rec.net2rl := Convert_Net1rl_Type( Get( slices, 900 ));
            rec.net3rl := Convert_Net1rl_Type( Get( slices, 901 ));
            rec.net1ag := Convert( slices, 902, ( -9, -8, -7, -2, -1 ) );
            rec.net2ag := Convert( slices, 903, ( -9, -8, -7, -2, -1 ) );
            rec.net3ag := Convert( slices, 904, ( -9, -8, -7, -2, -1 ) );
            rec.net1kn := Convert_Net1kn_Type( Get( slices, 905 ));
            rec.net2kn := Convert_Net1kn_Type( Get( slices, 906 ));
            rec.net3kn := Convert_Net1kn_Type( Get( slices, 907 ));
            rec.net1ph := Convert_Net1ph_Type( Get( slices, 908 ));
            rec.net2ph := Convert_Net1ph_Type( Get( slices, 909 ));
            rec.net3ph := Convert_Net1ph_Type( Get( slices, 910 ));
            rec.net1lv := Convert_Net1lv_Type( Get( slices, 911 ));
            rec.net2lv := Convert_Net1lv_Type( Get( slices, 912 ));
            rec.net3lv := Convert_Net1lv_Type( Get( slices, 913 ));
            rec.net1jb := Convert_Net1jb_Type( Get( slices, 914 ));
            rec.net2jb := Convert_Net1jb_Type( Get( slices, 915 ));
            rec.net3jb := Convert_Net1jb_Type( Get( slices, 916 ));
            rec.netsoc := Convert( slices, 917, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.prrs2i := Convert_Prrs2i_Type( Get( slices, 918 ));
            rec.pripn := Convert( slices, 919, ( -9, -8 ) );
            rec.prwhy := Convert_Prwhy_Type( Get( slices, 920 ));
            rec.pplevr := Convert_Plever_Type( Get( slices, 921 ));
            rec.prfehq := Convert_Prfehq_Type( Get( slices, 922 ));
            rec.prsehq := Convert_Prsehq_Type( Get( slices, 923 ));
            rec.presbgm := Convert_Presbgm_Type( Get( slices, 924 ));
            rec.presby4 := Convert( slices, 925, ( -9, -8, -7, -2, -1 ) );
            rec.presly := Convert_Presly_Type( Get( slices, 926 ));
            rec.prf101 := Convert_Prf101_Type( Get( slices, 927 ));
            rec.prf102 := Convert_Prf102_Type( Get( slices, 928 ));
            rec.prf116 := Convert_Prf116_Type( Get( slices, 929 ));
            rec.prf125 := Convert_Prf125_Type( Get( slices, 930 ));
            rec.prf131 := Convert_Prf131_Type( Get( slices, 931 ));
            rec.prf135 := Convert_Prf135_Type( Get( slices, 932 ));
            rec.prf137 := Convert_Prf137_Type( Get( slices, 933 ));
            rec.prf139 := Convert_Prf139_Type( Get( slices, 934 ));
            rec.prf141 := Convert_Prf141_Type( Get( slices, 935 ));
            rec.prfirn := Convert_Prfirn_Type( Get( slices, 936 ));
            rec.prearn := Convert_Prearn_Type( Get( slices, 937 ));
            rec.prjbbgm := Convert_Presbgm_Type( Get( slices, 938 ));
            rec.prjbby4 := Convert( slices, 939, ( -9, -8, -7, -2, -1 ) );
            rec.prjbly := Convert_Prjbly_Type( Get( slices, 940 ));
            rec.prfitb := Convert_Prfitb_Type( Get( slices, 941 ));
            rec.ivpa := Convert_Ivpa_Type( Get( slices, 942 ));
            rec.ivpb := Convert_Ivpb_Type( Get( slices, 943 ));
            rec.ivpc := Convert_Ivpc_Type( Get( slices, 944 ));
            rec.ivpd := Convert_Ivpd_Type( Get( slices, 945 ));
            rec.ivpe := Convert_Ivpe_Type( Get( slices, 946 ));
            rec.telwhy := Convert_Telwhy_Type( Get( slices, 947 ));
            rec.prjbft := Convert_Prjbft_Type( Get( slices, 948 ));
            rec.tlfiyrl := Convert( slices, 949, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.tlfiyr := Convert( slices, 950, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.pid := Convert( slices, 951 );
            rec.iviow7 := Convert_Iviow4_Type( Get( slices, 952 ));
            rec.hhmem := Convert_Hhmem_Type( Get( slices, 953 ));
            rec.newhy := Convert_Newhy_Type( Get( slices, 954 ));
            rec.nemnjn := Convert_Nemnjn_Type( Get( slices, 955 ));
            rec.neyrjn4 := Convert( slices, 956, ( -9, -8, -7, -2, -1 ) );
            rec.ivfio := Convert_Ivfio_Type( Get( slices, 957 ));
            rec.iodc := Convert_Iodc_Type( Get( slices, 958 ));
            rec.memorig := Convert_Memorig_Type( Get( slices, 959 ));
            rec.hgr2r := Convert_Hgr2r_Type( Get( slices, 960 ));
            rec.hgsex := Convert_Hgsex_Type( Get( slices, 961 ));
            rec.hgbm := Convert_Hgbm_Type( Get( slices, 962 ));
            rec.hgby := Convert( slices, 963, ( -2, -1 ) );
            rec.mastat := Convert_Mastat_Type( Get( slices, 964 ));
            rec.hgspn := Convert( slices, 965, ( -9, -8, -2, -1 ) );
            rec.hgemp := Convert_Hgemp_Type( Get( slices, 966 ));
            rec.hgfno := Convert( slices, 967, ( -9, -8, -2, -1 ) );
            rec.hgmno := Convert( slices, 968, ( -9, -8, -2, -1 ) );
            rec.hgra := Convert( slices, 969, ( -9, -8, -2, -1 ) );
            rec.age := Convert( slices, 970, ( -9, -8 ) );
            rec.age12 := Convert( slices, 971, ( -9, -8 ) );
            rec.butype := Convert_Butype_Type( Get( slices, 972 ));
            rec.buno := Convert( slices, 973, ( -9, -8 ) );
            rec.nchild := Convert( slices, 974, ( -9, -8 ) );
            rec.hoh := Convert_Hoh_Type( Get( slices, 975 ));
            rec.rach16 := Convert_Hhch12_Type( Get( slices, 976 ));
            rec.sampst := Convert_Sampst_Type( Get( slices, 977 ));
            rec.movest := Convert_Movest_Type( Get( slices, 978 ));
            rec.qfx := Convert_Aidpl1_Type( Get( slices, 979 ));
            rec.qfxc := Convert_Qfc_Type( Get( slices, 980 ));
            rec.qfxd := Convert_Qfd_Type( Get( slices, 981 ));
            rec.qfxe := Convert_Qfe_Type( Get( slices, 982 ));
            rec.qfxf := Convert_Qff_Type( Get( slices, 983 ));
            rec.qfxg := Convert_Qfg_Type( Get( slices, 984 ));
            rec.qfxh := Convert_Qfh_Type( Get( slices, 985 ));
            rec.qfxk := Convert_Qfk_Type( Get( slices, 986 ));
            rec.qfxl := Convert_Qfl_Type( Get( slices, 987 ));
            rec.qfxm := Convert_Qfm_Type( Get( slices, 988 ));
            rec.qfxn := Convert_Qfn_Type( Get( slices, 989 ));
            rec.qfxo := Convert_Qfxo_Type( Get( slices, 990 ));
            rec.qfxp := Convert_Qfxp_Type( Get( slices, 991 ));
            rec.qfxq := Convert_Qfxq_Type( Get( slices, 992 ));
            rec.qfxr := Convert_Qfxr_Type( Get( slices, 993 ));
            rec.qfedx := Convert_Aidpl1_Type( Get( slices, 994 ));
            rec.qfedxa := Convert_Qfedd_Type( Get( slices, 995 ));
            rec.nqfexa := Convert( slices, 996, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxb := Convert_Qfede_Type( Get( slices, 997 ));
            rec.nqfexb := Convert( slices, 998, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxc := Convert_Qfedj_Type( Get( slices, 999 ));
            rec.nqfexc := Convert( slices, 1000, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxg := Convert_Qfedm_Type( Get( slices, 1001 ));
            rec.nqfexg := Convert( slices, 1002, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxh := Convert_Qfedxh_Type( Get( slices, 1003 ));
            rec.nqfexh := Convert( slices, 1004, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxi := Convert_Qfedo_Type( Get( slices, 1005 ));
            rec.nqfexi := Convert( slices, 1006, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxj := Convert( slices, 1007, ( -9, -8, -7 ) );
            rec.nqfexj := Convert( slices, 1008, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxl := Convert_Qfedt_Type( Get( slices, 1009 ));
            rec.nqfexl := Convert( slices, 1010, ( -9, -8, -7, -2, -1 ) );
            rec.region := Convert_Region_Type( Get( slices, 1011 ));
            rec.hhsize := Convert( slices, 1012, ( -9, -8 ) );
            rec.hhtype := Convert_Hhtype_Type( Get( slices, 1013 ));
            rec.tenure := Convert_Tenure_Type( Get( slices, 1014 ));
            rec.qfedhi := Convert_Qfedhi_Type( Get( slices, 1015 ));
            rec.qfvoc := Convert_Qfvoc_Type( Get( slices, 1016 ));
            rec.qfachi := Convert_Qfachi_Type( Get( slices, 1017 ));
            rec.jbft := Convert_Jbft_Type( Get( slices, 1018 ));
            rec.payg := Convert( slices, 1019, ( -9.0, -8.0, -7.0 ) );
            rec.payn := Convert( slices, 1020, ( -9.0, -8.0, -7.0 ) );
            rec.paygu := Convert( slices, 1021, ( -9.0, -8.0, -7.0 ) );
            rec.paynu := Convert( slices, 1022, ( -9.0, -8.0, -7.0 ) );
            rec.paygty := Convert( slices, 1023, ( -9.0, -8.0, -7.0 ) );
            rec.paygly := Convert( slices, 1024, ( -9.0, -8.0, -7.0 ) );
            rec.paynty := Convert( slices, 1025, ( -9.0, -8.0, -7.0 ) );
            rec.paynly := Convert( slices, 1026, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jsprof := Convert( slices, 1027, ( -9.0, -8.0, -7.0 ) );
            rec.jsloss := Convert( slices, 1028, ( -9.0, -8.0, -7.0 ) );
            rec.jspayg := Convert( slices, 1029, ( -9.0, -8.0, -7.0 ) );
            rec.cjsten := Convert( slices, 1030, ( -9.0, -8.0, -7.0 ) );
            rec.cjswk9 := Convert( slices, 1031, ( -9.0, -8.0, -7.0 ) );
            rec.jlid := Convert_Jlid_Type( Get( slices, 1032 ));
            rec.jlyid := Convert_Jlyid_Type( Get( slices, 1033 ));
            rec.jtyid := Convert_Jtyid_Type( Get( slices, 1034 ));
            rec.jbseg := Convert_Jbseg_Type( Get( slices, 1035 ));
            rec.jbgold := Convert( slices, 1036, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbrgsc := Convert_Jbrgsc_Type( Get( slices, 1037 ));
            rec.jbisco := Convert( slices, 1038 );
            rec.jbcssm := Convert( slices, 1039, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbcssf := Convert( slices, 1040, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbhgs := Convert( slices, 1041, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbsec := Convert_Jbsec_Type( Get( slices, 1042 ));
            rec.njbwks := Convert( slices, 1043, ( -9.0, -8.0, -7.0 ) );
            rec.njuwks := Convert( slices, 1044, ( -9.0, -8.0, -7.0 ) );
            rec.njiwks := Convert( slices, 1045, ( -9.0, -8.0, -7.0 ) );
            rec.njbnew := Convert( slices, 1046, ( -9, -8, -7 ) );
            rec.njbsp := Convert( slices, 1047, ( -9, -8, -7 ) );
            rec.njusp := Convert( slices, 1048, ( -9, -8, -7 ) );
            rec.njisp := Convert( slices, 1049, ( -9, -8, -7 ) );
            rec.jbstatl := Convert( slices, 1050, ( -9, -8, -7, -2, -1 ) );
            rec.jbstatt := Convert( slices, 1051, ( -9, -8, -7, -2, -1 ) );
            rec.jbsocly := Convert( slices, 1052, ( -9, -8, -7 ) );
            rec.jlseg := Convert_Jlseg_Type( Get( slices, 1053 ));
            rec.jlgold := Convert( slices, 1054, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlrgsc := Convert_Jlrgsc_Type( Get( slices, 1055 ));
            rec.jlisco := Convert( slices, 1056 );
            rec.jlcssm := Convert( slices, 1057, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlcssf := Convert( slices, 1058, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlhgs := Convert( slices, 1059, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlsec := Convert_Jlsec_Type( Get( slices, 1060 ));
            rec.vote := Convert_Vote_Type( Get( slices, 1061 ));
            rec.fimnp := Convert( slices, 1062, ( -9.0, -8.0, -7.0 ) );
            rec.fimnb := Convert( slices, 1063, ( -9.0, -8.0, -7.0 ) );
            rec.fimni := Convert( slices, 1064, ( -9.0, -8.0, -7.0 ) );
            rec.fimnt := Convert( slices, 1065, ( -9.0, -8.0, -7.0 ) );
            rec.fimnl := Convert( slices, 1066, ( -9.0, -8.0, -7.0 ) );
            rec.fimnnl := Convert( slices, 1067, ( -9.0, -8.0, -7.0 ) );
            rec.fimn := Convert( slices, 1068, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrl := Convert( slices, 1069, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrnl := Convert( slices, 1070, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrp := Convert( slices, 1071, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrb := Convert( slices, 1072, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrt := Convert( slices, 1073, ( -9.0, -8.0, -7.0 ) );
            rec.fiyri := Convert( slices, 1074, ( -9.0, -8.0, -7.0 ) );
            rec.fiyr := Convert( slices, 1075, ( -9.0, -8.0, -7.0 ) );
            rec.fihhmn := Convert( slices, 1076, ( -9.0, -8.0, -7.0 ) );
            rec.hlghq1 := Convert( slices, 1077, ( -9, -8, -7 ) );
            rec.hlghq2 := Convert( slices, 1078, ( -9, -8, -7 ) );
            rec.spjb := Convert_Spjb_Type( Get( slices, 1079 ));
            rec.spsoc := Convert( slices, 1080, ( -9.0, -8.0 ) );
            rec.spjbhr := Convert( slices, 1081, ( -9, -8, -7 ) );
            rec.spjbot := Convert( slices, 1082, ( -9, -8, -7 ) );
            rec.sppayg := Convert( slices, 1083, ( -9.0, -8.0, -7.0 ) );
            rec.spjbyr := Convert( slices, 1084, ( -9, -8, -7 ) );
            rec.lrwght := Convert( slices, 1085 );
            rec.lewght := Convert( slices, 1086 );
            rec.xrwght := Convert( slices, 1087 );
            rec.xewght := Convert( slices, 1088 );
            rec.j2payi := Convert( slices, 1089, ( -9, -8, -7, -3, -2, -1 ) );
            rec.fiyrdii := Convert_Fiyrdii_Type( Get( slices, 1090 ));
            rec.prearni := Convert( slices, 1091, ( -9, -8, -2, -1 ) );
            rec.prfitbi := Convert_Prfitbi_Type( Get( slices, 1092 ));
            rec.paygui := Convert_Fimnbi_Type( Get( slices, 1093 ));
            rec.paynui := Convert_Fimnbi_Type( Get( slices, 1094 ));
            rec.paygti := Convert_Fimnbi_Type( Get( slices, 1095 ));
            rec.paygli := Convert_Fimnbi_Type( Get( slices, 1096 ));
            rec.paynti := Convert_Fimnbi_Type( Get( slices, 1097 ));
            rec.paynli := Convert_Fimnbi_Type( Get( slices, 1098 ));
            rec.jsprofi := Convert_Fimnbi_Type( Get( slices, 1099 ));
            rec.jspaygi := Convert_Fimnbi_Type( Get( slices, 1100 ));
            rec.fimnpi := Convert_Fimnbi_Type( Get( slices, 1101 ));
            rec.fimnbi := Convert_Fimnbi_Type( Get( slices, 1102 ));
            rec.fimnii := Convert_Fimnii_Type( Get( slices, 1103 ));
            rec.fimnti := Convert_Fimnii_Type( Get( slices, 1104 ));
            rec.fimnnli := Convert_Fimnbi_Type( Get( slices, 1105 ));
            rec.fimnli := Convert_Fimnbi_Type( Get( slices, 1106 ));
            rec.fimnthi := Convert_Fimnii_Type( Get( slices, 1107 ));
            rec.fiyrli := Convert_Fimnbi_Type( Get( slices, 1108 ));
            rec.fiyrnli := Convert_Fimnbi_Type( Get( slices, 1109 ));
            rec.fiyrpi := Convert_Fimnii_Type( Get( slices, 1110 ));
            rec.fiyrbi := Convert_Fimnbi_Type( Get( slices, 1111 ));
            rec.fiyrti := Convert_Fimnbi_Type( Get( slices, 1112 ));
            rec.fiyrii := Convert_Fimnbi_Type( Get( slices, 1113 ));
            rec.fiyeari := Convert_Fimnbi_Type( Get( slices, 1114 ));
            rec.sppaygi := Convert_Prfitbi_Type( Get( slices, 1115 ));
            rec.fihhmni := Convert_Fihhmni_Type( Get( slices, 1116 ));
            rec.mrjend := Convert( slices, 1117, ( -9, -8, -7, -3, -2, -1 ) );
            rec.mrjsoc := Convert( slices, 1118, ( -9, -8, -7, -3 ) );
            rec.mrjsic := Convert( slices, 1119, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjsemp := Convert_Mrjsemp_Type( Get( slices, 1120 ));
            rec.mrjboss := Convert_Mrjboss_Type( Get( slices, 1121 ));
            rec.mrjmngr := Convert_Mrjmngr_Type( Get( slices, 1122 ));
            rec.mrjsize := Convert_Mrjsize_Type( Get( slices, 1123 ));
            rec.mrjseg := Convert_Maseg_Type( Get( slices, 1124 ));
            rec.mrjgold := Convert( slices, 1125, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjrgsc := Convert_Margsc_Type( Get( slices, 1126 ));
            rec.mrjisco := Convert( slices, 1127 );
            rec.mrjcssm := Convert( slices, 1128, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjcssf := Convert( slices, 1129, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjhgs := Convert( slices, 1130, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjsec := Convert_J1sec_Type( Get( slices, 1131 ));
            rec.paseg := Convert_Maseg_Type( Get( slices, 1132 ));
            rec.pagold := Convert( slices, 1133, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.pargsc := Convert_Margsc_Type( Get( slices, 1134 ));
            rec.paisco := Convert( slices, 1135 );
            rec.pacssm := Convert( slices, 1136, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.pacssf := Convert( slices, 1137, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.pahgs := Convert( slices, 1138, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.pasec := Convert_J1sec_Type( Get( slices, 1139 ));
            rec.maseg := Convert_Maseg_Type( Get( slices, 1140 ));
            rec.magold := Convert( slices, 1141, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.margsc := Convert_Margsc_Type( Get( slices, 1142 ));
            rec.maisco := Convert( slices, 1143 );
            rec.macssm := Convert( slices, 1144, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.macssf := Convert( slices, 1145, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mahgs := Convert( slices, 1146, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.masec := Convert_J1sec_Type( Get( slices, 1147 ));
            rec.j1seg := Convert_J1seg_Type( Get( slices, 1148 ));
            rec.j1gold := Convert( slices, 1149, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.j1rgsc := Convert_J1rgsc_Type( Get( slices, 1150 ));
            rec.j1isco := Convert( slices, 1151 );
            rec.j1cssm := Convert( slices, 1152, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.j1cssf := Convert( slices, 1153, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.j1hgs := Convert( slices, 1154, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.j1sec := Convert_J1sec_Type( Get( slices, 1155 ));
            rec.xrwghte := Convert( slices, 1156 );
            rec.xewghte := Convert( slices, 1157 );
            rec.fimnsel := Convert_Fimnsel_Type( Get( slices, 1158 ));
            rec.sppid := Convert( slices, 1159 );
            rec.fpid := Convert( slices, 1160 );
            rec.mpid := Convert( slices, 1161 );
            rec.distmov := Convert( slices, 1162, ( -9.0, -8.0, -7.0 ) );
            rec.region2 := Convert_Region2_Type( Get( slices, 1163 ));
            rec.isced := Convert_Isced_Type( Get( slices, 1164 ));
            rec.casmin := Convert_Casmin_Type( Get( slices, 1165 ));
            rec.jbiscon := Convert( slices, 1166, ( -9, -8, -7, -2, -1 ) );
            rec.jliscon := Convert( slices, 1167, ( -9, -8, -7, -2, -1 ) );
            rec.mrjiscn := Convert( slices, 1168, ( -9, -8, -7, -2, -1 ) );
            rec.maiscon := Convert( slices, 1169, ( -9, -8, -7, -2, -1 ) );
            rec.paiscon := Convert( slices, 1170, ( -9, -8, -7, -2, -1 ) );
            rec.j1iscon := Convert( slices, 1171, ( -9, -8, -7, -2, -1 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Indresp_component ).start_pos = 0 ) then
               index.pointers( Indresp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Indresp_component ).counter := index.pointers( Indresp_component ).counter + 1;
            Put_Index( index_map, index );
            Indresp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Indresp_IO.Close( bin_file );
   end Create_Indresp_Wave_H;




   procedure Create_Indsamp_Wave_H( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Indsamp_IO.File_Type;
      rec         : Indsamp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Indsamp_IO.Create (bin_file, Indsamp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.pid := Convert( slices, 3 );
            rec.iviow7 := Convert_Iviow4_Type( Get( slices, 4 ));
            rec.ivstat1 := Convert_Ivstat1_Type( Get( slices, 5 ));
            rec.ivelig := Convert_Ivelig_Type( Get( slices, 6 ));
            rec.hhmem := Convert_Hhmem_Type( Get( slices, 7 ));
            rec.newhy := Convert_Newhy_Type( Get( slices, 8 ));
            rec.nemnjn := Convert_Nemnjn_Type( Get( slices, 9 ));
            rec.neyrjn4 := Convert( slices, 10, ( -9, -8, -7, -2, -1 ) );
            rec.lvwhy := Convert_Lvwhy_Type( Get( slices, 11 ));
            rec.lvmn := Convert_Lvmn_Type( Get( slices, 12 ));
            rec.lvyr4 := Convert( slices, 13, ( -9, -8, -7, -2, -1 ) );
            rec.lvloc := Convert_Lvloc_Type( Get( slices, 14 ));
            rec.ivfio := Convert_Ivfio_Type( Get( slices, 15 ));
            rec.ivrref := Convert_Ivrref_Type( Get( slices, 16 ));
            rec.ivireis := Convert_Ivireis_Type( Get( slices, 17 ));
            rec.finloc := Convert_Finloc_Type( Get( slices, 18 ));
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 19 ));
            rec.memorig := Convert_Memorig_Type( Get( slices, 20 ));
            rec.sampst := Convert_Sampst_Type( Get( slices, 21 ));
            rec.movest := Convert_Movest_Type( Get( slices, 22 ));
            rec.lewght := Convert( slices, 23, ( -9.0, -8.0, -1.0 ) );
            rec.lrwght := Convert( slices, 24, ( -9.0, -8.0, -1.0 ) );
            rec.distmov := Convert( slices, 25, ( -9.0, -8.0 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Indsamp_component ).start_pos = 0 ) then
               index.pointers( Indsamp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Indsamp_component ).counter := index.pointers( Indsamp_component ).counter + 1;
            Put_Index( index_map, index );
            Indsamp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Indsamp_IO.Close( bin_file );
   end Create_Indsamp_Wave_H;




   procedure Create_Jobhist_Wave_H( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Jobhist_IO.File_Type;
      rec         : Jobhist_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Jobhist_IO.Create (bin_file, Jobhist_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.jhstat := Convert_Jhstat_Type( Get( slices, 3 ));
            rec.jhbgd := Convert( slices, 4, ( -9, -8, -7, -2, -1 ) );
            rec.jhbgm := Convert_Jbbgm1_Type( Get( slices, 5 ));
            rec.jhbgy4 := Convert( slices, 6, ( -9, -8, -7, -2, -1 ) );
            rec.jspno := Convert( slices, 7 );
            rec.jhsoc := Convert( slices, 8, ( -9, -8, -2, -1 ) );
            rec.jhsemp := Convert_Jhsemp_Type( Get( slices, 9 ));
            rec.jhboss := Convert_Bscon_Type( Get( slices, 10 ));
            rec.jhsect := Convert_Jhsect_Type( Get( slices, 11 ));
            rec.jhmngr := Convert_Jhmngr_Type( Get( slices, 12 ));
            rec.jhpldf := Convert_Jhpldf_Type( Get( slices, 13 ));
            rec.jhsic := Convert( slices, 14, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.jhsize := Convert_Jhsize_Type( Get( slices, 15 ));
            rec.jhpayl := Convert( slices, 16, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhpylw := Convert( slices, 17, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.jhpylg := Convert_Jhpylg_Type( Get( slices, 18 ));
            rec.jhstpy := Convert_Jhstpy_Type( Get( slices, 19 ));
            rec.jblky := Convert_Jblky_Type( Get( slices, 20 ));
            rec.jhendd := Convert( slices, 21, ( -9, -8, -7, -2, -1 ) );
            rec.jhendm := Convert_Jbbgm1_Type( Get( slices, 22 ));
            rec.jhendy4 := Convert( slices, 23, ( -9, -8, -7, -2, -1 ) );
            rec.jha9ly := Convert_Jha9ly_Type( Get( slices, 24 ));
            rec.jhseg := Convert_Jhseg_Type( Get( slices, 25 ));
            rec.jhgold := Convert( slices, 26, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhrgsc := Convert_Jhrgsc_Type( Get( slices, 27 ));
            rec.jhisco := Convert( slices, 28, ( -9, -8 ) );
            rec.jhcssm := Convert( slices, 29, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhcssf := Convert( slices, 30, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhhgs := Convert( slices, 31, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhsec := Convert_Jhsec_Type( Get( slices, 32 ));
            rec.jhspw := Convert( slices, 33, ( -9.0, -8.0 ) );
            rec.jhgpay := Convert( slices, 34, ( -9.0, -8.0, -7.0 ) );
            rec.jhnpay := Convert( slices, 35, ( -9.0, -8.0, -7.0, -1.0 ) );
            rec.jhgpayi := Convert_Jhgpayi_Type( Get( slices, 36 ));
            rec.jhnpayi := Convert_Jhgpayi_Type( Get( slices, 37 ));
            rec.pid := Convert( slices, 38 );
            rec.jhiscon := Convert( slices, 39, ( -9, -8, -7, -2, -1 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Jobhist_component ).start_pos = 0 ) then
               index.pointers( Jobhist_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Jobhist_component ).counter := index.pointers( Jobhist_component ).counter + 1;
            Put_Index( index_map, index );
            Jobhist_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Jobhist_IO.Close( bin_file );
   end Create_Jobhist_Wave_H;




   procedure Create_Youth_Wave_H( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Youth_IO.File_Type;
      rec         : Youth_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Youth_IO.Create (bin_file, Youth_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.pno := Convert( slices, 1 );
            rec.ypdobm := Convert_Ypdobm_Type( Get( slices, 2 ));
            rec.ypdoby4 := Convert( slices, 3, ( -9, -8, -7, -2, -1 ) );
            rec.ypsex := Convert_Ypsex_Type( Get( slices, 4 ));
            rec.ytvhrs := Convert_Ytvhrs_Type( Get( slices, 5 ));
            rec.ytvstp := Convert_Ytvlmt_Type( Get( slices, 6 ));
            rec.ypfpc := Convert_Ypfpc_Type( Get( slices, 7 ));
            rec.ypfpcgm := Convert_Ypfpcgm_Type( Get( slices, 8 ));
            rec.yppals := Convert_Yppalo_Type( Get( slices, 9 ));
            rec.yputel := Convert_Yputel_Type( Get( slices, 10 ));
            rec.yplate := Convert_Yplate_Type( Get( slices, 11 ));
            rec.ypfpark := Convert_Ypfarca_Type( Get( slices, 12 ));
            rec.ypfbeau := Convert_Ypfbeau_Type( Get( slices, 13 ));
            rec.ypfclub := Convert_Ypfarca_Type( Get( slices, 14 ));
            rec.ypfdisc := Convert_Ypfarca_Type( Get( slices, 15 ));
            rec.ypfspor := Convert_Ypfarca_Type( Get( slices, 16 ));
            rec.ypfarca := Convert_Ypfarca_Type( Get( slices, 17 ));
            rec.ypargm := Convert_Ypargm_Type( Get( slices, 18 ));
            rec.ypargf := Convert_Ypargf_Type( Get( slices, 19 ));
            rec.yptlkm := Convert_Ypargm_Type( Get( slices, 20 ));
            rec.yptlkf := Convert_Ypargf_Type( Get( slices, 21 ));
            rec.ypnpal := Convert( slices, 22, ( -9, -8, -2, -1 ) );
            rec.ypgang := Convert_Ypbeau_Type( Get( slices, 23 ));
            rec.ypmkfrn := Convert_Ypmkfrn_Type( Get( slices, 24 ));
            rec.ypfght := Convert_Ypfght_Type( Get( slices, 25 ));
            rec.ypeatn := Convert_Ypeatn_Type( Get( slices, 26 ));
            rec.ypsave := Convert_Ypsave_Type( Get( slices, 27 ));
            rec.yppkml := Convert( slices, 28, ( -9, -2, -1 ) );
            rec.yppkmp := Convert( slices, 29, ( -9, -2, -1 ) );
            rec.ypbeau := Convert_Ypbeau_Type( Get( slices, 30 ));
            rec.ypdklm := Convert_Ypdklm_Type( Get( slices, 31 ));
            rec.ypsmev := Convert_Ypbeau_Type( Get( slices, 32 ));
            rec.ypsmag := Convert( slices, 33, ( -9, -8, -2, -1 ) );
            rec.ypsmof := Convert_Ypsmof_Type( Get( slices, 34 ));
            rec.ypsmlw := Convert( slices, 35, ( -9, -8, -2, -1 ) );
            rec.ypsmyr := Convert( slices, 36, ( -9, -8, -2, -1 ) );
            rec.ypdgfr := Convert_Ypdgfr_Type( Get( slices, 37 ));
            rec.ypsad := Convert_Ypsad_Type( Get( slices, 38 ));
            rec.ypwor := Convert_Ypwor_Type( Get( slices, 39 ));
            rec.ypbull := Convert_Ypbull_Type( Get( slices, 40 ));
            rec.yplone := Convert_Ypbored_Type( Get( slices, 41 ));
            rec.ypbored := Convert_Ypbored_Type( Get( slices, 42 ));
            rec.ypesta := Convert_Ypesta_Type( Get( slices, 43 ));
            rec.ypestb := Convert_Ypesta_Type( Get( slices, 44 ));
            rec.ypestc := Convert_Ypesta_Type( Get( slices, 45 ));
            rec.ypeste := Convert_Ypesta_Type( Get( slices, 46 ));
            rec.ypestf := Convert_Ypesta_Type( Get( slices, 47 ));
            rec.ypesth := Convert_Ypesta_Type( Get( slices, 48 ));
            rec.yptcha := Convert_Ypesta_Type( Get( slices, 49 ));
            rec.yptchb := Convert_Ypesta_Type( Get( slices, 50 ));
            rec.yptchc := Convert_Ypesta_Type( Get( slices, 51 ));
            rec.ypestg := Convert_Ypesta_Type( Get( slices, 52 ));
            rec.yphsw := Convert_Yphap_Type( Get( slices, 53 ));
            rec.yphap := Convert_Yphap_Type( Get( slices, 54 ));
            rec.yphfm := Convert_Yphap_Type( Get( slices, 55 ));
            rec.yphfr := Convert_Yphap_Type( Get( slices, 56 ));
            rec.yphlf := Convert_Yphap_Type( Get( slices, 57 ));
            rec.ypcoma := Convert_Ypcoma_Type( Get( slices, 58 ));
            rec.ypcomb := Convert_Ypcomb_Type( Get( slices, 59 ));
            rec.ypcomc := Convert_Ypcomc_Type( Get( slices, 60 ));
            rec.ypcomd := Convert_Ypcomd_Type( Get( slices, 61 ));
            rec.ypcome := Convert_Ypcome_Type( Get( slices, 62 ));
            rec.ypcomf := Convert_Ypcomf_Type( Get( slices, 63 ));
            rec.ypcomg := Convert_Ypcomg_Type( Get( slices, 64 ));
            rec.ypopla := Convert_Ypopfb_Type( Get( slices, 65 ));
            rec.ypopha := Convert_Ypopfj_Type( Get( slices, 66 ));
            rec.ypoppl := Convert_Ypopfj_Type( Get( slices, 67 ));
            rec.ypopscb := Convert_Ypopfj_Type( Get( slices, 68 ));
            rec.ypvte6 := Convert_Ypvte6_Type( Get( slices, 69 ));
            rec.ypvte3 := Convert_Ypvte3_Type( Get( slices, 70 ));
            rec.ypcrwra := Convert_Ypcrwra_Type( Get( slices, 71 ));
            rec.ypcrwrb := Convert_Ypcrwrb_Type( Get( slices, 72 ));
            rec.ypexpl := Convert_Ypbeau_Type( Get( slices, 73 ));
            rec.ypvand := Convert( slices, 74, ( -9, -8, -2, -1 ) );
            rec.yptrun := Convert_Yptrun_Type( Get( slices, 75 ));
            rec.ypopsc := Convert_Ypopsc_Type( Get( slices, 76 ));
            rec.yppasc := Convert_Yppasc_Type( Get( slices, 77 ));
            rec.yplvsc := Convert_Yplvsc_Type( Get( slices, 78 ));
            rec.yplvhm := Convert( slices, 79, ( -9, -8, -2, -1 ) );
            rec.ypamar := Convert( slices, 80, ( -9, -8, -2, -1 ) );
            rec.ypapar := Convert( slices, 81, ( -9, -8, -2, -1 ) );
            rec.ypwhrs := Convert( slices, 82, ( -9, -8, -2, -1 ) );
            rec.yppay := Convert( slices, 83, ( -9, -8, -2, -1 ) );
            rec.ypsoc := Convert( slices, 84, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.ypsocy := Convert_Ypsocy_Type( Get( slices, 85 ));
            rec.ypdlfa := Convert_Ypdlfa_Type( Get( slices, 86 ));
            rec.ypdlfb := Convert_Ypdlfb_Type( Get( slices, 87 ));
            rec.ypwght := Convert( slices, 88 );
            rec.hid := Convert( slices, 89 );
            rec.pid := Convert( slices, 90 );
            rec.fnspno := Convert( slices, 91, ( -9, -8 ) );
            rec.fnspid := Convert( slices, 92, ( -9.0, -8.0 ) );
            rec.mnspno := Convert( slices, 93, ( -9, -8 ) );
            rec.mnspid := Convert( slices, 94, ( -9.0, -8.0 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Youth_component ).start_pos = 0 ) then
               index.pointers( Youth_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Youth_component ).counter := index.pointers( Youth_component ).counter + 1;
            Put_Index( index_map, index );
            Youth_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Youth_IO.Close( bin_file );
   end Create_Youth_Wave_H;




   procedure Create_Egoalt_Wave_I( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Egoalt_IO.File_Type;
      rec         : Egoalt_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Egoalt_IO.Create (bin_file, Egoalt_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.opno := Convert( slices, 3, (  1 .. 0 => -9 ) );
            rec.rel := Convert_Rel_Type( Get( slices, 4 ));
            rec.sex := Convert_Sex_Type( Get( slices, 5 ));
            rec.osex := Convert_Hgsex_Type( Get( slices, 6 ));
            rec.lwstat := Convert_Lwstat_Type( Get( slices, 7 ));
            rec.nwstat := Convert_Nwstat_Type( Get( slices, 8 ));
            rec.pid := Convert( slices, 9 );
            rec.opid := Convert( slices, 10 );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Egoalt_component ).start_pos = 0 ) then
               index.pointers( Egoalt_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Egoalt_component ).counter := index.pointers( Egoalt_component ).counter + 1;
            Put_Index( index_map, index );
            Egoalt_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Egoalt_IO.Close( bin_file );
   end Create_Egoalt_Wave_I;




   procedure Create_Hhresp_Wave_I( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Hhresp_IO.File_Type;
      rec         : Hhresp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Hhresp_IO.Create (bin_file, Hhresp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.hhdoi := Convert( slices, 2, ( -9, -8, -7 ) );
            rec.hhmoi := Convert_Doim_Type( Get( slices, 3 ));
            rec.hhyoi4 := Convert( slices, 4, ( -9, -8, -7, -2, -1 ) );
            rec.hhsoih := Convert( slices, 5, ( -9, -8, -7 ) );
            rec.hhsoim := Convert( slices, 6, ( -9, -8, -7 ) );
            rec.hstype := Convert_Hstype_Type( Get( slices, 7 ));
            rec.hsrins := Convert_Cjsck2_Type( Get( slices, 8 ));
            rec.hsroom := Convert( slices, 9, ( -9, -8, -7, -2, -1 ) );
            rec.hsownd := Convert_Hsownd_Type( Get( slices, 10 ));
            rec.hsowr1 := Convert( slices, 11, ( -9, -8, -7, -2, -1 ) );
            rec.hsowr2 := Convert( slices, 12, ( -9, -8, -7, -2, -1 ) );
            rec.mghave := Convert_Mghave_Type( Get( slices, 13 ));
            rec.hsowrp := Convert_Bscon_Type( Get( slices, 14 ));
            rec.mgynot := Convert_Mgynot_Type( Get( slices, 15 ));
            rec.hscost := Convert( slices, 16, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.mgly := Convert_Bscon_Type( Get( slices, 17 ));
            rec.hsivw8 := Convert( slices, 18, ( -9, -8, -7, -2, -1 ) );
            rec.mgxtra := Convert_Bscon_Type( Get( slices, 19 ));
            rec.mgnew := Convert( slices, 20, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.mgxty1 := Convert_Mgxty1_Type( Get( slices, 21 ));
            rec.mgxty2 := Convert_Mgxty2_Type( Get( slices, 22 ));
            rec.mgxty3 := Convert_Mgxty3_Type( Get( slices, 23 ));
            rec.mgxty4 := Convert_Mgxty4_Type( Get( slices, 24 ));
            rec.mgxty5 := Convert_Mgxty5_Type( Get( slices, 25 ));
            rec.mgold := Convert( slices, 26, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.mglife := Convert( slices, 27, ( -9, -8, -7, -2, -1 ) );
            rec.mgtype := Convert_Mgtype_Type( Get( slices, 28 ));
            rec.xpmg := Convert( slices, 29, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.xpmg1 := Convert_Bscon_Type( Get( slices, 30 ));
            rec.xpmg2 := Convert_Bscon_Type( Get( slices, 31 ));
            rec.xpmg3 := Convert_Bscon_Type( Get( slices, 32 ));
            rec.xpmg4 := Convert_Bscon_Type( Get( slices, 33 ));
            rec.mgyr04 := Convert( slices, 34, ( -9, -8, -7, -2, -1 ) );
            rec.hsyr04 := Convert( slices, 35, ( -9, -8, -7, -2, -1 ) );
            rec.hsval := Convert( slices, 36, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.hsjb := Convert_Bscon_Type( Get( slices, 37 ));
            rec.rentp1 := Convert( slices, 38, ( -9, -8, -7, -2, -1 ) );
            rec.rentp2 := Convert( slices, 39, ( -9, -8, -7, -2, -1 ) );
            rec.rentll := Convert_Rentll_Type( Get( slices, 40 ));
            rec.rentf := Convert_Rentf_Type( Get( slices, 41 ));
            rec.rent := Convert( slices, 42, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.rentw := Convert( slices, 43, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.rent1 := Convert_Rent1_Type( Get( slices, 44 ));
            rec.rent2 := Convert_Rent1_Type( Get( slices, 45 ));
            rec.rent3 := Convert_Bscon_Type( Get( slices, 46 ));
            rec.rent4 := Convert_Bscon_Type( Get( slices, 47 ));
            rec.rent5 := Convert_Bscon_Type( Get( slices, 48 ));
            rec.rent6 := Convert_Bscon_Type( Get( slices, 49 ));
            rec.rent7 := Convert_Rent7_Type( Get( slices, 50 ));
            rec.rent8 := Convert_Coh1mr_Type( Get( slices, 51 ));
            rec.renthb := Convert_Renthb_Type( Get( slices, 52 ));
            rec.rentg := Convert( slices, 53, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.rentgw := Convert( slices, 54, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.xphsdf := Convert( slices, 55, ( -9, -8, -7, -2, -1 ) );
            rec.xphsd1 := Convert_Bscon_Type( Get( slices, 56 ));
            rec.xphsd2 := Convert_Bscon_Type( Get( slices, 57 ));
            rec.xphsdb := Convert_Bscon_Type( Get( slices, 58 ));
            rec.hskch := Convert_Boolean_With_Missing( Get( slices, 59 ));
            rec.hskchs := Convert_Boolean_With_Missing( Get( slices, 60 ));
            rec.hsbth := Convert_Boolean_With_Missing( Get( slices, 61 ));
            rec.hsbths := Convert_Boolean_With_Missing( Get( slices, 62 ));
            rec.hstlt := Convert_Boolean_With_Missing( Get( slices, 63 ));
            rec.hstlts := Convert_Boolean_With_Missing( Get( slices, 64 ));
            rec.hsgdn := Convert_Boolean_With_Missing( Get( slices, 65 ));
            rec.hsgdns := Convert_Boolean_With_Missing( Get( slices, 66 ));
            rec.heatch := Convert_Bscon_Type( Get( slices, 67 ));
            rec.heatyp := Convert_Heatyp_Type( Get( slices, 68 ));
            rec.xpgasy := Convert( slices, 69, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.xplecy := Convert( slices, 70, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.xpoily := Convert( slices, 71, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.xpsfly := Convert( slices, 72, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.hsprbg := Convert_Boolean_With_Missing( Get( slices, 73 ));
            rec.hsprbh := Convert_Boolean_With_Missing( Get( slices, 74 ));
            rec.hsprbi := Convert_Boolean_With_Missing( Get( slices, 75 ));
            rec.hsprbj := Convert_Boolean_With_Missing( Get( slices, 76 ));
            rec.hsprbk := Convert_Boolean_With_Missing( Get( slices, 77 ));
            rec.hsprbl := Convert_Boolean_With_Missing( Get( slices, 78 ));
            rec.hsprbm := Convert_Boolean_With_Missing( Get( slices, 79 ));
            rec.hsprbn := Convert_Boolean_With_Missing( Get( slices, 80 ));
            rec.hsprbo := Convert_Boolean_With_Missing( Get( slices, 81 ));
            rec.hsprbp := Convert_Boolean_With_Missing( Get( slices, 82 ));
            rec.hsprbq := Convert_Boolean_With_Missing( Get( slices, 83 ));
            rec.hsctax := Convert_Hsctax_Type( Get( slices, 84 ));
            rec.hs2ownd := Convert_Bscon_Type( Get( slices, 85 ));
            rec.hs2val := Convert_Hs2val_Type( Get( slices, 86 ));
            rec.mgtot := Convert( slices, 87, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.cdhave := Convert_Bscon_Type( Get( slices, 88 ));
            rec.cdbght := Convert_Bscon_Type( Get( slices, 89 ));
            rec.cd1use := Convert_Cd1new_Type( Get( slices, 90 ));
            rec.cd1new := Convert( slices, 91, ( -9, -8, -7, -2, -1 ) );
            rec.cd1cst := Convert( slices, 92, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd2use := Convert_Cd1new_Type( Get( slices, 93 ));
            rec.cd2new := Convert( slices, 94, ( -9, -8, -7, -2, -1 ) );
            rec.cd2cst := Convert( slices, 95, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd3use := Convert_Cd1new_Type( Get( slices, 96 ));
            rec.cd3new := Convert( slices, 97, ( -9, -8, -7, -2, -1 ) );
            rec.cd3cst := Convert( slices, 98, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd4use := Convert_Cd1new_Type( Get( slices, 99 ));
            rec.cd4new := Convert( slices, 100, ( -9, -8, -7, -2, -1 ) );
            rec.cd4cst := Convert( slices, 101, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd5use := Convert_Cd1new_Type( Get( slices, 102 ));
            rec.cd5new := Convert( slices, 103, ( -9, -8, -7, -2, -1 ) );
            rec.cd5cst := Convert( slices, 104, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd6use := Convert_Cd1new_Type( Get( slices, 105 ));
            rec.cd6new := Convert( slices, 106, ( -9, -8, -7, -2, -1 ) );
            rec.cd6cst := Convert( slices, 107, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd7use := Convert_Cd1new_Type( Get( slices, 108 ));
            rec.cd7new := Convert( slices, 109, ( -9, -8, -7, -2, -1 ) );
            rec.cd7cst := Convert( slices, 110, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd8use := Convert_Cd1new_Type( Get( slices, 111 ));
            rec.cd8new := Convert( slices, 112, ( -9, -8, -7, -2, -1 ) );
            rec.cd8cst := Convert( slices, 113, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd9use := Convert_Cd1new_Type( Get( slices, 114 ));
            rec.cd9new := Convert( slices, 115, ( -9, -8, -7, -2, -1 ) );
            rec.cd9cst := Convert( slices, 116, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd10use := Convert_Cd10new_Type( Get( slices, 117 ));
            rec.cd10new := Convert( slices, 118, ( -9, -8, -7, -2, -1 ) );
            rec.cd10cst := Convert( slices, 119, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd11use := Convert_Cd10new_Type( Get( slices, 120 ));
            rec.cd11new := Convert( slices, 121, ( -9, -8, -7, -2, -1 ) );
            rec.cd11cst := Convert( slices, 122, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd12use := Convert_Cd10new_Type( Get( slices, 123 ));
            rec.cd12new := Convert( slices, 124, ( -9, -8, -7, -2, -1 ) );
            rec.cd12cst := Convert( slices, 125, ( -9, -8, -7, -3, -2, -1 ) );
            rec.xphp := Convert_Bscon_Type( Get( slices, 126 ));
            rec.xphpdf := Convert_Xphpdf_Type( Get( slices, 127 ));
            rec.hscana := Convert_Boolean_With_Missing( Get( slices, 128 ));
            rec.hscnta := Convert_Boolean_With_Missing( Get( slices, 129 ));
            rec.hscanb := Convert_Boolean_With_Missing( Get( slices, 130 ));
            rec.hscntb := Convert_Boolean_With_Missing( Get( slices, 131 ));
            rec.hscanc := Convert_Boolean_With_Missing( Get( slices, 132 ));
            rec.hscntc := Convert_Boolean_With_Missing( Get( slices, 133 ));
            rec.hscand := Convert_Boolean_With_Missing( Get( slices, 134 ));
            rec.hscntd := Convert_Boolean_With_Missing( Get( slices, 135 ));
            rec.hscane := Convert_Boolean_With_Missing( Get( slices, 136 ));
            rec.hscnte := Convert_Boolean_With_Missing( Get( slices, 137 ));
            rec.hscanf := Convert_Boolean_With_Missing( Get( slices, 138 ));
            rec.hscntf := Convert_Boolean_With_Missing( Get( slices, 139 ));
            rec.xpfood := Convert( slices, 140, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ncars := Convert_Ncars_Type( Get( slices, 141 ));
            rec.carown := Convert_Carown_Type( Get( slices, 142 ));
            rec.ivh1 := Convert( slices, 143, ( -9, -8, -7, -1 ) );
            rec.ivh2 := Convert( slices, 144, ( -9, -8, -7 ) );
            rec.ivh3 := Convert( slices, 145, ( -9, -8, -7 ) );
            rec.hhfoih := Convert( slices, 146, ( -9, -8, -7 ) );
            rec.hhfoim := Convert( slices, 147, ( -9, -8, -7 ) );
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 148 ));
            rec.hhorig := Convert_Hhorig_Type( Get( slices, 149 ));
            rec.hhdc := Convert_Hhdc_Type( Get( slices, 150 ));
            rec.xhwght := Convert( slices, 151, ( -9.0, -8.0 ) );
            rec.hhsize := Convert( slices, 152, ( -9, -8 ) );
            rec.hhtype := Convert_Hhtype_Type( Get( slices, 153 ));
            rec.region := Convert_Region_Type( Get( slices, 154 ));
            rec.nch02 := Convert( slices, 155, ( -9, -8 ) );
            rec.nch34 := Convert( slices, 156, ( -9, -8 ) );
            rec.nch511 := Convert( slices, 157, ( -9, -8 ) );
            rec.nch1215 := Convert( slices, 158, ( -9, -8 ) );
            rec.nch1618 := Convert( slices, 159, ( -9, -8 ) );
            rec.nkids := Convert( slices, 160, ( -9, -8 ) );
            rec.nwed := Convert( slices, 161, ( -9, -8 ) );
            rec.npens := Convert( slices, 162, ( -9, -8 ) );
            rec.na75pl := Convert( slices, 163, ( -9, -8 ) );
            rec.agechy := Convert( slices, 164, ( -9, -8 ) );
            rec.ncouple := Convert( slices, 165, ( -9, -8 ) );
            rec.nonepar := Convert( slices, 166, ( -9, -8 ) );
            rec.nemp := Convert( slices, 167, ( -9, -8 ) );
            rec.nwage := Convert( slices, 168, ( -9, -8 ) );
            rec.tenure := Convert_Tenure_Type( Get( slices, 169 ));
            rec.xphsn := Convert( slices, 170, ( -9.0, -8.0, -7.0 ) );
            rec.xphsg := Convert( slices, 171, ( -9.0, -8.0, -7.0 ) );
            rec.fieqfcb := Convert( slices, 172, ( -9.0, -8.0 ) );
            rec.fieqfca := Convert( slices, 173, ( -9.0, -8.0 ) );
            rec.fihhyr := Convert( slices, 174, ( -9.0, -8.0, -7.0 ) );
            rec.fihhmn := Convert( slices, 175, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyl := Convert( slices, 176, ( -9.0, -8.0, -7.0 ) );
            rec.fihhynl := Convert( slices, 177, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyp := Convert( slices, 178, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyb := Convert( slices, 179, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyt := Convert( slices, 180, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyi := Convert( slices, 181, ( -9.0, -8.0, -7.0 ) );
            rec.fihhml := Convert( slices, 182, (  1 .. 0 => -9.0 ) );
            rec.fihhmnl := Convert( slices, 183, (  1 .. 0 => -9.0 ) );
            rec.fihhmp := Convert( slices, 184, (  1 .. 0 => -9.0 ) );
            rec.fihhmb := Convert( slices, 185, (  1 .. 0 => -9.0 ) );
            rec.fihhmt := Convert( slices, 186, (  1 .. 0 => -9.0 ) );
            rec.fihhmi := Convert( slices, 187, (  1 .. 0 => -9.0 ) );
            rec.hhmove := Convert_Hhmove_Type( Get( slices, 188 ));
            rec.mgnewi := Convert( slices, 189, ( -9, -8, -7, -2, -1 ) );
            rec.xpmgi := Convert( slices, 190, ( -9, -8, -7, -2, -1 ) );
            rec.hsvali := Convert( slices, 191, ( -9, -8, -7, -2, -1 ) );
            rec.renti := Convert( slices, 192, ( -9, -8, -7, -4, -3, -2, -1 ) );
            rec.rentgi := Convert( slices, 193, ( -9, -8, -7, -2, -1 ) );
            rec.xphsni := Convert_Jhgpayi_Type( Get( slices, 194 ));
            rec.xphsgi := Convert_Jhgpayi_Type( Get( slices, 195 ));
            rec.fihhmni := Convert_Fihhmni_Type( Get( slices, 196 ));
            rec.fihhmli := Convert_Fihhmbi_Type( Get( slices, 197 ));
            rec.fihmnli := Convert_Fihhmbi_Type( Get( slices, 198 ));
            rec.fihhmpi := Convert_Fihhmbi_Type( Get( slices, 199 ));
            rec.fihhmbi := Convert_Fihhmbi_Type( Get( slices, 200 ));
            rec.fihhmti := Convert_Fihhmbi_Type( Get( slices, 201 ));
            rec.fihhmii := Convert_Fihhmbi_Type( Get( slices, 202 ));
            rec.fihhyri := Convert_Fihhmbi_Type( Get( slices, 203 ));
            rec.fihhyli := Convert_Fihhmbi_Type( Get( slices, 204 ));
            rec.fihhyni := Convert_Fihhmbi_Type( Get( slices, 205 ));
            rec.fihhypi := Convert_Fihhmbi_Type( Get( slices, 206 ));
            rec.fihhybi := Convert_Fihhmbi_Type( Get( slices, 207 ));
            rec.fihhyti := Convert_Fihhmbi_Type( Get( slices, 208 ));
            rec.fihhyii := Convert_Fihhmbi_Type( Get( slices, 209 ));
            rec.fihhsel := Convert_Fihhsel_Type( Get( slices, 210 ));
            rec.xhwghte := Convert( slices, 211 );
            rec.xhwtsw1 := Convert( slices, 212 );
            rec.xhwtsw2 := Convert( slices, 213 );
            rec.region2 := Convert_Region2_Type( Get( slices, 214 ));
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Hhresp_component ).start_pos = 0 ) then
               index.pointers( Hhresp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Hhresp_component ).counter := index.pointers( Hhresp_component ).counter + 1;
            Put_Index( index_map, index );
            Hhresp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Hhresp_IO.Close( bin_file );
   end Create_Hhresp_Wave_I;




   procedure Create_Hhsamp_Wave_I( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Hhsamp_IO.File_Type;
      rec         : Hhsamp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Hhsamp_IO.Create (bin_file, Hhsamp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.fid := Convert( slices, 2 );
            rec.ivnadd := Convert( slices, 3, ( -9.0, -8.0 ) );
            rec.ivia := Convert_Ivia_Type( Get( slices, 4 ));
--             rec.ivid := Convert( slices, 5 );
            rec.ivlnc := Convert( slices, 6, ( -9, -1 ) );
            rec.ivtnc := Convert( slices, 7, ( -9, -8, -1 ) );
            rec.iviam := Convert_Iviam_Type( Get( slices, 8 ));
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 9 ));
            rec.ivosmrh := Convert( slices, 10, ( -9, -8, -1 ) );
            rec.ivnsmrh := Convert( slices, 11, ( -9, -8, -1 ) );
            rec.ivrrefh := Convert_Ivrrefh_Type( Get( slices, 12 ));
            rec.ivisst := Convert_Ivisst_Type( Get( slices, 13 ));
            rec.ivconv := Convert_Ivconv_Type( Get( slices, 14 ));
            rec.ivreis := Convert_Ivreis_Type( Get( slices, 15 ));
            rec.hhdc := Convert_Hhdc_Type( Get( slices, 16 ));
            rec.hhorig := Convert_Hhorig_Type( Get( slices, 17 ));
            rec.xhwght := Convert( slices, 18, ( -9.0, -8.0, -1.0 ) );
            rec.region := Convert_Region_Type( Get( slices, 19 ));
            rec.hhmove := Convert_Hhmove_Type( Get( slices, 20 ));
            rec.ahid := Convert( slices, 21 );
            rec.xhwghte := Convert( slices, 22 );
            rec.xhwtsw1 := Convert( slices, 23 );
            rec.xhwtsw2 := Convert( slices, 24 );
            rec.strata := Convert( slices, 25, ( -9, -8, -1 ) );
            rec.psu := Convert( slices, 26, ( -9, -8, -1 ) );
            rec.region2 := Convert_Region2_Type( Get( slices, 27 ));
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Hhsamp_component ).start_pos = 0 ) then
               index.pointers( Hhsamp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Hhsamp_component ).counter := index.pointers( Hhsamp_component ).counter + 1;
            Put_Index( index_map, index );
            Hhsamp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Hhsamp_IO.Close( bin_file );
   end Create_Hhsamp_Wave_I;




   procedure Create_Income_Wave_I( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Income_IO.File_Type;
      rec         : Income_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Income_IO.Create (bin_file, Income_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.pno := Convert( slices, 1 );
            rec.ficode := Convert_Ficode_Type( Get( slices, 2 ));
            rec.nfr := Convert( slices, 3, (  1 .. 0 => -9 ) );
            rec.frall := Convert_Frall_Type( Get( slices, 4 ));
            rec.fr01 := Convert_Cd1own_Type( Get( slices, 5 ));
            rec.fr02 := Convert_Cd1own_Type( Get( slices, 6 ));
            rec.fr03 := Convert_Cd1own_Type( Get( slices, 7 ));
            rec.fr04 := Convert( slices, 8, ( -9, -8, -2, -1 ) );
            rec.fr05 := Convert_Cd1own_Type( Get( slices, 9 ));
            rec.fr06 := Convert_Cd1own_Type( Get( slices, 10 ));
            rec.fr07 := Convert_Cd1own_Type( Get( slices, 11 ));
            rec.fr08 := Convert_Cd1own_Type( Get( slices, 12 ));
            rec.fr09 := Convert_Cd1own_Type( Get( slices, 13 ));
            rec.fr10 := Convert_Cd1own_Type( Get( slices, 14 ));
            rec.fr11 := Convert_Cd1own_Type( Get( slices, 15 ));
            rec.fr12 := Convert_Cd1own_Type( Get( slices, 16 ));
            rec.fr13 := Convert_Cd1own_Type( Get( slices, 17 ));
            rec.fr14 := Convert_Cd1own_Type( Get( slices, 18 ));
            rec.fr15 := Convert_Cd1own_Type( Get( slices, 19 ));
            rec.fr16 := Convert_Cd1own_Type( Get( slices, 20 ));
            rec.fr17 := Convert_Cd1own_Type( Get( slices, 21 ));
            rec.fr18 := Convert_Fr18_Type( Get( slices, 22 ));
            rec.fr19 := Convert_Fr18_Type( Get( slices, 23 ));
            rec.fr20 := Convert_Fr18_Type( Get( slices, 24 ));
            rec.frnow := Convert_Frnow_Type( Get( slices, 25 ));
            rec.frval := Convert( slices, 26, ( -9.0, -8.0, -3.0, -2.0, -1.0 ) );
            rec.frw := Convert( slices, 27, ( -9.0, -8.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.frjt := Convert_Frjt_Type( Get( slices, 28 ));
            rec.frjtpn := Convert( slices, 29, ( -9, -8, -2, -1 ) );
            rec.hid := Convert( slices, 30 );
            rec.fiseq := Convert( slices, 31 );
            rec.fim09l := Convert( slices, 32, ( -9.0, -8.0, -3.0 ) );
            rec.fim10l := Convert( slices, 33, ( -9.0, -8.0, -3.0 ) );
            rec.fim11l := Convert( slices, 34, ( -9.0, -8.0, -3.0 ) );
            rec.fim12l := Convert( slices, 35, ( -9.0, -8.0, -3.0 ) );
            rec.fim01t := Convert( slices, 36, ( -9.0, -8.0, -3.0 ) );
            rec.fim02t := Convert( slices, 37, ( -9.0, -8.0, -3.0 ) );
            rec.fim03t := Convert( slices, 38, ( -9.0, -8.0, -3.0 ) );
            rec.fim04t := Convert( slices, 39, ( -9.0, -8.0, -3.0 ) );
            rec.fim05t := Convert( slices, 40, ( -9.0, -8.0, -3.0 ) );
            rec.fim06t := Convert( slices, 41, ( -9.0, -8.0, -3.0 ) );
            rec.fim07t := Convert( slices, 42, ( -9.0, -8.0, -3.0 ) );
            rec.fim08t := Convert( slices, 43, ( -9.0, -8.0, -3.0 ) );
            rec.fim09t := Convert( slices, 44, ( -9.0, -8.0, -3.0 ) );
            rec.fim10t := Convert( slices, 45, ( -9.0, -8.0, -3.0 ) );
            rec.fim11t := Convert( slices, 46, ( -9.0, -8.0, -3.0 ) );
            rec.fim12t := Convert( slices, 47, ( -9.0, -8.0, -3.0 ) );
            rec.fim01n := Convert( slices, 48, ( -9.0, -8.0, -3.0 ) );
            rec.fim02n := Convert( slices, 49, ( -9.0, -3.0 ) );
            rec.fim03n := Convert( slices, 50, ( -9.0, -3.0 ) );
            rec.fim04n := Convert( slices, 51, ( -9.0, -3.0 ) );
            rec.frjtvf := Convert_Frjtvf_Type( Get( slices, 52 ));
            rec.frvali := Convert( slices, 53, ( -9, -8, -3, -2, -1 ) );
            rec.pid := Convert( slices, 54 );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Income_component ).start_pos = 0 ) then
               index.pointers( Income_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Income_component ).counter := index.pointers( Income_component ).counter + 1;
            Put_Index( index_map, index );
            Income_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Income_IO.Close( bin_file );
   end Create_Income_Wave_I;




   procedure Create_Indall_Wave_I( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Indall_IO.File_Type;
      rec         : Indall_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Indall_IO.Create (bin_file, Indall_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.pid := Convert( slices, 3 );
            rec.iviow8 := Convert_Iviow4_Type( Get( slices, 4 ));
            rec.ivstat1 := Convert_Ivstat1_Type( Get( slices, 5 ));
            rec.hhmem := Convert_Hhmem_Type( Get( slices, 6 ));
            rec.newhy := Convert_Newhy_Type( Get( slices, 7 ));
            rec.nemnjn := Convert_Nemnjn_Type( Get( slices, 8 ));
            rec.neyrjn4 := Convert( slices, 9, ( -9, -8, -7, -2, -1 ) );
            rec.ivfio := Convert_Ivfio_Type( Get( slices, 10 ));
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 11 ));
            rec.iodc := Convert_Iodc_Type( Get( slices, 12 ));
            rec.memorig := Convert_Memorig_Type( Get( slices, 13 ));
            rec.hgr2r := Convert_Hgr2r_Type( Get( slices, 14 ));
            rec.hgsex := Convert_Hgsex_Type( Get( slices, 15 ));
            rec.hgbm := Convert_Hgbm_Type( Get( slices, 16 ));
            rec.hgby := Convert( slices, 17, ( -9, -8, -2, -1 ) );
            rec.mastat := Convert_Mastat_Type( Get( slices, 18 ));
            rec.hgspn := Convert( slices, 19, ( -9, -8, -2, -1 ) );
            rec.hgemp := Convert_Hgemp_Type( Get( slices, 20 ));
            rec.hgfno := Convert( slices, 21, ( -9, -8, -2, -1 ) );
            rec.hgmno := Convert( slices, 22, ( -9, -8, -2, -1 ) );
            rec.hgra := Convert( slices, 23, ( -9, -8, -2, -1 ) );
            rec.age := Convert( slices, 24, ( -9, -8, -2, -1 ) );
            rec.age12 := Convert( slices, 25, ( -9, -8, -2, -1 ) );
            rec.butype := Convert_Butype_Type( Get( slices, 26 ));
            rec.buno := Convert( slices, 27, ( -9, -8 ) );
            rec.nchild := Convert( slices, 28, ( -9, -8 ) );
            rec.depchl := Convert_Depchl_Type( Get( slices, 29 ));
            rec.hoh := Convert_Hoh_Type( Get( slices, 30 ));
            rec.rach16 := Convert_Hhch12_Type( Get( slices, 31 ));
            rec.agei := Convert_Agei_Type( Get( slices, 32 ));
            rec.lrwght := Convert( slices, 33, ( -9.0, -8.0 ) );
            rec.lewght := Convert( slices, 34, ( -9.0, -8.0 ) );
            rec.xrwght := Convert( slices, 35, ( -9.0, -8.0 ) );
            rec.xewght := Convert( slices, 36, ( -9.0, -8.0 ) );
            rec.movest := Convert_Movest_Type( Get( slices, 37 ));
            rec.sampst := Convert_Sampst_Type( Get( slices, 38 ));
            rec.xrwghte := Convert( slices, 39 );
            rec.xewghte := Convert( slices, 40 );
            rec.xrwtsw1 := Convert( slices, 41 );
            rec.xewtsw1 := Convert( slices, 42 );
            rec.xrwtsw2 := Convert( slices, 43 );
            rec.xewtsw2 := Convert( slices, 44 );
            rec.sppid := Convert( slices, 45 );
            rec.fpid := Convert( slices, 46 );
            rec.mpid := Convert( slices, 47 );
            rec.rapid := Convert( slices, 48 );
            rec.distmov := Convert( slices, 49, ( -9.0, -8.0 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Indall_component ).start_pos = 0 ) then
               index.pointers( Indall_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Indall_component ).counter := index.pointers( Indall_component ).counter + 1;
            Put_Index( index_map, index );
            Indall_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Indall_IO.Close( bin_file );
   end Create_Indall_Wave_I;




   procedure Create_Indresp_Wave_I( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Indresp_IO.File_Type;
      rec         : Indresp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Indresp_IO.Create (bin_file, Indresp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.doid := Convert( slices, 3, ( -9, -7 ) );
            rec.doim := Convert_Doim_Type( Get( slices, 4 ));
            rec.doiy4 := Convert( slices, 5, ( -9, -8, -7, -2, -1 ) );
            rec.ivsoih := Convert( slices, 6, ( -9, -8 ) );
            rec.ivsoim := Convert( slices, 7, ( -9, -8 ) );
            rec.ivlyr := Convert( slices, 8, ( -9, -8, -7 ) );
            rec.ivstat2 := Convert_Ivstat2_Type( Get( slices, 9 ));
            rec.lknbrd := Convert_Aidpl1_Type( Get( slices, 10 ));
            rec.lkmove := Convert_Lkmove_Type( Get( slices, 11 ));
            rec.lkmovy := Convert_Lkmovy_Type( Get( slices, 12 ));
            rec.xpmove := Convert( slices, 13, ( -9, -8, -7, -2, -1 ) );
            rec.plnew := Convert( slices, 14, ( -9, -8, -7, -2, -1 ) );
            rec.plnowm := Convert_Jbbgm1_Type( Get( slices, 15 ));
            rec.plnowy4 := Convert( slices, 16, ( -9, -8, -7, -2, -1 ) );
            rec.movjb := Convert_Aidpl1_Type( Get( slices, 17 ));
            rec.movjba := Convert_Movjba_Type( Get( slices, 18 ));
            rec.movjbb := Convert_Movjba_Type( Get( slices, 19 ));
            rec.movjbc := Convert_Movjba_Type( Get( slices, 20 ));
            rec.movjbd := Convert_Movjba_Type( Get( slices, 21 ));
            rec.movjbe := Convert_Movjba_Type( Get( slices, 22 ));
            rec.movjbf := Convert_Movjba_Type( Get( slices, 23 ));
            rec.movjbg := Convert_Movjba_Type( Get( slices, 24 ));
            rec.movjbh := Convert_Movjba_Type( Get( slices, 25 ));
            rec.movjbi := Convert_Movjba_Type( Get( slices, 26 ));
            rec.movy1 := Convert_Movy1_Type( Get( slices, 27 ));
            rec.movy2 := Convert_Movy2_Type( Get( slices, 28 ));
            rec.dobm := Convert_Cjsem_Type( Get( slices, 29 ));
            rec.doby := Convert( slices, 30, ( -9, -8, -7, -2, -1 ) );
            rec.sex := Convert_Sex_Type( Get( slices, 31 ));
            rec.jbstat := Convert_Jbstat_Type( Get( slices, 32 ));
            rec.edlyr := Convert_Aidpl1_Type( Get( slices, 33 ));
            rec.edtype1 := Convert_Edtype1_Type( Get( slices, 34 ));
            rec.edblyr1 := Convert_Boolean_With_Missing( Get( slices, 35 ));
            rec.edbgm1 := Convert_Edbgm1_Type( Get( slices, 36 ));
            rec.edbgy1 := Convert( slices, 37, ( -9, -8, -7, -2, -1 ) );
            rec.edenm1 := Convert_Edbgm1_Type( Get( slices, 38 ));
            rec.edeny1 := Convert( slices, 39, ( -9, -8, -7, -2, -1 ) );
            rec.edenne1 := Convert_Edenne1_Type( Get( slices, 40 ));
            rec.edfeea1 := Convert_Yes_Or_Missing_Type( Get( slices, 41 ));
            rec.edfeeb1 := Convert_Yes_Or_Missing_Type( Get( slices, 42 ));
            rec.edfeec1 := Convert_Yes_Or_Missing_Type( Get( slices, 43 ));
            rec.edfeed1 := Convert_Yes_Or_Missing_Type( Get( slices, 44 ));
            rec.edfeee1 := Convert_Yes_Or_Missing_Type( Get( slices, 45 ));
            rec.edfeef1 := Convert_Yes_Or_Missing_Type( Get( slices, 46 ));
            rec.edfeeg1 := Convert_Yes_Or_Missing_Type( Get( slices, 47 ));
            rec.edqual1 := Convert_Edqual1_Type( Get( slices, 48 ));
            rec.edqnn1 := Convert( slices, 49, ( -9, -8, -7, -2, -1 ) );
            rec.edqla1 := Convert_Yes_Or_Missing_Type( Get( slices, 50 ));
            rec.edqlb1 := Convert_Yes_Or_Missing_Type( Get( slices, 51 ));
            rec.edqlc1 := Convert_Yes_Or_Missing_Type( Get( slices, 52 ));
            rec.edqld1 := Convert_Yes_Or_Missing_Type( Get( slices, 53 ));
            rec.edqle1 := Convert_Yes_Or_Missing_Type( Get( slices, 54 ));
            rec.edqlf1 := Convert_Yes_Or_Missing_Type( Get( slices, 55 ));
            rec.edqlg1 := Convert_Yes_Or_Missing_Type( Get( slices, 56 ));
            rec.edqlh1 := Convert_Yes_Or_Missing_Type( Get( slices, 57 ));
            rec.edqli1 := Convert_Yes_Or_Missing_Type( Get( slices, 58 ));
            rec.edqlj1 := Convert( slices, 59, ( -9, -8, -7 ) );
            rec.edqlan1 := Convert( slices, 60, ( -9, -8, -7, -2, -1 ) );
            rec.edqlbn1 := Convert( slices, 61, ( -9, -8, -7, -2, -1 ) );
            rec.edqlcn1 := Convert( slices, 62, ( -9, -8, -7, -2, -1 ) );
            rec.edqldn1 := Convert( slices, 63, ( -9, -8, -7, -2, -1 ) );
            rec.edqlen1 := Convert( slices, 64, ( -9, -8, -7, -2, -1 ) );
            rec.edqlfn1 := Convert( slices, 65, ( -9, -8, -7, -2, -1 ) );
            rec.edqlgn1 := Convert( slices, 66, ( -9, -8, -7, -2, -1 ) );
            rec.edqlhn1 := Convert( slices, 67, ( -9, -8, -7, -2, -1 ) );
            rec.edqlin1 := Convert( slices, 68, ( -9, -8, -7, -2, -1 ) );
            rec.edqljn1 := Convert( slices, 69, ( -9, -8, -7, -2, -1 ) );
            rec.edoqln1 := Convert( slices, 70, ( -9, -8, -7, -2, -1 ) );
            rec.edoql1 := Convert_Edoql1_Type( Get( slices, 71 ));
            rec.edmore1 := Convert_Boolean_With_Missing( Get( slices, 72 ));
            rec.edtype2 := Convert_Edtype1_Type( Get( slices, 73 ));
            rec.edblyr2 := Convert_Boolean_With_Missing( Get( slices, 74 ));
            rec.edbgm2 := Convert_Edbgm1_Type( Get( slices, 75 ));
            rec.edbgy2 := Convert( slices, 76, ( -9, -8, -7, -2, -1 ) );
            rec.edenm2 := Convert_Edbgm1_Type( Get( slices, 77 ));
            rec.edeny2 := Convert( slices, 78, ( -9, -8, -7, -2, -1 ) );
            rec.edenne2 := Convert_Edenne2_Type( Get( slices, 79 ));
            rec.edfeea2 := Convert_Yes_Or_Missing_Type( Get( slices, 80 ));
            rec.edfeeb2 := Convert_Yes_Or_Missing_Type( Get( slices, 81 ));
            rec.edfeec2 := Convert_Yes_Or_Missing_Type( Get( slices, 82 ));
            rec.edfeed2 := Convert_Yes_Or_Missing_Type( Get( slices, 83 ));
            rec.edfeee2 := Convert_Yes_Or_Missing_Type( Get( slices, 84 ));
            rec.edfeef2 := Convert_Yes_Or_Missing_Type( Get( slices, 85 ));
            rec.edfeeg2 := Convert_Yes_Or_Missing_Type( Get( slices, 86 ));
            rec.edqual2 := Convert_Edqual1_Type( Get( slices, 87 ));
            rec.edqnn2 := Convert( slices, 88, ( -9, -8, -7, -2, -1 ) );
            rec.edqla2 := Convert_Yes_Or_Missing_Type( Get( slices, 89 ));
            rec.edqlb2 := Convert_Yes_Or_Missing_Type( Get( slices, 90 ));
            rec.edqlc2 := Convert_Yes_Or_Missing_Type( Get( slices, 91 ));
            rec.edqld2 := Convert_Yes_Or_Missing_Type( Get( slices, 92 ));
            rec.edqle2 := Convert_Yes_Or_Missing_Type( Get( slices, 93 ));
            rec.edqlf2 := Convert_Yes_Or_Missing_Type( Get( slices, 94 ));
            rec.edqlg2 := Convert_Yes_Or_Missing_Type( Get( slices, 95 ));
            rec.edqlh2 := Convert_Yes_Or_Missing_Type( Get( slices, 96 ));
            rec.edqli2 := Convert_Yes_Or_Missing_Type( Get( slices, 97 ));
            rec.edqlj2 := Convert( slices, 98, ( -9, -8, -7 ) );
            rec.edqlan2 := Convert( slices, 99, ( -9, -8, -7, -2, -1 ) );
            rec.edqlbn2 := Convert( slices, 100, ( -9, -8, -7, -2, -1 ) );
            rec.edqlcn2 := Convert( slices, 101, ( -9, -8, -7, -2, -1 ) );
            rec.edqldn2 := Convert( slices, 102, ( -9, -8, -7, -2, -1 ) );
            rec.edqlen2 := Convert( slices, 103, ( -9, -8, -7, -2, -1 ) );
            rec.edqlfn2 := Convert( slices, 104, ( -9, -8, -7, -2, -1 ) );
            rec.edqlgn2 := Convert( slices, 105, ( -9, -8, -7, -2, -1 ) );
            rec.edqlhn2 := Convert( slices, 106, ( -9, -8, -7, -2, -1 ) );
            rec.edqlin2 := Convert( slices, 107, ( -9, -8, -7, -2, -1 ) );
            rec.edqljn2 := Convert( slices, 108, ( -9, -8, -7, -2, -1 ) );
            rec.edoqln2 := Convert( slices, 109, ( -9, -8, -7, -2, -1 ) );
            rec.edoql2 := Convert_Edoql1_Type( Get( slices, 110 ));
            rec.edmore2 := Convert_Boolean_With_Missing( Get( slices, 111 ));
            rec.mlstat := Convert_Mlstat_Type( Get( slices, 112 ));
            rec.mlchng := Convert_Bscon_Type( Get( slices, 113 ));
            rec.mlchm := Convert_Mlchm_Type( Get( slices, 114 ));
            rec.mlchy4 := Convert( slices, 115, ( -9, -8, -7, -2, -1 ) );
            rec.plbornd := Convert_Plbornd_Type( Get( slices, 116 ));
            rec.plbornc := Convert_Plbornc_Type( Get( slices, 117 ));
            rec.yr2uk4 := Convert( slices, 118, ( -9, -8, -7, -2, -1 ) );
            rec.citzn1 := Convert( slices, 119, ( -9, -8, -7, -2, -1 ) );
            rec.citzn2 := Convert_Citzn2_Type( Get( slices, 120 ));
            rec.race := Convert_Race_Type( Get( slices, 121 ));
            rec.paju := Convert_Paju_Type( Get( slices, 122 ));
            rec.pasoc := Convert( slices, 123, ( -9, -8, -7, -2, -1 ) );
            rec.pasemp := Convert_J2semp_Type( Get( slices, 124 ));
            rec.paboss := Convert_Maboss_Type( Get( slices, 125 ));
            rec.pamngr := Convert_Mamngr_Type( Get( slices, 126 ));
            rec.maju := Convert_Maju_Type( Get( slices, 127 ));
            rec.masoc := Convert( slices, 128, ( -9, -8, -7, -2, -1 ) );
            rec.masemp := Convert_J2semp_Type( Get( slices, 129 ));
            rec.maboss := Convert_Maboss_Type( Get( slices, 130 ));
            rec.mamngr := Convert_Mamngr_Type( Get( slices, 131 ));
            rec.j1soc := Convert( slices, 132, ( -9, -8, -7, -2, -1 ) );
            rec.j1none := Convert_J1none_Type( Get( slices, 133 ));
            rec.j1semp := Convert_J1semp_Type( Get( slices, 134 ));
            rec.j1boss := Convert_J1boss_Type( Get( slices, 135 ));
            rec.j1mngr := Convert_J1mngr_Type( Get( slices, 136 ));
            rec.lcoh := Convert_Aidpl1_Type( Get( slices, 137 ));
            rec.coh1bm := Convert_Ch1bm_Type( Get( slices, 138 ));
            rec.coh1by := Convert( slices, 139, ( -9, -8, -7, -2, -1 ) );
            rec.coh1mr := Convert_Coh1mr_Type( Get( slices, 140 ));
            rec.coh1em := Convert_Ch1bm_Type( Get( slices, 141 ));
            rec.coh1ey := Convert( slices, 142, ( -9, -8, -7, -2, -1 ) );
            rec.nmar := Convert_Nmar_Type( Get( slices, 143 ));
            rec.lmar1m := Convert_Ch1bm_Type( Get( slices, 144 ));
            rec.lmar1y := Convert( slices, 145, ( -9, -8, -7, -2, -1 ) );
            rec.lprnt := Convert_Lprnt_Type( Get( slices, 146 ));
            rec.lnprnt := Convert( slices, 147, ( -9, -8, -7, -2, -1 ) );
            rec.ch1bm := Convert_Ch1bm_Type( Get( slices, 148 ));
            rec.ch1by := Convert( slices, 149, ( -9, -8, -7, -2, -1 ) );
            rec.school := Convert_School_Type( Get( slices, 150 ));
            rec.scend := Convert( slices, 151, ( -9, -8, -7, -2, -1 ) );
            rec.sctype := Convert_Sctype_Type( Get( slices, 152 ));
            rec.scnow := Convert_Cjsck2_Type( Get( slices, 153 ));
            rec.fetype := Convert_Fetype_Type( Get( slices, 154 ));
            rec.fenow := Convert_Fenow_Type( Get( slices, 155 ));
            rec.feend := Convert( slices, 156, ( -9, -8, -7, -2, -1 ) );
            rec.qfhas := Convert_Bscon_Type( Get( slices, 157 ));
            rec.qfa := Convert_Qfa_Type( Get( slices, 158 ));
            rec.qfb := Convert_Qfb_Type( Get( slices, 159 ));
            rec.qfc := Convert_Qfc_Type( Get( slices, 160 ));
            rec.qfd := Convert_Qfd_Type( Get( slices, 161 ));
            rec.qfe := Convert_Qfe_Type( Get( slices, 162 ));
            rec.qff := Convert_Qff_Type( Get( slices, 163 ));
            rec.qfg := Convert_Qfg_Type( Get( slices, 164 ));
            rec.qfh := Convert_Qfh_Type( Get( slices, 165 ));
            rec.qfi := Convert_Qfi_Type( Get( slices, 166 ));
            rec.qfj := Convert_Qfj_Type( Get( slices, 167 ));
            rec.qfk := Convert_Qfk_Type( Get( slices, 168 ));
            rec.qfl := Convert_Qfl_Type( Get( slices, 169 ));
            rec.qfm := Convert_Qfm_Type( Get( slices, 170 ));
            rec.qfn := Convert_Qfn_Type( Get( slices, 171 ));
            rec.qfed := Convert_Bscon_Type( Get( slices, 172 ));
            rec.qfeda := Convert_Qfeda_Type( Get( slices, 173 ));
            rec.nqfeda := Convert( slices, 174, ( -9, -8, -7, -2, -1 ) );
            rec.qfedb := Convert_Qfedb_Type( Get( slices, 175 ));
            rec.nqfedb := Convert( slices, 176, ( -9, -8, -7, -2, -1 ) );
            rec.qfedc := Convert_Qfedc_Type( Get( slices, 177 ));
            rec.nqfedc := Convert( slices, 178, ( -9, -8, -7, -2, -1 ) );
            rec.qfedd := Convert_Qfedd_Type( Get( slices, 179 ));
            rec.nqfedd := Convert( slices, 180, ( -9, -8, -7, -2, -1 ) );
            rec.qfede := Convert_Qfede_Type( Get( slices, 181 ));
            rec.nqfede := Convert( slices, 182, ( -9, -8, -7, -2, -1 ) );
            rec.qfedf := Convert_Qfedf_Type( Get( slices, 183 ));
            rec.nqfedf := Convert( slices, 184, ( -9, -8, -7, -2, -1 ) );
            rec.qfedg := Convert_Qfedg_Type( Get( slices, 185 ));
            rec.nqfedg := Convert( slices, 186, ( -9, -8, -7, -2, -1 ) );
            rec.qfedh := Convert_Qfedh_Type( Get( slices, 187 ));
            rec.nqfedh := Convert( slices, 188, ( -9, -8, -7, -2, -1 ) );
            rec.qfedi := Convert_Qfedi_Type( Get( slices, 189 ));
            rec.nqfedi := Convert( slices, 190, ( -9, -8, -7, -2, -1 ) );
            rec.qfedj := Convert_Qfedj_Type( Get( slices, 191 ));
            rec.nqfedj := Convert( slices, 192, ( -9, -8, -7, -2, -1 ) );
            rec.qfedt := Convert_Qfedt_Type( Get( slices, 193 ));
            rec.nqfedt := Convert( slices, 194, ( -9, -8, -7, -2, -1 ) );
            rec.qfedk := Convert_Qfedk_Type( Get( slices, 195 ));
            rec.nqfedk := Convert( slices, 196, ( -9, -8, -7, -2, -1 ) );
            rec.qfedl := Convert_Qfedl_Type( Get( slices, 197 ));
            rec.nqfedl := Convert( slices, 198, ( -9, -8, -7, -2, -1 ) );
            rec.qfedm := Convert_Qfedm_Type( Get( slices, 199 ));
            rec.nqfedm := Convert( slices, 200, ( -9, -8, -7, -2, -1 ) );
            rec.qfedn := Convert_Qfedn_Type( Get( slices, 201 ));
            rec.nqfedn := Convert( slices, 202, ( -9, -8, -7, -2, -1 ) );
            rec.qfedo := Convert_Qfedo_Type( Get( slices, 203 ));
            rec.nqfedo := Convert( slices, 204, ( -9, -8, -7, -2, -1 ) );
            rec.qfedp := Convert( slices, 205, ( -9, -8, -7 ) );
            rec.nqfedp := Convert( slices, 206, ( -9, -8, -7, -2, -1 ) );
            rec.qfedq := Convert_Qfedq_Type( Get( slices, 207 ));
            rec.nqfedq := Convert( slices, 208, ( -9, -8, -7, -2, -1 ) );
            rec.qfedr := Convert_Qfedr_Type( Get( slices, 209 ));
            rec.nqfedr := Convert( slices, 210, ( -9, -8, -7, -2, -1 ) );
            rec.qfeds := Convert_Hlprbm_Type( Get( slices, 211 ));
            rec.nqfeds := Convert( slices, 212, ( -9, -8, -7, -2, -1 ) );
            rec.train := Convert_Boolean_With_Missing( Get( slices, 213 ));
            rec.ntrain := Convert( slices, 214, ( -9, -8, -7, -2, -1 ) );
            rec.trplce1 := Convert_Trplce1_Type( Get( slices, 215 ));
            rec.trwhya1 := Convert_Boolean_With_Missing( Get( slices, 216 ));
            rec.trwhyb1 := Convert_Boolean_With_Missing( Get( slices, 217 ));
            rec.trwhyc1 := Convert_Boolean_With_Missing( Get( slices, 218 ));
            rec.trwhyd1 := Convert_Boolean_With_Missing( Get( slices, 219 ));
            rec.trwhye1 := Convert_Boolean_With_Missing( Get( slices, 220 ));
            rec.trq1 := Convert( slices, 221, ( -9, -8, -7 ) );
            rec.tru1 := Convert_Tru1_Type( Get( slices, 222 ));
            rec.trfeea1 := Convert_Nisjsa_Type( Get( slices, 223 ));
            rec.trfeeb1 := Convert_Yes_Or_Missing_Type( Get( slices, 224 ));
            rec.trfeec1 := Convert_Yes_Or_Missing_Type( Get( slices, 225 ));
            rec.trfeee1 := Convert_Yes_Or_Missing_Type( Get( slices, 226 ));
            rec.trfeef1 := Convert_Yes_Or_Missing_Type( Get( slices, 227 ));
            rec.trfeeg1 := Convert_Yes_Or_Missing_Type( Get( slices, 228 ));
            rec.trqlxp1 := Convert_Trqlxp1_Type( Get( slices, 229 ));
            rec.trqlac1 := Convert_Trqlac1_Type( Get( slices, 230 ));
            rec.trqlnn1 := Convert( slices, 231, ( -9, -8, -7, -2, -1 ) );
            rec.trqla1 := Convert_Yes_Or_Missing_Type( Get( slices, 232 ));
            rec.trqlb1 := Convert_Yes_Or_Missing_Type( Get( slices, 233 ));
            rec.trqlc1 := Convert_Yes_Or_Missing_Type( Get( slices, 234 ));
            rec.trqld1 := Convert_Yes_Or_Missing_Type( Get( slices, 235 ));
            rec.trqle1 := Convert_Yes_Or_Missing_Type( Get( slices, 236 ));
            rec.trqlf1 := Convert_Yes_Or_Missing_Type( Get( slices, 237 ));
            rec.trqlg1 := Convert_Yes_Or_Missing_Type( Get( slices, 238 ));
            rec.trqlh1 := Convert_Yes_Or_Missing_Type( Get( slices, 239 ));
            rec.trqli1 := Convert_Yes_Or_Missing_Type( Get( slices, 240 ));
            rec.trqlj1 := Convert( slices, 241, ( -9, -8, -7 ) );
            rec.trqlan1 := Convert( slices, 242, ( -9, -8, -7, -2, -1 ) );
            rec.trqlbn1 := Convert( slices, 243, ( -9, -8, -7, -2, -1 ) );
            rec.trqlcn1 := Convert( slices, 244, ( -9, -8, -7, -2, -1 ) );
            rec.trqldn1 := Convert( slices, 245, ( -9, -8, -7, -2, -1 ) );
            rec.trqlen1 := Convert( slices, 246, ( -9, -8, -7, -2, -1 ) );
            rec.trqlfn1 := Convert( slices, 247, ( -9, -8, -7, -2, -1 ) );
            rec.trqlgn1 := Convert( slices, 248, ( -9, -8, -7, -2, -1 ) );
            rec.trqlhn1 := Convert( slices, 249, ( -9, -8, -7, -2, -1 ) );
            rec.trqlin1 := Convert( slices, 250, ( -9, -8, -7, -2, -1 ) );
            rec.trqljn1 := Convert( slices, 251, ( -9, -8, -7, -2, -1 ) );
            rec.troqln1 := Convert( slices, 252, ( -9, -8, -7, -2, -1 ) );
            rec.troql1 := Convert_Troql1_Type( Get( slices, 253 ));
            rec.trmore1 := Convert_Boolean_With_Missing( Get( slices, 254 ));
            rec.trplce2 := Convert_Trplce1_Type( Get( slices, 255 ));
            rec.trwhya2 := Convert_Boolean_With_Missing( Get( slices, 256 ));
            rec.trwhyb2 := Convert_Boolean_With_Missing( Get( slices, 257 ));
            rec.trwhyc2 := Convert_Boolean_With_Missing( Get( slices, 258 ));
            rec.trwhyd2 := Convert_Boolean_With_Missing( Get( slices, 259 ));
            rec.trwhye2 := Convert_Boolean_With_Missing( Get( slices, 260 ));
            rec.trq2 := Convert( slices, 261, ( -9, -8, -7 ) );
            rec.tru2 := Convert_Tru1_Type( Get( slices, 262 ));
            rec.trfeea2 := Convert_Nisjsa_Type( Get( slices, 263 ));
            rec.trfeeb2 := Convert_Yes_Or_Missing_Type( Get( slices, 264 ));
            rec.trfeec2 := Convert_Yes_Or_Missing_Type( Get( slices, 265 ));
            rec.trfeee2 := Convert_Yes_Or_Missing_Type( Get( slices, 266 ));
            rec.trfeef2 := Convert_Yes_Or_Missing_Type( Get( slices, 267 ));
            rec.trfeeg2 := Convert_Yes_Or_Missing_Type( Get( slices, 268 ));
            rec.trqlxp2 := Convert_Trqlxp1_Type( Get( slices, 269 ));
            rec.trqlac2 := Convert_Trqlac1_Type( Get( slices, 270 ));
            rec.trqlnn2 := Convert( slices, 271, ( -9, -8, -7, -2, -1 ) );
            rec.trqla2 := Convert_Yes_Or_Missing_Type( Get( slices, 272 ));
            rec.trqlb2 := Convert_Yes_Or_Missing_Type( Get( slices, 273 ));
            rec.trqlc2 := Convert_Yes_Or_Missing_Type( Get( slices, 274 ));
            rec.trqld2 := Convert_Yes_Or_Missing_Type( Get( slices, 275 ));
            rec.trqle2 := Convert_Yes_Or_Missing_Type( Get( slices, 276 ));
            rec.trqlf2 := Convert_Yes_Or_Missing_Type( Get( slices, 277 ));
            rec.trqlg2 := Convert_Yes_Or_Missing_Type( Get( slices, 278 ));
            rec.trqlh2 := Convert_Yes_Or_Missing_Type( Get( slices, 279 ));
            rec.trqli2 := Convert_Yes_Or_Missing_Type( Get( slices, 280 ));
            rec.trqlj2 := Convert( slices, 281, ( -9, -8, -7 ) );
            rec.trqlan2 := Convert( slices, 282, ( -9, -8, -7, -2, -1 ) );
            rec.trqlbn2 := Convert( slices, 283, ( -9, -8, -7, -2, -1 ) );
            rec.trqlcn2 := Convert( slices, 284, ( -9, -8, -7, -2, -1 ) );
            rec.trqldn2 := Convert( slices, 285, ( -9, -8, -7, -2, -1 ) );
            rec.trqlen2 := Convert( slices, 286, ( -9, -8, -7, -2, -1 ) );
            rec.trqlfn2 := Convert( slices, 287, ( -9, -8, -7, -2, -1 ) );
            rec.trqlgn2 := Convert( slices, 288, ( -9, -8, -7, -2, -1 ) );
            rec.trqlhn2 := Convert( slices, 289, ( -9, -8, -7, -2, -1 ) );
            rec.trqlin2 := Convert( slices, 290, ( -9, -8, -7, -2, -1 ) );
            rec.trqljn2 := Convert( slices, 291, ( -9, -8, -7, -2, -1 ) );
            rec.troqln2 := Convert( slices, 292, ( -9, -8, -7, -2, -1 ) );
            rec.troql2 := Convert_Troql2_Type( Get( slices, 293 ));
            rec.trmore2 := Convert_Boolean_With_Missing( Get( slices, 294 ));
            rec.trplce3 := Convert_Trplce1_Type( Get( slices, 295 ));
            rec.trwhya3 := Convert_Boolean_With_Missing( Get( slices, 296 ));
            rec.trwhyb3 := Convert_Boolean_With_Missing( Get( slices, 297 ));
            rec.trwhyc3 := Convert_Boolean_With_Missing( Get( slices, 298 ));
            rec.trwhyd3 := Convert_Boolean_With_Missing( Get( slices, 299 ));
            rec.trwhye3 := Convert_Boolean_With_Missing( Get( slices, 300 ));
            rec.trq3 := Convert( slices, 301, ( -9, -8, -7 ) );
            rec.tru3 := Convert_Tru1_Type( Get( slices, 302 ));
            rec.trfeea3 := Convert_Nisjsa_Type( Get( slices, 303 ));
            rec.trfeeb3 := Convert_Yes_Or_Missing_Type( Get( slices, 304 ));
            rec.trfeec3 := Convert_Yes_Or_Missing_Type( Get( slices, 305 ));
            rec.trfeee3 := Convert_Yes_Or_Missing_Type( Get( slices, 306 ));
            rec.trfeef3 := Convert_Yes_Or_Missing_Type( Get( slices, 307 ));
            rec.trfeeg3 := Convert_Yes_Or_Missing_Type( Get( slices, 308 ));
            rec.trqlxp3 := Convert_Trqlxp1_Type( Get( slices, 309 ));
            rec.trqlac3 := Convert_Trqlac1_Type( Get( slices, 310 ));
            rec.trqlnn3 := Convert( slices, 311, ( -9, -8, -7, -2, -1 ) );
            rec.trqla3 := Convert_Yes_Or_Missing_Type( Get( slices, 312 ));
            rec.trqlb3 := Convert_Yes_Or_Missing_Type( Get( slices, 313 ));
            rec.trqlc3 := Convert_Yes_Or_Missing_Type( Get( slices, 314 ));
            rec.trqld3 := Convert_Yes_Or_Missing_Type( Get( slices, 315 ));
            rec.trqle3 := Convert_Yes_Or_Missing_Type( Get( slices, 316 ));
            rec.trqlf3 := Convert_Yes_Or_Missing_Type( Get( slices, 317 ));
            rec.trqlg3 := Convert_Yes_Or_Missing_Type( Get( slices, 318 ));
            rec.trqlh3 := Convert_Yes_Or_Missing_Type( Get( slices, 319 ));
            rec.trqli3 := Convert_Yes_Or_Missing_Type( Get( slices, 320 ));
            rec.trqlj3 := Convert( slices, 321, ( -9, -8, -7 ) );
            rec.trqlan3 := Convert( slices, 322, ( -9, -8, -7, -2, -1 ) );
            rec.trqlbn3 := Convert( slices, 323, ( -9, -8, -7, -2, -1 ) );
            rec.trqlcn3 := Convert( slices, 324, ( -9, -8, -7, -2, -1 ) );
            rec.trqldn3 := Convert( slices, 325, ( -9, -8, -7, -2, -1 ) );
            rec.trqlen3 := Convert( slices, 326, ( -9, -8, -7, -2, -1 ) );
            rec.trqlfn3 := Convert( slices, 327, ( -9, -8, -7, -2, -1 ) );
            rec.trqlgn3 := Convert( slices, 328, ( -9, -8, -7, -2, -1 ) );
            rec.trqlhn3 := Convert( slices, 329, ( -9, -8, -7, -2, -1 ) );
            rec.trqlin3 := Convert( slices, 330, ( -9, -8, -7, -2, -1 ) );
            rec.trqljn3 := Convert( slices, 331, ( -9, -8, -7, -2, -1 ) );
            rec.troqln3 := Convert( slices, 332, ( -9, -8, -7, -2, -1 ) );
            rec.troql3 := Convert_Troql2_Type( Get( slices, 333 ));
            rec.mabwt := Convert_Aglt20_Type( Get( slices, 334 ));
            rec.mabwtn := Convert( slices, 335, ( -9, -8, -7 ) );
            rec.bwtpn1 := Convert( slices, 336, ( -9, -8, -7 ) );
            rec.bwtag1 := Convert( slices, 337, ( -9, -8, -7 ) );
            rec.bwtxp1 := Convert_Boolean_With_Missing( Get( slices, 338 ));
            rec.bwtel1 := Convert_Bwtel_Type( Get( slices, 339 ));
            rec.bwtwk1 := Convert( slices, 340, ( -9, -8, -7, -2, -1 ) );
            rec.bwtkn1 := Convert_Bwtkn_Type( Get( slices, 341 ));
            rec.bwtlb1 := Convert( slices, 342, ( -9, -8, -7, -2, -1 ) );
            rec.bwtoz1 := Convert( slices, 343, ( -9, -8, -7, -2, -1 ) );
            rec.bwtgm1 := Convert( slices, 344, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.bwtg51 := Convert_Bwtg51_Type( Get( slices, 345 ));
            rec.bwtpn2 := Convert( slices, 346, ( -9, -8, -7 ) );
            rec.bwtag2 := Convert( slices, 347, ( -9, -8, -7 ) );
            rec.bwtxp2 := Convert_Boolean_With_Missing( Get( slices, 348 ));
            rec.bwtel2 := Convert_Bwtel2_Type( Get( slices, 349 ));
            rec.bwtwk2 := Convert( slices, 350, ( -9, -8, -7, -2, -1 ) );
            rec.bwtkn2 := Convert_Bwtkn_Type( Get( slices, 351 ));
            rec.bwtlb2 := Convert( slices, 352, ( -9, -8, -7 ) );
            rec.bwtoz2 := Convert( slices, 353, ( -9, -8, -7, -2, -1 ) );
            rec.bwtgm2 := Convert( slices, 354, ( -9, -8, -7 ) );
            rec.bwtg52 := Convert_Bwtg5_Type( Get( slices, 355 ));
            rec.bwtpn3 := Convert( slices, 356, ( -9, -8, -7 ) );
            rec.bwtag3 := Convert( slices, 357, ( -9, -8, -7 ) );
            rec.bwtxp3 := Convert_Boolean_With_Missing( Get( slices, 358 ));
            rec.bwtel3 := Convert_Bwtel2_Type( Get( slices, 359 ));
            rec.bwtwk3 := Convert( slices, 360, ( -9, -8, -7, -2, -1 ) );
            rec.bwtkn3 := Convert_Bwtkn_Type( Get( slices, 361 ));
            rec.bwtlb3 := Convert( slices, 362, ( -9, -8, -7 ) );
            rec.bwtoz3 := Convert( slices, 363, ( -9, -8, -7, -2, -1 ) );
            rec.bwtgm3 := Convert( slices, 364, ( -9, -8, -7 ) );
            rec.bwtg53 := Convert_Bwtg5_Type( Get( slices, 365 ));
            rec.bwtpn4 := Convert( slices, 366, ( -9, -8, -7 ) );
            rec.bwtag4 := Convert( slices, 367, ( -9, -8, -7 ) );
            rec.bwtxp4 := Convert_Boolean_With_Missing( Get( slices, 368 ));
            rec.bwtel4 := Convert_Bwtel2_Type( Get( slices, 369 ));
            rec.bwtwk4 := Convert( slices, 370, ( -9, -8, -7, -2, -1 ) );
            rec.bwtkn4 := Convert_Bwtkn4_Type( Get( slices, 371 ));
            rec.bwtlb4 := Convert( slices, 372, ( -9, -8, -7 ) );
            rec.bwtoz4 := Convert( slices, 373, ( -9, -8, -7, -1 ) );
            rec.bwtgm4 := Convert( slices, 374, ( -9, -8, -7 ) );
            rec.bwtg54 := Convert_Bwtg5_Type( Get( slices, 375 ));
            rec.natida := Convert_Yes_Or_Missing_Type( Get( slices, 376 ));
            rec.natidb := Convert_Yes_Or_Missing_Type( Get( slices, 377 ));
            rec.natidc := Convert_Yes_Or_Missing_Type( Get( slices, 378 ));
            rec.natidd := Convert_Yes_Or_Missing_Type( Get( slices, 379 ));
            rec.natide := Convert_Yes_Or_Missing_Type( Get( slices, 380 ));
            rec.natidf := Convert_Yes_Or_Missing_Type( Get( slices, 381 ));
            rec.natidg := Convert_Yes_Or_Missing_Type( Get( slices, 382 ));
            rec.natidh := Convert_Natidh_Type( Get( slices, 383 ));
            rec.natidi := Convert_Jbwkhrh_Type( Get( slices, 384 ));
            rec.natidmn := Convert_Natidmn_Type( Get( slices, 385 ));
            rec.maborn := Convert_Maborn_Type( Get( slices, 386 ));
            rec.paborn := Convert_Maborn_Type( Get( slices, 387 ));
            rec.wlsha := Convert_Yes_Or_Missing_Type( Get( slices, 388 ));
            rec.wlshb := Convert_Yes_Or_Missing_Type( Get( slices, 389 ));
            rec.wlshc := Convert_Yes_Or_Missing_Type( Get( slices, 390 ));
            rec.wlshd := Convert_Yes_Or_Missing_Type( Get( slices, 391 ));
            rec.wlshe := Convert_Jbwkhrh_Type( Get( slices, 392 ));
            rec.wlshua := Convert_Wlshua_Type( Get( slices, 393 ));
            rec.wlshub := Convert_Wlshua_Type( Get( slices, 394 ));
            rec.wlshuc := Convert_Wlshua_Type( Get( slices, 395 ));
            rec.wlshud := Convert_Wlshua_Type( Get( slices, 396 ));
            rec.wlshue := Convert_Wlshua_Type( Get( slices, 397 ));
            rec.ivda := Convert_Ivda_Type( Get( slices, 398 ));
            rec.ivdb := Convert_Ivdb_Type( Get( slices, 399 ));
            rec.ivdc := Convert_Ivdc_Type( Get( slices, 400 ));
            rec.ivdd := Convert_Ivdd_Type( Get( slices, 401 ));
            rec.ivde := Convert_Yes_Or_Missing_Type( Get( slices, 402 ));
            rec.hldsbl := Convert_Bscon_Type( Get( slices, 403 ));
            rec.hlprb := Convert( slices, 404, ( -9, -8, -7, -2, -1 ) );
            rec.hlprba := Convert_Hlprba_Type( Get( slices, 405 ));
            rec.hlprbb := Convert_Hlprbb_Type( Get( slices, 406 ));
            rec.hlprbc := Convert_Hlprbc_Type( Get( slices, 407 ));
            rec.hlprbd := Convert_Hlprbd_Type( Get( slices, 408 ));
            rec.hlprbe := Convert_Hlprbe_Type( Get( slices, 409 ));
            rec.hlprbf := Convert_Hlprbf_Type( Get( slices, 410 ));
            rec.hlprbg := Convert_Hlprbg_Type( Get( slices, 411 ));
            rec.hlprbh := Convert_Hlprbh_Type( Get( slices, 412 ));
            rec.hlprbi := Convert_Hlprbi_Type( Get( slices, 413 ));
            rec.hlprbj := Convert_Hlprbj_Type( Get( slices, 414 ));
            rec.hlprbk := Convert_Hlprbk_Type( Get( slices, 415 ));
            rec.hlprbl := Convert_Hlprbl_Type( Get( slices, 416 ));
            rec.hlprbm := Convert_Hlprbm_Type( Get( slices, 417 ));
            rec.hlsf1 := Convert_Hlsf1_Type( Get( slices, 418 ));
            rec.hlsf2 := Convert( slices, 419, ( -9, -8, -7, -2, -1 ) );
            rec.hlsf3a := Convert_Hlsf3a_Type( Get( slices, 420 ));
            rec.hlsf3b := Convert_Hlsf3a_Type( Get( slices, 421 ));
            rec.hlsf3c := Convert_Hlsf3a_Type( Get( slices, 422 ));
            rec.hlsf3d := Convert_Hlsf3a_Type( Get( slices, 423 ));
            rec.hlsf3e := Convert_Hlsf3a_Type( Get( slices, 424 ));
            rec.hlsf3f := Convert_Hlsf3a_Type( Get( slices, 425 ));
            rec.hlsf3g := Convert_Hlsf3a_Type( Get( slices, 426 ));
            rec.hlsf3h := Convert_Hlsf3a_Type( Get( slices, 427 ));
            rec.hlsf3i := Convert_Hlsf3a_Type( Get( slices, 428 ));
            rec.hlsf3j := Convert_Hlsf3a_Type( Get( slices, 429 ));
            rec.hlsf4a := Convert_Edblyr3_Type( Get( slices, 430 ));
            rec.hlsf4b := Convert_Edblyr3_Type( Get( slices, 431 ));
            rec.hlsf4c := Convert_Edblyr3_Type( Get( slices, 432 ));
            rec.hlsf4d := Convert_Edblyr3_Type( Get( slices, 433 ));
            rec.hlsf5a := Convert_Edblyr3_Type( Get( slices, 434 ));
            rec.hlsf5b := Convert_Edblyr3_Type( Get( slices, 435 ));
            rec.hlsf5c := Convert_Edblyr3_Type( Get( slices, 436 ));
            rec.hlsf6 := Convert_Hlsf6_Type( Get( slices, 437 ));
            rec.hlsf7 := Convert_Hlsf7_Type( Get( slices, 438 ));
            rec.hlsf8 := Convert_Hlsf6_Type( Get( slices, 439 ));
            rec.hlsf9a := Convert_Hlsf9a_Type( Get( slices, 440 ));
            rec.hlsf9b := Convert_Hlsf9a_Type( Get( slices, 441 ));
            rec.hlsf9c := Convert_Hlsf9a_Type( Get( slices, 442 ));
            rec.hlsf9d := Convert_Hlsf9a_Type( Get( slices, 443 ));
            rec.hlsf9e := Convert_Hlsf9a_Type( Get( slices, 444 ));
            rec.hlsf9f := Convert_Hlsf9a_Type( Get( slices, 445 ));
            rec.hlsf9g := Convert_Hlsf9a_Type( Get( slices, 446 ));
            rec.hlsf9h := Convert_Hlsf9a_Type( Get( slices, 447 ));
            rec.hlsf9i := Convert_Hlsf9a_Type( Get( slices, 448 ));
            rec.hlsf9j := Convert_Hlsf9a_Type( Get( slices, 449 ));
            rec.hlsf10a := Convert_Hlsf10a_Type( Get( slices, 450 ));
            rec.hlsf10b := Convert_Hlsf10a_Type( Get( slices, 451 ));
            rec.hlsf10c := Convert_Hlsf10a_Type( Get( slices, 452 ));
            rec.hlsf10d := Convert_Hlsf10a_Type( Get( slices, 453 ));
            rec.hl2gp := Convert_Hl2gp_Type( Get( slices, 454 ));
            rec.hl2hop := Convert( slices, 455, ( -9, -8, -7, -2, -1 ) );
            rec.xdts := Convert_Bscon_Type( Get( slices, 456 ));
            rec.nxdts := Convert_Nxdts_Type( Get( slices, 457 ));
            rec.hosp := Convert_Hlsv_Type( Get( slices, 458 ));
            rec.hospd := Convert( slices, 459, ( -9, -8, -7, -2, -1 ) );
            rec.hospch := Convert_Hospch_Type( Get( slices, 460 ));
            rec.hospnhs := Convert_Hospnhs_Type( Get( slices, 461 ));
            rec.hlcvr := Convert_Hlcvr_Type( Get( slices, 462 ));
            rec.hlcvrh := Convert_Hlcvrh_Type( Get( slices, 463 ));
            rec.hlcvrl := Convert( slices, 464, ( -9, -8, -7, -2, -1 ) );
            rec.hlsv := Convert_Hlsv_Type( Get( slices, 465 ));
            rec.hlsva := Convert_Hlsva_Type( Get( slices, 466 ));
            rec.hlsvan := Convert_Hlsvan_Type( Get( slices, 467 ));
            rec.hlsvaf := Convert_Hlsvaf_Type( Get( slices, 468 ));
            rec.hlsvb := Convert_Hlsvb_Type( Get( slices, 469 ));
            rec.hlsvbn := Convert_Hlsvan_Type( Get( slices, 470 ));
            rec.hlsvbf := Convert_Hlsvaf_Type( Get( slices, 471 ));
            rec.hlsvc := Convert_Hlsvc_Type( Get( slices, 472 ));
            rec.hlsvcn := Convert_Hlsvan_Type( Get( slices, 473 ));
            rec.hlsvcf := Convert_Hlsvaf_Type( Get( slices, 474 ));
            rec.hlsvd := Convert_Hlsvd_Type( Get( slices, 475 ));
            rec.hlsvdn := Convert_Hlsvan_Type( Get( slices, 476 ));
            rec.hlsvdf := Convert_Hlsvaf_Type( Get( slices, 477 ));
            rec.hlsve := Convert_Hlsve_Type( Get( slices, 478 ));
            rec.hlsven := Convert_Hlsvan_Type( Get( slices, 479 ));
            rec.hlsvef := Convert_Hlsvaf_Type( Get( slices, 480 ));
            rec.hlsvf := Convert_Hlsvf_Type( Get( slices, 481 ));
            rec.hlsvfn := Convert_Hlsvan_Type( Get( slices, 482 ));
            rec.hlsvff := Convert_Hlsvaf_Type( Get( slices, 483 ));
            rec.hlsvg := Convert_Hlsvg_Type( Get( slices, 484 ));
            rec.hlsvgn := Convert_Hlsvan_Type( Get( slices, 485 ));
            rec.hlsvgf := Convert_Hlsvaf_Type( Get( slices, 486 ));
            rec.hlsvh := Convert_Hlsvh_Type( Get( slices, 487 ));
            rec.hlsvhn := Convert_Hlsvan_Type( Get( slices, 488 ));
            rec.hlsvhf := Convert_Hlsvaf_Type( Get( slices, 489 ));
            rec.hlsvi := Convert_Hlsvi_Type( Get( slices, 490 ));
            rec.hlsvin := Convert_Hlsvan_Type( Get( slices, 491 ));
            rec.hlsvif := Convert_Hlsvaf_Type( Get( slices, 492 ));
            rec.hlsvj := Convert_Hlsvj_Type( Get( slices, 493 ));
            rec.hlsvjn := Convert_Hlsvan_Type( Get( slices, 494 ));
            rec.hlsvjf := Convert_Hlsvaf_Type( Get( slices, 495 ));
            rec.hlsvk := Convert_Hlsvk_Type( Get( slices, 496 ));
            rec.hlsvkn := Convert_Hlsvan_Type( Get( slices, 497 ));
            rec.hlsvkf := Convert_Hlsvaf_Type( Get( slices, 498 ));
            rec.hlsvl := Convert_Hlsvl_Type( Get( slices, 499 ));
            rec.hlsvln := Convert_Hlsvln_Type( Get( slices, 500 ));
            rec.hlsvlf := Convert_Hlsvlf_Type( Get( slices, 501 ));
            rec.hlsvm := Convert_Hlsvm_Type( Get( slices, 502 ));
            rec.hlsvmn := Convert_Hlsvln_Type( Get( slices, 503 ));
            rec.hlsvmf := Convert_Hlsvlf_Type( Get( slices, 504 ));
            rec.hlck := Convert_Aidpl1_Type( Get( slices, 505 ));
            rec.hlcka := Convert_Hlcka_Type( Get( slices, 506 ));
            rec.hlckan := Convert_Hlckan_Type( Get( slices, 507 ));
            rec.hlckb := Convert_Hlcka_Type( Get( slices, 508 ));
            rec.hlckbn := Convert_Hlckan_Type( Get( slices, 509 ));
            rec.hlckc := Convert_Hlcka_Type( Get( slices, 510 ));
            rec.hlckcn := Convert_Hlckan_Type( Get( slices, 511 ));
            rec.hlckd := Convert_Hlcka_Type( Get( slices, 512 ));
            rec.hlckdn := Convert_Hlckan_Type( Get( slices, 513 ));
            rec.hlcke := Convert_Hlcka_Type( Get( slices, 514 ));
            rec.hlcken := Convert_Hlckan_Type( Get( slices, 515 ));
            rec.hlckf := Convert_Hlcka_Type( Get( slices, 516 ));
            rec.hlckfn := Convert_Hlckan_Type( Get( slices, 517 ));
            rec.hlckg := Convert_Hlcka_Type( Get( slices, 518 ));
            rec.hlckgn := Convert_Hlckan_Type( Get( slices, 519 ));
            rec.hlckh := Convert_Hlcka_Type( Get( slices, 520 ));
            rec.hlckhn := Convert_Hlckan_Type( Get( slices, 521 ));
            rec.hlcki := Convert_Hlcki_Type( Get( slices, 522 ));
            rec.hlckin := Convert_Hlckin_Type( Get( slices, 523 ));
            rec.smever := Convert_Edblyr3_Type( Get( slices, 524 ));
            rec.smnow := Convert_Edblyr3_Type( Get( slices, 525 ));
            rec.ncigs := Convert( slices, 526, ( -9, -8, -7, -2, -1 ) );
            rec.smcigs := Convert_Smcigs_Type( Get( slices, 527 ));
            rec.smncigs := Convert( slices, 528, ( -9, -8, -7, -2, -1 ) );
            rec.smstop := Convert_Smstop_Type( Get( slices, 529 ));
            rec.smagbg := Convert( slices, 530, ( -9, -8, -7, -3, -2, -1 ) );
            rec.aidhh := Convert_Aidhh_Type( Get( slices, 531 ));
            rec.aidhua := Convert( slices, 532, ( -9, -8, -7, -1 ) );
            rec.aidhub := Convert( slices, 533, ( -9, -8, -7 ) );
            rec.aidhuc := Convert( slices, 534, ( -9, -8, -7 ) );
            rec.aidxhh := Convert_Aidxhh_Type( Get( slices, 535 ));
            rec.naidxhh := Convert_Naidxhh_Type( Get( slices, 536 ));
            rec.aidhu1 := Convert_Aidhu1_Type( Get( slices, 537 ));
            rec.aidhu2 := Convert_Aidhu2_Type( Get( slices, 538 ));
            rec.aidhrs := Convert_Aidhrs_Type( Get( slices, 539 ));
            rec.ivma := Convert_Ivda_Type( Get( slices, 540 ));
            rec.ivmb := Convert_Ivdb_Type( Get( slices, 541 ));
            rec.ivmc := Convert_Ivec_Type( Get( slices, 542 ));
            rec.ivmd := Convert_Ivdd_Type( Get( slices, 543 ));
            rec.ivme := Convert_Ivee_Type( Get( slices, 544 ));
            rec.jbhas := Convert_Frnow_Type( Get( slices, 545 ));
            rec.jboff := Convert_Jboff_Type( Get( slices, 546 ));
            rec.jboffy := Convert_Jboffy_Type( Get( slices, 547 ));
            rec.jbterm1 := Convert_Jbterm1_Type( Get( slices, 548 ));
            rec.jbterm2 := Convert_Jbterm2_Type( Get( slices, 549 ));
            rec.jbsoc := Convert( slices, 550, ( -9, -8, -2, -1 ) );
            rec.jbsic := Convert( slices, 551, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.jbsemp := Convert_Jbsemp_Type( Get( slices, 552 ));
            rec.jbmngr := Convert_Jbmngr_Type( Get( slices, 553 ));
            rec.jbsize := Convert_Jbsize_Type( Get( slices, 554 ));
            rec.jbhrs := Convert( slices, 555, ( -9, -8, -7, -2, -1 ) );
            rec.jbot := Convert( slices, 556, ( -9, -8, -7, -2, -1 ) );
            rec.jbotpd := Convert( slices, 557, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbhrlk := Convert_Jbhrlk_Type( Get( slices, 558 ));
            rec.jbpl := Convert_Jbpl_Type( Get( slices, 559 ));
            rec.jbttwt := Convert( slices, 560, ( -9, -8, -7, -3, -2, -1 ) );
            rec.jbttwm := Convert_Jbttwm_Type( Get( slices, 561 ));
            rec.jbsat2 := Convert( slices, 562, ( -9, -8, -7, -2, -1 ) );
            rec.jbsat4 := Convert_Jbsat4_Type( Get( slices, 563 ));
            rec.jbsat6 := Convert_Jbsat4_Type( Get( slices, 564 ));
            rec.jbsat7 := Convert_Jbsat_Type( Get( slices, 565 ));
            rec.jbsat := Convert_Jbsat_Type( Get( slices, 566 ));
            rec.paygl := Convert( slices, 567, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.paygw := Convert( slices, 568, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.paynl := Convert( slices, 569, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.paynw := Convert( slices, 570, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.payslp := Convert_Payslp_Type( Get( slices, 571 ));
            rec.payusl := Convert_Aidpl1_Type( Get( slices, 572 ));
            rec.payu := Convert( slices, 573, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.payuw := Convert( slices, 574, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.payug := Convert_Paylyg_Type( Get( slices, 575 ));
            rec.paydf1 := Convert_Paydf1_Type( Get( slices, 576 ));
            rec.paydf2 := Convert_Paydf2_Type( Get( slices, 577 ));
            rec.paydf3 := Convert_Paydf3_Type( Get( slices, 578 ));
            rec.paydf4 := Convert_Paydf4_Type( Get( slices, 579 ));
            rec.paydf5 := Convert_Paydf5_Type( Get( slices, 580 ));
            rec.paydf6 := Convert_Paydf6_Type( Get( slices, 581 ));
            rec.paydf7 := Convert_Paydf7_Type( Get( slices, 582 ));
            rec.paydf8 := Convert_Paydf8_Type( Get( slices, 583 ));
            rec.paydf9 := Convert_Paydf9_Type( Get( slices, 584 ));
            rec.paytyp := Convert_Paytyp_Type( Get( slices, 585 ));
            rec.ovtpay := Convert_Bpar16_Type( Get( slices, 586 ));
            rec.extrate := Convert( slices, 587, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.extrest := Convert_Basrest_Type( Get( slices, 588 ));
            rec.basrate := Convert( slices, 589, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.basrest := Convert_Basrest_Type( Get( slices, 590 ));
            rec.ovtrate := Convert( slices, 591, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.ovtrest := Convert_Basrest_Type( Get( slices, 592 ));
            rec.ovtchc := Convert_Ovtchc_Type( Get( slices, 593 ));
            rec.paynmw1 := Convert_Boolean_With_Missing( Get( slices, 594 ));
            rec.paynmw2 := Convert_Paynmw2_Type( Get( slices, 595 ));
            rec.jbperfp := Convert_Coh1mr_Type( Get( slices, 596 ));
            rec.jbwkhra := Convert_Yes_Or_Missing_Type( Get( slices, 597 ));
            rec.jbwkhrb := Convert_Yes_Or_Missing_Type( Get( slices, 598 ));
            rec.jbwkhrc := Convert_Yes_Or_Missing_Type( Get( slices, 599 ));
            rec.jbwkhrd := Convert_Yes_Or_Missing_Type( Get( slices, 600 ));
            rec.jbwkhre := Convert_Yes_Or_Missing_Type( Get( slices, 601 ));
            rec.jbwkhrf := Convert_Yes_Or_Missing_Type( Get( slices, 602 ));
            rec.jbwkhrg := Convert_Yes_Or_Missing_Type( Get( slices, 603 ));
            rec.jbwkhrh := Convert_Jbwkhrh_Type( Get( slices, 604 ));
            rec.jbbgd := Convert( slices, 605, ( -9, -8, -7, -2, -1 ) );
            rec.jbbgm := Convert_Cjsbgm_Type( Get( slices, 606 ));
            rec.jbbgy4 := Convert( slices, 607, ( -9, -8, -7, -2, -1 ) );
            rec.jbbgly := Convert_Jbbgly_Type( Get( slices, 608 ));
            rec.jbsect := Convert_Jbsect_Type( Get( slices, 609 ));
            rec.jbonus := Convert_Aidpl1_Type( Get( slices, 610 ));
            rec.jbonam := Convert( slices, 611, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbong := Convert_Jbong_Type( Get( slices, 612 ));
            rec.jbrise := Convert_Aidpl1_Type( Get( slices, 613 ));
            rec.tujbpl := Convert_Aidpl1_Type( Get( slices, 614 ));
            rec.tuin1 := Convert_Aidpl1_Type( Get( slices, 615 ));
            rec.jbopps := Convert_Aidpl1_Type( Get( slices, 616 ));
            rec.jbtime := Convert_Jbtime_Type( Get( slices, 617 ));
            rec.pays := Convert( slices, 618, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.paysw := Convert( slices, 619, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.paysg := Convert_Paylyg_Type( Get( slices, 620 ));
            rec.jbpen := Convert_Aidpl1_Type( Get( slices, 621 ));
            rec.jbpenm := Convert_Aidpl1_Type( Get( slices, 622 ));
            rec.payly := Convert( slices, 623, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.paylyw := Convert( slices, 624, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.paylyg := Convert_Paylyg_Type( Get( slices, 625 ));
            rec.nmwchk := Convert_Nmwchk_Type( Get( slices, 626 ));
            rec.nmwhrch := Convert_Nmwhrch_Type( Get( slices, 627 ));
            rec.nmwpach := Convert_Boolean_With_Missing( Get( slices, 628 ));
            rec.nmwopch := Convert_Nmwopch_Type( Get( slices, 629 ));
            rec.nmwgbef := Convert_Boolean_With_Missing( Get( slices, 630 ));
            rec.nmwgfx := Convert_Boolean_With_Missing( Get( slices, 631 ));
            rec.nmwgfxa := Convert_Boolean_With_Missing( Get( slices, 632 ));
            rec.nmwgfxb := Convert_Boolean_With_Missing( Get( slices, 633 ));
            rec.nmwgfxc := Convert_Boolean_With_Missing( Get( slices, 634 ));
            rec.nmwgfxd := Convert_Boolean_With_Missing( Get( slices, 635 ));
            rec.jsboss := Convert_Jsboss_Type( Get( slices, 636 ));
            rec.jssize := Convert_Jssize_Type( Get( slices, 637 ));
            rec.jshrs := Convert( slices, 638, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jshrlk := Convert_Jbhrlk_Type( Get( slices, 639 ));
            rec.jstime := Convert_Jstime_Type( Get( slices, 640 ));
            rec.jstypeb := Convert_Jstypeb_Type( Get( slices, 641 ));
            rec.jsaccs := Convert_Jsaccs_Type( Get( slices, 642 ));
            rec.jspart := Convert_Jspart_Type( Get( slices, 643 ));
            rec.jsprbm := Convert_Cjsbgm_Type( Get( slices, 644 ));
            rec.jsprby4 := Convert( slices, 645, ( -9, -8, -7, -2, -1 ) );
            rec.jsprem := Convert_Cjsbgm_Type( Get( slices, 646 ));
            rec.jsprey4 := Convert( slices, 647, ( -9, -8, -7, -2, -1 ) );
            rec.jsprf := Convert( slices, 648, ( -9, -8, -7, -3, -2, -1 ) );
            rec.jsprls := Convert_Jsprls_Type( Get( slices, 649 ));
            rec.jsprtx := Convert_Jsprtx_Type( Get( slices, 650 ));
            rec.jsprni := Convert_Jsprni_Type( Get( slices, 651 ));
            rec.jspayu := Convert( slices, 652, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jspayw := Convert( slices, 653, ( -9.0, -8.0, -7.0, -4.0, -2.0, -1.0 ) );
            rec.jspytx := Convert_Jspytx_Type( Get( slices, 654 ));
            rec.jspyni := Convert_Jspyni_Type( Get( slices, 655 ));
            rec.jspl := Convert_Jspl_Type( Get( slices, 656 ));
            rec.jsttwt := Convert( slices, 657, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.jsttwm := Convert_Jsttwm_Type( Get( slices, 658 ));
            rec.jssat1 := Convert_Jssat1_Type( Get( slices, 659 ));
            rec.jssat2 := Convert_Jbsat_Type( Get( slices, 660 ));
            rec.jssat4 := Convert_Jbsat_Type( Get( slices, 661 ));
            rec.jssat5 := Convert_Jbsat_Type( Get( slices, 662 ));
            rec.jssat := Convert_Jbsat_Type( Get( slices, 663 ));
            rec.jsbgd := Convert( slices, 664, ( -9, -8, -7, -2, -1 ) );
            rec.jsbgm := Convert_Cjsbgm_Type( Get( slices, 665 ));
            rec.jsbgy4 := Convert( slices, 666, ( -9, -8, -7, -2, -1 ) );
            rec.jblkcha := Convert_Jblkcha_Type( Get( slices, 667 ));
            rec.jbxpcha := Convert_Jblkcha_Type( Get( slices, 668 ));
            rec.jblkchb := Convert_Boolean_With_Missing( Get( slices, 669 ));
            rec.jbxpchb := Convert_Boolean_With_Missing( Get( slices, 670 ));
            rec.jblkchc := Convert_Boolean_With_Missing( Get( slices, 671 ));
            rec.jbxpchc := Convert_Boolean_With_Missing( Get( slices, 672 ));
            rec.jblkchd := Convert_Boolean_With_Missing( Get( slices, 673 ));
            rec.jbxpchd := Convert_Boolean_With_Missing( Get( slices, 674 ));
            rec.jblkche := Convert_Boolean_With_Missing( Get( slices, 675 ));
            rec.jbxpche := Convert_Boolean_With_Missing( Get( slices, 676 ));
            rec.jbstrna := Convert_Jbstrna_Type( Get( slices, 677 ));
            rec.jbstrnb := Convert_Jbstrna_Type( Get( slices, 678 ));
            rec.jbstrnc := Convert_Jbstrna_Type( Get( slices, 679 ));
            rec.jbstrnd := Convert_Jbstrna_Type( Get( slices, 680 ));
            rec.rach12 := Convert_Hhch12_Type( Get( slices, 681 ));
            rec.jbchc1 := Convert_Jbchc1_Type( Get( slices, 682 ));
            rec.jbchc2 := Convert_Jbchc2_Type( Get( slices, 683 ));
            rec.jbchc3 := Convert_Jbchc3_Type( Get( slices, 684 ));
            rec.xpchcf := Convert_Xpchcf_Type( Get( slices, 685 ));
            rec.xpchc := Convert( slices, 686, ( -9, -8, -7, -2, -1 ) );
            rec.huxpch := Convert_Huxpch_Type( Get( slices, 687 ));
            rec.hunurs := Convert_Hunurs_Type( Get( slices, 688 ));
            rec.julk1 := Convert_Aidpl1_Type( Get( slices, 689 ));
            rec.julk4 := Convert_Bscon_Type( Get( slices, 690 ));
            rec.julka := Convert_Boolean_With_Missing( Get( slices, 691 ));
            rec.julkb := Convert_Boolean_With_Missing( Get( slices, 692 ));
            rec.julkc := Convert_Boolean_With_Missing( Get( slices, 693 ));
            rec.julkd := Convert_Boolean_With_Missing( Get( slices, 694 ));
            rec.julke := Convert_Boolean_With_Missing( Get( slices, 695 ));
            rec.julkjb := Convert_Aidpl1_Type( Get( slices, 696 ));
            rec.jubgn := Convert_Boolean_With_Missing( Get( slices, 697 ));
            rec.juspec := Convert_Juspec_Type( Get( slices, 698 ));
            rec.jusoc := Convert( slices, 699, ( -9, -8, -7, -2, -1 ) );
            rec.juhrsx := Convert( slices, 700, ( -9, -8, -7, -2, -1 ) );
            rec.jupayx := Convert( slices, 701, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jupayl := Convert( slices, 702, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.juhrsl := Convert( slices, 703, ( -9, -8, -7, -2, -1 ) );
            rec.nmwufxa := Convert_Boolean_With_Missing( Get( slices, 704 ));
            rec.nmwufxb := Convert_Nmwufxb_Type( Get( slices, 705 ));
            rec.eprosh := Convert_Cohxpm2_Type( Get( slices, 706 ));
            rec.jbasp1 := Convert_Jbasp1_Type( Get( slices, 707 ));
            rec.jbasp2 := Convert_Jbasp1_Type( Get( slices, 708 ));
            rec.jblky1 := Convert_Jblky1_Type( Get( slices, 709 ));
            rec.jblky2 := Convert_Jblky1_Type( Get( slices, 710 ));
            rec.eaage := Convert_Eaage_Type( Get( slices, 711 ));
            rec.jbub := Convert_Bscon_Type( Get( slices, 712 ));
            rec.jbuby := Convert_Jbuby_Type( Get( slices, 713 ));
            rec.j2has := Convert_Aidpl1_Type( Get( slices, 714 ));
            rec.j2soc := Convert( slices, 715, ( -9, -8, -7, -2, -1 ) );
            rec.j2semp := Convert_J2semp_Type( Get( slices, 716 ));
            rec.j2hrs := Convert( slices, 717, ( -9, -8, -7, -2, -1 ) );
            rec.j2pay := Convert( slices, 718, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ivea := Convert_Ivda_Type( Get( slices, 719 ));
            rec.iveb := Convert_Ivdb_Type( Get( slices, 720 ));
            rec.ivec := Convert_Ivec_Type( Get( slices, 721 ));
            rec.ived := Convert_Ivdd_Type( Get( slices, 722 ));
            rec.ivee := Convert_Ivee_Type( Get( slices, 723 ));
            rec.nemst := Convert_Nemst_Type( Get( slices, 724 ));
            rec.cjsbgd := Convert( slices, 725, ( -9, -8, -7, -2, -1 ) );
            rec.cjsbgm := Convert_Cjsbgm_Type( Get( slices, 726 ));
            rec.cjsbgy4 := Convert( slices, 727, ( -9, -8, -7, -2, -1 ) );
            rec.cjsbly := Convert_Cjsbly_Type( Get( slices, 728 ));
            rec.njbs := Convert( slices, 729, ( -9, -8, -7 ) );
            rec.jbhad := Convert_Aidpl1_Type( Get( slices, 730 ));
            rec.jlend4 := Convert( slices, 731, ( -9, -8, -7, -2, -1 ) );
            rec.jlsoc := Convert( slices, 732, ( -9, -8, -7, -2, -1 ) );
            rec.jlsic := Convert( slices, 733, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jlsemp := Convert_J2semp_Type( Get( slices, 734 ));
            rec.jlboss := Convert_Aidpl1_Type( Get( slices, 735 ));
            rec.jlmngr := Convert_Jlmngr_Type( Get( slices, 736 ));
            rec.jlsize := Convert_Jlsize_Type( Get( slices, 737 ));
            rec.ivja := Convert_Ivda_Type( Get( slices, 738 ));
            rec.ivjb := Convert_Ivdb_Type( Get( slices, 739 ));
            rec.ivjc := Convert_Ivec_Type( Get( slices, 740 ));
            rec.ivjd := Convert_Ivdd_Type( Get( slices, 741 ));
            rec.ivje := Convert_Ivee_Type( Get( slices, 742 ));
            rec.opnata := Convert_Opnata_Type( Get( slices, 743 ));
            rec.opnatb := Convert_Opnata_Type( Get( slices, 744 ));
            rec.opnatc := Convert_Opnata_Type( Get( slices, 745 ));
            rec.opnatd := Convert_Opnata_Type( Get( slices, 746 ));
            rec.opnate := Convert_Opnata_Type( Get( slices, 747 ));
            rec.opnatf := Convert_Opnata_Type( Get( slices, 748 ));
            rec.vote1 := Convert_Aidpl1_Type( Get( slices, 749 ));
            rec.vote2 := Convert_Aidpl1_Type( Get( slices, 750 ));
            rec.vote3 := Convert_Vote3_Type( Get( slices, 751 ));
            rec.vote4 := Convert_Vote3_Type( Get( slices, 752 ));
            rec.vote5 := Convert_Vote5_Type( Get( slices, 753 ));
            rec.vote7 := Convert_Vote7_Type( Get( slices, 754 ));
            rec.vote8 := Convert_Vote8_Type( Get( slices, 755 ));
            rec.swvt1 := Convert_Swvt1_Type( Get( slices, 756 ));
            rec.swvt2 := Convert_Swvt2_Type( Get( slices, 757 ));
            rec.swvt3 := Convert_Swvt2_Type( Get( slices, 758 ));
            rec.opdev1 := Convert_Opdev1_Type( Get( slices, 759 ));
            rec.opdev2 := Convert_Opdev2_Type( Get( slices, 760 ));
            rec.opeur1 := Convert_Opeur1_Type( Get( slices, 761 ));
            rec.opeur2 := Convert_Opeur2_Type( Get( slices, 762 ));
            rec.opeur3 := Convert_Opeur3_Type( Get( slices, 763 ));
            rec.opeur4 := Convert_Opeur4_Type( Get( slices, 764 ));
            rec.orgm := Convert_Aidpl1_Type( Get( slices, 765 ));
            rec.orgma := Convert_Orgma_Type( Get( slices, 766 ));
            rec.orgaa := Convert_Orgaa_Type( Get( slices, 767 ));
            rec.orgmb := Convert_Orgmb_Type( Get( slices, 768 ));
            rec.orgab := Convert_Orgab_Type( Get( slices, 769 ));
            rec.orgmc := Convert_Orgmc_Type( Get( slices, 770 ));
            rec.orgac := Convert_Orgac_Type( Get( slices, 771 ));
            rec.orgmd := Convert_Orgmd_Type( Get( slices, 772 ));
            rec.orgad := Convert_Orgad_Type( Get( slices, 773 ));
            rec.orgme := Convert_Orgme_Type( Get( slices, 774 ));
            rec.orgae := Convert_Orgae_Type( Get( slices, 775 ));
            rec.orgmf := Convert_Orgmf_Type( Get( slices, 776 ));
            rec.orgaf := Convert_Orgaf_Type( Get( slices, 777 ));
            rec.orgmg := Convert_Orgmg_Type( Get( slices, 778 ));
            rec.orgag := Convert_Orgag_Type( Get( slices, 779 ));
            rec.orgmh := Convert_Orgmh_Type( Get( slices, 780 ));
            rec.orgah := Convert_Orgah_Type( Get( slices, 781 ));
            rec.orgmi := Convert_Orgmi_Type( Get( slices, 782 ));
            rec.orgai := Convert_Orgai_Type( Get( slices, 783 ));
            rec.orgmj := Convert_Orgmj_Type( Get( slices, 784 ));
            rec.orgaj := Convert_Orgaj_Type( Get( slices, 785 ));
            rec.orgmk := Convert_Orgmk_Type( Get( slices, 786 ));
            rec.orgak := Convert_Orgak_Type( Get( slices, 787 ));
            rec.orgml := Convert_Orgml_Type( Get( slices, 788 ));
            rec.orgal := Convert_Orgal_Type( Get( slices, 789 ));
            rec.orgmm := Convert_Orgmm_Type( Get( slices, 790 ));
            rec.orgam := Convert_Orgam_Type( Get( slices, 791 ));
            rec.orgmo := Convert_Orgmo_Type( Get( slices, 792 ));
            rec.orgao := Convert_Orgao_Type( Get( slices, 793 ));
            rec.orgmp := Convert_Orgmp_Type( Get( slices, 794 ));
            rec.orgap := Convert_Orgap_Type( Get( slices, 795 ));
            rec.orgmq := Convert_Orgmq_Type( Get( slices, 796 ));
            rec.orgaq := Convert_Orgaq_Type( Get( slices, 797 ));
            rec.orga := Convert_Aidpl1_Type( Get( slices, 798 ));
            rec.frna := Convert_Frna_Type( Get( slices, 799 ));
            rec.frnb := Convert_Frna_Type( Get( slices, 800 ));
            rec.frnc := Convert_Coh1mr_Type( Get( slices, 801 ));
            rec.oprlg1 := Convert_Oprlg1_Type( Get( slices, 802 ));
            rec.oprlg2 := Convert_Oprlg2_Type( Get( slices, 803 ));
            rec.oprlg3 := Convert_Oprlg3_Type( Get( slices, 804 ));
            rec.f101 := Convert_F101_Type( Get( slices, 805 ));
            rec.f102 := Convert_F102_Type( Get( slices, 806 ));
            rec.f103 := Convert_F103_Type( Get( slices, 807 ));
            rec.f104 := Convert( slices, 808, ( -9, -8, -7 ) );
            rec.f105 := Convert_F105_Type( Get( slices, 809 ));
            rec.f106 := Convert_F106_Type( Get( slices, 810 ));
            rec.f116 := Convert_F116_Type( Get( slices, 811 ));
            rec.f118 := Convert_F118_Type( Get( slices, 812 ));
            rec.f119 := Convert_F119_Type( Get( slices, 813 ));
            rec.f121 := Convert_F121_Type( Get( slices, 814 ));
            rec.f122 := Convert_F122_Type( Get( slices, 815 ));
            rec.f124 := Convert_F124_Type( Get( slices, 816 ));
            rec.f125 := Convert_F125_Type( Get( slices, 817 ));
            rec.f126 := Convert_F126_Type( Get( slices, 818 ));
            rec.f127 := Convert_F127_Type( Get( slices, 819 ));
            rec.f128 := Convert_F128_Type( Get( slices, 820 ));
            rec.f132 := Convert_F132_Type( Get( slices, 821 ));
            rec.f142 := Convert_F142_Type( Get( slices, 822 ));
            rec.f135 := Convert_F135_Type( Get( slices, 823 ));
            rec.f136 := Convert_F136_Type( Get( slices, 824 ));
            rec.f137 := Convert_F137_Type( Get( slices, 825 ));
            rec.f138 := Convert_F138_Type( Get( slices, 826 ));
            rec.f139 := Convert_F139_Type( Get( slices, 827 ));
            rec.f140 := Convert_F140_Type( Get( slices, 828 ));
            rec.f141 := Convert_F141_Type( Get( slices, 829 ));
            rec.f151 := Convert_F151_Type( Get( slices, 830 ));
            rec.f152 := Convert_F152_Type( Get( slices, 831 ));
            rec.f153 := Convert_F153_Type( Get( slices, 832 ));
            rec.f154 := Convert_F154_Type( Get( slices, 833 ));
            rec.f155 := Convert_F155_Type( Get( slices, 834 ));
            rec.f156 := Convert_F156_Type( Get( slices, 835 ));
            rec.f157 := Convert_F157_Type( Get( slices, 836 ));
            rec.f158 := Convert_F158_Type( Get( slices, 837 ));
            rec.f159 := Convert_F159_Type( Get( slices, 838 ));
            rec.nf1 := Convert( slices, 839, ( -9, -8, -7, -2, -1 ) );
            rec.fisit := Convert_Fisit_Type( Get( slices, 840 ));
            rec.fisitc := Convert( slices, 841, ( -9, -8, -7, -2, -1 ) );
            rec.fisity := Convert_Fisity_Type( Get( slices, 842 ));
            rec.fisitx := Convert( slices, 843, ( -9, -8, -7, -2, -1 ) );
            rec.fiyrdia := Convert( slices, 844, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.fiyrdb1 := Convert_Boolean_With_Missing( Get( slices, 845 ));
            rec.fiyrdb2 := Convert_Boolean_With_Missing( Get( slices, 846 ));
            rec.fiyrdb3 := Convert_Boolean_With_Missing( Get( slices, 847 ));
            rec.fiyrdb4 := Convert_Boolean_With_Missing( Get( slices, 848 ));
            rec.fiyrdb5 := Convert_Boolean_With_Missing( Get( slices, 849 ));
            rec.fiyrdb6 := Convert_Boolean_With_Missing( Get( slices, 850 ));
            rec.save := Convert_Aidpl1_Type( Get( slices, 851 ));
            rec.saved := Convert( slices, 852, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.savey1 := Convert_Savey1_Type( Get( slices, 853 ));
            rec.savey2 := Convert_Savey1_Type( Get( slices, 854 ));
            rec.pppen := Convert_Aidpl1_Type( Get( slices, 855 ));
            rec.penb4 := Convert_Penb4_Type( Get( slices, 856 ));
            rec.penb4y4 := Convert( slices, 857, ( -9, -8, -7, -2, -1 ) );
            rec.penb4v := Convert( slices, 858, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.penb4w := Convert( slices, 859, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.penyr4 := Convert( slices, 860, ( -9, -8, -7, -2, -1 ) );
            rec.penadd := Convert_Aidpl1_Type( Get( slices, 861 ));
            rec.penadv := Convert( slices, 862, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.penadw := Convert( slices, 863, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.windf := Convert_Debt_Type( Get( slices, 864 ));
            rec.windfa := Convert_Windfa_Type( Get( slices, 865 ));
            rec.windfay := Convert( slices, 866, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windfb := Convert_Windfb_Type( Get( slices, 867 ));
            rec.windfby := Convert( slices, 868, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windfc := Convert_Windfc_Type( Get( slices, 869 ));
            rec.windfcy := Convert( slices, 870, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windfd := Convert_Windfd_Type( Get( slices, 871 ));
            rec.windfdy := Convert( slices, 872, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windff := Convert_Windff_Type( Get( slices, 873 ));
            rec.windffy := Convert( slices, 874, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windfg := Convert_Windfg_Type( Get( slices, 875 ));
            rec.windfgy := Convert( slices, 876, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windfh := Convert_Nisjsa_Type( Get( slices, 877 ));
            rec.windfhy := Convert( slices, 878, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.xpmeal := Convert_Xpleis_Type( Get( slices, 879 ));
            rec.xpleis := Convert_Xpleis_Type( Get( slices, 880 ));
            rec.ftexhh := Convert_Aidpl1_Type( Get( slices, 881 ));
            rec.ftexa := Convert_Ftexa_Type( Get( slices, 882 ));
            rec.ftexa1 := Convert_Ftexa1_Type( Get( slices, 883 ));
            rec.ftexa2 := Convert_Ftexa2_Type( Get( slices, 884 ));
            rec.ftexa3 := Convert_Ftexa3_Type( Get( slices, 885 ));
            rec.ftexa4 := Convert_Ftexa4_Type( Get( slices, 886 ));
            rec.ftexa5 := Convert_Ftexa5_Type( Get( slices, 887 ));
            rec.ftexa6 := Convert_Ftexa6_Type( Get( slices, 888 ));
            rec.ftexav := Convert( slices, 889, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ftexaw := Convert( slices, 890, ( -9.0, -8.0, -7.0, -5.0, -3.0, -2.0, -1.0 ) );
            rec.ftexb := Convert_Ftexb_Type( Get( slices, 891 ));
            rec.ftexb1 := Convert_Ftexa1_Type( Get( slices, 892 ));
            rec.ftexb2 := Convert_Ftexa2_Type( Get( slices, 893 ));
            rec.ftexb3 := Convert_Ftexa3_Type( Get( slices, 894 ));
            rec.ftexb4 := Convert_Ftexa4_Type( Get( slices, 895 ));
            rec.ftexb5 := Convert_Ftexa5_Type( Get( slices, 896 ));
            rec.ftexb6 := Convert_Ftexa6_Type( Get( slices, 897 ));
            rec.ftexbv := Convert( slices, 898, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ftexbw := Convert( slices, 899, ( -9.0, -8.0, -7.0, -5.0, -3.0, -2.0, -1.0 ) );
            rec.ftexc := Convert_Ftexc_Type( Get( slices, 900 ));
            rec.ftexc1 := Convert_Ftexa1_Type( Get( slices, 901 ));
            rec.ftexc2 := Convert_Ftexa2_Type( Get( slices, 902 ));
            rec.ftexc3 := Convert_Ftexa3_Type( Get( slices, 903 ));
            rec.ftexc4 := Convert_Ftexa4_Type( Get( slices, 904 ));
            rec.ftexc5 := Convert_Ftexa5_Type( Get( slices, 905 ));
            rec.ftexc6 := Convert_Ftexa6_Type( Get( slices, 906 ));
            rec.ftexcv := Convert( slices, 907, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ftexcw := Convert( slices, 908, ( -9.0, -8.0, -7.0, -5.0, -3.0, -2.0, -1.0 ) );
            rec.spinhh := Convert_Hhch12_Type( Get( slices, 909 ));
            rec.hubuys := Convert_Hubuys_Type( Get( slices, 910 ));
            rec.hufrys := Convert_Hubuys_Type( Get( slices, 911 ));
            rec.humops := Convert_Hubuys_Type( Get( slices, 912 ));
            rec.huiron := Convert_Hubuys_Type( Get( slices, 913 ));
            rec.hhch12 := Convert_Hhch12_Type( Get( slices, 914 ));
            rec.husits := Convert_Husits_Type( Get( slices, 915 ));
            rec.howlng := Convert( slices, 916, ( -9, -8, -7, -3, -2, -1 ) );
            rec.caruse := Convert_Caruse_Type( Get( slices, 917 ));
            rec.event1 := Convert( slices, 918, ( -9, -8, -7, -1 ) );
            rec.event1s := Convert( slices, 919, ( -9, -8, -7 ) );
            rec.event2 := Convert( slices, 920, ( -9, -8, -7, -1 ) );
            rec.event2s := Convert( slices, 921, ( -9, -8, -7 ) );
            rec.event3 := Convert( slices, 922, ( -9, -8, -7, -1 ) );
            rec.event3s := Convert( slices, 923, ( -9, -8, -7 ) );
            rec.event4 := Convert( slices, 924, ( -9, -8, -7, -1 ) );
            rec.event4s := Convert( slices, 925, ( -9, -8, -7 ) );
            rec.ivfa := Convert_Ivda_Type( Get( slices, 926 ));
            rec.ivfb := Convert_Ivdb_Type( Get( slices, 927 ));
            rec.ivfc := Convert_Ivfc_Type( Get( slices, 928 ));
            rec.ivfd := Convert_Ivdd_Type( Get( slices, 929 ));
            rec.ivfe := Convert_Ivee_Type( Get( slices, 930 ));
            rec.ivfoih := Convert( slices, 931, ( -9, -8 ) );
            rec.ivfoim := Convert( slices, 932, ( -9, -8 ) );
            rec.ivsc := Convert_Ivsc_Type( Get( slices, 933 ));
            rec.iv1 := Convert_Hhch12_Type( Get( slices, 934 ));
            rec.iv2 := Convert_Iv2_Type( Get( slices, 935 ));
            rec.iv4 := Convert_Iv4_Type( Get( slices, 936 ));
            rec.iv5 := Convert_Iv5_Type( Get( slices, 937 ));
            rec.iv6a := Convert_Hhch12_Type( Get( slices, 938 ));
            rec.iv6b := Convert_Hhch12_Type( Get( slices, 939 ));
            rec.iv6c := Convert_Hhch12_Type( Get( slices, 940 ));
            rec.iv6d := Convert_Hhch12_Type( Get( slices, 941 ));
            rec.iv6e := Convert_Hhch12_Type( Get( slices, 942 ));
            rec.iv6f := Convert_Hhch12_Type( Get( slices, 943 ));
            rec.iv7 := Convert( slices, 944, ( -9, -8, -7 ) );
            rec.ghqa := Convert_Ghqa_Type( Get( slices, 945 ));
            rec.ghqb := Convert_Ghqb_Type( Get( slices, 946 ));
            rec.ghqc := Convert_Ghqc_Type( Get( slices, 947 ));
            rec.ghqd := Convert_Ghqc_Type( Get( slices, 948 ));
            rec.ghqe := Convert_Ghqe_Type( Get( slices, 949 ));
            rec.ghqf := Convert_Ghqe_Type( Get( slices, 950 ));
            rec.ghqg := Convert_Ghqc_Type( Get( slices, 951 ));
            rec.ghqh := Convert_Ghqc_Type( Get( slices, 952 ));
            rec.ghqi := Convert_Ghqb_Type( Get( slices, 953 ));
            rec.ghqj := Convert_Ghqe_Type( Get( slices, 954 ));
            rec.ghqk := Convert_Ghqe_Type( Get( slices, 955 ));
            rec.ghql := Convert_Ghqc_Type( Get( slices, 956 ));
            rec.opfama := Convert_Opfama_Type( Get( slices, 957 ));
            rec.opfamb := Convert_Opfama_Type( Get( slices, 958 ));
            rec.opfamc := Convert_Opfama_Type( Get( slices, 959 ));
            rec.opfamd := Convert_Opfama_Type( Get( slices, 960 ));
            rec.opfame := Convert_Opfama_Type( Get( slices, 961 ));
            rec.opfamf := Convert_Opfama_Type( Get( slices, 962 ));
            rec.opfamg := Convert_Opfama_Type( Get( slices, 963 ));
            rec.opfamh := Convert_Opfama_Type( Get( slices, 964 ));
            rec.opfami := Convert_Opfama_Type( Get( slices, 965 ));
            rec.lfsat1 := Convert_Lfsat1_Type( Get( slices, 966 ));
            rec.lfsat2 := Convert_Lfsat1_Type( Get( slices, 967 ));
            rec.lfsat3 := Convert_Lfsat1_Type( Get( slices, 968 ));
            rec.lfsat4 := Convert_Lfsat1_Type( Get( slices, 969 ));
            rec.lfsat5 := Convert_Lfsat1_Type( Get( slices, 970 ));
            rec.lfsat6 := Convert_Lfsat1_Type( Get( slices, 971 ));
            rec.lfsat7 := Convert_Lfsat1_Type( Get( slices, 972 ));
            rec.lfsat8 := Convert_Lfsat1_Type( Get( slices, 973 ));
            rec.lfsato := Convert_Lfsat1_Type( Get( slices, 974 ));
            rec.lfsatl := Convert( slices, 975, ( -9, -8, -7, -2, -1 ) );
            rec.xsupa := Convert_Xsupa_Type( Get( slices, 976 ));
            rec.xsupb := Convert_Xsupa_Type( Get( slices, 977 ));
            rec.xsupc := Convert_Xsupa_Type( Get( slices, 978 ));
            rec.ssupa := Convert_Ssupa_Type( Get( slices, 979 ));
            rec.ssupb := Convert_Ssupa_Type( Get( slices, 980 ));
            rec.ssupc := Convert_Ssupa_Type( Get( slices, 981 ));
            rec.ssupd := Convert_Ssupa_Type( Get( slices, 982 ));
            rec.ssupe := Convert_Ssupa_Type( Get( slices, 983 ));
            rec.ssup1 := Convert_Netsx1_Type( Get( slices, 984 ));
            rec.ssupr2r := Convert_Ssupr2r_Type( Get( slices, 985 ));
            rec.prrs2i := Convert_Prrs2i_Type( Get( slices, 986 ));
            rec.pripn := Convert( slices, 987, ( -9, -8 ) );
            rec.prwhy := Convert_Prwhy_Type( Get( slices, 988 ));
            rec.pplevr := Convert_Plever_Type( Get( slices, 989 ));
            rec.prfehq := Convert_Prfehq_Type( Get( slices, 990 ));
            rec.prsehq := Convert_Prsehq_Type( Get( slices, 991 ));
            rec.presbgm := Convert_Presbgm_Type( Get( slices, 992 ));
            rec.presby4 := Convert( slices, 993, ( -9, -8, -7, -2, -1 ) );
            rec.presly := Convert_Presly_Type( Get( slices, 994 ));
            rec.prf101 := Convert_Prf101_Type( Get( slices, 995 ));
            rec.prf102 := Convert_Prf102_Type( Get( slices, 996 ));
            rec.prf116 := Convert_Prf116_Type( Get( slices, 997 ));
            rec.prf125 := Convert_Prf125_Type( Get( slices, 998 ));
            rec.prf131 := Convert_Prf131_Type( Get( slices, 999 ));
            rec.prf135 := Convert_Prf135_Type( Get( slices, 1000 ));
            rec.prf137 := Convert_Prf137_Type( Get( slices, 1001 ));
            rec.prf139 := Convert_Prf139_Type( Get( slices, 1002 ));
            rec.prf141 := Convert_Prf141_Type( Get( slices, 1003 ));
            rec.prfirn := Convert_Prfirn_Type( Get( slices, 1004 ));
            rec.prearn := Convert_Prearn_Type( Get( slices, 1005 ));
            rec.prjbbgm := Convert_Presbgm_Type( Get( slices, 1006 ));
            rec.prjbby4 := Convert( slices, 1007, ( -9, -8, -7, -2, -1 ) );
            rec.prjbly := Convert_Prjbly_Type( Get( slices, 1008 ));
            rec.prfitb := Convert_Prfitb_Type( Get( slices, 1009 ));
            rec.ivpa := Convert_Ivpa_Type( Get( slices, 1010 ));
            rec.ivpb := Convert_Ivpb_Type( Get( slices, 1011 ));
            rec.ivpc := Convert_Ivpc_Type( Get( slices, 1012 ));
            rec.ivpd := Convert_Ivpd_Type( Get( slices, 1013 ));
            rec.ivpe := Convert_Ivpe_Type( Get( slices, 1014 ));
            rec.telwhy := Convert_Telwhy_Type( Get( slices, 1015 ));
            rec.prjbft := Convert_Prjbft_Type( Get( slices, 1016 ));
            rec.tlfiyrl := Convert( slices, 1017, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.tlfiyr := Convert( slices, 1018, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.pid := Convert( slices, 1019 );
            rec.iviow8 := Convert_Iviow4_Type( Get( slices, 1020 ));
            rec.hhmem := Convert_Hhmem_Type( Get( slices, 1021 ));
            rec.newhy := Convert_Newhy_Type( Get( slices, 1022 ));
            rec.nemnjn := Convert_Nemnjn_Type( Get( slices, 1023 ));
            rec.neyrjn4 := Convert( slices, 1024, ( -9, -8, -7, -2, -1 ) );
            rec.ivfio := Convert_Ivfio_Type( Get( slices, 1025 ));
            rec.iodc := Convert_Iodc_Type( Get( slices, 1026 ));
            rec.memorig := Convert_Memorig_Type( Get( slices, 1027 ));
            rec.hgr2r := Convert_Hgr2r_Type( Get( slices, 1028 ));
            rec.hgsex := Convert_Hgsex_Type( Get( slices, 1029 ));
            rec.hgbm := Convert_Hgbm_Type( Get( slices, 1030 ));
            rec.hgby := Convert( slices, 1031, ( -2, -1 ) );
            rec.mastat := Convert_Mastat_Type( Get( slices, 1032 ));
            rec.hgspn := Convert( slices, 1033, ( -9, -8, -2, -1 ) );
            rec.hgemp := Convert_Hgemp_Type( Get( slices, 1034 ));
            rec.hgfno := Convert( slices, 1035, ( -9, -8, -2, -1 ) );
            rec.hgmno := Convert( slices, 1036, ( -9, -8, -2, -1 ) );
            rec.hgra := Convert( slices, 1037, ( -9, -8, -2, -1 ) );
            rec.age := Convert( slices, 1038, ( -9, -8 ) );
            rec.age12 := Convert( slices, 1039, ( -9, -8 ) );
            rec.butype := Convert_Butype_Type( Get( slices, 1040 ));
            rec.buno := Convert( slices, 1041, ( -9, -8 ) );
            rec.nchild := Convert( slices, 1042, ( -9, -8 ) );
            rec.hoh := Convert_Hoh_Type( Get( slices, 1043 ));
            rec.rach16 := Convert_Hhch12_Type( Get( slices, 1044 ));
            rec.sampst := Convert_Sampst_Type( Get( slices, 1045 ));
            rec.movest := Convert_Movest_Type( Get( slices, 1046 ));
            rec.qfx := Convert_Aidpl1_Type( Get( slices, 1047 ));
            rec.qfxc := Convert_Qfc_Type( Get( slices, 1048 ));
            rec.qfxd := Convert_Qfd_Type( Get( slices, 1049 ));
            rec.qfxe := Convert_Qfe_Type( Get( slices, 1050 ));
            rec.qfxf := Convert_Qff_Type( Get( slices, 1051 ));
            rec.qfxg := Convert_Qfg_Type( Get( slices, 1052 ));
            rec.qfxh := Convert_Qfh_Type( Get( slices, 1053 ));
            rec.qfxk := Convert_Qfk_Type( Get( slices, 1054 ));
            rec.qfxl := Convert_Qfl_Type( Get( slices, 1055 ));
            rec.qfxm := Convert_Qfm_Type( Get( slices, 1056 ));
            rec.qfxn := Convert_Qfn_Type( Get( slices, 1057 ));
            rec.qfxo := Convert_Qfxo_Type( Get( slices, 1058 ));
            rec.qfxp := Convert_Qfxp_Type( Get( slices, 1059 ));
            rec.qfxq := Convert_Qfxq_Type( Get( slices, 1060 ));
            rec.qfxr := Convert_Qfxr_Type( Get( slices, 1061 ));
            rec.qfedx := Convert_Aidpl1_Type( Get( slices, 1062 ));
            rec.qfedxa := Convert_Qfedd_Type( Get( slices, 1063 ));
            rec.nqfexa := Convert( slices, 1064, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxb := Convert_Qfede_Type( Get( slices, 1065 ));
            rec.nqfexb := Convert( slices, 1066, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxc := Convert_Qfedj_Type( Get( slices, 1067 ));
            rec.nqfexc := Convert( slices, 1068, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxg := Convert_Qfedm_Type( Get( slices, 1069 ));
            rec.nqfexg := Convert( slices, 1070, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxh := Convert_Qfedxh_Type( Get( slices, 1071 ));
            rec.nqfexh := Convert( slices, 1072, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxi := Convert_Qfedo_Type( Get( slices, 1073 ));
            rec.nqfexi := Convert( slices, 1074, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxj := Convert( slices, 1075, ( -9, -8, -7 ) );
            rec.nqfexj := Convert( slices, 1076, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxl := Convert_Qfedt_Type( Get( slices, 1077 ));
            rec.nqfexl := Convert( slices, 1078, ( -9, -8, -7, -2, -1 ) );
            rec.region := Convert_Region_Type( Get( slices, 1079 ));
            rec.hhsize := Convert( slices, 1080, ( -9, -8 ) );
            rec.hhtype := Convert_Hhtype_Type( Get( slices, 1081 ));
            rec.tenure := Convert_Tenure_Type( Get( slices, 1082 ));
            rec.qfedhi := Convert_Qfedhi_Type( Get( slices, 1083 ));
            rec.qfvoc := Convert_Qfvoc_Type( Get( slices, 1084 ));
            rec.qfachi := Convert_Qfachi_Type( Get( slices, 1085 ));
            rec.jbft := Convert_Jbft_Type( Get( slices, 1086 ));
            rec.sf36pf := Convert( slices, 1087, ( -9, -8, -7, -1 ) );
            rec.sf36rp := Convert( slices, 1088, ( -9, -8, -7, -1 ) );
            rec.sf36re := Convert( slices, 1089, ( -9.0, -8.0, -7.0, -1.0 ) );
            rec.sf36sf := Convert( slices, 1090, ( -9.0, -8.0, -7.0, -1.0 ) );
            rec.sf36mh := Convert( slices, 1091, ( -9, -8, -7, -1 ) );
            rec.sf36ev := Convert( slices, 1092, ( -9, -8, -7, -1 ) );
            rec.sf36p := Convert( slices, 1093, ( -9.0, -8.0, -7.0, -1.0 ) );
            rec.sf36ghp := Convert( slices, 1094, ( -9, -8, -7, -1 ) );
            rec.sf36ch := Convert( slices, 1095, ( -9, -8, -7, -1 ) );
            rec.payg := Convert( slices, 1096, ( -9.0, -8.0, -7.0 ) );
            rec.payn := Convert( slices, 1097, ( -9.0, -8.0, -7.0 ) );
            rec.paygu := Convert( slices, 1098, ( -9.0, -8.0, -7.0 ) );
            rec.paynu := Convert( slices, 1099, ( -9.0, -8.0, -7.0 ) );
            rec.paygty := Convert( slices, 1100, ( -9.0, -8.0, -7.0 ) );
            rec.paygly := Convert( slices, 1101, ( -9.0, -8.0, -7.0 ) );
            rec.paynty := Convert( slices, 1102, ( -9.0, -8.0, -7.0 ) );
            rec.paynly := Convert( slices, 1103, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jsprof := Convert( slices, 1104, ( -9.0, -8.0, -7.0 ) );
            rec.jsloss := Convert( slices, 1105, ( -9.0, -8.0, -7.0 ) );
            rec.jspayg := Convert( slices, 1106, ( -9.0, -8.0, -7.0 ) );
            rec.cjsten := Convert( slices, 1107, ( -9.0, -8.0, -7.0 ) );
            rec.cjswk9 := Convert( slices, 1108, ( -9.0, -8.0, -7.0 ) );
            rec.jlid := Convert_Jlid_Type( Get( slices, 1109 ));
            rec.jlyid := Convert_Jlyid_Type( Get( slices, 1110 ));
            rec.jtyid := Convert_Jtyid_Type( Get( slices, 1111 ));
            rec.jbseg := Convert_Jbseg_Type( Get( slices, 1112 ));
            rec.jbgold := Convert( slices, 1113, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbrgsc := Convert_Jbrgsc_Type( Get( slices, 1114 ));
            rec.jbisco := Convert( slices, 1115 );
            rec.jbcssm := Convert( slices, 1116, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbcssf := Convert( slices, 1117, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbhgs := Convert( slices, 1118, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbsec := Convert_Jbsec_Type( Get( slices, 1119 ));
            rec.njbwks := Convert( slices, 1120, ( -9.0, -8.0, -7.0 ) );
            rec.njuwks := Convert( slices, 1121, ( -9.0, -8.0, -7.0 ) );
            rec.njiwks := Convert( slices, 1122, ( -9.0, -8.0, -7.0 ) );
            rec.njbnew := Convert( slices, 1123, ( -9, -8, -7 ) );
            rec.njbsp := Convert( slices, 1124, ( -9, -8, -7 ) );
            rec.njusp := Convert( slices, 1125, ( -9, -8, -7 ) );
            rec.njisp := Convert( slices, 1126, ( -9, -8, -7 ) );
            rec.jbstatl := Convert( slices, 1127, ( -9, -8, -7, -2, -1 ) );
            rec.jbstatt := Convert( slices, 1128, ( -9, -8, -7, -2, -1 ) );
            rec.jbsocly := Convert( slices, 1129, ( -9, -8, -7 ) );
            rec.jlseg := Convert_Jlseg_Type( Get( slices, 1130 ));
            rec.jlgold := Convert( slices, 1131, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlrgsc := Convert_Jlrgsc_Type( Get( slices, 1132 ));
            rec.jlisco := Convert( slices, 1133 );
            rec.jlcssm := Convert( slices, 1134, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlcssf := Convert( slices, 1135, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlhgs := Convert( slices, 1136, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlsec := Convert_Jlsec_Type( Get( slices, 1137 ));
            rec.norgm := Convert( slices, 1138, ( -9, -8, -7 ) );
            rec.norga := Convert( slices, 1139, ( -9, -8, -7 ) );
            rec.vote := Convert_Vote_Type( Get( slices, 1140 ));
            rec.fiyrdic := Convert( slices, 1141, ( -9.0, -8.0, -7.0 ) );
            rec.fimnp := Convert( slices, 1142, ( -9.0, -8.0, -7.0 ) );
            rec.fimnb := Convert( slices, 1143, ( -9.0, -8.0, -7.0 ) );
            rec.fimni := Convert( slices, 1144, ( -9.0, -8.0, -7.0 ) );
            rec.fimnt := Convert( slices, 1145, ( -9.0, -8.0, -7.0 ) );
            rec.fimnl := Convert( slices, 1146, ( -9.0, -8.0, -7.0 ) );
            rec.fimnnl := Convert( slices, 1147, ( -9.0, -8.0, -7.0 ) );
            rec.fimn := Convert( slices, 1148, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrl := Convert( slices, 1149, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrnl := Convert( slices, 1150, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrp := Convert( slices, 1151, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrb := Convert( slices, 1152, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrt := Convert( slices, 1153, ( -9.0, -8.0, -7.0 ) );
            rec.fiyri := Convert( slices, 1154, ( -9.0, -8.0, -7.0 ) );
            rec.fiyr := Convert( slices, 1155, ( -9.0, -8.0, -7.0 ) );
            rec.fihhmn := Convert( slices, 1156, ( -9.0, -8.0, -7.0 ) );
            rec.hlghq1 := Convert( slices, 1157, ( -9, -8, -7 ) );
            rec.hlghq2 := Convert( slices, 1158, ( -9, -8, -7 ) );
            rec.spjb := Convert_Spjb_Type( Get( slices, 1159 ));
            rec.spsoc := Convert( slices, 1160, ( -9.0, -8.0 ) );
            rec.spjbhr := Convert( slices, 1161, ( -9, -8, -7 ) );
            rec.spjbot := Convert( slices, 1162, ( -9, -8, -7 ) );
            rec.sppayg := Convert( slices, 1163, ( -9.0, -8.0, -7.0 ) );
            rec.spjbyr := Convert( slices, 1164, ( -9, -8, -7 ) );
            rec.lrwght := Convert( slices, 1165 );
            rec.lewght := Convert( slices, 1166 );
            rec.xrwght := Convert( slices, 1167 );
            rec.xewght := Convert( slices, 1168 );
            rec.j2payi := Convert( slices, 1169, ( -9, -8, -7, -3, -2, -1 ) );
            rec.fiyrdii := Convert_Fiyrdii_Type( Get( slices, 1170 ));
            rec.prearni := Convert( slices, 1171, ( -9, -8, -2, -1 ) );
            rec.prfitbi := Convert_Prfitbi_Type( Get( slices, 1172 ));
            rec.paygui := Convert_Fimnbi_Type( Get( slices, 1173 ));
            rec.paynui := Convert_Fimnbi_Type( Get( slices, 1174 ));
            rec.paygti := Convert_Fimnbi_Type( Get( slices, 1175 ));
            rec.paygli := Convert_Fimnbi_Type( Get( slices, 1176 ));
            rec.paynti := Convert_Fimnbi_Type( Get( slices, 1177 ));
            rec.paynli := Convert_Fimnbi_Type( Get( slices, 1178 ));
            rec.jsprofi := Convert_Fimnbi_Type( Get( slices, 1179 ));
            rec.jspaygi := Convert_Fimnbi_Type( Get( slices, 1180 ));
            rec.fimnpi := Convert_Fimnbi_Type( Get( slices, 1181 ));
            rec.fimnbi := Convert_Fimnbi_Type( Get( slices, 1182 ));
            rec.fimnii := Convert_Fimnii_Type( Get( slices, 1183 ));
            rec.fimnti := Convert_Fimnii_Type( Get( slices, 1184 ));
            rec.fimnnli := Convert_Fimnbi_Type( Get( slices, 1185 ));
            rec.fimnli := Convert_Fimnbi_Type( Get( slices, 1186 ));
            rec.fimnthi := Convert_Fimnii_Type( Get( slices, 1187 ));
            rec.fiyrli := Convert_Fimnbi_Type( Get( slices, 1188 ));
            rec.fiyrnli := Convert_Fimnbi_Type( Get( slices, 1189 ));
            rec.fiyrpi := Convert_Fimnii_Type( Get( slices, 1190 ));
            rec.fiyrbi := Convert_Fimnbi_Type( Get( slices, 1191 ));
            rec.fiyrti := Convert_Fimnbi_Type( Get( slices, 1192 ));
            rec.fiyrii := Convert_Fimnbi_Type( Get( slices, 1193 ));
            rec.fiyeari := Convert_Fimnbi_Type( Get( slices, 1194 ));
            rec.sppaygi := Convert_Prfitbi_Type( Get( slices, 1195 ));
            rec.fihhmni := Convert_Fihhmni_Type( Get( slices, 1196 ));
            rec.mrjend := Convert( slices, 1197, ( -9, -8, -7, -3, -2, -1 ) );
            rec.mrjsoc := Convert( slices, 1198, ( -9, -8, -7, -3 ) );
            rec.mrjsic := Convert( slices, 1199, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjsemp := Convert_Mrjsemp_Type( Get( slices, 1200 ));
            rec.mrjboss := Convert_Mrjboss_Type( Get( slices, 1201 ));
            rec.mrjmngr := Convert_Mrjmngr_Type( Get( slices, 1202 ));
            rec.mrjsize := Convert_Mrjsize_Type( Get( slices, 1203 ));
            rec.mrjseg := Convert_Maseg_Type( Get( slices, 1204 ));
            rec.mrjgold := Convert( slices, 1205, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjrgsc := Convert_Margsc_Type( Get( slices, 1206 ));
            rec.mrjisco := Convert( slices, 1207 );
            rec.mrjcssm := Convert( slices, 1208, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjcssf := Convert( slices, 1209, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjhgs := Convert( slices, 1210, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjsec := Convert_J1sec_Type( Get( slices, 1211 ));
            rec.paseg := Convert_Maseg_Type( Get( slices, 1212 ));
            rec.pagold := Convert( slices, 1213, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.pargsc := Convert_Margsc_Type( Get( slices, 1214 ));
            rec.paisco := Convert( slices, 1215 );
            rec.pacssm := Convert( slices, 1216, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.pacssf := Convert( slices, 1217, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.pahgs := Convert( slices, 1218, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.pasec := Convert_J1sec_Type( Get( slices, 1219 ));
            rec.maseg := Convert_Maseg_Type( Get( slices, 1220 ));
            rec.magold := Convert( slices, 1221, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.margsc := Convert_Margsc_Type( Get( slices, 1222 ));
            rec.maisco := Convert( slices, 1223 );
            rec.macssm := Convert( slices, 1224, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.macssf := Convert( slices, 1225, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mahgs := Convert( slices, 1226, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.masec := Convert_J1sec_Type( Get( slices, 1227 ));
            rec.j1seg := Convert_J1seg_Type( Get( slices, 1228 ));
            rec.j1gold := Convert( slices, 1229, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.j1rgsc := Convert_J1rgsc_Type( Get( slices, 1230 ));
            rec.j1isco := Convert( slices, 1231 );
            rec.j1cssm := Convert( slices, 1232, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.j1cssf := Convert( slices, 1233, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.j1hgs := Convert( slices, 1234, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.j1sec := Convert_J1sec_Type( Get( slices, 1235 ));
            rec.xrwghte := Convert( slices, 1236 );
            rec.xewghte := Convert( slices, 1237 );
            rec.fimnsel := Convert_Fimnsel_Type( Get( slices, 1238 ));
            rec.xrwtsw1 := Convert( slices, 1239 );
            rec.xewtsw1 := Convert( slices, 1240 );
            rec.xrwtsw2 := Convert( slices, 1241 );
            rec.xewtsw2 := Convert( slices, 1242 );
            rec.sppid := Convert( slices, 1243 );
            rec.fpid := Convert( slices, 1244 );
            rec.mpid := Convert( slices, 1245 );
            rec.distmov := Convert( slices, 1246, ( -9.0, -8.0, -7.0 ) );
            rec.region2 := Convert_Region2_Type( Get( slices, 1247 ));
            rec.isced := Convert_Isced_Type( Get( slices, 1248 ));
            rec.casmin := Convert_Casmin_Type( Get( slices, 1249 ));
            rec.jbiscon := Convert( slices, 1250, ( -9, -8, -7, -2, -1 ) );
            rec.jliscon := Convert( slices, 1251, ( -9, -8, -7, -2, -1 ) );
            rec.mrjiscn := Convert( slices, 1252, ( -9, -8, -7, -2, -1 ) );
            rec.maiscon := Convert( slices, 1253, ( -9, -8, -7, -2, -1 ) );
            rec.paiscon := Convert( slices, 1254, ( -9, -8, -7, -2, -1 ) );
            rec.j1iscon := Convert( slices, 1255, ( -9, -8, -7, -2, -1 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Indresp_component ).start_pos = 0 ) then
               index.pointers( Indresp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Indresp_component ).counter := index.pointers( Indresp_component ).counter + 1;
            Put_Index( index_map, index );
            Indresp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Indresp_IO.Close( bin_file );
   end Create_Indresp_Wave_I;




   procedure Create_Indsamp_Wave_I( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Indsamp_IO.File_Type;
      rec         : Indsamp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Indsamp_IO.Create (bin_file, Indsamp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.pid := Convert( slices, 3 );
            rec.iviow8 := Convert_Iviow4_Type( Get( slices, 4 ));
            rec.ivstat1 := Convert_Ivstat1_Type( Get( slices, 5 ));
            rec.ivelig := Convert_Ivelig_Type( Get( slices, 6 ));
            rec.hhmem := Convert_Hhmem_Type( Get( slices, 7 ));
            rec.newhy := Convert_Newhy_Type( Get( slices, 8 ));
            rec.nemnjn := Convert_Nemnjn_Type( Get( slices, 9 ));
            rec.neyrjn4 := Convert( slices, 10, ( -9, -8, -7, -2, -1 ) );
            rec.lvwhy := Convert_Lvwhy_Type( Get( slices, 11 ));
            rec.lvmn := Convert_Lvmn_Type( Get( slices, 12 ));
            rec.lvyr4 := Convert( slices, 13, ( -9, -8, -7, -2, -1 ) );
            rec.lvloc := Convert_Lvloc_Type( Get( slices, 14 ));
            rec.ivfio := Convert_Ivfio_Type( Get( slices, 15 ));
            rec.ivrref := Convert_Ivrref_Type( Get( slices, 16 ));
            rec.ivireis := Convert_Ivireis_Type( Get( slices, 17 ));
            rec.finloc := Convert_Finloc_Type( Get( slices, 18 ));
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 19 ));
            rec.memorig := Convert_Memorig_Type( Get( slices, 20 ));
            rec.sampst := Convert_Sampst_Type( Get( slices, 21 ));
            rec.movest := Convert_Movest_Type( Get( slices, 22 ));
            rec.lewght := Convert( slices, 23, ( -9.0, -8.0, -1.0 ) );
            rec.lrwght := Convert( slices, 24, ( -9.0, -8.0, -1.0 ) );
            rec.distmov := Convert( slices, 25, ( -9.0, -8.0 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Indsamp_component ).start_pos = 0 ) then
               index.pointers( Indsamp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Indsamp_component ).counter := index.pointers( Indsamp_component ).counter + 1;
            Put_Index( index_map, index );
            Indsamp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Indsamp_IO.Close( bin_file );
   end Create_Indsamp_Wave_I;




   procedure Create_Jobhist_Wave_I( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Jobhist_IO.File_Type;
      rec         : Jobhist_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Jobhist_IO.Create (bin_file, Jobhist_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.jhstat := Convert_Jhstat_Type( Get( slices, 3 ));
            rec.jhbgd := Convert( slices, 4, ( -9, -8, -7, -2, -1 ) );
            rec.jhbgm := Convert_Jbbgm1_Type( Get( slices, 5 ));
            rec.jhbgy4 := Convert( slices, 6, ( -9, -8, -7, -2, -1 ) );
            rec.jspno := Convert( slices, 7 );
            rec.jhsoc := Convert( slices, 8, ( -9, -8, -2, -1 ) );
            rec.jhsemp := Convert_Jhsemp_Type( Get( slices, 9 ));
            rec.jhboss := Convert_Bscon_Type( Get( slices, 10 ));
            rec.jhsect := Convert_Jhsect_Type( Get( slices, 11 ));
            rec.jhmngr := Convert_Jhmngr_Type( Get( slices, 12 ));
            rec.jhpldf := Convert_Jhpldf_Type( Get( slices, 13 ));
            rec.jhsic := Convert( slices, 14, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.jhsize := Convert_Jhsize_Type( Get( slices, 15 ));
            rec.jhpayl := Convert( slices, 16, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhpylw := Convert( slices, 17, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.jhpylg := Convert_Jhpylg_Type( Get( slices, 18 ));
            rec.jhstpy := Convert_Jhstpy_Type( Get( slices, 19 ));
            rec.jblky := Convert_Jblky_Type( Get( slices, 20 ));
            rec.jhendd := Convert( slices, 21, ( -9, -8, -7, -2, -1 ) );
            rec.jhendm := Convert_Jbbgm1_Type( Get( slices, 22 ));
            rec.jhendy4 := Convert( slices, 23, ( -9, -8, -7, -2, -1 ) );
            rec.jha9ly := Convert_Jha9ly_Type( Get( slices, 24 ));
            rec.jhseg := Convert_Jhseg_Type( Get( slices, 25 ));
            rec.jhgold := Convert( slices, 26, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhrgsc := Convert_Jhrgsc_Type( Get( slices, 27 ));
            rec.jhisco := Convert( slices, 28, ( -9, -8 ) );
            rec.jhcssm := Convert( slices, 29, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhcssf := Convert( slices, 30, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhhgs := Convert( slices, 31, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhsec := Convert_Jhsec_Type( Get( slices, 32 ));
            rec.jhspw := Convert( slices, 33, ( -9.0, -8.0 ) );
            rec.jhgpay := Convert( slices, 34, ( -9.0, -8.0, -7.0 ) );
            rec.jhnpay := Convert( slices, 35, ( -9.0, -8.0, -7.0, -1.0 ) );
            rec.jhgpayi := Convert_Jhgpayi_Type( Get( slices, 36 ));
            rec.jhnpayi := Convert_Jhgpayi_Type( Get( slices, 37 ));
            rec.pid := Convert( slices, 38 );
            rec.jhiscon := Convert( slices, 39, ( -9, -8, -7, -2, -1 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Jobhist_component ).start_pos = 0 ) then
               index.pointers( Jobhist_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Jobhist_component ).counter := index.pointers( Jobhist_component ).counter + 1;
            Put_Index( index_map, index );
            Jobhist_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Jobhist_IO.Close( bin_file );
   end Create_Jobhist_Wave_I;




   procedure Create_Youth_Wave_I( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Youth_IO.File_Type;
      rec         : Youth_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Youth_IO.Create (bin_file, Youth_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.pno := Convert( slices, 1 );
            rec.ypdobm := Convert_Ypdobm_Type( Get( slices, 2 ));
            rec.ypdoby4 := Convert( slices, 3, ( -9, -8, -7, -2, -1 ) );
            rec.ypsex := Convert_Ypsex_Type( Get( slices, 4 ));
            rec.ytvhrs := Convert_Ytvhrs_Type( Get( slices, 5 ));
            rec.ytvstp := Convert_Ytvlmt_Type( Get( slices, 6 ));
            rec.ypfpc := Convert_Ypfpc_Type( Get( slices, 7 ));
            rec.ypfpcgm := Convert_Ypfpcgm_Type( Get( slices, 8 ));
            rec.yppals := Convert_Yppalo_Type( Get( slices, 9 ));
            rec.yppalo := Convert_Yppalo_Type( Get( slices, 10 ));
            rec.yputel := Convert_Yputel_Type( Get( slices, 11 ));
            rec.yplate := Convert_Yplate_Type( Get( slices, 12 ));
            rec.ypfbeau := Convert_Ypfbeau_Type( Get( slices, 13 ));
            rec.ypfclub := Convert_Ypfarca_Type( Get( slices, 14 ));
            rec.ypfdisc := Convert_Ypfarca_Type( Get( slices, 15 ));
            rec.ypfspor := Convert_Ypfarca_Type( Get( slices, 16 ));
            rec.ypargm := Convert_Ypargm_Type( Get( slices, 17 ));
            rec.ypargf := Convert_Ypargf_Type( Get( slices, 18 ));
            rec.yptlkm := Convert_Ypargm_Type( Get( slices, 19 ));
            rec.yptlkf := Convert_Ypargf_Type( Get( slices, 20 ));
            rec.ypnpal := Convert( slices, 21, ( -9, -8, -2, -1 ) );
            rec.ypmkfrn := Convert_Ypmkfrn_Type( Get( slices, 22 ));
            rec.ypfght := Convert_Ypfght_Type( Get( slices, 23 ));
            rec.ypeatn := Convert_Ypeatn_Type( Get( slices, 24 ));
            rec.ypsave := Convert_Ypsave_Type( Get( slices, 25 ));
            rec.yppkml := Convert( slices, 26, ( -9, -2, -1 ) );
            rec.yppkmp := Convert( slices, 27, ( -9, -2, -1 ) );
            rec.ypsmev := Convert_Ypbeau_Type( Get( slices, 28 ));
            rec.ypsmof := Convert_Ypsmof_Type( Get( slices, 29 ));
            rec.ypsmlw := Convert( slices, 30, ( -9, -8, -2, -1 ) );
            rec.ypopsm := Convert_Ypopsm_Type( Get( slices, 31 ));
            rec.ypdgfr := Convert_Ypdgfr_Type( Get( slices, 32 ));
            rec.ypsad := Convert_Ypsad_Type( Get( slices, 33 ));
            rec.ypwor := Convert_Ypwor_Type( Get( slices, 34 ));
            rec.ypbull := Convert_Ypbull_Type( Get( slices, 35 ));
            rec.yplone := Convert_Ypbored_Type( Get( slices, 36 ));
            rec.ypbored := Convert_Ypbored_Type( Get( slices, 37 ));
            rec.ypesta := Convert_Ypesta_Type( Get( slices, 38 ));
            rec.ypesti := Convert_Ypesti_Type( Get( slices, 39 ));
            rec.ypestb := Convert_Ypesta_Type( Get( slices, 40 ));
            rec.ypestj := Convert_Ypesti_Type( Get( slices, 41 ));
            rec.ypestc := Convert_Ypesta_Type( Get( slices, 42 ));
            rec.ypestk := Convert_Ypesti_Type( Get( slices, 43 ));
            rec.ypeste := Convert_Ypesta_Type( Get( slices, 44 ));
            rec.ypestf := Convert_Ypesta_Type( Get( slices, 45 ));
            rec.ypesth := Convert_Ypesta_Type( Get( slices, 46 ));
            rec.yptcha := Convert_Ypesta_Type( Get( slices, 47 ));
            rec.yptchb := Convert_Ypesta_Type( Get( slices, 48 ));
            rec.yphsw := Convert_Yphap_Type( Get( slices, 49 ));
            rec.yphap := Convert_Yphap_Type( Get( slices, 50 ));
            rec.yphfm := Convert_Yphap_Type( Get( slices, 51 ));
            rec.yphfr := Convert_Yphap_Type( Get( slices, 52 ));
            rec.yphlf := Convert_Yphap_Type( Get( slices, 53 ));
            rec.ypopff := Convert_Ypopfb_Type( Get( slices, 54 ));
            rec.ypopfb := Convert_Ypopfb_Type( Get( slices, 55 ));
            rec.ypopfj := Convert_Ypopfj_Type( Get( slices, 56 ));
            rec.ypoppl := Convert_Ypopfj_Type( Get( slices, 57 ));
            rec.ypvte6 := Convert_Ypvte6_Type( Get( slices, 58 ));
            rec.ypvte3 := Convert_Ypvte3_Type( Get( slices, 59 ));
            rec.ypcrwra := Convert_Ypcrwra_Type( Get( slices, 60 ));
            rec.ypcrwrb := Convert_Ypcrwrb_Type( Get( slices, 61 ));
            rec.ypexpl := Convert_Ypbeau_Type( Get( slices, 62 ));
            rec.ypvand := Convert( slices, 63, ( -9, -8, -2, -1 ) );
            rec.yptrun := Convert_Yptrun_Type( Get( slices, 64 ));
            rec.ypopsc := Convert_Ypopsc_Type( Get( slices, 65 ));
            rec.yplvsc := Convert_Yplvsc_Type( Get( slices, 66 ));
            rec.yplvhm := Convert( slices, 67, ( -9, -8, -2, -1 ) );
            rec.ypwhrs := Convert( slices, 68, ( -9, -8, -2, -1 ) );
            rec.yppay := Convert( slices, 69, ( -9, -8, -2, -1 ) );
            rec.ypfsoc := Convert( slices, 70, ( -9.0, -8.0, -7.0, -1.0 ) );
            rec.ypdlfa := Convert_Ypdlfa_Type( Get( slices, 71 ));
            rec.ypdlfb := Convert_Ypdlfb_Type( Get( slices, 72 ));
            rec.ypwght := Convert( slices, 73 );
            rec.hid := Convert( slices, 74 );
            rec.pid := Convert( slices, 75 );
            rec.fnspno := Convert( slices, 76, ( -9, -8 ) );
            rec.fnspid := Convert( slices, 77, ( -9.0, -8.0 ) );
            rec.mnspno := Convert( slices, 78, ( -9, -8 ) );
            rec.mnspid := Convert( slices, 79, ( -9.0, -8.0 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Youth_component ).start_pos = 0 ) then
               index.pointers( Youth_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Youth_component ).counter := index.pointers( Youth_component ).counter + 1;
            Put_Index( index_map, index );
            Youth_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Youth_IO.Close( bin_file );
   end Create_Youth_Wave_I;




   procedure Create_Egoalt_Wave_J( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Egoalt_IO.File_Type;
      rec         : Egoalt_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Egoalt_IO.Create (bin_file, Egoalt_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.opno := Convert( slices, 3, (  1 .. 0 => -9 ) );
            rec.rel := Convert_Rel_Type( Get( slices, 4 ));
            rec.sex := Convert_Sex_Type( Get( slices, 5 ));
            rec.osex := Convert_Hgsex_Type( Get( slices, 6 ));
            rec.lwstat := Convert_Lwstat_Type( Get( slices, 7 ));
            rec.nwstat := Convert_Nwstat_Type( Get( slices, 8 ));
            rec.pid := Convert( slices, 9 );
            rec.opid := Convert( slices, 10 );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Egoalt_component ).start_pos = 0 ) then
               index.pointers( Egoalt_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Egoalt_component ).counter := index.pointers( Egoalt_component ).counter + 1;
            Put_Index( index_map, index );
            Egoalt_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Egoalt_IO.Close( bin_file );
   end Create_Egoalt_Wave_J;




   procedure Create_Hhresp_Wave_J( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Hhresp_IO.File_Type;
      rec         : Hhresp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Hhresp_IO.Create (bin_file, Hhresp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.hhdoi := Convert( slices, 2, ( -9, -8, -7 ) );
            rec.hhmoi := Convert_Doim_Type( Get( slices, 3 ));
            rec.hhyoi4 := Convert( slices, 4, ( -9, -8, -7, -2, -1 ) );
            rec.hhsoih := Convert( slices, 5, ( -9, -8, -7 ) );
            rec.hhsoim := Convert( slices, 6, ( -9, -8, -7 ) );
            rec.hstype := Convert_Hstype_Type( Get( slices, 7 ));
            rec.hsrins := Convert_Cjsck2_Type( Get( slices, 8 ));
            rec.hsroom := Convert( slices, 9, ( -9, -8, -7, -2, -1 ) );
            rec.hsownd := Convert_Hsownd_Type( Get( slices, 10 ));
            rec.hsowr1 := Convert( slices, 11, ( -9, -8, -7, -2, -1 ) );
            rec.hsowr2 := Convert( slices, 12, ( -9, -8, -7, -2, -1 ) );
            rec.mghave := Convert_Mghave_Type( Get( slices, 13 ));
            rec.hsowrp := Convert_Bscon_Type( Get( slices, 14 ));
            rec.mgynot := Convert_Mgynot_Type( Get( slices, 15 ));
            rec.hscost := Convert( slices, 16, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.mgly := Convert_Bscon_Type( Get( slices, 17 ));
            rec.hsivw9 := Convert( slices, 18, ( -9, -8, -7, -2, -1 ) );
            rec.mgxtra := Convert_Bscon_Type( Get( slices, 19 ));
            rec.mgnew := Convert( slices, 20, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.mgxty1 := Convert_Mgxty1_Type( Get( slices, 21 ));
            rec.mgxty2 := Convert_Mgxty2_Type( Get( slices, 22 ));
            rec.mgxty3 := Convert_Mgxty3_Type( Get( slices, 23 ));
            rec.mgxty4 := Convert_Mgxty4_Type( Get( slices, 24 ));
            rec.mgxty5 := Convert_Mgxty5_Type( Get( slices, 25 ));
            rec.mgold := Convert( slices, 26, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.mglife := Convert( slices, 27, ( -9, -8, -7, -2, -1 ) );
            rec.mgtype := Convert_Mgtype_Type( Get( slices, 28 ));
            rec.xpmg := Convert( slices, 29, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.xpmg1 := Convert_Bscon_Type( Get( slices, 30 ));
            rec.xpmg2 := Convert_Bscon_Type( Get( slices, 31 ));
            rec.xpmg3 := Convert_Bscon_Type( Get( slices, 32 ));
            rec.xpmg4 := Convert_Bscon_Type( Get( slices, 33 ));
            rec.mgyr04 := Convert( slices, 34, ( -9, -8, -7, -2, -1 ) );
            rec.hsyr04 := Convert( slices, 35, ( -9, -8, -7, -2, -1 ) );
            rec.hsval := Convert( slices, 36, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.hsjb := Convert_Bscon_Type( Get( slices, 37 ));
            rec.rentp1 := Convert( slices, 38, ( -9, -8, -7, -2, -1 ) );
            rec.rentp2 := Convert( slices, 39, ( -9, -8, -7, -2, -1 ) );
            rec.rentll := Convert_Rentll_Type( Get( slices, 40 ));
            rec.rentf := Convert_Rentf_Type( Get( slices, 41 ));
            rec.rent := Convert( slices, 42, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.rentw := Convert( slices, 43, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.rent1 := Convert_Rent1_Type( Get( slices, 44 ));
            rec.rent2 := Convert_Rent1_Type( Get( slices, 45 ));
            rec.rent3 := Convert_Bscon_Type( Get( slices, 46 ));
            rec.rent4 := Convert_Bscon_Type( Get( slices, 47 ));
            rec.rent5 := Convert_Bscon_Type( Get( slices, 48 ));
            rec.rent6 := Convert_Bscon_Type( Get( slices, 49 ));
            rec.rent7 := Convert_Rent7_Type( Get( slices, 50 ));
            rec.rent8 := Convert_Coh1mr_Type( Get( slices, 51 ));
            rec.renthb := Convert_Renthb_Type( Get( slices, 52 ));
            rec.rentg := Convert( slices, 53, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.rentgw := Convert( slices, 54, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.xphsdf := Convert( slices, 55, ( -9, -8, -7, -2, -1 ) );
            rec.xphsd1 := Convert_Bscon_Type( Get( slices, 56 ));
            rec.xphsd2 := Convert_Bscon_Type( Get( slices, 57 ));
            rec.xphsdb := Convert_Bscon_Type( Get( slices, 58 ));
            rec.hskch := Convert_Boolean_With_Missing( Get( slices, 59 ));
            rec.hskchs := Convert_Boolean_With_Missing( Get( slices, 60 ));
            rec.hsbth := Convert_Boolean_With_Missing( Get( slices, 61 ));
            rec.hsbths := Convert_Boolean_With_Missing( Get( slices, 62 ));
            rec.hstlt := Convert_Boolean_With_Missing( Get( slices, 63 ));
            rec.hstlts := Convert_Boolean_With_Missing( Get( slices, 64 ));
            rec.hsgdn := Convert_Boolean_With_Missing( Get( slices, 65 ));
            rec.hsgdns := Convert_Boolean_With_Missing( Get( slices, 66 ));
            rec.heatch := Convert_Bscon_Type( Get( slices, 67 ));
            rec.heatyp := Convert_Heatyp_Type( Get( slices, 68 ));
            rec.xpgasy := Convert( slices, 69, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.xplecy := Convert( slices, 70, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.xpoily := Convert( slices, 71, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.xpsfly := Convert( slices, 72, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.hsprbg := Convert_Boolean_With_Missing( Get( slices, 73 ));
            rec.hsprbh := Convert_Boolean_With_Missing( Get( slices, 74 ));
            rec.hsprbi := Convert_Boolean_With_Missing( Get( slices, 75 ));
            rec.hsprbj := Convert_Boolean_With_Missing( Get( slices, 76 ));
            rec.hsprbk := Convert_Boolean_With_Missing( Get( slices, 77 ));
            rec.hsprbl := Convert_Boolean_With_Missing( Get( slices, 78 ));
            rec.hsprbm := Convert_Boolean_With_Missing( Get( slices, 79 ));
            rec.hsprbn := Convert_Boolean_With_Missing( Get( slices, 80 ));
            rec.hsprbo := Convert_Boolean_With_Missing( Get( slices, 81 ));
            rec.hsprbp := Convert_Boolean_With_Missing( Get( slices, 82 ));
            rec.hsprbq := Convert_Boolean_With_Missing( Get( slices, 83 ));
            rec.hsctax := Convert_Hsctax_Type( Get( slices, 84 ));
            rec.hs2ownd := Convert_Bscon_Type( Get( slices, 85 ));
            rec.hs2valo := Convert( slices, 86, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.hs2vala := Convert_Hldsbl1_Type( Get( slices, 87 ));
            rec.hs2valb := Convert_Hldsbl1_Type( Get( slices, 88 ));
            rec.hs2valc := Convert_Hldsbl1_Type( Get( slices, 89 ));
            rec.hs2vald := Convert_Hldsbl1_Type( Get( slices, 90 ));
            rec.mgtot := Convert( slices, 91, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.cdhave := Convert_Bscon_Type( Get( slices, 92 ));
            rec.cdbght := Convert_Bscon_Type( Get( slices, 93 ));
            rec.cd1use := Convert_Cd1new_Type( Get( slices, 94 ));
            rec.cd1new := Convert( slices, 95, ( -9, -8, -7, -2, -1 ) );
            rec.cd1cst := Convert( slices, 96, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd2use := Convert_Cd1new_Type( Get( slices, 97 ));
            rec.cd2new := Convert( slices, 98, ( -9, -8, -7, -2, -1 ) );
            rec.cd2cst := Convert( slices, 99, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd3use := Convert_Cd1new_Type( Get( slices, 100 ));
            rec.cd3new := Convert( slices, 101, ( -9, -8, -7, -2, -1 ) );
            rec.cd3cst := Convert( slices, 102, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd4use := Convert_Cd1new_Type( Get( slices, 103 ));
            rec.cd4new := Convert( slices, 104, ( -9, -8, -7, -2, -1 ) );
            rec.cd4cst := Convert( slices, 105, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd5use := Convert_Cd1new_Type( Get( slices, 106 ));
            rec.cd5new := Convert( slices, 107, ( -9, -8, -7, -2, -1 ) );
            rec.cd5cst := Convert( slices, 108, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd6use := Convert_Cd1new_Type( Get( slices, 109 ));
            rec.cd6new := Convert( slices, 110, ( -9, -8, -7, -2, -1 ) );
            rec.cd6cst := Convert( slices, 111, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd7use := Convert_Cd1new_Type( Get( slices, 112 ));
            rec.cd7new := Convert( slices, 113, ( -9, -8, -7, -2, -1 ) );
            rec.cd7cst := Convert( slices, 114, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd8use := Convert_Cd1new_Type( Get( slices, 115 ));
            rec.cd8new := Convert( slices, 116, ( -9, -8, -7, -2, -1 ) );
            rec.cd8cst := Convert( slices, 117, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd9use := Convert_Cd1new_Type( Get( slices, 118 ));
            rec.cd9new := Convert( slices, 119, ( -9, -8, -7, -2, -1 ) );
            rec.cd9cst := Convert( slices, 120, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd10use := Convert_Cd10new_Type( Get( slices, 121 ));
            rec.cd10new := Convert( slices, 122, ( -9, -8, -7, -2, -1 ) );
            rec.cd10cst := Convert( slices, 123, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd11use := Convert_Cd10new_Type( Get( slices, 124 ));
            rec.cd11new := Convert( slices, 125, ( -9, -8, -7, -2, -1 ) );
            rec.cd11cst := Convert( slices, 126, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd12use := Convert_Cd10new_Type( Get( slices, 127 ));
            rec.cd12new := Convert( slices, 128, ( -9, -8, -7, -2, -1 ) );
            rec.cd12cst := Convert( slices, 129, ( -9, -8, -7, -3, -2, -1 ) );
            rec.pcnet := Convert_Boolean_With_Missing( Get( slices, 130 ));
            rec.xphp := Convert_Bscon_Type( Get( slices, 131 ));
            rec.xphpdf := Convert_Xphpdf_Type( Get( slices, 132 ));
            rec.hscana := Convert_Boolean_With_Missing( Get( slices, 133 ));
            rec.hscnta := Convert_Boolean_With_Missing( Get( slices, 134 ));
            rec.hscanb := Convert_Boolean_With_Missing( Get( slices, 135 ));
            rec.hscntb := Convert_Boolean_With_Missing( Get( slices, 136 ));
            rec.hscanc := Convert_Boolean_With_Missing( Get( slices, 137 ));
            rec.hscntc := Convert_Boolean_With_Missing( Get( slices, 138 ));
            rec.hscand := Convert_Boolean_With_Missing( Get( slices, 139 ));
            rec.hscntd := Convert_Boolean_With_Missing( Get( slices, 140 ));
            rec.hscane := Convert_Boolean_With_Missing( Get( slices, 141 ));
            rec.hscnte := Convert_Boolean_With_Missing( Get( slices, 142 ));
            rec.hscanf := Convert_Boolean_With_Missing( Get( slices, 143 ));
            rec.hscntf := Convert_Boolean_With_Missing( Get( slices, 144 ));
            rec.xpfood := Convert( slices, 145, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ncars := Convert_Ncars_Type( Get( slices, 146 ));
            rec.carown := Convert_Carown_Type( Get( slices, 147 ));
            rec.carval := Convert( slices, 148, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ivh1 := Convert( slices, 149, ( -9, -8, -7, -1 ) );
            rec.ivh2 := Convert( slices, 150, ( -9, -8, -7 ) );
            rec.ivh3 := Convert( slices, 151, ( -9, -8, -7 ) );
            rec.hhfoih := Convert( slices, 152, ( -9, -8, -7 ) );
            rec.hhfoim := Convert( slices, 153, ( -9, -8, -7 ) );
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 154 ));
            rec.hhorig := Convert_Hhorig_Type( Get( slices, 155 ));
            rec.hhdc := Convert_Hhdc_Type( Get( slices, 156 ));
            rec.xhwght := Convert( slices, 157, ( -9.0, -8.0 ) );
            rec.hhsize := Convert( slices, 158, ( -9, -8 ) );
            rec.hhtype := Convert_Hhtype_Type( Get( slices, 159 ));
            rec.region := Convert_Region_Type( Get( slices, 160 ));
            rec.nch02 := Convert( slices, 161, ( -9, -8 ) );
            rec.nch34 := Convert( slices, 162, ( -9, -8 ) );
            rec.nch511 := Convert( slices, 163, ( -9, -8 ) );
            rec.nch1215 := Convert( slices, 164, ( -9, -8 ) );
            rec.nch1618 := Convert( slices, 165, ( -9, -8 ) );
            rec.nkids := Convert( slices, 166, ( -9, -8 ) );
            rec.nwed := Convert( slices, 167, ( -9, -8 ) );
            rec.npens := Convert( slices, 168, ( -9, -8 ) );
            rec.na75pl := Convert( slices, 169, ( -9, -8 ) );
            rec.agechy := Convert( slices, 170, ( -9, -8 ) );
            rec.ncouple := Convert( slices, 171, ( -9, -8 ) );
            rec.nonepar := Convert( slices, 172, ( -9, -8 ) );
            rec.nemp := Convert( slices, 173, ( -9, -8 ) );
            rec.nwage := Convert( slices, 174, ( -9, -8 ) );
            rec.tenure := Convert_Tenure_Type( Get( slices, 175 ));
            rec.xphsn := Convert( slices, 176, ( -9.0, -8.0, -7.0 ) );
            rec.xphsg := Convert( slices, 177, ( -9.0, -8.0, -7.0 ) );
            rec.fieqfcb := Convert( slices, 178, ( -9.0, -8.0 ) );
            rec.fieqfca := Convert( slices, 179, ( -9.0, -8.0 ) );
            rec.fihhyr := Convert( slices, 180, ( -9.0, -8.0, -7.0 ) );
            rec.fihhmn := Convert( slices, 181, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyl := Convert( slices, 182, ( -9.0, -8.0, -7.0 ) );
            rec.fihhynl := Convert( slices, 183, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyp := Convert( slices, 184, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyb := Convert( slices, 185, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyt := Convert( slices, 186, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyi := Convert( slices, 187, ( -9.0, -8.0, -7.0 ) );
            rec.fihhml := Convert( slices, 188, (  1 .. 0 => -9.0 ) );
            rec.fihhmnl := Convert( slices, 189, (  1 .. 0 => -9.0 ) );
            rec.fihhmp := Convert( slices, 190, (  1 .. 0 => -9.0 ) );
            rec.fihhmb := Convert( slices, 191, (  1 .. 0 => -9.0 ) );
            rec.fihhmt := Convert( slices, 192, (  1 .. 0 => -9.0 ) );
            rec.fihhmi := Convert( slices, 193, (  1 .. 0 => -9.0 ) );
            rec.hhmove := Convert_Hhmove_Type( Get( slices, 194 ));
            rec.mgnewi := Convert( slices, 195, ( -9, -8, -7, -2, -1 ) );
            rec.xpmgi := Convert( slices, 196, ( -9, -8, -7, -2, -1 ) );
            rec.hsvali := Convert( slices, 197, ( -9, -8, -7, -2, -1 ) );
            rec.renti := Convert( slices, 198, ( -9, -8, -7, -4, -3, -2, -1 ) );
            rec.rentgi := Convert( slices, 199, ( -9, -8, -7, -2, -1 ) );
            rec.xphsni := Convert_Jhgpayi_Type( Get( slices, 200 ));
            rec.xphsgi := Convert_Jhgpayi_Type( Get( slices, 201 ));
            rec.fihhmni := Convert_Fihhmni_Type( Get( slices, 202 ));
            rec.fihhmli := Convert_Fihhmbi_Type( Get( slices, 203 ));
            rec.fihmnli := Convert_Fihhmbi_Type( Get( slices, 204 ));
            rec.fihhmpi := Convert_Fihhmbi_Type( Get( slices, 205 ));
            rec.fihhmbi := Convert_Fihhmbi_Type( Get( slices, 206 ));
            rec.fihhmti := Convert_Fihhmbi_Type( Get( slices, 207 ));
            rec.fihhmii := Convert_Fihhmbi_Type( Get( slices, 208 ));
            rec.fihhyri := Convert_Fihhmbi_Type( Get( slices, 209 ));
            rec.fihhyli := Convert_Fihhmbi_Type( Get( slices, 210 ));
            rec.fihhyni := Convert_Fihhmbi_Type( Get( slices, 211 ));
            rec.fihhypi := Convert_Fihhmbi_Type( Get( slices, 212 ));
            rec.fihhybi := Convert_Fihhmbi_Type( Get( slices, 213 ));
            rec.fihhyti := Convert_Fihhmbi_Type( Get( slices, 214 ));
            rec.fihhyii := Convert_Fihhmbi_Type( Get( slices, 215 ));
            rec.fihhsel := Convert_Fihhsel_Type( Get( slices, 216 ));
            rec.xhwghte := Convert( slices, 217 );
            rec.xhwtsw1 := Convert( slices, 218 );
            rec.xhwtsw2 := Convert( slices, 219 );
            rec.region2 := Convert_Region2_Type( Get( slices, 220 ));
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Hhresp_component ).start_pos = 0 ) then
               index.pointers( Hhresp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Hhresp_component ).counter := index.pointers( Hhresp_component ).counter + 1;
            Put_Index( index_map, index );
            Hhresp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Hhresp_IO.Close( bin_file );
   end Create_Hhresp_Wave_J;




   procedure Create_Hhsamp_Wave_J( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Hhsamp_IO.File_Type;
      rec         : Hhsamp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Hhsamp_IO.Create (bin_file, Hhsamp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.fid := Convert( slices, 2 );
            rec.ivnadd := Convert( slices, 3, ( -9.0, -8.0 ) );
            rec.ivia := Convert_Ivia_Type( Get( slices, 4 ));
--             rec.ivid := Convert( slices, 5 );
            rec.ivlnc := Convert( slices, 6, ( -9, -1 ) );
            rec.ivtnc := Convert( slices, 7, ( -9, -8, -1 ) );
            rec.iviam := Convert_Iviam_Type( Get( slices, 8 ));
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 9 ));
            rec.ivosmrh := Convert( slices, 10, ( -9, -8, -1 ) );
            rec.ivnsmrh := Convert( slices, 11, ( -9, -8, -1 ) );
            rec.ivrrefh := Convert_Ivrrefh_Type( Get( slices, 12 ));
            rec.ivisst := Convert_Ivisst_Type( Get( slices, 13 ));
            rec.ivconv := Convert_Ivconv_Type( Get( slices, 14 ));
            rec.ivreis := Convert_Ivreis_Type( Get( slices, 15 ));
            rec.hhdc := Convert_Hhdc_Type( Get( slices, 16 ));
            rec.hhorig := Convert_Hhorig_Type( Get( slices, 17 ));
            rec.xhwght := Convert( slices, 18, ( -9.0, -8.0, -1.0 ) );
            rec.region := Convert_Region_Type( Get( slices, 19 ));
            rec.hhmove := Convert_Hhmove_Type( Get( slices, 20 ));
            rec.ahid := Convert( slices, 21 );
            rec.xhwghte := Convert( slices, 22 );
            rec.xhwtsw1 := Convert( slices, 23 );
            rec.xhwtsw2 := Convert( slices, 24 );
            rec.strata := Convert( slices, 25, ( -9, -8, -1 ) );
            rec.psu := Convert( slices, 26, ( -9, -8, -1 ) );
            rec.region2 := Convert_Region2_Type( Get( slices, 27 ));
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Hhsamp_component ).start_pos = 0 ) then
               index.pointers( Hhsamp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Hhsamp_component ).counter := index.pointers( Hhsamp_component ).counter + 1;
            Put_Index( index_map, index );
            Hhsamp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Hhsamp_IO.Close( bin_file );
   end Create_Hhsamp_Wave_J;




   procedure Create_Income_Wave_J( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Income_IO.File_Type;
      rec         : Income_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Income_IO.Create (bin_file, Income_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.pno := Convert( slices, 1 );
            rec.ficode := Convert_Ficode_Type( Get( slices, 2 ));
            rec.frall := Convert_Frall_Type( Get( slices, 3 ));
            rec.fr01 := Convert_Cd1own_Type( Get( slices, 4 ));
            rec.fr02 := Convert_Cd1own_Type( Get( slices, 5 ));
            rec.fr03 := Convert_Cd1own_Type( Get( slices, 6 ));
            rec.fr04 := Convert( slices, 7, ( -9, -8, -2, -1 ) );
            rec.fr05 := Convert_Cd1own_Type( Get( slices, 8 ));
            rec.fr06 := Convert_Cd1own_Type( Get( slices, 9 ));
            rec.fr07 := Convert_Cd1own_Type( Get( slices, 10 ));
            rec.fr08 := Convert_Cd1own_Type( Get( slices, 11 ));
            rec.fr09 := Convert_Cd1own_Type( Get( slices, 12 ));
            rec.fr10 := Convert_Cd1own_Type( Get( slices, 13 ));
            rec.fr11 := Convert_Cd1own_Type( Get( slices, 14 ));
            rec.fr12 := Convert_Cd1own_Type( Get( slices, 15 ));
            rec.fr13 := Convert_Cd1own_Type( Get( slices, 16 ));
            rec.fr14 := Convert_Cd1own_Type( Get( slices, 17 ));
            rec.fr15 := Convert_Cd1own_Type( Get( slices, 18 ));
            rec.fr16 := Convert_Cd1own_Type( Get( slices, 19 ));
            rec.fr17 := Convert_Cd1own_Type( Get( slices, 20 ));
            rec.fr18 := Convert_Fr18_Type( Get( slices, 21 ));
            rec.fr19 := Convert_Fr18_Type( Get( slices, 22 ));
            rec.fr20 := Convert_Fr18_Type( Get( slices, 23 ));
            rec.frnow := Convert_Frnow_Type( Get( slices, 24 ));
            rec.frval := Convert( slices, 25, ( -9.0, -8.0, -3.0, -2.0, -1.0 ) );
            rec.frw := Convert( slices, 26, ( -9.0, -8.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.frjt := Convert_Frjt_Type( Get( slices, 27 ));
            rec.frjtpn := Convert( slices, 28, ( -9, -8, -2, -1 ) );
            rec.hid := Convert( slices, 29 );
            rec.fiseq := Convert( slices, 30 );
            rec.fim09l := Convert( slices, 31, ( -9.0, -8.0, -3.0 ) );
            rec.fim10l := Convert( slices, 32, ( -9.0, -8.0, -3.0 ) );
            rec.fim11l := Convert( slices, 33, ( -9.0, -8.0, -3.0 ) );
            rec.fim12l := Convert( slices, 34, ( -9.0, -8.0, -3.0 ) );
            rec.fim01t := Convert( slices, 35, ( -9.0, -8.0, -3.0 ) );
            rec.fim02t := Convert( slices, 36, ( -9.0, -8.0, -3.0 ) );
            rec.fim03t := Convert( slices, 37, ( -9.0, -8.0, -3.0 ) );
            rec.fim04t := Convert( slices, 38, ( -9.0, -8.0, -3.0 ) );
            rec.fim05t := Convert( slices, 39, ( -9.0, -8.0, -3.0 ) );
            rec.fim06t := Convert( slices, 40, ( -9.0, -8.0, -3.0 ) );
            rec.fim07t := Convert( slices, 41, ( -9.0, -8.0, -3.0 ) );
            rec.fim08t := Convert( slices, 42, ( -9.0, -8.0, -3.0 ) );
            rec.fim09t := Convert( slices, 43, ( -9.0, -8.0, -3.0 ) );
            rec.fim10t := Convert( slices, 44, ( -9.0, -8.0, -3.0 ) );
            rec.fim11t := Convert( slices, 45, ( -9.0, -8.0, -3.0 ) );
            rec.fim12t := Convert( slices, 46, ( -9.0, -8.0, -3.0 ) );
            rec.fim01n := Convert( slices, 47, ( -9.0, -8.0, -3.0 ) );
            rec.fim02n := Convert( slices, 48, ( -9.0, -3.0 ) );
            rec.fim03n := Convert( slices, 49, ( -9.0, -3.0 ) );
            rec.fim04n := Convert( slices, 50, ( -9.0, -3.0 ) );
            rec.frjtvf := Convert_Frjtvf_Type( Get( slices, 51 ));
            rec.frvali := Convert( slices, 52, ( -9, -8, -3, -2, -1 ) );
            rec.pid := Convert( slices, 53 );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Income_component ).start_pos = 0 ) then
               index.pointers( Income_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Income_component ).counter := index.pointers( Income_component ).counter + 1;
            Put_Index( index_map, index );
            Income_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Income_IO.Close( bin_file );
   end Create_Income_Wave_J;




   procedure Create_Indall_Wave_J( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Indall_IO.File_Type;
      rec         : Indall_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Indall_IO.Create (bin_file, Indall_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.pid := Convert( slices, 3 );
            rec.iviolw := Convert_Iviolw_Type( Get( slices, 4 ));
            rec.ivstat1 := Convert_Ivstat1_Type( Get( slices, 5 ));
            rec.hhmem := Convert_Hhmem_Type( Get( slices, 6 ));
            rec.newhy := Convert_Newhy_Type( Get( slices, 7 ));
            rec.nemnjn := Convert_Nemnjn_Type( Get( slices, 8 ));
            rec.neyrjn4 := Convert( slices, 9, ( -9, -8, -7, -2, -1 ) );
            rec.ivfio := Convert_Ivfio_Type( Get( slices, 10 ));
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 11 ));
            rec.iodc := Convert_Iodc_Type( Get( slices, 12 ));
            rec.memorig := Convert_Memorig_Type( Get( slices, 13 ));
            rec.hgr2r := Convert_Hgr2r_Type( Get( slices, 14 ));
            rec.hgsex := Convert_Hgsex_Type( Get( slices, 15 ));
            rec.hgbm := Convert_Hgbm_Type( Get( slices, 16 ));
            rec.hgby := Convert( slices, 17, ( -9, -8, -2, -1 ) );
            rec.mastat := Convert_Mastat_Type( Get( slices, 18 ));
            rec.hgspn := Convert( slices, 19, ( -9, -8, -2, -1 ) );
            rec.hgemp := Convert_Hgemp_Type( Get( slices, 20 ));
            rec.hgfno := Convert( slices, 21, ( -9, -8, -2, -1 ) );
            rec.hgmno := Convert( slices, 22, ( -9, -8, -2, -1 ) );
            rec.hgra := Convert( slices, 23, ( -9, -8, -2, -1 ) );
            rec.age := Convert( slices, 24, ( -9, -8, -2, -1 ) );
            rec.age12 := Convert( slices, 25, ( -9, -8, -2, -1 ) );
            rec.butype := Convert_Butype_Type( Get( slices, 26 ));
            rec.buno := Convert( slices, 27, ( -9, -8 ) );
            rec.nchild := Convert( slices, 28, ( -9, -8 ) );
            rec.depchl := Convert_Depchl_Type( Get( slices, 29 ));
            rec.hoh := Convert_Hoh_Type( Get( slices, 30 ));
            rec.rach16 := Convert_Hhch12_Type( Get( slices, 31 ));
            rec.agei := Convert_Agei_Type( Get( slices, 32 ));
            rec.lrwght := Convert( slices, 33, ( -9.0, -8.0 ) );
            rec.lewght := Convert( slices, 34, ( -9.0, -8.0 ) );
            rec.xrwght := Convert( slices, 35, ( -9.0, -8.0 ) );
            rec.xewght := Convert( slices, 36, ( -9.0, -8.0 ) );
            rec.movest := Convert_Movest_Type( Get( slices, 37 ));
            rec.sampst := Convert_Sampst_Type( Get( slices, 38 ));
            rec.xrwghte := Convert( slices, 39 );
            rec.xewghte := Convert( slices, 40 );
            rec.xrwtsw1 := Convert( slices, 41 );
            rec.xewtsw1 := Convert( slices, 42 );
            rec.xrwtsw2 := Convert( slices, 43 );
            rec.xewtsw2 := Convert( slices, 44 );
            rec.lrwtsw1 := Convert( slices, 45, ( -9.0, -8.0 ) );
            rec.lewtsw1 := Convert( slices, 46, ( -9.0, -8.0 ) );
            rec.lrwtsw2 := Convert( slices, 47, ( -9.0, -8.0 ) );
            rec.lewtsw2 := Convert( slices, 48, ( -9.0, -8.0 ) );
            rec.sppid := Convert( slices, 49 );
            rec.fpid := Convert( slices, 50 );
            rec.mpid := Convert( slices, 51 );
            rec.rapid := Convert( slices, 52 );
            rec.distmov := Convert( slices, 53, ( -9.0, -8.0 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Indall_component ).start_pos = 0 ) then
               index.pointers( Indall_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Indall_component ).counter := index.pointers( Indall_component ).counter + 1;
            Put_Index( index_map, index );
            Indall_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Indall_IO.Close( bin_file );
   end Create_Indall_Wave_J;




   procedure Create_Indresp_Wave_J( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Indresp_IO.File_Type;
      rec         : Indresp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Indresp_IO.Create (bin_file, Indresp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.doid := Convert( slices, 3, ( -9, -7 ) );
            rec.doim := Convert_Doim_Type( Get( slices, 4 ));
            rec.doiy4 := Convert( slices, 5, ( -9, -8, -7, -2, -1 ) );
            rec.ivsoih := Convert( slices, 6, ( -9, -8 ) );
            rec.ivsoim := Convert( slices, 7, ( -9, -8 ) );
            rec.ivlyr := Convert( slices, 8, ( -9, -8, -7 ) );
            rec.ivstat2 := Convert_Ivstat2_Type( Get( slices, 9 ));
            rec.lknbrd := Convert_Aidpl1_Type( Get( slices, 10 ));
            rec.lkmove := Convert_Lkmove_Type( Get( slices, 11 ));
            rec.lkmovy := Convert_Lkmovy_Type( Get( slices, 12 ));
            rec.xpmove := Convert( slices, 13, ( -9, -8, -7, -2, -1 ) );
            rec.plnew := Convert( slices, 14, ( -9, -8, -7, -2, -1 ) );
            rec.plnowm := Convert_Jbbgm1_Type( Get( slices, 15 ));
            rec.plnowy4 := Convert( slices, 16, ( -9, -8, -7, -2, -1 ) );
            rec.movjb := Convert_Aidpl1_Type( Get( slices, 17 ));
            rec.movjba := Convert_Movjba_Type( Get( slices, 18 ));
            rec.movjbb := Convert_Movjba_Type( Get( slices, 19 ));
            rec.movjbc := Convert_Movjba_Type( Get( slices, 20 ));
            rec.movjbd := Convert_Movjba_Type( Get( slices, 21 ));
            rec.movjbe := Convert_Movjba_Type( Get( slices, 22 ));
            rec.movjbf := Convert_Movjba_Type( Get( slices, 23 ));
            rec.movjbg := Convert_Movjba_Type( Get( slices, 24 ));
            rec.movjbh := Convert_Movjba_Type( Get( slices, 25 ));
            rec.movjbi := Convert_Movjba_Type( Get( slices, 26 ));
            rec.movy1 := Convert_Movy1_Type( Get( slices, 27 ));
            rec.movy2 := Convert_Movy2_Type( Get( slices, 28 ));
            rec.dobm := Convert_Cjsem_Type( Get( slices, 29 ));
            rec.doby := Convert( slices, 30, ( -9, -8, -7, -2, -1 ) );
            rec.sex := Convert_Sex_Type( Get( slices, 31 ));
            rec.jbstat := Convert_Jbstat_Type( Get( slices, 32 ));
            rec.edlyr := Convert_Aidpl1_Type( Get( slices, 33 ));
            rec.edtype1 := Convert_Edtype1_Type( Get( slices, 34 ));
            rec.edblyr1 := Convert_Boolean_With_Missing( Get( slices, 35 ));
            rec.edbgm1 := Convert_Edbgm1_Type( Get( slices, 36 ));
            rec.edbgy1 := Convert( slices, 37, ( -9, -8, -7, -2, -1 ) );
            rec.edenm1 := Convert_Edbgm1_Type( Get( slices, 38 ));
            rec.edeny1 := Convert( slices, 39, ( -9, -8, -7, -2, -1 ) );
            rec.edenne1 := Convert_Edenne1_Type( Get( slices, 40 ));
            rec.edfeea1 := Convert_Yes_Or_Missing_Type( Get( slices, 41 ));
            rec.edfeeb1 := Convert_Yes_Or_Missing_Type( Get( slices, 42 ));
            rec.edfeec1 := Convert_Yes_Or_Missing_Type( Get( slices, 43 ));
            rec.edfeed1 := Convert_Yes_Or_Missing_Type( Get( slices, 44 ));
            rec.edfeee1 := Convert_Yes_Or_Missing_Type( Get( slices, 45 ));
            rec.edfeef1 := Convert_Yes_Or_Missing_Type( Get( slices, 46 ));
            rec.edfeeg1 := Convert_Yes_Or_Missing_Type( Get( slices, 47 ));
            rec.edqual1 := Convert_Edqual1_Type( Get( slices, 48 ));
            rec.edqnn1 := Convert( slices, 49, ( -9, -8, -7, -2, -1 ) );
            rec.edqla1 := Convert_Yes_Or_Missing_Type( Get( slices, 50 ));
            rec.edqlb1 := Convert_Yes_Or_Missing_Type( Get( slices, 51 ));
            rec.edqlc1 := Convert_Yes_Or_Missing_Type( Get( slices, 52 ));
            rec.edqld1 := Convert_Yes_Or_Missing_Type( Get( slices, 53 ));
            rec.edqle1 := Convert_Yes_Or_Missing_Type( Get( slices, 54 ));
            rec.edqlf1 := Convert_Yes_Or_Missing_Type( Get( slices, 55 ));
            rec.edqlg1 := Convert_Yes_Or_Missing_Type( Get( slices, 56 ));
            rec.edqlh1 := Convert_Yes_Or_Missing_Type( Get( slices, 57 ));
            rec.edqli1 := Convert_Yes_Or_Missing_Type( Get( slices, 58 ));
            rec.edqlj1 := Convert( slices, 59, ( -9, -8, -7 ) );
            rec.edqlan1 := Convert( slices, 60, ( -9, -8, -7, -2, -1 ) );
            rec.edqlbn1 := Convert( slices, 61, ( -9, -8, -7, -2, -1 ) );
            rec.edqlcn1 := Convert( slices, 62, ( -9, -8, -7, -2, -1 ) );
            rec.edqldn1 := Convert( slices, 63, ( -9, -8, -7, -2, -1 ) );
            rec.edqlen1 := Convert( slices, 64, ( -9, -8, -7, -2, -1 ) );
            rec.edqlfn1 := Convert( slices, 65, ( -9, -8, -7, -2, -1 ) );
            rec.edqlgn1 := Convert( slices, 66, ( -9, -8, -7, -2, -1 ) );
            rec.edqlhn1 := Convert( slices, 67, ( -9, -8, -7, -2, -1 ) );
            rec.edqlin1 := Convert( slices, 68, ( -9, -8, -7, -2, -1 ) );
            rec.edqljn1 := Convert( slices, 69, ( -9, -8, -7, -2, -1 ) );
            rec.edoqln1 := Convert( slices, 70, ( -9, -8, -7, -2, -1 ) );
            rec.edoql1 := Convert_Edoql1_Type( Get( slices, 71 ));
            rec.edmore1 := Convert_Boolean_With_Missing( Get( slices, 72 ));
            rec.edtype2 := Convert_Edtype1_Type( Get( slices, 73 ));
            rec.edblyr2 := Convert_Boolean_With_Missing( Get( slices, 74 ));
            rec.edbgm2 := Convert_Edbgm1_Type( Get( slices, 75 ));
            rec.edbgy2 := Convert( slices, 76, ( -9, -8, -7, -2, -1 ) );
            rec.edenm2 := Convert_Edbgm1_Type( Get( slices, 77 ));
            rec.edeny2 := Convert( slices, 78, ( -9, -8, -7, -2, -1 ) );
            rec.edenne2 := Convert_Edenne2_Type( Get( slices, 79 ));
            rec.edfeea2 := Convert_Yes_Or_Missing_Type( Get( slices, 80 ));
            rec.edfeeb2 := Convert_Yes_Or_Missing_Type( Get( slices, 81 ));
            rec.edfeec2 := Convert_Yes_Or_Missing_Type( Get( slices, 82 ));
            rec.edfeed2 := Convert_Yes_Or_Missing_Type( Get( slices, 83 ));
            rec.edfeee2 := Convert_Yes_Or_Missing_Type( Get( slices, 84 ));
            rec.edfeef2 := Convert_Yes_Or_Missing_Type( Get( slices, 85 ));
            rec.edfeeg2 := Convert_Yes_Or_Missing_Type( Get( slices, 86 ));
            rec.edqual2 := Convert_Edqual1_Type( Get( slices, 87 ));
            rec.edqnn2 := Convert( slices, 88, ( -9, -8, -7, -2, -1 ) );
            rec.edqla2 := Convert_Yes_Or_Missing_Type( Get( slices, 89 ));
            rec.edqlb2 := Convert_Yes_Or_Missing_Type( Get( slices, 90 ));
            rec.edqlc2 := Convert_Yes_Or_Missing_Type( Get( slices, 91 ));
            rec.edqld2 := Convert_Yes_Or_Missing_Type( Get( slices, 92 ));
            rec.edqle2 := Convert_Yes_Or_Missing_Type( Get( slices, 93 ));
            rec.edqlf2 := Convert_Yes_Or_Missing_Type( Get( slices, 94 ));
            rec.edqlg2 := Convert_Yes_Or_Missing_Type( Get( slices, 95 ));
            rec.edqlh2 := Convert_Yes_Or_Missing_Type( Get( slices, 96 ));
            rec.edqli2 := Convert_Yes_Or_Missing_Type( Get( slices, 97 ));
            rec.edqlj2 := Convert( slices, 98, ( -9, -8, -7 ) );
            rec.edqlan2 := Convert( slices, 99, ( -9, -8, -7, -2, -1 ) );
            rec.edqlbn2 := Convert( slices, 100, ( -9, -8, -7, -2, -1 ) );
            rec.edqlcn2 := Convert( slices, 101, ( -9, -8, -7, -2, -1 ) );
            rec.edqldn2 := Convert( slices, 102, ( -9, -8, -7, -2, -1 ) );
            rec.edqlen2 := Convert( slices, 103, ( -9, -8, -7, -2, -1 ) );
            rec.edqlfn2 := Convert( slices, 104, ( -9, -8, -7, -2, -1 ) );
            rec.edqlgn2 := Convert( slices, 105, ( -9, -8, -7, -2, -1 ) );
            rec.edqlhn2 := Convert( slices, 106, ( -9, -8, -7, -2, -1 ) );
            rec.edqlin2 := Convert( slices, 107, ( -9, -8, -7, -2, -1 ) );
            rec.edqljn2 := Convert( slices, 108, ( -9, -8, -7, -2, -1 ) );
            rec.edoqln2 := Convert( slices, 109, ( -9, -8, -7, -2, -1 ) );
            rec.edoql2 := Convert_Edoql1_Type( Get( slices, 110 ));
            rec.edmore2 := Convert_Boolean_With_Missing( Get( slices, 111 ));
            rec.mlstat := Convert_Mlstat_Type( Get( slices, 112 ));
            rec.mlchng := Convert_Bscon_Type( Get( slices, 113 ));
            rec.mlchm := Convert_Mlchm_Type( Get( slices, 114 ));
            rec.mlchy4 := Convert( slices, 115, ( -9, -8, -7, -2, -1 ) );
            rec.plbornd := Convert_Plbornd_Type( Get( slices, 116 ));
            rec.plbornc := Convert_Plbornc_Type( Get( slices, 117 ));
            rec.yr2uk4 := Convert( slices, 118, ( -9, -8, -7, -2, -1 ) );
            rec.citzn1 := Convert( slices, 119, ( -9, -8, -7, -2, -1 ) );
            rec.citzn2 := Convert_Citzn2_Type( Get( slices, 120 ));
            rec.race := Convert_Race_Type( Get( slices, 121 ));
            rec.paju := Convert_Paju_Type( Get( slices, 122 ));
            rec.pasoc := Convert( slices, 123, ( -9, -8, -7, -2, -1 ) );
            rec.pasemp := Convert_J2semp_Type( Get( slices, 124 ));
            rec.paboss := Convert_Maboss_Type( Get( slices, 125 ));
            rec.pamngr := Convert_Mamngr_Type( Get( slices, 126 ));
            rec.maju := Convert_Maju_Type( Get( slices, 127 ));
            rec.masoc := Convert( slices, 128, ( -9, -8, -7, -2, -1 ) );
            rec.masemp := Convert_J2semp_Type( Get( slices, 129 ));
            rec.maboss := Convert_Maboss_Type( Get( slices, 130 ));
            rec.mamngr := Convert_Mamngr_Type( Get( slices, 131 ));
            rec.j1soc := Convert( slices, 132, ( -9, -8, -7, -2, -1 ) );
            rec.j1none := Convert_J1none_Type( Get( slices, 133 ));
            rec.j1semp := Convert_J1semp_Type( Get( slices, 134 ));
            rec.j1boss := Convert_J1boss_Type( Get( slices, 135 ));
            rec.j1mngr := Convert_J1mngr_Type( Get( slices, 136 ));
            rec.lcoh := Convert_Aidpl1_Type( Get( slices, 137 ));
            rec.coh1bm := Convert_Ch1bm_Type( Get( slices, 138 ));
            rec.coh1by := Convert( slices, 139, ( -9, -8, -7, -2, -1 ) );
            rec.coh1mr := Convert_Coh1mr_Type( Get( slices, 140 ));
            rec.coh1em := Convert_Ch1bm_Type( Get( slices, 141 ));
            rec.coh1ey := Convert( slices, 142, ( -9, -8, -7, -2, -1 ) );
            rec.nmar := Convert_Nmar_Type( Get( slices, 143 ));
            rec.lmar1m := Convert_Ch1bm_Type( Get( slices, 144 ));
            rec.lmar1y := Convert( slices, 145, ( -9, -8, -7, -2, -1 ) );
            rec.lprnt := Convert_Lprnt_Type( Get( slices, 146 ));
            rec.lnprnt := Convert( slices, 147, ( -9, -8, -7, -2, -1 ) );
            rec.ch1bm := Convert_Ch1bm_Type( Get( slices, 148 ));
            rec.ch1by := Convert( slices, 149, ( -9, -8, -7, -2, -1 ) );
            rec.school := Convert_School_Type( Get( slices, 150 ));
            rec.scend := Convert( slices, 151, ( -9, -8, -7, -2, -1 ) );
            rec.sctype := Convert_Sctype_Type( Get( slices, 152 ));
            rec.scnow := Convert_Cjsck2_Type( Get( slices, 153 ));
            rec.fetype := Convert_Fetype_Type( Get( slices, 154 ));
            rec.fenow := Convert_Fenow_Type( Get( slices, 155 ));
            rec.feend := Convert( slices, 156, ( -9, -8, -7, -2, -1 ) );
            rec.qfhas := Convert_Bscon_Type( Get( slices, 157 ));
            rec.qfa := Convert_Qfa_Type( Get( slices, 158 ));
            rec.qfb := Convert_Qfb_Type( Get( slices, 159 ));
            rec.qfc := Convert_Qfc_Type( Get( slices, 160 ));
            rec.qfd := Convert_Qfd_Type( Get( slices, 161 ));
            rec.qfe := Convert_Qfe_Type( Get( slices, 162 ));
            rec.qff := Convert_Qff_Type( Get( slices, 163 ));
            rec.qfg := Convert_Qfg_Type( Get( slices, 164 ));
            rec.qfh := Convert_Qfh_Type( Get( slices, 165 ));
            rec.qfi := Convert_Qfi_Type( Get( slices, 166 ));
            rec.qfj := Convert_Qfj_Type( Get( slices, 167 ));
            rec.qfk := Convert_Qfk_Type( Get( slices, 168 ));
            rec.qfl := Convert_Qfl_Type( Get( slices, 169 ));
            rec.qfm := Convert_Qfm_Type( Get( slices, 170 ));
            rec.qfn := Convert_Qfn_Type( Get( slices, 171 ));
            rec.qfed := Convert_Bscon_Type( Get( slices, 172 ));
            rec.qfeda := Convert_Qfeda_Type( Get( slices, 173 ));
            rec.nqfeda := Convert( slices, 174, ( -9, -8, -7, -2, -1 ) );
            rec.qfedb := Convert_Qfedb_Type( Get( slices, 175 ));
            rec.nqfedb := Convert( slices, 176, ( -9, -8, -7, -2, -1 ) );
            rec.qfedc := Convert_Qfedc_Type( Get( slices, 177 ));
            rec.nqfedc := Convert( slices, 178, ( -9, -8, -7, -2, -1 ) );
            rec.qfedd := Convert_Qfedd_Type( Get( slices, 179 ));
            rec.nqfedd := Convert( slices, 180, ( -9, -8, -7, -2, -1 ) );
            rec.qfede := Convert_Qfede_Type( Get( slices, 181 ));
            rec.nqfede := Convert( slices, 182, ( -9, -8, -7, -2, -1 ) );
            rec.qfedf := Convert_Qfedf_Type( Get( slices, 183 ));
            rec.nqfedf := Convert( slices, 184, ( -9, -8, -7, -2, -1 ) );
            rec.qfedg := Convert_Qfedg_Type( Get( slices, 185 ));
            rec.nqfedg := Convert( slices, 186, ( -9, -8, -7, -2, -1 ) );
            rec.qfedh := Convert_Qfedh_Type( Get( slices, 187 ));
            rec.nqfedh := Convert( slices, 188, ( -9, -8, -7, -2, -1 ) );
            rec.qfedi := Convert_Qfedi_Type( Get( slices, 189 ));
            rec.nqfedi := Convert( slices, 190, ( -9, -8, -7, -2, -1 ) );
            rec.qfedj := Convert_Qfedj_Type( Get( slices, 191 ));
            rec.nqfedj := Convert( slices, 192, ( -9, -8, -7, -2, -1 ) );
            rec.qfedt := Convert_Qfedt_Type( Get( slices, 193 ));
            rec.nqfedt := Convert( slices, 194, ( -9, -8, -7, -2, -1 ) );
            rec.qfedk := Convert_Qfedk_Type( Get( slices, 195 ));
            rec.nqfedk := Convert( slices, 196, ( -9, -8, -7, -2, -1 ) );
            rec.qfedl := Convert_Qfedl_Type( Get( slices, 197 ));
            rec.nqfedl := Convert( slices, 198, ( -9, -8, -7, -2, -1 ) );
            rec.qfedm := Convert_Qfedm_Type( Get( slices, 199 ));
            rec.nqfedm := Convert( slices, 200, ( -9, -8, -7, -2, -1 ) );
            rec.qfedn := Convert_Qfedn_Type( Get( slices, 201 ));
            rec.nqfedn := Convert( slices, 202, ( -9, -8, -7, -2, -1 ) );
            rec.qfedo := Convert_Qfedo_Type( Get( slices, 203 ));
            rec.nqfedo := Convert( slices, 204, ( -9, -8, -7, -2, -1 ) );
            rec.qfedp := Convert( slices, 205, ( -9, -8, -7 ) );
            rec.nqfedp := Convert( slices, 206, ( -9, -8, -7, -2, -1 ) );
            rec.qfedq := Convert_Qfedq_Type( Get( slices, 207 ));
            rec.nqfedq := Convert( slices, 208, ( -9, -8, -7, -2, -1 ) );
            rec.qfedr := Convert_Qfedr_Type( Get( slices, 209 ));
            rec.nqfedr := Convert( slices, 210, ( -9, -8, -7, -2, -1 ) );
            rec.qfeds := Convert_Hlprbm_Type( Get( slices, 211 ));
            rec.nqfeds := Convert( slices, 212, ( -9, -8, -7, -2, -1 ) );
            rec.train := Convert_Boolean_With_Missing( Get( slices, 213 ));
            rec.ntrain := Convert( slices, 214, ( -9, -8, -7, -2, -1 ) );
            rec.trplce1 := Convert_Trplce1_Type( Get( slices, 215 ));
            rec.trwhya1 := Convert_Boolean_With_Missing( Get( slices, 216 ));
            rec.trwhyb1 := Convert_Boolean_With_Missing( Get( slices, 217 ));
            rec.trwhyc1 := Convert_Boolean_With_Missing( Get( slices, 218 ));
            rec.trwhyd1 := Convert_Boolean_With_Missing( Get( slices, 219 ));
            rec.trwhye1 := Convert_Boolean_With_Missing( Get( slices, 220 ));
            rec.trq1 := Convert( slices, 221, ( -9, -8, -7 ) );
            rec.tru1 := Convert_Tru1_Type( Get( slices, 222 ));
            rec.trfeea1 := Convert_Nisjsa_Type( Get( slices, 223 ));
            rec.trfeeb1 := Convert_Yes_Or_Missing_Type( Get( slices, 224 ));
            rec.trfeec1 := Convert_Yes_Or_Missing_Type( Get( slices, 225 ));
            rec.trfeee1 := Convert_Yes_Or_Missing_Type( Get( slices, 226 ));
            rec.trfeef1 := Convert_Yes_Or_Missing_Type( Get( slices, 227 ));
            rec.trfeeg1 := Convert_Yes_Or_Missing_Type( Get( slices, 228 ));
            rec.trqlxp1 := Convert_Trqlxp1_Type( Get( slices, 229 ));
            rec.trqlac1 := Convert_Trqlac1_Type( Get( slices, 230 ));
            rec.trqlnn1 := Convert( slices, 231, ( -9, -8, -7, -2, -1 ) );
            rec.trqla1 := Convert_Yes_Or_Missing_Type( Get( slices, 232 ));
            rec.trqlb1 := Convert_Yes_Or_Missing_Type( Get( slices, 233 ));
            rec.trqlc1 := Convert_Yes_Or_Missing_Type( Get( slices, 234 ));
            rec.trqld1 := Convert_Yes_Or_Missing_Type( Get( slices, 235 ));
            rec.trqle1 := Convert_Yes_Or_Missing_Type( Get( slices, 236 ));
            rec.trqlf1 := Convert_Yes_Or_Missing_Type( Get( slices, 237 ));
            rec.trqlg1 := Convert_Yes_Or_Missing_Type( Get( slices, 238 ));
            rec.trqlh1 := Convert_Yes_Or_Missing_Type( Get( slices, 239 ));
            rec.trqli1 := Convert_Yes_Or_Missing_Type( Get( slices, 240 ));
            rec.trqlj1 := Convert( slices, 241, ( -9, -8, -7 ) );
            rec.trqlan1 := Convert( slices, 242, ( -9, -8, -7, -2, -1 ) );
            rec.trqlbn1 := Convert( slices, 243, ( -9, -8, -7, -2, -1 ) );
            rec.trqlcn1 := Convert( slices, 244, ( -9, -8, -7, -2, -1 ) );
            rec.trqldn1 := Convert( slices, 245, ( -9, -8, -7, -2, -1 ) );
            rec.trqlen1 := Convert( slices, 246, ( -9, -8, -7, -2, -1 ) );
            rec.trqlfn1 := Convert( slices, 247, ( -9, -8, -7, -2, -1 ) );
            rec.trqlgn1 := Convert( slices, 248, ( -9, -8, -7, -2, -1 ) );
            rec.trqlhn1 := Convert( slices, 249, ( -9, -8, -7, -2, -1 ) );
            rec.trqlin1 := Convert( slices, 250, ( -9, -8, -7, -2, -1 ) );
            rec.trqljn1 := Convert( slices, 251, ( -9, -8, -7, -2, -1 ) );
            rec.troqln1 := Convert( slices, 252, ( -9, -8, -7, -2, -1 ) );
            rec.troql1 := Convert_Troql1_Type( Get( slices, 253 ));
            rec.trmore1 := Convert_Boolean_With_Missing( Get( slices, 254 ));
            rec.trplce2 := Convert_Trplce1_Type( Get( slices, 255 ));
            rec.trwhya2 := Convert_Boolean_With_Missing( Get( slices, 256 ));
            rec.trwhyb2 := Convert_Boolean_With_Missing( Get( slices, 257 ));
            rec.trwhyc2 := Convert_Boolean_With_Missing( Get( slices, 258 ));
            rec.trwhyd2 := Convert_Boolean_With_Missing( Get( slices, 259 ));
            rec.trwhye2 := Convert_Boolean_With_Missing( Get( slices, 260 ));
            rec.trq2 := Convert( slices, 261, ( -9, -8, -7 ) );
            rec.tru2 := Convert_Tru1_Type( Get( slices, 262 ));
            rec.trfeea2 := Convert_Nisjsa_Type( Get( slices, 263 ));
            rec.trfeeb2 := Convert_Yes_Or_Missing_Type( Get( slices, 264 ));
            rec.trfeec2 := Convert_Yes_Or_Missing_Type( Get( slices, 265 ));
            rec.trfeee2 := Convert_Yes_Or_Missing_Type( Get( slices, 266 ));
            rec.trfeef2 := Convert_Yes_Or_Missing_Type( Get( slices, 267 ));
            rec.trfeeg2 := Convert_Yes_Or_Missing_Type( Get( slices, 268 ));
            rec.trqlxp2 := Convert_Trqlxp1_Type( Get( slices, 269 ));
            rec.trqlac2 := Convert_Trqlac1_Type( Get( slices, 270 ));
            rec.trqlnn2 := Convert( slices, 271, ( -9, -8, -7, -2, -1 ) );
            rec.trqla2 := Convert_Yes_Or_Missing_Type( Get( slices, 272 ));
            rec.trqlb2 := Convert_Yes_Or_Missing_Type( Get( slices, 273 ));
            rec.trqlc2 := Convert_Yes_Or_Missing_Type( Get( slices, 274 ));
            rec.trqld2 := Convert_Yes_Or_Missing_Type( Get( slices, 275 ));
            rec.trqle2 := Convert_Yes_Or_Missing_Type( Get( slices, 276 ));
            rec.trqlf2 := Convert_Yes_Or_Missing_Type( Get( slices, 277 ));
            rec.trqlg2 := Convert_Yes_Or_Missing_Type( Get( slices, 278 ));
            rec.trqlh2 := Convert_Yes_Or_Missing_Type( Get( slices, 279 ));
            rec.trqli2 := Convert_Yes_Or_Missing_Type( Get( slices, 280 ));
            rec.trqlj2 := Convert( slices, 281, ( -9, -8, -7 ) );
            rec.trqlan2 := Convert( slices, 282, ( -9, -8, -7, -2, -1 ) );
            rec.trqlbn2 := Convert( slices, 283, ( -9, -8, -7, -2, -1 ) );
            rec.trqlcn2 := Convert( slices, 284, ( -9, -8, -7, -2, -1 ) );
            rec.trqldn2 := Convert( slices, 285, ( -9, -8, -7, -2, -1 ) );
            rec.trqlen2 := Convert( slices, 286, ( -9, -8, -7, -2, -1 ) );
            rec.trqlfn2 := Convert( slices, 287, ( -9, -8, -7, -2, -1 ) );
            rec.trqlgn2 := Convert( slices, 288, ( -9, -8, -7, -2, -1 ) );
            rec.trqlhn2 := Convert( slices, 289, ( -9, -8, -7, -2, -1 ) );
            rec.trqlin2 := Convert( slices, 290, ( -9, -8, -7, -2, -1 ) );
            rec.trqljn2 := Convert( slices, 291, ( -9, -8, -7, -2, -1 ) );
            rec.troqln2 := Convert( slices, 292, ( -9, -8, -7, -2, -1 ) );
            rec.troql2 := Convert_Troql2_Type( Get( slices, 293 ));
            rec.trmore2 := Convert_Boolean_With_Missing( Get( slices, 294 ));
            rec.trplce3 := Convert_Trplce1_Type( Get( slices, 295 ));
            rec.trwhya3 := Convert_Boolean_With_Missing( Get( slices, 296 ));
            rec.trwhyb3 := Convert_Boolean_With_Missing( Get( slices, 297 ));
            rec.trwhyc3 := Convert_Boolean_With_Missing( Get( slices, 298 ));
            rec.trwhyd3 := Convert_Boolean_With_Missing( Get( slices, 299 ));
            rec.trwhye3 := Convert_Boolean_With_Missing( Get( slices, 300 ));
            rec.trq3 := Convert( slices, 301, ( -9, -8, -7 ) );
            rec.tru3 := Convert_Tru1_Type( Get( slices, 302 ));
            rec.trfeea3 := Convert_Nisjsa_Type( Get( slices, 303 ));
            rec.trfeeb3 := Convert_Yes_Or_Missing_Type( Get( slices, 304 ));
            rec.trfeec3 := Convert_Yes_Or_Missing_Type( Get( slices, 305 ));
            rec.trfeee3 := Convert_Yes_Or_Missing_Type( Get( slices, 306 ));
            rec.trfeef3 := Convert_Yes_Or_Missing_Type( Get( slices, 307 ));
            rec.trfeeg3 := Convert_Yes_Or_Missing_Type( Get( slices, 308 ));
            rec.trqlxp3 := Convert_Trqlxp1_Type( Get( slices, 309 ));
            rec.trqlac3 := Convert_Trqlac1_Type( Get( slices, 310 ));
            rec.trqlnn3 := Convert( slices, 311, ( -9, -8, -7, -2, -1 ) );
            rec.trqla3 := Convert_Yes_Or_Missing_Type( Get( slices, 312 ));
            rec.trqlb3 := Convert_Yes_Or_Missing_Type( Get( slices, 313 ));
            rec.trqlc3 := Convert_Yes_Or_Missing_Type( Get( slices, 314 ));
            rec.trqld3 := Convert_Yes_Or_Missing_Type( Get( slices, 315 ));
            rec.trqle3 := Convert_Yes_Or_Missing_Type( Get( slices, 316 ));
            rec.trqlf3 := Convert_Yes_Or_Missing_Type( Get( slices, 317 ));
            rec.trqlg3 := Convert_Yes_Or_Missing_Type( Get( slices, 318 ));
            rec.trqlh3 := Convert_Yes_Or_Missing_Type( Get( slices, 319 ));
            rec.trqli3 := Convert_Yes_Or_Missing_Type( Get( slices, 320 ));
            rec.trqlj3 := Convert( slices, 321, ( -9, -8, -7 ) );
            rec.trqlan3 := Convert( slices, 322, ( -9, -8, -7, -2, -1 ) );
            rec.trqlbn3 := Convert( slices, 323, ( -9, -8, -7, -2, -1 ) );
            rec.trqlcn3 := Convert( slices, 324, ( -9, -8, -7, -2, -1 ) );
            rec.trqldn3 := Convert( slices, 325, ( -9, -8, -7, -2, -1 ) );
            rec.trqlen3 := Convert( slices, 326, ( -9, -8, -7, -2, -1 ) );
            rec.trqlfn3 := Convert( slices, 327, ( -9, -8, -7, -2, -1 ) );
            rec.trqlgn3 := Convert( slices, 328, ( -9, -8, -7, -2, -1 ) );
            rec.trqlhn3 := Convert( slices, 329, ( -9, -8, -7, -2, -1 ) );
            rec.trqlin3 := Convert( slices, 330, ( -9, -8, -7, -2, -1 ) );
            rec.trqljn3 := Convert( slices, 331, ( -9, -8, -7, -2, -1 ) );
            rec.troqln3 := Convert( slices, 332, ( -9, -8, -7, -2, -1 ) );
            rec.troql3 := Convert_Troql2_Type( Get( slices, 333 ));
            rec.birhh := Convert_Aglt20_Type( Get( slices, 334 ));
            rec.mabwly := Convert_Aglt20_Type( Get( slices, 335 ));
            rec.mabwnly := Convert( slices, 336, ( -9, -8, -7 ) );
            rec.bwtpn1 := Convert( slices, 337, ( -9, -8, -7 ) );
            rec.bwtagm1 := Convert( slices, 338, ( -9, -8, -7 ) );
            rec.bwtxp1 := Convert_Boolean_With_Missing( Get( slices, 339 ));
            rec.bwtel1 := Convert_Bwtel_Type( Get( slices, 340 ));
            rec.bwtwk1 := Convert( slices, 341, ( -9, -8, -7, -2, -1 ) );
            rec.bwtkn1 := Convert_Bwtkn_Type( Get( slices, 342 ));
            rec.bwtlb1 := Convert( slices, 343, ( -9, -8, -7, -2, -1 ) );
            rec.bwtoz1 := Convert( slices, 344, ( -9, -8, -7, -2, -1 ) );
            rec.bwtgm1 := Convert( slices, 345, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.bwtg51 := Convert_Bwtg51_Type( Get( slices, 346 ));
            rec.bwtpn2 := Convert( slices, 347, ( -9, -8, -7 ) );
            rec.bwtagm2 := Convert( slices, 348, ( -9, -8, -7 ) );
            rec.bwtxp2 := Convert_Boolean_With_Missing( Get( slices, 349 ));
            rec.bwtel2 := Convert_Bwtel2_Type( Get( slices, 350 ));
            rec.bwtwk2 := Convert( slices, 351, ( -9, -8, -7, -2, -1 ) );
            rec.bwtkn2 := Convert_Bwtkn_Type( Get( slices, 352 ));
            rec.bwtlb2 := Convert( slices, 353, ( -9, -8, -7 ) );
            rec.bwtoz2 := Convert( slices, 354, ( -9, -8, -7, -2, -1 ) );
            rec.bwtgm2 := Convert( slices, 355, ( -9, -8, -7 ) );
            rec.bwtg52 := Convert_Bwtg5_Type( Get( slices, 356 ));
            rec.bwtpn3 := Convert( slices, 357, ( -9, -8, -7 ) );
            rec.bwtagm3 := Convert( slices, 358, ( -9, -8, -7 ) );
            rec.bwtxp3 := Convert_Boolean_With_Missing( Get( slices, 359 ));
            rec.bwtel3 := Convert_Bwtel2_Type( Get( slices, 360 ));
            rec.bwtwk3 := Convert( slices, 361, ( -9, -8, -7, -2, -1 ) );
            rec.bwtkn3 := Convert_Bwtkn_Type( Get( slices, 362 ));
            rec.bwtlb3 := Convert( slices, 363, ( -9, -8, -7 ) );
            rec.bwtoz3 := Convert( slices, 364, ( -9, -8, -7, -2, -1 ) );
            rec.bwtgm3 := Convert( slices, 365, ( -9, -8, -7 ) );
            rec.bwtg53 := Convert_Bwtg5_Type( Get( slices, 366 ));
            rec.lngeng := Convert_Lngeng_Type( Get( slices, 367 ));
            rec.lngoth := Convert_Lngoth_Type( Get( slices, 368 ));
            rec.lngusa := Convert_Lngusa_Type( Get( slices, 369 ));
            rec.lngusb := Convert_Lngusb_Type( Get( slices, 370 ));
            rec.lngusn := Convert( slices, 371, ( -9, -8, -7, -2, -1 ) );
            rec.lngcnv := Convert_Boolean_With_Missing( Get( slices, 372 ));
            rec.lngred := Convert_Boolean_With_Missing( Get( slices, 373 ));
            rec.lngwke := Convert_Lngwke_Type( Get( slices, 374 ));
            rec.lngwko := Convert_Lngwko_Type( Get( slices, 375 ));
            rec.lngwkx := Convert_Lngwko_Type( Get( slices, 376 ));
            rec.ivda := Convert_Ivda_Type( Get( slices, 377 ));
            rec.ivdb := Convert_Ivdb_Type( Get( slices, 378 ));
            rec.ivdc := Convert_Ivdc_Type( Get( slices, 379 ));
            rec.ivdd := Convert_Ivdd_Type( Get( slices, 380 ));
            rec.ivde := Convert_Yes_Or_Missing_Type( Get( slices, 381 ));
            rec.hldsbl := Convert_Bscon_Type( Get( slices, 382 ));
            rec.hlstat := Convert_Hlstat_Type( Get( slices, 383 ));
            rec.hlprb := Convert( slices, 384, ( -9, -8, -7, -2, -1 ) );
            rec.hlprba := Convert_Hlprba_Type( Get( slices, 385 ));
            rec.hlprbb := Convert_Hlprbb_Type( Get( slices, 386 ));
            rec.hlprbc := Convert_Hlprbc_Type( Get( slices, 387 ));
            rec.hlprbd := Convert_Hlprbd_Type( Get( slices, 388 ));
            rec.hlprbe := Convert_Hlprbe_Type( Get( slices, 389 ));
            rec.hlprbf := Convert_Hlprbf_Type( Get( slices, 390 ));
            rec.hlprbg := Convert_Hlprbg_Type( Get( slices, 391 ));
            rec.hlprbh := Convert_Hlprbh_Type( Get( slices, 392 ));
            rec.hlprbi := Convert_Hlprbi_Type( Get( slices, 393 ));
            rec.hlprbj := Convert_Hlprbj_Type( Get( slices, 394 ));
            rec.hlprbk := Convert_Hlprbk_Type( Get( slices, 395 ));
            rec.hlprbl := Convert_Hlprbl_Type( Get( slices, 396 ));
            rec.hlprbm := Convert_Hlprbm_Type( Get( slices, 397 ));
            rec.hllt := Convert_Bscon_Type( Get( slices, 398 ));
            rec.hllta := Convert_Hllta_Type( Get( slices, 399 ));
            rec.hlltb := Convert_Hlltb_Type( Get( slices, 400 ));
            rec.hlltc := Convert_Hlltc_Type( Get( slices, 401 ));
            rec.hlltd := Convert_Hlltd_Type( Get( slices, 402 ));
            rec.hllte := Convert_Hllte_Type( Get( slices, 403 ));
            rec.hlltw := Convert_Bscon_Type( Get( slices, 404 ));
            rec.hlendw := Convert_Hlendw_Type( Get( slices, 405 ));
            rec.hlltwa := Convert_Hlltwa_Type( Get( slices, 406 ));
            rec.hliv65 := Convert_Hliv65_Type( Get( slices, 407 ));
            rec.adla := Convert_Adla_Type( Get( slices, 408 ));
            rec.adlad := Convert_Adlad_Type( Get( slices, 409 ));
            rec.adlb := Convert_Adla_Type( Get( slices, 410 ));
            rec.adlbd := Convert_Adlad_Type( Get( slices, 411 ));
            rec.adlc := Convert_Adla_Type( Get( slices, 412 ));
            rec.adlcd := Convert_Adlad_Type( Get( slices, 413 ));
            rec.adld := Convert_Adla_Type( Get( slices, 414 ));
            rec.adldd := Convert_Adlad_Type( Get( slices, 415 ));
            rec.adle := Convert_Adla_Type( Get( slices, 416 ));
            rec.adled := Convert_Adlad_Type( Get( slices, 417 ));
            rec.adlf := Convert_Adla_Type( Get( slices, 418 ));
            rec.adlfd := Convert_Adlad_Type( Get( slices, 419 ));
            rec.hl2gp := Convert_Hl2gp_Type( Get( slices, 420 ));
            rec.hl2hop := Convert( slices, 421, ( -9, -8, -7, -2, -1 ) );
            rec.xdts := Convert_Bscon_Type( Get( slices, 422 ));
            rec.nxdts := Convert_Nxdts_Type( Get( slices, 423 ));
            rec.hosp := Convert_Hlsv_Type( Get( slices, 424 ));
            rec.hospd := Convert( slices, 425, ( -9, -8, -7, -2, -1 ) );
            rec.hospch := Convert_Hospch_Type( Get( slices, 426 ));
            rec.hospnhs := Convert_Hospnhs_Type( Get( slices, 427 ));
            rec.hlcvr := Convert_Hlcvr_Type( Get( slices, 428 ));
            rec.hlcvrh := Convert_Hlcvrh_Type( Get( slices, 429 ));
            rec.hlcvrl := Convert( slices, 430, ( -9, -8, -7, -2, -1 ) );
            rec.hlsv := Convert_Hlsv_Type( Get( slices, 431 ));
            rec.hlsva := Convert_Hlsva_Type( Get( slices, 432 ));
            rec.hlsvan := Convert_Hlsvan_Type( Get( slices, 433 ));
            rec.hlsvaf := Convert_Hlsvaf_Type( Get( slices, 434 ));
            rec.hlsvb := Convert_Hlsvb_Type( Get( slices, 435 ));
            rec.hlsvbn := Convert_Hlsvan_Type( Get( slices, 436 ));
            rec.hlsvbf := Convert_Hlsvaf_Type( Get( slices, 437 ));
            rec.hlsvc := Convert_Hlsvc_Type( Get( slices, 438 ));
            rec.hlsvcn := Convert_Hlsvan_Type( Get( slices, 439 ));
            rec.hlsvcf := Convert_Hlsvaf_Type( Get( slices, 440 ));
            rec.hlsvd := Convert_Hlsvd_Type( Get( slices, 441 ));
            rec.hlsvdn := Convert_Hlsvan_Type( Get( slices, 442 ));
            rec.hlsvdf := Convert_Hlsvaf_Type( Get( slices, 443 ));
            rec.hlsve := Convert_Hlsve_Type( Get( slices, 444 ));
            rec.hlsven := Convert_Hlsvan_Type( Get( slices, 445 ));
            rec.hlsvef := Convert_Hlsvaf_Type( Get( slices, 446 ));
            rec.hlsvf := Convert_Hlsvf_Type( Get( slices, 447 ));
            rec.hlsvfn := Convert_Hlsvan_Type( Get( slices, 448 ));
            rec.hlsvff := Convert_Hlsvaf_Type( Get( slices, 449 ));
            rec.hlsvg := Convert_Hlsvg_Type( Get( slices, 450 ));
            rec.hlsvgn := Convert_Hlsvan_Type( Get( slices, 451 ));
            rec.hlsvgf := Convert_Hlsvaf_Type( Get( slices, 452 ));
            rec.hlsvh := Convert_Hlsvh_Type( Get( slices, 453 ));
            rec.hlsvhn := Convert_Hlsvan_Type( Get( slices, 454 ));
            rec.hlsvhf := Convert_Hlsvaf_Type( Get( slices, 455 ));
            rec.hlsvi := Convert_Hlsvi_Type( Get( slices, 456 ));
            rec.hlsvin := Convert_Hlsvan_Type( Get( slices, 457 ));
            rec.hlsvif := Convert_Hlsvaf_Type( Get( slices, 458 ));
            rec.hlsvj := Convert_Hlsvj_Type( Get( slices, 459 ));
            rec.hlsvjn := Convert_Hlsvan_Type( Get( slices, 460 ));
            rec.hlsvjf := Convert_Hlsvaf_Type( Get( slices, 461 ));
            rec.hlsvk := Convert_Hlsvk_Type( Get( slices, 462 ));
            rec.hlsvkn := Convert_Hlsvan_Type( Get( slices, 463 ));
            rec.hlsvkf := Convert_Hlsvaf_Type( Get( slices, 464 ));
            rec.hlsvl := Convert_Hlsvl_Type( Get( slices, 465 ));
            rec.hlsvln := Convert_Hlsvln_Type( Get( slices, 466 ));
            rec.hlsvlf := Convert_Hlsvlf_Type( Get( slices, 467 ));
            rec.hlsvm := Convert_Hlsvm_Type( Get( slices, 468 ));
            rec.hlsvmn := Convert_Hlsvln_Type( Get( slices, 469 ));
            rec.hlsvmf := Convert_Hlsvlf_Type( Get( slices, 470 ));
            rec.hlck := Convert_Aidpl1_Type( Get( slices, 471 ));
            rec.hlcka := Convert_Hlcka_Type( Get( slices, 472 ));
            rec.hlckan := Convert_Hlckan_Type( Get( slices, 473 ));
            rec.hlckb := Convert_Hlcka_Type( Get( slices, 474 ));
            rec.hlckbn := Convert_Hlckan_Type( Get( slices, 475 ));
            rec.hlckc := Convert_Hlcka_Type( Get( slices, 476 ));
            rec.hlckcn := Convert_Hlckan_Type( Get( slices, 477 ));
            rec.hlckd := Convert_Hlcka_Type( Get( slices, 478 ));
            rec.hlckdn := Convert_Hlckan_Type( Get( slices, 479 ));
            rec.hlcke := Convert_Hlcka_Type( Get( slices, 480 ));
            rec.hlcken := Convert_Hlckan_Type( Get( slices, 481 ));
            rec.hlckf := Convert_Hlcka_Type( Get( slices, 482 ));
            rec.hlckfn := Convert_Hlckan_Type( Get( slices, 483 ));
            rec.hlckg := Convert_Hlcka_Type( Get( slices, 484 ));
            rec.hlckgn := Convert_Hlckan_Type( Get( slices, 485 ));
            rec.hlckh := Convert_Hlcka_Type( Get( slices, 486 ));
            rec.hlckhn := Convert_Hlckan_Type( Get( slices, 487 ));
            rec.hlcki := Convert_Hlcki_Type( Get( slices, 488 ));
            rec.hlckin := Convert_Hlckin_Type( Get( slices, 489 ));
            rec.smoker := Convert_Bscon_Type( Get( slices, 490 ));
            rec.ncigs := Convert( slices, 491, ( -9, -8, -7, -2, -1 ) );
            rec.ophla := Convert_Ophla_Type( Get( slices, 492 ));
            rec.ophlb := Convert_Ophlb_Type( Get( slices, 493 ));
            rec.ophlc := Convert_Ophlb_Type( Get( slices, 494 ));
            rec.aidhh := Convert_Aidhh_Type( Get( slices, 495 ));
            rec.aidhua := Convert( slices, 496, ( -9, -8, -7, -1 ) );
            rec.aidhub := Convert( slices, 497, ( -9, -8, -7 ) );
            rec.aidhuc := Convert( slices, 498, ( -9, -8, -7 ) );
            rec.aidxhh := Convert_Aidxhh_Type( Get( slices, 499 ));
            rec.naidxhh := Convert_Naidxhh_Type( Get( slices, 500 ));
            rec.aidhu1 := Convert_Aidhu1_Type( Get( slices, 501 ));
            rec.aidhu2 := Convert_Aidhu2_Type( Get( slices, 502 ));
            rec.aidhrs := Convert_Aidhrs_Type( Get( slices, 503 ));
            rec.ivma := Convert_Ivda_Type( Get( slices, 504 ));
            rec.ivmb := Convert_Ivdb_Type( Get( slices, 505 ));
            rec.ivmc := Convert_Ivec_Type( Get( slices, 506 ));
            rec.ivmd := Convert_Ivdd_Type( Get( slices, 507 ));
            rec.ivme := Convert_Ivee_Type( Get( slices, 508 ));
            rec.jbhas := Convert_Frnow_Type( Get( slices, 509 ));
            rec.jboff := Convert_Jboff_Type( Get( slices, 510 ));
            rec.jboffy := Convert_Jboffy_Type( Get( slices, 511 ));
            rec.jbterm1 := Convert_Jbterm1_Type( Get( slices, 512 ));
            rec.jbterm2 := Convert_Jbterm2_Type( Get( slices, 513 ));
            rec.jbsoc := Convert( slices, 514, ( -9, -8, -2, -1 ) );
            rec.jbsic := Convert( slices, 515, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.jbsemp := Convert_Jbsemp_Type( Get( slices, 516 ));
            rec.jbmngr := Convert_Jbmngr_Type( Get( slices, 517 ));
            rec.jbsect := Convert_Jbsect_Type( Get( slices, 518 ));
            rec.jbsize := Convert_Jbsize_Type( Get( slices, 519 ));
            rec.jbhrs := Convert( slices, 520, ( -9, -8, -7, -2, -1 ) );
            rec.jbot := Convert( slices, 521, ( -9, -8, -7, -2, -1 ) );
            rec.jbotpd := Convert( slices, 522, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbhrlk := Convert_Jbhrlk_Type( Get( slices, 523 ));
            rec.jbpl := Convert_Jbpl_Type( Get( slices, 524 ));
            rec.jbttwt := Convert( slices, 525, ( -9, -8, -7, -3, -2, -1 ) );
            rec.jbttwm := Convert_Jbttwm_Type( Get( slices, 526 ));
            rec.jbsat2 := Convert( slices, 527, ( -9, -8, -7, -2, -1 ) );
            rec.jbsat4 := Convert_Jbsat4_Type( Get( slices, 528 ));
            rec.jbsat6 := Convert_Jbsat4_Type( Get( slices, 529 ));
            rec.jbsat7 := Convert_Jbsat_Type( Get( slices, 530 ));
            rec.jbsat := Convert_Jbsat_Type( Get( slices, 531 ));
            rec.paygl := Convert( slices, 532, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.paygw := Convert( slices, 533, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.paynl := Convert( slices, 534, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.paynw := Convert( slices, 535, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.pytc := Convert_Pytc_Type( Get( slices, 536 ));
            rec.pywftc := Convert( slices, 537, ( -9, -8, -7, -2, -1 ) );
            rec.pywftcw := Convert( slices, 538, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.pydptc := Convert( slices, 539, ( -9, -8, -7, -2, -1 ) );
            rec.pydptcw := Convert( slices, 540, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.payslp := Convert_Payslp_Type( Get( slices, 541 ));
            rec.payusl := Convert_Aidpl1_Type( Get( slices, 542 ));
            rec.payu := Convert( slices, 543, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.payuw := Convert( slices, 544, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.payug := Convert_Paylyg_Type( Get( slices, 545 ));
            rec.paydf1 := Convert_Paydf1_Type( Get( slices, 546 ));
            rec.paydf2 := Convert_Paydf2_Type( Get( slices, 547 ));
            rec.paydf3 := Convert_Paydf3_Type( Get( slices, 548 ));
            rec.paydf4 := Convert_Paydf4_Type( Get( slices, 549 ));
            rec.paydf5 := Convert_Paydf5_Type( Get( slices, 550 ));
            rec.paydf6 := Convert_Paydf6_Type( Get( slices, 551 ));
            rec.paydf7 := Convert_Paydf7_Type( Get( slices, 552 ));
            rec.paydf8 := Convert_Paydf8_Type( Get( slices, 553 ));
            rec.paydf9 := Convert_Paydf9_Type( Get( slices, 554 ));
            rec.paytyp := Convert_Paytyp_Type( Get( slices, 555 ));
            rec.ovtpay := Convert_Bpar16_Type( Get( slices, 556 ));
            rec.extrate := Convert( slices, 557, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.extrest := Convert_Basrest_Type( Get( slices, 558 ));
            rec.basrate := Convert( slices, 559, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.basrest := Convert_Basrest_Type( Get( slices, 560 ));
            rec.ovtrate := Convert( slices, 561, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.ovtrest := Convert_Basrest_Type( Get( slices, 562 ));
            rec.jbperfp := Convert_Coh1mr_Type( Get( slices, 563 ));
            rec.jbonus := Convert_Aidpl1_Type( Get( slices, 564 ));
            rec.jbonam := Convert( slices, 565, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbong := Convert_Jbong_Type( Get( slices, 566 ));
            rec.jbrise := Convert_Aidpl1_Type( Get( slices, 567 ));
            rec.tujbpl := Convert_Aidpl1_Type( Get( slices, 568 ));
            rec.tuin1 := Convert_Aidpl1_Type( Get( slices, 569 ));
            rec.jbopps := Convert_Aidpl1_Type( Get( slices, 570 ));
            rec.jbtime := Convert_Jbtime_Type( Get( slices, 571 ));
            rec.jbwkhra := Convert_Yes_Or_Missing_Type( Get( slices, 572 ));
            rec.jbwkhrb := Convert_Yes_Or_Missing_Type( Get( slices, 573 ));
            rec.jbwkhrc := Convert_Yes_Or_Missing_Type( Get( slices, 574 ));
            rec.jbwkhrd := Convert_Yes_Or_Missing_Type( Get( slices, 575 ));
            rec.jbwkhre := Convert_Yes_Or_Missing_Type( Get( slices, 576 ));
            rec.jbwkhrf := Convert_Yes_Or_Missing_Type( Get( slices, 577 ));
            rec.jbwkhrg := Convert_Yes_Or_Missing_Type( Get( slices, 578 ));
            rec.jbwkhrh := Convert_Jbwkhrh_Type( Get( slices, 579 ));
            rec.jbpen := Convert_Aidpl1_Type( Get( slices, 580 ));
            rec.jbpenm := Convert_Aidpl1_Type( Get( slices, 581 ));
            rec.jbbgd := Convert( slices, 582, ( -9, -8, -7, -2, -1 ) );
            rec.jbbgm := Convert_Cjsbgm_Type( Get( slices, 583 ));
            rec.jbbgy4 := Convert( slices, 584, ( -9, -8, -7, -2, -1 ) );
            rec.jbbgly := Convert_Jbbgly_Type( Get( slices, 585 ));
            rec.pays := Convert( slices, 586, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.paysw := Convert( slices, 587, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.paysg := Convert_Paylyg_Type( Get( slices, 588 ));
            rec.payly := Convert( slices, 589, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.paylyw := Convert( slices, 590, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.paylyg := Convert_Paylyg_Type( Get( slices, 591 ));
            rec.jsboss := Convert_Jsboss_Type( Get( slices, 592 ));
            rec.jssize := Convert_Jssize_Type( Get( slices, 593 ));
            rec.jshrs := Convert( slices, 594, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jshrlk := Convert_Jbhrlk_Type( Get( slices, 595 ));
            rec.jstime := Convert_Jstime_Type( Get( slices, 596 ));
            rec.jstypeb := Convert_Jstypeb_Type( Get( slices, 597 ));
            rec.jsaccs := Convert_Jsaccs_Type( Get( slices, 598 ));
            rec.jspart := Convert_Jspart_Type( Get( slices, 599 ));
            rec.jsprbm := Convert_Cjsbgm_Type( Get( slices, 600 ));
            rec.jsprby4 := Convert( slices, 601, ( -9, -8, -7, -2, -1 ) );
            rec.jsprem := Convert_Cjsbgm_Type( Get( slices, 602 ));
            rec.jsprey4 := Convert( slices, 603, ( -9, -8, -7, -2, -1 ) );
            rec.jsprf := Convert( slices, 604, ( -9, -8, -7, -3, -2, -1 ) );
            rec.jsprls := Convert_Jsprls_Type( Get( slices, 605 ));
            rec.jsprtx := Convert_Jsprtx_Type( Get( slices, 606 ));
            rec.jsprni := Convert_Jsprni_Type( Get( slices, 607 ));
            rec.jspayu := Convert( slices, 608, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jspayw := Convert( slices, 609, ( -9.0, -8.0, -7.0, -4.0, -2.0, -1.0 ) );
            rec.jspytx := Convert_Jspytx_Type( Get( slices, 610 ));
            rec.jspyni := Convert_Jspyni_Type( Get( slices, 611 ));
            rec.jspl := Convert_Jspl_Type( Get( slices, 612 ));
            rec.jsttwt := Convert( slices, 613, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.jsttwm := Convert_Jsttwm_Type( Get( slices, 614 ));
            rec.jssat1 := Convert_Jssat1_Type( Get( slices, 615 ));
            rec.jssat2 := Convert_Jbsat_Type( Get( slices, 616 ));
            rec.jssat4 := Convert_Jbsat_Type( Get( slices, 617 ));
            rec.jssat5 := Convert_Jbsat_Type( Get( slices, 618 ));
            rec.jssat := Convert_Jbsat_Type( Get( slices, 619 ));
            rec.jsbgd := Convert( slices, 620, ( -9, -8, -7, -2, -1 ) );
            rec.jsbgm := Convert_Cjsbgm_Type( Get( slices, 621 ));
            rec.jsbgy4 := Convert( slices, 622, ( -9, -8, -7, -2, -1 ) );
            rec.jblkcha := Convert_Jblkcha_Type( Get( slices, 623 ));
            rec.jbxpcha := Convert_Jblkcha_Type( Get( slices, 624 ));
            rec.jblkchb := Convert_Boolean_With_Missing( Get( slices, 625 ));
            rec.jbxpchb := Convert_Boolean_With_Missing( Get( slices, 626 ));
            rec.jblkchc := Convert_Boolean_With_Missing( Get( slices, 627 ));
            rec.jbxpchc := Convert_Boolean_With_Missing( Get( slices, 628 ));
            rec.jblkchd := Convert_Boolean_With_Missing( Get( slices, 629 ));
            rec.jbxpchd := Convert_Boolean_With_Missing( Get( slices, 630 ));
            rec.jblkche := Convert_Boolean_With_Missing( Get( slices, 631 ));
            rec.jbxpche := Convert_Boolean_With_Missing( Get( slices, 632 ));
            rec.rach12 := Convert_Hhch12_Type( Get( slices, 633 ));
            rec.jbchc1 := Convert_Jbchc1_Type( Get( slices, 634 ));
            rec.jbchc2 := Convert_Jbchc2_Type( Get( slices, 635 ));
            rec.jbchc3 := Convert_Jbchc3_Type( Get( slices, 636 ));
            rec.xpchcf := Convert_Xpchcf_Type( Get( slices, 637 ));
            rec.xpchc := Convert( slices, 638, ( -9, -8, -7, -2, -1 ) );
            rec.huxpch := Convert_Huxpch_Type( Get( slices, 639 ));
            rec.hunurs := Convert_Hunurs_Type( Get( slices, 640 ));
            rec.julk1 := Convert_Aidpl1_Type( Get( slices, 641 ));
            rec.julk4 := Convert_Bscon_Type( Get( slices, 642 ));
            rec.julka := Convert_Boolean_With_Missing( Get( slices, 643 ));
            rec.julkb := Convert_Boolean_With_Missing( Get( slices, 644 ));
            rec.julkc := Convert_Boolean_With_Missing( Get( slices, 645 ));
            rec.julkd := Convert_Boolean_With_Missing( Get( slices, 646 ));
            rec.julke := Convert_Boolean_With_Missing( Get( slices, 647 ));
            rec.julkjb := Convert_Aidpl1_Type( Get( slices, 648 ));
            rec.jubgn := Convert_Boolean_With_Missing( Get( slices, 649 ));
            rec.juspec := Convert_Juspec_Type( Get( slices, 650 ));
            rec.jusoc := Convert( slices, 651, ( -9, -8, -7, -2, -1 ) );
            rec.juhrsx := Convert( slices, 652, ( -9, -8, -7, -2, -1 ) );
            rec.jupayx := Convert( slices, 653, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jupayl := Convert( slices, 654, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.juhrsl := Convert( slices, 655, ( -9, -8, -7, -2, -1 ) );
            rec.eprosh := Convert_Cohxpm2_Type( Get( slices, 656 ));
            rec.eaage := Convert_Eaage_Type( Get( slices, 657 ));
            rec.jbub := Convert_Bscon_Type( Get( slices, 658 ));
            rec.jbuby := Convert_Jbuby_Type( Get( slices, 659 ));
            rec.j2has := Convert_Aidpl1_Type( Get( slices, 660 ));
            rec.j2soc := Convert( slices, 661, ( -9, -8, -7, -2, -1 ) );
            rec.j2semp := Convert_J2semp_Type( Get( slices, 662 ));
            rec.j2hrs := Convert( slices, 663, ( -9, -8, -7, -2, -1 ) );
            rec.j2pay := Convert( slices, 664, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ivea := Convert_Ivda_Type( Get( slices, 665 ));
            rec.iveb := Convert_Ivdb_Type( Get( slices, 666 ));
            rec.ivec := Convert_Ivec_Type( Get( slices, 667 ));
            rec.ived := Convert_Ivdd_Type( Get( slices, 668 ));
            rec.ivee := Convert_Ivee_Type( Get( slices, 669 ));
            rec.nemst := Convert_Nemst_Type( Get( slices, 670 ));
            rec.cjsbgd := Convert( slices, 671, ( -9, -8, -7, -2, -1 ) );
            rec.cjsbgm := Convert_Cjsbgm_Type( Get( slices, 672 ));
            rec.cjsbgy4 := Convert( slices, 673, ( -9, -8, -7, -2, -1 ) );
            rec.cjsbly := Convert_Cjsbly_Type( Get( slices, 674 ));
            rec.njbs := Convert( slices, 675, ( -9, -8, -7 ) );
            rec.jbhad := Convert_Aidpl1_Type( Get( slices, 676 ));
            rec.jlend4 := Convert( slices, 677, ( -9, -8, -7, -2, -1 ) );
            rec.jlsoc := Convert( slices, 678, ( -9, -8, -7, -2, -1 ) );
            rec.jlsic := Convert( slices, 679, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jlsemp := Convert_J2semp_Type( Get( slices, 680 ));
            rec.jlboss := Convert_Aidpl1_Type( Get( slices, 681 ));
            rec.jlmngr := Convert_Jlmngr_Type( Get( slices, 682 ));
            rec.jlsize := Convert_Jlsize_Type( Get( slices, 683 ));
            rec.ivja := Convert_Ivda_Type( Get( slices, 684 ));
            rec.ivjb := Convert_Ivdb_Type( Get( slices, 685 ));
            rec.ivjc := Convert_Ivec_Type( Get( slices, 686 ));
            rec.ivjd := Convert_Ivdd_Type( Get( slices, 687 ));
            rec.ivje := Convert_Ivee_Type( Get( slices, 688 ));
            rec.opsoca := Convert_Ophla_Type( Get( slices, 689 ));
            rec.opsocb := Convert_Opsocb_Type( Get( slices, 690 ));
            rec.opsocc := Convert_Ophlb_Type( Get( slices, 691 ));
            rec.opsocd := Convert_Opsocd_Type( Get( slices, 692 ));
            rec.opsoce := Convert_Opsocd_Type( Get( slices, 693 ));
            rec.opsocf := Convert_Opsocd_Type( Get( slices, 694 ));
            rec.opcls1 := Convert_Aidpl1_Type( Get( slices, 695 ));
            rec.opcls2 := Convert_Opcls2_Type( Get( slices, 696 ));
            rec.opcls3 := Convert_Opcls3_Type( Get( slices, 697 ));
            rec.vote1 := Convert_Aidpl1_Type( Get( slices, 698 ));
            rec.vote2 := Convert_Aidpl1_Type( Get( slices, 699 ));
            rec.vote3 := Convert_Vote3_Type( Get( slices, 700 ));
            rec.vote4 := Convert_Vote3_Type( Get( slices, 701 ));
            rec.vote5 := Convert_Vote5_Type( Get( slices, 702 ));
            rec.vote7 := Convert_Vote7_Type( Get( slices, 703 ));
            rec.vote8 := Convert_Vote8_Type( Get( slices, 704 ));
            rec.lacta := Convert_Lacta_Type( Get( slices, 705 ));
            rec.lactb := Convert_Lacta_Type( Get( slices, 706 ));
            rec.lactc := Convert_Lacta_Type( Get( slices, 707 ));
            rec.lactd := Convert_Lacta_Type( Get( slices, 708 ));
            rec.lacte := Convert_Lacta_Type( Get( slices, 709 ));
            rec.lactf := Convert_Lacta_Type( Get( slices, 710 ));
            rec.lacth := Convert_Lacta_Type( Get( slices, 711 ));
            rec.lacti := Convert_Lacta_Type( Get( slices, 712 ));
            rec.lactj := Convert_Lacta_Type( Get( slices, 713 ));
            rec.lactk := Convert_Lacta_Type( Get( slices, 714 ));
            rec.lactl := Convert_Lacta_Type( Get( slices, 715 ));
            rec.trust := Convert_Trust_Type( Get( slices, 716 ));
            rec.frna := Convert_Frna_Type( Get( slices, 717 ));
            rec.frnb := Convert_Frna_Type( Get( slices, 718 ));
            rec.frnc := Convert_Coh1mr_Type( Get( slices, 719 ));
            rec.f101 := Convert_F101_Type( Get( slices, 720 ));
            rec.f102 := Convert_F102_Type( Get( slices, 721 ));
            rec.f103 := Convert_F103_Type( Get( slices, 722 ));
            rec.f104 := Convert( slices, 723, ( -9, -8, -7 ) );
            rec.f105 := Convert_F105_Type( Get( slices, 724 ));
            rec.f106 := Convert_F106_Type( Get( slices, 725 ));
            rec.f116 := Convert_F116_Type( Get( slices, 726 ));
            rec.f118 := Convert_F118_Type( Get( slices, 727 ));
            rec.f119 := Convert_F119_Type( Get( slices, 728 ));
            rec.f121 := Convert_F121_Type( Get( slices, 729 ));
            rec.f122 := Convert_F122_Type( Get( slices, 730 ));
            rec.f124 := Convert_F124_Type( Get( slices, 731 ));
            rec.f125 := Convert_F125_Type( Get( slices, 732 ));
            rec.f126 := Convert_F126_Type( Get( slices, 733 ));
            rec.f127 := Convert_F127_Type( Get( slices, 734 ));
            rec.f128 := Convert_F128_Type( Get( slices, 735 ));
            rec.f132 := Convert_F132_Type( Get( slices, 736 ));
            rec.f142 := Convert_F142_Type( Get( slices, 737 ));
            rec.f135 := Convert_F135_Type( Get( slices, 738 ));
            rec.f136 := Convert_F136_Type( Get( slices, 739 ));
            rec.f137 := Convert_F137_Type( Get( slices, 740 ));
            rec.f138 := Convert_F138_Type( Get( slices, 741 ));
            rec.f139 := Convert_F139_Type( Get( slices, 742 ));
            rec.f140 := Convert_F140_Type( Get( slices, 743 ));
            rec.f141 := Convert_F141_Type( Get( slices, 744 ));
            rec.f151 := Convert_F151_Type( Get( slices, 745 ));
            rec.f152 := Convert_F152_Type( Get( slices, 746 ));
            rec.f153 := Convert_F153_Type( Get( slices, 747 ));
            rec.f154 := Convert_F154_Type( Get( slices, 748 ));
            rec.f155 := Convert_F155_Type( Get( slices, 749 ));
            rec.f156 := Convert_F156_Type( Get( slices, 750 ));
            rec.f157 := Convert_F157_Type( Get( slices, 751 ));
            rec.f158 := Convert_F158_Type( Get( slices, 752 ));
            rec.f159 := Convert_F159_Type( Get( slices, 753 ));
            rec.nf1 := Convert( slices, 754, ( -9, -8, -7, -2, -1 ) );
            rec.fisit := Convert_Fisit_Type( Get( slices, 755 ));
            rec.fisitc := Convert( slices, 756, ( -9, -8, -7, -2, -1 ) );
            rec.fisity := Convert_Fisity_Type( Get( slices, 757 ));
            rec.fisitx := Convert( slices, 758, ( -9, -8, -7, -2, -1 ) );
            rec.fiyrdia := Convert( slices, 759, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.fiyrdb1 := Convert_Boolean_With_Missing( Get( slices, 760 ));
            rec.fiyrdb2 := Convert_Boolean_With_Missing( Get( slices, 761 ));
            rec.fiyrdb3 := Convert_Boolean_With_Missing( Get( slices, 762 ));
            rec.fiyrdb4 := Convert_Boolean_With_Missing( Get( slices, 763 ));
            rec.fiyrdb5 := Convert_Boolean_With_Missing( Get( slices, 764 ));
            rec.fiyrdb6 := Convert_Boolean_With_Missing( Get( slices, 765 ));
            rec.fccard := Convert_Boolean_With_Missing( Get( slices, 766 ));
            rec.save := Convert_Aidpl1_Type( Get( slices, 767 ));
            rec.saved := Convert( slices, 768, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.savey1 := Convert_Savey1_Type( Get( slices, 769 ));
            rec.savey2 := Convert_Savey1_Type( Get( slices, 770 ));
            rec.savreg := Convert_Savreg_Type( Get( slices, 771 ));
            rec.savlt := Convert_Savlt_Type( Get( slices, 772 ));
            rec.nvestnn := Convert( slices, 773, ( -9, -8, -7, -2, -1 ) );
            rec.nvesth := Convert_Nvesth_Type( Get( slices, 774 ));
            rec.nvesti := Convert_Nvesti_Type( Get( slices, 775 ));
            rec.nvestj := Convert_Nvestj_Type( Get( slices, 776 ));
            rec.nvesta := Convert_Nvesta_Type( Get( slices, 777 ));
            rec.nvestb := Convert_Nvestb_Type( Get( slices, 778 ));
            rec.nvestc := Convert_Nvestc_Type( Get( slices, 779 ));
            rec.nvestd := Convert_Nvestd_Type( Get( slices, 780 ));
            rec.nveste := Convert_Nveste_Type( Get( slices, 781 ));
            rec.nvestf := Convert_Nvestf_Type( Get( slices, 782 ));
            rec.nvestg := Convert_Nvestg_Type( Get( slices, 783 ));
            rec.svac := Convert_Boolean_With_Missing( Get( slices, 784 ));
            rec.nvest := Convert_Debt_Type( Get( slices, 785 ));
            rec.svack := Convert( slices, 786, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.svackb1 := Convert_Boolean_With_Missing( Get( slices, 787 ));
            rec.svackb2 := Convert_Boolean_With_Missing( Get( slices, 788 ));
            rec.svackb3 := Convert_Boolean_With_Missing( Get( slices, 789 ));
            rec.svackb4 := Convert_Boolean_With_Missing( Get( slices, 790 ));
            rec.svacsj := Convert_Bankj_Type( Get( slices, 791 ));
            rec.svacsk := Convert( slices, 792, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.svacsp := Convert( slices, 793, ( -9, -8, -7, -2, -1 ) );
            rec.nvestk := Convert( slices, 794, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.nvestc1 := Convert_Boolean_With_Missing( Get( slices, 795 ));
            rec.nvestc2 := Convert_Boolean_With_Missing( Get( slices, 796 ));
            rec.nvestc3 := Convert_Boolean_With_Missing( Get( slices, 797 ));
            rec.nvestc4 := Convert_Boolean_With_Missing( Get( slices, 798 ));
            rec.nvestsj := Convert_Bankj_Type( Get( slices, 799 ));
            rec.nvestsk := Convert( slices, 800, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.nvestsp := Convert( slices, 801, ( -9, -8, -7, -2, -1 ) );
            rec.pppen := Convert_Aidpl1_Type( Get( slices, 802 ));
            rec.penb4 := Convert_Penb4_Type( Get( slices, 803 ));
            rec.penb4y4 := Convert( slices, 804, ( -9, -8, -7, -2, -1 ) );
            rec.penb4v := Convert( slices, 805, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.penb4w := Convert( slices, 806, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.penyr4 := Convert( slices, 807, ( -9, -8, -7, -2, -1 ) );
            rec.penadd := Convert_Aidpl1_Type( Get( slices, 808 ));
            rec.penadv := Convert( slices, 809, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.penadw := Convert( slices, 810, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.windf := Convert_Debt_Type( Get( slices, 811 ));
            rec.windfa := Convert_Windfa_Type( Get( slices, 812 ));
            rec.windfay := Convert( slices, 813, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windfb := Convert_Windfb_Type( Get( slices, 814 ));
            rec.windfby := Convert( slices, 815, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windfc := Convert_Windfc_Type( Get( slices, 816 ));
            rec.windfcy := Convert( slices, 817, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windfd := Convert_Windfd_Type( Get( slices, 818 ));
            rec.windfdy := Convert( slices, 819, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windff := Convert_Windff_Type( Get( slices, 820 ));
            rec.windffy := Convert( slices, 821, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windfg := Convert_Windfg_Type( Get( slices, 822 ));
            rec.windfgy := Convert( slices, 823, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windfh := Convert_Nisjsa_Type( Get( slices, 824 ));
            rec.windfhy := Convert( slices, 825, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.xpmeal := Convert_Xpleis_Type( Get( slices, 826 ));
            rec.xpleis := Convert_Xpleis_Type( Get( slices, 827 ));
            rec.ftexhh := Convert_Aidpl1_Type( Get( slices, 828 ));
            rec.ftexa := Convert_Ftexa_Type( Get( slices, 829 ));
            rec.ftexa1 := Convert_Ftexa1_Type( Get( slices, 830 ));
            rec.ftexa2 := Convert_Ftexa2_Type( Get( slices, 831 ));
            rec.ftexa3 := Convert_Ftexa3_Type( Get( slices, 832 ));
            rec.ftexa4 := Convert_Ftexa4_Type( Get( slices, 833 ));
            rec.ftexa5 := Convert_Ftexa5_Type( Get( slices, 834 ));
            rec.ftexa6 := Convert_Ftexa6_Type( Get( slices, 835 ));
            rec.ftexav := Convert( slices, 836, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ftexaw := Convert( slices, 837, ( -9.0, -8.0, -7.0, -5.0, -3.0, -2.0, -1.0 ) );
            rec.ftexb := Convert_Ftexb_Type( Get( slices, 838 ));
            rec.ftexb1 := Convert_Ftexa1_Type( Get( slices, 839 ));
            rec.ftexb2 := Convert_Ftexa2_Type( Get( slices, 840 ));
            rec.ftexb3 := Convert_Ftexa3_Type( Get( slices, 841 ));
            rec.ftexb4 := Convert_Ftexa4_Type( Get( slices, 842 ));
            rec.ftexb5 := Convert_Ftexa5_Type( Get( slices, 843 ));
            rec.ftexb6 := Convert_Ftexa6_Type( Get( slices, 844 ));
            rec.ftexbv := Convert( slices, 845, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ftexbw := Convert( slices, 846, ( -9.0, -8.0, -7.0, -5.0, -3.0, -2.0, -1.0 ) );
            rec.ftexc := Convert_Ftexc_Type( Get( slices, 847 ));
            rec.ftexc1 := Convert_Ftexa1_Type( Get( slices, 848 ));
            rec.ftexc2 := Convert_Ftexa2_Type( Get( slices, 849 ));
            rec.ftexc3 := Convert_Ftexa3_Type( Get( slices, 850 ));
            rec.ftexc4 := Convert_Ftexa4_Type( Get( slices, 851 ));
            rec.ftexc5 := Convert_Ftexa5_Type( Get( slices, 852 ));
            rec.ftexc6 := Convert_Ftexa6_Type( Get( slices, 853 ));
            rec.ftexcv := Convert( slices, 854, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ftexcw := Convert( slices, 855, ( -9.0, -8.0, -7.0, -5.0, -3.0, -2.0, -1.0 ) );
            rec.debt := Convert_Debt_Type( Get( slices, 856 ));
            rec.debta := Convert_Debta_Type( Get( slices, 857 ));
            rec.debtb := Convert_Debtb_Type( Get( slices, 858 ));
            rec.debtc := Convert_Debtc_Type( Get( slices, 859 ));
            rec.debtd := Convert_Debtd_Type( Get( slices, 860 ));
            rec.debte := Convert_Debte_Type( Get( slices, 861 ));
            rec.debtf := Convert_Debtf_Type( Get( slices, 862 ));
            rec.debtg := Convert_Debtg_Type( Get( slices, 863 ));
            rec.debth := Convert_Debth_Type( Get( slices, 864 ));
            rec.debti := Convert_Debti_Type( Get( slices, 865 ));
            rec.debty := Convert( slices, 866, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.debtc1 := Convert_Boolean_With_Missing( Get( slices, 867 ));
            rec.debtc2 := Convert_Boolean_With_Missing( Get( slices, 868 ));
            rec.debtc3 := Convert_Boolean_With_Missing( Get( slices, 869 ));
            rec.debtc4 := Convert_Boolean_With_Missing( Get( slices, 870 ));
            rec.debtsj := Convert_Debtsj_Type( Get( slices, 871 ));
            rec.debtsk := Convert( slices, 872, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.debtsp := Convert( slices, 873, ( -9, -8, -7, -2, -1 ) );
            rec.dfwld := Convert_Bscon_Type( Get( slices, 874 ));
            rec.dfwld1 := Convert_Dfwld1_Type( Get( slices, 875 ));
            rec.dfwld2 := Convert_Dfwld2_Type( Get( slices, 876 ));
            rec.dfwld3 := Convert_Dfwld2_Type( Get( slices, 877 ));
            rec.dfwld4 := Convert_Dfwld2_Type( Get( slices, 878 ));
            rec.spinhh := Convert_Hhch12_Type( Get( slices, 879 ));
            rec.hubuys := Convert_Hubuys_Type( Get( slices, 880 ));
            rec.hufrys := Convert_Hubuys_Type( Get( slices, 881 ));
            rec.humops := Convert_Hubuys_Type( Get( slices, 882 ));
            rec.huiron := Convert_Hubuys_Type( Get( slices, 883 ));
            rec.hhch12 := Convert_Hhch12_Type( Get( slices, 884 ));
            rec.husits := Convert_Husits_Type( Get( slices, 885 ));
            rec.howlng := Convert( slices, 886, ( -9, -8, -7, -3, -2, -1 ) );
            rec.caruse := Convert_Caruse_Type( Get( slices, 887 ));
            rec.mobuse := Convert_Mobuse_Type( Get( slices, 888 ));
            rec.ivfa := Convert_Ivda_Type( Get( slices, 889 ));
            rec.ivfb := Convert_Ivdb_Type( Get( slices, 890 ));
            rec.ivfc := Convert_Ivfc_Type( Get( slices, 891 ));
            rec.ivfd := Convert_Ivdd_Type( Get( slices, 892 ));
            rec.ivfe := Convert_Ivee_Type( Get( slices, 893 ));
            rec.ivfoih := Convert( slices, 894, ( -9, -8 ) );
            rec.ivfoim := Convert( slices, 895, ( -9, -8 ) );
            rec.ivsc := Convert_Ivsc_Type( Get( slices, 896 ));
            rec.iv1 := Convert_Hhch12_Type( Get( slices, 897 ));
            rec.iv2 := Convert_Iv2_Type( Get( slices, 898 ));
            rec.iv4 := Convert_Iv4_Type( Get( slices, 899 ));
            rec.iv5 := Convert_Iv5_Type( Get( slices, 900 ));
            rec.iv5aa := Convert_Iv5aa_Type( Get( slices, 901 ));
            rec.iv5ab := Convert_Iv5ab_Type( Get( slices, 902 ));
            rec.iv5ac := Convert_Iv5ac_Type( Get( slices, 903 ));
            rec.iv6a := Convert_Hhch12_Type( Get( slices, 904 ));
            rec.iv6b := Convert_Hhch12_Type( Get( slices, 905 ));
            rec.iv6c := Convert_Hhch12_Type( Get( slices, 906 ));
            rec.iv6d := Convert_Hhch12_Type( Get( slices, 907 ));
            rec.iv6e := Convert_Hhch12_Type( Get( slices, 908 ));
            rec.iv6f := Convert_Hhch12_Type( Get( slices, 909 ));
            rec.iv7 := Convert( slices, 910, ( -9, -8, -7 ) );
            rec.ghqa := Convert_Ghqa_Type( Get( slices, 911 ));
            rec.ghqb := Convert_Ghqb_Type( Get( slices, 912 ));
            rec.ghqc := Convert_Ghqc_Type( Get( slices, 913 ));
            rec.ghqd := Convert_Ghqc_Type( Get( slices, 914 ));
            rec.ghqe := Convert_Ghqe_Type( Get( slices, 915 ));
            rec.ghqf := Convert_Ghqe_Type( Get( slices, 916 ));
            rec.ghqg := Convert_Ghqc_Type( Get( slices, 917 ));
            rec.ghqh := Convert_Ghqc_Type( Get( slices, 918 ));
            rec.ghqi := Convert_Ghqb_Type( Get( slices, 919 ));
            rec.ghqj := Convert_Ghqe_Type( Get( slices, 920 ));
            rec.ghqk := Convert_Ghqe_Type( Get( slices, 921 ));
            rec.ghql := Convert_Ghqc_Type( Get( slices, 922 ));
            rec.opfamo := Convert_Opfamo_Type( Get( slices, 923 ));
            rec.opfaml := Convert_Opfamj_Type( Get( slices, 924 ));
            rec.opfamp := Convert_Opfamo_Type( Get( slices, 925 ));
            rec.opfamq := Convert_Opfamq_Type( Get( slices, 926 ));
            rec.opfamk := Convert_Opfamj_Type( Get( slices, 927 ));
            rec.opfamr := Convert_Opfamr_Type( Get( slices, 928 ));
            rec.lfsat1 := Convert_Lfsat1_Type( Get( slices, 929 ));
            rec.lfsat2 := Convert_Lfsat1_Type( Get( slices, 930 ));
            rec.lfsat3 := Convert_Lfsat1_Type( Get( slices, 931 ));
            rec.lfsat4 := Convert_Lfsat1_Type( Get( slices, 932 ));
            rec.lfsat5 := Convert_Lfsat1_Type( Get( slices, 933 ));
            rec.lfsat6 := Convert_Lfsat1_Type( Get( slices, 934 ));
            rec.lfsat7 := Convert_Lfsat1_Type( Get( slices, 935 ));
            rec.lfsat8 := Convert_Lfsat1_Type( Get( slices, 936 ));
            rec.lfsato := Convert_Lfsat1_Type( Get( slices, 937 ));
            rec.lfsatl := Convert( slices, 938, ( -9, -8, -7, -2, -1 ) );
            rec.netsx1 := Convert_Netsx1_Type( Get( slices, 939 ));
            rec.netsx2 := Convert_Netsx1_Type( Get( slices, 940 ));
            rec.netsx3 := Convert_Netsx1_Type( Get( slices, 941 ));
            rec.net1wr := Convert_Aidpl1_Type( Get( slices, 942 ));
            rec.net2wr := Convert_Aidpl1_Type( Get( slices, 943 ));
            rec.net3wr := Convert_Aidpl1_Type( Get( slices, 944 ));
            rec.net1rl := Convert_Net1rl_Type( Get( slices, 945 ));
            rec.net2rl := Convert_Net1rl_Type( Get( slices, 946 ));
            rec.net3rl := Convert_Net1rl_Type( Get( slices, 947 ));
            rec.net1ag := Convert( slices, 948, ( -9, -8, -7, -2, -1 ) );
            rec.net2ag := Convert( slices, 949, ( -9, -8, -7, -2, -1 ) );
            rec.net3ag := Convert( slices, 950, ( -9, -8, -7, -2, -1 ) );
            rec.net1kn := Convert_Net1kn_Type( Get( slices, 951 ));
            rec.net2kn := Convert_Net1kn_Type( Get( slices, 952 ));
            rec.net3kn := Convert_Net1kn_Type( Get( slices, 953 ));
            rec.net1ph := Convert_Net1ph_Type( Get( slices, 954 ));
            rec.net2ph := Convert_Net1ph_Type( Get( slices, 955 ));
            rec.net3ph := Convert_Net1ph_Type( Get( slices, 956 ));
            rec.net1lv := Convert_Net1lv_Type( Get( slices, 957 ));
            rec.net2lv := Convert_Net1lv_Type( Get( slices, 958 ));
            rec.net3lv := Convert_Net1lv_Type( Get( slices, 959 ));
            rec.net1jb := Convert_Net1jb_Type( Get( slices, 960 ));
            rec.net2jb := Convert_Net1jb_Type( Get( slices, 961 ));
            rec.net3jb := Convert_Net1jb_Type( Get( slices, 962 ));
            rec.netsoc := Convert( slices, 963, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.prrs2i := Convert_Prrs2i_Type( Get( slices, 964 ));
            rec.pripn := Convert( slices, 965, ( -9, -8 ) );
            rec.prwhy := Convert_Prwhy_Type( Get( slices, 966 ));
            rec.pplevr := Convert_Plever_Type( Get( slices, 967 ));
            rec.prfehq := Convert_Prfehq_Type( Get( slices, 968 ));
            rec.prsehq := Convert_Prsehq_Type( Get( slices, 969 ));
            rec.presbgm := Convert_Presbgm_Type( Get( slices, 970 ));
            rec.presby4 := Convert( slices, 971, ( -9, -8, -7, -2, -1 ) );
            rec.presly := Convert_Presly_Type( Get( slices, 972 ));
            rec.prf101 := Convert_Prf101_Type( Get( slices, 973 ));
            rec.prf102 := Convert_Prf102_Type( Get( slices, 974 ));
            rec.prf116 := Convert_Prf116_Type( Get( slices, 975 ));
            rec.prf125 := Convert_Prf125_Type( Get( slices, 976 ));
            rec.prf131 := Convert_Prf131_Type( Get( slices, 977 ));
            rec.prf135 := Convert_Prf135_Type( Get( slices, 978 ));
            rec.prf137 := Convert_Prf137_Type( Get( slices, 979 ));
            rec.prf139 := Convert_Prf139_Type( Get( slices, 980 ));
            rec.prf141 := Convert_Prf141_Type( Get( slices, 981 ));
            rec.prfirn := Convert_Prfirn_Type( Get( slices, 982 ));
            rec.prearn := Convert_Prearn_Type( Get( slices, 983 ));
            rec.prjbbgm := Convert_Presbgm_Type( Get( slices, 984 ));
            rec.prjbby4 := Convert( slices, 985, ( -9, -8, -7, -2, -1 ) );
            rec.prjbly := Convert_Prjbly_Type( Get( slices, 986 ));
            rec.prfitb := Convert_Prfitb_Type( Get( slices, 987 ));
            rec.ivpa := Convert_Ivpa_Type( Get( slices, 988 ));
            rec.ivpb := Convert_Ivpb_Type( Get( slices, 989 ));
            rec.ivpc := Convert_Ivpc_Type( Get( slices, 990 ));
            rec.ivpd := Convert_Ivpd_Type( Get( slices, 991 ));
            rec.ivpe := Convert_Ivpe_Type( Get( slices, 992 ));
            rec.telwhy := Convert_Telwhy_Type( Get( slices, 993 ));
            rec.prjbft := Convert_Prjbft_Type( Get( slices, 994 ));
            rec.tlfiyrl := Convert( slices, 995, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.tlfiyr := Convert( slices, 996, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.pid := Convert( slices, 997 );
            rec.iviolw := Convert_Iviolw_Type( Get( slices, 998 ));
            rec.hhmem := Convert_Hhmem_Type( Get( slices, 999 ));
            rec.newhy := Convert_Newhy_Type( Get( slices, 1000 ));
            rec.nemnjn := Convert_Nemnjn_Type( Get( slices, 1001 ));
            rec.neyrjn4 := Convert( slices, 1002, ( -9, -8, -7, -2, -1 ) );
            rec.ivfio := Convert_Ivfio_Type( Get( slices, 1003 ));
            rec.iodc := Convert_Iodc_Type( Get( slices, 1004 ));
            rec.memorig := Convert_Memorig_Type( Get( slices, 1005 ));
            rec.hgr2r := Convert_Hgr2r_Type( Get( slices, 1006 ));
            rec.hgsex := Convert_Hgsex_Type( Get( slices, 1007 ));
            rec.hgbm := Convert_Hgbm_Type( Get( slices, 1008 ));
            rec.hgby := Convert( slices, 1009, ( -2, -1 ) );
            rec.mastat := Convert_Mastat_Type( Get( slices, 1010 ));
            rec.hgspn := Convert( slices, 1011, ( -9, -8, -2, -1 ) );
            rec.hgemp := Convert_Hgemp_Type( Get( slices, 1012 ));
            rec.hgfno := Convert( slices, 1013, ( -9, -8, -2, -1 ) );
            rec.hgmno := Convert( slices, 1014, ( -9, -8, -2, -1 ) );
            rec.hgra := Convert( slices, 1015, ( -9, -8, -2, -1 ) );
            rec.age := Convert( slices, 1016, ( -9, -8 ) );
            rec.age12 := Convert( slices, 1017, ( -9, -8 ) );
            rec.butype := Convert_Butype_Type( Get( slices, 1018 ));
            rec.buno := Convert( slices, 1019, ( -9, -8 ) );
            rec.nchild := Convert( slices, 1020, ( -9, -8 ) );
            rec.hoh := Convert_Hoh_Type( Get( slices, 1021 ));
            rec.rach16 := Convert_Hhch12_Type( Get( slices, 1022 ));
            rec.sampst := Convert_Sampst_Type( Get( slices, 1023 ));
            rec.movest := Convert_Movest_Type( Get( slices, 1024 ));
            rec.qfx := Convert_Aidpl1_Type( Get( slices, 1025 ));
            rec.qfxc := Convert_Qfc_Type( Get( slices, 1026 ));
            rec.qfxd := Convert_Qfd_Type( Get( slices, 1027 ));
            rec.qfxe := Convert_Qfe_Type( Get( slices, 1028 ));
            rec.qfxf := Convert_Qff_Type( Get( slices, 1029 ));
            rec.qfxg := Convert_Qfg_Type( Get( slices, 1030 ));
            rec.qfxh := Convert_Qfh_Type( Get( slices, 1031 ));
            rec.qfxk := Convert_Qfk_Type( Get( slices, 1032 ));
            rec.qfxl := Convert_Qfl_Type( Get( slices, 1033 ));
            rec.qfxm := Convert_Qfm_Type( Get( slices, 1034 ));
            rec.qfxn := Convert_Qfn_Type( Get( slices, 1035 ));
            rec.qfxo := Convert_Qfxo_Type( Get( slices, 1036 ));
            rec.qfxp := Convert_Qfxp_Type( Get( slices, 1037 ));
            rec.qfxq := Convert_Qfxq_Type( Get( slices, 1038 ));
            rec.qfxr := Convert_Qfxr_Type( Get( slices, 1039 ));
            rec.qfedx := Convert_Aidpl1_Type( Get( slices, 1040 ));
            rec.qfedxa := Convert_Qfedd_Type( Get( slices, 1041 ));
            rec.nqfexa := Convert( slices, 1042, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxb := Convert_Qfede_Type( Get( slices, 1043 ));
            rec.nqfexb := Convert( slices, 1044, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxc := Convert_Qfedj_Type( Get( slices, 1045 ));
            rec.nqfexc := Convert( slices, 1046, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxg := Convert_Qfedm_Type( Get( slices, 1047 ));
            rec.nqfexg := Convert( slices, 1048, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxh := Convert_Qfedxh_Type( Get( slices, 1049 ));
            rec.nqfexh := Convert( slices, 1050, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxi := Convert_Qfedo_Type( Get( slices, 1051 ));
            rec.nqfexi := Convert( slices, 1052, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxj := Convert( slices, 1053, ( -9, -8, -7 ) );
            rec.nqfexj := Convert( slices, 1054, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxl := Convert_Qfedt_Type( Get( slices, 1055 ));
            rec.nqfexl := Convert( slices, 1056, ( -9, -8, -7, -2, -1 ) );
            rec.region := Convert_Region_Type( Get( slices, 1057 ));
            rec.hhsize := Convert( slices, 1058, ( -9, -8 ) );
            rec.hhtype := Convert_Hhtype_Type( Get( slices, 1059 ));
            rec.tenure := Convert_Tenure_Type( Get( slices, 1060 ));
            rec.qfedhi := Convert_Qfedhi_Type( Get( slices, 1061 ));
            rec.qfvoc := Convert_Qfvoc_Type( Get( slices, 1062 ));
            rec.qfachi := Convert_Qfachi_Type( Get( slices, 1063 ));
            rec.jbft := Convert_Jbft_Type( Get( slices, 1064 ));
            rec.payg := Convert( slices, 1065, ( -9.0, -8.0, -7.0 ) );
            rec.payn := Convert( slices, 1066, ( -9.0, -8.0, -7.0 ) );
            rec.paygu := Convert( slices, 1067, ( -9.0, -8.0, -7.0 ) );
            rec.paynu := Convert( slices, 1068, ( -9.0, -8.0, -7.0 ) );
            rec.paygty := Convert( slices, 1069, ( -9.0, -8.0, -7.0 ) );
            rec.paygly := Convert( slices, 1070, ( -9.0, -8.0, -7.0 ) );
            rec.paynty := Convert( slices, 1071, ( -9.0, -8.0, -7.0 ) );
            rec.paynly := Convert( slices, 1072, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jsprof := Convert( slices, 1073, ( -9.0, -8.0, -7.0 ) );
            rec.jsloss := Convert( slices, 1074, ( -9.0, -8.0, -7.0 ) );
            rec.jspayg := Convert( slices, 1075, ( -9.0, -8.0, -7.0 ) );
            rec.cjsten := Convert( slices, 1076, ( -9.0, -8.0, -7.0 ) );
            rec.cjswk9 := Convert( slices, 1077, ( -9.0, -8.0, -7.0 ) );
            rec.jlid := Convert_Jlid_Type( Get( slices, 1078 ));
            rec.jlyid := Convert_Jlyid_Type( Get( slices, 1079 ));
            rec.jtyid := Convert_Jtyid_Type( Get( slices, 1080 ));
            rec.jbseg := Convert_Jbseg_Type( Get( slices, 1081 ));
            rec.jbgold := Convert( slices, 1082, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbrgsc := Convert_Jbrgsc_Type( Get( slices, 1083 ));
            rec.jbisco := Convert( slices, 1084 );
            rec.jbcssm := Convert( slices, 1085, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbcssf := Convert( slices, 1086, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbhgs := Convert( slices, 1087, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbsec := Convert_Jbsec_Type( Get( slices, 1088 ));
            rec.njbwks := Convert( slices, 1089, ( -9.0, -8.0, -7.0 ) );
            rec.njuwks := Convert( slices, 1090, ( -9.0, -8.0, -7.0 ) );
            rec.njiwks := Convert( slices, 1091, ( -9.0, -8.0, -7.0 ) );
            rec.njbnew := Convert( slices, 1092, ( -9, -8, -7 ) );
            rec.njbsp := Convert( slices, 1093, ( -9, -8, -7 ) );
            rec.njusp := Convert( slices, 1094, ( -9, -8, -7 ) );
            rec.njisp := Convert( slices, 1095, ( -9, -8, -7 ) );
            rec.jbstatl := Convert( slices, 1096, ( -9, -8, -7, -2, -1 ) );
            rec.jbstatt := Convert( slices, 1097, ( -9, -8, -7, -2, -1 ) );
            rec.jbsocly := Convert( slices, 1098, ( -9, -8, -7 ) );
            rec.jlseg := Convert_Jlseg_Type( Get( slices, 1099 ));
            rec.jlgold := Convert( slices, 1100, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlrgsc := Convert_Jlrgsc_Type( Get( slices, 1101 ));
            rec.jlisco := Convert( slices, 1102 );
            rec.jlcssm := Convert( slices, 1103, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlcssf := Convert( slices, 1104, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlhgs := Convert( slices, 1105, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlsec := Convert_Jlsec_Type( Get( slices, 1106 ));
            rec.vote := Convert_Vote_Type( Get( slices, 1107 ));
            rec.fiyrdic := Convert( slices, 1108, ( -9.0, -8.0, -7.0 ) );
            rec.fimnp := Convert( slices, 1109, ( -9.0, -8.0, -7.0 ) );
            rec.fimnb := Convert( slices, 1110, ( -9.0, -8.0, -7.0 ) );
            rec.fimni := Convert( slices, 1111, ( -9.0, -8.0, -7.0 ) );
            rec.fimnt := Convert( slices, 1112, ( -9.0, -8.0, -7.0 ) );
            rec.fimnl := Convert( slices, 1113, ( -9.0, -8.0, -7.0 ) );
            rec.fimnnl := Convert( slices, 1114, ( -9.0, -8.0, -7.0 ) );
            rec.fimn := Convert( slices, 1115, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrl := Convert( slices, 1116, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrnl := Convert( slices, 1117, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrp := Convert( slices, 1118, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrb := Convert( slices, 1119, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrt := Convert( slices, 1120, ( -9.0, -8.0, -7.0 ) );
            rec.fiyri := Convert( slices, 1121, ( -9.0, -8.0, -7.0 ) );
            rec.fiyr := Convert( slices, 1122, ( -9.0, -8.0, -7.0 ) );
            rec.fihhmn := Convert( slices, 1123, ( -9.0, -8.0, -7.0 ) );
            rec.hlghq1 := Convert( slices, 1124, ( -9, -8, -7 ) );
            rec.hlghq2 := Convert( slices, 1125, ( -9, -8, -7 ) );
            rec.spjb := Convert_Spjb_Type( Get( slices, 1126 ));
            rec.spsoc := Convert( slices, 1127, ( -9.0, -8.0 ) );
            rec.spjbhr := Convert( slices, 1128, ( -9, -8, -7 ) );
            rec.spjbot := Convert( slices, 1129, ( -9, -8, -7 ) );
            rec.sppayg := Convert( slices, 1130, ( -9.0, -8.0, -7.0 ) );
            rec.spjbyr := Convert( slices, 1131, ( -9, -8, -7 ) );
            rec.lrwght := Convert( slices, 1132 );
            rec.lewght := Convert( slices, 1133 );
            rec.xrwght := Convert( slices, 1134 );
            rec.xewght := Convert( slices, 1135 );
            rec.j2payi := Convert( slices, 1136, ( -9, -8, -7, -3, -2, -1 ) );
            rec.fiyrdii := Convert_Fiyrdii_Type( Get( slices, 1137 ));
            rec.prearni := Convert( slices, 1138, ( -9, -8, -2, -1 ) );
            rec.prfitbi := Convert_Prfitbi_Type( Get( slices, 1139 ));
            rec.paygui := Convert_Fimnbi_Type( Get( slices, 1140 ));
            rec.paynui := Convert_Fimnbi_Type( Get( slices, 1141 ));
            rec.paygti := Convert_Fimnbi_Type( Get( slices, 1142 ));
            rec.paygli := Convert_Fimnbi_Type( Get( slices, 1143 ));
            rec.paynti := Convert_Fimnbi_Type( Get( slices, 1144 ));
            rec.paynli := Convert_Fimnbi_Type( Get( slices, 1145 ));
            rec.jsprofi := Convert_Fimnbi_Type( Get( slices, 1146 ));
            rec.jspaygi := Convert_Fimnbi_Type( Get( slices, 1147 ));
            rec.fimnpi := Convert_Fimnbi_Type( Get( slices, 1148 ));
            rec.fimnbi := Convert_Fimnbi_Type( Get( slices, 1149 ));
            rec.fimnii := Convert_Fimnii_Type( Get( slices, 1150 ));
            rec.fimnti := Convert_Fimnii_Type( Get( slices, 1151 ));
            rec.fimnnli := Convert_Fimnbi_Type( Get( slices, 1152 ));
            rec.fimnli := Convert_Fimnbi_Type( Get( slices, 1153 ));
            rec.fimnthi := Convert_Fimnii_Type( Get( slices, 1154 ));
            rec.fiyrli := Convert_Fimnbi_Type( Get( slices, 1155 ));
            rec.fiyrnli := Convert_Fimnbi_Type( Get( slices, 1156 ));
            rec.fiyrpi := Convert_Fimnii_Type( Get( slices, 1157 ));
            rec.fiyrbi := Convert_Fimnbi_Type( Get( slices, 1158 ));
            rec.fiyrti := Convert_Fimnbi_Type( Get( slices, 1159 ));
            rec.fiyrii := Convert_Fimnbi_Type( Get( slices, 1160 ));
            rec.fiyeari := Convert_Fimnbi_Type( Get( slices, 1161 ));
            rec.sppaygi := Convert_Prfitbi_Type( Get( slices, 1162 ));
            rec.fihhmni := Convert_Fihhmni_Type( Get( slices, 1163 ));
            rec.mrjend := Convert( slices, 1164, ( -9, -8, -7, -3, -2, -1 ) );
            rec.mrjsoc := Convert( slices, 1165, ( -9, -8, -7, -3 ) );
            rec.mrjsic := Convert( slices, 1166, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjsemp := Convert_Mrjsemp_Type( Get( slices, 1167 ));
            rec.mrjboss := Convert_Mrjboss_Type( Get( slices, 1168 ));
            rec.mrjmngr := Convert_Mrjmngr_Type( Get( slices, 1169 ));
            rec.mrjsize := Convert_Mrjsize_Type( Get( slices, 1170 ));
            rec.mrjseg := Convert_Maseg_Type( Get( slices, 1171 ));
            rec.mrjgold := Convert( slices, 1172, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjrgsc := Convert_Margsc_Type( Get( slices, 1173 ));
            rec.mrjisco := Convert( slices, 1174 );
            rec.mrjcssm := Convert( slices, 1175, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjcssf := Convert( slices, 1176, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjhgs := Convert( slices, 1177, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjsec := Convert_J1sec_Type( Get( slices, 1178 ));
            rec.paseg := Convert_Maseg_Type( Get( slices, 1179 ));
            rec.pagold := Convert( slices, 1180, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.pargsc := Convert_Margsc_Type( Get( slices, 1181 ));
            rec.paisco := Convert( slices, 1182 );
            rec.pacssm := Convert( slices, 1183, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.pacssf := Convert( slices, 1184, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.pahgs := Convert( slices, 1185, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.pasec := Convert_J1sec_Type( Get( slices, 1186 ));
            rec.maseg := Convert_Maseg_Type( Get( slices, 1187 ));
            rec.magold := Convert( slices, 1188, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.margsc := Convert_Margsc_Type( Get( slices, 1189 ));
            rec.maisco := Convert( slices, 1190 );
            rec.macssm := Convert( slices, 1191, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.macssf := Convert( slices, 1192, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mahgs := Convert( slices, 1193, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.masec := Convert_J1sec_Type( Get( slices, 1194 ));
            rec.j1seg := Convert_J1seg_Type( Get( slices, 1195 ));
            rec.j1gold := Convert( slices, 1196, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.j1rgsc := Convert_J1rgsc_Type( Get( slices, 1197 ));
            rec.j1isco := Convert( slices, 1198 );
            rec.j1cssm := Convert( slices, 1199, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.j1cssf := Convert( slices, 1200, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.j1hgs := Convert( slices, 1201, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.j1sec := Convert_J1sec_Type( Get( slices, 1202 ));
            rec.xrwghte := Convert( slices, 1203 );
            rec.xewghte := Convert( slices, 1204 );
            rec.fimnsel := Convert_Fimnsel_Type( Get( slices, 1205 ));
            rec.xrwtsw1 := Convert( slices, 1206 );
            rec.xewtsw1 := Convert( slices, 1207 );
            rec.xrwtsw2 := Convert( slices, 1208 );
            rec.xewtsw2 := Convert( slices, 1209 );
            rec.lrwtsw1 := Convert( slices, 1210 );
            rec.lewtsw1 := Convert( slices, 1211 );
            rec.lrwtsw2 := Convert( slices, 1212 );
            rec.lewtsw2 := Convert( slices, 1213 );
            rec.sppid := Convert( slices, 1214 );
            rec.fpid := Convert( slices, 1215 );
            rec.mpid := Convert( slices, 1216 );
            rec.distmov := Convert( slices, 1217, ( -9.0, -8.0, -7.0 ) );
            rec.region2 := Convert_Region2_Type( Get( slices, 1218 ));
            rec.isced := Convert_Isced_Type( Get( slices, 1219 ));
            rec.casmin := Convert_Casmin_Type( Get( slices, 1220 ));
            rec.jbiscon := Convert( slices, 1221, ( -9, -8, -7, -2, -1 ) );
            rec.jliscon := Convert( slices, 1222, ( -9, -8, -7, -2, -1 ) );
            rec.mrjiscn := Convert( slices, 1223, ( -9, -8, -7, -2, -1 ) );
            rec.maiscon := Convert( slices, 1224, ( -9, -8, -7, -2, -1 ) );
            rec.paiscon := Convert( slices, 1225, ( -9, -8, -7, -2, -1 ) );
            rec.j1iscon := Convert( slices, 1226, ( -9, -8, -7, -2, -1 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Indresp_component ).start_pos = 0 ) then
               index.pointers( Indresp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Indresp_component ).counter := index.pointers( Indresp_component ).counter + 1;
            Put_Index( index_map, index );
            Indresp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Indresp_IO.Close( bin_file );
   end Create_Indresp_Wave_J;




   procedure Create_Indsamp_Wave_J( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Indsamp_IO.File_Type;
      rec         : Indsamp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Indsamp_IO.Create (bin_file, Indsamp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.pid := Convert( slices, 3 );
            rec.iviolw := Convert_Iviolw_Type( Get( slices, 4 ));
            rec.ivstat1 := Convert_Ivstat1_Type( Get( slices, 5 ));
            rec.ivelig := Convert_Ivelig_Type( Get( slices, 6 ));
            rec.hhmem := Convert_Hhmem_Type( Get( slices, 7 ));
            rec.newhy := Convert_Newhy_Type( Get( slices, 8 ));
            rec.nemnjn := Convert_Nemnjn_Type( Get( slices, 9 ));
            rec.neyrjn4 := Convert( slices, 10, ( -9, -8, -7, -2, -1 ) );
            rec.lvwhy := Convert_Lvwhy_Type( Get( slices, 11 ));
            rec.lvmn := Convert_Lvmn_Type( Get( slices, 12 ));
            rec.lvyr4 := Convert( slices, 13, ( -9, -8, -7, -2, -1 ) );
            rec.lvloc := Convert_Lvloc_Type( Get( slices, 14 ));
            rec.ivfio := Convert_Ivfio_Type( Get( slices, 15 ));
            rec.ivrref := Convert_Ivrref_Type( Get( slices, 16 ));
            rec.ivireis := Convert_Ivireis_Type( Get( slices, 17 ));
            rec.finloc := Convert_Finloc_Type( Get( slices, 18 ));
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 19 ));
            rec.memorig := Convert_Memorig_Type( Get( slices, 20 ));
            rec.sampst := Convert_Sampst_Type( Get( slices, 21 ));
            rec.movest := Convert_Movest_Type( Get( slices, 22 ));
            rec.lewght := Convert( slices, 23, ( -9.0, -8.0, -1.0 ) );
            rec.lrwght := Convert( slices, 24, ( -9.0, -8.0, -1.0 ) );
            rec.lrwtsw1 := Convert( slices, 25, ( -9.0, -8.0, -1.0 ) );
            rec.lewtsw1 := Convert( slices, 26, ( -9.0, -8.0, -1.0 ) );
            rec.lrwtsw2 := Convert( slices, 27, ( -9.0, -8.0, -1.0 ) );
            rec.lewtsw2 := Convert( slices, 28, ( -9.0, -8.0, -1.0 ) );
            rec.distmov := Convert( slices, 29, ( -9.0, -8.0 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Indsamp_component ).start_pos = 0 ) then
               index.pointers( Indsamp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Indsamp_component ).counter := index.pointers( Indsamp_component ).counter + 1;
            Put_Index( index_map, index );
            Indsamp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Indsamp_IO.Close( bin_file );
   end Create_Indsamp_Wave_J;




   procedure Create_Jobhist_Wave_J( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Jobhist_IO.File_Type;
      rec         : Jobhist_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Jobhist_IO.Create (bin_file, Jobhist_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.jhstat := Convert_Jhstat_Type( Get( slices, 3 ));
            rec.jhbgd := Convert( slices, 4, ( -9, -8, -7, -2, -1 ) );
            rec.jhbgm := Convert_Jbbgm1_Type( Get( slices, 5 ));
            rec.jhbgy4 := Convert( slices, 6, ( -9, -8, -7, -2, -1 ) );
            rec.jspno := Convert( slices, 7 );
            rec.jhsoc := Convert( slices, 8, ( -9, -8, -2, -1 ) );
            rec.jhsemp := Convert_Jhsemp_Type( Get( slices, 9 ));
            rec.jhboss := Convert_Bscon_Type( Get( slices, 10 ));
            rec.jhsect := Convert_Jhsect_Type( Get( slices, 11 ));
            rec.jhmngr := Convert_Jhmngr_Type( Get( slices, 12 ));
            rec.jhpldf := Convert_Jhpldf_Type( Get( slices, 13 ));
            rec.jhsic := Convert( slices, 14, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.jhsize := Convert_Jhsize_Type( Get( slices, 15 ));
            rec.jhpayl := Convert( slices, 16, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhpylw := Convert( slices, 17, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.jhpylg := Convert_Jhpylg_Type( Get( slices, 18 ));
            rec.jhstpy := Convert_Jhstpy_Type( Get( slices, 19 ));
            rec.jblky := Convert_Jblky_Type( Get( slices, 20 ));
            rec.jhendd := Convert( slices, 21, ( -9, -8, -7, -2, -1 ) );
            rec.jhendm := Convert_Jbbgm1_Type( Get( slices, 22 ));
            rec.jhendy4 := Convert( slices, 23, ( -9, -8, -7, -2, -1 ) );
            rec.jha9ly := Convert_Jha9ly_Type( Get( slices, 24 ));
            rec.jhseg := Convert_Jhseg_Type( Get( slices, 25 ));
            rec.jhgold := Convert( slices, 26, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhrgsc := Convert_Jhrgsc_Type( Get( slices, 27 ));
            rec.jhisco := Convert( slices, 28, ( -9, -8 ) );
            rec.jhcssm := Convert( slices, 29, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhcssf := Convert( slices, 30, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhhgs := Convert( slices, 31, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhsec := Convert_Jhsec_Type( Get( slices, 32 ));
            rec.jhspw := Convert( slices, 33, ( -9.0, -8.0 ) );
            rec.jhgpay := Convert( slices, 34, ( -9.0, -8.0, -7.0 ) );
            rec.jhnpay := Convert( slices, 35, ( -9.0, -8.0, -7.0, -1.0 ) );
            rec.jhgpayi := Convert_Jhgpayi_Type( Get( slices, 36 ));
            rec.jhnpayi := Convert_Jhgpayi_Type( Get( slices, 37 ));
            rec.pid := Convert( slices, 38 );
            rec.jhiscon := Convert( slices, 39, ( -9, -8, -7, -2, -1 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Jobhist_component ).start_pos = 0 ) then
               index.pointers( Jobhist_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Jobhist_component ).counter := index.pointers( Jobhist_component ).counter + 1;
            Put_Index( index_map, index );
            Jobhist_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Jobhist_IO.Close( bin_file );
   end Create_Jobhist_Wave_J;




   procedure Create_Youth_Wave_J( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Youth_IO.File_Type;
      rec         : Youth_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Youth_IO.Create (bin_file, Youth_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.pno := Convert( slices, 1 );
            rec.ypdobm := Convert_Ypdobm_Type( Get( slices, 2 ));
            rec.ypdoby4 := Convert( slices, 3, ( -9, -8, -7, -2, -1 ) );
            rec.ypsex := Convert_Ypsex_Type( Get( slices, 4 ));
            rec.ytvhrs := Convert_Ytvhrs_Type( Get( slices, 5 ));
            rec.ytvstp := Convert_Ytvlmt_Type( Get( slices, 6 ));
            rec.ypfpc := Convert_Ypfpc_Type( Get( slices, 7 ));
            rec.ypfpcgm := Convert_Ypfpcgm_Type( Get( slices, 8 ));
            rec.yppals := Convert_Yppalo_Type( Get( slices, 9 ));
            rec.yppalo := Convert_Yppalo_Type( Get( slices, 10 ));
            rec.yputel := Convert_Yputel_Type( Get( slices, 11 ));
            rec.yplate := Convert_Yplate_Type( Get( slices, 12 ));
            rec.ypfbeau := Convert_Ypfbeau_Type( Get( slices, 13 ));
            rec.ypfclub := Convert_Ypfarca_Type( Get( slices, 14 ));
            rec.ypfdisc := Convert_Ypfarca_Type( Get( slices, 15 ));
            rec.ypfspor := Convert_Ypfarca_Type( Get( slices, 16 ));
            rec.ypargm := Convert_Ypargm_Type( Get( slices, 17 ));
            rec.ypargf := Convert_Ypargf_Type( Get( slices, 18 ));
            rec.yptlkm := Convert_Ypargm_Type( Get( slices, 19 ));
            rec.yptlkf := Convert_Ypargf_Type( Get( slices, 20 ));
            rec.ypnpal := Convert( slices, 21, ( -9, -8, -2, -1 ) );
            rec.ypmkfrn := Convert_Ypmkfrn_Type( Get( slices, 22 ));
            rec.ypfght := Convert_Ypfght_Type( Get( slices, 23 ));
            rec.ypeatn := Convert_Ypeatn_Type( Get( slices, 24 ));
            rec.ypsave := Convert_Ypsave_Type( Get( slices, 25 ));
            rec.yppkml := Convert( slices, 26, ( -9, -2, -1 ) );
            rec.yppkmp := Convert( slices, 27, ( -9, -2, -1 ) );
            rec.ypsmev := Convert_Ypbeau_Type( Get( slices, 28 ));
            rec.ypsmof := Convert_Ypsmof_Type( Get( slices, 29 ));
            rec.ypsmlw := Convert( slices, 30, ( -9, -8, -2, -1 ) );
            rec.ypopsm := Convert_Ypopsm_Type( Get( slices, 31 ));
            rec.ypdgfr := Convert_Ypdgfr_Type( Get( slices, 32 ));
            rec.ypsad := Convert_Ypsad_Type( Get( slices, 33 ));
            rec.ypwor := Convert_Ypwor_Type( Get( slices, 34 ));
            rec.ypbull := Convert_Ypbull_Type( Get( slices, 35 ));
            rec.yplone := Convert_Ypbored_Type( Get( slices, 36 ));
            rec.ypbored := Convert_Ypbored_Type( Get( slices, 37 ));
            rec.ypesta := Convert_Ypesta_Type( Get( slices, 38 ));
            rec.ypesti := Convert_Ypesti_Type( Get( slices, 39 ));
            rec.ypestb := Convert_Ypesta_Type( Get( slices, 40 ));
            rec.ypestj := Convert_Ypesti_Type( Get( slices, 41 ));
            rec.ypestc := Convert_Ypesta_Type( Get( slices, 42 ));
            rec.ypestk := Convert_Ypesti_Type( Get( slices, 43 ));
            rec.ypeste := Convert_Ypesta_Type( Get( slices, 44 ));
            rec.ypestf := Convert_Ypesta_Type( Get( slices, 45 ));
            rec.ypesth := Convert_Ypesta_Type( Get( slices, 46 ));
            rec.yptcha := Convert_Ypesta_Type( Get( slices, 47 ));
            rec.yptchb := Convert_Ypesta_Type( Get( slices, 48 ));
            rec.yphsw := Convert_Yphap_Type( Get( slices, 49 ));
            rec.yphap := Convert_Yphap_Type( Get( slices, 50 ));
            rec.yphfm := Convert_Yphap_Type( Get( slices, 51 ));
            rec.yphfr := Convert_Yphap_Type( Get( slices, 52 ));
            rec.yphlf := Convert_Yphap_Type( Get( slices, 53 ));
            rec.ypopff := Convert_Ypopfb_Type( Get( slices, 54 ));
            rec.ypopfb := Convert_Ypopfb_Type( Get( slices, 55 ));
            rec.ypopfj := Convert_Ypopfj_Type( Get( slices, 56 ));
            rec.ypoppl := Convert_Ypopfj_Type( Get( slices, 57 ));
            rec.ypvte6 := Convert_Ypvte6_Type( Get( slices, 58 ));
            rec.ypvte3 := Convert_Ypvte3_Type( Get( slices, 59 ));
            rec.ypcrwra := Convert_Ypcrwra_Type( Get( slices, 60 ));
            rec.ypcrwrb := Convert_Ypcrwrb_Type( Get( slices, 61 ));
            rec.ypexpl := Convert_Ypbeau_Type( Get( slices, 62 ));
            rec.ypvand := Convert( slices, 63, ( -9, -8, -2, -1 ) );
            rec.yptrun := Convert_Yptrun_Type( Get( slices, 64 ));
            rec.ypopsc := Convert_Ypopsc_Type( Get( slices, 65 ));
            rec.yplvsc := Convert_Yplvsc_Type( Get( slices, 66 ));
            rec.yplvhm := Convert( slices, 67, ( -9, -8, -2, -1 ) );
            rec.ypwhrs := Convert( slices, 68, ( -9, -8, -2, -1 ) );
            rec.yppay := Convert( slices, 69, ( -9, -8, -2, -1 ) );
            rec.ypfsoc := Convert( slices, 70, ( -9.0, -8.0, -7.0, -1.0 ) );
            rec.ypdlfa := Convert_Ypdlfa_Type( Get( slices, 71 ));
            rec.ypdlfb := Convert_Ypdlfb_Type( Get( slices, 72 ));
            rec.ypwght := Convert( slices, 73 );
            rec.hid := Convert( slices, 74 );
            rec.pid := Convert( slices, 75 );
            rec.fnspno := Convert( slices, 76, ( -9, -8 ) );
            rec.fnspid := Convert( slices, 77, ( -9.0, -8.0 ) );
            rec.mnspno := Convert( slices, 78, ( -9, -8 ) );
            rec.mnspid := Convert( slices, 79, ( -9.0, -8.0 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Youth_component ).start_pos = 0 ) then
               index.pointers( Youth_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Youth_component ).counter := index.pointers( Youth_component ).counter + 1;
            Put_Index( index_map, index );
            Youth_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Youth_IO.Close( bin_file );
   end Create_Youth_Wave_J;




   procedure Create_Childad_Wave_K( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Childad_IO.File_Type;
      rec         : Childad_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Childad_IO.Create (bin_file, Childad_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.lacbm := Convert_Lacbm_Type( Get( slices, 3 ));
            rec.lacby4 := Convert( slices, 4, ( -9, -8, -7, -2, -1 ) );
            rec.lacsx := Convert_Lacsx_Type( Get( slices, 5 ));
            rec.lacst := Convert_Lacst_Type( Get( slices, 6 ));
            rec.lacyb4 := Convert( slices, 7, ( -9, -8, -7, -2, -1 ) );
            rec.laclv := Convert_Laclv_Type( Get( slices, 8 ));
            rec.lacyd4 := Convert( slices, 9, ( -9, -8, -7, -2, -1 ) );
            rec.lacal := Convert( slices, 10, ( -9, -8, -2, -1 ) );
            rec.lacno := Convert( slices, 11 );
            rec.pid := Convert( slices, 12 );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Childad_component ).start_pos = 0 ) then
               index.pointers( Childad_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Childad_component ).counter := index.pointers( Childad_component ).counter + 1;
            Put_Index( index_map, index );
            Childad_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Childad_IO.Close( bin_file );
   end Create_Childad_Wave_K;




   procedure Create_Childnt_Wave_K( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Childnt_IO.File_Type;
      rec         : Childnt_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Childnt_IO.Create (bin_file, Childnt_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.lchbm := Convert_Lacbm_Type( Get( slices, 3 ));
            rec.lchby4 := Convert( slices, 4, ( -9, -8, -7, -2, -1 ) );
            rec.lchsx := Convert_Lacsx_Type( Get( slices, 5 ));
            rec.lchlv := Convert_Lchlv_Type( Get( slices, 6 ));
            rec.lchyd4 := Convert( slices, 7, ( -9, -8, -7, -2, -1 ) );
            rec.lchal := Convert( slices, 8, ( -9, -8, -2, -1 ) );
            rec.lncno := Convert( slices, 9 );
            rec.pid := Convert( slices, 10 );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Childnt_component ).start_pos = 0 ) then
               index.pointers( Childnt_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Childnt_component ).counter := index.pointers( Childnt_component ).counter + 1;
            Put_Index( index_map, index );
            Childnt_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Childnt_IO.Close( bin_file );
   end Create_Childnt_Wave_K;




   procedure Create_Cohabit_Wave_K( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Cohabit_IO.File_Type;
      rec         : Cohabit_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Cohabit_IO.Create (bin_file, Cohabit_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.lcsbm := Convert_Lacbm_Type( Get( slices, 3 ));
            rec.lcsby4 := Convert( slices, 4, ( -9, -8, -7, -2, -1 ) );
            rec.lcsem := Convert_Lacbm_Type( Get( slices, 5 ));
            rec.lcsey4 := Convert( slices, 6, ( -9, -8, -7, -2, -1 ) );
            rec.lcsne := Convert_Lcsne_Type( Get( slices, 7 ));
            rec.lcsno := Convert( slices, 8 );
            rec.pid := Convert( slices, 9 );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Cohabit_component ).start_pos = 0 ) then
               index.pointers( Cohabit_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Cohabit_component ).counter := index.pointers( Cohabit_component ).counter + 1;
            Put_Index( index_map, index );
            Cohabit_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Cohabit_IO.Close( bin_file );
   end Create_Cohabit_Wave_K;




   procedure Create_Egoalt_Wave_K( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Egoalt_IO.File_Type;
      rec         : Egoalt_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Egoalt_IO.Create (bin_file, Egoalt_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.opno := Convert( slices, 3, (  1 .. 0 => -9 ) );
            rec.rel := Convert_Rel_Type( Get( slices, 4 ));
            rec.sex := Convert_Sex_Type( Get( slices, 5 ));
            rec.osex := Convert_Hgsex_Type( Get( slices, 6 ));
            rec.lwstat := Convert_Lwstat_Type( Get( slices, 7 ));
            rec.nwstat := Convert_Nwstat_Type( Get( slices, 8 ));
            rec.pid := Convert( slices, 9 );
            rec.opid := Convert( slices, 10 );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Egoalt_component ).start_pos = 0 ) then
               index.pointers( Egoalt_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Egoalt_component ).counter := index.pointers( Egoalt_component ).counter + 1;
            Put_Index( index_map, index );
            Egoalt_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Egoalt_IO.Close( bin_file );
   end Create_Egoalt_Wave_K;




   procedure Create_Hhresp_Wave_K( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Hhresp_IO.File_Type;
      rec         : Hhresp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Hhresp_IO.Create (bin_file, Hhresp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.hhdoi := Convert( slices, 2, ( -9, -8, -7 ) );
            rec.hhmoi := Convert_Doim_Type( Get( slices, 3 ));
            rec.hhyoi4 := Convert( slices, 4, ( -9, -8, -7, -2, -1 ) );
            rec.hhsoih := Convert( slices, 5, ( -9, -8, -7 ) );
            rec.hhsoim := Convert( slices, 6, ( -9, -8, -7 ) );
            rec.hstype := Convert_Hstype_Type( Get( slices, 7 ));
            rec.hsrins := Convert_Cjsck2_Type( Get( slices, 8 ));
            rec.hsroom := Convert( slices, 9, ( -9, -8, -7, -2, -1 ) );
            rec.hsownd := Convert_Hsownd_Type( Get( slices, 10 ));
            rec.hsowr1 := Convert( slices, 11, ( -9, -8, -7, -2, -1 ) );
            rec.hsowr2 := Convert( slices, 12, ( -9, -8, -7, -2, -1 ) );
            rec.hsval := Convert( slices, 13, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.mghave := Convert_Mghave_Type( Get( slices, 14 ));
            rec.hsowrp := Convert_Bscon_Type( Get( slices, 15 ));
            rec.mgynot := Convert_Mgynot_Type( Get( slices, 16 ));
            rec.hscost := Convert( slices, 17, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.hsyr04 := Convert( slices, 18, ( -9, -8, -7, -2, -1 ) );
            rec.mgyr04 := Convert( slices, 19, ( -9, -8, -7, -2, -1 ) );
            rec.mgly := Convert_Bscon_Type( Get( slices, 20 ));
            rec.hsivlw := Convert( slices, 21, ( -9, -8, -7, -2, -1 ) );
            rec.mgold := Convert( slices, 22, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.mglife := Convert( slices, 23, ( -9, -8, -7, -2, -1 ) );
            rec.mgtype := Convert_Mgtype_Type( Get( slices, 24 ));
            rec.mgxtra := Convert_Bscon_Type( Get( slices, 25 ));
            rec.mgnew := Convert( slices, 26, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.mgxty1 := Convert_Mgxty1_Type( Get( slices, 27 ));
            rec.mgxty2 := Convert_Mgxty2_Type( Get( slices, 28 ));
            rec.mgxty3 := Convert_Mgxty3_Type( Get( slices, 29 ));
            rec.mgxty4 := Convert_Mgxty4_Type( Get( slices, 30 ));
            rec.mgxty5 := Convert_Mgxty5_Type( Get( slices, 31 ));
            rec.xpmg := Convert( slices, 32, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.xpmg1 := Convert_Bscon_Type( Get( slices, 33 ));
            rec.xpmg2 := Convert_Bscon_Type( Get( slices, 34 ));
            rec.xpmg3 := Convert_Bscon_Type( Get( slices, 35 ));
            rec.xpmg4 := Convert_Bscon_Type( Get( slices, 36 ));
            rec.hsjb := Convert_Bscon_Type( Get( slices, 37 ));
            rec.rentp1 := Convert( slices, 38, ( -9, -8, -7, -2, -1 ) );
            rec.rentp2 := Convert( slices, 39, ( -9, -8, -7, -2, -1 ) );
            rec.rentll := Convert_Rentll_Type( Get( slices, 40 ));
            rec.rentf := Convert_Rentf_Type( Get( slices, 41 ));
            rec.rent := Convert( slices, 42, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.rentw := Convert( slices, 43, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.rent1 := Convert_Rent1_Type( Get( slices, 44 ));
            rec.rent2 := Convert_Rent1_Type( Get( slices, 45 ));
            rec.rent3 := Convert_Bscon_Type( Get( slices, 46 ));
            rec.rent4 := Convert_Bscon_Type( Get( slices, 47 ));
            rec.rent5 := Convert_Bscon_Type( Get( slices, 48 ));
            rec.rent6 := Convert_Bscon_Type( Get( slices, 49 ));
            rec.rent7 := Convert_Rent7_Type( Get( slices, 50 ));
            rec.rent8 := Convert_Coh1mr_Type( Get( slices, 51 ));
            rec.renthb := Convert_Renthb_Type( Get( slices, 52 ));
            rec.rentg := Convert( slices, 53, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.rentgw := Convert( slices, 54, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.xphsdf := Convert( slices, 55, ( -9, -8, -7, -2, -1 ) );
            rec.xphsd1 := Convert_Bscon_Type( Get( slices, 56 ));
            rec.xphsd2 := Convert_Bscon_Type( Get( slices, 57 ));
            rec.xphsdb := Convert_Bscon_Type( Get( slices, 58 ));
            rec.hskch := Convert_Boolean_With_Missing( Get( slices, 59 ));
            rec.hskchs := Convert_Boolean_With_Missing( Get( slices, 60 ));
            rec.hsbth := Convert_Boolean_With_Missing( Get( slices, 61 ));
            rec.hsbths := Convert_Boolean_With_Missing( Get( slices, 62 ));
            rec.hstlt := Convert_Boolean_With_Missing( Get( slices, 63 ));
            rec.hstlts := Convert_Boolean_With_Missing( Get( slices, 64 ));
            rec.hsgdn := Convert_Boolean_With_Missing( Get( slices, 65 ));
            rec.hsgdns := Convert_Boolean_With_Missing( Get( slices, 66 ));
            rec.xpgasy := Convert( slices, 67, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.xplecy := Convert( slices, 68, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.xpoily := Convert( slices, 69, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.xpsfly := Convert( slices, 70, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.heatch := Convert_Bscon_Type( Get( slices, 71 ));
            rec.heatyp := Convert_Heatyp_Type( Get( slices, 72 ));
            rec.hsprbg := Convert_Boolean_With_Missing( Get( slices, 73 ));
            rec.hsprbh := Convert_Boolean_With_Missing( Get( slices, 74 ));
            rec.hsprbi := Convert_Boolean_With_Missing( Get( slices, 75 ));
            rec.hsprbj := Convert_Boolean_With_Missing( Get( slices, 76 ));
            rec.hsprbk := Convert_Boolean_With_Missing( Get( slices, 77 ));
            rec.hsprbl := Convert_Boolean_With_Missing( Get( slices, 78 ));
            rec.hsprbm := Convert_Boolean_With_Missing( Get( slices, 79 ));
            rec.hsprbn := Convert_Boolean_With_Missing( Get( slices, 80 ));
            rec.hsprbo := Convert_Boolean_With_Missing( Get( slices, 81 ));
            rec.hsprbp := Convert_Boolean_With_Missing( Get( slices, 82 ));
            rec.hsprbq := Convert_Boolean_With_Missing( Get( slices, 83 ));
            rec.hsctax := Convert_Hsctax_Type( Get( slices, 84 ));
            rec.hs2ownd := Convert_Bscon_Type( Get( slices, 85 ));
            rec.hs2valo := Convert( slices, 86, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.hs2vala := Convert_Hldsbl1_Type( Get( slices, 87 ));
            rec.hs2valb := Convert_Hldsbl1_Type( Get( slices, 88 ));
            rec.hs2valc := Convert_Hldsbl1_Type( Get( slices, 89 ));
            rec.hs2vald := Convert_Hldsbl1_Type( Get( slices, 90 ));
            rec.mgtot := Convert( slices, 91, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.cdhave := Convert_Bscon_Type( Get( slices, 92 ));
            rec.cdbght := Convert_Bscon_Type( Get( slices, 93 ));
            rec.cd1use := Convert_Cd1new_Type( Get( slices, 94 ));
            rec.cd1new := Convert( slices, 95, ( -9, -8, -7, -2, -1 ) );
            rec.cd1cst := Convert( slices, 96, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd2use := Convert_Cd1new_Type( Get( slices, 97 ));
            rec.cd2new := Convert( slices, 98, ( -9, -8, -7, -2, -1 ) );
            rec.cd2cst := Convert( slices, 99, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd3use := Convert_Cd1new_Type( Get( slices, 100 ));
            rec.cd3new := Convert( slices, 101, ( -9, -8, -7, -2, -1 ) );
            rec.cd3cst := Convert( slices, 102, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd4use := Convert_Cd1new_Type( Get( slices, 103 ));
            rec.cd4new := Convert( slices, 104, ( -9, -8, -7, -2, -1 ) );
            rec.cd4cst := Convert( slices, 105, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd5use := Convert_Cd1new_Type( Get( slices, 106 ));
            rec.cd5new := Convert( slices, 107, ( -9, -8, -7, -2, -1 ) );
            rec.cd5cst := Convert( slices, 108, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd6use := Convert_Cd1new_Type( Get( slices, 109 ));
            rec.cd6new := Convert( slices, 110, ( -9, -8, -7, -2, -1 ) );
            rec.cd6cst := Convert( slices, 111, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd7use := Convert_Cd1new_Type( Get( slices, 112 ));
            rec.cd7new := Convert( slices, 113, ( -9, -8, -7, -2, -1 ) );
            rec.cd7cst := Convert( slices, 114, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd8use := Convert_Cd1new_Type( Get( slices, 115 ));
            rec.cd8new := Convert( slices, 116, ( -9, -8, -7, -2, -1 ) );
            rec.cd8cst := Convert( slices, 117, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd9use := Convert_Cd1new_Type( Get( slices, 118 ));
            rec.cd9new := Convert( slices, 119, ( -9, -8, -7, -2, -1 ) );
            rec.cd9cst := Convert( slices, 120, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd10use := Convert_Cd10new_Type( Get( slices, 121 ));
            rec.cd10new := Convert( slices, 122, ( -9, -8, -7, -2, -1 ) );
            rec.cd10cst := Convert( slices, 123, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd11use := Convert_Cd10new_Type( Get( slices, 124 ));
            rec.cd11new := Convert( slices, 125, ( -9, -8, -7, -2, -1 ) );
            rec.cd11cst := Convert( slices, 126, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd12use := Convert_Cd10new_Type( Get( slices, 127 ));
            rec.cd12new := Convert( slices, 128, ( -9, -8, -7, -2, -1 ) );
            rec.cd12cst := Convert( slices, 129, ( -9, -8, -7, -3, -2, -1 ) );
            rec.pcnet := Convert_Boolean_With_Missing( Get( slices, 130 ));
            rec.xphp := Convert_Bscon_Type( Get( slices, 131 ));
            rec.xphpdf := Convert_Xphpdf_Type( Get( slices, 132 ));
            rec.hscana := Convert_Boolean_With_Missing( Get( slices, 133 ));
            rec.hscnta := Convert_Boolean_With_Missing( Get( slices, 134 ));
            rec.hscanb := Convert_Boolean_With_Missing( Get( slices, 135 ));
            rec.hscntb := Convert_Boolean_With_Missing( Get( slices, 136 ));
            rec.hscanc := Convert_Boolean_With_Missing( Get( slices, 137 ));
            rec.hscntc := Convert_Boolean_With_Missing( Get( slices, 138 ));
            rec.hscand := Convert_Boolean_With_Missing( Get( slices, 139 ));
            rec.hscntd := Convert_Boolean_With_Missing( Get( slices, 140 ));
            rec.hscane := Convert_Boolean_With_Missing( Get( slices, 141 ));
            rec.hscnte := Convert_Boolean_With_Missing( Get( slices, 142 ));
            rec.hscanf := Convert_Boolean_With_Missing( Get( slices, 143 ));
            rec.hscntf := Convert_Boolean_With_Missing( Get( slices, 144 ));
            rec.xpfood := Convert( slices, 145, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ncars := Convert_Ncars_Type( Get( slices, 146 ));
            rec.carown := Convert_Carown_Type( Get( slices, 147 ));
            rec.carval := Convert( slices, 148, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ivh1 := Convert( slices, 149, ( -9, -8, -7, -1 ) );
            rec.ivh2 := Convert( slices, 150, ( -9, -8, -7 ) );
            rec.ivh3 := Convert( slices, 151, ( -9, -8, -7 ) );
            rec.hhfoih := Convert( slices, 152, ( -9, -8, -7 ) );
            rec.hhfoim := Convert( slices, 153, ( -9, -8, -7 ) );
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 154 ));
            rec.hhorig := Convert_Hhorig_Type( Get( slices, 155 ));
            rec.hhdc := Convert_Hhdc_Type( Get( slices, 156 ));
            rec.xhwght := Convert( slices, 157, ( -9.0, -8.0 ) );
            rec.hhsize := Convert( slices, 158, ( -9, -8 ) );
            rec.hhtype := Convert_Hhtype_Type( Get( slices, 159 ));
            rec.region := Convert_Region_Type( Get( slices, 160 ));
            rec.nch02 := Convert( slices, 161, ( -9, -8 ) );
            rec.nch34 := Convert( slices, 162, ( -9, -8 ) );
            rec.nch511 := Convert( slices, 163, ( -9, -8 ) );
            rec.nch1215 := Convert( slices, 164, ( -9, -8 ) );
            rec.nch1618 := Convert( slices, 165, ( -9, -8 ) );
            rec.nkids := Convert( slices, 166, ( -9, -8 ) );
            rec.nwed := Convert( slices, 167, ( -9, -8 ) );
            rec.npens := Convert( slices, 168, ( -9, -8 ) );
            rec.na75pl := Convert( slices, 169, ( -9, -8 ) );
            rec.agechy := Convert( slices, 170, ( -9, -8 ) );
            rec.ncouple := Convert( slices, 171, ( -9, -8 ) );
            rec.nonepar := Convert( slices, 172, ( -9, -8 ) );
            rec.nemp := Convert( slices, 173, ( -9, -8 ) );
            rec.nwage := Convert( slices, 174, ( -9, -8 ) );
            rec.tenure := Convert_Tenure_Type( Get( slices, 175 ));
            rec.xphsn := Convert( slices, 176, ( -9.0, -8.0, -7.0 ) );
            rec.xphsg := Convert( slices, 177, ( -9.0, -8.0, -7.0 ) );
            rec.fieqfcb := Convert( slices, 178, ( -9.0, -8.0 ) );
            rec.fieqfca := Convert( slices, 179, ( -9.0, -8.0 ) );
            rec.fihhyr := Convert( slices, 180, ( -9.0, -8.0, -7.0 ) );
            rec.fihhmn := Convert( slices, 181, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyl := Convert( slices, 182, ( -9.0, -8.0, -7.0 ) );
            rec.fihhynl := Convert( slices, 183, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyp := Convert( slices, 184, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyb := Convert( slices, 185, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyt := Convert( slices, 186, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyi := Convert( slices, 187, ( -9.0, -8.0, -7.0 ) );
            rec.fihhml := Convert( slices, 188, (  1 .. 0 => -9.0 ) );
            rec.fihhmnl := Convert( slices, 189, (  1 .. 0 => -9.0 ) );
            rec.fihhmp := Convert( slices, 190, (  1 .. 0 => -9.0 ) );
            rec.fihhmb := Convert( slices, 191, (  1 .. 0 => -9.0 ) );
            rec.fihhmt := Convert( slices, 192, (  1 .. 0 => -9.0 ) );
            rec.fihhmi := Convert( slices, 193, (  1 .. 0 => -9.0 ) );
            rec.hhmove := Convert_Hhmove_Type( Get( slices, 194 ));
            rec.mgnewi := Convert( slices, 195, ( -9, -8, -7, -2, -1 ) );
            rec.xpmgi := Convert( slices, 196, ( -9, -8, -7, -2, -1 ) );
            rec.hsvali := Convert( slices, 197, ( -9, -8, -7, -2, -1 ) );
            rec.renti := Convert( slices, 198, ( -9, -8, -7, -4, -3, -2, -1 ) );
            rec.rentgi := Convert( slices, 199, ( -9, -8, -7, -2, -1 ) );
            rec.xphsni := Convert_Jhgpayi_Type( Get( slices, 200 ));
            rec.xphsgi := Convert_Jhgpayi_Type( Get( slices, 201 ));
            rec.fihhmni := Convert_Fihhmni_Type( Get( slices, 202 ));
            rec.fihhmli := Convert_Fihhmbi_Type( Get( slices, 203 ));
            rec.fihmnli := Convert_Fihhmbi_Type( Get( slices, 204 ));
            rec.fihhmpi := Convert_Fihhmbi_Type( Get( slices, 205 ));
            rec.fihhmbi := Convert_Fihhmbi_Type( Get( slices, 206 ));
            rec.fihhmti := Convert_Fihhmbi_Type( Get( slices, 207 ));
            rec.fihhmii := Convert_Fihhmbi_Type( Get( slices, 208 ));
            rec.fihhyri := Convert_Fihhmbi_Type( Get( slices, 209 ));
            rec.fihhyli := Convert_Fihhmbi_Type( Get( slices, 210 ));
            rec.fihhyni := Convert_Fihhmbi_Type( Get( slices, 211 ));
            rec.fihhypi := Convert_Fihhmbi_Type( Get( slices, 212 ));
            rec.fihhybi := Convert_Fihhmbi_Type( Get( slices, 213 ));
            rec.fihhyti := Convert_Fihhmbi_Type( Get( slices, 214 ));
            rec.fihhyii := Convert_Fihhmbi_Type( Get( slices, 215 ));
            rec.fihhsel := Convert_Fihhsel_Type( Get( slices, 216 ));
            rec.xhwghte := Convert( slices, 217 );
            rec.xhwtuk1 := Convert( slices, 218, ( -9.0, -8.0 ) );
            rec.xhwtuk2 := Convert( slices, 219, ( -9.0, -8.0 ) );
            rec.region2 := Convert_Region2_Type( Get( slices, 220 ));
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Hhresp_component ).start_pos = 0 ) then
               index.pointers( Hhresp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Hhresp_component ).counter := index.pointers( Hhresp_component ).counter + 1;
            Put_Index( index_map, index );
            Hhresp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Hhresp_IO.Close( bin_file );
   end Create_Hhresp_Wave_K;




   procedure Create_Hhsamp_Wave_K( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Hhsamp_IO.File_Type;
      rec         : Hhsamp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Hhsamp_IO.Create (bin_file, Hhsamp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.fid := Convert( slices, 2 );
            rec.ivnadd := Convert( slices, 3, ( -9.0, -8.0 ) );
            rec.ivia := Convert_Ivia_Type( Get( slices, 4 ));
--             rec.ivid := Convert( slices, 5 );
            rec.ivlnc := Convert( slices, 6, ( -9, -1 ) );
            rec.ivtnc := Convert( slices, 7, ( -9, -8, -1 ) );
            rec.iviam := Convert_Iviam_Type( Get( slices, 8 ));
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 9 ));
            rec.ivosmrh := Convert( slices, 10, ( -9, -8, -1 ) );
            rec.ivnsmrh := Convert( slices, 11, ( -9, -8, -1 ) );
            rec.ivrrefh := Convert_Ivrrefh_Type( Get( slices, 12 ));
            rec.ivisst := Convert_Ivisst_Type( Get( slices, 13 ));
            rec.ivconv := Convert_Ivconv_Type( Get( slices, 14 ));
            rec.ivreis := Convert_Ivreis_Type( Get( slices, 15 ));
            rec.hhdc := Convert_Hhdc_Type( Get( slices, 16 ));
            rec.hhorig := Convert_Hhorig_Type( Get( slices, 17 ));
            rec.xhwght := Convert( slices, 18, ( -9.0, -8.0, -1.0 ) );
            rec.region := Convert_Region_Type( Get( slices, 19 ));
            rec.hhmove := Convert_Hhmove_Type( Get( slices, 20 ));
            rec.ahid := Convert( slices, 21 );
            rec.xhwghte := Convert( slices, 22 );
            rec.xhwtuk1 := Convert( slices, 23, ( -9.0, -8.0, -1.0 ) );
            rec.xhwtuk2 := Convert( slices, 24, ( -9.0, -8.0, -1.0 ) );
            rec.strata := Convert( slices, 25, ( -9, -8, -1 ) );
            rec.psu := Convert( slices, 26, ( -9, -8, -1 ) );
            rec.region2 := Convert_Region2_Type( Get( slices, 27 ));
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Hhsamp_component ).start_pos = 0 ) then
               index.pointers( Hhsamp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Hhsamp_component ).counter := index.pointers( Hhsamp_component ).counter + 1;
            Put_Index( index_map, index );
            Hhsamp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Hhsamp_IO.Close( bin_file );
   end Create_Hhsamp_Wave_K;




   procedure Create_Income_Wave_K( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Income_IO.File_Type;
      rec         : Income_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Income_IO.Create (bin_file, Income_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.pno := Convert( slices, 1 );
            rec.ficode := Convert_Ficode_Type( Get( slices, 2 ));
            rec.frall := Convert_Frall_Type( Get( slices, 3 ));
            rec.fr01 := Convert_Cd1own_Type( Get( slices, 4 ));
            rec.fr02 := Convert_Cd1own_Type( Get( slices, 5 ));
            rec.fr03 := Convert_Cd1own_Type( Get( slices, 6 ));
            rec.fr04 := Convert( slices, 7, ( -9, -8, -2, -1 ) );
            rec.fr05 := Convert_Cd1own_Type( Get( slices, 8 ));
            rec.fr06 := Convert_Cd1own_Type( Get( slices, 9 ));
            rec.fr07 := Convert_Cd1own_Type( Get( slices, 10 ));
            rec.fr08 := Convert_Cd1own_Type( Get( slices, 11 ));
            rec.fr09 := Convert_Cd1own_Type( Get( slices, 12 ));
            rec.fr10 := Convert_Cd1own_Type( Get( slices, 13 ));
            rec.fr11 := Convert_Cd1own_Type( Get( slices, 14 ));
            rec.fr12 := Convert_Cd1own_Type( Get( slices, 15 ));
            rec.fr13 := Convert_Cd1own_Type( Get( slices, 16 ));
            rec.fr14 := Convert_Cd1own_Type( Get( slices, 17 ));
            rec.fr15 := Convert_Cd1own_Type( Get( slices, 18 ));
            rec.fr16 := Convert_Cd1own_Type( Get( slices, 19 ));
            rec.fr17 := Convert_Cd1own_Type( Get( slices, 20 ));
            rec.fr18 := Convert_Fr18_Type( Get( slices, 21 ));
            rec.fr19 := Convert_Fr18_Type( Get( slices, 22 ));
            rec.fr20 := Convert_Fr18_Type( Get( slices, 23 ));
            rec.frnow := Convert_Frnow_Type( Get( slices, 24 ));
            rec.frval := Convert( slices, 25, ( -9.0, -8.0, -3.0, -2.0, -1.0 ) );
            rec.frw := Convert( slices, 26, ( -9.0, -8.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.frjt := Convert_Frjt_Type( Get( slices, 27 ));
            rec.frjtpn := Convert( slices, 28, ( -9, -8, -2, -1 ) );
            rec.hid := Convert( slices, 29 );
            rec.fiseq := Convert( slices, 30 );
            rec.fim09l := Convert( slices, 31, ( -9.0, -8.0, -3.0 ) );
            rec.fim10l := Convert( slices, 32, ( -9.0, -8.0, -3.0 ) );
            rec.fim11l := Convert( slices, 33, ( -9.0, -8.0, -3.0 ) );
            rec.fim12l := Convert( slices, 34, ( -9.0, -8.0, -3.0 ) );
            rec.fim01t := Convert( slices, 35, ( -9.0, -8.0, -3.0 ) );
            rec.fim02t := Convert( slices, 36, ( -9.0, -8.0, -3.0 ) );
            rec.fim03t := Convert( slices, 37, ( -9.0, -8.0, -3.0 ) );
            rec.fim04t := Convert( slices, 38, ( -9.0, -8.0, -3.0 ) );
            rec.fim05t := Convert( slices, 39, ( -9.0, -8.0, -3.0 ) );
            rec.fim06t := Convert( slices, 40, ( -9.0, -8.0, -3.0 ) );
            rec.fim07t := Convert( slices, 41, ( -9.0, -8.0, -3.0 ) );
            rec.fim08t := Convert( slices, 42, ( -9.0, -8.0, -3.0 ) );
            rec.fim09t := Convert( slices, 43, ( -9.0, -8.0, -3.0 ) );
            rec.fim10t := Convert( slices, 44, ( -9.0, -8.0, -3.0 ) );
            rec.fim11t := Convert( slices, 45, ( -9.0, -8.0, -3.0 ) );
            rec.fim12t := Convert( slices, 46, ( -9.0, -8.0, -3.0 ) );
            rec.fim01n := Convert( slices, 47, ( -9.0, -8.0, -3.0 ) );
            rec.fim02n := Convert( slices, 48, ( -9.0, -3.0 ) );
            rec.fim03n := Convert( slices, 49, ( -9.0, -3.0 ) );
            rec.fim04n := Convert( slices, 50, ( -9.0, -3.0 ) );
            rec.frjtvf := Convert_Frjtvf_Type( Get( slices, 51 ));
            rec.frvali := Convert( slices, 52, ( -9, -8, -3, -2, -1 ) );
            rec.pid := Convert( slices, 53 );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Income_component ).start_pos = 0 ) then
               index.pointers( Income_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Income_component ).counter := index.pointers( Income_component ).counter + 1;
            Put_Index( index_map, index );
            Income_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Income_IO.Close( bin_file );
   end Create_Income_Wave_K;




   procedure Create_Indall_Wave_K( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Indall_IO.File_Type;
      rec         : Indall_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Indall_IO.Create (bin_file, Indall_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.pid := Convert( slices, 3 );
            rec.iviolw := Convert_Iviolw_Type( Get( slices, 4 ));
            rec.ivstat1 := Convert_Ivstat1_Type( Get( slices, 5 ));
            rec.hhmem := Convert_Hhmem_Type( Get( slices, 6 ));
            rec.newhy := Convert_Newhy_Type( Get( slices, 7 ));
            rec.nemnjn := Convert_Nemnjn_Type( Get( slices, 8 ));
            rec.neyrjn4 := Convert( slices, 9, ( -9, -8, -7, -2, -1 ) );
            rec.ivfio := Convert_Ivfio_Type( Get( slices, 10 ));
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 11 ));
            rec.iodc := Convert_Iodc_Type( Get( slices, 12 ));
            rec.memorig := Convert_Memorig_Type( Get( slices, 13 ));
            rec.hgr2r := Convert_Hgr2r_Type( Get( slices, 14 ));
            rec.hgsex := Convert_Hgsex_Type( Get( slices, 15 ));
            rec.hgbm := Convert_Hgbm_Type( Get( slices, 16 ));
            rec.hgby := Convert( slices, 17, ( -9, -8, -2, -1 ) );
            rec.mastat := Convert_Mastat_Type( Get( slices, 18 ));
            rec.hgspn := Convert( slices, 19, ( -9, -8, -2, -1 ) );
            rec.hgemp := Convert_Hgemp_Type( Get( slices, 20 ));
            rec.hgfno := Convert( slices, 21, ( -9, -8, -2, -1 ) );
            rec.hgmno := Convert( slices, 22, ( -9, -8, -2, -1 ) );
            rec.hgra := Convert( slices, 23, ( -9, -8, -2, -1 ) );
            rec.age := Convert( slices, 24, ( -9, -8, -2, -1 ) );
            rec.age12 := Convert( slices, 25, ( -9, -8, -2, -1 ) );
            rec.butype := Convert_Butype_Type( Get( slices, 26 ));
            rec.buno := Convert( slices, 27, ( -9, -8 ) );
            rec.nchild := Convert( slices, 28, ( -9, -8 ) );
            rec.depchl := Convert_Depchl_Type( Get( slices, 29 ));
            rec.hoh := Convert_Hoh_Type( Get( slices, 30 ));
            rec.rach16 := Convert_Hhch12_Type( Get( slices, 31 ));
            rec.agei := Convert_Agei_Type( Get( slices, 32 ));
            rec.lrwght := Convert( slices, 33, ( -9.0, -8.0 ) );
            rec.lewght := Convert( slices, 34, ( -9.0, -8.0 ) );
            rec.xrwght := Convert( slices, 35, ( -9.0, -8.0 ) );
            rec.xewght := Convert( slices, 36, ( -9.0, -8.0 ) );
            rec.movest := Convert_Movest_Type( Get( slices, 37 ));
            rec.sampst := Convert_Sampst_Type( Get( slices, 38 ));
            rec.xrwghte := Convert( slices, 39 );
            rec.xewghte := Convert( slices, 40 );
            rec.xrwtuk1 := Convert( slices, 41, ( -9.0, -8.0 ) );
            rec.xewtuk1 := Convert( slices, 42, ( -9.0, -8.0 ) );
            rec.xrwtuk2 := Convert( slices, 43, ( -9.0, -8.0 ) );
            rec.xewtuk2 := Convert( slices, 44, ( -9.0, -8.0 ) );
            rec.lrwtsw1 := Convert( slices, 45, ( -9.0, -8.0 ) );
            rec.lewtsw1 := Convert( slices, 46, ( -9.0, -8.0 ) );
            rec.lrwtsw2 := Convert( slices, 47, ( -9.0, -8.0 ) );
            rec.lewtsw2 := Convert( slices, 48, ( -9.0, -8.0 ) );
            rec.sppid := Convert( slices, 49 );
            rec.fpid := Convert( slices, 50 );
            rec.mpid := Convert( slices, 51 );
            rec.rapid := Convert( slices, 52 );
            rec.distmov := Convert( slices, 53, ( -9.0, -8.0 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Indall_component ).start_pos = 0 ) then
               index.pointers( Indall_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Indall_component ).counter := index.pointers( Indall_component ).counter + 1;
            Put_Index( index_map, index );
            Indall_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Indall_IO.Close( bin_file );
   end Create_Indall_Wave_K;




   procedure Create_Indresp_Wave_K( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Indresp_IO.File_Type;
      rec         : Indresp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Indresp_IO.Create (bin_file, Indresp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.doid := Convert( slices, 3, ( -9, -7 ) );
            rec.doim := Convert_Doim_Type( Get( slices, 4 ));
            rec.doiy4 := Convert( slices, 5, ( -9, -8, -7, -2, -1 ) );
            rec.ivsoih := Convert( slices, 6, ( -9, -8 ) );
            rec.ivsoim := Convert( slices, 7, ( -9, -8 ) );
            rec.ivlyr := Convert( slices, 8, ( -9, -8, -7 ) );
            rec.ivstat2 := Convert_Ivstat2_Type( Get( slices, 9 ));
            rec.lknbrd := Convert_Aidpl1_Type( Get( slices, 10 ));
            rec.lkmove := Convert_Lkmove_Type( Get( slices, 11 ));
            rec.lkmovy := Convert_Lkmovy_Type( Get( slices, 12 ));
            rec.xpmove := Convert( slices, 13, ( -9, -8, -7, -2, -1 ) );
            rec.plnew := Convert( slices, 14, ( -9, -8, -7, -2, -1 ) );
            rec.plnowm := Convert_Jbbgm1_Type( Get( slices, 15 ));
            rec.plnowy4 := Convert( slices, 16, ( -9, -8, -7, -2, -1 ) );
            rec.movjb := Convert_Aidpl1_Type( Get( slices, 17 ));
            rec.movjba := Convert_Movjba_Type( Get( slices, 18 ));
            rec.movjbb := Convert_Movjba_Type( Get( slices, 19 ));
            rec.movjbc := Convert_Movjba_Type( Get( slices, 20 ));
            rec.movjbd := Convert_Movjba_Type( Get( slices, 21 ));
            rec.movjbe := Convert_Movjba_Type( Get( slices, 22 ));
            rec.movjbf := Convert_Movjba_Type( Get( slices, 23 ));
            rec.movjbg := Convert_Movjba_Type( Get( slices, 24 ));
            rec.movjbh := Convert_Movjba_Type( Get( slices, 25 ));
            rec.movjbi := Convert_Movjba_Type( Get( slices, 26 ));
            rec.movy1 := Convert_Movy1_Type( Get( slices, 27 ));
            rec.movy2 := Convert_Movy2_Type( Get( slices, 28 ));
            rec.dobm := Convert_Cjsem_Type( Get( slices, 29 ));
            rec.doby := Convert( slices, 30, ( -9, -8, -7, -2, -1 ) );
            rec.sex := Convert_Sex_Type( Get( slices, 31 ));
            rec.mlstat := Convert_Mlstat_Type( Get( slices, 32 ));
            rec.mlchng := Convert_Bscon_Type( Get( slices, 33 ));
            rec.mlchm := Convert_Mlchm_Type( Get( slices, 34 ));
            rec.mlchy4 := Convert( slices, 35, ( -9, -8, -7, -2, -1 ) );
            rec.jbstat := Convert_Jbstat_Type( Get( slices, 36 ));
            rec.edlyr := Convert_Aidpl1_Type( Get( slices, 37 ));
            rec.edtype1 := Convert_Edtype1_Type( Get( slices, 38 ));
            rec.edblyr1 := Convert_Boolean_With_Missing( Get( slices, 39 ));
            rec.edbgm1 := Convert_Edbgm1_Type( Get( slices, 40 ));
            rec.edbgy1 := Convert( slices, 41, ( -9, -8, -7, -2, -1 ) );
            rec.edenm1 := Convert_Edbgm1_Type( Get( slices, 42 ));
            rec.edeny1 := Convert( slices, 43, ( -9, -8, -7, -2, -1 ) );
            rec.edenne1 := Convert_Edenne1_Type( Get( slices, 44 ));
            rec.edfeea1 := Convert_Yes_Or_Missing_Type( Get( slices, 45 ));
            rec.edfeeb1 := Convert_Yes_Or_Missing_Type( Get( slices, 46 ));
            rec.edfeec1 := Convert_Yes_Or_Missing_Type( Get( slices, 47 ));
            rec.edfeed1 := Convert_Yes_Or_Missing_Type( Get( slices, 48 ));
            rec.edfeee1 := Convert_Yes_Or_Missing_Type( Get( slices, 49 ));
            rec.edfeef1 := Convert_Yes_Or_Missing_Type( Get( slices, 50 ));
            rec.edfeeg1 := Convert_Yes_Or_Missing_Type( Get( slices, 51 ));
            rec.edqual1 := Convert_Edqual1_Type( Get( slices, 52 ));
            rec.edqnn1 := Convert( slices, 53, ( -9, -8, -7, -2, -1 ) );
            rec.edqla1 := Convert_Yes_Or_Missing_Type( Get( slices, 54 ));
            rec.edqlb1 := Convert_Yes_Or_Missing_Type( Get( slices, 55 ));
            rec.edqlc1 := Convert_Yes_Or_Missing_Type( Get( slices, 56 ));
            rec.edqld1 := Convert_Yes_Or_Missing_Type( Get( slices, 57 ));
            rec.edqle1 := Convert_Yes_Or_Missing_Type( Get( slices, 58 ));
            rec.edqlf1 := Convert_Yes_Or_Missing_Type( Get( slices, 59 ));
            rec.edqlg1 := Convert_Yes_Or_Missing_Type( Get( slices, 60 ));
            rec.edqlh1 := Convert_Yes_Or_Missing_Type( Get( slices, 61 ));
            rec.edqli1 := Convert_Yes_Or_Missing_Type( Get( slices, 62 ));
            rec.edqlj1 := Convert( slices, 63, ( -9, -8, -7 ) );
            rec.edqlan1 := Convert( slices, 64, ( -9, -8, -7, -2, -1 ) );
            rec.edqlbn1 := Convert( slices, 65, ( -9, -8, -7, -2, -1 ) );
            rec.edqlcn1 := Convert( slices, 66, ( -9, -8, -7, -2, -1 ) );
            rec.edqldn1 := Convert( slices, 67, ( -9, -8, -7, -2, -1 ) );
            rec.edqlen1 := Convert( slices, 68, ( -9, -8, -7, -2, -1 ) );
            rec.edqlfn1 := Convert( slices, 69, ( -9, -8, -7, -2, -1 ) );
            rec.edqlgn1 := Convert( slices, 70, ( -9, -8, -7, -2, -1 ) );
            rec.edqlhn1 := Convert( slices, 71, ( -9, -8, -7, -2, -1 ) );
            rec.edqlin1 := Convert( slices, 72, ( -9, -8, -7, -2, -1 ) );
            rec.edqljn1 := Convert( slices, 73, ( -9, -8, -7, -2, -1 ) );
            rec.edoqln1 := Convert( slices, 74, ( -9, -8, -7, -2, -1 ) );
            rec.edoql1 := Convert_Edoql1_Type( Get( slices, 75 ));
            rec.edmore1 := Convert_Boolean_With_Missing( Get( slices, 76 ));
            rec.edtype2 := Convert_Edtype1_Type( Get( slices, 77 ));
            rec.edblyr2 := Convert_Boolean_With_Missing( Get( slices, 78 ));
            rec.edbgm2 := Convert_Edbgm1_Type( Get( slices, 79 ));
            rec.edbgy2 := Convert( slices, 80, ( -9, -8, -7, -2, -1 ) );
            rec.edenm2 := Convert_Edbgm1_Type( Get( slices, 81 ));
            rec.edeny2 := Convert( slices, 82, ( -9, -8, -7, -2, -1 ) );
            rec.edenne2 := Convert_Edenne2_Type( Get( slices, 83 ));
            rec.edfeea2 := Convert_Yes_Or_Missing_Type( Get( slices, 84 ));
            rec.edfeeb2 := Convert_Yes_Or_Missing_Type( Get( slices, 85 ));
            rec.edfeec2 := Convert_Yes_Or_Missing_Type( Get( slices, 86 ));
            rec.edfeed2 := Convert_Yes_Or_Missing_Type( Get( slices, 87 ));
            rec.edfeee2 := Convert_Yes_Or_Missing_Type( Get( slices, 88 ));
            rec.edfeef2 := Convert_Yes_Or_Missing_Type( Get( slices, 89 ));
            rec.edfeeg2 := Convert_Yes_Or_Missing_Type( Get( slices, 90 ));
            rec.edqual2 := Convert_Edqual1_Type( Get( slices, 91 ));
            rec.edqnn2 := Convert( slices, 92, ( -9, -8, -7, -2, -1 ) );
            rec.edqla2 := Convert_Yes_Or_Missing_Type( Get( slices, 93 ));
            rec.edqlb2 := Convert_Yes_Or_Missing_Type( Get( slices, 94 ));
            rec.edqlc2 := Convert_Yes_Or_Missing_Type( Get( slices, 95 ));
            rec.edqld2 := Convert_Yes_Or_Missing_Type( Get( slices, 96 ));
            rec.edqle2 := Convert_Yes_Or_Missing_Type( Get( slices, 97 ));
            rec.edqlf2 := Convert_Yes_Or_Missing_Type( Get( slices, 98 ));
            rec.edqlg2 := Convert_Yes_Or_Missing_Type( Get( slices, 99 ));
            rec.edqlh2 := Convert_Yes_Or_Missing_Type( Get( slices, 100 ));
            rec.edqli2 := Convert_Yes_Or_Missing_Type( Get( slices, 101 ));
            rec.edqlj2 := Convert( slices, 102, ( -9, -8, -7 ) );
            rec.edqlan2 := Convert( slices, 103, ( -9, -8, -7, -2, -1 ) );
            rec.edqlbn2 := Convert( slices, 104, ( -9, -8, -7, -2, -1 ) );
            rec.edqlcn2 := Convert( slices, 105, ( -9, -8, -7, -2, -1 ) );
            rec.edqldn2 := Convert( slices, 106, ( -9, -8, -7, -2, -1 ) );
            rec.edqlen2 := Convert( slices, 107, ( -9, -8, -7, -2, -1 ) );
            rec.edqlfn2 := Convert( slices, 108, ( -9, -8, -7, -2, -1 ) );
            rec.edqlgn2 := Convert( slices, 109, ( -9, -8, -7, -2, -1 ) );
            rec.edqlhn2 := Convert( slices, 110, ( -9, -8, -7, -2, -1 ) );
            rec.edqlin2 := Convert( slices, 111, ( -9, -8, -7, -2, -1 ) );
            rec.edqljn2 := Convert( slices, 112, ( -9, -8, -7, -2, -1 ) );
            rec.edoqln2 := Convert( slices, 113, ( -9, -8, -7, -2, -1 ) );
            rec.edoql2 := Convert_Edoql1_Type( Get( slices, 114 ));
            rec.edmore2 := Convert_Boolean_With_Missing( Get( slices, 115 ));
            rec.plbornd := Convert_Plbornd_Type( Get( slices, 116 ));
            rec.plbornc := Convert_Plbornc_Type( Get( slices, 117 ));
            rec.yr2uk4 := Convert( slices, 118, ( -9, -8, -7, -2, -1 ) );
            rec.citzn1 := Convert( slices, 119, ( -9, -8, -7, -2, -1 ) );
            rec.citzn2 := Convert_Citzn2_Type( Get( slices, 120 ));
            rec.race := Convert_Race_Type( Get( slices, 121 ));
            rec.paju := Convert_Paju_Type( Get( slices, 122 ));
            rec.pasoc := Convert( slices, 123, ( -9, -8, -7, -2, -1 ) );
            rec.pasoc00 := Convert( slices, 124, ( -9, -8, -7, -2, -1 ) );
            rec.pasemp := Convert_J2semp_Type( Get( slices, 125 ));
            rec.paboss := Convert_Maboss_Type( Get( slices, 126 ));
            rec.pamngr := Convert_Mamngr_Type( Get( slices, 127 ));
            rec.maju := Convert_Maju_Type( Get( slices, 128 ));
            rec.masoc := Convert( slices, 129, ( -9, -8, -7, -2, -1 ) );
            rec.masoc00 := Convert( slices, 130, ( -9, -8, -7, -2, -1 ) );
            rec.masemp := Convert_J2semp_Type( Get( slices, 131 ));
            rec.maboss := Convert_Maboss_Type( Get( slices, 132 ));
            rec.mamngr := Convert_Mamngr_Type( Get( slices, 133 ));
            rec.j1none := Convert_J1none_Type( Get( slices, 134 ));
            rec.j1soc := Convert( slices, 135, ( -9, -8, -7, -2, -1 ) );
            rec.j1soc00 := Convert( slices, 136, ( -9, -8, -7, -2, -1 ) );
            rec.j1semp := Convert_J1semp_Type( Get( slices, 137 ));
            rec.j1boss := Convert_J1boss_Type( Get( slices, 138 ));
            rec.j1mngr := Convert_J1mngr_Type( Get( slices, 139 ));
            rec.lcoh := Convert_Aidpl1_Type( Get( slices, 140 ));
            rec.coh1bm := Convert_Ch1bm_Type( Get( slices, 141 ));
            rec.coh1by := Convert( slices, 142, ( -9, -8, -7, -2, -1 ) );
            rec.coh1mr := Convert_Coh1mr_Type( Get( slices, 143 ));
            rec.coh1em := Convert_Ch1bm_Type( Get( slices, 144 ));
            rec.coh1ey := Convert( slices, 145, ( -9, -8, -7, -2, -1 ) );
            rec.nmar := Convert_Nmar_Type( Get( slices, 146 ));
            rec.lmar1m := Convert_Ch1bm_Type( Get( slices, 147 ));
            rec.lmar1y := Convert( slices, 148, ( -9, -8, -7, -2, -1 ) );
            rec.lprnt := Convert_Lprnt_Type( Get( slices, 149 ));
            rec.lnprnt := Convert( slices, 150, ( -9, -8, -7, -2, -1 ) );
            rec.ch1bm := Convert_Ch1bm_Type( Get( slices, 151 ));
            rec.ch1by := Convert( slices, 152, ( -9, -8, -7, -2, -1 ) );
            rec.school := Convert_School_Type( Get( slices, 153 ));
            rec.scend := Convert( slices, 154, ( -9, -8, -7, -2, -1 ) );
            rec.sctype := Convert_Sctype_Type( Get( slices, 155 ));
            rec.scnow := Convert_Cjsck2_Type( Get( slices, 156 ));
            rec.fetype := Convert_Fetype_Type( Get( slices, 157 ));
            rec.fenow := Convert_Fenow_Type( Get( slices, 158 ));
            rec.feend := Convert( slices, 159, ( -9, -8, -7, -2, -1 ) );
            rec.qfhas := Convert_Bscon_Type( Get( slices, 160 ));
            rec.qfa := Convert_Qfa_Type( Get( slices, 161 ));
            rec.qfb := Convert_Qfb_Type( Get( slices, 162 ));
            rec.qfc := Convert_Qfc_Type( Get( slices, 163 ));
            rec.qfd := Convert_Qfd_Type( Get( slices, 164 ));
            rec.qfe := Convert_Qfe_Type( Get( slices, 165 ));
            rec.qff := Convert_Qff_Type( Get( slices, 166 ));
            rec.qfg := Convert_Qfg_Type( Get( slices, 167 ));
            rec.qfh := Convert_Qfh_Type( Get( slices, 168 ));
            rec.qfi := Convert_Qfi_Type( Get( slices, 169 ));
            rec.qfj := Convert_Qfj_Type( Get( slices, 170 ));
            rec.qfk := Convert_Qfk_Type( Get( slices, 171 ));
            rec.qfl := Convert_Qfl_Type( Get( slices, 172 ));
            rec.qfm := Convert_Qfm_Type( Get( slices, 173 ));
            rec.qfn := Convert_Qfn_Type( Get( slices, 174 ));
            rec.qfed := Convert_Bscon_Type( Get( slices, 175 ));
            rec.qfeda := Convert_Qfeda_Type( Get( slices, 176 ));
            rec.nqfeda := Convert( slices, 177, ( -9, -8, -7, -2, -1 ) );
            rec.qfedb := Convert_Qfedb_Type( Get( slices, 178 ));
            rec.nqfedb := Convert( slices, 179, ( -9, -8, -7, -2, -1 ) );
            rec.qfedc := Convert_Qfedc_Type( Get( slices, 180 ));
            rec.nqfedc := Convert( slices, 181, ( -9, -8, -7, -2, -1 ) );
            rec.qfedd := Convert_Qfedd_Type( Get( slices, 182 ));
            rec.nqfedd := Convert( slices, 183, ( -9, -8, -7, -2, -1 ) );
            rec.qfede := Convert_Qfede_Type( Get( slices, 184 ));
            rec.nqfede := Convert( slices, 185, ( -9, -8, -7, -2, -1 ) );
            rec.qfedf := Convert_Qfedf_Type( Get( slices, 186 ));
            rec.nqfedf := Convert( slices, 187, ( -9, -8, -7, -2, -1 ) );
            rec.qfedg := Convert_Qfedg_Type( Get( slices, 188 ));
            rec.nqfedg := Convert( slices, 189, ( -9, -8, -7, -2, -1 ) );
            rec.qfedh := Convert_Qfedh_Type( Get( slices, 190 ));
            rec.nqfedh := Convert( slices, 191, ( -9, -8, -7, -2, -1 ) );
            rec.qfedi := Convert_Qfedi_Type( Get( slices, 192 ));
            rec.nqfedi := Convert( slices, 193, ( -9, -8, -7, -2, -1 ) );
            rec.qfedj := Convert_Qfedj_Type( Get( slices, 194 ));
            rec.nqfedj := Convert( slices, 195, ( -9, -8, -7, -2, -1 ) );
            rec.qfedt := Convert_Qfedt_Type( Get( slices, 196 ));
            rec.nqfedt := Convert( slices, 197, ( -9, -8, -7, -2, -1 ) );
            rec.qfedk := Convert_Qfedk_Type( Get( slices, 198 ));
            rec.nqfedk := Convert( slices, 199, ( -9, -8, -7, -2, -1 ) );
            rec.qfedl := Convert_Qfedl_Type( Get( slices, 200 ));
            rec.nqfedl := Convert( slices, 201, ( -9, -8, -7, -2, -1 ) );
            rec.qfedm := Convert_Qfedm_Type( Get( slices, 202 ));
            rec.nqfedm := Convert( slices, 203, ( -9, -8, -7, -2, -1 ) );
            rec.qfedn := Convert_Qfedn_Type( Get( slices, 204 ));
            rec.nqfedn := Convert( slices, 205, ( -9, -8, -7, -2, -1 ) );
            rec.qfedo := Convert_Qfedo_Type( Get( slices, 206 ));
            rec.nqfedo := Convert( slices, 207, ( -9, -8, -7, -2, -1 ) );
            rec.qfedp := Convert( slices, 208, ( -9, -8, -7 ) );
            rec.nqfedp := Convert( slices, 209, ( -9, -8, -7, -2, -1 ) );
            rec.qfedq := Convert_Qfedq_Type( Get( slices, 210 ));
            rec.nqfedq := Convert( slices, 211, ( -9, -8, -7, -2, -1 ) );
            rec.qfedr := Convert_Qfedr_Type( Get( slices, 212 ));
            rec.nqfedr := Convert( slices, 213, ( -9, -8, -7, -2, -1 ) );
            rec.qfeds := Convert_Hlprbm_Type( Get( slices, 214 ));
            rec.nqfeds := Convert( slices, 215, ( -9, -8, -7, -2, -1 ) );
            rec.train := Convert_Boolean_With_Missing( Get( slices, 216 ));
            rec.ntrain := Convert( slices, 217, ( -9, -8, -7, -2, -1 ) );
            rec.trplce1 := Convert_Trplce1_Type( Get( slices, 218 ));
            rec.trwhya1 := Convert_Boolean_With_Missing( Get( slices, 219 ));
            rec.trwhyb1 := Convert_Boolean_With_Missing( Get( slices, 220 ));
            rec.trwhyc1 := Convert_Boolean_With_Missing( Get( slices, 221 ));
            rec.trwhyd1 := Convert_Boolean_With_Missing( Get( slices, 222 ));
            rec.trwhye1 := Convert_Boolean_With_Missing( Get( slices, 223 ));
            rec.trq1 := Convert( slices, 224, ( -9, -8, -7 ) );
            rec.tru1 := Convert_Tru1_Type( Get( slices, 225 ));
            rec.trfeea1 := Convert_Nisjsa_Type( Get( slices, 226 ));
            rec.trfeeb1 := Convert_Yes_Or_Missing_Type( Get( slices, 227 ));
            rec.trfeec1 := Convert_Yes_Or_Missing_Type( Get( slices, 228 ));
            rec.trfeee1 := Convert_Yes_Or_Missing_Type( Get( slices, 229 ));
            rec.trfeef1 := Convert_Yes_Or_Missing_Type( Get( slices, 230 ));
            rec.trfeeg1 := Convert_Yes_Or_Missing_Type( Get( slices, 231 ));
            rec.trqlxp1 := Convert_Trqlxp1_Type( Get( slices, 232 ));
            rec.trqlac1 := Convert_Trqlac1_Type( Get( slices, 233 ));
            rec.trqlnn1 := Convert( slices, 234, ( -9, -8, -7, -2, -1 ) );
            rec.trqla1 := Convert_Yes_Or_Missing_Type( Get( slices, 235 ));
            rec.trqlb1 := Convert_Yes_Or_Missing_Type( Get( slices, 236 ));
            rec.trqlc1 := Convert_Yes_Or_Missing_Type( Get( slices, 237 ));
            rec.trqld1 := Convert_Yes_Or_Missing_Type( Get( slices, 238 ));
            rec.trqle1 := Convert_Yes_Or_Missing_Type( Get( slices, 239 ));
            rec.trqlf1 := Convert_Yes_Or_Missing_Type( Get( slices, 240 ));
            rec.trqlg1 := Convert_Yes_Or_Missing_Type( Get( slices, 241 ));
            rec.trqlh1 := Convert_Yes_Or_Missing_Type( Get( slices, 242 ));
            rec.trqli1 := Convert_Yes_Or_Missing_Type( Get( slices, 243 ));
            rec.trqlj1 := Convert( slices, 244, ( -9, -8, -7 ) );
            rec.trqlan1 := Convert( slices, 245, ( -9, -8, -7, -2, -1 ) );
            rec.trqlbn1 := Convert( slices, 246, ( -9, -8, -7, -2, -1 ) );
            rec.trqlcn1 := Convert( slices, 247, ( -9, -8, -7, -2, -1 ) );
            rec.trqldn1 := Convert( slices, 248, ( -9, -8, -7, -2, -1 ) );
            rec.trqlen1 := Convert( slices, 249, ( -9, -8, -7, -2, -1 ) );
            rec.trqlfn1 := Convert( slices, 250, ( -9, -8, -7, -2, -1 ) );
            rec.trqlgn1 := Convert( slices, 251, ( -9, -8, -7, -2, -1 ) );
            rec.trqlhn1 := Convert( slices, 252, ( -9, -8, -7, -2, -1 ) );
            rec.trqlin1 := Convert( slices, 253, ( -9, -8, -7, -2, -1 ) );
            rec.trqljn1 := Convert( slices, 254, ( -9, -8, -7, -2, -1 ) );
            rec.troqln1 := Convert( slices, 255, ( -9, -8, -7, -2, -1 ) );
            rec.troql1 := Convert_Troql1_Type( Get( slices, 256 ));
            rec.trmore1 := Convert_Boolean_With_Missing( Get( slices, 257 ));
            rec.trplce2 := Convert_Trplce1_Type( Get( slices, 258 ));
            rec.trwhya2 := Convert_Boolean_With_Missing( Get( slices, 259 ));
            rec.trwhyb2 := Convert_Boolean_With_Missing( Get( slices, 260 ));
            rec.trwhyc2 := Convert_Boolean_With_Missing( Get( slices, 261 ));
            rec.trwhyd2 := Convert_Boolean_With_Missing( Get( slices, 262 ));
            rec.trwhye2 := Convert_Boolean_With_Missing( Get( slices, 263 ));
            rec.trq2 := Convert( slices, 264, ( -9, -8, -7 ) );
            rec.tru2 := Convert_Tru1_Type( Get( slices, 265 ));
            rec.trfeea2 := Convert_Nisjsa_Type( Get( slices, 266 ));
            rec.trfeeb2 := Convert_Yes_Or_Missing_Type( Get( slices, 267 ));
            rec.trfeec2 := Convert_Yes_Or_Missing_Type( Get( slices, 268 ));
            rec.trfeee2 := Convert_Yes_Or_Missing_Type( Get( slices, 269 ));
            rec.trfeef2 := Convert_Yes_Or_Missing_Type( Get( slices, 270 ));
            rec.trfeeg2 := Convert_Yes_Or_Missing_Type( Get( slices, 271 ));
            rec.trqlxp2 := Convert_Trqlxp1_Type( Get( slices, 272 ));
            rec.trqlac2 := Convert_Trqlac1_Type( Get( slices, 273 ));
            rec.trqlnn2 := Convert( slices, 274, ( -9, -8, -7, -2, -1 ) );
            rec.trqla2 := Convert_Yes_Or_Missing_Type( Get( slices, 275 ));
            rec.trqlb2 := Convert_Yes_Or_Missing_Type( Get( slices, 276 ));
            rec.trqlc2 := Convert_Yes_Or_Missing_Type( Get( slices, 277 ));
            rec.trqld2 := Convert_Yes_Or_Missing_Type( Get( slices, 278 ));
            rec.trqle2 := Convert_Yes_Or_Missing_Type( Get( slices, 279 ));
            rec.trqlf2 := Convert_Yes_Or_Missing_Type( Get( slices, 280 ));
            rec.trqlg2 := Convert_Yes_Or_Missing_Type( Get( slices, 281 ));
            rec.trqlh2 := Convert_Yes_Or_Missing_Type( Get( slices, 282 ));
            rec.trqli2 := Convert_Yes_Or_Missing_Type( Get( slices, 283 ));
            rec.trqlj2 := Convert( slices, 284, ( -9, -8, -7 ) );
            rec.trqlan2 := Convert( slices, 285, ( -9, -8, -7, -2, -1 ) );
            rec.trqlbn2 := Convert( slices, 286, ( -9, -8, -7, -2, -1 ) );
            rec.trqlcn2 := Convert( slices, 287, ( -9, -8, -7, -2, -1 ) );
            rec.trqldn2 := Convert( slices, 288, ( -9, -8, -7, -2, -1 ) );
            rec.trqlen2 := Convert( slices, 289, ( -9, -8, -7, -2, -1 ) );
            rec.trqlfn2 := Convert( slices, 290, ( -9, -8, -7, -2, -1 ) );
            rec.trqlgn2 := Convert( slices, 291, ( -9, -8, -7, -2, -1 ) );
            rec.trqlhn2 := Convert( slices, 292, ( -9, -8, -7, -2, -1 ) );
            rec.trqlin2 := Convert( slices, 293, ( -9, -8, -7, -2, -1 ) );
            rec.trqljn2 := Convert( slices, 294, ( -9, -8, -7, -2, -1 ) );
            rec.troqln2 := Convert( slices, 295, ( -9, -8, -7, -2, -1 ) );
            rec.troql2 := Convert_Troql2_Type( Get( slices, 296 ));
            rec.trmore2 := Convert_Boolean_With_Missing( Get( slices, 297 ));
            rec.trplce3 := Convert_Trplce1_Type( Get( slices, 298 ));
            rec.trwhya3 := Convert_Boolean_With_Missing( Get( slices, 299 ));
            rec.trwhyb3 := Convert_Boolean_With_Missing( Get( slices, 300 ));
            rec.trwhyc3 := Convert_Boolean_With_Missing( Get( slices, 301 ));
            rec.trwhyd3 := Convert_Boolean_With_Missing( Get( slices, 302 ));
            rec.trwhye3 := Convert_Boolean_With_Missing( Get( slices, 303 ));
            rec.trq3 := Convert( slices, 304, ( -9, -8, -7 ) );
            rec.tru3 := Convert_Tru1_Type( Get( slices, 305 ));
            rec.trfeea3 := Convert_Nisjsa_Type( Get( slices, 306 ));
            rec.trfeeb3 := Convert_Yes_Or_Missing_Type( Get( slices, 307 ));
            rec.trfeec3 := Convert_Yes_Or_Missing_Type( Get( slices, 308 ));
            rec.trfeee3 := Convert_Yes_Or_Missing_Type( Get( slices, 309 ));
            rec.trfeef3 := Convert_Yes_Or_Missing_Type( Get( slices, 310 ));
            rec.trfeeg3 := Convert_Yes_Or_Missing_Type( Get( slices, 311 ));
            rec.trqlxp3 := Convert_Trqlxp1_Type( Get( slices, 312 ));
            rec.trqlac3 := Convert_Trqlac1_Type( Get( slices, 313 ));
            rec.trqlnn3 := Convert( slices, 314, ( -9, -8, -7, -2, -1 ) );
            rec.trqla3 := Convert_Yes_Or_Missing_Type( Get( slices, 315 ));
            rec.trqlb3 := Convert_Yes_Or_Missing_Type( Get( slices, 316 ));
            rec.trqlc3 := Convert_Yes_Or_Missing_Type( Get( slices, 317 ));
            rec.trqld3 := Convert_Yes_Or_Missing_Type( Get( slices, 318 ));
            rec.trqle3 := Convert_Yes_Or_Missing_Type( Get( slices, 319 ));
            rec.trqlf3 := Convert_Yes_Or_Missing_Type( Get( slices, 320 ));
            rec.trqlg3 := Convert_Yes_Or_Missing_Type( Get( slices, 321 ));
            rec.trqlh3 := Convert_Yes_Or_Missing_Type( Get( slices, 322 ));
            rec.trqli3 := Convert_Yes_Or_Missing_Type( Get( slices, 323 ));
            rec.trqlj3 := Convert( slices, 324, ( -9, -8, -7 ) );
            rec.trqlan3 := Convert( slices, 325, ( -9, -8, -7, -2, -1 ) );
            rec.trqlbn3 := Convert( slices, 326, ( -9, -8, -7, -2, -1 ) );
            rec.trqlcn3 := Convert( slices, 327, ( -9, -8, -7, -2, -1 ) );
            rec.trqldn3 := Convert( slices, 328, ( -9, -8, -7, -2, -1 ) );
            rec.trqlen3 := Convert( slices, 329, ( -9, -8, -7, -2, -1 ) );
            rec.trqlfn3 := Convert( slices, 330, ( -9, -8, -7, -2, -1 ) );
            rec.trqlgn3 := Convert( slices, 331, ( -9, -8, -7, -2, -1 ) );
            rec.trqlhn3 := Convert( slices, 332, ( -9, -8, -7, -2, -1 ) );
            rec.trqlin3 := Convert( slices, 333, ( -9, -8, -7, -2, -1 ) );
            rec.trqljn3 := Convert( slices, 334, ( -9, -8, -7, -2, -1 ) );
            rec.troqln3 := Convert( slices, 335, ( -9, -8, -7, -2, -1 ) );
            rec.troql3 := Convert_Troql2_Type( Get( slices, 336 ));
            rec.birhh := Convert_Aglt20_Type( Get( slices, 337 ));
            rec.mabwly := Convert_Aglt20_Type( Get( slices, 338 ));
            rec.mabwnly := Convert( slices, 339, ( -9, -8, -7 ) );
            rec.bwtpn1 := Convert( slices, 340, ( -9, -8, -7 ) );
            rec.bwtagm1 := Convert( slices, 341, ( -9, -8, -7 ) );
            rec.bwtxp1 := Convert_Boolean_With_Missing( Get( slices, 342 ));
            rec.bwtel1 := Convert_Bwtel_Type( Get( slices, 343 ));
            rec.bwtwk1 := Convert( slices, 344, ( -9, -8, -7, -2, -1 ) );
            rec.bwtkn1 := Convert_Bwtkn_Type( Get( slices, 345 ));
            rec.bwtlb1 := Convert( slices, 346, ( -9, -8, -7, -2, -1 ) );
            rec.bwtoz1 := Convert( slices, 347, ( -9, -8, -7, -2, -1 ) );
            rec.bwtgm1 := Convert( slices, 348, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.bwtg51 := Convert_Bwtg51_Type( Get( slices, 349 ));
            rec.bwtpn2 := Convert( slices, 350, ( -9, -8, -7 ) );
            rec.bwtagm2 := Convert( slices, 351, ( -9, -8, -7 ) );
            rec.bwtxp2 := Convert_Boolean_With_Missing( Get( slices, 352 ));
            rec.bwtel2 := Convert_Bwtel2_Type( Get( slices, 353 ));
            rec.bwtwk2 := Convert( slices, 354, ( -9, -8, -7, -2, -1 ) );
            rec.bwtkn2 := Convert_Bwtkn_Type( Get( slices, 355 ));
            rec.bwtlb2 := Convert( slices, 356, ( -9, -8, -7 ) );
            rec.bwtoz2 := Convert( slices, 357, ( -9, -8, -7, -2, -1 ) );
            rec.bwtgm2 := Convert( slices, 358, ( -9, -8, -7 ) );
            rec.bwtg52 := Convert_Bwtg5_Type( Get( slices, 359 ));
            rec.bwtpn3 := Convert( slices, 360, ( -9, -8, -7 ) );
            rec.bwtagm3 := Convert( slices, 361, ( -9, -8, -7 ) );
            rec.bwtxp3 := Convert_Boolean_With_Missing( Get( slices, 362 ));
            rec.bwtel3 := Convert_Bwtel2_Type( Get( slices, 363 ));
            rec.bwtwk3 := Convert( slices, 364, ( -9, -8, -7, -2, -1 ) );
            rec.bwtkn3 := Convert_Bwtkn_Type( Get( slices, 365 ));
            rec.bwtlb3 := Convert( slices, 366, ( -9, -8, -7 ) );
            rec.bwtoz3 := Convert( slices, 367, ( -9, -8, -7, -2, -1 ) );
            rec.bwtgm3 := Convert( slices, 368, ( -9, -8, -7 ) );
            rec.bwtg53 := Convert_Bwtg5_Type( Get( slices, 369 ));
            rec.ageret := Convert( slices, 370, ( -9, -8, -7, -2, -1 ) );
            rec.rework := Convert_Rework_Type( Get( slices, 371 ));
            rec.retex := Convert( slices, 372, ( -9, -8, -7, -2, -1 ) );
            rec.agexrt := Convert( slices, 373, ( -9, -8, -7, -2, -1 ) );
            rec.retfix := Convert_Retfix_Type( Get( slices, 374 ));
            rec.rtmage := Convert( slices, 375, ( -9, -8, -7, -2, -1 ) );
            rec.rtrllt := Convert_Rtrllt_Type( Get( slices, 376 ));
            rec.rtrlya := Convert_Rtrlya_Type( Get( slices, 377 ));
            rec.rtrlyb := Convert_Rtrlyb_Type( Get( slices, 378 ));
            rec.rtrlyc := Convert_Rtrlyc_Type( Get( slices, 379 ));
            rec.rtrlyd := Convert_Rtrlyd_Type( Get( slices, 380 ));
            rec.rtrlye := Convert_Rtrlye_Type( Get( slices, 381 ));
            rec.rtrlyf := Convert_Rtrlyf_Type( Get( slices, 382 ));
            rec.rtrlyg := Convert_Rtrlyg_Type( Get( slices, 383 ));
            rec.rtrlyh := Convert_Rtrlyh_Type( Get( slices, 384 ));
            rec.rtrlyi := Convert_Rtrlyi_Type( Get( slices, 385 ));
            rec.rtrlyj := Convert_Rtrlyj_Type( Get( slices, 386 ));
            rec.rtrlyk := Convert_Rtrlyk_Type( Get( slices, 387 ));
            rec.rtrlyl := Convert_Rtrlyl_Type( Get( slices, 388 ));
            rec.rtrlym := Convert_Rtrlym_Type( Get( slices, 389 ));
            rec.yrtrly := Convert_Yrtrly_Type( Get( slices, 390 ));
            rec.rtlata := Convert_Rtlata_Type( Get( slices, 391 ));
            rec.rtlatb := Convert_Rtlatb_Type( Get( slices, 392 ));
            rec.rtlatc := Convert_Rtlatc_Type( Get( slices, 393 ));
            rec.rtlatd := Convert_Rtlatd_Type( Get( slices, 394 ));
            rec.rtlate := Convert_Rtlate_Type( Get( slices, 395 ));
            rec.rtlatf := Convert_Rtlatf_Type( Get( slices, 396 ));
            rec.rtlatg := Convert_Rtlatg_Type( Get( slices, 397 ));
            rec.rtlath := Convert_Rtlath_Type( Get( slices, 398 ));
            rec.rtlati := Convert_Rtlati_Type( Get( slices, 399 ));
            rec.rtlatj := Convert_Rtlatj_Type( Get( slices, 400 ));
            rec.yrtlat := Convert_Yrtlat_Type( Get( slices, 401 ));
            rec.rtvol := Convert_Rtvol_Type( Get( slices, 402 ));
            rec.rtsat := Convert_Rtsat_Type( Get( slices, 403 ));
            rec.rtcomp := Convert_Rtcomp_Type( Get( slices, 404 ));
            rec.rtpro1 := Convert_Rtpro1_Type( Get( slices, 405 ));
            rec.rtpro2 := Convert_Rtpro1_Type( Get( slices, 406 ));
            rec.rtpro3 := Convert_Rtpro1_Type( Get( slices, 407 ));
            rec.rtpro4 := Convert_Rtpro1_Type( Get( slices, 408 ));
            rec.rtpro5 := Convert_Rtpro1_Type( Get( slices, 409 ));
            rec.rtpro6 := Convert_Rtpro1_Type( Get( slices, 410 ));
            rec.rtcon1 := Convert_Rtcon1_Type( Get( slices, 411 ));
            rec.rtcon2 := Convert_Rtcon1_Type( Get( slices, 412 ));
            rec.rtcon3 := Convert_Rtcon1_Type( Get( slices, 413 ));
            rec.rtcon4 := Convert_Rtcon1_Type( Get( slices, 414 ));
            rec.natida := Convert_Yes_Or_Missing_Type( Get( slices, 415 ));
            rec.natidb := Convert_Yes_Or_Missing_Type( Get( slices, 416 ));
            rec.natidc := Convert_Yes_Or_Missing_Type( Get( slices, 417 ));
            rec.natidd := Convert_Yes_Or_Missing_Type( Get( slices, 418 ));
            rec.natide := Convert_Yes_Or_Missing_Type( Get( slices, 419 ));
            rec.natidf := Convert_Yes_Or_Missing_Type( Get( slices, 420 ));
            rec.natidg := Convert_Yes_Or_Missing_Type( Get( slices, 421 ));
            rec.natidh := Convert_Natidh_Type( Get( slices, 422 ));
            rec.natidi := Convert_Jbwkhrh_Type( Get( slices, 423 ));
            rec.natidmn := Convert_Natidmn_Type( Get( slices, 424 ));
            rec.maborn := Convert_Maborn_Type( Get( slices, 425 ));
            rec.paborn := Convert_Maborn_Type( Get( slices, 426 ));
            rec.lcmarm := Convert_Lcmarm_Type( Get( slices, 427 ));
            rec.lcmary4 := Convert( slices, 428, ( -8, -7, -1 ) );
            rec.lcmcoh := Convert_Lcmcoh_Type( Get( slices, 429 ));
            rec.lcmcbm := Convert_Lcmcbm_Type( Get( slices, 430 ));
            rec.lcmcby4 := Convert( slices, 431, ( -8, -7, -1 ) );
            rec.mpno := Convert( slices, 432, ( -9, -8, -7 ) );
            rec.lcmspm := Convert_Lcmspm_Type( Get( slices, 433 ));
            rec.lcmspy4 := Convert( slices, 434, ( -9, -8, -7, -1 ) );
            rec.lncoh := Convert( slices, 435, ( -9, -8, -7, -2, -1 ) );
            rec.ladopt := Convert_Aidpl1_Type( Get( slices, 436 ));
            rec.lnadopt := Convert( slices, 437, ( -8, -7 ) );
            rec.cbage := Convert_Cbage_Type( Get( slices, 438 ));
            rec.lchmor := Convert_Lchmor_Type( Get( slices, 439 ));
            rec.lchmorn := Convert( slices, 440, ( -9, -8, -7, -2, -1 ) );
            rec.ivla := Convert_Ivla_Type( Get( slices, 441 ));
            rec.ivlb := Convert_Ivlb_Type( Get( slices, 442 ));
            rec.ivlc := Convert_Ivlc_Type( Get( slices, 443 ));
            rec.ivld := Convert_Ivdd_Type( Get( slices, 444 ));
            rec.ivle := Convert_Ivee_Type( Get( slices, 445 ));
            rec.ledendm := Convert_Cjsbgm_Type( Get( slices, 446 ));
            rec.ledeny4 := Convert( slices, 447, ( -9, -8, -7, -2, -1 ) );
            rec.lednow := Convert_Lednow_Type( Get( slices, 448 ));
            rec.ivda := Convert_Ivda_Type( Get( slices, 449 ));
            rec.ivdb := Convert_Ivdb_Type( Get( slices, 450 ));
            rec.ivdc := Convert_Ivdc_Type( Get( slices, 451 ));
            rec.ivdd := Convert_Ivdd_Type( Get( slices, 452 ));
            rec.ivde := Convert_Yes_Or_Missing_Type( Get( slices, 453 ));
            rec.hldsbl := Convert_Bscon_Type( Get( slices, 454 ));
            rec.hlstat := Convert_Hlstat_Type( Get( slices, 455 ));
            rec.hlprb := Convert( slices, 456, ( -9, -8, -7, -2, -1 ) );
            rec.hlprba := Convert_Hlprba_Type( Get( slices, 457 ));
            rec.hlprbb := Convert_Hlprbb_Type( Get( slices, 458 ));
            rec.hlprbc := Convert_Hlprbc_Type( Get( slices, 459 ));
            rec.hlprbd := Convert_Hlprbd_Type( Get( slices, 460 ));
            rec.hlprbe := Convert_Hlprbe_Type( Get( slices, 461 ));
            rec.hlprbf := Convert_Hlprbf_Type( Get( slices, 462 ));
            rec.hlprbg := Convert_Hlprbg_Type( Get( slices, 463 ));
            rec.hlprbh := Convert_Hlprbh_Type( Get( slices, 464 ));
            rec.hlprbi := Convert_Hlprbi_Type( Get( slices, 465 ));
            rec.hlprbj := Convert_Hlprbj_Type( Get( slices, 466 ));
            rec.hlprbk := Convert_Hlprbk_Type( Get( slices, 467 ));
            rec.hlprbl := Convert_Hlprbl_Type( Get( slices, 468 ));
            rec.hlprbn := Convert_Hlprbn_Type( Get( slices, 469 ));
            rec.hlprbo := Convert_Hlprbo_Type( Get( slices, 470 ));
            rec.hlprbm := Convert_Hlprbm_Type( Get( slices, 471 ));
            rec.hlprxa := Convert_Bscon_Type( Get( slices, 472 ));
            rec.hlprxb := Convert_Bscon_Type( Get( slices, 473 ));
            rec.hlprxc := Convert_Bscon_Type( Get( slices, 474 ));
            rec.hlprxd := Convert_Bscon_Type( Get( slices, 475 ));
            rec.hlprxe := Convert_Bscon_Type( Get( slices, 476 ));
            rec.hlprxf := Convert_Bscon_Type( Get( slices, 477 ));
            rec.hlprxg := Convert_Bscon_Type( Get( slices, 478 ));
            rec.hlprxh := Convert_Bscon_Type( Get( slices, 479 ));
            rec.hlprxi := Convert_Bscon_Type( Get( slices, 480 ));
            rec.hlprxj := Convert_Bscon_Type( Get( slices, 481 ));
            rec.hlprxk := Convert_Bscon_Type( Get( slices, 482 ));
            rec.hlprxl := Convert_Bscon_Type( Get( slices, 483 ));
            rec.hlprxm := Convert_Bscon_Type( Get( slices, 484 ));
            rec.hlprxn := Convert_Bscon_Type( Get( slices, 485 ));
            rec.hlprxo := Convert_Bscon_Type( Get( slices, 486 ));
            rec.hllt := Convert_Bscon_Type( Get( slices, 487 ));
            rec.hllta := Convert_Hllta_Type( Get( slices, 488 ));
            rec.hlltb := Convert_Hlltb_Type( Get( slices, 489 ));
            rec.hlltc := Convert_Hlltc_Type( Get( slices, 490 ));
            rec.hlltd := Convert_Hlltd_Type( Get( slices, 491 ));
            rec.hllte := Convert_Hllte_Type( Get( slices, 492 ));
            rec.hlltw := Convert_Bscon_Type( Get( slices, 493 ));
            rec.hlendw := Convert_Hlendw_Type( Get( slices, 494 ));
            rec.hlltwa := Convert_Hlltwa_Type( Get( slices, 495 ));
            rec.hlpain := Convert_Bscon_Type( Get( slices, 496 ));
            rec.hltrpn := Convert_Hltrpn_Type( Get( slices, 497 ));
            rec.hlavpn := Convert_Hlavpn_Type( Get( slices, 498 ));
            rec.hlwtpn := Convert_Hlavpn_Type( Get( slices, 499 ));
            rec.hliv65 := Convert_Hliv65_Type( Get( slices, 500 ));
            rec.adla := Convert_Adla_Type( Get( slices, 501 ));
            rec.adlad := Convert_Adlad_Type( Get( slices, 502 ));
            rec.adlb := Convert_Adla_Type( Get( slices, 503 ));
            rec.adlbd := Convert_Adlad_Type( Get( slices, 504 ));
            rec.adlc := Convert_Adla_Type( Get( slices, 505 ));
            rec.adlcd := Convert_Adlad_Type( Get( slices, 506 ));
            rec.adld := Convert_Adla_Type( Get( slices, 507 ));
            rec.adldd := Convert_Adlad_Type( Get( slices, 508 ));
            rec.adle := Convert_Adla_Type( Get( slices, 509 ));
            rec.adled := Convert_Adlad_Type( Get( slices, 510 ));
            rec.adlf := Convert_Adla_Type( Get( slices, 511 ));
            rec.adlfd := Convert_Adlad_Type( Get( slices, 512 ));
            rec.rtrhm := Convert_Rtrhm_Type( Get( slices, 513 ));
            rec.lvlong := Convert( slices, 514, ( -9, -8, -7, -2, -1 ) );
            rec.hl2gp := Convert_Hl2gp_Type( Get( slices, 515 ));
            rec.hl2hop := Convert( slices, 516, ( -9, -8, -7, -2, -1 ) );
            rec.xdts := Convert_Bscon_Type( Get( slices, 517 ));
            rec.nxdts := Convert_Nxdts_Type( Get( slices, 518 ));
            rec.hosp := Convert_Hlsv_Type( Get( slices, 519 ));
            rec.hospd := Convert( slices, 520, ( -9, -8, -7, -2, -1 ) );
            rec.hospch := Convert_Hospch_Type( Get( slices, 521 ));
            rec.hospnhs := Convert_Hospnhs_Type( Get( slices, 522 ));
            rec.hlcvr := Convert_Hlcvr_Type( Get( slices, 523 ));
            rec.hlcvrh := Convert_Hlcvrh_Type( Get( slices, 524 ));
            rec.hlcvrl := Convert( slices, 525, ( -9, -8, -7, -2, -1 ) );
            rec.hlsv := Convert_Hlsv_Type( Get( slices, 526 ));
            rec.hlsva := Convert_Hlsva_Type( Get( slices, 527 ));
            rec.hlsvan := Convert_Hlsvan_Type( Get( slices, 528 ));
            rec.hlsvaf := Convert_Hlsvaf_Type( Get( slices, 529 ));
            rec.hlsvb := Convert_Hlsvb_Type( Get( slices, 530 ));
            rec.hlsvbn := Convert_Hlsvan_Type( Get( slices, 531 ));
            rec.hlsvbf := Convert_Hlsvaf_Type( Get( slices, 532 ));
            rec.hlsvc := Convert_Hlsvc_Type( Get( slices, 533 ));
            rec.hlsvcn := Convert_Hlsvan_Type( Get( slices, 534 ));
            rec.hlsvcf := Convert_Hlsvaf_Type( Get( slices, 535 ));
            rec.hlsvd := Convert_Hlsvd_Type( Get( slices, 536 ));
            rec.hlsvdn := Convert_Hlsvan_Type( Get( slices, 537 ));
            rec.hlsvdf := Convert_Hlsvaf_Type( Get( slices, 538 ));
            rec.hlsve := Convert_Hlsve_Type( Get( slices, 539 ));
            rec.hlsven := Convert_Hlsvan_Type( Get( slices, 540 ));
            rec.hlsvef := Convert_Hlsvaf_Type( Get( slices, 541 ));
            rec.hlsvf := Convert_Hlsvf_Type( Get( slices, 542 ));
            rec.hlsvfn := Convert_Hlsvan_Type( Get( slices, 543 ));
            rec.hlsvff := Convert_Hlsvaf_Type( Get( slices, 544 ));
            rec.hlsvg := Convert_Hlsvg_Type( Get( slices, 545 ));
            rec.hlsvgn := Convert_Hlsvan_Type( Get( slices, 546 ));
            rec.hlsvgf := Convert_Hlsvaf_Type( Get( slices, 547 ));
            rec.hlsvh := Convert_Hlsvh_Type( Get( slices, 548 ));
            rec.hlsvhn := Convert_Hlsvan_Type( Get( slices, 549 ));
            rec.hlsvhf := Convert_Hlsvaf_Type( Get( slices, 550 ));
            rec.hlsvi := Convert_Hlsvi_Type( Get( slices, 551 ));
            rec.hlsvin := Convert_Hlsvan_Type( Get( slices, 552 ));
            rec.hlsvif := Convert_Hlsvaf_Type( Get( slices, 553 ));
            rec.hlsvj := Convert_Hlsvj_Type( Get( slices, 554 ));
            rec.hlsvjn := Convert_Hlsvan_Type( Get( slices, 555 ));
            rec.hlsvjf := Convert_Hlsvaf_Type( Get( slices, 556 ));
            rec.hlsvk := Convert_Hlsvk_Type( Get( slices, 557 ));
            rec.hlsvkn := Convert_Hlsvan_Type( Get( slices, 558 ));
            rec.hlsvkf := Convert_Hlsvaf_Type( Get( slices, 559 ));
            rec.hlsvl := Convert_Hlsvl_Type( Get( slices, 560 ));
            rec.hlsvln := Convert_Hlsvln_Type( Get( slices, 561 ));
            rec.hlsvlf := Convert_Hlsvlf_Type( Get( slices, 562 ));
            rec.hlsvm := Convert_Hlsvm_Type( Get( slices, 563 ));
            rec.hlsvmn := Convert_Hlsvln_Type( Get( slices, 564 ));
            rec.hlsvmf := Convert_Hlsvlf_Type( Get( slices, 565 ));
            rec.hlck := Convert_Aidpl1_Type( Get( slices, 566 ));
            rec.hlcka := Convert_Hlcka_Type( Get( slices, 567 ));
            rec.hlckan := Convert_Hlckan_Type( Get( slices, 568 ));
            rec.hlckb := Convert_Hlcka_Type( Get( slices, 569 ));
            rec.hlckbn := Convert_Hlckan_Type( Get( slices, 570 ));
            rec.hlckc := Convert_Hlcka_Type( Get( slices, 571 ));
            rec.hlckcn := Convert_Hlckan_Type( Get( slices, 572 ));
            rec.hlckd := Convert_Hlcka_Type( Get( slices, 573 ));
            rec.hlckdn := Convert_Hlckan_Type( Get( slices, 574 ));
            rec.hlcke := Convert_Hlcka_Type( Get( slices, 575 ));
            rec.hlcken := Convert_Hlckan_Type( Get( slices, 576 ));
            rec.hlckf := Convert_Hlcka_Type( Get( slices, 577 ));
            rec.hlckfn := Convert_Hlckan_Type( Get( slices, 578 ));
            rec.hlckg := Convert_Hlcka_Type( Get( slices, 579 ));
            rec.hlckgn := Convert_Hlckan_Type( Get( slices, 580 ));
            rec.hlckh := Convert_Hlcka_Type( Get( slices, 581 ));
            rec.hlckhn := Convert_Hlckan_Type( Get( slices, 582 ));
            rec.hlcki := Convert_Hlcki_Type( Get( slices, 583 ));
            rec.hlckin := Convert_Hlckin_Type( Get( slices, 584 ));
            rec.smoker := Convert_Bscon_Type( Get( slices, 585 ));
            rec.ncigs := Convert( slices, 586, ( -9, -8, -7, -2, -1 ) );
            rec.aidhh := Convert_Aidhh_Type( Get( slices, 587 ));
            rec.aidhua := Convert( slices, 588, ( -9, -8, -7, -1 ) );
            rec.aidhub := Convert( slices, 589, ( -9, -8, -7 ) );
            rec.aidhuc := Convert( slices, 590, ( -9, -8, -7 ) );
            rec.aidxhh := Convert_Aidxhh_Type( Get( slices, 591 ));
            rec.naidxhh := Convert_Naidxhh_Type( Get( slices, 592 ));
            rec.aidhu1 := Convert_Aidhu1_Type( Get( slices, 593 ));
            rec.aidhu2 := Convert_Aidhu2_Type( Get( slices, 594 ));
            rec.aidhrs := Convert_Aidhrs_Type( Get( slices, 595 ));
            rec.ivma := Convert_Ivda_Type( Get( slices, 596 ));
            rec.ivmb := Convert_Ivdb_Type( Get( slices, 597 ));
            rec.ivmc := Convert_Ivec_Type( Get( slices, 598 ));
            rec.ivmd := Convert_Ivdd_Type( Get( slices, 599 ));
            rec.ivme := Convert_Ivee_Type( Get( slices, 600 ));
            rec.jbhas := Convert_Frnow_Type( Get( slices, 601 ));
            rec.jboff := Convert_Jboff_Type( Get( slices, 602 ));
            rec.jboffy := Convert_Jboffy_Type( Get( slices, 603 ));
            rec.jbterm1 := Convert_Jbterm1_Type( Get( slices, 604 ));
            rec.jbterm2 := Convert_Jbterm2_Type( Get( slices, 605 ));
            rec.jbsoc := Convert( slices, 606, ( -9, -8, -2, -1 ) );
            rec.jbsoc00 := Convert( slices, 607, ( -9, -8, -2, -1 ) );
            rec.jbsic := Convert( slices, 608, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.jbsic92 := Convert( slices, 609, ( -9, -8, -7, -2, -1 ) );
            rec.jbsemp := Convert_Jbsemp_Type( Get( slices, 610 ));
            rec.jbmngr := Convert_Jbmngr_Type( Get( slices, 611 ));
            rec.jbsect := Convert_Jbsect_Type( Get( slices, 612 ));
            rec.jbsize := Convert_Jbsize_Type( Get( slices, 613 ));
            rec.jbhrs := Convert( slices, 614, ( -9, -8, -7, -2, -1 ) );
            rec.jbot := Convert( slices, 615, ( -9, -8, -7, -2, -1 ) );
            rec.jbotpd := Convert( slices, 616, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbhrlk := Convert_Jbhrlk_Type( Get( slices, 617 ));
            rec.jbpl := Convert_Jbpl_Type( Get( slices, 618 ));
            rec.jbttwt := Convert( slices, 619, ( -9, -8, -7, -3, -2, -1 ) );
            rec.jbttwm := Convert_Jbttwm_Type( Get( slices, 620 ));
            rec.jbsat2 := Convert( slices, 621, ( -9, -8, -7, -2, -1 ) );
            rec.jbsat4 := Convert_Jbsat4_Type( Get( slices, 622 ));
            rec.jbsat6 := Convert_Jbsat4_Type( Get( slices, 623 ));
            rec.jbsat7 := Convert_Jbsat_Type( Get( slices, 624 ));
            rec.jbsat := Convert_Jbsat_Type( Get( slices, 625 ));
            rec.paygl := Convert( slices, 626, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.paygw := Convert( slices, 627, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.paynl := Convert( slices, 628, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.paynw := Convert( slices, 629, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.pytc := Convert_Pytc_Type( Get( slices, 630 ));
            rec.pywftc := Convert( slices, 631, ( -9, -8, -7, -2, -1 ) );
            rec.pywftcw := Convert( slices, 632, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.pydptc := Convert( slices, 633, ( -9, -8, -7, -2, -1 ) );
            rec.pydptcw := Convert( slices, 634, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.payslp := Convert_Payslp_Type( Get( slices, 635 ));
            rec.payusl := Convert_Aidpl1_Type( Get( slices, 636 ));
            rec.payu := Convert( slices, 637, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.payuw := Convert( slices, 638, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.payug := Convert_Paylyg_Type( Get( slices, 639 ));
            rec.paydf1 := Convert_Paydf1_Type( Get( slices, 640 ));
            rec.paydf2 := Convert_Paydf2_Type( Get( slices, 641 ));
            rec.paydf3 := Convert_Paydf3_Type( Get( slices, 642 ));
            rec.paydf4 := Convert_Paydf4_Type( Get( slices, 643 ));
            rec.paydf5 := Convert_Paydf5_Type( Get( slices, 644 ));
            rec.paydf6 := Convert_Paydf6_Type( Get( slices, 645 ));
            rec.paydf7 := Convert_Paydf7_Type( Get( slices, 646 ));
            rec.paydf8 := Convert_Paydf8_Type( Get( slices, 647 ));
            rec.paydf9 := Convert_Paydf9_Type( Get( slices, 648 ));
            rec.paytyp := Convert_Paytyp_Type( Get( slices, 649 ));
            rec.ovtpay := Convert_Bpar16_Type( Get( slices, 650 ));
            rec.extrate := Convert( slices, 651, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.extrest := Convert_Basrest_Type( Get( slices, 652 ));
            rec.basrate := Convert( slices, 653, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.basrest := Convert_Basrest_Type( Get( slices, 654 ));
            rec.ovtrate := Convert( slices, 655, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.ovtrest := Convert_Basrest_Type( Get( slices, 656 ));
            rec.jbperfp := Convert_Coh1mr_Type( Get( slices, 657 ));
            rec.jbonus := Convert_Aidpl1_Type( Get( slices, 658 ));
            rec.jbonam := Convert( slices, 659, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbong := Convert_Jbong_Type( Get( slices, 660 ));
            rec.jbrise := Convert_Aidpl1_Type( Get( slices, 661 ));
            rec.tujbpl := Convert_Aidpl1_Type( Get( slices, 662 ));
            rec.tuin1 := Convert_Aidpl1_Type( Get( slices, 663 ));
            rec.jbopps := Convert_Aidpl1_Type( Get( slices, 664 ));
            rec.jbtime := Convert_Jbtime_Type( Get( slices, 665 ));
            rec.jbwkhra := Convert_Yes_Or_Missing_Type( Get( slices, 666 ));
            rec.jbwkhrb := Convert_Yes_Or_Missing_Type( Get( slices, 667 ));
            rec.jbwkhrc := Convert_Yes_Or_Missing_Type( Get( slices, 668 ));
            rec.jbwkhrd := Convert_Yes_Or_Missing_Type( Get( slices, 669 ));
            rec.jbwkhre := Convert_Yes_Or_Missing_Type( Get( slices, 670 ));
            rec.jbwkhrf := Convert_Yes_Or_Missing_Type( Get( slices, 671 ));
            rec.jbwkhrg := Convert_Yes_Or_Missing_Type( Get( slices, 672 ));
            rec.jbwkhrh := Convert_Jbwkhrh_Type( Get( slices, 673 ));
            rec.jbpen := Convert_Aidpl1_Type( Get( slices, 674 ));
            rec.jbpenm := Convert_Aidpl1_Type( Get( slices, 675 ));
            rec.jbbgd := Convert( slices, 676, ( -9, -8, -7, -2, -1 ) );
            rec.jbbgm := Convert_Cjsbgm_Type( Get( slices, 677 ));
            rec.jbbgy4 := Convert( slices, 678, ( -9, -8, -7, -2, -1 ) );
            rec.jbbgly := Convert_Jbbgly_Type( Get( slices, 679 ));
            rec.pays := Convert( slices, 680, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.paysw := Convert( slices, 681, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.paysg := Convert_Paylyg_Type( Get( slices, 682 ));
            rec.payly := Convert( slices, 683, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.paylyw := Convert( slices, 684, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.paylyg := Convert_Paylyg_Type( Get( slices, 685 ));
            rec.jsboss := Convert_Jsboss_Type( Get( slices, 686 ));
            rec.jssize := Convert_Jssize_Type( Get( slices, 687 ));
            rec.jshrs := Convert( slices, 688, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jshrlk := Convert_Jbhrlk_Type( Get( slices, 689 ));
            rec.jstime := Convert_Jstime_Type( Get( slices, 690 ));
            rec.jstypeb := Convert_Jstypeb_Type( Get( slices, 691 ));
            rec.jsaccs := Convert_Jsaccs_Type( Get( slices, 692 ));
            rec.jspart := Convert_Jspart_Type( Get( slices, 693 ));
            rec.jsprbm := Convert_Cjsbgm_Type( Get( slices, 694 ));
            rec.jsprby4 := Convert( slices, 695, ( -9, -8, -7, -2, -1 ) );
            rec.jsprem := Convert_Cjsbgm_Type( Get( slices, 696 ));
            rec.jsprey4 := Convert( slices, 697, ( -9, -8, -7, -2, -1 ) );
            rec.jsprf := Convert( slices, 698, ( -9, -8, -7, -3, -2, -1 ) );
            rec.jsprls := Convert_Jsprls_Type( Get( slices, 699 ));
            rec.jsprtx := Convert_Jsprtx_Type( Get( slices, 700 ));
            rec.jsprni := Convert_Jsprni_Type( Get( slices, 701 ));
            rec.jspayu := Convert( slices, 702, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jspayw := Convert( slices, 703, ( -9.0, -8.0, -7.0, -4.0, -2.0, -1.0 ) );
            rec.jspytx := Convert_Jspytx_Type( Get( slices, 704 ));
            rec.jspyni := Convert_Jspyni_Type( Get( slices, 705 ));
            rec.jspl := Convert_Jspl_Type( Get( slices, 706 ));
            rec.jsttwt := Convert( slices, 707, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.jsttwm := Convert_Jsttwm_Type( Get( slices, 708 ));
            rec.jssat1 := Convert_Jssat1_Type( Get( slices, 709 ));
            rec.jssat2 := Convert_Jbsat_Type( Get( slices, 710 ));
            rec.jssat4 := Convert_Jbsat_Type( Get( slices, 711 ));
            rec.jssat5 := Convert_Jbsat_Type( Get( slices, 712 ));
            rec.jssat := Convert_Jbsat_Type( Get( slices, 713 ));
            rec.jsbgd := Convert( slices, 714, ( -9, -8, -7, -2, -1 ) );
            rec.jsbgm := Convert_Cjsbgm_Type( Get( slices, 715 ));
            rec.jsbgy4 := Convert( slices, 716, ( -9, -8, -7, -2, -1 ) );
            rec.jblkcha := Convert_Jblkcha_Type( Get( slices, 717 ));
            rec.jbxpcha := Convert_Jblkcha_Type( Get( slices, 718 ));
            rec.jblkchb := Convert_Boolean_With_Missing( Get( slices, 719 ));
            rec.jbxpchb := Convert_Boolean_With_Missing( Get( slices, 720 ));
            rec.jblkchc := Convert_Boolean_With_Missing( Get( slices, 721 ));
            rec.jbxpchc := Convert_Boolean_With_Missing( Get( slices, 722 ));
            rec.jblkchd := Convert_Boolean_With_Missing( Get( slices, 723 ));
            rec.jbxpchd := Convert_Boolean_With_Missing( Get( slices, 724 ));
            rec.jblkche := Convert_Boolean_With_Missing( Get( slices, 725 ));
            rec.jbxpche := Convert_Boolean_With_Missing( Get( slices, 726 ));
            rec.rach12 := Convert_Hhch12_Type( Get( slices, 727 ));
            rec.jbchc1 := Convert_Jbchc1_Type( Get( slices, 728 ));
            rec.jbchc2 := Convert_Jbchc2_Type( Get( slices, 729 ));
            rec.jbchc3 := Convert_Jbchc3_Type( Get( slices, 730 ));
            rec.xpchcf := Convert_Xpchcf_Type( Get( slices, 731 ));
            rec.xpchc := Convert( slices, 732, ( -9, -8, -7, -2, -1 ) );
            rec.huxpch := Convert_Huxpch_Type( Get( slices, 733 ));
            rec.hunurs := Convert_Hunurs_Type( Get( slices, 734 ));
            rec.julk1 := Convert_Aidpl1_Type( Get( slices, 735 ));
            rec.julk4 := Convert_Bscon_Type( Get( slices, 736 ));
            rec.julka := Convert_Boolean_With_Missing( Get( slices, 737 ));
            rec.julkb := Convert_Boolean_With_Missing( Get( slices, 738 ));
            rec.julkc := Convert_Boolean_With_Missing( Get( slices, 739 ));
            rec.julkd := Convert_Boolean_With_Missing( Get( slices, 740 ));
            rec.julke := Convert_Boolean_With_Missing( Get( slices, 741 ));
            rec.julkjb := Convert_Aidpl1_Type( Get( slices, 742 ));
            rec.jubgn := Convert_Boolean_With_Missing( Get( slices, 743 ));
            rec.juspec := Convert_Juspec_Type( Get( slices, 744 ));
            rec.jusoc := Convert( slices, 745, ( -9, -8, -7, -2, -1 ) );
            rec.jusoc00 := Convert( slices, 746, ( -9, -8, -7, -2, -1 ) );
            rec.juhrsx := Convert( slices, 747, ( -9, -8, -7, -2, -1 ) );
            rec.jupayx := Convert( slices, 748, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jupayl := Convert( slices, 749, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.juhrsl := Convert( slices, 750, ( -9, -8, -7, -2, -1 ) );
            rec.eprosh := Convert_Cohxpm2_Type( Get( slices, 751 ));
            rec.eaage := Convert_Eaage_Type( Get( slices, 752 ));
            rec.jbub := Convert_Bscon_Type( Get( slices, 753 ));
            rec.jbuby := Convert_Jbuby_Type( Get( slices, 754 ));
            rec.j2has := Convert_Aidpl1_Type( Get( slices, 755 ));
            rec.j2soc := Convert( slices, 756, ( -9, -8, -7, -2, -1 ) );
            rec.j2soc00 := Convert( slices, 757, ( -9, -8, -7, -2, -1 ) );
            rec.j2semp := Convert_J2semp_Type( Get( slices, 758 ));
            rec.j2hrs := Convert( slices, 759, ( -9, -8, -7, -2, -1 ) );
            rec.j2pay := Convert( slices, 760, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ivea := Convert_Ivda_Type( Get( slices, 761 ));
            rec.iveb := Convert_Ivdb_Type( Get( slices, 762 ));
            rec.ivec := Convert_Ivec_Type( Get( slices, 763 ));
            rec.ived := Convert_Ivdd_Type( Get( slices, 764 ));
            rec.ivee := Convert_Ivee_Type( Get( slices, 765 ));
            rec.nemst := Convert_Nemst_Type( Get( slices, 766 ));
            rec.cjsbgd := Convert( slices, 767, ( -9, -8, -7, -2, -1 ) );
            rec.cjsbgm := Convert_Cjsbgm_Type( Get( slices, 768 ));
            rec.cjsbgy4 := Convert( slices, 769, ( -9, -8, -7, -2, -1 ) );
            rec.cjsbly := Convert_Cjsbly_Type( Get( slices, 770 ));
            rec.njbs := Convert( slices, 771, ( -9, -8, -7 ) );
            rec.jbhad := Convert_Aidpl1_Type( Get( slices, 772 ));
            rec.jlend4 := Convert( slices, 773, ( -9, -8, -7, -2, -1 ) );
            rec.jlsoc := Convert( slices, 774, ( -9, -8, -7, -2, -1 ) );
            rec.jlsoc00 := Convert( slices, 775, ( -9, -8, -7, -2, -1 ) );
            rec.jlsic := Convert( slices, 776, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jlsic92 := Convert( slices, 777, ( -9, -8, -7 ) );
            rec.jlsemp := Convert_J2semp_Type( Get( slices, 778 ));
            rec.jlboss := Convert_Aidpl1_Type( Get( slices, 779 ));
            rec.jlmngr := Convert_Jlmngr_Type( Get( slices, 780 ));
            rec.jlsize := Convert_Jlsize_Type( Get( slices, 781 ));
            rec.ivja := Convert_Ivda_Type( Get( slices, 782 ));
            rec.ivjb := Convert_Ivdb_Type( Get( slices, 783 ));
            rec.ivjc := Convert_Ivec_Type( Get( slices, 784 ));
            rec.ivjd := Convert_Ivdd_Type( Get( slices, 785 ));
            rec.ivje := Convert_Ivee_Type( Get( slices, 786 ));
            rec.oppola := Convert_Oppola_Type( Get( slices, 787 ));
            rec.oppolb := Convert_Oppola_Type( Get( slices, 788 ));
            rec.oppolc := Convert_Oppola_Type( Get( slices, 789 ));
            rec.oppold := Convert_Oppola_Type( Get( slices, 790 ));
            rec.vote1 := Convert_Aidpl1_Type( Get( slices, 791 ));
            rec.vote2 := Convert_Aidpl1_Type( Get( slices, 792 ));
            rec.vote3 := Convert_Vote3_Type( Get( slices, 793 ));
            rec.vote4 := Convert_Vote3_Type( Get( slices, 794 ));
            rec.vote5 := Convert_Vote5_Type( Get( slices, 795 ));
            rec.vote7 := Convert_Vote7_Type( Get( slices, 796 ));
            rec.vote8 := Convert_Vote8_Type( Get( slices, 797 ));
            rec.vote6 := Convert_Vote6_Type( Get( slices, 798 ));
            rec.orgm := Convert_Aidpl1_Type( Get( slices, 799 ));
            rec.orgma := Convert_Orgma_Type( Get( slices, 800 ));
            rec.orgaa := Convert_Orgaa_Type( Get( slices, 801 ));
            rec.orgmb := Convert_Orgmb_Type( Get( slices, 802 ));
            rec.orgab := Convert_Orgab_Type( Get( slices, 803 ));
            rec.orgmc := Convert_Orgmc_Type( Get( slices, 804 ));
            rec.orgac := Convert_Orgac_Type( Get( slices, 805 ));
            rec.orgmd := Convert_Orgmd_Type( Get( slices, 806 ));
            rec.orgad := Convert_Orgad_Type( Get( slices, 807 ));
            rec.orgme := Convert_Orgme_Type( Get( slices, 808 ));
            rec.orgae := Convert_Orgae_Type( Get( slices, 809 ));
            rec.orgmf := Convert_Orgmf_Type( Get( slices, 810 ));
            rec.orgaf := Convert_Orgaf_Type( Get( slices, 811 ));
            rec.orgmg := Convert_Orgmg_Type( Get( slices, 812 ));
            rec.orgag := Convert_Orgag_Type( Get( slices, 813 ));
            rec.orgmh := Convert_Orgmh_Type( Get( slices, 814 ));
            rec.orgah := Convert_Orgah_Type( Get( slices, 815 ));
            rec.orgmi := Convert_Orgmi_Type( Get( slices, 816 ));
            rec.orgai := Convert_Orgai_Type( Get( slices, 817 ));
            rec.orgmj := Convert_Orgmj_Type( Get( slices, 818 ));
            rec.orgaj := Convert_Orgaj_Type( Get( slices, 819 ));
            rec.orgmk := Convert_Orgmk_Type( Get( slices, 820 ));
            rec.orgak := Convert_Orgak_Type( Get( slices, 821 ));
            rec.orgml := Convert_Orgml_Type( Get( slices, 822 ));
            rec.orgal := Convert_Orgal_Type( Get( slices, 823 ));
            rec.orgmm := Convert_Orgmm_Type( Get( slices, 824 ));
            rec.orgam := Convert_Orgam_Type( Get( slices, 825 ));
            rec.orgmo := Convert_Orgmo_Type( Get( slices, 826 ));
            rec.orgao := Convert_Orgao_Type( Get( slices, 827 ));
            rec.orgmp := Convert_Orgmp_Type( Get( slices, 828 ));
            rec.orgap := Convert_Orgap_Type( Get( slices, 829 ));
            rec.orgmq := Convert_Orgmq_Type( Get( slices, 830 ));
            rec.orgaq := Convert_Orgaq_Type( Get( slices, 831 ));
            rec.orga := Convert_Aidpl1_Type( Get( slices, 832 ));
            rec.oprlg1 := Convert_Oprlg1_Type( Get( slices, 833 ));
            rec.oprlg2 := Convert_Oprlg2_Type( Get( slices, 834 ));
            rec.oprlg3 := Convert_Oprlg3_Type( Get( slices, 835 ));
            rec.frna := Convert_Frna_Type( Get( slices, 836 ));
            rec.frnb := Convert_Frna_Type( Get( slices, 837 ));
            rec.frnc := Convert_Coh1mr_Type( Get( slices, 838 ));
            rec.lvma := Convert_Lvma_Type( Get( slices, 839 ));
            rec.maage := Convert( slices, 840, ( -9, -8, -7, -2, -1 ) );
            rec.lvpa := Convert_Lvpa_Type( Get( slices, 841 ));
            rec.paage := Convert( slices, 842, ( -9, -8, -7, -2, -1 ) );
            rec.lvch := Convert_Lvch_Type( Get( slices, 843 ));
            rec.nlvch := Convert( slices, 844, ( -9, -8, -7, -2, -1 ) );
            rec.lvsib := Convert_Lvsib_Type( Get( slices, 845 ));
            rec.nlvsib := Convert( slices, 846, ( -9, -8, -7, -2, -1 ) );
            rec.lvgch := Convert_Lvgch_Type( Get( slices, 847 ));
            rec.nlvgch := Convert( slices, 848, ( -9, -8, -7, -2, -1 ) );
            rec.lvgpar := Convert_Lvgpar_Type( Get( slices, 849 ));
            rec.nlvgpa := Convert( slices, 850, ( -9, -8, -7, -2, -1 ) );
            rec.lvggch := Convert_Lvggch_Type( Get( slices, 851 ));
            rec.nlvggch := Convert( slices, 852, ( -9, -8, -7, -2, -1 ) );
            rec.lvggpa := Convert_Lvggpa_Type( Get( slices, 853 ));
            rec.nlvggpa := Convert( slices, 854, ( -9, -8, -7, -2, -1 ) );
            rec.nolvrel := Convert_Nocaidu_Type( Get( slices, 855 ));
            rec.parmar := Convert_Bscon_Type( Get( slices, 856 ));
            rec.malone := Convert_Bscon_Type( Get( slices, 857 ));
            rec.palone := Convert_Bscon_Type( Get( slices, 858 ));
            rec.masee := Convert_Chmail_Type( Get( slices, 859 ));
            rec.matel := Convert_Chmail_Type( Get( slices, 860 ));
            rec.mamail := Convert_Chmail_Type( Get( slices, 861 ));
            rec.mafar := Convert_Chfar_Type( Get( slices, 862 ));
            rec.pasee := Convert_Chmail_Type( Get( slices, 863 ));
            rec.patel := Convert_Chmail_Type( Get( slices, 864 ));
            rec.pamail := Convert_Chmail_Type( Get( slices, 865 ));
            rec.pafar := Convert_Pafar_Type( Get( slices, 866 ));
            rec.chsee := Convert_Chmail_Type( Get( slices, 867 ));
            rec.chtel := Convert_Chmail_Type( Get( slices, 868 ));
            rec.chmail := Convert_Chmail_Type( Get( slices, 869 ));
            rec.chfar := Convert_Chfar_Type( Get( slices, 870 ));
            rec.chaida := Convert_Chaida_Type( Get( slices, 871 ));
            rec.chaidb := Convert_Chaidb_Type( Get( slices, 872 ));
            rec.chaidc := Convert_Chaidc_Type( Get( slices, 873 ));
            rec.chaidd := Convert_Chaidd_Type( Get( slices, 874 ));
            rec.chaide := Convert_Chaide_Type( Get( slices, 875 ));
            rec.chaidf := Convert_Chaidf_Type( Get( slices, 876 ));
            rec.chaidg := Convert_Chaidg_Type( Get( slices, 877 ));
            rec.chaidh := Convert_Caiduh_Type( Get( slices, 878 ));
            rec.chaidi := Convert_Caidui_Type( Get( slices, 879 ));
            rec.nochaid := Convert_Nocaidu_Type( Get( slices, 880 ));
            rec.caidua := Convert_Caidua_Type( Get( slices, 881 ));
            rec.caidub := Convert_Caidub_Type( Get( slices, 882 ));
            rec.caiduc := Convert_Caiduc_Type( Get( slices, 883 ));
            rec.caidud := Convert_Caidud_Type( Get( slices, 884 ));
            rec.caidue := Convert_Caidue_Type( Get( slices, 885 ));
            rec.caiduf := Convert_Caiduf_Type( Get( slices, 886 ));
            rec.caidug := Convert_Caidug_Type( Get( slices, 887 ));
            rec.caiduh := Convert_Caiduh_Type( Get( slices, 888 ));
            rec.caidui := Convert_Caidui_Type( Get( slices, 889 ));
            rec.nocaidu := Convert_Nocaidu_Type( Get( slices, 890 ));
            rec.paaida := Convert_Paaida_Type( Get( slices, 891 ));
            rec.paaidb := Convert_Paaidb_Type( Get( slices, 892 ));
            rec.paaidc := Convert_Paaidc_Type( Get( slices, 893 ));
            rec.paaidd := Convert_Paaidd_Type( Get( slices, 894 ));
            rec.paaide := Convert_Paaide_Type( Get( slices, 895 ));
            rec.paaidf := Convert_Paaidf_Type( Get( slices, 896 ));
            rec.paaidg := Convert_Paaidg_Type( Get( slices, 897 ));
            rec.paaidh := Convert_Paaidh_Type( Get( slices, 898 ));
            rec.paaidi := Convert_Paaidi_Type( Get( slices, 899 ));
            rec.nopaaid := Convert_Nocaidu_Type( Get( slices, 900 ));
            rec.paidua := Convert_Caidua_Type( Get( slices, 901 ));
            rec.paidub := Convert_Caidub_Type( Get( slices, 902 ));
            rec.paiduc := Convert_Caiduc_Type( Get( slices, 903 ));
            rec.paidud := Convert_Paidud_Type( Get( slices, 904 ));
            rec.paidue := Convert_Caidue_Type( Get( slices, 905 ));
            rec.paiduf := Convert_Caiduf_Type( Get( slices, 906 ));
            rec.paidug := Convert_Caidug_Type( Get( slices, 907 ));
            rec.paiduh := Convert_Caiduh_Type( Get( slices, 908 ));
            rec.paidui := Convert_Caidui_Type( Get( slices, 909 ));
            rec.nopaidu := Convert_Nocaidu_Type( Get( slices, 910 ));
            rec.f101 := Convert_F101_Type( Get( slices, 911 ));
            rec.f102 := Convert_F102_Type( Get( slices, 912 ));
            rec.f103 := Convert_F103_Type( Get( slices, 913 ));
            rec.f104 := Convert( slices, 914, ( -9, -8, -7 ) );
            rec.f105 := Convert_F105_Type( Get( slices, 915 ));
            rec.f106 := Convert_F106_Type( Get( slices, 916 ));
            rec.f116 := Convert_F116_Type( Get( slices, 917 ));
            rec.f118 := Convert_F118_Type( Get( slices, 918 ));
            rec.f119 := Convert_F119_Type( Get( slices, 919 ));
            rec.f121 := Convert_F121_Type( Get( slices, 920 ));
            rec.f122 := Convert_F122_Type( Get( slices, 921 ));
            rec.f124 := Convert_F124_Type( Get( slices, 922 ));
            rec.f125 := Convert_F125_Type( Get( slices, 923 ));
            rec.f126 := Convert_F126_Type( Get( slices, 924 ));
            rec.f127 := Convert_F127_Type( Get( slices, 925 ));
            rec.f128 := Convert_F128_Type( Get( slices, 926 ));
            rec.f132 := Convert_F132_Type( Get( slices, 927 ));
            rec.f142 := Convert_F142_Type( Get( slices, 928 ));
            rec.f135 := Convert_F135_Type( Get( slices, 929 ));
            rec.f136 := Convert_F136_Type( Get( slices, 930 ));
            rec.f137 := Convert_F137_Type( Get( slices, 931 ));
            rec.f138 := Convert_F138_Type( Get( slices, 932 ));
            rec.f139 := Convert_F139_Type( Get( slices, 933 ));
            rec.f140 := Convert_F140_Type( Get( slices, 934 ));
            rec.f141 := Convert_F141_Type( Get( slices, 935 ));
            rec.f151 := Convert_F151_Type( Get( slices, 936 ));
            rec.f152 := Convert_F152_Type( Get( slices, 937 ));
            rec.f153 := Convert_F153_Type( Get( slices, 938 ));
            rec.f154 := Convert_F154_Type( Get( slices, 939 ));
            rec.f155 := Convert_F155_Type( Get( slices, 940 ));
            rec.f156 := Convert_F156_Type( Get( slices, 941 ));
            rec.f157 := Convert_F157_Type( Get( slices, 942 ));
            rec.f158 := Convert_F158_Type( Get( slices, 943 ));
            rec.f159 := Convert_F159_Type( Get( slices, 944 ));
            rec.nf1 := Convert( slices, 945, ( -9, -8, -7, -2, -1 ) );
            rec.fisit := Convert_Fisit_Type( Get( slices, 946 ));
            rec.fisitc := Convert( slices, 947, ( -9, -8, -7, -2, -1 ) );
            rec.fisity := Convert_Fisity_Type( Get( slices, 948 ));
            rec.fisitx := Convert( slices, 949, ( -9, -8, -7, -2, -1 ) );
            rec.fiyrdia := Convert( slices, 950, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.fiyrdb1 := Convert_Boolean_With_Missing( Get( slices, 951 ));
            rec.fiyrdb2 := Convert_Boolean_With_Missing( Get( slices, 952 ));
            rec.fiyrdb3 := Convert_Boolean_With_Missing( Get( slices, 953 ));
            rec.fiyrdb4 := Convert_Boolean_With_Missing( Get( slices, 954 ));
            rec.fiyrdb5 := Convert_Boolean_With_Missing( Get( slices, 955 ));
            rec.fiyrdb6 := Convert_Boolean_With_Missing( Get( slices, 956 ));
            rec.save := Convert_Aidpl1_Type( Get( slices, 957 ));
            rec.saved := Convert( slices, 958, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.savey1 := Convert_Savey1_Type( Get( slices, 959 ));
            rec.savey2 := Convert_Savey1_Type( Get( slices, 960 ));
            rec.savreg := Convert_Savreg_Type( Get( slices, 961 ));
            rec.savlt := Convert_Savlt_Type( Get( slices, 962 ));
            rec.pppen := Convert_Aidpl1_Type( Get( slices, 963 ));
            rec.penb4 := Convert_Penb4_Type( Get( slices, 964 ));
            rec.penb4y4 := Convert( slices, 965, ( -9, -8, -7, -2, -1 ) );
            rec.penb4v := Convert( slices, 966, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.penb4w := Convert( slices, 967, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.penyr4 := Convert( slices, 968, ( -9, -8, -7, -2, -1 ) );
            rec.penadd := Convert_Aidpl1_Type( Get( slices, 969 ));
            rec.penadv := Convert( slices, 970, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.penadw := Convert( slices, 971, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.penmjn := Convert( slices, 972, ( -9, -8, -7, -2, -1 ) );
            rec.penmcn := Convert_Penmcn_Type( Get( slices, 973 ));
            rec.penmpy := Convert( slices, 974, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.penmtp := Convert_Penmtp_Type( Get( slices, 975 ));
            rec.penmsp := Convert_Bscon_Type( Get( slices, 976 ));
            rec.penmex := Convert_Bscon_Type( Get( slices, 977 ));
            rec.pppex := Convert_Bscon_Type( Get( slices, 978 ));
            rec.pppexm := Convert_Bscon_Type( Get( slices, 979 ));
            rec.stakeh := Convert_Bscon_Type( Get( slices, 980 ));
            rec.sppen := Convert_Bscon_Type( Get( slices, 981 ));
            rec.retexp := Convert_Retexp_Type( Get( slices, 982 ));
            rec.retamt := Convert_Retamt_Type( Get( slices, 983 ));
            rec.retsuf := Convert_Retsuf_Type( Get( slices, 984 ));
            rec.windf := Convert_Debt_Type( Get( slices, 985 ));
            rec.windfa := Convert_Windfa_Type( Get( slices, 986 ));
            rec.windfay := Convert( slices, 987, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windfb := Convert_Windfb_Type( Get( slices, 988 ));
            rec.windfby := Convert( slices, 989, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windfc := Convert_Windfc_Type( Get( slices, 990 ));
            rec.windfcy := Convert( slices, 991, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windfd := Convert_Windfd_Type( Get( slices, 992 ));
            rec.windfdy := Convert( slices, 993, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windff := Convert_Windff_Type( Get( slices, 994 ));
            rec.windffy := Convert( slices, 995, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windfg := Convert_Windfg_Type( Get( slices, 996 ));
            rec.windfgy := Convert( slices, 997, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windfh := Convert_Nisjsa_Type( Get( slices, 998 ));
            rec.windfhy := Convert( slices, 999, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.xpmeal := Convert_Xpleis_Type( Get( slices, 1000 ));
            rec.xpleis := Convert_Xpleis_Type( Get( slices, 1001 ));
            rec.ftexhh := Convert_Aidpl1_Type( Get( slices, 1002 ));
            rec.ftexa := Convert_Ftexa_Type( Get( slices, 1003 ));
            rec.ftexa1 := Convert_Ftexa1_Type( Get( slices, 1004 ));
            rec.ftexa2 := Convert_Ftexa2_Type( Get( slices, 1005 ));
            rec.ftexa3 := Convert_Ftexa3_Type( Get( slices, 1006 ));
            rec.ftexa4 := Convert_Ftexa4_Type( Get( slices, 1007 ));
            rec.ftexa5 := Convert_Ftexa5_Type( Get( slices, 1008 ));
            rec.ftexa6 := Convert_Ftexa6_Type( Get( slices, 1009 ));
            rec.ftexav := Convert( slices, 1010, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ftexaw := Convert( slices, 1011, ( -9.0, -8.0, -7.0, -5.0, -3.0, -2.0, -1.0 ) );
            rec.ftexb := Convert_Ftexb_Type( Get( slices, 1012 ));
            rec.ftexb1 := Convert_Ftexa1_Type( Get( slices, 1013 ));
            rec.ftexb2 := Convert_Ftexa2_Type( Get( slices, 1014 ));
            rec.ftexb3 := Convert_Ftexa3_Type( Get( slices, 1015 ));
            rec.ftexb4 := Convert_Ftexa4_Type( Get( slices, 1016 ));
            rec.ftexb5 := Convert_Ftexa5_Type( Get( slices, 1017 ));
            rec.ftexb6 := Convert_Ftexa6_Type( Get( slices, 1018 ));
            rec.ftexbv := Convert( slices, 1019, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ftexbw := Convert( slices, 1020, ( -9.0, -8.0, -7.0, -5.0, -3.0, -2.0, -1.0 ) );
            rec.ftexc := Convert_Ftexc_Type( Get( slices, 1021 ));
            rec.ftexc1 := Convert_Ftexa1_Type( Get( slices, 1022 ));
            rec.ftexc2 := Convert_Ftexa2_Type( Get( slices, 1023 ));
            rec.ftexc3 := Convert_Ftexa3_Type( Get( slices, 1024 ));
            rec.ftexc4 := Convert_Ftexa4_Type( Get( slices, 1025 ));
            rec.ftexc5 := Convert_Ftexa5_Type( Get( slices, 1026 ));
            rec.ftexc6 := Convert_Ftexa6_Type( Get( slices, 1027 ));
            rec.ftexcv := Convert( slices, 1028, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ftexcw := Convert( slices, 1029, ( -9.0, -8.0, -7.0, -5.0, -3.0, -2.0, -1.0 ) );
            rec.spinhh := Convert_Hhch12_Type( Get( slices, 1030 ));
            rec.hubuys := Convert_Hubuys_Type( Get( slices, 1031 ));
            rec.hufrys := Convert_Hubuys_Type( Get( slices, 1032 ));
            rec.humops := Convert_Hubuys_Type( Get( slices, 1033 ));
            rec.huiron := Convert_Hubuys_Type( Get( slices, 1034 ));
            rec.hhch12 := Convert_Hhch12_Type( Get( slices, 1035 ));
            rec.husits := Convert_Husits_Type( Get( slices, 1036 ));
            rec.howlng := Convert( slices, 1037, ( -9, -8, -7, -3, -2, -1 ) );
            rec.caruse := Convert_Caruse_Type( Get( slices, 1038 ));
            rec.mobuse := Convert_Mobuse_Type( Get( slices, 1039 ));
            rec.ageadv := Convert_Ageadv_Type( Get( slices, 1040 ));
            rec.agead1 := Convert_Agead1_Type( Get( slices, 1041 ));
            rec.agead2 := Convert_Agead1_Type( Get( slices, 1042 ));
            rec.agead3 := Convert_Agead1_Type( Get( slices, 1043 ));
            rec.agead4 := Convert_Agead1_Type( Get( slices, 1044 ));
            rec.event1 := Convert( slices, 1045, ( -9, -8, -7, -1 ) );
            rec.event1s := Convert( slices, 1046, ( -9, -8, -7 ) );
            rec.event2 := Convert( slices, 1047, ( -9, -8, -7, -1 ) );
            rec.event2s := Convert( slices, 1048, ( -9, -8, -7 ) );
            rec.event3 := Convert( slices, 1049, ( -9, -8, -7, -1 ) );
            rec.event3s := Convert( slices, 1050, ( -9, -8, -7 ) );
            rec.event4 := Convert( slices, 1051, ( -9, -8, -7, -1 ) );
            rec.event4s := Convert( slices, 1052, ( -9, -8, -7 ) );
            rec.ivfa := Convert_Ivda_Type( Get( slices, 1053 ));
            rec.ivfb := Convert_Ivdb_Type( Get( slices, 1054 ));
            rec.ivfc := Convert_Ivfc_Type( Get( slices, 1055 ));
            rec.ivfd := Convert_Ivdd_Type( Get( slices, 1056 ));
            rec.ivfe := Convert_Ivee_Type( Get( slices, 1057 ));
            rec.ivfoih := Convert( slices, 1058, ( -9, -8 ) );
            rec.ivfoim := Convert( slices, 1059, ( -9, -8 ) );
            rec.ivsc := Convert_Ivsc_Type( Get( slices, 1060 ));
            rec.iv1 := Convert_Hhch12_Type( Get( slices, 1061 ));
            rec.iv2 := Convert_Iv2_Type( Get( slices, 1062 ));
            rec.iv4 := Convert_Iv4_Type( Get( slices, 1063 ));
            rec.iv5 := Convert_Iv5_Type( Get( slices, 1064 ));
            rec.iv5aa := Convert_Iv5aa_Type( Get( slices, 1065 ));
            rec.iv5ab := Convert_Iv5ab_Type( Get( slices, 1066 ));
            rec.iv5ac := Convert_Iv5ac_Type( Get( slices, 1067 ));
            rec.iv6a := Convert_Hhch12_Type( Get( slices, 1068 ));
            rec.iv6b := Convert_Hhch12_Type( Get( slices, 1069 ));
            rec.iv6c := Convert_Hhch12_Type( Get( slices, 1070 ));
            rec.iv6d := Convert_Hhch12_Type( Get( slices, 1071 ));
            rec.iv6e := Convert_Hhch12_Type( Get( slices, 1072 ));
            rec.iv6f := Convert_Hhch12_Type( Get( slices, 1073 ));
            rec.iv7 := Convert( slices, 1074, ( -9, -8, -7 ) );
            rec.ghqa := Convert_Ghqa_Type( Get( slices, 1075 ));
            rec.ghqb := Convert_Ghqb_Type( Get( slices, 1076 ));
            rec.ghqc := Convert_Ghqc_Type( Get( slices, 1077 ));
            rec.ghqd := Convert_Ghqc_Type( Get( slices, 1078 ));
            rec.ghqe := Convert_Ghqe_Type( Get( slices, 1079 ));
            rec.ghqf := Convert_Ghqe_Type( Get( slices, 1080 ));
            rec.ghqg := Convert_Ghqc_Type( Get( slices, 1081 ));
            rec.ghqh := Convert_Ghqc_Type( Get( slices, 1082 ));
            rec.ghqi := Convert_Ghqb_Type( Get( slices, 1083 ));
            rec.ghqj := Convert_Ghqe_Type( Get( slices, 1084 ));
            rec.ghqk := Convert_Ghqe_Type( Get( slices, 1085 ));
            rec.ghql := Convert_Ghqc_Type( Get( slices, 1086 ));
            rec.opfama := Convert_Opfama_Type( Get( slices, 1087 ));
            rec.opfamb := Convert_Opfama_Type( Get( slices, 1088 ));
            rec.opfamc := Convert_Opfama_Type( Get( slices, 1089 ));
            rec.opfamd := Convert_Opfama_Type( Get( slices, 1090 ));
            rec.opfame := Convert_Opfama_Type( Get( slices, 1091 ));
            rec.opfamf := Convert_Opfama_Type( Get( slices, 1092 ));
            rec.opfamg := Convert_Opfama_Type( Get( slices, 1093 ));
            rec.opfamh := Convert_Opfama_Type( Get( slices, 1094 ));
            rec.opfami := Convert_Opfama_Type( Get( slices, 1095 ));
            rec.qlfa := Convert_Qlfa_Type( Get( slices, 1096 ));
            rec.qlfb := Convert_Qlfa_Type( Get( slices, 1097 ));
            rec.qlfc := Convert_Qlfa_Type( Get( slices, 1098 ));
            rec.qlfd := Convert_Qlfa_Type( Get( slices, 1099 ));
            rec.qlfe := Convert_Qlfa_Type( Get( slices, 1100 ));
            rec.qlff := Convert_Qlfa_Type( Get( slices, 1101 ));
            rec.qlfg := Convert_Qlfa_Type( Get( slices, 1102 ));
            rec.qlfh := Convert_Qlfa_Type( Get( slices, 1103 ));
            rec.qlfi := Convert_Qlfa_Type( Get( slices, 1104 ));
            rec.qlfj := Convert_Qlfa_Type( Get( slices, 1105 ));
            rec.qlfk := Convert_Qlfa_Type( Get( slices, 1106 ));
            rec.qlfl := Convert_Qlfa_Type( Get( slices, 1107 ));
            rec.qlfm := Convert_Qlfa_Type( Get( slices, 1108 ));
            rec.qlfn := Convert_Qlfa_Type( Get( slices, 1109 ));
            rec.qlfo := Convert_Qlfa_Type( Get( slices, 1110 ));
            rec.qlfp := Convert_Qlfa_Type( Get( slices, 1111 ));
            rec.qlfq := Convert_Qlfa_Type( Get( slices, 1112 ));
            rec.qlfr := Convert_Qlfa_Type( Get( slices, 1113 ));
            rec.qlfs := Convert_Qlfa_Type( Get( slices, 1114 ));
            rec.xsupa := Convert_Xsupa_Type( Get( slices, 1115 ));
            rec.xsupb := Convert_Xsupa_Type( Get( slices, 1116 ));
            rec.xsupc := Convert_Xsupa_Type( Get( slices, 1117 ));
            rec.ssupa := Convert_Ssupa_Type( Get( slices, 1118 ));
            rec.ssupb := Convert_Ssupa_Type( Get( slices, 1119 ));
            rec.ssupc := Convert_Ssupa_Type( Get( slices, 1120 ));
            rec.ssupd := Convert_Ssupa_Type( Get( slices, 1121 ));
            rec.ssupe := Convert_Ssupa_Type( Get( slices, 1122 ));
            rec.ssup1 := Convert_Netsx1_Type( Get( slices, 1123 ));
            rec.ssupr2r := Convert_Ssupr2r_Type( Get( slices, 1124 ));
            rec.prrs2i := Convert_Prrs2i_Type( Get( slices, 1125 ));
            rec.pripn := Convert( slices, 1126, ( -9, -8 ) );
            rec.prwhy := Convert_Prwhy_Type( Get( slices, 1127 ));
            rec.pplevr := Convert_Plever_Type( Get( slices, 1128 ));
            rec.prfehq := Convert_Prfehq_Type( Get( slices, 1129 ));
            rec.prsehq := Convert_Prsehq_Type( Get( slices, 1130 ));
            rec.presbgm := Convert_Presbgm_Type( Get( slices, 1131 ));
            rec.presby4 := Convert( slices, 1132, ( -9, -8, -7, -2, -1 ) );
            rec.presly := Convert_Presly_Type( Get( slices, 1133 ));
            rec.prf101 := Convert_Prf101_Type( Get( slices, 1134 ));
            rec.prf102 := Convert_Prf102_Type( Get( slices, 1135 ));
            rec.prf116 := Convert_Prf116_Type( Get( slices, 1136 ));
            rec.prf125 := Convert_Prf125_Type( Get( slices, 1137 ));
            rec.prf131 := Convert_Prf131_Type( Get( slices, 1138 ));
            rec.prf135 := Convert_Prf135_Type( Get( slices, 1139 ));
            rec.prf137 := Convert_Prf137_Type( Get( slices, 1140 ));
            rec.prf139 := Convert_Prf139_Type( Get( slices, 1141 ));
            rec.prf141 := Convert_Prf141_Type( Get( slices, 1142 ));
            rec.prfirn := Convert_Prfirn_Type( Get( slices, 1143 ));
            rec.prearn := Convert_Prearn_Type( Get( slices, 1144 ));
            rec.prjbbgm := Convert_Presbgm_Type( Get( slices, 1145 ));
            rec.prjbby4 := Convert( slices, 1146, ( -9, -8, -7, -2, -1 ) );
            rec.prjbly := Convert_Prjbly_Type( Get( slices, 1147 ));
            rec.prfitb := Convert_Prfitb_Type( Get( slices, 1148 ));
            rec.ivpa := Convert_Ivpa_Type( Get( slices, 1149 ));
            rec.ivpb := Convert_Ivpb_Type( Get( slices, 1150 ));
            rec.ivpc := Convert_Ivpc_Type( Get( slices, 1151 ));
            rec.ivpd := Convert_Ivpd_Type( Get( slices, 1152 ));
            rec.ivpe := Convert_Ivpe_Type( Get( slices, 1153 ));
            rec.telwhy := Convert_Telwhy_Type( Get( slices, 1154 ));
            rec.prjbft := Convert_Prjbft_Type( Get( slices, 1155 ));
            rec.tlfiyrl := Convert( slices, 1156, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.tlfiyr := Convert( slices, 1157, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.pid := Convert( slices, 1158 );
            rec.iviolw := Convert_Iviolw_Type( Get( slices, 1159 ));
            rec.hhmem := Convert_Hhmem_Type( Get( slices, 1160 ));
            rec.newhy := Convert_Newhy_Type( Get( slices, 1161 ));
            rec.nemnjn := Convert_Nemnjn_Type( Get( slices, 1162 ));
            rec.neyrjn4 := Convert( slices, 1163, ( -9, -8, -7, -2, -1 ) );
            rec.ivfio := Convert_Ivfio_Type( Get( slices, 1164 ));
            rec.iodc := Convert_Iodc_Type( Get( slices, 1165 ));
            rec.memorig := Convert_Memorig_Type( Get( slices, 1166 ));
            rec.hgr2r := Convert_Hgr2r_Type( Get( slices, 1167 ));
            rec.hgsex := Convert_Hgsex_Type( Get( slices, 1168 ));
            rec.hgbm := Convert_Hgbm_Type( Get( slices, 1169 ));
            rec.hgby := Convert( slices, 1170, ( -2, -1 ) );
            rec.mastat := Convert_Mastat_Type( Get( slices, 1171 ));
            rec.hgspn := Convert( slices, 1172, ( -9, -8, -2, -1 ) );
            rec.hgemp := Convert_Hgemp_Type( Get( slices, 1173 ));
            rec.hgfno := Convert( slices, 1174, ( -9, -8, -2, -1 ) );
            rec.hgmno := Convert( slices, 1175, ( -9, -8, -2, -1 ) );
            rec.hgra := Convert( slices, 1176, ( -9, -8, -2, -1 ) );
            rec.age := Convert( slices, 1177, ( -9, -8 ) );
            rec.age12 := Convert( slices, 1178, ( -9, -8 ) );
            rec.butype := Convert_Butype_Type( Get( slices, 1179 ));
            rec.buno := Convert( slices, 1180, ( -9, -8 ) );
            rec.nchild := Convert( slices, 1181, ( -9, -8 ) );
            rec.hoh := Convert_Hoh_Type( Get( slices, 1182 ));
            rec.rach16 := Convert_Hhch12_Type( Get( slices, 1183 ));
            rec.sampst := Convert_Sampst_Type( Get( slices, 1184 ));
            rec.movest := Convert_Movest_Type( Get( slices, 1185 ));
            rec.qfx := Convert_Aidpl1_Type( Get( slices, 1186 ));
            rec.qfxc := Convert_Qfc_Type( Get( slices, 1187 ));
            rec.qfxd := Convert_Qfd_Type( Get( slices, 1188 ));
            rec.qfxe := Convert_Qfe_Type( Get( slices, 1189 ));
            rec.qfxf := Convert_Qff_Type( Get( slices, 1190 ));
            rec.qfxg := Convert_Qfg_Type( Get( slices, 1191 ));
            rec.qfxh := Convert_Qfh_Type( Get( slices, 1192 ));
            rec.qfxk := Convert_Qfk_Type( Get( slices, 1193 ));
            rec.qfxl := Convert_Qfl_Type( Get( slices, 1194 ));
            rec.qfxm := Convert_Qfm_Type( Get( slices, 1195 ));
            rec.qfxn := Convert_Qfn_Type( Get( slices, 1196 ));
            rec.qfxo := Convert_Qfxo_Type( Get( slices, 1197 ));
            rec.qfxp := Convert_Qfxp_Type( Get( slices, 1198 ));
            rec.qfxq := Convert_Qfxq_Type( Get( slices, 1199 ));
            rec.qfxr := Convert_Qfxr_Type( Get( slices, 1200 ));
            rec.qfedx := Convert_Aidpl1_Type( Get( slices, 1201 ));
            rec.qfedxa := Convert_Qfedd_Type( Get( slices, 1202 ));
            rec.nqfexa := Convert( slices, 1203, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxb := Convert_Qfede_Type( Get( slices, 1204 ));
            rec.nqfexb := Convert( slices, 1205, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxc := Convert_Qfedj_Type( Get( slices, 1206 ));
            rec.nqfexc := Convert( slices, 1207, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxg := Convert_Qfedm_Type( Get( slices, 1208 ));
            rec.nqfexg := Convert( slices, 1209, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxh := Convert_Qfedxh_Type( Get( slices, 1210 ));
            rec.nqfexh := Convert( slices, 1211, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxi := Convert_Qfedo_Type( Get( slices, 1212 ));
            rec.nqfexi := Convert( slices, 1213, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxj := Convert( slices, 1214, ( -9, -8, -7 ) );
            rec.nqfexj := Convert( slices, 1215, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxl := Convert_Qfedt_Type( Get( slices, 1216 ));
            rec.nqfexl := Convert( slices, 1217, ( -9, -8, -7, -2, -1 ) );
            rec.region := Convert_Region_Type( Get( slices, 1218 ));
            rec.hhsize := Convert( slices, 1219, ( -9, -8 ) );
            rec.hhtype := Convert_Hhtype_Type( Get( slices, 1220 ));
            rec.tenure := Convert_Tenure_Type( Get( slices, 1221 ));
            rec.qfedhi := Convert_Qfedhi_Type( Get( slices, 1222 ));
            rec.qfvoc := Convert_Qfvoc_Type( Get( slices, 1223 ));
            rec.qfachi := Convert_Qfachi_Type( Get( slices, 1224 ));
            rec.jbft := Convert_Jbft_Type( Get( slices, 1225 ));
            rec.payg := Convert( slices, 1226, ( -9.0, -8.0, -7.0 ) );
            rec.payn := Convert( slices, 1227, ( -9.0, -8.0, -7.0 ) );
            rec.paygu := Convert( slices, 1228, ( -9.0, -8.0, -7.0 ) );
            rec.paynu := Convert( slices, 1229, ( -9.0, -8.0, -7.0 ) );
            rec.paygty := Convert( slices, 1230, ( -9.0, -8.0, -7.0 ) );
            rec.paygly := Convert( slices, 1231, ( -9.0, -8.0, -7.0 ) );
            rec.paynty := Convert( slices, 1232, ( -9.0, -8.0, -7.0 ) );
            rec.paynly := Convert( slices, 1233, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jsprof := Convert( slices, 1234, ( -9.0, -8.0, -7.0 ) );
            rec.jsloss := Convert( slices, 1235, ( -9.0, -8.0, -7.0 ) );
            rec.jspayg := Convert( slices, 1236, ( -9.0, -8.0, -7.0 ) );
            rec.cjsten := Convert( slices, 1237, ( -9.0, -8.0, -7.0 ) );
            rec.cjswk9 := Convert( slices, 1238, ( -9.0, -8.0, -7.0 ) );
            rec.jlid := Convert_Jlid_Type( Get( slices, 1239 ));
            rec.jlyid := Convert_Jlyid_Type( Get( slices, 1240 ));
            rec.jtyid := Convert_Jtyid_Type( Get( slices, 1241 ));
            rec.jbseg := Convert_Jbseg_Type( Get( slices, 1242 ));
            rec.jbgold := Convert( slices, 1243, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbrgsc := Convert_Jbrgsc_Type( Get( slices, 1244 ));
            rec.jbisco := Convert( slices, 1245 );
            rec.jbcssm := Convert( slices, 1246, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbcssf := Convert( slices, 1247, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbhgs := Convert( slices, 1248, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbsec := Convert_Jbsec_Type( Get( slices, 1249 ));
            rec.njbwks := Convert( slices, 1250, ( -9.0, -8.0, -7.0 ) );
            rec.njuwks := Convert( slices, 1251, ( -9.0, -8.0, -7.0 ) );
            rec.njiwks := Convert( slices, 1252, ( -9.0, -8.0, -7.0 ) );
            rec.njbnew := Convert( slices, 1253, ( -9, -8, -7 ) );
            rec.njbsp := Convert( slices, 1254, ( -9, -8, -7 ) );
            rec.njusp := Convert( slices, 1255, ( -9, -8, -7 ) );
            rec.njisp := Convert( slices, 1256, ( -9, -8, -7 ) );
            rec.jbstatl := Convert( slices, 1257, ( -9, -8, -7, -2, -1 ) );
            rec.jbstatt := Convert( slices, 1258, ( -9, -8, -7, -2, -1 ) );
            rec.jbsocly := Convert( slices, 1259, ( -9, -8, -7 ) );
            rec.jlseg := Convert_Jlseg_Type( Get( slices, 1260 ));
            rec.jlgold := Convert( slices, 1261, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlrgsc := Convert_Jlrgsc_Type( Get( slices, 1262 ));
            rec.jlisco := Convert( slices, 1263 );
            rec.jlcssm := Convert( slices, 1264, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlcssf := Convert( slices, 1265, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlhgs := Convert( slices, 1266, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlsec := Convert_Jlsec_Type( Get( slices, 1267 ));
            rec.norgm := Convert( slices, 1268, ( -9, -8, -7 ) );
            rec.norga := Convert( slices, 1269, ( -9, -8, -7 ) );
            rec.vote := Convert_Vote_Type( Get( slices, 1270 ));
            rec.fiyrdic := Convert( slices, 1271, ( -9.0, -8.0, -7.0 ) );
            rec.fimnp := Convert( slices, 1272, ( -9.0, -8.0, -7.0 ) );
            rec.fimnb := Convert( slices, 1273, ( -9.0, -8.0, -7.0 ) );
            rec.fimni := Convert( slices, 1274, ( -9.0, -8.0, -7.0 ) );
            rec.fimnt := Convert( slices, 1275, ( -9.0, -8.0, -7.0 ) );
            rec.fimnl := Convert( slices, 1276, ( -9.0, -8.0, -7.0 ) );
            rec.fimnnl := Convert( slices, 1277, ( -9.0, -8.0, -7.0 ) );
            rec.fimn := Convert( slices, 1278, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrl := Convert( slices, 1279, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrnl := Convert( slices, 1280, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrp := Convert( slices, 1281, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrb := Convert( slices, 1282, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrt := Convert( slices, 1283, ( -9.0, -8.0, -7.0 ) );
            rec.fiyri := Convert( slices, 1284, ( -9.0, -8.0, -7.0 ) );
            rec.fiyr := Convert( slices, 1285, ( -9.0, -8.0, -7.0 ) );
            rec.fihhmn := Convert( slices, 1286, ( -9.0, -8.0, -7.0 ) );
            rec.hlghq1 := Convert( slices, 1287, ( -9, -8, -7 ) );
            rec.hlghq2 := Convert( slices, 1288, ( -9, -8, -7 ) );
            rec.spjb := Convert_Spjb_Type( Get( slices, 1289 ));
            rec.spsoc := Convert( slices, 1290, ( -9.0, -8.0 ) );
            rec.spjbhr := Convert( slices, 1291, ( -9, -8, -7 ) );
            rec.spjbot := Convert( slices, 1292, ( -9, -8, -7 ) );
            rec.sppayg := Convert( slices, 1293, ( -9.0, -8.0, -7.0 ) );
            rec.spjbyr := Convert( slices, 1294, ( -9, -8, -7 ) );
            rec.lrwght := Convert( slices, 1295 );
            rec.lewght := Convert( slices, 1296 );
            rec.xrwght := Convert( slices, 1297 );
            rec.xewght := Convert( slices, 1298 );
            rec.j2payi := Convert( slices, 1299, ( -9, -8, -7, -3, -2, -1 ) );
            rec.fiyrdii := Convert_Fiyrdii_Type( Get( slices, 1300 ));
            rec.prearni := Convert( slices, 1301, ( -9, -8, -2, -1 ) );
            rec.prfitbi := Convert_Prfitbi_Type( Get( slices, 1302 ));
            rec.paygui := Convert_Fimnbi_Type( Get( slices, 1303 ));
            rec.paynui := Convert_Fimnbi_Type( Get( slices, 1304 ));
            rec.paygti := Convert_Fimnbi_Type( Get( slices, 1305 ));
            rec.paygli := Convert_Fimnbi_Type( Get( slices, 1306 ));
            rec.paynti := Convert_Fimnbi_Type( Get( slices, 1307 ));
            rec.paynli := Convert_Fimnbi_Type( Get( slices, 1308 ));
            rec.jsprofi := Convert_Fimnbi_Type( Get( slices, 1309 ));
            rec.jspaygi := Convert_Fimnbi_Type( Get( slices, 1310 ));
            rec.fimnpi := Convert_Fimnbi_Type( Get( slices, 1311 ));
            rec.fimnbi := Convert_Fimnbi_Type( Get( slices, 1312 ));
            rec.fimnii := Convert_Fimnii_Type( Get( slices, 1313 ));
            rec.fimnti := Convert_Fimnii_Type( Get( slices, 1314 ));
            rec.fimnnli := Convert_Fimnbi_Type( Get( slices, 1315 ));
            rec.fimnli := Convert_Fimnbi_Type( Get( slices, 1316 ));
            rec.fimnthi := Convert_Fimnii_Type( Get( slices, 1317 ));
            rec.fiyrli := Convert_Fimnbi_Type( Get( slices, 1318 ));
            rec.fiyrnli := Convert_Fimnbi_Type( Get( slices, 1319 ));
            rec.fiyrpi := Convert_Fimnii_Type( Get( slices, 1320 ));
            rec.fiyrbi := Convert_Fimnbi_Type( Get( slices, 1321 ));
            rec.fiyrti := Convert_Fimnbi_Type( Get( slices, 1322 ));
            rec.fiyrii := Convert_Fimnbi_Type( Get( slices, 1323 ));
            rec.fiyeari := Convert_Fimnbi_Type( Get( slices, 1324 ));
            rec.sppaygi := Convert_Prfitbi_Type( Get( slices, 1325 ));
            rec.fihhmni := Convert_Fihhmni_Type( Get( slices, 1326 ));
            rec.mrjend := Convert( slices, 1327, ( -9, -8, -7, -3, -2, -1 ) );
            rec.mrjsoc := Convert( slices, 1328, ( -9, -8, -7, -3 ) );
            rec.mrjsic := Convert( slices, 1329, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjsemp := Convert_Mrjsemp_Type( Get( slices, 1330 ));
            rec.mrjboss := Convert_Mrjboss_Type( Get( slices, 1331 ));
            rec.mrjmngr := Convert_Mrjmngr_Type( Get( slices, 1332 ));
            rec.mrjsize := Convert_Mrjsize_Type( Get( slices, 1333 ));
            rec.mrjseg := Convert_Maseg_Type( Get( slices, 1334 ));
            rec.mrjgold := Convert( slices, 1335, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjrgsc := Convert_Margsc_Type( Get( slices, 1336 ));
            rec.mrjisco := Convert( slices, 1337 );
            rec.mrjcssm := Convert( slices, 1338, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjcssf := Convert( slices, 1339, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjhgs := Convert( slices, 1340, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjsec := Convert_J1sec_Type( Get( slices, 1341 ));
            rec.paseg := Convert_Maseg_Type( Get( slices, 1342 ));
            rec.pagold := Convert( slices, 1343, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.pargsc := Convert_Margsc_Type( Get( slices, 1344 ));
            rec.paisco := Convert( slices, 1345 );
            rec.pacssm := Convert( slices, 1346, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.pacssf := Convert( slices, 1347, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.pahgs := Convert( slices, 1348, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.pasec := Convert_J1sec_Type( Get( slices, 1349 ));
            rec.maseg := Convert_Maseg_Type( Get( slices, 1350 ));
            rec.magold := Convert( slices, 1351, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.margsc := Convert_Margsc_Type( Get( slices, 1352 ));
            rec.maisco := Convert( slices, 1353 );
            rec.macssm := Convert( slices, 1354, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.macssf := Convert( slices, 1355, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mahgs := Convert( slices, 1356, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.masec := Convert_J1sec_Type( Get( slices, 1357 ));
            rec.j1seg := Convert_J1seg_Type( Get( slices, 1358 ));
            rec.j1gold := Convert( slices, 1359, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.j1rgsc := Convert_J1rgsc_Type( Get( slices, 1360 ));
            rec.j1isco := Convert( slices, 1361 );
            rec.j1cssm := Convert( slices, 1362, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.j1cssf := Convert( slices, 1363, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.j1hgs := Convert( slices, 1364, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.j1sec := Convert_J1sec_Type( Get( slices, 1365 ));
            rec.xrwghte := Convert( slices, 1366 );
            rec.xewghte := Convert( slices, 1367 );
            rec.fimnsel := Convert_Fimnsel_Type( Get( slices, 1368 ));
            rec.xrwtuk1 := Convert( slices, 1369 );
            rec.xewtuk1 := Convert( slices, 1370 );
            rec.xrwtuk2 := Convert( slices, 1371 );
            rec.xewtuk2 := Convert( slices, 1372 );
            rec.lrwtsw1 := Convert( slices, 1373 );
            rec.lewtsw1 := Convert( slices, 1374 );
            rec.lrwtsw2 := Convert( slices, 1375 );
            rec.lewtsw2 := Convert( slices, 1376 );
            rec.sppid := Convert( slices, 1377 );
            rec.fpid := Convert( slices, 1378 );
            rec.mpid := Convert( slices, 1379 );
            rec.distmov := Convert( slices, 1380, ( -9.0, -8.0, -7.0 ) );
            rec.mrjsic9 := Convert( slices, 1381, ( -9, -8, -2, -1 ) );
            rec.region2 := Convert_Region2_Type( Get( slices, 1382 ));
            rec.isced := Convert_Isced_Type( Get( slices, 1383 ));
            rec.casmin := Convert_Casmin_Type( Get( slices, 1384 ));
            rec.jbiscon := Convert( slices, 1385, ( -9, -8, -7, -2, -1 ) );
            rec.jliscon := Convert( slices, 1386, ( -9, -8, -7, -2, -1 ) );
            rec.mrjiscn := Convert( slices, 1387, ( -9, -8, -7, -2, -1 ) );
            rec.maiscon := Convert( slices, 1388, ( -9, -8, -7, -2, -1 ) );
            rec.paiscon := Convert( slices, 1389, ( -9, -8, -7, -2, -1 ) );
            rec.j1iscon := Convert( slices, 1390, ( -9, -8, -7, -2, -1 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Indresp_component ).start_pos = 0 ) then
               index.pointers( Indresp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Indresp_component ).counter := index.pointers( Indresp_component ).counter + 1;
            Put_Index( index_map, index );
            Indresp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Indresp_IO.Close( bin_file );
   end Create_Indresp_Wave_K;




   procedure Create_Indsamp_Wave_K( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Indsamp_IO.File_Type;
      rec         : Indsamp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Indsamp_IO.Create (bin_file, Indsamp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.pid := Convert( slices, 3 );
            rec.iviolw := Convert_Iviolw_Type( Get( slices, 4 ));
            rec.ivstat1 := Convert_Ivstat1_Type( Get( slices, 5 ));
            rec.ivelig := Convert_Ivelig_Type( Get( slices, 6 ));
            rec.hhmem := Convert_Hhmem_Type( Get( slices, 7 ));
            rec.newhy := Convert_Newhy_Type( Get( slices, 8 ));
            rec.nemnjn := Convert_Nemnjn_Type( Get( slices, 9 ));
            rec.neyrjn4 := Convert( slices, 10, ( -9, -8, -7, -2, -1 ) );
            rec.lvwhy := Convert_Lvwhy_Type( Get( slices, 11 ));
            rec.lvmn := Convert_Lvmn_Type( Get( slices, 12 ));
            rec.lvyr4 := Convert( slices, 13, ( -9, -8, -7, -2, -1 ) );
            rec.lvloc := Convert_Lvloc_Type( Get( slices, 14 ));
            rec.ivfio := Convert_Ivfio_Type( Get( slices, 15 ));
            rec.ivrref := Convert_Ivrref_Type( Get( slices, 16 ));
            rec.ivireis := Convert_Ivireis_Type( Get( slices, 17 ));
            rec.finloc := Convert_Finloc_Type( Get( slices, 18 ));
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 19 ));
            rec.memorig := Convert_Memorig_Type( Get( slices, 20 ));
            rec.sampst := Convert_Sampst_Type( Get( slices, 21 ));
            rec.movest := Convert_Movest_Type( Get( slices, 22 ));
            rec.lewght := Convert( slices, 23, ( -9.0, -8.0, -1.0 ) );
            rec.lrwght := Convert( slices, 24, ( -9.0, -8.0, -1.0 ) );
            rec.lrwtsw1 := Convert( slices, 25, ( -9.0, -8.0, -1.0 ) );
            rec.lewtsw1 := Convert( slices, 26, ( -9.0, -8.0, -1.0 ) );
            rec.lrwtsw2 := Convert( slices, 27, ( -9.0, -8.0, -1.0 ) );
            rec.lewtsw2 := Convert( slices, 28, ( -9.0, -8.0, -1.0 ) );
            rec.distmov := Convert( slices, 29, ( -9.0, -8.0 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Indsamp_component ).start_pos = 0 ) then
               index.pointers( Indsamp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Indsamp_component ).counter := index.pointers( Indsamp_component ).counter + 1;
            Put_Index( index_map, index );
            Indsamp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Indsamp_IO.Close( bin_file );
   end Create_Indsamp_Wave_K;




   procedure Create_Jobhist_Wave_K( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Jobhist_IO.File_Type;
      rec         : Jobhist_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Jobhist_IO.Create (bin_file, Jobhist_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.jhstat := Convert_Jhstat_Type( Get( slices, 3 ));
            rec.jhbgd := Convert( slices, 4, ( -9, -8, -7, -2, -1 ) );
            rec.jhbgm := Convert_Jbbgm1_Type( Get( slices, 5 ));
            rec.jhbgy4 := Convert( slices, 6, ( -9, -8, -7, -2, -1 ) );
            rec.jspno := Convert( slices, 7 );
            rec.jhsoc := Convert( slices, 8, ( -9, -8, -2, -1 ) );
            rec.jhsoc00 := Convert( slices, 9, ( -9, -8, -2, -1 ) );
            rec.jhsemp := Convert_Jhsemp_Type( Get( slices, 10 ));
            rec.jhboss := Convert_Bscon_Type( Get( slices, 11 ));
            rec.jhsect := Convert_Jhsect_Type( Get( slices, 12 ));
            rec.jhmngr := Convert_Jhmngr_Type( Get( slices, 13 ));
            rec.jhpldf := Convert_Jhpldf_Type( Get( slices, 14 ));
            rec.jhsic := Convert( slices, 15, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.jhsic92 := Convert( slices, 16, ( -9, -8, -7 ) );
            rec.jhsize := Convert_Jhsize_Type( Get( slices, 17 ));
            rec.jhpayl := Convert( slices, 18, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhpylw := Convert( slices, 19, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.jhpylg := Convert_Jhpylg_Type( Get( slices, 20 ));
            rec.jhstpy := Convert_Jhstpy_Type( Get( slices, 21 ));
            rec.jblky := Convert_Jblky_Type( Get( slices, 22 ));
            rec.jhendd := Convert( slices, 23, ( -9, -8, -7, -2, -1 ) );
            rec.jhendm := Convert_Jbbgm1_Type( Get( slices, 24 ));
            rec.jhendy4 := Convert( slices, 25, ( -9, -8, -7, -2, -1 ) );
            rec.jha9ly := Convert_Jha9ly_Type( Get( slices, 26 ));
            rec.jhseg := Convert_Jhseg_Type( Get( slices, 27 ));
            rec.jhgold := Convert( slices, 28, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhrgsc := Convert_Jhrgsc_Type( Get( slices, 29 ));
            rec.jhisco := Convert( slices, 30, ( -9, -8 ) );
            rec.jhcssm := Convert( slices, 31, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhcssf := Convert( slices, 32, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhhgs := Convert( slices, 33, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhsec := Convert_Jhsec_Type( Get( slices, 34 ));
            rec.jhspw := Convert( slices, 35, ( -9.0, -8.0 ) );
            rec.jhgpay := Convert( slices, 36, ( -9.0, -8.0, -7.0 ) );
            rec.jhnpay := Convert( slices, 37, ( -9.0, -8.0, -7.0, -1.0 ) );
            rec.jhgpayi := Convert_Jhgpayi_Type( Get( slices, 38 ));
            rec.jhnpayi := Convert_Jhgpayi_Type( Get( slices, 39 ));
            rec.pid := Convert( slices, 40 );
            rec.jhiscon := Convert( slices, 41, ( -9, -8, -7, -2, -1 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Jobhist_component ).start_pos = 0 ) then
               index.pointers( Jobhist_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Jobhist_component ).counter := index.pointers( Jobhist_component ).counter + 1;
            Put_Index( index_map, index );
            Jobhist_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Jobhist_IO.Close( bin_file );
   end Create_Jobhist_Wave_K;




   procedure Create_Lifemst_Wave_K( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Lifemst_IO.File_Type;
      rec         : Lifemst_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Lifemst_IO.Create (bin_file, Lifemst_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.leshno := Convert( slices, 3 );
            rec.leshst := Convert_Leshst_Type( Get( slices, 4 ));
            rec.leshem := Convert_Leshem_Type( Get( slices, 5 ));
            rec.leshey4 := Convert( slices, 6, ( -9, -8, -7, -2, -1 ) );
            rec.leshne := Convert_Lcsne_Type( Get( slices, 7 ));
            rec.leshsm := Convert_Leshem_Type( Get( slices, 8 ));
            rec.leshsy4 := Convert( slices, 9, ( -9, -8, -7, -2, -1 ) );
            rec.leslen := Convert( slices, 10, ( -9.0, -3.0 ) );
            rec.pid := Convert( slices, 11 );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Lifemst_component ).start_pos = 0 ) then
               index.pointers( Lifemst_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Lifemst_component ).counter := index.pointers( Lifemst_component ).counter + 1;
            Put_Index( index_map, index );
            Lifemst_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Lifemst_IO.Close( bin_file );
   end Create_Lifemst_Wave_K;




   procedure Create_Marriag_Wave_K( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Marriag_IO.File_Type;
      rec         : Marriag_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Marriag_IO.Create (bin_file, Marriag_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.lmarm := Convert_Lacbm_Type( Get( slices, 3 ));
            rec.lmary4 := Convert( slices, 4, ( -9, -8, -7, -2, -1 ) );
            rec.lmcoh := Convert_Frnow_Type( Get( slices, 5 ));
            rec.lmcbm := Convert_Lacbm_Type( Get( slices, 6 ));
            rec.lmcby4 := Convert( slices, 7, ( -9, -8, -7, -2, -1 ) );
            rec.lmend := Convert_Lmend_Type( Get( slices, 8 ));
            rec.lmwwm := Convert_Lacbm_Type( Get( slices, 9 ));
            rec.lmwwy4 := Convert( slices, 10, ( -9, -8, -7, -2, -1 ) );
            rec.lmdvm := Convert_Lacbm_Type( Get( slices, 11 ));
            rec.lmdvy4 := Convert( slices, 12, ( -9, -8, -7, -2, -1 ) );
            rec.lmspm := Convert_Lacbm_Type( Get( slices, 13 ));
            rec.lmspy4 := Convert( slices, 14, ( -9, -8, -7, -2, -1 ) );
            rec.marno := Convert( slices, 15 );
            rec.pid := Convert( slices, 16 );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Marriag_component ).start_pos = 0 ) then
               index.pointers( Marriag_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Marriag_component ).counter := index.pointers( Marriag_component ).counter + 1;
            Put_Index( index_map, index );
            Marriag_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Marriag_IO.Close( bin_file );
   end Create_Marriag_Wave_K;




   procedure Create_Youth_Wave_K( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Youth_IO.File_Type;
      rec         : Youth_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Youth_IO.Create (bin_file, Youth_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.pno := Convert( slices, 1 );
            rec.ypdobm := Convert_Ypdobm_Type( Get( slices, 2 ));
            rec.ypdoby4 := Convert( slices, 3, ( -9, -8, -7, -2, -1 ) );
            rec.ypsex := Convert_Ypsex_Type( Get( slices, 4 ));
            rec.ytvhrs := Convert_Ytvhrs_Type( Get( slices, 5 ));
            rec.ytvstp := Convert_Ytvlmt_Type( Get( slices, 6 ));
            rec.ypfpc := Convert_Ypfpc_Type( Get( slices, 7 ));
            rec.ypfpcgm := Convert_Ypfpcgm_Type( Get( slices, 8 ));
            rec.yppals := Convert_Yppalo_Type( Get( slices, 9 ));
            rec.yppalo := Convert_Yppalo_Type( Get( slices, 10 ));
            rec.yputel := Convert_Yputel_Type( Get( slices, 11 ));
            rec.yplate := Convert_Yplate_Type( Get( slices, 12 ));
            rec.ypfbeau := Convert_Ypfbeau_Type( Get( slices, 13 ));
            rec.ypfclub := Convert_Ypfarca_Type( Get( slices, 14 ));
            rec.ypfdisc := Convert_Ypfarca_Type( Get( slices, 15 ));
            rec.ypfspor := Convert_Ypfarca_Type( Get( slices, 16 ));
            rec.ypargm := Convert_Ypargm_Type( Get( slices, 17 ));
            rec.ypargf := Convert_Ypargf_Type( Get( slices, 18 ));
            rec.yptlkm := Convert_Ypargm_Type( Get( slices, 19 ));
            rec.yptlkf := Convert_Ypargf_Type( Get( slices, 20 ));
            rec.ypnpal := Convert( slices, 21, ( -9, -8, -2, -1 ) );
            rec.ypmkfrn := Convert_Ypmkfrn_Type( Get( slices, 22 ));
            rec.ypfght := Convert_Ypfght_Type( Get( slices, 23 ));
            rec.ypeatn := Convert_Ypeatn_Type( Get( slices, 24 ));
            rec.ypsave := Convert_Ypsave_Type( Get( slices, 25 ));
            rec.yppkml := Convert( slices, 26, ( -9, -2, -1 ) );
            rec.yppkmp := Convert( slices, 27, ( -9, -2, -1 ) );
            rec.ypsmev := Convert_Ypbeau_Type( Get( slices, 28 ));
            rec.ypsmof := Convert_Ypsmof_Type( Get( slices, 29 ));
            rec.ypsmlw := Convert( slices, 30, ( -9, -8, -2, -1 ) );
            rec.ypopsm := Convert_Ypopsm_Type( Get( slices, 31 ));
            rec.ypdgfr := Convert_Ypdgfr_Type( Get( slices, 32 ));
            rec.ypsad := Convert_Ypsad_Type( Get( slices, 33 ));
            rec.ypwor := Convert_Ypwor_Type( Get( slices, 34 ));
            rec.ypbull := Convert_Ypbull_Type( Get( slices, 35 ));
            rec.yplone := Convert_Ypbored_Type( Get( slices, 36 ));
            rec.ypbored := Convert_Ypbored_Type( Get( slices, 37 ));
            rec.ypesta := Convert_Ypesta_Type( Get( slices, 38 ));
            rec.ypesti := Convert_Ypesti_Type( Get( slices, 39 ));
            rec.ypestb := Convert_Ypesta_Type( Get( slices, 40 ));
            rec.ypestj := Convert_Ypesti_Type( Get( slices, 41 ));
            rec.ypestc := Convert_Ypesta_Type( Get( slices, 42 ));
            rec.ypestk := Convert_Ypesti_Type( Get( slices, 43 ));
            rec.ypeste := Convert_Ypesta_Type( Get( slices, 44 ));
            rec.ypestf := Convert_Ypesta_Type( Get( slices, 45 ));
            rec.ypesth := Convert_Ypesta_Type( Get( slices, 46 ));
            rec.yptcha := Convert_Ypesta_Type( Get( slices, 47 ));
            rec.yptchb := Convert_Ypesta_Type( Get( slices, 48 ));
            rec.yphsw := Convert_Yphap_Type( Get( slices, 49 ));
            rec.yphap := Convert_Yphap_Type( Get( slices, 50 ));
            rec.yphfm := Convert_Yphap_Type( Get( slices, 51 ));
            rec.yphfr := Convert_Yphap_Type( Get( slices, 52 ));
            rec.yphlf := Convert_Yphap_Type( Get( slices, 53 ));
            rec.ypopff := Convert_Ypopfb_Type( Get( slices, 54 ));
            rec.ypopfb := Convert_Ypopfb_Type( Get( slices, 55 ));
            rec.ypopfj := Convert_Ypopfj_Type( Get( slices, 56 ));
            rec.ypoppl := Convert_Ypopfj_Type( Get( slices, 57 ));
            rec.ypvte6 := Convert_Ypvte6_Type( Get( slices, 58 ));
            rec.ypvte3 := Convert_Ypvte3_Type( Get( slices, 59 ));
            rec.ypcrwra := Convert_Ypcrwra_Type( Get( slices, 60 ));
            rec.ypcrwrb := Convert_Ypcrwrb_Type( Get( slices, 61 ));
            rec.ypexpl := Convert_Ypbeau_Type( Get( slices, 62 ));
            rec.ypvand := Convert( slices, 63, ( -9, -8, -2, -1 ) );
            rec.yptrun := Convert_Yptrun_Type( Get( slices, 64 ));
            rec.ypopsc := Convert_Ypopsc_Type( Get( slices, 65 ));
            rec.yplvsc := Convert_Yplvsc_Type( Get( slices, 66 ));
            rec.yplvhm := Convert( slices, 67, ( -9, -8, -2, -1 ) );
            rec.ypwhrs := Convert( slices, 68, ( -9, -8, -2, -1 ) );
            rec.yppay := Convert( slices, 69, ( -9, -8, -2, -1 ) );
            rec.ypfsoc := Convert( slices, 70, ( -9.0, -8.0, -7.0, -1.0 ) );
            rec.ypdlfa := Convert_Ypdlfa_Type( Get( slices, 71 ));
            rec.ypdlfb := Convert_Ypdlfb_Type( Get( slices, 72 ));
            rec.ypwght := Convert( slices, 73 );
            rec.hid := Convert( slices, 74 );
            rec.pid := Convert( slices, 75 );
            rec.fnspno := Convert( slices, 76, ( -9, -8 ) );
            rec.fnspid := Convert( slices, 77, ( -9.0, -8.0 ) );
            rec.mnspno := Convert( slices, 78, ( -9, -8 ) );
            rec.mnspid := Convert( slices, 79, ( -9.0, -8.0 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Youth_component ).start_pos = 0 ) then
               index.pointers( Youth_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Youth_component ).counter := index.pointers( Youth_component ).counter + 1;
            Put_Index( index_map, index );
            Youth_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Youth_IO.Close( bin_file );
   end Create_Youth_Wave_K;




   procedure Create_Child_Wave_L( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Child_IO.File_Type;
      rec         : Child_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Child_IO.Create (bin_file, Child_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.pno := Convert( slices, 1, ( -9, -8 ) );
            rec.scpno := Convert( slices, 2, ( -9, -8 ) );
            rec.scage := Convert( slices, 3, ( -9, -8, -2, -1 ) );
            rec.scsex := Convert_Scsex_Type( Get( slices, 4 ));
            rec.scage4 := Convert_Scag11_Type( Get( slices, 5 ));
            rec.sctyp := Convert_Sctyp_Type( Get( slices, 6 ));
            rec.schbgy := Convert( slices, 7, ( -9, -8, -2, -1 ) );
            rec.schbgm := Convert( slices, 8, ( -9, -8, -2, -1 ) );
            rec.schsta := Convert_Schsta_Type( Get( slices, 9 ));
            rec.schlng := Convert_Schlng_Type( Get( slices, 10 ));
            rec.schsat := Convert_Schsat_Type( Get( slices, 11 ));
            rec.schhw := Convert_Schhw_Type( Get( slices, 12 ));
            rec.scacvs := Convert_Scach_Type( Get( slices, 13 ));
            rec.scach := Convert_Scach_Type( Get( slices, 14 ));
            rec.scag11 := Convert_Scag11_Type( Get( slices, 15 ));
            rec.sctut := Convert_Sctut_Type( Get( slices, 16 ));
            rec.sctute := Convert_Sctute_Type( Get( slices, 17 ));
            rec.sctutm := Convert_Sctutm_Type( Get( slices, 18 ));
            rec.sctuts := Convert_Sctuts_Type( Get( slices, 19 ));
            rec.sctutl := Convert_Sctutl_Type( Get( slices, 20 ));
            rec.sctuth := Convert_Sctuth_Type( Get( slices, 21 ));
            rec.sctuto := Convert_Sctuto_Type( Get( slices, 22 ));
            rec.sc2uni := Convert_Sc2uni_Type( Get( slices, 23 ));
            rec.scluni := Convert_Scluni_Type( Get( slices, 24 ));
            rec.scarg := Convert_Scarg_Type( Get( slices, 25 ));
            rec.sctalk := Convert_Scarg_Type( Get( slices, 26 ));
            rec.scpraz := Convert_Sccudl_Type( Get( slices, 27 ));
            rec.scsmak := Convert_Sccudl_Type( Get( slices, 28 ));
            rec.sccudl := Convert_Sccudl_Type( Get( slices, 29 ));
            rec.scyell := Convert_Sccudl_Type( Get( slices, 30 ));
            rec.scpid := Convert( slices, 31 );
            rec.pid := Convert( slices, 32 );
            rec.hid := Convert( slices, 33 );
            rec.cheseq := Convert( slices, 34, ( -9, -8 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Child_component ).start_pos = 0 ) then
               index.pointers( Child_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Child_component ).counter := index.pointers( Child_component ).counter + 1;
            Put_Index( index_map, index );
            Child_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Child_IO.Close( bin_file );
   end Create_Child_Wave_L;




   procedure Create_Childad_Wave_L( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Childad_IO.File_Type;
      rec         : Childad_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Childad_IO.Create (bin_file, Childad_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.lacbm := Convert_Lacbm_Type( Get( slices, 3 ));
            rec.lacby4 := Convert( slices, 4, ( -9, -8, -7, -2, -1 ) );
            rec.lacsx := Convert_Lacsx_Type( Get( slices, 5 ));
            rec.lacst := Convert_Lacst_Type( Get( slices, 6 ));
            rec.lacyb4 := Convert( slices, 7, ( -9, -8, -7, -2, -1 ) );
            rec.laclv := Convert_Laclv_Type( Get( slices, 8 ));
            rec.lacyd4 := Convert( slices, 9, ( -9, -8, -7, -2, -1 ) );
            rec.lacal := Convert( slices, 10, ( -9, -8, -2, -1 ) );
            rec.lacno := Convert( slices, 11 );
            rec.pid := Convert( slices, 12 );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Childad_component ).start_pos = 0 ) then
               index.pointers( Childad_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Childad_component ).counter := index.pointers( Childad_component ).counter + 1;
            Put_Index( index_map, index );
            Childad_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Childad_IO.Close( bin_file );
   end Create_Childad_Wave_L;




   procedure Create_Childnt_Wave_L( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Childnt_IO.File_Type;
      rec         : Childnt_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Childnt_IO.Create (bin_file, Childnt_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.lchbm := Convert_Lacbm_Type( Get( slices, 3 ));
            rec.lchby4 := Convert( slices, 4, ( -9, -8, -7, -2, -1 ) );
            rec.lchsx := Convert_Lacsx_Type( Get( slices, 5 ));
            rec.lchlv := Convert_Lchlv_Type( Get( slices, 6 ));
            rec.lchyd4 := Convert( slices, 7, ( -9, -8, -7, -2, -1 ) );
            rec.lchal := Convert( slices, 8, ( -9, -8, -2, -1 ) );
            rec.lncno := Convert( slices, 9 );
            rec.pid := Convert( slices, 10 );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Childnt_component ).start_pos = 0 ) then
               index.pointers( Childnt_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Childnt_component ).counter := index.pointers( Childnt_component ).counter + 1;
            Put_Index( index_map, index );
            Childnt_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Childnt_IO.Close( bin_file );
   end Create_Childnt_Wave_L;




   procedure Create_Cohabit_Wave_L( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Cohabit_IO.File_Type;
      rec         : Cohabit_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Cohabit_IO.Create (bin_file, Cohabit_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.lcsbm := Convert_Lacbm_Type( Get( slices, 3 ));
            rec.lcsby4 := Convert( slices, 4, ( -9, -8, -7, -2, -1 ) );
            rec.lcsem := Convert_Lacbm_Type( Get( slices, 5 ));
            rec.lcsey4 := Convert( slices, 6, ( -9, -8, -7, -2, -1 ) );
            rec.lcsne := Convert_Lcsne_Type( Get( slices, 7 ));
            rec.lcsno := Convert( slices, 8 );
            rec.pid := Convert( slices, 9 );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Cohabit_component ).start_pos = 0 ) then
               index.pointers( Cohabit_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Cohabit_component ).counter := index.pointers( Cohabit_component ).counter + 1;
            Put_Index( index_map, index );
            Cohabit_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Cohabit_IO.Close( bin_file );
   end Create_Cohabit_Wave_L;




   procedure Create_Egoalt_Wave_L( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Egoalt_IO.File_Type;
      rec         : Egoalt_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Egoalt_IO.Create (bin_file, Egoalt_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.opno := Convert( slices, 3, (  1 .. 0 => -9 ) );
            rec.rel := Convert_Rel_Type( Get( slices, 4 ));
            rec.sex := Convert_Sex_Type( Get( slices, 5 ));
            rec.osex := Convert_Hgsex_Type( Get( slices, 6 ));
            rec.lwstat := Convert_Lwstat_Type( Get( slices, 7 ));
            rec.nwstat := Convert_Nwstat_Type( Get( slices, 8 ));
            rec.pid := Convert( slices, 9 );
            rec.opid := Convert( slices, 10 );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Egoalt_component ).start_pos = 0 ) then
               index.pointers( Egoalt_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Egoalt_component ).counter := index.pointers( Egoalt_component ).counter + 1;
            Put_Index( index_map, index );
            Egoalt_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Egoalt_IO.Close( bin_file );
   end Create_Egoalt_Wave_L;




   procedure Create_Hhresp_Wave_L( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Hhresp_IO.File_Type;
      rec         : Hhresp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Hhresp_IO.Create (bin_file, Hhresp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.hhdoi := Convert( slices, 2, ( -9, -8, -7 ) );
            rec.hhmoi := Convert_Doim_Type( Get( slices, 3 ));
            rec.hhyoi4 := Convert( slices, 4, ( -9, -8, -7, -2, -1 ) );
            rec.hhsoih := Convert( slices, 5, ( -9, -8, -7 ) );
            rec.hhsoim := Convert( slices, 6, ( -9, -8, -7 ) );
            rec.hstype := Convert_Hstype_Type( Get( slices, 7 ));
            rec.hsrins := Convert_Cjsck2_Type( Get( slices, 8 ));
            rec.hsroom := Convert( slices, 9, ( -9, -8, -7, -2, -1 ) );
            rec.hsownd := Convert_Hsownd_Type( Get( slices, 10 ));
            rec.hsowr1 := Convert( slices, 11, ( -9, -8, -7, -2, -1 ) );
            rec.hsowr2 := Convert( slices, 12, ( -9, -8, -7, -2, -1 ) );
            rec.hsval := Convert( slices, 13, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.mghave := Convert_Mghave_Type( Get( slices, 14 ));
            rec.hsowrp := Convert_Bscon_Type( Get( slices, 15 ));
            rec.mgynot := Convert_Mgynot_Type( Get( slices, 16 ));
            rec.hscost := Convert( slices, 17, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.hsyr04 := Convert( slices, 18, ( -9, -8, -7, -2, -1 ) );
            rec.mgyr04 := Convert( slices, 19, ( -9, -8, -7, -2, -1 ) );
            rec.mgly := Convert_Bscon_Type( Get( slices, 20 ));
            rec.hsivlw := Convert( slices, 21, ( -9, -8, -7, -2, -1 ) );
            rec.mgold := Convert( slices, 22, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.mglife := Convert( slices, 23, ( -9, -8, -7, -2, -1 ) );
            rec.mgtype := Convert_Mgtype_Type( Get( slices, 24 ));
            rec.mgxtra := Convert_Bscon_Type( Get( slices, 25 ));
            rec.mgnew := Convert( slices, 26, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.mgxty1 := Convert_Mgxty1_Type( Get( slices, 27 ));
            rec.mgxty2 := Convert_Mgxty2_Type( Get( slices, 28 ));
            rec.mgxty3 := Convert_Mgxty3_Type( Get( slices, 29 ));
            rec.mgxty4 := Convert_Mgxty4_Type( Get( slices, 30 ));
            rec.mgxty5 := Convert_Mgxty5_Type( Get( slices, 31 ));
            rec.xpmg := Convert( slices, 32, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.xpmg1 := Convert_Bscon_Type( Get( slices, 33 ));
            rec.xpmg2 := Convert_Bscon_Type( Get( slices, 34 ));
            rec.xpmg3 := Convert_Bscon_Type( Get( slices, 35 ));
            rec.xpmg4 := Convert_Bscon_Type( Get( slices, 36 ));
            rec.hsjb := Convert_Bscon_Type( Get( slices, 37 ));
            rec.rentp1 := Convert( slices, 38, ( -9, -8, -7, -2, -1 ) );
            rec.rentp2 := Convert( slices, 39, ( -9, -8, -7, -2, -1 ) );
            rec.rentll := Convert_Rentll_Type( Get( slices, 40 ));
            rec.rentf := Convert_Rentf_Type( Get( slices, 41 ));
            rec.rent := Convert( slices, 42, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.rentw := Convert( slices, 43, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.rent1 := Convert_Rent1_Type( Get( slices, 44 ));
            rec.rent2 := Convert_Rent1_Type( Get( slices, 45 ));
            rec.rent3 := Convert_Bscon_Type( Get( slices, 46 ));
            rec.rent4 := Convert_Bscon_Type( Get( slices, 47 ));
            rec.rent5 := Convert_Bscon_Type( Get( slices, 48 ));
            rec.rent6 := Convert_Bscon_Type( Get( slices, 49 ));
            rec.rent7 := Convert_Rent7_Type( Get( slices, 50 ));
            rec.rent8 := Convert_Coh1mr_Type( Get( slices, 51 ));
            rec.renthb := Convert_Renthb_Type( Get( slices, 52 ));
            rec.rentg := Convert( slices, 53, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.rentgw := Convert( slices, 54, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.xphsdf := Convert( slices, 55, ( -9, -8, -7, -2, -1 ) );
            rec.xphsd1 := Convert_Bscon_Type( Get( slices, 56 ));
            rec.xphsd2 := Convert_Bscon_Type( Get( slices, 57 ));
            rec.xphsdb := Convert_Bscon_Type( Get( slices, 58 ));
            rec.hskch := Convert_Boolean_With_Missing( Get( slices, 59 ));
            rec.hskchs := Convert_Boolean_With_Missing( Get( slices, 60 ));
            rec.hsbth := Convert_Boolean_With_Missing( Get( slices, 61 ));
            rec.hsbths := Convert_Boolean_With_Missing( Get( slices, 62 ));
            rec.hstlt := Convert_Boolean_With_Missing( Get( slices, 63 ));
            rec.hstlts := Convert_Boolean_With_Missing( Get( slices, 64 ));
            rec.hsgdn := Convert_Boolean_With_Missing( Get( slices, 65 ));
            rec.hsgdns := Convert_Boolean_With_Missing( Get( slices, 66 ));
            rec.xpgasy := Convert( slices, 67, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.xplecy := Convert( slices, 68, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.xpoily := Convert( slices, 69, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.xpsfly := Convert( slices, 70, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.heatch := Convert_Bscon_Type( Get( slices, 71 ));
            rec.heatyp := Convert_Heatyp_Type( Get( slices, 72 ));
            rec.hsprbg := Convert_Boolean_With_Missing( Get( slices, 73 ));
            rec.hsprbh := Convert_Boolean_With_Missing( Get( slices, 74 ));
            rec.hsprbi := Convert_Boolean_With_Missing( Get( slices, 75 ));
            rec.hsprbj := Convert_Boolean_With_Missing( Get( slices, 76 ));
            rec.hsprbk := Convert_Boolean_With_Missing( Get( slices, 77 ));
            rec.hsprbl := Convert_Boolean_With_Missing( Get( slices, 78 ));
            rec.hsprbm := Convert_Boolean_With_Missing( Get( slices, 79 ));
            rec.hsprbn := Convert_Boolean_With_Missing( Get( slices, 80 ));
            rec.hsprbo := Convert_Boolean_With_Missing( Get( slices, 81 ));
            rec.hsprbp := Convert_Boolean_With_Missing( Get( slices, 82 ));
            rec.hsprbq := Convert_Boolean_With_Missing( Get( slices, 83 ));
            rec.hsctax := Convert_Hsctax_Type( Get( slices, 84 ));
            rec.hs2ownd := Convert_Bscon_Type( Get( slices, 85 ));
            rec.hs2valo := Convert( slices, 86, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.hs2vala := Convert_Hldsbl1_Type( Get( slices, 87 ));
            rec.hs2valb := Convert_Hldsbl1_Type( Get( slices, 88 ));
            rec.hs2valc := Convert_Hldsbl1_Type( Get( slices, 89 ));
            rec.hs2vald := Convert_Hldsbl1_Type( Get( slices, 90 ));
            rec.mgtot := Convert( slices, 91, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.cdhave := Convert_Bscon_Type( Get( slices, 92 ));
            rec.cdbght := Convert_Bscon_Type( Get( slices, 93 ));
            rec.cd1use := Convert_Cd1new_Type( Get( slices, 94 ));
            rec.cd1new := Convert( slices, 95, ( -9, -8, -7, -2, -1 ) );
            rec.cd1cst := Convert( slices, 96, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd2use := Convert_Cd1new_Type( Get( slices, 97 ));
            rec.cd2new := Convert( slices, 98, ( -9, -8, -7, -2, -1 ) );
            rec.cd2cst := Convert( slices, 99, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd3use := Convert_Cd1new_Type( Get( slices, 100 ));
            rec.cd3new := Convert( slices, 101, ( -9, -8, -7, -2, -1 ) );
            rec.cd3cst := Convert( slices, 102, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd4use := Convert_Cd1new_Type( Get( slices, 103 ));
            rec.cd4new := Convert( slices, 104, ( -9, -8, -7, -2, -1 ) );
            rec.cd4cst := Convert( slices, 105, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd5use := Convert_Cd1new_Type( Get( slices, 106 ));
            rec.cd5new := Convert( slices, 107, ( -9, -8, -7, -2, -1 ) );
            rec.cd5cst := Convert( slices, 108, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd6use := Convert_Cd1new_Type( Get( slices, 109 ));
            rec.cd6new := Convert( slices, 110, ( -9, -8, -7, -2, -1 ) );
            rec.cd6cst := Convert( slices, 111, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd7use := Convert_Cd1new_Type( Get( slices, 112 ));
            rec.cd7new := Convert( slices, 113, ( -9, -8, -7, -2, -1 ) );
            rec.cd7cst := Convert( slices, 114, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd8use := Convert_Cd1new_Type( Get( slices, 115 ));
            rec.cd8new := Convert( slices, 116, ( -9, -8, -7, -2, -1 ) );
            rec.cd8cst := Convert( slices, 117, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd9use := Convert_Cd1new_Type( Get( slices, 118 ));
            rec.cd9new := Convert( slices, 119, ( -9, -8, -7, -2, -1 ) );
            rec.cd9cst := Convert( slices, 120, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd10use := Convert_Cd10new_Type( Get( slices, 121 ));
            rec.cd10new := Convert( slices, 122, ( -9, -8, -7, -2, -1 ) );
            rec.cd10cst := Convert( slices, 123, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd11use := Convert_Cd10new_Type( Get( slices, 124 ));
            rec.cd11new := Convert( slices, 125, ( -9, -8, -7, -2, -1 ) );
            rec.cd11cst := Convert( slices, 126, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd12use := Convert_Cd10new_Type( Get( slices, 127 ));
            rec.cd12new := Convert( slices, 128, ( -9, -8, -7, -2, -1 ) );
            rec.cd12cst := Convert( slices, 129, ( -9, -8, -7, -3, -2, -1 ) );
            rec.pcnet := Convert_Boolean_With_Missing( Get( slices, 130 ));
            rec.xphp := Convert_Bscon_Type( Get( slices, 131 ));
            rec.xphpdf := Convert_Xphpdf_Type( Get( slices, 132 ));
            rec.hscana := Convert_Boolean_With_Missing( Get( slices, 133 ));
            rec.hscnta := Convert_Boolean_With_Missing( Get( slices, 134 ));
            rec.hscanb := Convert_Boolean_With_Missing( Get( slices, 135 ));
            rec.hscntb := Convert_Boolean_With_Missing( Get( slices, 136 ));
            rec.hscanc := Convert_Boolean_With_Missing( Get( slices, 137 ));
            rec.hscntc := Convert_Boolean_With_Missing( Get( slices, 138 ));
            rec.hscand := Convert_Boolean_With_Missing( Get( slices, 139 ));
            rec.hscntd := Convert_Boolean_With_Missing( Get( slices, 140 ));
            rec.hscane := Convert_Boolean_With_Missing( Get( slices, 141 ));
            rec.hscnte := Convert_Boolean_With_Missing( Get( slices, 142 ));
            rec.hscanf := Convert_Boolean_With_Missing( Get( slices, 143 ));
            rec.hscntf := Convert_Boolean_With_Missing( Get( slices, 144 ));
            rec.xpfood := Convert( slices, 145, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ncars := Convert_Ncars_Type( Get( slices, 146 ));
            rec.carown := Convert_Carown_Type( Get( slices, 147 ));
            rec.carval := Convert( slices, 148, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ivh1 := Convert( slices, 149, ( -9, -8, -7, -1 ) );
            rec.ivh2 := Convert( slices, 150, ( -9, -8, -7 ) );
            rec.ivh3 := Convert( slices, 151, ( -9, -8, -7 ) );
            rec.hhfoih := Convert( slices, 152, ( -9, -8, -7 ) );
            rec.hhfoim := Convert( slices, 153, ( -9, -8, -7 ) );
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 154 ));
            rec.hhorig := Convert_Hhorig_Type( Get( slices, 155 ));
            rec.hhdc := Convert_Hhdc_Type( Get( slices, 156 ));
            rec.xhwght := Convert( slices, 157, ( -9.0, -8.0 ) );
            rec.hhsize := Convert( slices, 158, ( -9, -8 ) );
            rec.hhtype := Convert_Hhtype_Type( Get( slices, 159 ));
            rec.region := Convert_Region_Type( Get( slices, 160 ));
            rec.nch02 := Convert( slices, 161, ( -9, -8 ) );
            rec.nch34 := Convert( slices, 162, ( -9, -8 ) );
            rec.nch511 := Convert( slices, 163, ( -9, -8 ) );
            rec.nch1215 := Convert( slices, 164, ( -9, -8 ) );
            rec.nch1618 := Convert( slices, 165, ( -9, -8 ) );
            rec.nkids := Convert( slices, 166, ( -9, -8 ) );
            rec.nwed := Convert( slices, 167, ( -9, -8 ) );
            rec.npens := Convert( slices, 168, ( -9, -8 ) );
            rec.na75pl := Convert( slices, 169, ( -9, -8 ) );
            rec.agechy := Convert( slices, 170, ( -9, -8 ) );
            rec.ncouple := Convert( slices, 171, ( -9, -8 ) );
            rec.nonepar := Convert( slices, 172, ( -9, -8 ) );
            rec.nemp := Convert( slices, 173, ( -9, -8 ) );
            rec.nwage := Convert( slices, 174, ( -9, -8 ) );
            rec.tenure := Convert_Tenure_Type( Get( slices, 175 ));
            rec.xphsn := Convert( slices, 176, ( -9.0, -8.0, -7.0 ) );
            rec.xphsg := Convert( slices, 177, ( -9.0, -8.0, -7.0 ) );
            rec.fieqfcb := Convert( slices, 178, ( -9.0, -8.0 ) );
            rec.fieqfca := Convert( slices, 179, ( -9.0, -8.0 ) );
            rec.fihhyr := Convert( slices, 180, ( -9.0, -8.0, -7.0 ) );
            rec.fihhmn := Convert( slices, 181, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyl := Convert( slices, 182, ( -9.0, -8.0, -7.0 ) );
            rec.fihhynl := Convert( slices, 183, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyp := Convert( slices, 184, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyb := Convert( slices, 185, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyt := Convert( slices, 186, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyi := Convert( slices, 187, ( -9.0, -8.0, -7.0 ) );
            rec.fihhml := Convert( slices, 188, (  1 .. 0 => -9.0 ) );
            rec.fihhmnl := Convert( slices, 189, (  1 .. 0 => -9.0 ) );
            rec.fihhmp := Convert( slices, 190, (  1 .. 0 => -9.0 ) );
            rec.fihhmb := Convert( slices, 191, (  1 .. 0 => -9.0 ) );
            rec.fihhmt := Convert( slices, 192, (  1 .. 0 => -9.0 ) );
            rec.fihhmi := Convert( slices, 193, (  1 .. 0 => -9.0 ) );
            rec.hhmove := Convert_Hhmove_Type( Get( slices, 194 ));
            rec.mgnewi := Convert( slices, 195, ( -9, -8, -7, -2, -1 ) );
            rec.xpmgi := Convert( slices, 196, ( -9, -8, -7, -2, -1 ) );
            rec.hsvali := Convert( slices, 197, ( -9, -8, -7, -2, -1 ) );
            rec.renti := Convert( slices, 198, ( -9, -8, -7, -4, -3, -2, -1 ) );
            rec.rentgi := Convert( slices, 199, ( -9, -8, -7, -2, -1 ) );
            rec.xphsni := Convert_Jhgpayi_Type( Get( slices, 200 ));
            rec.xphsgi := Convert_Jhgpayi_Type( Get( slices, 201 ));
            rec.fihhmni := Convert_Fihhmni_Type( Get( slices, 202 ));
            rec.fihhmli := Convert_Fihhmbi_Type( Get( slices, 203 ));
            rec.fihmnli := Convert_Fihhmbi_Type( Get( slices, 204 ));
            rec.fihhmpi := Convert_Fihhmbi_Type( Get( slices, 205 ));
            rec.fihhmbi := Convert_Fihhmbi_Type( Get( slices, 206 ));
            rec.fihhmti := Convert_Fihhmbi_Type( Get( slices, 207 ));
            rec.fihhmii := Convert_Fihhmbi_Type( Get( slices, 208 ));
            rec.fihhyri := Convert_Fihhmbi_Type( Get( slices, 209 ));
            rec.fihhyli := Convert_Fihhmbi_Type( Get( slices, 210 ));
            rec.fihhyni := Convert_Fihhmbi_Type( Get( slices, 211 ));
            rec.fihhypi := Convert_Fihhmbi_Type( Get( slices, 212 ));
            rec.fihhybi := Convert_Fihhmbi_Type( Get( slices, 213 ));
            rec.fihhyti := Convert_Fihhmbi_Type( Get( slices, 214 ));
            rec.fihhyii := Convert_Fihhmbi_Type( Get( slices, 215 ));
            rec.fihhsel := Convert_Fihhsel_Type( Get( slices, 216 ));
            rec.xhwtuk1 := Convert( slices, 217, ( -9.0, -8.0 ) );
            rec.xhwtuk2 := Convert( slices, 218, ( -9.0, -8.0 ) );
            rec.region2 := Convert_Region2_Type( Get( slices, 219 ));
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Hhresp_component ).start_pos = 0 ) then
               index.pointers( Hhresp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Hhresp_component ).counter := index.pointers( Hhresp_component ).counter + 1;
            Put_Index( index_map, index );
            Hhresp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Hhresp_IO.Close( bin_file );
   end Create_Hhresp_Wave_L;




   procedure Create_Hhsamp_Wave_L( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Hhsamp_IO.File_Type;
      rec         : Hhsamp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Hhsamp_IO.Create (bin_file, Hhsamp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.fid := Convert( slices, 2 );
            rec.ivnadd := Convert( slices, 3, ( -9.0, -8.0 ) );
            rec.ivia := Convert_Ivia_Type( Get( slices, 4 ));
--             rec.ivid := Convert( slices, 5 );
            rec.ivlnc := Convert( slices, 6, ( -9, -1 ) );
            rec.ivtnc := Convert( slices, 7, ( -9, -8, -1 ) );
            rec.iviam := Convert_Iviam_Type( Get( slices, 8 ));
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 9 ));
            rec.ivosmrh := Convert( slices, 10, ( -9, -8, -1 ) );
            rec.ivnsmrh := Convert( slices, 11, ( -9, -8, -1 ) );
            rec.ivrrefh := Convert_Ivrrefh_Type( Get( slices, 12 ));
            rec.ivisst := Convert_Ivisst_Type( Get( slices, 13 ));
            rec.ivconv := Convert_Ivconv_Type( Get( slices, 14 ));
            rec.ivreis := Convert_Ivreis_Type( Get( slices, 15 ));
            rec.hhdc := Convert_Hhdc_Type( Get( slices, 16 ));
            rec.hhorig := Convert_Hhorig_Type( Get( slices, 17 ));
            rec.xhwght := Convert( slices, 18, ( -9.0, -8.0, -1.0 ) );
            rec.region := Convert_Region_Type( Get( slices, 19 ));
            rec.hhmove := Convert_Hhmove_Type( Get( slices, 20 ));
            rec.ahid := Convert( slices, 21 );
            rec.xhwtuk1 := Convert( slices, 22, ( -9.0, -8.0, -1.0 ) );
            rec.xhwtuk2 := Convert( slices, 23, ( -9.0, -8.0, -1.0 ) );
            rec.strata := Convert( slices, 24, ( -9, -8, -1 ) );
            rec.psu := Convert( slices, 25, ( -9, -8, -1 ) );
            rec.region2 := Convert_Region2_Type( Get( slices, 26 ));
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Hhsamp_component ).start_pos = 0 ) then
               index.pointers( Hhsamp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Hhsamp_component ).counter := index.pointers( Hhsamp_component ).counter + 1;
            Put_Index( index_map, index );
            Hhsamp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Hhsamp_IO.Close( bin_file );
   end Create_Hhsamp_Wave_L;




   procedure Create_Income_Wave_L( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Income_IO.File_Type;
      rec         : Income_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Income_IO.Create (bin_file, Income_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.pno := Convert( slices, 1 );
            rec.ficode := Convert_Ficode_Type( Get( slices, 2 ));
            rec.frall := Convert_Frall_Type( Get( slices, 3 ));
            rec.fr01 := Convert_Cd1own_Type( Get( slices, 4 ));
            rec.fr02 := Convert_Cd1own_Type( Get( slices, 5 ));
            rec.fr03 := Convert_Cd1own_Type( Get( slices, 6 ));
            rec.fr04 := Convert( slices, 7, ( -9, -8, -2, -1 ) );
            rec.fr05 := Convert_Cd1own_Type( Get( slices, 8 ));
            rec.fr06 := Convert_Cd1own_Type( Get( slices, 9 ));
            rec.fr07 := Convert_Cd1own_Type( Get( slices, 10 ));
            rec.fr08 := Convert_Cd1own_Type( Get( slices, 11 ));
            rec.fr09 := Convert_Cd1own_Type( Get( slices, 12 ));
            rec.fr10 := Convert_Cd1own_Type( Get( slices, 13 ));
            rec.fr11 := Convert_Cd1own_Type( Get( slices, 14 ));
            rec.fr12 := Convert_Cd1own_Type( Get( slices, 15 ));
            rec.fr13 := Convert_Cd1own_Type( Get( slices, 16 ));
            rec.fr14 := Convert_Cd1own_Type( Get( slices, 17 ));
            rec.fr15 := Convert_Cd1own_Type( Get( slices, 18 ));
            rec.fr16 := Convert_Cd1own_Type( Get( slices, 19 ));
            rec.fr17 := Convert_Cd1own_Type( Get( slices, 20 ));
            rec.fr18 := Convert_Fr18_Type( Get( slices, 21 ));
            rec.fr19 := Convert_Fr18_Type( Get( slices, 22 ));
            rec.fr20 := Convert_Fr18_Type( Get( slices, 23 ));
            rec.frnow := Convert_Frnow_Type( Get( slices, 24 ));
            rec.frval := Convert( slices, 25, ( -9.0, -8.0, -3.0, -2.0, -1.0 ) );
            rec.frw := Convert( slices, 26, ( -9.0, -8.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.frjt := Convert_Frjt_Type( Get( slices, 27 ));
            rec.frjtpn := Convert( slices, 28, ( -9, -8, -2, -1 ) );
            rec.hid := Convert( slices, 29 );
            rec.fiseq := Convert( slices, 30 );
            rec.fim09l := Convert( slices, 31, ( -9.0, -8.0, -3.0 ) );
            rec.fim10l := Convert( slices, 32, ( -9.0, -8.0, -3.0 ) );
            rec.fim11l := Convert( slices, 33, ( -9.0, -8.0, -3.0 ) );
            rec.fim12l := Convert( slices, 34, ( -9.0, -8.0, -3.0 ) );
            rec.fim01t := Convert( slices, 35, ( -9.0, -8.0, -3.0 ) );
            rec.fim02t := Convert( slices, 36, ( -9.0, -8.0, -3.0 ) );
            rec.fim03t := Convert( slices, 37, ( -9.0, -8.0, -3.0 ) );
            rec.fim04t := Convert( slices, 38, ( -9.0, -8.0, -3.0 ) );
            rec.fim05t := Convert( slices, 39, ( -9.0, -8.0, -3.0 ) );
            rec.fim06t := Convert( slices, 40, ( -9.0, -8.0, -3.0 ) );
            rec.fim07t := Convert( slices, 41, ( -9.0, -8.0, -3.0 ) );
            rec.fim08t := Convert( slices, 42, ( -9.0, -8.0, -3.0 ) );
            rec.fim09t := Convert( slices, 43, ( -9.0, -8.0, -3.0 ) );
            rec.fim10t := Convert( slices, 44, ( -9.0, -8.0, -3.0 ) );
            rec.fim11t := Convert( slices, 45, ( -9.0, -8.0, -3.0 ) );
            rec.fim12t := Convert( slices, 46, ( -9.0, -8.0, -3.0 ) );
            rec.fim01n := Convert( slices, 47, ( -9.0, -8.0, -3.0 ) );
            rec.fim02n := Convert( slices, 48, ( -9.0, -3.0 ) );
            rec.fim03n := Convert( slices, 49, ( -9.0, -3.0 ) );
            rec.fim04n := Convert( slices, 50, ( -9.0, -3.0 ) );
            rec.frjtvf := Convert_Frjtvf_Type( Get( slices, 51 ));
            rec.frvali := Convert( slices, 52, ( -9, -8, -3, -2, -1 ) );
            rec.pid := Convert( slices, 53 );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Income_component ).start_pos = 0 ) then
               index.pointers( Income_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Income_component ).counter := index.pointers( Income_component ).counter + 1;
            Put_Index( index_map, index );
            Income_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Income_IO.Close( bin_file );
   end Create_Income_Wave_L;




   procedure Create_Indall_Wave_L( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Indall_IO.File_Type;
      rec         : Indall_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Indall_IO.Create (bin_file, Indall_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.pid := Convert( slices, 3 );
            rec.iviolw := Convert_Iviolw_Type( Get( slices, 4 ));
            rec.ivstat1 := Convert_Ivstat1_Type( Get( slices, 5 ));
            rec.hhmem := Convert_Hhmem_Type( Get( slices, 6 ));
            rec.newhy := Convert_Newhy_Type( Get( slices, 7 ));
            rec.nemnjn := Convert_Nemnjn_Type( Get( slices, 8 ));
            rec.neyrjn4 := Convert( slices, 9, ( -9, -8, -7, -2, -1 ) );
            rec.ivfio := Convert_Ivfio_Type( Get( slices, 10 ));
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 11 ));
            rec.iodc := Convert_Iodc_Type( Get( slices, 12 ));
            rec.memorig := Convert_Memorig_Type( Get( slices, 13 ));
            rec.hgr2r := Convert_Hgr2r_Type( Get( slices, 14 ));
            rec.hgsex := Convert_Hgsex_Type( Get( slices, 15 ));
            rec.hgbm := Convert_Hgbm_Type( Get( slices, 16 ));
            rec.hgby := Convert( slices, 17, ( -9, -8, -2, -1 ) );
            rec.mastat := Convert_Mastat_Type( Get( slices, 18 ));
            rec.hgspn := Convert( slices, 19, ( -9, -8, -2, -1 ) );
            rec.hgemp := Convert_Hgemp_Type( Get( slices, 20 ));
            rec.hgfno := Convert( slices, 21, ( -9, -8, -2, -1 ) );
            rec.hgmno := Convert( slices, 22, ( -9, -8, -2, -1 ) );
            rec.hgra := Convert( slices, 23, ( -9, -8, -2, -1 ) );
            rec.age := Convert( slices, 24, ( -9, -8, -2, -1 ) );
            rec.age12 := Convert( slices, 25, ( -9, -8, -2, -1 ) );
            rec.butype := Convert_Butype_Type( Get( slices, 26 ));
            rec.buno := Convert( slices, 27, ( -9, -8 ) );
            rec.nchild := Convert( slices, 28, ( -9, -8 ) );
            rec.depchl := Convert_Depchl_Type( Get( slices, 29 ));
            rec.hoh := Convert_Hoh_Type( Get( slices, 30 ));
            rec.rach16 := Convert_Hhch12_Type( Get( slices, 31 ));
            rec.agei := Convert_Agei_Type( Get( slices, 32 ));
            rec.lrwght := Convert( slices, 33, ( -9.0, -8.0 ) );
            rec.lewght := Convert( slices, 34, ( -9.0, -8.0 ) );
            rec.xrwght := Convert( slices, 35, ( -9.0, -8.0 ) );
            rec.xewght := Convert( slices, 36, ( -9.0, -8.0 ) );
            rec.movest := Convert_Movest_Type( Get( slices, 37 ));
            rec.sampst := Convert_Sampst_Type( Get( slices, 38 ));
            rec.xrwtuk1 := Convert( slices, 39, ( -9.0, -8.0 ) );
            rec.xewtuk1 := Convert( slices, 40, ( -9.0, -8.0 ) );
            rec.xrwtuk2 := Convert( slices, 41, ( -9.0, -8.0 ) );
            rec.xewtuk2 := Convert( slices, 42, ( -9.0, -8.0 ) );
            rec.lrwtsw1 := Convert( slices, 43, ( -9.0, -8.0 ) );
            rec.lewtsw1 := Convert( slices, 44, ( -9.0, -8.0 ) );
            rec.lrwtsw2 := Convert( slices, 45, ( -9.0, -8.0 ) );
            rec.lewtsw2 := Convert( slices, 46, ( -9.0, -8.0 ) );
            rec.lrwtuk1 := Convert( slices, 47, ( -9.0, -8.0 ) );
            rec.lewtuk1 := Convert( slices, 48, ( -9.0, -8.0 ) );
            rec.lrwtuk2 := Convert( slices, 49, ( -9.0, -8.0 ) );
            rec.lewtuk2 := Convert( slices, 50, ( -9.0, -8.0 ) );
            rec.sppid := Convert( slices, 51 );
            rec.fpid := Convert( slices, 52 );
            rec.mpid := Convert( slices, 53 );
            rec.rapid := Convert( slices, 54 );
            rec.distmov := Convert( slices, 55, ( -9.0, -8.0 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Indall_component ).start_pos = 0 ) then
               index.pointers( Indall_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Indall_component ).counter := index.pointers( Indall_component ).counter + 1;
            Put_Index( index_map, index );
            Indall_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Indall_IO.Close( bin_file );
   end Create_Indall_Wave_L;




   procedure Create_Indresp_Wave_L( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Indresp_IO.File_Type;
      rec         : Indresp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Indresp_IO.Create (bin_file, Indresp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.doid := Convert( slices, 3, ( -9, -7 ) );
            rec.doim := Convert_Doim_Type( Get( slices, 4 ));
            rec.doiy4 := Convert( slices, 5, ( -9, -8, -7, -2, -1 ) );
            rec.ivsoih := Convert( slices, 6, ( -9, -8 ) );
            rec.ivsoim := Convert( slices, 7, ( -9, -8 ) );
            rec.ivlyr := Convert( slices, 8, ( -9, -8, -7 ) );
            rec.ivstat2 := Convert_Ivstat2_Type( Get( slices, 9 ));
            rec.lknbrd := Convert_Aidpl1_Type( Get( slices, 10 ));
            rec.lkmove := Convert_Lkmove_Type( Get( slices, 11 ));
            rec.lkmovy := Convert_Lkmovy_Type( Get( slices, 12 ));
            rec.xpmove := Convert( slices, 13, ( -9, -8, -7, -2, -1 ) );
            rec.plnew := Convert( slices, 14, ( -9, -8, -7, -2, -1 ) );
            rec.plnowm := Convert_Jbbgm1_Type( Get( slices, 15 ));
            rec.plnowy4 := Convert( slices, 16, ( -9, -8, -7, -2, -1 ) );
            rec.movjb := Convert_Aidpl1_Type( Get( slices, 17 ));
            rec.movjba := Convert_Movjba_Type( Get( slices, 18 ));
            rec.movjbb := Convert_Movjba_Type( Get( slices, 19 ));
            rec.movjbc := Convert_Movjba_Type( Get( slices, 20 ));
            rec.movjbd := Convert_Movjba_Type( Get( slices, 21 ));
            rec.movjbe := Convert_Movjba_Type( Get( slices, 22 ));
            rec.movjbf := Convert_Movjba_Type( Get( slices, 23 ));
            rec.movjbg := Convert_Movjba_Type( Get( slices, 24 ));
            rec.movjbh := Convert_Movjba_Type( Get( slices, 25 ));
            rec.movjbi := Convert_Movjba_Type( Get( slices, 26 ));
            rec.movy1 := Convert_Movy1_Type( Get( slices, 27 ));
            rec.movy2 := Convert_Movy2_Type( Get( slices, 28 ));
            rec.dobm := Convert_Cjsem_Type( Get( slices, 29 ));
            rec.doby := Convert( slices, 30, ( -9, -8, -7, -2, -1 ) );
            rec.sex := Convert_Sex_Type( Get( slices, 31 ));
            rec.mlstat := Convert_Mlstat_Type( Get( slices, 32 ));
            rec.mlchng := Convert_Bscon_Type( Get( slices, 33 ));
            rec.mlchm := Convert_Mlchm_Type( Get( slices, 34 ));
            rec.mlchy4 := Convert( slices, 35, ( -9, -8, -7, -2, -1 ) );
            rec.jbstat := Convert_Jbstat_Type( Get( slices, 36 ));
            rec.hifued := Convert_Hifued_Type( Get( slices, 37 ));
            rec.edlyr := Convert_Aidpl1_Type( Get( slices, 38 ));
            rec.edtype1 := Convert_Edtype1_Type( Get( slices, 39 ));
            rec.edblyr1 := Convert_Boolean_With_Missing( Get( slices, 40 ));
            rec.edbgm1 := Convert_Edbgm1_Type( Get( slices, 41 ));
            rec.edbgy1 := Convert( slices, 42, ( -9, -8, -7, -2, -1 ) );
            rec.edenm1 := Convert_Edbgm1_Type( Get( slices, 43 ));
            rec.edeny1 := Convert( slices, 44, ( -9, -8, -7, -2, -1 ) );
            rec.edenne1 := Convert_Edenne1_Type( Get( slices, 45 ));
            rec.edfeea1 := Convert_Yes_Or_Missing_Type( Get( slices, 46 ));
            rec.edfeeb1 := Convert_Yes_Or_Missing_Type( Get( slices, 47 ));
            rec.edfeec1 := Convert_Yes_Or_Missing_Type( Get( slices, 48 ));
            rec.edfeed1 := Convert_Yes_Or_Missing_Type( Get( slices, 49 ));
            rec.edfeee1 := Convert_Yes_Or_Missing_Type( Get( slices, 50 ));
            rec.edfeef1 := Convert_Yes_Or_Missing_Type( Get( slices, 51 ));
            rec.edfeeg1 := Convert_Yes_Or_Missing_Type( Get( slices, 52 ));
            rec.edqual1 := Convert_Edqual1_Type( Get( slices, 53 ));
            rec.edqnn1 := Convert( slices, 54, ( -9, -8, -7, -2, -1 ) );
            rec.edqla1 := Convert_Yes_Or_Missing_Type( Get( slices, 55 ));
            rec.edqlb1 := Convert_Yes_Or_Missing_Type( Get( slices, 56 ));
            rec.edqlc1 := Convert_Yes_Or_Missing_Type( Get( slices, 57 ));
            rec.edqld1 := Convert_Yes_Or_Missing_Type( Get( slices, 58 ));
            rec.edqle1 := Convert_Yes_Or_Missing_Type( Get( slices, 59 ));
            rec.edqlf1 := Convert_Yes_Or_Missing_Type( Get( slices, 60 ));
            rec.edqlg1 := Convert_Yes_Or_Missing_Type( Get( slices, 61 ));
            rec.edqlh1 := Convert_Yes_Or_Missing_Type( Get( slices, 62 ));
            rec.edqli1 := Convert_Yes_Or_Missing_Type( Get( slices, 63 ));
            rec.edqlj1 := Convert( slices, 64, ( -9, -8, -7 ) );
            rec.edqlan1 := Convert( slices, 65, ( -9, -8, -7, -2, -1 ) );
            rec.edqlbn1 := Convert( slices, 66, ( -9, -8, -7, -2, -1 ) );
            rec.edqlcn1 := Convert( slices, 67, ( -9, -8, -7, -2, -1 ) );
            rec.edqldn1 := Convert( slices, 68, ( -9, -8, -7, -2, -1 ) );
            rec.edqlen1 := Convert( slices, 69, ( -9, -8, -7, -2, -1 ) );
            rec.edqlfn1 := Convert( slices, 70, ( -9, -8, -7, -2, -1 ) );
            rec.edqlgn1 := Convert( slices, 71, ( -9, -8, -7, -2, -1 ) );
            rec.edqlhn1 := Convert( slices, 72, ( -9, -8, -7, -2, -1 ) );
            rec.edqlin1 := Convert( slices, 73, ( -9, -8, -7, -2, -1 ) );
            rec.edqljn1 := Convert( slices, 74, ( -9, -8, -7, -2, -1 ) );
            rec.edoqln1 := Convert( slices, 75, ( -9, -8, -7, -2, -1 ) );
            rec.edoql1 := Convert_Edoql1_Type( Get( slices, 76 ));
            rec.edmore1 := Convert_Boolean_With_Missing( Get( slices, 77 ));
            rec.edtype2 := Convert_Edtype1_Type( Get( slices, 78 ));
            rec.edblyr2 := Convert_Boolean_With_Missing( Get( slices, 79 ));
            rec.edbgm2 := Convert_Edbgm1_Type( Get( slices, 80 ));
            rec.edbgy2 := Convert( slices, 81, ( -9, -8, -7, -2, -1 ) );
            rec.edenm2 := Convert_Edbgm1_Type( Get( slices, 82 ));
            rec.edeny2 := Convert( slices, 83, ( -9, -8, -7, -2, -1 ) );
            rec.edenne2 := Convert_Edenne2_Type( Get( slices, 84 ));
            rec.edfeea2 := Convert_Yes_Or_Missing_Type( Get( slices, 85 ));
            rec.edfeeb2 := Convert_Yes_Or_Missing_Type( Get( slices, 86 ));
            rec.edfeec2 := Convert_Yes_Or_Missing_Type( Get( slices, 87 ));
            rec.edfeed2 := Convert_Yes_Or_Missing_Type( Get( slices, 88 ));
            rec.edfeee2 := Convert_Yes_Or_Missing_Type( Get( slices, 89 ));
            rec.edfeef2 := Convert_Yes_Or_Missing_Type( Get( slices, 90 ));
            rec.edfeeg2 := Convert_Yes_Or_Missing_Type( Get( slices, 91 ));
            rec.edqual2 := Convert_Edqual1_Type( Get( slices, 92 ));
            rec.edqnn2 := Convert( slices, 93, ( -9, -8, -7, -2, -1 ) );
            rec.edqla2 := Convert_Yes_Or_Missing_Type( Get( slices, 94 ));
            rec.edqlb2 := Convert_Yes_Or_Missing_Type( Get( slices, 95 ));
            rec.edqlc2 := Convert_Yes_Or_Missing_Type( Get( slices, 96 ));
            rec.edqld2 := Convert_Yes_Or_Missing_Type( Get( slices, 97 ));
            rec.edqle2 := Convert_Yes_Or_Missing_Type( Get( slices, 98 ));
            rec.edqlf2 := Convert_Yes_Or_Missing_Type( Get( slices, 99 ));
            rec.edqlg2 := Convert_Yes_Or_Missing_Type( Get( slices, 100 ));
            rec.edqlh2 := Convert_Yes_Or_Missing_Type( Get( slices, 101 ));
            rec.edqli2 := Convert_Yes_Or_Missing_Type( Get( slices, 102 ));
            rec.edqlj2 := Convert( slices, 103, ( -9, -8, -7 ) );
            rec.edqlan2 := Convert( slices, 104, ( -9, -8, -7, -2, -1 ) );
            rec.edqlbn2 := Convert( slices, 105, ( -9, -8, -7, -2, -1 ) );
            rec.edqlcn2 := Convert( slices, 106, ( -9, -8, -7, -2, -1 ) );
            rec.edqldn2 := Convert( slices, 107, ( -9, -8, -7, -2, -1 ) );
            rec.edqlen2 := Convert( slices, 108, ( -9, -8, -7, -2, -1 ) );
            rec.edqlfn2 := Convert( slices, 109, ( -9, -8, -7, -2, -1 ) );
            rec.edqlgn2 := Convert( slices, 110, ( -9, -8, -7, -2, -1 ) );
            rec.edqlhn2 := Convert( slices, 111, ( -9, -8, -7, -2, -1 ) );
            rec.edqlin2 := Convert( slices, 112, ( -9, -8, -7, -2, -1 ) );
            rec.edqljn2 := Convert( slices, 113, ( -9, -8, -7, -2, -1 ) );
            rec.edoqln2 := Convert( slices, 114, ( -9, -8, -7, -2, -1 ) );
            rec.edoql2 := Convert_Edoql1_Type( Get( slices, 115 ));
            rec.edmore2 := Convert_Boolean_With_Missing( Get( slices, 116 ));
            rec.plbornd := Convert_Plbornd_Type( Get( slices, 117 ));
            rec.plbornc := Convert_Plbornc_Type( Get( slices, 118 ));
            rec.yr2uk4 := Convert( slices, 119, ( -9, -8, -7, -2, -1 ) );
            rec.citzn1 := Convert( slices, 120, ( -9, -8, -7, -2, -1 ) );
            rec.citzn2 := Convert_Citzn2_Type( Get( slices, 121 ));
            rec.race := Convert_Race_Type( Get( slices, 122 ));
            rec.paju := Convert_Paju_Type( Get( slices, 123 ));
            rec.pasoc := Convert( slices, 124, ( -9, -8, -7, -2, -1 ) );
            rec.pasoc00 := Convert( slices, 125, ( -9, -8, -7, -2, -1 ) );
            rec.pasemp := Convert_J2semp_Type( Get( slices, 126 ));
            rec.paboss := Convert_Maboss_Type( Get( slices, 127 ));
            rec.pamngr := Convert_Mamngr_Type( Get( slices, 128 ));
            rec.maju := Convert_Maju_Type( Get( slices, 129 ));
            rec.masoc := Convert( slices, 130, ( -9, -8, -7, -2, -1 ) );
            rec.masoc00 := Convert( slices, 131, ( -9, -8, -7, -2, -1 ) );
            rec.masemp := Convert_J2semp_Type( Get( slices, 132 ));
            rec.maboss := Convert_Maboss_Type( Get( slices, 133 ));
            rec.mamngr := Convert_Mamngr_Type( Get( slices, 134 ));
            rec.j1none := Convert_J1none_Type( Get( slices, 135 ));
            rec.j1soc := Convert( slices, 136, ( -9, -8, -7, -2, -1 ) );
            rec.j1soc00 := Convert( slices, 137, ( -9, -8, -7, -2, -1 ) );
            rec.j1semp := Convert_J1semp_Type( Get( slices, 138 ));
            rec.j1boss := Convert_J1boss_Type( Get( slices, 139 ));
            rec.j1mngr := Convert_J1mngr_Type( Get( slices, 140 ));
            rec.lcoh := Convert_Aidpl1_Type( Get( slices, 141 ));
            rec.coh1bm := Convert_Ch1bm_Type( Get( slices, 142 ));
            rec.coh1by := Convert( slices, 143, ( -9, -8, -7, -2, -1 ) );
            rec.coh1mr := Convert_Coh1mr_Type( Get( slices, 144 ));
            rec.coh1em := Convert_Ch1bm_Type( Get( slices, 145 ));
            rec.coh1ey := Convert( slices, 146, ( -9, -8, -7, -2, -1 ) );
            rec.nmar := Convert_Nmar_Type( Get( slices, 147 ));
            rec.lmar1m := Convert_Ch1bm_Type( Get( slices, 148 ));
            rec.lmar1y := Convert( slices, 149, ( -9, -8, -7, -2, -1 ) );
            rec.lprnt := Convert_Lprnt_Type( Get( slices, 150 ));
            rec.lnprnt := Convert( slices, 151, ( -9, -8, -7, -2, -1 ) );
            rec.ch1bm := Convert_Ch1bm_Type( Get( slices, 152 ));
            rec.ch1by := Convert( slices, 153, ( -9, -8, -7, -2, -1 ) );
            rec.school := Convert_School_Type( Get( slices, 154 ));
            rec.scend := Convert( slices, 155, ( -9, -8, -7, -2, -1 ) );
            rec.sctype := Convert_Sctype_Type( Get( slices, 156 ));
            rec.scnow := Convert_Cjsck2_Type( Get( slices, 157 ));
            rec.fetype := Convert_Fetype_Type( Get( slices, 158 ));
            rec.fenow := Convert_Fenow_Type( Get( slices, 159 ));
            rec.feend := Convert( slices, 160, ( -9, -8, -7, -2, -1 ) );
            rec.qfhas := Convert_Bscon_Type( Get( slices, 161 ));
            rec.qfa := Convert_Qfa_Type( Get( slices, 162 ));
            rec.qfb := Convert_Qfb_Type( Get( slices, 163 ));
            rec.qfc := Convert_Qfc_Type( Get( slices, 164 ));
            rec.qfd := Convert_Qfd_Type( Get( slices, 165 ));
            rec.qfe := Convert_Qfe_Type( Get( slices, 166 ));
            rec.qff := Convert_Qff_Type( Get( slices, 167 ));
            rec.qfg := Convert_Qfg_Type( Get( slices, 168 ));
            rec.qfh := Convert_Qfh_Type( Get( slices, 169 ));
            rec.qfi := Convert_Qfi_Type( Get( slices, 170 ));
            rec.qfj := Convert_Qfj_Type( Get( slices, 171 ));
            rec.qfk := Convert_Qfk_Type( Get( slices, 172 ));
            rec.qfl := Convert_Qfl_Type( Get( slices, 173 ));
            rec.qfm := Convert_Qfm_Type( Get( slices, 174 ));
            rec.qfn := Convert_Qfn_Type( Get( slices, 175 ));
            rec.qfed := Convert_Bscon_Type( Get( slices, 176 ));
            rec.qfeda := Convert_Qfeda_Type( Get( slices, 177 ));
            rec.nqfeda := Convert( slices, 178, ( -9, -8, -7, -2, -1 ) );
            rec.qfedb := Convert_Qfedb_Type( Get( slices, 179 ));
            rec.nqfedb := Convert( slices, 180, ( -9, -8, -7, -2, -1 ) );
            rec.qfedc := Convert_Qfedc_Type( Get( slices, 181 ));
            rec.nqfedc := Convert( slices, 182, ( -9, -8, -7, -2, -1 ) );
            rec.qfedd := Convert_Qfedd_Type( Get( slices, 183 ));
            rec.nqfedd := Convert( slices, 184, ( -9, -8, -7, -2, -1 ) );
            rec.qfede := Convert_Qfede_Type( Get( slices, 185 ));
            rec.nqfede := Convert( slices, 186, ( -9, -8, -7, -2, -1 ) );
            rec.qfedf := Convert_Qfedf_Type( Get( slices, 187 ));
            rec.nqfedf := Convert( slices, 188, ( -9, -8, -7, -2, -1 ) );
            rec.qfedg := Convert_Qfedg_Type( Get( slices, 189 ));
            rec.nqfedg := Convert( slices, 190, ( -9, -8, -7, -2, -1 ) );
            rec.qfedh := Convert_Qfedh_Type( Get( slices, 191 ));
            rec.nqfedh := Convert( slices, 192, ( -9, -8, -7, -2, -1 ) );
            rec.qfedi := Convert_Qfedi_Type( Get( slices, 193 ));
            rec.nqfedi := Convert( slices, 194, ( -9, -8, -7, -2, -1 ) );
            rec.qfedj := Convert_Qfedj_Type( Get( slices, 195 ));
            rec.nqfedj := Convert( slices, 196, ( -9, -8, -7, -2, -1 ) );
            rec.qfedt := Convert_Qfedt_Type( Get( slices, 197 ));
            rec.nqfedt := Convert( slices, 198, ( -9, -8, -7, -2, -1 ) );
            rec.qfedu := Convert_Qfedu_Type( Get( slices, 199 ));
            rec.nqfedu := Convert( slices, 200, ( -9, -8, -7, -2, -1 ) );
            rec.qfedk := Convert_Qfedk_Type( Get( slices, 201 ));
            rec.nqfedk := Convert( slices, 202, ( -9, -8, -7, -2, -1 ) );
            rec.qfedl := Convert_Qfedl_Type( Get( slices, 203 ));
            rec.nqfedl := Convert( slices, 204, ( -9, -8, -7, -2, -1 ) );
            rec.qfedm := Convert_Qfedm_Type( Get( slices, 205 ));
            rec.nqfedm := Convert( slices, 206, ( -9, -8, -7, -2, -1 ) );
            rec.qfedn := Convert_Qfedn_Type( Get( slices, 207 ));
            rec.nqfedn := Convert( slices, 208, ( -9, -8, -7, -2, -1 ) );
            rec.qfedo := Convert_Qfedo_Type( Get( slices, 209 ));
            rec.nqfedo := Convert( slices, 210, ( -9, -8, -7, -2, -1 ) );
            rec.qfedp := Convert( slices, 211, ( -9, -8, -7 ) );
            rec.nqfedp := Convert( slices, 212, ( -9, -8, -7, -2, -1 ) );
            rec.qfedq := Convert_Qfedq_Type( Get( slices, 213 ));
            rec.nqfedq := Convert( slices, 214, ( -9, -8, -7, -2, -1 ) );
            rec.qfedr := Convert_Qfedr_Type( Get( slices, 215 ));
            rec.nqfedr := Convert( slices, 216, ( -9, -8, -7, -2, -1 ) );
            rec.qfeds := Convert_Hlprbm_Type( Get( slices, 217 ));
            rec.nqfeds := Convert( slices, 218, ( -9, -8, -7, -2, -1 ) );
            rec.unib := Convert_Unib_Type( Get( slices, 219 ));
            rec.unim := Convert_Unib_Type( Get( slices, 220 ));
            rec.train := Convert_Boolean_With_Missing( Get( slices, 221 ));
            rec.ntrain := Convert( slices, 222, ( -9, -8, -7, -2, -1 ) );
            rec.trplce1 := Convert_Trplce1_Type( Get( slices, 223 ));
            rec.trwhya1 := Convert_Boolean_With_Missing( Get( slices, 224 ));
            rec.trwhyb1 := Convert_Boolean_With_Missing( Get( slices, 225 ));
            rec.trwhyc1 := Convert_Boolean_With_Missing( Get( slices, 226 ));
            rec.trwhyd1 := Convert_Boolean_With_Missing( Get( slices, 227 ));
            rec.trwhye1 := Convert_Boolean_With_Missing( Get( slices, 228 ));
            rec.trq1 := Convert( slices, 229, ( -9, -8, -7 ) );
            rec.tru1 := Convert_Tru1_Type( Get( slices, 230 ));
            rec.trfeea1 := Convert_Nisjsa_Type( Get( slices, 231 ));
            rec.trfeeb1 := Convert_Yes_Or_Missing_Type( Get( slices, 232 ));
            rec.trfeec1 := Convert_Yes_Or_Missing_Type( Get( slices, 233 ));
            rec.trfeee1 := Convert_Yes_Or_Missing_Type( Get( slices, 234 ));
            rec.trfeef1 := Convert_Yes_Or_Missing_Type( Get( slices, 235 ));
            rec.trfeeg1 := Convert_Yes_Or_Missing_Type( Get( slices, 236 ));
            rec.trqlxp1 := Convert_Trqlxp1_Type( Get( slices, 237 ));
            rec.trqlac1 := Convert_Trqlac1_Type( Get( slices, 238 ));
            rec.trqlnn1 := Convert( slices, 239, ( -9, -8, -7, -2, -1 ) );
            rec.trqla1 := Convert_Yes_Or_Missing_Type( Get( slices, 240 ));
            rec.trqlb1 := Convert_Yes_Or_Missing_Type( Get( slices, 241 ));
            rec.trqlc1 := Convert_Yes_Or_Missing_Type( Get( slices, 242 ));
            rec.trqld1 := Convert_Yes_Or_Missing_Type( Get( slices, 243 ));
            rec.trqle1 := Convert_Yes_Or_Missing_Type( Get( slices, 244 ));
            rec.trqlf1 := Convert_Yes_Or_Missing_Type( Get( slices, 245 ));
            rec.trqlg1 := Convert_Yes_Or_Missing_Type( Get( slices, 246 ));
            rec.trqlh1 := Convert_Yes_Or_Missing_Type( Get( slices, 247 ));
            rec.trqli1 := Convert_Yes_Or_Missing_Type( Get( slices, 248 ));
            rec.trqlj1 := Convert( slices, 249, ( -9, -8, -7 ) );
            rec.trqlan1 := Convert( slices, 250, ( -9, -8, -7, -2, -1 ) );
            rec.trqlbn1 := Convert( slices, 251, ( -9, -8, -7, -2, -1 ) );
            rec.trqlcn1 := Convert( slices, 252, ( -9, -8, -7, -2, -1 ) );
            rec.trqldn1 := Convert( slices, 253, ( -9, -8, -7, -2, -1 ) );
            rec.trqlen1 := Convert( slices, 254, ( -9, -8, -7, -2, -1 ) );
            rec.trqlfn1 := Convert( slices, 255, ( -9, -8, -7, -2, -1 ) );
            rec.trqlgn1 := Convert( slices, 256, ( -9, -8, -7, -2, -1 ) );
            rec.trqlhn1 := Convert( slices, 257, ( -9, -8, -7, -2, -1 ) );
            rec.trqlin1 := Convert( slices, 258, ( -9, -8, -7, -2, -1 ) );
            rec.trqljn1 := Convert( slices, 259, ( -9, -8, -7, -2, -1 ) );
            rec.troqln1 := Convert( slices, 260, ( -9, -8, -7, -2, -1 ) );
            rec.troql1 := Convert_Troql1_Type( Get( slices, 261 ));
            rec.trmore1 := Convert_Boolean_With_Missing( Get( slices, 262 ));
            rec.trplce2 := Convert_Trplce1_Type( Get( slices, 263 ));
            rec.trwhya2 := Convert_Boolean_With_Missing( Get( slices, 264 ));
            rec.trwhyb2 := Convert_Boolean_With_Missing( Get( slices, 265 ));
            rec.trwhyc2 := Convert_Boolean_With_Missing( Get( slices, 266 ));
            rec.trwhyd2 := Convert_Boolean_With_Missing( Get( slices, 267 ));
            rec.trwhye2 := Convert_Boolean_With_Missing( Get( slices, 268 ));
            rec.trq2 := Convert( slices, 269, ( -9, -8, -7 ) );
            rec.tru2 := Convert_Tru1_Type( Get( slices, 270 ));
            rec.trfeea2 := Convert_Nisjsa_Type( Get( slices, 271 ));
            rec.trfeeb2 := Convert_Yes_Or_Missing_Type( Get( slices, 272 ));
            rec.trfeec2 := Convert_Yes_Or_Missing_Type( Get( slices, 273 ));
            rec.trfeee2 := Convert_Yes_Or_Missing_Type( Get( slices, 274 ));
            rec.trfeef2 := Convert_Yes_Or_Missing_Type( Get( slices, 275 ));
            rec.trfeeg2 := Convert_Yes_Or_Missing_Type( Get( slices, 276 ));
            rec.trqlxp2 := Convert_Trqlxp1_Type( Get( slices, 277 ));
            rec.trqlac2 := Convert_Trqlac1_Type( Get( slices, 278 ));
            rec.trqlnn2 := Convert( slices, 279, ( -9, -8, -7, -2, -1 ) );
            rec.trqla2 := Convert_Yes_Or_Missing_Type( Get( slices, 280 ));
            rec.trqlb2 := Convert_Yes_Or_Missing_Type( Get( slices, 281 ));
            rec.trqlc2 := Convert_Yes_Or_Missing_Type( Get( slices, 282 ));
            rec.trqld2 := Convert_Yes_Or_Missing_Type( Get( slices, 283 ));
            rec.trqle2 := Convert_Yes_Or_Missing_Type( Get( slices, 284 ));
            rec.trqlf2 := Convert_Yes_Or_Missing_Type( Get( slices, 285 ));
            rec.trqlg2 := Convert_Yes_Or_Missing_Type( Get( slices, 286 ));
            rec.trqlh2 := Convert_Yes_Or_Missing_Type( Get( slices, 287 ));
            rec.trqli2 := Convert_Yes_Or_Missing_Type( Get( slices, 288 ));
            rec.trqlj2 := Convert( slices, 289, ( -9, -8, -7 ) );
            rec.trqlan2 := Convert( slices, 290, ( -9, -8, -7, -2, -1 ) );
            rec.trqlbn2 := Convert( slices, 291, ( -9, -8, -7, -2, -1 ) );
            rec.trqlcn2 := Convert( slices, 292, ( -9, -8, -7, -2, -1 ) );
            rec.trqldn2 := Convert( slices, 293, ( -9, -8, -7, -2, -1 ) );
            rec.trqlen2 := Convert( slices, 294, ( -9, -8, -7, -2, -1 ) );
            rec.trqlfn2 := Convert( slices, 295, ( -9, -8, -7, -2, -1 ) );
            rec.trqlgn2 := Convert( slices, 296, ( -9, -8, -7, -2, -1 ) );
            rec.trqlhn2 := Convert( slices, 297, ( -9, -8, -7, -2, -1 ) );
            rec.trqlin2 := Convert( slices, 298, ( -9, -8, -7, -2, -1 ) );
            rec.trqljn2 := Convert( slices, 299, ( -9, -8, -7, -2, -1 ) );
            rec.troqln2 := Convert( slices, 300, ( -9, -8, -7, -2, -1 ) );
            rec.troql2 := Convert_Troql2_Type( Get( slices, 301 ));
            rec.trmore2 := Convert_Boolean_With_Missing( Get( slices, 302 ));
            rec.trplce3 := Convert_Trplce1_Type( Get( slices, 303 ));
            rec.trwhya3 := Convert_Boolean_With_Missing( Get( slices, 304 ));
            rec.trwhyb3 := Convert_Boolean_With_Missing( Get( slices, 305 ));
            rec.trwhyc3 := Convert_Boolean_With_Missing( Get( slices, 306 ));
            rec.trwhyd3 := Convert_Boolean_With_Missing( Get( slices, 307 ));
            rec.trwhye3 := Convert_Boolean_With_Missing( Get( slices, 308 ));
            rec.trq3 := Convert( slices, 309, ( -9, -8, -7 ) );
            rec.tru3 := Convert_Tru1_Type( Get( slices, 310 ));
            rec.trfeea3 := Convert_Nisjsa_Type( Get( slices, 311 ));
            rec.trfeeb3 := Convert_Yes_Or_Missing_Type( Get( slices, 312 ));
            rec.trfeec3 := Convert_Yes_Or_Missing_Type( Get( slices, 313 ));
            rec.trfeee3 := Convert_Yes_Or_Missing_Type( Get( slices, 314 ));
            rec.trfeef3 := Convert_Yes_Or_Missing_Type( Get( slices, 315 ));
            rec.trfeeg3 := Convert_Yes_Or_Missing_Type( Get( slices, 316 ));
            rec.trqlxp3 := Convert_Trqlxp1_Type( Get( slices, 317 ));
            rec.trqlac3 := Convert_Trqlac1_Type( Get( slices, 318 ));
            rec.trqlnn3 := Convert( slices, 319, ( -9, -8, -7, -2, -1 ) );
            rec.trqla3 := Convert_Yes_Or_Missing_Type( Get( slices, 320 ));
            rec.trqlb3 := Convert_Yes_Or_Missing_Type( Get( slices, 321 ));
            rec.trqlc3 := Convert_Yes_Or_Missing_Type( Get( slices, 322 ));
            rec.trqld3 := Convert_Yes_Or_Missing_Type( Get( slices, 323 ));
            rec.trqle3 := Convert_Yes_Or_Missing_Type( Get( slices, 324 ));
            rec.trqlf3 := Convert_Yes_Or_Missing_Type( Get( slices, 325 ));
            rec.trqlg3 := Convert_Yes_Or_Missing_Type( Get( slices, 326 ));
            rec.trqlh3 := Convert_Yes_Or_Missing_Type( Get( slices, 327 ));
            rec.trqli3 := Convert_Yes_Or_Missing_Type( Get( slices, 328 ));
            rec.trqlj3 := Convert( slices, 329, ( -9, -8, -7 ) );
            rec.trqlan3 := Convert( slices, 330, ( -9, -8, -7, -2, -1 ) );
            rec.trqlbn3 := Convert( slices, 331, ( -9, -8, -7, -2, -1 ) );
            rec.trqlcn3 := Convert( slices, 332, ( -9, -8, -7, -2, -1 ) );
            rec.trqldn3 := Convert( slices, 333, ( -9, -8, -7, -2, -1 ) );
            rec.trqlen3 := Convert( slices, 334, ( -9, -8, -7, -2, -1 ) );
            rec.trqlfn3 := Convert( slices, 335, ( -9, -8, -7, -2, -1 ) );
            rec.trqlgn3 := Convert( slices, 336, ( -9, -8, -7, -2, -1 ) );
            rec.trqlhn3 := Convert( slices, 337, ( -9, -8, -7, -2, -1 ) );
            rec.trqlin3 := Convert( slices, 338, ( -9, -8, -7, -2, -1 ) );
            rec.trqljn3 := Convert( slices, 339, ( -9, -8, -7, -2, -1 ) );
            rec.troqln3 := Convert( slices, 340, ( -9, -8, -7, -2, -1 ) );
            rec.troql3 := Convert_Troql2_Type( Get( slices, 341 ));
            rec.aglt20 := Convert_Aglt20_Type( Get( slices, 342 ));
            rec.scnow2 := Convert_Cjsck2_Type( Get( slices, 343 ));
            rec.infted := Convert_Aglt20_Type( Get( slices, 344 ));
            rec.edasp := Convert_Edasp_Type( Get( slices, 345 ));
            rec.fedasp := Convert_Fedasp_Type( Get( slices, 346 ));
            rec.fedtyp := Convert_Fedtyp_Type( Get( slices, 347 ));
            rec.fedlik := Convert_Fedlik_Type( Get( slices, 348 ));
            rec.fednt1 := Convert_Fednt1_Type( Get( slices, 349 ));
            rec.fednt2 := Convert_Fednt2_Type( Get( slices, 350 ));
            rec.ocfut := Convert( slices, 351, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ocimpa := Convert_Ocimpa_Type( Get( slices, 352 ));
            rec.ocimpb := Convert_Ocimpa_Type( Get( slices, 353 ));
            rec.ocimpc := Convert_Ocimpa_Type( Get( slices, 354 ));
            rec.ocimpd := Convert_Ocimpa_Type( Get( slices, 355 ));
            rec.ocimpe := Convert_Ocimpa_Type( Get( slices, 356 ));
            rec.ocimpf := Convert_Ocimpa_Type( Get( slices, 357 ));
            rec.ocimpg := Convert_Ocimpa_Type( Get( slices, 358 ));
            rec.ocimph := Convert_Ocimpa_Type( Get( slices, 359 ));
            rec.ocimpi := Convert_Ocimpa_Type( Get( slices, 360 ));
            rec.ocimpj := Convert_Ocimpa_Type( Get( slices, 361 ));
            rec.ocimpk := Convert_Ocimpa_Type( Get( slices, 362 ));
            rec.ocimpl := Convert_Ocimpa_Type( Get( slices, 363 ));
            rec.futra := Convert( slices, 364, ( -9, -8, -7, -3, -2, -1 ) );
            rec.futrb := Convert( slices, 365, ( -9, -8, -7, -3, -2, -1 ) );
            rec.futrc := Convert( slices, 366, ( -9, -8, -7, -3, -2, -1 ) );
            rec.futrd := Convert( slices, 367, ( -9, -8, -7, -3, -2, -1 ) );
            rec.futre := Convert( slices, 368, ( -9, -8, -7, -3, -2, -1 ) );
            rec.futrf := Convert( slices, 369, ( -9, -8, -7, -3, -2, -1 ) );
            rec.futrg := Convert( slices, 370, ( -9, -8, -7, -3, -2, -1 ) );
            rec.futrh := Convert( slices, 371, ( -9, -8, -7, -3, -2, -1 ) );
            rec.futri := Convert( slices, 372, ( -9, -8, -7, -3, -2, -1 ) );
            rec.futrj := Convert( slices, 373, ( -9, -8, -7, -3, -2, -1 ) );
            rec.crwora := Convert_Boolean_With_Missing( Get( slices, 374 ));
            rec.crworb := Convert_Crworb_Type( Get( slices, 375 ));
            rec.crdark := Convert_Crdark_Type( Get( slices, 376 ));
            rec.crgraf := Convert_Crburg_Type( Get( slices, 377 ));
            rec.crteen := Convert_Crburg_Type( Get( slices, 378 ));
            rec.crdrnk := Convert_Crburg_Type( Get( slices, 379 ));
            rec.crvand := Convert_Crburg_Type( Get( slices, 380 ));
            rec.crrace := Convert_Crburg_Type( Get( slices, 381 ));
            rec.crburg := Convert_Crburg_Type( Get( slices, 382 ));
            rec.crcar := Convert_Crburg_Type( Get( slices, 383 ));
            rec.crmugg := Convert_Crburg_Type( Get( slices, 384 ));
            rec.pcuse := Convert_Boolean_With_Missing( Get( slices, 385 ));
            rec.pcusea := Convert_Yes_Or_Missing_Type( Get( slices, 386 ));
            rec.pcuseb := Convert_Yes_Or_Missing_Type( Get( slices, 387 ));
            rec.pcusec := Convert_Yes_Or_Missing_Type( Get( slices, 388 ));
            rec.pcused := Convert_Yes_Or_Missing_Type( Get( slices, 389 ));
            rec.pcusee := Convert_Yes_Or_Missing_Type( Get( slices, 390 ));
            rec.pcusef := Convert_Yes_Or_Missing_Type( Get( slices, 391 ));
            rec.pcuseg := Convert_Yes_Or_Missing_Type( Get( slices, 392 ));
            rec.pcuseh := Convert_Yes_Or_Missing_Type( Get( slices, 393 ));
            rec.pcusei := Convert_Pcusei_Type( Get( slices, 394 ));
            rec.pcusem := Convert_Pcusem_Type( Get( slices, 395 ));
            rec.pcoftn := Convert_Pcoftn_Type( Get( slices, 396 ));
            rec.birhh := Convert_Aglt20_Type( Get( slices, 397 ));
            rec.mabwly := Convert_Aglt20_Type( Get( slices, 398 ));
            rec.mabwnly := Convert( slices, 399, ( -9, -8, -7 ) );
            rec.bwtpn1 := Convert( slices, 400, ( -9, -8, -7 ) );
            rec.bwtagm1 := Convert( slices, 401, ( -9, -8, -7 ) );
            rec.bwtxp1 := Convert_Boolean_With_Missing( Get( slices, 402 ));
            rec.bwtel1 := Convert_Bwtel_Type( Get( slices, 403 ));
            rec.bwtwk1 := Convert( slices, 404, ( -9, -8, -7, -2, -1 ) );
            rec.bwtkn1 := Convert_Bwtkn_Type( Get( slices, 405 ));
            rec.bwtlb1 := Convert( slices, 406, ( -9, -8, -7, -2, -1 ) );
            rec.bwtoz1 := Convert( slices, 407, ( -9, -8, -7, -2, -1 ) );
            rec.bwtgm1 := Convert( slices, 408, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.bwtg51 := Convert_Bwtg51_Type( Get( slices, 409 ));
            rec.bwtpn2 := Convert( slices, 410, ( -9, -8, -7 ) );
            rec.bwtagm2 := Convert( slices, 411, ( -9, -8, -7 ) );
            rec.bwtxp2 := Convert_Boolean_With_Missing( Get( slices, 412 ));
            rec.bwtel2 := Convert_Bwtel2_Type( Get( slices, 413 ));
            rec.bwtwk2 := Convert( slices, 414, ( -9, -8, -7, -2, -1 ) );
            rec.bwtkn2 := Convert_Bwtkn_Type( Get( slices, 415 ));
            rec.bwtlb2 := Convert( slices, 416, ( -9, -8, -7 ) );
            rec.bwtoz2 := Convert( slices, 417, ( -9, -8, -7, -2, -1 ) );
            rec.bwtgm2 := Convert( slices, 418, ( -9, -8, -7 ) );
            rec.bwtg52 := Convert_Bwtg5_Type( Get( slices, 419 ));
            rec.bwtpn3 := Convert( slices, 420, ( -9, -8, -7 ) );
            rec.bwtagm3 := Convert( slices, 421, ( -9, -8, -7 ) );
            rec.bwtxp3 := Convert_Boolean_With_Missing( Get( slices, 422 ));
            rec.bwtel3 := Convert_Bwtel2_Type( Get( slices, 423 ));
            rec.bwtwk3 := Convert( slices, 424, ( -9, -8, -7, -2, -1 ) );
            rec.bwtkn3 := Convert_Bwtkn_Type( Get( slices, 425 ));
            rec.bwtlb3 := Convert( slices, 426, ( -9, -8, -7 ) );
            rec.bwtoz3 := Convert( slices, 427, ( -9, -8, -7, -2, -1 ) );
            rec.bwtgm3 := Convert( slices, 428, ( -9, -8, -7 ) );
            rec.bwtg53 := Convert_Bwtg5_Type( Get( slices, 429 ));
            rec.natida := Convert_Yes_Or_Missing_Type( Get( slices, 430 ));
            rec.natidb := Convert_Yes_Or_Missing_Type( Get( slices, 431 ));
            rec.natidc := Convert_Yes_Or_Missing_Type( Get( slices, 432 ));
            rec.natidd := Convert_Yes_Or_Missing_Type( Get( slices, 433 ));
            rec.natide := Convert_Yes_Or_Missing_Type( Get( slices, 434 ));
            rec.natidf := Convert_Yes_Or_Missing_Type( Get( slices, 435 ));
            rec.natidj := Convert_Yes_Or_Missing_Type( Get( slices, 436 ));
            rec.natidg := Convert_Yes_Or_Missing_Type( Get( slices, 437 ));
            rec.natidh := Convert_Natidh_Type( Get( slices, 438 ));
            rec.natidi := Convert_Jbwkhrh_Type( Get( slices, 439 ));
            rec.natidmn := Convert_Natidmn_Type( Get( slices, 440 ));
            rec.wlsha := Convert_Yes_Or_Missing_Type( Get( slices, 441 ));
            rec.wlshb := Convert_Yes_Or_Missing_Type( Get( slices, 442 ));
            rec.wlshc := Convert_Yes_Or_Missing_Type( Get( slices, 443 ));
            rec.wlshd := Convert_Yes_Or_Missing_Type( Get( slices, 444 ));
            rec.wlshe := Convert_Jbwkhrh_Type( Get( slices, 445 ));
            rec.wlshua := Convert_Wlshua_Type( Get( slices, 446 ));
            rec.wlshub := Convert_Wlshua_Type( Get( slices, 447 ));
            rec.wlshuc := Convert_Wlshua_Type( Get( slices, 448 ));
            rec.wlshud := Convert_Wlshua_Type( Get( slices, 449 ));
            rec.wlshue := Convert_Wlshua_Type( Get( slices, 450 ));
            rec.lcmarm := Convert_Lcmarm_Type( Get( slices, 451 ));
            rec.lcmary4 := Convert( slices, 452, ( -8, -7, -1 ) );
            rec.lcmcoh := Convert_Lcmcoh_Type( Get( slices, 453 ));
            rec.lcmcbm := Convert_Lcmcbm_Type( Get( slices, 454 ));
            rec.lcmcby4 := Convert( slices, 455, ( -8, -7, -1 ) );
            rec.mpno := Convert( slices, 456, ( -9, -8, -7 ) );
            rec.lcmspm := Convert_Lcmspm_Type( Get( slices, 457 ));
            rec.lcmspy4 := Convert( slices, 458, ( -9, -8, -7, -1 ) );
            rec.lncoh := Convert( slices, 459, ( -9, -8, -7, -2, -1 ) );
            rec.ladopt := Convert_Aidpl1_Type( Get( slices, 460 ));
            rec.lnadopt := Convert( slices, 461, ( -8, -7 ) );
            rec.cbage := Convert_Cbage_Type( Get( slices, 462 ));
            rec.lchmor := Convert_Lchmor_Type( Get( slices, 463 ));
            rec.lchmorn := Convert( slices, 464, ( -9, -8, -7, -2, -1 ) );
            rec.ivla := Convert_Ivla_Type( Get( slices, 465 ));
            rec.ivlb := Convert_Ivlb_Type( Get( slices, 466 ));
            rec.ivlc := Convert_Ivlc_Type( Get( slices, 467 ));
            rec.ivld := Convert_Ivdd_Type( Get( slices, 468 ));
            rec.ivle := Convert_Ivee_Type( Get( slices, 469 ));
            rec.ledendm := Convert_Cjsbgm_Type( Get( slices, 470 ));
            rec.ledeny4 := Convert( slices, 471, ( -9, -8, -7, -2, -1 ) );
            rec.lednow := Convert_Lednow_Type( Get( slices, 472 ));
            rec.ivda := Convert_Ivda_Type( Get( slices, 473 ));
            rec.ivdb := Convert_Ivdb_Type( Get( slices, 474 ));
            rec.ivdc := Convert_Ivdc_Type( Get( slices, 475 ));
            rec.ivdd := Convert_Ivdd_Type( Get( slices, 476 ));
            rec.ivde := Convert_Yes_Or_Missing_Type( Get( slices, 477 ));
            rec.hldsbl1 := Convert_Hldsbl1_Type( Get( slices, 478 ));
            rec.hlstat := Convert_Hlstat_Type( Get( slices, 479 ));
            rec.hlprb := Convert( slices, 480, ( -9, -8, -7, -2, -1 ) );
            rec.hlprba := Convert_Hlprba_Type( Get( slices, 481 ));
            rec.hlprbb := Convert_Hlprbb_Type( Get( slices, 482 ));
            rec.hlprbc := Convert_Hlprbc_Type( Get( slices, 483 ));
            rec.hlprbd := Convert_Hlprbd_Type( Get( slices, 484 ));
            rec.hlprbe := Convert_Hlprbe_Type( Get( slices, 485 ));
            rec.hlprbf := Convert_Hlprbf_Type( Get( slices, 486 ));
            rec.hlprbg := Convert_Hlprbg_Type( Get( slices, 487 ));
            rec.hlprbh := Convert_Hlprbh_Type( Get( slices, 488 ));
            rec.hlprbi := Convert_Hlprbi_Type( Get( slices, 489 ));
            rec.hlprbj := Convert_Hlprbj_Type( Get( slices, 490 ));
            rec.hlprbk := Convert_Hlprbk_Type( Get( slices, 491 ));
            rec.hlprbl := Convert_Hlprbl_Type( Get( slices, 492 ));
            rec.hlprbn := Convert_Hlprbn_Type( Get( slices, 493 ));
            rec.hlprbo := Convert_Hlprbo_Type( Get( slices, 494 ));
            rec.hlprbm := Convert_Hlprbm_Type( Get( slices, 495 ));
            rec.hllt := Convert_Bscon_Type( Get( slices, 496 ));
            rec.hllta := Convert_Hllta_Type( Get( slices, 497 ));
            rec.hlltb := Convert_Hlltb_Type( Get( slices, 498 ));
            rec.hlltc := Convert_Hlltc_Type( Get( slices, 499 ));
            rec.hlltd := Convert_Hlltd_Type( Get( slices, 500 ));
            rec.hllte := Convert_Hllte_Type( Get( slices, 501 ));
            rec.hlltw := Convert_Bscon_Type( Get( slices, 502 ));
            rec.hlendw := Convert_Hlendw_Type( Get( slices, 503 ));
            rec.hlltwa := Convert_Hlltwa_Type( Get( slices, 504 ));
            rec.hliv65 := Convert_Hliv65_Type( Get( slices, 505 ));
            rec.adla := Convert_Adla_Type( Get( slices, 506 ));
            rec.adlad := Convert_Adlad_Type( Get( slices, 507 ));
            rec.adlb := Convert_Adla_Type( Get( slices, 508 ));
            rec.adlbd := Convert_Adlad_Type( Get( slices, 509 ));
            rec.adlc := Convert_Adla_Type( Get( slices, 510 ));
            rec.adlcd := Convert_Adlad_Type( Get( slices, 511 ));
            rec.adld := Convert_Adla_Type( Get( slices, 512 ));
            rec.adldd := Convert_Adlad_Type( Get( slices, 513 ));
            rec.adle := Convert_Adla_Type( Get( slices, 514 ));
            rec.adled := Convert_Adlad_Type( Get( slices, 515 ));
            rec.adlf := Convert_Adla_Type( Get( slices, 516 ));
            rec.adlfd := Convert_Adlad_Type( Get( slices, 517 ));
            rec.hl2gp := Convert_Hl2gp_Type( Get( slices, 518 ));
            rec.hl2hop := Convert( slices, 519, ( -9, -8, -7, -2, -1 ) );
            rec.xdts := Convert_Bscon_Type( Get( slices, 520 ));
            rec.nxdts := Convert_Nxdts_Type( Get( slices, 521 ));
            rec.hosp := Convert_Hlsv_Type( Get( slices, 522 ));
            rec.hospd := Convert( slices, 523, ( -9, -8, -7, -2, -1 ) );
            rec.hospch := Convert_Hospch_Type( Get( slices, 524 ));
            rec.hospnhs := Convert_Hospnhs_Type( Get( slices, 525 ));
            rec.hlcvr := Convert_Hlcvr_Type( Get( slices, 526 ));
            rec.hlcvrh := Convert_Hlcvrh_Type( Get( slices, 527 ));
            rec.hlcvrl := Convert( slices, 528, ( -9, -8, -7, -2, -1 ) );
            rec.hlsv := Convert_Hlsv_Type( Get( slices, 529 ));
            rec.hlsva := Convert_Hlsva_Type( Get( slices, 530 ));
            rec.hlsvan := Convert_Hlsvan_Type( Get( slices, 531 ));
            rec.hlsvaf := Convert_Hlsvaf_Type( Get( slices, 532 ));
            rec.hlsvb := Convert_Hlsvb_Type( Get( slices, 533 ));
            rec.hlsvbn := Convert_Hlsvan_Type( Get( slices, 534 ));
            rec.hlsvbf := Convert_Hlsvaf_Type( Get( slices, 535 ));
            rec.hlsvc := Convert_Hlsvc_Type( Get( slices, 536 ));
            rec.hlsvcn := Convert_Hlsvan_Type( Get( slices, 537 ));
            rec.hlsvcf := Convert_Hlsvaf_Type( Get( slices, 538 ));
            rec.hlsvd := Convert_Hlsvd_Type( Get( slices, 539 ));
            rec.hlsvdn := Convert_Hlsvan_Type( Get( slices, 540 ));
            rec.hlsvdf := Convert_Hlsvaf_Type( Get( slices, 541 ));
            rec.hlsve := Convert_Hlsve_Type( Get( slices, 542 ));
            rec.hlsven := Convert_Hlsvan_Type( Get( slices, 543 ));
            rec.hlsvef := Convert_Hlsvaf_Type( Get( slices, 544 ));
            rec.hlsvf := Convert_Hlsvf_Type( Get( slices, 545 ));
            rec.hlsvfn := Convert_Hlsvan_Type( Get( slices, 546 ));
            rec.hlsvff := Convert_Hlsvaf_Type( Get( slices, 547 ));
            rec.hlsvg := Convert_Hlsvg_Type( Get( slices, 548 ));
            rec.hlsvgn := Convert_Hlsvan_Type( Get( slices, 549 ));
            rec.hlsvgf := Convert_Hlsvaf_Type( Get( slices, 550 ));
            rec.hlsvh := Convert_Hlsvh_Type( Get( slices, 551 ));
            rec.hlsvhn := Convert_Hlsvan_Type( Get( slices, 552 ));
            rec.hlsvhf := Convert_Hlsvaf_Type( Get( slices, 553 ));
            rec.hlsvi := Convert_Hlsvi_Type( Get( slices, 554 ));
            rec.hlsvin := Convert_Hlsvan_Type( Get( slices, 555 ));
            rec.hlsvif := Convert_Hlsvaf_Type( Get( slices, 556 ));
            rec.hlsvl := Convert_Hlsvl_Type( Get( slices, 557 ));
            rec.hlsvln := Convert_Hlsvln_Type( Get( slices, 558 ));
            rec.hlsvlf := Convert_Hlsvlf_Type( Get( slices, 559 ));
            rec.hlsvm := Convert_Hlsvm_Type( Get( slices, 560 ));
            rec.hlsvmn := Convert_Hlsvln_Type( Get( slices, 561 ));
            rec.hlsvmf := Convert_Hlsvlf_Type( Get( slices, 562 ));
            rec.hlsvj := Convert_Hlsvj_Type( Get( slices, 563 ));
            rec.hlsvjn := Convert_Hlsvan_Type( Get( slices, 564 ));
            rec.hlsvjf := Convert_Hlsvaf_Type( Get( slices, 565 ));
            rec.hlsvk := Convert_Hlsvk_Type( Get( slices, 566 ));
            rec.hlsvkn := Convert_Hlsvan_Type( Get( slices, 567 ));
            rec.hlsvkf := Convert_Hlsvaf_Type( Get( slices, 568 ));
            rec.hlck := Convert_Aidpl1_Type( Get( slices, 569 ));
            rec.hlcka := Convert_Hlcka_Type( Get( slices, 570 ));
            rec.hlckan := Convert_Hlckan_Type( Get( slices, 571 ));
            rec.hlckb := Convert_Hlcka_Type( Get( slices, 572 ));
            rec.hlckbn := Convert_Hlckan_Type( Get( slices, 573 ));
            rec.hlckc := Convert_Hlcka_Type( Get( slices, 574 ));
            rec.hlckcn := Convert_Hlckan_Type( Get( slices, 575 ));
            rec.hlckd := Convert_Hlcka_Type( Get( slices, 576 ));
            rec.hlckdn := Convert_Hlckan_Type( Get( slices, 577 ));
            rec.hlcke := Convert_Hlcka_Type( Get( slices, 578 ));
            rec.hlcken := Convert_Hlckan_Type( Get( slices, 579 ));
            rec.hlcki := Convert_Hlcki_Type( Get( slices, 580 ));
            rec.hlckin := Convert_Hlckin_Type( Get( slices, 581 ));
            rec.hlckf := Convert_Hlcka_Type( Get( slices, 582 ));
            rec.hlckfn := Convert_Hlckan_Type( Get( slices, 583 ));
            rec.hlckg := Convert_Hlcka_Type( Get( slices, 584 ));
            rec.hlckgn := Convert_Hlckan_Type( Get( slices, 585 ));
            rec.hlckh := Convert_Hlcka_Type( Get( slices, 586 ));
            rec.hlckhn := Convert_Hlckan_Type( Get( slices, 587 ));
            rec.smoker := Convert_Bscon_Type( Get( slices, 588 ));
            rec.ncigs := Convert( slices, 589, ( -9, -8, -7, -2, -1 ) );
            rec.smcigs := Convert_Smcigs_Type( Get( slices, 590 ));
            rec.aglqut := Convert( slices, 591, ( -9, -8, -7, -2, -1 ) );
            rec.aidhh := Convert_Aidhh_Type( Get( slices, 592 ));
            rec.aidhua := Convert( slices, 593, ( -9, -8, -7, -1 ) );
            rec.aidhub := Convert( slices, 594, ( -9, -8, -7 ) );
            rec.aidhuc := Convert( slices, 595, ( -9, -8, -7 ) );
            rec.aidxhh := Convert_Aidxhh_Type( Get( slices, 596 ));
            rec.naidxhh := Convert_Naidxhh_Type( Get( slices, 597 ));
            rec.aidhu1 := Convert_Aidhu1_Type( Get( slices, 598 ));
            rec.aidhu2 := Convert_Aidhu2_Type( Get( slices, 599 ));
            rec.aidhrs := Convert_Aidhrs_Type( Get( slices, 600 ));
            rec.ivma := Convert_Ivda_Type( Get( slices, 601 ));
            rec.ivmb := Convert_Ivdb_Type( Get( slices, 602 ));
            rec.ivmc := Convert_Ivec_Type( Get( slices, 603 ));
            rec.ivmd := Convert_Ivdd_Type( Get( slices, 604 ));
            rec.ivme := Convert_Ivee_Type( Get( slices, 605 ));
            rec.jbhas := Convert_Frnow_Type( Get( slices, 606 ));
            rec.jboff := Convert_Jboff_Type( Get( slices, 607 ));
            rec.jboffy := Convert_Jboffy_Type( Get( slices, 608 ));
            rec.jbterm1 := Convert_Jbterm1_Type( Get( slices, 609 ));
            rec.jbterm2 := Convert_Jbterm2_Type( Get( slices, 610 ));
            rec.jbsoc := Convert( slices, 611, ( -9, -8, -2, -1 ) );
            rec.jbsoc00 := Convert( slices, 612, ( -9, -8, -2, -1 ) );
            rec.jbsic92 := Convert( slices, 613, ( -9, -8, -7, -2, -1 ) );
            rec.jbsemp := Convert_Jbsemp_Type( Get( slices, 614 ));
            rec.jbmngr := Convert_Jbmngr_Type( Get( slices, 615 ));
            rec.jbsect := Convert_Jbsect_Type( Get( slices, 616 ));
            rec.jbsize := Convert_Jbsize_Type( Get( slices, 617 ));
            rec.jbhrs := Convert( slices, 618, ( -9, -8, -7, -2, -1 ) );
            rec.jbot := Convert( slices, 619, ( -9, -8, -7, -2, -1 ) );
            rec.jbotpd := Convert( slices, 620, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbhrlk := Convert_Jbhrlk_Type( Get( slices, 621 ));
            rec.jbpl := Convert_Jbpl_Type( Get( slices, 622 ));
            rec.jbttwt := Convert( slices, 623, ( -9, -8, -7, -3, -2, -1 ) );
            rec.jbttwm := Convert_Jbttwm_Type( Get( slices, 624 ));
            rec.jbsat2 := Convert( slices, 625, ( -9, -8, -7, -2, -1 ) );
            rec.jbsat4 := Convert_Jbsat4_Type( Get( slices, 626 ));
            rec.jbsat6 := Convert_Jbsat4_Type( Get( slices, 627 ));
            rec.jbsat7 := Convert_Jbsat_Type( Get( slices, 628 ));
            rec.jbsat := Convert_Jbsat_Type( Get( slices, 629 ));
            rec.paygl := Convert( slices, 630, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.paygw := Convert( slices, 631, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.paynl := Convert( slices, 632, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.paynw := Convert( slices, 633, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.pytc := Convert_Pytc_Type( Get( slices, 634 ));
            rec.pywftc := Convert( slices, 635, ( -9, -8, -7, -2, -1 ) );
            rec.pywftcw := Convert( slices, 636, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.pydptc := Convert( slices, 637, ( -9, -8, -7, -2, -1 ) );
            rec.pydptcw := Convert( slices, 638, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.payslp := Convert_Payslp_Type( Get( slices, 639 ));
            rec.payusl := Convert_Aidpl1_Type( Get( slices, 640 ));
            rec.payu := Convert( slices, 641, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.payuw := Convert( slices, 642, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.payug := Convert_Paylyg_Type( Get( slices, 643 ));
            rec.paydf1 := Convert_Paydf1_Type( Get( slices, 644 ));
            rec.paydf2 := Convert_Paydf2_Type( Get( slices, 645 ));
            rec.paydf3 := Convert_Paydf3_Type( Get( slices, 646 ));
            rec.paydf4 := Convert_Paydf4_Type( Get( slices, 647 ));
            rec.paydf5 := Convert_Paydf5_Type( Get( slices, 648 ));
            rec.paydf6 := Convert_Paydf6_Type( Get( slices, 649 ));
            rec.paydf7 := Convert_Paydf7_Type( Get( slices, 650 ));
            rec.paydf9 := Convert_Paydf9_Type( Get( slices, 651 ));
            rec.paydf8 := Convert_Paydf8_Type( Get( slices, 652 ));
            rec.paytyp := Convert_Paytyp_Type( Get( slices, 653 ));
            rec.ovtpay := Convert_Bpar16_Type( Get( slices, 654 ));
            rec.extrate := Convert( slices, 655, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.extrest := Convert_Basrest_Type( Get( slices, 656 ));
            rec.basrate := Convert( slices, 657, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.basrest := Convert_Basrest_Type( Get( slices, 658 ));
            rec.ovtrate := Convert( slices, 659, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.ovtrest := Convert_Basrest_Type( Get( slices, 660 ));
            rec.jbperfp := Convert_Coh1mr_Type( Get( slices, 661 ));
            rec.jbonus := Convert_Aidpl1_Type( Get( slices, 662 ));
            rec.jbonam := Convert( slices, 663, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbong := Convert_Jbong_Type( Get( slices, 664 ));
            rec.jbrise := Convert_Aidpl1_Type( Get( slices, 665 ));
            rec.tujbpl := Convert_Aidpl1_Type( Get( slices, 666 ));
            rec.tuin1 := Convert_Aidpl1_Type( Get( slices, 667 ));
            rec.jbopps := Convert_Aidpl1_Type( Get( slices, 668 ));
            rec.jbtime := Convert_Jbtime_Type( Get( slices, 669 ));
            rec.jbwkhra := Convert_Yes_Or_Missing_Type( Get( slices, 670 ));
            rec.jbwkhrb := Convert_Yes_Or_Missing_Type( Get( slices, 671 ));
            rec.jbwkhrc := Convert_Yes_Or_Missing_Type( Get( slices, 672 ));
            rec.jbwkhrd := Convert_Yes_Or_Missing_Type( Get( slices, 673 ));
            rec.jbwkhre := Convert_Yes_Or_Missing_Type( Get( slices, 674 ));
            rec.jbwkhrf := Convert_Yes_Or_Missing_Type( Get( slices, 675 ));
            rec.jbwkhrg := Convert_Yes_Or_Missing_Type( Get( slices, 676 ));
            rec.jbwkhrh := Convert_Jbwkhrh_Type( Get( slices, 677 ));
            rec.jbpen := Convert_Aidpl1_Type( Get( slices, 678 ));
            rec.jbpenm := Convert_Aidpl1_Type( Get( slices, 679 ));
            rec.jbbgd := Convert( slices, 680, ( -9, -8, -7, -2, -1 ) );
            rec.jbbgm := Convert_Cjsbgm_Type( Get( slices, 681 ));
            rec.jbbgy4 := Convert( slices, 682, ( -9, -8, -7, -2, -1 ) );
            rec.jbbgly := Convert_Jbbgly_Type( Get( slices, 683 ));
            rec.pays := Convert( slices, 684, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.paysw := Convert( slices, 685, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.paysg := Convert_Paylyg_Type( Get( slices, 686 ));
            rec.payly := Convert( slices, 687, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.paylyw := Convert( slices, 688, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.paylyg := Convert_Paylyg_Type( Get( slices, 689 ));
            rec.jsboss := Convert_Jsboss_Type( Get( slices, 690 ));
            rec.jssize := Convert_Jssize_Type( Get( slices, 691 ));
            rec.jshrs := Convert( slices, 692, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jshrlk := Convert_Jbhrlk_Type( Get( slices, 693 ));
            rec.jstime := Convert_Jstime_Type( Get( slices, 694 ));
            rec.jstypeb := Convert_Jstypeb_Type( Get( slices, 695 ));
            rec.jsaccs := Convert_Jsaccs_Type( Get( slices, 696 ));
            rec.jspart := Convert_Jspart_Type( Get( slices, 697 ));
            rec.jsprbm := Convert_Cjsbgm_Type( Get( slices, 698 ));
            rec.jsprby4 := Convert( slices, 699, ( -9, -8, -7, -2, -1 ) );
            rec.jsprem := Convert_Cjsbgm_Type( Get( slices, 700 ));
            rec.jsprey4 := Convert( slices, 701, ( -9, -8, -7, -2, -1 ) );
            rec.jsprf := Convert( slices, 702, ( -9, -8, -7, -3, -2, -1 ) );
            rec.jsprls := Convert_Jsprls_Type( Get( slices, 703 ));
            rec.jsprtx := Convert_Jsprtx_Type( Get( slices, 704 ));
            rec.jsprni := Convert_Jsprni_Type( Get( slices, 705 ));
            rec.jspayu := Convert( slices, 706, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jspayw := Convert( slices, 707, ( -9.0, -8.0, -7.0, -4.0, -2.0, -1.0 ) );
            rec.jspytx := Convert_Jspytx_Type( Get( slices, 708 ));
            rec.jspyni := Convert_Jspyni_Type( Get( slices, 709 ));
            rec.jspl := Convert_Jspl_Type( Get( slices, 710 ));
            rec.jsttwt := Convert( slices, 711, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.jsttwm := Convert_Jsttwm_Type( Get( slices, 712 ));
            rec.jssat1 := Convert_Jssat1_Type( Get( slices, 713 ));
            rec.jssat2 := Convert_Jbsat_Type( Get( slices, 714 ));
            rec.jssat4 := Convert_Jbsat_Type( Get( slices, 715 ));
            rec.jssat5 := Convert_Jbsat_Type( Get( slices, 716 ));
            rec.jssat := Convert_Jbsat_Type( Get( slices, 717 ));
            rec.jsbgd := Convert( slices, 718, ( -9, -8, -7, -2, -1 ) );
            rec.jsbgm := Convert_Cjsbgm_Type( Get( slices, 719 ));
            rec.jsbgy4 := Convert( slices, 720, ( -9, -8, -7, -2, -1 ) );
            rec.jblkcha := Convert_Jblkcha_Type( Get( slices, 721 ));
            rec.jbxpcha := Convert_Jblkcha_Type( Get( slices, 722 ));
            rec.jblkchb := Convert_Boolean_With_Missing( Get( slices, 723 ));
            rec.jbxpchb := Convert_Boolean_With_Missing( Get( slices, 724 ));
            rec.jblkchc := Convert_Boolean_With_Missing( Get( slices, 725 ));
            rec.jbxpchc := Convert_Boolean_With_Missing( Get( slices, 726 ));
            rec.jblkchd := Convert_Boolean_With_Missing( Get( slices, 727 ));
            rec.jbxpchd := Convert_Boolean_With_Missing( Get( slices, 728 ));
            rec.jblkche := Convert_Boolean_With_Missing( Get( slices, 729 ));
            rec.jbxpche := Convert_Boolean_With_Missing( Get( slices, 730 ));
            rec.rach12 := Convert_Hhch12_Type( Get( slices, 731 ));
            rec.jbchc1 := Convert_Jbchc1_Type( Get( slices, 732 ));
            rec.jbchc2 := Convert_Jbchc2_Type( Get( slices, 733 ));
            rec.jbchc3 := Convert_Jbchc3_Type( Get( slices, 734 ));
            rec.xpchcf := Convert_Xpchcf_Type( Get( slices, 735 ));
            rec.xpchc := Convert( slices, 736, ( -9, -8, -7, -2, -1 ) );
            rec.huxpch := Convert_Huxpch_Type( Get( slices, 737 ));
            rec.hunurs := Convert_Hunurs_Type( Get( slices, 738 ));
            rec.julk1 := Convert_Aidpl1_Type( Get( slices, 739 ));
            rec.julk4 := Convert_Bscon_Type( Get( slices, 740 ));
            rec.julka := Convert_Boolean_With_Missing( Get( slices, 741 ));
            rec.julkb := Convert_Boolean_With_Missing( Get( slices, 742 ));
            rec.julkc := Convert_Boolean_With_Missing( Get( slices, 743 ));
            rec.julkd := Convert_Boolean_With_Missing( Get( slices, 744 ));
            rec.julke := Convert_Boolean_With_Missing( Get( slices, 745 ));
            rec.julkjb := Convert_Aidpl1_Type( Get( slices, 746 ));
            rec.jubgn := Convert_Boolean_With_Missing( Get( slices, 747 ));
            rec.juspec := Convert_Juspec_Type( Get( slices, 748 ));
            rec.jusoc := Convert( slices, 749, ( -9, -8, -7, -2, -1 ) );
            rec.jusoc00 := Convert( slices, 750, ( -9, -8, -7, -2, -1 ) );
            rec.juhrsx := Convert( slices, 751, ( -9, -8, -7, -2, -1 ) );
            rec.jupayx := Convert( slices, 752, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jupayl := Convert( slices, 753, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.juhrsl := Convert( slices, 754, ( -9, -8, -7, -2, -1 ) );
            rec.eprosh := Convert_Cohxpm2_Type( Get( slices, 755 ));
            rec.eaage := Convert_Eaage_Type( Get( slices, 756 ));
            rec.jbub := Convert_Bscon_Type( Get( slices, 757 ));
            rec.jbuby := Convert_Jbuby_Type( Get( slices, 758 ));
            rec.j2has := Convert_Aidpl1_Type( Get( slices, 759 ));
            rec.j2soc := Convert( slices, 760, ( -9, -8, -7, -2, -1 ) );
            rec.j2soc00 := Convert( slices, 761, ( -9, -8, -7, -2, -1 ) );
            rec.j2semp := Convert_J2semp_Type( Get( slices, 762 ));
            rec.j2hrs := Convert( slices, 763, ( -9, -8, -7, -2, -1 ) );
            rec.j2pay := Convert( slices, 764, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ivea := Convert_Ivda_Type( Get( slices, 765 ));
            rec.iveb := Convert_Ivdb_Type( Get( slices, 766 ));
            rec.ivec := Convert_Ivec_Type( Get( slices, 767 ));
            rec.ived := Convert_Ivdd_Type( Get( slices, 768 ));
            rec.ivee := Convert_Ivee_Type( Get( slices, 769 ));
            rec.nemst := Convert_Nemst_Type( Get( slices, 770 ));
            rec.cjsbgd := Convert( slices, 771, ( -9, -8, -7, -2, -1 ) );
            rec.cjsbgm := Convert_Cjsbgm_Type( Get( slices, 772 ));
            rec.cjsbgy4 := Convert( slices, 773, ( -9, -8, -7, -2, -1 ) );
            rec.cjsbly := Convert_Cjsbly_Type( Get( slices, 774 ));
            rec.njbs := Convert( slices, 775, ( -9, -8, -7 ) );
            rec.jbhad := Convert_Aidpl1_Type( Get( slices, 776 ));
            rec.jlend4 := Convert( slices, 777, ( -9, -8, -7, -2, -1 ) );
            rec.jlsoc := Convert( slices, 778, ( -9, -8, -7, -2, -1 ) );
            rec.jlsoc00 := Convert( slices, 779, ( -9, -8, -7, -2, -1 ) );
            rec.jlsic := Convert( slices, 780, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jlsic92 := Convert( slices, 781, ( -9, -8, -7 ) );
            rec.jlsemp := Convert_J2semp_Type( Get( slices, 782 ));
            rec.jlboss := Convert_Aidpl1_Type( Get( slices, 783 ));
            rec.jlmngr := Convert_Jlmngr_Type( Get( slices, 784 ));
            rec.jlsize := Convert_Jlsize_Type( Get( slices, 785 ));
            rec.ivja := Convert_Ivda_Type( Get( slices, 786 ));
            rec.ivjb := Convert_Ivdb_Type( Get( slices, 787 ));
            rec.ivjc := Convert_Ivec_Type( Get( slices, 788 ));
            rec.ivjd := Convert_Ivdd_Type( Get( slices, 789 ));
            rec.ivje := Convert_Ivee_Type( Get( slices, 790 ));
            rec.opnata := Convert_Opnata_Type( Get( slices, 791 ));
            rec.opnatb := Convert_Opnata_Type( Get( slices, 792 ));
            rec.opnatc := Convert_Opnata_Type( Get( slices, 793 ));
            rec.opnatd := Convert_Opnata_Type( Get( slices, 794 ));
            rec.opnate := Convert_Opnata_Type( Get( slices, 795 ));
            rec.opnatf := Convert_Opnata_Type( Get( slices, 796 ));
            rec.vote1 := Convert_Aidpl1_Type( Get( slices, 797 ));
            rec.vote2 := Convert_Aidpl1_Type( Get( slices, 798 ));
            rec.vote3 := Convert_Vote3_Type( Get( slices, 799 ));
            rec.vote4 := Convert_Vote3_Type( Get( slices, 800 ));
            rec.vote5 := Convert_Vote5_Type( Get( slices, 801 ));
            rec.vote7 := Convert_Vote7_Type( Get( slices, 802 ));
            rec.vote8 := Convert_Vote8_Type( Get( slices, 803 ));
            rec.vote6 := Convert_Vote6_Type( Get( slices, 804 ));
            rec.nipop1 := Convert_Nipop1_Type( Get( slices, 805 ));
            rec.nipop2 := Convert_Nipop2_Type( Get( slices, 806 ));
            rec.nipop3 := Convert_Nipop3_Type( Get( slices, 807 ));
            rec.nipop4 := Convert_Nipop3_Type( Get( slices, 808 ));
            rec.nipop5 := Convert_Nipop5_Type( Get( slices, 809 ));
            rec.nipop6 := Convert_Nipop6_Type( Get( slices, 810 ));
            rec.opdev1 := Convert_Opdev1_Type( Get( slices, 811 ));
            rec.opdev2 := Convert_Opdev2_Type( Get( slices, 812 ));
            rec.opeur1 := Convert_Opeur1_Type( Get( slices, 813 ));
            rec.opeur2 := Convert_Opeur2_Type( Get( slices, 814 ));
            rec.opeur3 := Convert_Opeur3_Type( Get( slices, 815 ));
            rec.opeur4 := Convert_Opeur4_Type( Get( slices, 816 ));
            rec.lacta := Convert_Lacta_Type( Get( slices, 817 ));
            rec.lactb := Convert_Lacta_Type( Get( slices, 818 ));
            rec.lactc := Convert_Lacta_Type( Get( slices, 819 ));
            rec.lactd := Convert_Lacta_Type( Get( slices, 820 ));
            rec.lacte := Convert_Lacta_Type( Get( slices, 821 ));
            rec.lactf := Convert_Lacta_Type( Get( slices, 822 ));
            rec.lacth := Convert_Lacta_Type( Get( slices, 823 ));
            rec.lacti := Convert_Lacta_Type( Get( slices, 824 ));
            rec.lactj := Convert_Lacta_Type( Get( slices, 825 ));
            rec.lactk := Convert_Lacta_Type( Get( slices, 826 ));
            rec.lactl := Convert_Lacta_Type( Get( slices, 827 ));
            rec.frna := Convert_Frna_Type( Get( slices, 828 ));
            rec.frnb := Convert_Frna_Type( Get( slices, 829 ));
            rec.frnc := Convert_Coh1mr_Type( Get( slices, 830 ));
            rec.lvma := Convert_Lvma_Type( Get( slices, 831 ));
            rec.maage := Convert( slices, 832, ( -9, -8, -7, -2, -1 ) );
            rec.lvpa := Convert_Lvpa_Type( Get( slices, 833 ));
            rec.paage := Convert( slices, 834, ( -9, -8, -7, -2, -1 ) );
            rec.lvch := Convert_Lvch_Type( Get( slices, 835 ));
            rec.nlvch := Convert( slices, 836, ( -9, -8, -7, -2, -1 ) );
            rec.nolvrel := Convert_Nocaidu_Type( Get( slices, 837 ));
            rec.parmar := Convert_Bscon_Type( Get( slices, 838 ));
            rec.malone := Convert_Bscon_Type( Get( slices, 839 ));
            rec.palone := Convert_Bscon_Type( Get( slices, 840 ));
            rec.masee := Convert_Chmail_Type( Get( slices, 841 ));
            rec.matel := Convert_Chmail_Type( Get( slices, 842 ));
            rec.mamail := Convert_Chmail_Type( Get( slices, 843 ));
            rec.mafar := Convert_Chfar_Type( Get( slices, 844 ));
            rec.pasee := Convert_Chmail_Type( Get( slices, 845 ));
            rec.patel := Convert_Chmail_Type( Get( slices, 846 ));
            rec.pamail := Convert_Chmail_Type( Get( slices, 847 ));
            rec.pafar := Convert_Pafar_Type( Get( slices, 848 ));
            rec.chsee := Convert_Chmail_Type( Get( slices, 849 ));
            rec.chtel := Convert_Chmail_Type( Get( slices, 850 ));
            rec.chmail := Convert_Chmail_Type( Get( slices, 851 ));
            rec.chfar := Convert_Chfar_Type( Get( slices, 852 ));
            rec.chaida := Convert_Chaida_Type( Get( slices, 853 ));
            rec.chaidb := Convert_Chaidb_Type( Get( slices, 854 ));
            rec.chaidc := Convert_Chaidc_Type( Get( slices, 855 ));
            rec.chaidd := Convert_Chaidd_Type( Get( slices, 856 ));
            rec.chaide := Convert_Chaide_Type( Get( slices, 857 ));
            rec.chaidf := Convert_Chaidf_Type( Get( slices, 858 ));
            rec.chaidg := Convert_Chaidg_Type( Get( slices, 859 ));
            rec.chaidh := Convert_Caiduh_Type( Get( slices, 860 ));
            rec.chaidi := Convert_Caidui_Type( Get( slices, 861 ));
            rec.nochaid := Convert_Nocaidu_Type( Get( slices, 862 ));
            rec.caidua := Convert_Caidua_Type( Get( slices, 863 ));
            rec.caidub := Convert_Caidub_Type( Get( slices, 864 ));
            rec.caiduc := Convert_Caiduc_Type( Get( slices, 865 ));
            rec.caidud := Convert_Caidud_Type( Get( slices, 866 ));
            rec.caidue := Convert_Caidue_Type( Get( slices, 867 ));
            rec.caiduf := Convert_Caiduf_Type( Get( slices, 868 ));
            rec.caidug := Convert_Caidug_Type( Get( slices, 869 ));
            rec.caiduh := Convert_Caiduh_Type( Get( slices, 870 ));
            rec.caidui := Convert_Caidui_Type( Get( slices, 871 ));
            rec.nocaidu := Convert_Nocaidu_Type( Get( slices, 872 ));
            rec.hhch16 := Convert_Hhch16_Type( Get( slices, 873 ));
            rec.schosa := Convert_Schosa_Type( Get( slices, 874 ));
            rec.schos1 := Convert_Schos1_Type( Get( slices, 875 ));
            rec.schos2 := Convert_Schos2_Type( Get( slices, 876 ));
            rec.hscimp := Convert_Hscimp_Type( Get( slices, 877 ));
            rec.plykid := Convert_Leikid_Type( Get( slices, 878 ));
            rec.leikid := Convert_Leikid_Type( Get( slices, 879 ));
            rec.kidopa := Convert_Coh1mr_Type( Get( slices, 880 ));
            rec.kidsee := Convert_Kidsee_Type( Get( slices, 881 ));
            rec.kidwe := Convert_Holkid_Type( Get( slices, 882 ));
            rec.kidhol := Convert_Holkid_Type( Get( slices, 883 ));
            rec.kidfar := Convert_Farkid_Type( Get( slices, 884 ));
            rec.kidrel := Convert_Kidrel_Type( Get( slices, 885 ));
            rec.ohch16 := Convert_Ohch16_Type( Get( slices, 886 ));
            rec.seekid := Convert_Seekid_Type( Get( slices, 887 ));
            rec.wekid := Convert_Holkid_Type( Get( slices, 888 ));
            rec.holkid := Convert_Holkid_Type( Get( slices, 889 ));
            rec.farkid := Convert_Farkid_Type( Get( slices, 890 ));
            rec.relkid := Convert_Kidrel_Type( Get( slices, 891 ));
            rec.ivva := Convert_Ivva_Type( Get( slices, 892 ));
            rec.ivvb := Convert_Ivdb_Type( Get( slices, 893 ));
            rec.ivvc := Convert_Ivfc_Type( Get( slices, 894 ));
            rec.ivvd := Convert_Ivdd_Type( Get( slices, 895 ));
            rec.ivve := Convert_Ivee_Type( Get( slices, 896 ));
            rec.f101 := Convert_F101_Type( Get( slices, 897 ));
            rec.f102 := Convert_F102_Type( Get( slices, 898 ));
            rec.f103 := Convert_F103_Type( Get( slices, 899 ));
            rec.f104 := Convert( slices, 900, ( -9, -8, -7 ) );
            rec.f105 := Convert_F105_Type( Get( slices, 901 ));
            rec.f106 := Convert_F106_Type( Get( slices, 902 ));
            rec.f116 := Convert_F116_Type( Get( slices, 903 ));
            rec.f118 := Convert_F118_Type( Get( slices, 904 ));
            rec.f119 := Convert_F119_Type( Get( slices, 905 ));
            rec.f121 := Convert_F121_Type( Get( slices, 906 ));
            rec.f122 := Convert_F122_Type( Get( slices, 907 ));
            rec.f124 := Convert_F124_Type( Get( slices, 908 ));
            rec.f125 := Convert_F125_Type( Get( slices, 909 ));
            rec.f126 := Convert_F126_Type( Get( slices, 910 ));
            rec.f127 := Convert_F127_Type( Get( slices, 911 ));
            rec.f128 := Convert_F128_Type( Get( slices, 912 ));
            rec.f132 := Convert_F132_Type( Get( slices, 913 ));
            rec.f142 := Convert_F142_Type( Get( slices, 914 ));
            rec.f135 := Convert_F135_Type( Get( slices, 915 ));
            rec.f136 := Convert_F136_Type( Get( slices, 916 ));
            rec.f137 := Convert_F137_Type( Get( slices, 917 ));
            rec.f138 := Convert_F138_Type( Get( slices, 918 ));
            rec.f139 := Convert_F139_Type( Get( slices, 919 ));
            rec.f140 := Convert_F140_Type( Get( slices, 920 ));
            rec.f141 := Convert_F141_Type( Get( slices, 921 ));
            rec.f151 := Convert_F151_Type( Get( slices, 922 ));
            rec.f152 := Convert_F152_Type( Get( slices, 923 ));
            rec.f153 := Convert_F153_Type( Get( slices, 924 ));
            rec.f154 := Convert_F154_Type( Get( slices, 925 ));
            rec.f155 := Convert_F155_Type( Get( slices, 926 ));
            rec.f156 := Convert_F156_Type( Get( slices, 927 ));
            rec.f157 := Convert_F157_Type( Get( slices, 928 ));
            rec.f158 := Convert_F158_Type( Get( slices, 929 ));
            rec.f159 := Convert_F159_Type( Get( slices, 930 ));
            rec.nf1 := Convert( slices, 931, ( -9, -8, -7, -2, -1 ) );
            rec.fisit := Convert_Fisit_Type( Get( slices, 932 ));
            rec.fisitc := Convert( slices, 933, ( -9, -8, -7, -2, -1 ) );
            rec.fisity := Convert_Fisity_Type( Get( slices, 934 ));
            rec.fisitx := Convert( slices, 935, ( -9, -8, -7, -2, -1 ) );
            rec.fiyrdia := Convert( slices, 936, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.fiyrdb1 := Convert_Boolean_With_Missing( Get( slices, 937 ));
            rec.fiyrdb2 := Convert_Boolean_With_Missing( Get( slices, 938 ));
            rec.fiyrdb3 := Convert_Boolean_With_Missing( Get( slices, 939 ));
            rec.fiyrdb4 := Convert_Boolean_With_Missing( Get( slices, 940 ));
            rec.fiyrdb5 := Convert_Boolean_With_Missing( Get( slices, 941 ));
            rec.fiyrdb6 := Convert_Boolean_With_Missing( Get( slices, 942 ));
            rec.save := Convert_Aidpl1_Type( Get( slices, 943 ));
            rec.saved := Convert( slices, 944, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.savey1 := Convert_Savey1_Type( Get( slices, 945 ));
            rec.savey2 := Convert_Savey1_Type( Get( slices, 946 ));
            rec.savreg := Convert_Savreg_Type( Get( slices, 947 ));
            rec.savlt := Convert_Savlt_Type( Get( slices, 948 ));
            rec.pppen := Convert_Aidpl1_Type( Get( slices, 949 ));
            rec.penb4 := Convert_Penb4_Type( Get( slices, 950 ));
            rec.penb4y4 := Convert( slices, 951, ( -9, -8, -7, -2, -1 ) );
            rec.penb4v := Convert( slices, 952, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.penb4w := Convert( slices, 953, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.penyr4 := Convert( slices, 954, ( -9, -8, -7, -2, -1 ) );
            rec.penadd := Convert_Aidpl1_Type( Get( slices, 955 ));
            rec.penadv := Convert( slices, 956, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.penadw := Convert( slices, 957, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.windf := Convert_Debt_Type( Get( slices, 958 ));
            rec.windfa := Convert_Windfa_Type( Get( slices, 959 ));
            rec.windfay := Convert( slices, 960, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windfb := Convert_Windfb_Type( Get( slices, 961 ));
            rec.windfby := Convert( slices, 962, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windfc := Convert_Windfc_Type( Get( slices, 963 ));
            rec.windfcy := Convert( slices, 964, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windfd := Convert_Windfd_Type( Get( slices, 965 ));
            rec.windfdy := Convert( slices, 966, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windff := Convert_Windff_Type( Get( slices, 967 ));
            rec.windffy := Convert( slices, 968, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windfg := Convert_Windfg_Type( Get( slices, 969 ));
            rec.windfgy := Convert( slices, 970, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windfh := Convert_Nisjsa_Type( Get( slices, 971 ));
            rec.windfhy := Convert( slices, 972, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.xpmeal := Convert_Xpleis_Type( Get( slices, 973 ));
            rec.xpleis := Convert_Xpleis_Type( Get( slices, 974 ));
            rec.ftexhh := Convert_Aidpl1_Type( Get( slices, 975 ));
            rec.ftexa := Convert_Ftexa_Type( Get( slices, 976 ));
            rec.ftexa1 := Convert_Ftexa1_Type( Get( slices, 977 ));
            rec.ftexa2 := Convert_Ftexa2_Type( Get( slices, 978 ));
            rec.ftexa3 := Convert_Ftexa3_Type( Get( slices, 979 ));
            rec.ftexa4 := Convert_Ftexa4_Type( Get( slices, 980 ));
            rec.ftexa5 := Convert_Ftexa5_Type( Get( slices, 981 ));
            rec.ftexa6 := Convert_Ftexa6_Type( Get( slices, 982 ));
            rec.ftexav := Convert( slices, 983, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ftexaw := Convert( slices, 984, ( -9.0, -8.0, -7.0, -5.0, -3.0, -2.0, -1.0 ) );
            rec.ftexb := Convert_Ftexb_Type( Get( slices, 985 ));
            rec.ftexb1 := Convert_Ftexa1_Type( Get( slices, 986 ));
            rec.ftexb2 := Convert_Ftexa2_Type( Get( slices, 987 ));
            rec.ftexb3 := Convert_Ftexa3_Type( Get( slices, 988 ));
            rec.ftexb4 := Convert_Ftexa4_Type( Get( slices, 989 ));
            rec.ftexb5 := Convert_Ftexa5_Type( Get( slices, 990 ));
            rec.ftexb6 := Convert_Ftexa6_Type( Get( slices, 991 ));
            rec.ftexbv := Convert( slices, 992, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ftexbw := Convert( slices, 993, ( -9.0, -8.0, -7.0, -5.0, -3.0, -2.0, -1.0 ) );
            rec.ftexc := Convert_Ftexc_Type( Get( slices, 994 ));
            rec.ftexc1 := Convert_Ftexa1_Type( Get( slices, 995 ));
            rec.ftexc2 := Convert_Ftexa2_Type( Get( slices, 996 ));
            rec.ftexc3 := Convert_Ftexa3_Type( Get( slices, 997 ));
            rec.ftexc4 := Convert_Ftexa4_Type( Get( slices, 998 ));
            rec.ftexc5 := Convert_Ftexa5_Type( Get( slices, 999 ));
            rec.ftexc6 := Convert_Ftexa6_Type( Get( slices, 1000 ));
            rec.ftexcv := Convert( slices, 1001, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ftexcw := Convert( slices, 1002, ( -9.0, -8.0, -7.0, -5.0, -3.0, -2.0, -1.0 ) );
            rec.spinhh := Convert_Hhch12_Type( Get( slices, 1003 ));
            rec.hubuys := Convert_Hubuys_Type( Get( slices, 1004 ));
            rec.hufrys := Convert_Hubuys_Type( Get( slices, 1005 ));
            rec.humops := Convert_Hubuys_Type( Get( slices, 1006 ));
            rec.huiron := Convert_Hubuys_Type( Get( slices, 1007 ));
            rec.hhch12 := Convert_Hhch12_Type( Get( slices, 1008 ));
            rec.husits := Convert_Husits_Type( Get( slices, 1009 ));
            rec.howlng := Convert( slices, 1010, ( -9, -8, -7, -3, -2, -1 ) );
            rec.caruse := Convert_Caruse_Type( Get( slices, 1011 ));
            rec.mobuse := Convert_Mobuse_Type( Get( slices, 1012 ));
            rec.qallif1 := Convert_Qallif1_Type( Get( slices, 1013 ));
            rec.qallif2 := Convert_Qallif2_Type( Get( slices, 1014 ));
            rec.qallif3 := Convert_Qallif2_Type( Get( slices, 1015 ));
            rec.qallif4 := Convert_Qallif2_Type( Get( slices, 1016 ));
            rec.ivfa := Convert_Ivda_Type( Get( slices, 1017 ));
            rec.ivfb := Convert_Ivdb_Type( Get( slices, 1018 ));
            rec.ivfc := Convert_Ivfc_Type( Get( slices, 1019 ));
            rec.ivfd := Convert_Ivdd_Type( Get( slices, 1020 ));
            rec.ivfe := Convert_Ivee_Type( Get( slices, 1021 ));
            rec.ivfoih := Convert( slices, 1022, ( -9, -8 ) );
            rec.ivfoim := Convert( slices, 1023, ( -9, -8 ) );
            rec.ivsc := Convert_Ivsc_Type( Get( slices, 1024 ));
            rec.iv1 := Convert_Hhch12_Type( Get( slices, 1025 ));
            rec.iv2 := Convert_Iv2_Type( Get( slices, 1026 ));
            rec.iv4 := Convert_Iv4_Type( Get( slices, 1027 ));
            rec.iv5 := Convert_Iv5_Type( Get( slices, 1028 ));
            rec.iv5aa := Convert_Iv5aa_Type( Get( slices, 1029 ));
            rec.iv5ab := Convert_Iv5ab_Type( Get( slices, 1030 ));
            rec.iv5ac := Convert_Iv5ac_Type( Get( slices, 1031 ));
            rec.iv6a := Convert_Hhch12_Type( Get( slices, 1032 ));
            rec.iv6b := Convert_Hhch12_Type( Get( slices, 1033 ));
            rec.iv6c := Convert_Hhch12_Type( Get( slices, 1034 ));
            rec.iv6d := Convert_Hhch12_Type( Get( slices, 1035 ));
            rec.iv6e := Convert_Hhch12_Type( Get( slices, 1036 ));
            rec.iv6f := Convert_Hhch12_Type( Get( slices, 1037 ));
            rec.iv7 := Convert( slices, 1038, ( -9, -8, -7 ) );
            rec.ghqa := Convert_Ghqa_Type( Get( slices, 1039 ));
            rec.ghqb := Convert_Ghqb_Type( Get( slices, 1040 ));
            rec.ghqc := Convert_Ghqc_Type( Get( slices, 1041 ));
            rec.ghqd := Convert_Ghqc_Type( Get( slices, 1042 ));
            rec.ghqe := Convert_Ghqe_Type( Get( slices, 1043 ));
            rec.ghqf := Convert_Ghqe_Type( Get( slices, 1044 ));
            rec.ghqg := Convert_Ghqc_Type( Get( slices, 1045 ));
            rec.ghqh := Convert_Ghqc_Type( Get( slices, 1046 ));
            rec.ghqi := Convert_Ghqb_Type( Get( slices, 1047 ));
            rec.ghqj := Convert_Ghqe_Type( Get( slices, 1048 ));
            rec.ghqk := Convert_Ghqe_Type( Get( slices, 1049 ));
            rec.ghql := Convert_Ghqc_Type( Get( slices, 1050 ));
            rec.opfamo := Convert_Opfamo_Type( Get( slices, 1051 ));
            rec.opfaml := Convert_Opfamj_Type( Get( slices, 1052 ));
            rec.opfamp := Convert_Opfamo_Type( Get( slices, 1053 ));
            rec.opfamq := Convert_Opfamq_Type( Get( slices, 1054 ));
            rec.opfamk := Convert_Opfamj_Type( Get( slices, 1055 ));
            rec.opfamr := Convert_Opfamr_Type( Get( slices, 1056 ));
            rec.lfsat1 := Convert_Lfsat1_Type( Get( slices, 1057 ));
            rec.lfsat2 := Convert_Lfsat1_Type( Get( slices, 1058 ));
            rec.lfsat3 := Convert_Lfsat1_Type( Get( slices, 1059 ));
            rec.lfsat4 := Convert_Lfsat1_Type( Get( slices, 1060 ));
            rec.lfsat5 := Convert_Lfsat1_Type( Get( slices, 1061 ));
            rec.lfsat6 := Convert_Lfsat1_Type( Get( slices, 1062 ));
            rec.lfsat7 := Convert_Lfsat1_Type( Get( slices, 1063 ));
            rec.lfsat8 := Convert_Lfsat1_Type( Get( slices, 1064 ));
            rec.lfsato := Convert_Lfsat1_Type( Get( slices, 1065 ));
            rec.lfsatl := Convert( slices, 1066, ( -9, -8, -7, -2, -1 ) );
            rec.netsx1 := Convert_Netsx1_Type( Get( slices, 1067 ));
            rec.netsx2 := Convert_Netsx1_Type( Get( slices, 1068 ));
            rec.netsx3 := Convert_Netsx1_Type( Get( slices, 1069 ));
            rec.net1wr := Convert_Aidpl1_Type( Get( slices, 1070 ));
            rec.net2wr := Convert_Aidpl1_Type( Get( slices, 1071 ));
            rec.net3wr := Convert_Aidpl1_Type( Get( slices, 1072 ));
            rec.net1rl := Convert_Net1rl_Type( Get( slices, 1073 ));
            rec.net2rl := Convert_Net1rl_Type( Get( slices, 1074 ));
            rec.net3rl := Convert_Net1rl_Type( Get( slices, 1075 ));
            rec.net1ag := Convert( slices, 1076, ( -9, -8, -7, -2, -1 ) );
            rec.net2ag := Convert( slices, 1077, ( -9, -8, -7, -2, -1 ) );
            rec.net3ag := Convert( slices, 1078, ( -9, -8, -7, -2, -1 ) );
            rec.net1kn := Convert_Net1kn_Type( Get( slices, 1079 ));
            rec.net2kn := Convert_Net1kn_Type( Get( slices, 1080 ));
            rec.net3kn := Convert_Net1kn_Type( Get( slices, 1081 ));
            rec.net1ph := Convert_Net1ph_Type( Get( slices, 1082 ));
            rec.net2ph := Convert_Net1ph_Type( Get( slices, 1083 ));
            rec.net3ph := Convert_Net1ph_Type( Get( slices, 1084 ));
            rec.net1lv := Convert_Net1lv_Type( Get( slices, 1085 ));
            rec.net2lv := Convert_Net1lv_Type( Get( slices, 1086 ));
            rec.net3lv := Convert_Net1lv_Type( Get( slices, 1087 ));
            rec.net1jb := Convert_Net1jb_Type( Get( slices, 1088 ));
            rec.net2jb := Convert_Net1jb_Type( Get( slices, 1089 ));
            rec.net3jb := Convert_Net1jb_Type( Get( slices, 1090 ));
            rec.netsoc := Convert( slices, 1091, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.prrs2i := Convert_Prrs2i_Type( Get( slices, 1092 ));
            rec.pripn := Convert( slices, 1093, ( -9, -8 ) );
            rec.prwhy := Convert_Prwhy_Type( Get( slices, 1094 ));
            rec.pplevr := Convert_Plever_Type( Get( slices, 1095 ));
            rec.prfehq := Convert_Prfehq_Type( Get( slices, 1096 ));
            rec.prsehq := Convert_Prsehq_Type( Get( slices, 1097 ));
            rec.presbgm := Convert_Presbgm_Type( Get( slices, 1098 ));
            rec.presby4 := Convert( slices, 1099, ( -9, -8, -7, -2, -1 ) );
            rec.presly := Convert_Presly_Type( Get( slices, 1100 ));
            rec.prf101 := Convert_Prf101_Type( Get( slices, 1101 ));
            rec.prf102 := Convert_Prf102_Type( Get( slices, 1102 ));
            rec.prf116 := Convert_Prf116_Type( Get( slices, 1103 ));
            rec.prf125 := Convert_Prf125_Type( Get( slices, 1104 ));
            rec.prf131 := Convert_Prf131_Type( Get( slices, 1105 ));
            rec.prf135 := Convert_Prf135_Type( Get( slices, 1106 ));
            rec.prf137 := Convert_Prf137_Type( Get( slices, 1107 ));
            rec.prf139 := Convert_Prf139_Type( Get( slices, 1108 ));
            rec.prf141 := Convert_Prf141_Type( Get( slices, 1109 ));
            rec.prfirn := Convert_Prfirn_Type( Get( slices, 1110 ));
            rec.prearn := Convert_Prearn_Type( Get( slices, 1111 ));
            rec.prjbbgm := Convert_Presbgm_Type( Get( slices, 1112 ));
            rec.prjbby4 := Convert( slices, 1113, ( -9, -8, -7, -2, -1 ) );
            rec.prjbly := Convert_Prjbly_Type( Get( slices, 1114 ));
            rec.prfitb := Convert_Prfitb_Type( Get( slices, 1115 ));
            rec.ivpa := Convert_Ivpa_Type( Get( slices, 1116 ));
            rec.ivpb := Convert_Ivpb_Type( Get( slices, 1117 ));
            rec.ivpc := Convert_Ivpc_Type( Get( slices, 1118 ));
            rec.ivpd := Convert_Ivpd_Type( Get( slices, 1119 ));
            rec.ivpe := Convert_Ivpe_Type( Get( slices, 1120 ));
            rec.telwhy := Convert_Telwhy_Type( Get( slices, 1121 ));
            rec.prjbft := Convert_Prjbft_Type( Get( slices, 1122 ));
            rec.tlfiyrl := Convert( slices, 1123, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.tlfiyr := Convert( slices, 1124, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.pid := Convert( slices, 1125 );
            rec.iviolw := Convert_Iviolw_Type( Get( slices, 1126 ));
            rec.hhmem := Convert_Hhmem_Type( Get( slices, 1127 ));
            rec.newhy := Convert_Newhy_Type( Get( slices, 1128 ));
            rec.nemnjn := Convert_Nemnjn_Type( Get( slices, 1129 ));
            rec.neyrjn4 := Convert( slices, 1130, ( -9, -8, -7, -2, -1 ) );
            rec.ivfio := Convert_Ivfio_Type( Get( slices, 1131 ));
            rec.iodc := Convert_Iodc_Type( Get( slices, 1132 ));
            rec.memorig := Convert_Memorig_Type( Get( slices, 1133 ));
            rec.hgr2r := Convert_Hgr2r_Type( Get( slices, 1134 ));
            rec.hgsex := Convert_Hgsex_Type( Get( slices, 1135 ));
            rec.hgbm := Convert_Hgbm_Type( Get( slices, 1136 ));
            rec.hgby := Convert( slices, 1137, ( -2, -1 ) );
            rec.mastat := Convert_Mastat_Type( Get( slices, 1138 ));
            rec.hgspn := Convert( slices, 1139, ( -9, -8, -2, -1 ) );
            rec.hgemp := Convert_Hgemp_Type( Get( slices, 1140 ));
            rec.hgfno := Convert( slices, 1141, ( -9, -8, -2, -1 ) );
            rec.hgmno := Convert( slices, 1142, ( -9, -8, -2, -1 ) );
            rec.hgra := Convert( slices, 1143, ( -9, -8, -2, -1 ) );
            rec.age := Convert( slices, 1144, ( -9, -8 ) );
            rec.age12 := Convert( slices, 1145, ( -9, -8 ) );
            rec.butype := Convert_Butype_Type( Get( slices, 1146 ));
            rec.buno := Convert( slices, 1147, ( -9, -8 ) );
            rec.nchild := Convert( slices, 1148, ( -9, -8 ) );
            rec.hoh := Convert_Hoh_Type( Get( slices, 1149 ));
            rec.rach16 := Convert_Hhch12_Type( Get( slices, 1150 ));
            rec.sampst := Convert_Sampst_Type( Get( slices, 1151 ));
            rec.movest := Convert_Movest_Type( Get( slices, 1152 ));
            rec.qfx := Convert_Aidpl1_Type( Get( slices, 1153 ));
            rec.qfxc := Convert_Qfc_Type( Get( slices, 1154 ));
            rec.qfxd := Convert_Qfd_Type( Get( slices, 1155 ));
            rec.qfxe := Convert_Qfe_Type( Get( slices, 1156 ));
            rec.qfxf := Convert_Qff_Type( Get( slices, 1157 ));
            rec.qfxg := Convert_Qfg_Type( Get( slices, 1158 ));
            rec.qfxh := Convert_Qfh_Type( Get( slices, 1159 ));
            rec.qfxk := Convert_Qfk_Type( Get( slices, 1160 ));
            rec.qfxl := Convert_Qfl_Type( Get( slices, 1161 ));
            rec.qfxm := Convert_Qfm_Type( Get( slices, 1162 ));
            rec.qfxn := Convert_Qfn_Type( Get( slices, 1163 ));
            rec.qfxo := Convert_Qfxo_Type( Get( slices, 1164 ));
            rec.qfxp := Convert_Qfxp_Type( Get( slices, 1165 ));
            rec.qfxq := Convert_Qfxq_Type( Get( slices, 1166 ));
            rec.qfxr := Convert_Qfxr_Type( Get( slices, 1167 ));
            rec.qfedx := Convert_Aidpl1_Type( Get( slices, 1168 ));
            rec.qfedxa := Convert_Qfedd_Type( Get( slices, 1169 ));
            rec.nqfexa := Convert( slices, 1170, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxb := Convert_Qfede_Type( Get( slices, 1171 ));
            rec.nqfexb := Convert( slices, 1172, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxc := Convert_Qfedj_Type( Get( slices, 1173 ));
            rec.nqfexc := Convert( slices, 1174, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxg := Convert_Qfedm_Type( Get( slices, 1175 ));
            rec.nqfexg := Convert( slices, 1176, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxh := Convert_Qfedxh_Type( Get( slices, 1177 ));
            rec.nqfexh := Convert( slices, 1178, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxi := Convert_Qfedo_Type( Get( slices, 1179 ));
            rec.nqfexi := Convert( slices, 1180, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxj := Convert( slices, 1181, ( -9, -8, -7 ) );
            rec.nqfexj := Convert( slices, 1182, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxl := Convert_Qfedt_Type( Get( slices, 1183 ));
            rec.nqfexl := Convert( slices, 1184, ( -9, -8, -7, -2, -1 ) );
            rec.region := Convert_Region_Type( Get( slices, 1185 ));
            rec.hhsize := Convert( slices, 1186, ( -9, -8 ) );
            rec.hhtype := Convert_Hhtype_Type( Get( slices, 1187 ));
            rec.tenure := Convert_Tenure_Type( Get( slices, 1188 ));
            rec.qfedhi := Convert_Qfedhi_Type( Get( slices, 1189 ));
            rec.qfvoc := Convert_Qfvoc_Type( Get( slices, 1190 ));
            rec.qfachi := Convert_Qfachi_Type( Get( slices, 1191 ));
            rec.jbft := Convert_Jbft_Type( Get( slices, 1192 ));
            rec.payg := Convert( slices, 1193, ( -9.0, -8.0, -7.0 ) );
            rec.payn := Convert( slices, 1194, ( -9.0, -8.0, -7.0 ) );
            rec.paygu := Convert( slices, 1195, ( -9.0, -8.0, -7.0 ) );
            rec.paynu := Convert( slices, 1196, ( -9.0, -8.0, -7.0 ) );
            rec.paygty := Convert( slices, 1197, ( -9.0, -8.0, -7.0 ) );
            rec.paygly := Convert( slices, 1198, ( -9.0, -8.0, -7.0 ) );
            rec.paynty := Convert( slices, 1199, ( -9.0, -8.0, -7.0 ) );
            rec.paynly := Convert( slices, 1200, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jsprof := Convert( slices, 1201, ( -9.0, -8.0, -7.0 ) );
            rec.jsloss := Convert( slices, 1202, ( -9.0, -8.0, -7.0 ) );
            rec.jspayg := Convert( slices, 1203, ( -9.0, -8.0, -7.0 ) );
            rec.cjsten := Convert( slices, 1204, ( -9.0, -8.0, -7.0 ) );
            rec.cjswk9 := Convert( slices, 1205, ( -9.0, -8.0, -7.0 ) );
            rec.jlid := Convert_Jlid_Type( Get( slices, 1206 ));
            rec.jlyid := Convert_Jlyid_Type( Get( slices, 1207 ));
            rec.jtyid := Convert_Jtyid_Type( Get( slices, 1208 ));
            rec.jbseg := Convert_Jbseg_Type( Get( slices, 1209 ));
            rec.jbgold := Convert( slices, 1210, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbrgsc := Convert_Jbrgsc_Type( Get( slices, 1211 ));
            rec.jbisco := Convert( slices, 1212 );
            rec.jbcssm := Convert( slices, 1213, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbcssf := Convert( slices, 1214, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbhgs := Convert( slices, 1215, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbsec := Convert_Jbsec_Type( Get( slices, 1216 ));
            rec.njbwks := Convert( slices, 1217, ( -9.0, -8.0, -7.0 ) );
            rec.njuwks := Convert( slices, 1218, ( -9.0, -8.0, -7.0 ) );
            rec.njiwks := Convert( slices, 1219, ( -9.0, -8.0, -7.0 ) );
            rec.njbnew := Convert( slices, 1220, ( -9, -8, -7 ) );
            rec.njbsp := Convert( slices, 1221, ( -9, -8, -7 ) );
            rec.njusp := Convert( slices, 1222, ( -9, -8, -7 ) );
            rec.njisp := Convert( slices, 1223, ( -9, -8, -7 ) );
            rec.jbstatl := Convert( slices, 1224, ( -9, -8, -7, -2, -1 ) );
            rec.jbstatt := Convert( slices, 1225, ( -9, -8, -7, -2, -1 ) );
            rec.jbsocly := Convert( slices, 1226, ( -9, -8, -7 ) );
            rec.jlseg := Convert_Jlseg_Type( Get( slices, 1227 ));
            rec.jlgold := Convert( slices, 1228, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlrgsc := Convert_Jlrgsc_Type( Get( slices, 1229 ));
            rec.jlisco := Convert( slices, 1230 );
            rec.jlcssm := Convert( slices, 1231, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlcssf := Convert( slices, 1232, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlhgs := Convert( slices, 1233, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlsec := Convert_Jlsec_Type( Get( slices, 1234 ));
            rec.vote := Convert_Vote_Type( Get( slices, 1235 ));
            rec.fiyrdic := Convert( slices, 1236, ( -9.0, -8.0, -7.0 ) );
            rec.fimnp := Convert( slices, 1237, ( -9.0, -8.0, -7.0 ) );
            rec.fimnb := Convert( slices, 1238, ( -9.0, -8.0, -7.0 ) );
            rec.fimni := Convert( slices, 1239, ( -9.0, -8.0, -7.0 ) );
            rec.fimnt := Convert( slices, 1240, ( -9.0, -8.0, -7.0 ) );
            rec.fimnl := Convert( slices, 1241, ( -9.0, -8.0, -7.0 ) );
            rec.fimnnl := Convert( slices, 1242, ( -9.0, -8.0, -7.0 ) );
            rec.fimn := Convert( slices, 1243, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrl := Convert( slices, 1244, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrnl := Convert( slices, 1245, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrp := Convert( slices, 1246, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrb := Convert( slices, 1247, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrt := Convert( slices, 1248, ( -9.0, -8.0, -7.0 ) );
            rec.fiyri := Convert( slices, 1249, ( -9.0, -8.0, -7.0 ) );
            rec.fiyr := Convert( slices, 1250, ( -9.0, -8.0, -7.0 ) );
            rec.fihhmn := Convert( slices, 1251, ( -9.0, -8.0, -7.0 ) );
            rec.hlghq1 := Convert( slices, 1252, ( -9, -8, -7 ) );
            rec.hlghq2 := Convert( slices, 1253, ( -9, -8, -7 ) );
            rec.spjb := Convert_Spjb_Type( Get( slices, 1254 ));
            rec.spsoc := Convert( slices, 1255, ( -9.0, -8.0 ) );
            rec.spjbhr := Convert( slices, 1256, ( -9, -8, -7 ) );
            rec.spjbot := Convert( slices, 1257, ( -9, -8, -7 ) );
            rec.sppayg := Convert( slices, 1258, ( -9.0, -8.0, -7.0 ) );
            rec.spjbyr := Convert( slices, 1259, ( -9, -8, -7 ) );
            rec.lrwght := Convert( slices, 1260 );
            rec.lewght := Convert( slices, 1261 );
            rec.xrwght := Convert( slices, 1262 );
            rec.xewght := Convert( slices, 1263 );
            rec.j2payi := Convert( slices, 1264, ( -9, -8, -7, -3, -2, -1 ) );
            rec.fiyrdii := Convert_Fiyrdii_Type( Get( slices, 1265 ));
            rec.prearni := Convert( slices, 1266, ( -9, -8, -2, -1 ) );
            rec.prfitbi := Convert_Prfitbi_Type( Get( slices, 1267 ));
            rec.paygui := Convert_Fimnbi_Type( Get( slices, 1268 ));
            rec.paynui := Convert_Fimnbi_Type( Get( slices, 1269 ));
            rec.paygti := Convert_Fimnbi_Type( Get( slices, 1270 ));
            rec.paygli := Convert_Fimnbi_Type( Get( slices, 1271 ));
            rec.paynti := Convert_Fimnbi_Type( Get( slices, 1272 ));
            rec.paynli := Convert_Fimnbi_Type( Get( slices, 1273 ));
            rec.jsprofi := Convert_Fimnbi_Type( Get( slices, 1274 ));
            rec.jspaygi := Convert_Fimnbi_Type( Get( slices, 1275 ));
            rec.fimnpi := Convert_Fimnbi_Type( Get( slices, 1276 ));
            rec.fimnbi := Convert_Fimnbi_Type( Get( slices, 1277 ));
            rec.fimnii := Convert_Fimnii_Type( Get( slices, 1278 ));
            rec.fimnti := Convert_Fimnii_Type( Get( slices, 1279 ));
            rec.fimnnli := Convert_Fimnbi_Type( Get( slices, 1280 ));
            rec.fimnli := Convert_Fimnbi_Type( Get( slices, 1281 ));
            rec.fimnthi := Convert_Fimnii_Type( Get( slices, 1282 ));
            rec.fiyrli := Convert_Fimnbi_Type( Get( slices, 1283 ));
            rec.fiyrnli := Convert_Fimnbi_Type( Get( slices, 1284 ));
            rec.fiyrpi := Convert_Fimnii_Type( Get( slices, 1285 ));
            rec.fiyrbi := Convert_Fimnbi_Type( Get( slices, 1286 ));
            rec.fiyrti := Convert_Fimnbi_Type( Get( slices, 1287 ));
            rec.fiyrii := Convert_Fimnbi_Type( Get( slices, 1288 ));
            rec.fiyeari := Convert_Fimnbi_Type( Get( slices, 1289 ));
            rec.sppaygi := Convert_Prfitbi_Type( Get( slices, 1290 ));
            rec.fihhmni := Convert_Fihhmni_Type( Get( slices, 1291 ));
            rec.mrjend := Convert( slices, 1292, ( -9, -8, -7, -3, -2, -1 ) );
            rec.mrjsoc := Convert( slices, 1293, ( -9, -8, -7, -3 ) );
            rec.mrjsic := Convert( slices, 1294, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjsemp := Convert_Mrjsemp_Type( Get( slices, 1295 ));
            rec.mrjboss := Convert_Mrjboss_Type( Get( slices, 1296 ));
            rec.mrjmngr := Convert_Mrjmngr_Type( Get( slices, 1297 ));
            rec.mrjsize := Convert_Mrjsize_Type( Get( slices, 1298 ));
            rec.mrjseg := Convert_Maseg_Type( Get( slices, 1299 ));
            rec.mrjgold := Convert( slices, 1300, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjrgsc := Convert_Margsc_Type( Get( slices, 1301 ));
            rec.mrjisco := Convert( slices, 1302 );
            rec.mrjcssm := Convert( slices, 1303, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjcssf := Convert( slices, 1304, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjhgs := Convert( slices, 1305, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjsec := Convert_J1sec_Type( Get( slices, 1306 ));
            rec.paseg := Convert_Maseg_Type( Get( slices, 1307 ));
            rec.pagold := Convert( slices, 1308, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.pargsc := Convert_Margsc_Type( Get( slices, 1309 ));
            rec.paisco := Convert( slices, 1310 );
            rec.pacssm := Convert( slices, 1311, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.pacssf := Convert( slices, 1312, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.pahgs := Convert( slices, 1313, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.pasec := Convert_J1sec_Type( Get( slices, 1314 ));
            rec.maseg := Convert_Maseg_Type( Get( slices, 1315 ));
            rec.magold := Convert( slices, 1316, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.margsc := Convert_Margsc_Type( Get( slices, 1317 ));
            rec.maisco := Convert( slices, 1318 );
            rec.macssm := Convert( slices, 1319, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.macssf := Convert( slices, 1320, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mahgs := Convert( slices, 1321, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.masec := Convert_J1sec_Type( Get( slices, 1322 ));
            rec.j1seg := Convert_J1seg_Type( Get( slices, 1323 ));
            rec.j1gold := Convert( slices, 1324, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.j1rgsc := Convert_J1rgsc_Type( Get( slices, 1325 ));
            rec.j1isco := Convert( slices, 1326 );
            rec.j1cssm := Convert( slices, 1327, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.j1cssf := Convert( slices, 1328, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.j1hgs := Convert( slices, 1329, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.j1sec := Convert_J1sec_Type( Get( slices, 1330 ));
            rec.fimnsel := Convert_Fimnsel_Type( Get( slices, 1331 ));
            rec.xrwtuk1 := Convert( slices, 1332 );
            rec.xewtuk1 := Convert( slices, 1333 );
            rec.xrwtuk2 := Convert( slices, 1334 );
            rec.xewtuk2 := Convert( slices, 1335 );
            rec.lrwtsw1 := Convert( slices, 1336 );
            rec.lewtsw1 := Convert( slices, 1337 );
            rec.lrwtsw2 := Convert( slices, 1338 );
            rec.lewtsw2 := Convert( slices, 1339 );
            rec.lrwtuk1 := Convert( slices, 1340 );
            rec.lewtuk1 := Convert( slices, 1341 );
            rec.lrwtuk2 := Convert( slices, 1342 );
            rec.lewtuk2 := Convert( slices, 1343 );
            rec.sppid := Convert( slices, 1344 );
            rec.fpid := Convert( slices, 1345 );
            rec.mpid := Convert( slices, 1346 );
            rec.distmov := Convert( slices, 1347, ( -9.0, -8.0, -7.0 ) );
            rec.mrjsic9 := Convert( slices, 1348, ( -9, -8, -2, -1 ) );
            rec.region2 := Convert_Region2_Type( Get( slices, 1349 ));
            rec.isced := Convert_Isced_Type( Get( slices, 1350 ));
            rec.casmin := Convert_Casmin_Type( Get( slices, 1351 ));
            rec.jbiscon := Convert( slices, 1352, ( -9, -8, -7, -2, -1 ) );
            rec.jliscon := Convert( slices, 1353, ( -9, -8, -7, -2, -1 ) );
            rec.mrjiscn := Convert( slices, 1354, ( -9, -8, -7, -2, -1 ) );
            rec.maiscon := Convert( slices, 1355, ( -9, -8, -7, -2, -1 ) );
            rec.paiscon := Convert( slices, 1356, ( -9, -8, -7, -2, -1 ) );
            rec.j1iscon := Convert( slices, 1357, ( -9, -8, -7, -2, -1 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Indresp_component ).start_pos = 0 ) then
               index.pointers( Indresp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Indresp_component ).counter := index.pointers( Indresp_component ).counter + 1;
            Put_Index( index_map, index );
            Indresp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Indresp_IO.Close( bin_file );
   end Create_Indresp_Wave_L;




   procedure Create_Indsamp_Wave_L( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Indsamp_IO.File_Type;
      rec         : Indsamp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Indsamp_IO.Create (bin_file, Indsamp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.pid := Convert( slices, 3 );
            rec.iviolw := Convert_Iviolw_Type( Get( slices, 4 ));
            rec.ivstat1 := Convert_Ivstat1_Type( Get( slices, 5 ));
            rec.ivelig := Convert_Ivelig_Type( Get( slices, 6 ));
            rec.hhmem := Convert_Hhmem_Type( Get( slices, 7 ));
            rec.newhy := Convert_Newhy_Type( Get( slices, 8 ));
            rec.nemnjn := Convert_Nemnjn_Type( Get( slices, 9 ));
            rec.neyrjn4 := Convert( slices, 10, ( -9, -8, -7, -2, -1 ) );
            rec.lvwhy := Convert_Lvwhy_Type( Get( slices, 11 ));
            rec.lvmn := Convert_Lvmn_Type( Get( slices, 12 ));
            rec.lvyr4 := Convert( slices, 13, ( -9, -8, -7, -2, -1 ) );
            rec.lvloc := Convert_Lvloc_Type( Get( slices, 14 ));
            rec.ivfio := Convert_Ivfio_Type( Get( slices, 15 ));
            rec.ivrref := Convert_Ivrref_Type( Get( slices, 16 ));
            rec.ivireis := Convert_Ivireis_Type( Get( slices, 17 ));
            rec.exp2mov := Convert_Exp2mov_Type( Get( slices, 18 ));
            rec.finloc := Convert_Finloc_Type( Get( slices, 19 ));
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 20 ));
            rec.memorig := Convert_Memorig_Type( Get( slices, 21 ));
            rec.sampst := Convert_Sampst_Type( Get( slices, 22 ));
            rec.movest := Convert_Movest_Type( Get( slices, 23 ));
            rec.lewght := Convert( slices, 24, ( -9.0, -8.0, -1.0 ) );
            rec.lrwght := Convert( slices, 25, ( -9.0, -8.0, -1.0 ) );
            rec.lrwtsw1 := Convert( slices, 26, ( -9.0, -8.0, -1.0 ) );
            rec.lewtsw1 := Convert( slices, 27, ( -9.0, -8.0, -1.0 ) );
            rec.lrwtsw2 := Convert( slices, 28, ( -9.0, -8.0, -1.0 ) );
            rec.lewtsw2 := Convert( slices, 29, ( -9.0, -8.0, -1.0 ) );
            rec.lrwtuk1 := Convert( slices, 30, ( -9.0, -8.0, -1.0 ) );
            rec.lewtuk1 := Convert( slices, 31, ( -9.0, -8.0, -1.0 ) );
            rec.lrwtuk2 := Convert( slices, 32, ( -9.0, -8.0, -1.0 ) );
            rec.lewtuk2 := Convert( slices, 33, ( -9.0, -8.0, -1.0 ) );
            rec.distmov := Convert( slices, 34, ( -9.0, -8.0 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Indsamp_component ).start_pos = 0 ) then
               index.pointers( Indsamp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Indsamp_component ).counter := index.pointers( Indsamp_component ).counter + 1;
            Put_Index( index_map, index );
            Indsamp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Indsamp_IO.Close( bin_file );
   end Create_Indsamp_Wave_L;




   procedure Create_Jobhist_Wave_L( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Jobhist_IO.File_Type;
      rec         : Jobhist_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Jobhist_IO.Create (bin_file, Jobhist_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.jhstat := Convert_Jhstat_Type( Get( slices, 3 ));
            rec.jhbgd := Convert( slices, 4, ( -9, -8, -7, -2, -1 ) );
            rec.jhbgm := Convert_Jbbgm1_Type( Get( slices, 5 ));
            rec.jhbgy4 := Convert( slices, 6, ( -9, -8, -7, -2, -1 ) );
            rec.jspno := Convert( slices, 7 );
            rec.jhsoc := Convert( slices, 8, ( -9, -8, -2, -1 ) );
            rec.jhsoc00 := Convert( slices, 9, ( -9, -8, -2, -1 ) );
            rec.jhsemp := Convert_Jhsemp_Type( Get( slices, 10 ));
            rec.jhboss := Convert_Bscon_Type( Get( slices, 11 ));
            rec.jhsect := Convert_Jhsect_Type( Get( slices, 12 ));
            rec.jhmngr := Convert_Jhmngr_Type( Get( slices, 13 ));
            rec.jhpldf := Convert_Jhpldf_Type( Get( slices, 14 ));
            rec.jhsic92 := Convert( slices, 15, ( -9, -8, -7 ) );
            rec.jhsize := Convert_Jhsize_Type( Get( slices, 16 ));
            rec.jhpayl := Convert( slices, 17, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhpylw := Convert( slices, 18, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.jhpylg := Convert_Jhpylg_Type( Get( slices, 19 ));
            rec.jhstpy := Convert_Jhstpy_Type( Get( slices, 20 ));
            rec.jblky := Convert_Jblky_Type( Get( slices, 21 ));
            rec.jhendd := Convert( slices, 22, ( -9, -8, -7, -2, -1 ) );
            rec.jhendm := Convert_Jbbgm1_Type( Get( slices, 23 ));
            rec.jhendy4 := Convert( slices, 24, ( -9, -8, -7, -2, -1 ) );
            rec.jha9ly := Convert_Jha9ly_Type( Get( slices, 25 ));
            rec.jhseg := Convert_Jhseg_Type( Get( slices, 26 ));
            rec.jhgold := Convert( slices, 27, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhrgsc := Convert_Jhrgsc_Type( Get( slices, 28 ));
            rec.jhisco := Convert( slices, 29, ( -9, -8 ) );
            rec.jhcssm := Convert( slices, 30, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhcssf := Convert( slices, 31, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhhgs := Convert( slices, 32, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhsec := Convert_Jhsec_Type( Get( slices, 33 ));
            rec.jhspw := Convert( slices, 34, ( -9.0, -8.0 ) );
            rec.jhgpay := Convert( slices, 35, ( -9.0, -8.0, -7.0 ) );
            rec.jhnpay := Convert( slices, 36, ( -9.0, -8.0, -7.0, -1.0 ) );
            rec.jhgpayi := Convert_Jhgpayi_Type( Get( slices, 37 ));
            rec.jhnpayi := Convert_Jhgpayi_Type( Get( slices, 38 ));
            rec.pid := Convert( slices, 39 );
            rec.jhiscon := Convert( slices, 40, ( -9, -8, -7, -2, -1 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Jobhist_component ).start_pos = 0 ) then
               index.pointers( Jobhist_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Jobhist_component ).counter := index.pointers( Jobhist_component ).counter + 1;
            Put_Index( index_map, index );
            Jobhist_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Jobhist_IO.Close( bin_file );
   end Create_Jobhist_Wave_L;




   procedure Create_Lifemst_Wave_L( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Lifemst_IO.File_Type;
      rec         : Lifemst_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Lifemst_IO.Create (bin_file, Lifemst_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.leshno := Convert( slices, 3 );
            rec.leshst := Convert_Leshst_Type( Get( slices, 4 ));
            rec.leshem := Convert_Leshem_Type( Get( slices, 5 ));
            rec.leshey4 := Convert( slices, 6, ( -9, -8, -7, -2, -1 ) );
            rec.leshne := Convert_Lcsne_Type( Get( slices, 7 ));
            rec.leshsm := Convert_Leshem_Type( Get( slices, 8 ));
            rec.leshsy4 := Convert( slices, 9, ( -9, -8, -7, -2, -1 ) );
            rec.leslen := Convert( slices, 10, ( -9.0, -3.0 ) );
            rec.pid := Convert( slices, 11 );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Lifemst_component ).start_pos = 0 ) then
               index.pointers( Lifemst_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Lifemst_component ).counter := index.pointers( Lifemst_component ).counter + 1;
            Put_Index( index_map, index );
            Lifemst_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Lifemst_IO.Close( bin_file );
   end Create_Lifemst_Wave_L;




   procedure Create_Marriag_Wave_L( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Marriag_IO.File_Type;
      rec         : Marriag_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Marriag_IO.Create (bin_file, Marriag_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.lmarm := Convert_Lacbm_Type( Get( slices, 3 ));
            rec.lmary4 := Convert( slices, 4, ( -9, -8, -7, -2, -1 ) );
            rec.lmcoh := Convert_Frnow_Type( Get( slices, 5 ));
            rec.lmcbm := Convert_Lacbm_Type( Get( slices, 6 ));
            rec.lmcby4 := Convert( slices, 7, ( -9, -8, -7, -2, -1 ) );
            rec.lmend := Convert_Lmend_Type( Get( slices, 8 ));
            rec.lmwwm := Convert_Lacbm_Type( Get( slices, 9 ));
            rec.lmwwy4 := Convert( slices, 10, ( -9, -8, -7, -2, -1 ) );
            rec.lmdvm := Convert_Lacbm_Type( Get( slices, 11 ));
            rec.lmdvy4 := Convert( slices, 12, ( -9, -8, -7, -2, -1 ) );
            rec.lmspm := Convert_Lacbm_Type( Get( slices, 13 ));
            rec.lmspy4 := Convert( slices, 14, ( -9, -8, -7, -2, -1 ) );
            rec.marno := Convert( slices, 15 );
            rec.pid := Convert( slices, 16 );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Marriag_component ).start_pos = 0 ) then
               index.pointers( Marriag_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Marriag_component ).counter := index.pointers( Marriag_component ).counter + 1;
            Put_Index( index_map, index );
            Marriag_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Marriag_IO.Close( bin_file );
   end Create_Marriag_Wave_L;




   procedure Create_Youth_Wave_L( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Youth_IO.File_Type;
      rec         : Youth_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Youth_IO.Create (bin_file, Youth_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.pno := Convert( slices, 1 );
            rec.ypdobm := Convert_Ypdobm_Type( Get( slices, 2 ));
            rec.ypdoby4 := Convert( slices, 3, ( -9, -8, -7, -2, -1 ) );
            rec.ypsex := Convert_Ypsex_Type( Get( slices, 4 ));
            rec.ytvhrs := Convert_Ytvhrs_Type( Get( slices, 5 ));
            rec.ytvstp := Convert_Ytvlmt_Type( Get( slices, 6 ));
            rec.ypacta := Convert_Ypacta_Type( Get( slices, 7 ));
            rec.ypactb := Convert_Ypacta_Type( Get( slices, 8 ));
            rec.ypactc := Convert_Ypacta_Type( Get( slices, 9 ));
            rec.ypactd := Convert_Ypacta_Type( Get( slices, 10 ));
            rec.ypacte := Convert_Ypacta_Type( Get( slices, 11 ));
            rec.ypactm := Convert_Ypacta_Type( Get( slices, 12 ));
            rec.ypactn := Convert_Ypacta_Type( Get( slices, 13 ));
            rec.ypactl := Convert_Ypacta_Type( Get( slices, 14 ));
            rec.ypchor := Convert_Ypchor_Type( Get( slices, 15 ));
            rec.ypcomp := Convert_Ypcomp_Type( Get( slices, 16 ));
            rec.yppchw := Convert_Yppcg_Type( Get( slices, 17 ));
            rec.yppcg := Convert_Yppcg_Type( Get( slices, 18 ));
            rec.yppcnt := Convert_Yppcg_Type( Get( slices, 19 ));
            rec.ypmobu := Convert_Ypbeau_Type( Get( slices, 20 ));
            rec.yppals := Convert_Yppalo_Type( Get( slices, 21 ));
            rec.yppalo := Convert_Yppalo_Type( Get( slices, 22 ));
            rec.yplate := Convert_Yplate_Type( Get( slices, 23 ));
            rec.ypargm := Convert_Ypargm_Type( Get( slices, 24 ));
            rec.ypargf := Convert_Ypargf_Type( Get( slices, 25 ));
            rec.yptlkm := Convert_Ypargm_Type( Get( slices, 26 ));
            rec.yptlkf := Convert_Ypargf_Type( Get( slices, 27 ));
            rec.ypnpal := Convert( slices, 28, ( -9, -8, -2, -1 ) );
            rec.ypfght := Convert_Ypfght_Type( Get( slices, 29 ));
            rec.ypeatn := Convert_Ypeatn_Type( Get( slices, 30 ));
            rec.ypsmev := Convert_Ypbeau_Type( Get( slices, 31 ));
            rec.ypsmof := Convert_Ypsmof_Type( Get( slices, 32 ));
            rec.ypsmlw := Convert( slices, 33, ( -9, -8, -2, -1 ) );
            rec.ypdgfr := Convert_Ypdgfr_Type( Get( slices, 34 ));
            rec.ypesta := Convert_Ypesta_Type( Get( slices, 35 ));
            rec.ypesti := Convert_Ypesti_Type( Get( slices, 36 ));
            rec.ypestb := Convert_Ypesta_Type( Get( slices, 37 ));
            rec.ypestj := Convert_Ypesti_Type( Get( slices, 38 ));
            rec.ypestc := Convert_Ypesta_Type( Get( slices, 39 ));
            rec.ypestk := Convert_Ypesti_Type( Get( slices, 40 ));
            rec.ypeste := Convert_Ypesta_Type( Get( slices, 41 ));
            rec.ypestf := Convert_Ypesta_Type( Get( slices, 42 ));
            rec.yptcha := Convert_Ypesta_Type( Get( slices, 43 ));
            rec.yptchb := Convert_Ypesta_Type( Get( slices, 44 ));
            rec.yphsw := Convert_Yphap_Type( Get( slices, 45 ));
            rec.yphap := Convert_Yphap_Type( Get( slices, 46 ));
            rec.yphfm := Convert_Yphap_Type( Get( slices, 47 ));
            rec.yphfr := Convert_Yphap_Type( Get( slices, 48 ));
            rec.yphsc := Convert_Yphap_Type( Get( slices, 49 ));
            rec.yphlf := Convert_Yphap_Type( Get( slices, 50 ));
            rec.ypvte6 := Convert_Ypvte6_Type( Get( slices, 51 ));
            rec.ypvte3 := Convert_Ypvte3_Type( Get( slices, 52 ));
            rec.ypvt11 := Convert_Ypvt11_Type( Get( slices, 53 ));
            rec.yptrun := Convert_Yptrun_Type( Get( slices, 54 ));
            rec.ypbull := Convert_Ypbull_Type( Get( slices, 55 ));
            rec.ypopsc := Convert_Ypopsc_Type( Get( slices, 56 ));
            rec.yplvsc := Convert_Yplvsc_Type( Get( slices, 57 ));
            rec.ypacvs := Convert_Scach_Type( Get( slices, 58 ));
            rec.ypsoc := Convert( slices, 59, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.ypwklw := Convert_Ypbeau_Type( Get( slices, 60 ));
            rec.ypsoc1 := Convert( slices, 61, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.ypsoc2 := Convert( slices, 62, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.ypwhrs := Convert( slices, 63, ( -9, -8, -2, -1 ) );
            rec.yppay := Convert( slices, 64, ( -9, -8, -2, -1 ) );
            rec.ypwkm := Convert_Ypwkm_Type( Get( slices, 65 ));
            rec.ypwkt := Convert_Ypwkt_Type( Get( slices, 66 ));
            rec.ypwkw := Convert_Ypwkw_Type( Get( slices, 67 ));
            rec.ypwkth := Convert_Ypwkth_Type( Get( slices, 68 ));
            rec.ypwkf := Convert_Ypwkf_Type( Get( slices, 69 ));
            rec.ypwksa := Convert_Ypwksa_Type( Get( slices, 70 ));
            rec.ypwksu := Convert_Ypwksu_Type( Get( slices, 71 ));
            rec.yplvhm := Convert( slices, 72, ( -9, -8, -2, -1 ) );
            rec.yp2uni := Convert_Yp2uni_Type( Get( slices, 73 ));
            rec.ypnuna := Convert_Ypnuna_Type( Get( slices, 74 ));
            rec.ypnunb := Convert_Ypnunb_Type( Get( slices, 75 ));
            rec.ypjbqa := Convert_Ypjbqa_Type( Get( slices, 76 ));
            rec.ypjbqd := Convert_Ypjbqa_Type( Get( slices, 77 ));
            rec.ypjbqb := Convert_Ypjbqa_Type( Get( slices, 78 ));
            rec.ypjbqf := Convert_Ypjbqf_Type( Get( slices, 79 ));
            rec.ypjbqg := Convert_Ypjbqf_Type( Get( slices, 80 ));
            rec.ypjbqh := Convert_Ypjbqf_Type( Get( slices, 81 ));
            rec.ypfuta := Convert_Ypfuta_Type( Get( slices, 82 ));
            rec.ypfutb := Convert_Ypfutb_Type( Get( slices, 83 ));
            rec.ypwght := Convert( slices, 84 );
            rec.hid := Convert( slices, 85 );
            rec.pid := Convert( slices, 86 );
            rec.fnspno := Convert( slices, 87, ( -9, -8 ) );
            rec.fnspid := Convert( slices, 88, ( -9.0, -8.0 ) );
            rec.mnspno := Convert( slices, 89, ( -9, -8 ) );
            rec.mnspid := Convert( slices, 90, ( -9.0, -8.0 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Youth_component ).start_pos = 0 ) then
               index.pointers( Youth_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Youth_component ).counter := index.pointers( Youth_component ).counter + 1;
            Put_Index( index_map, index );
            Youth_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Youth_IO.Close( bin_file );
   end Create_Youth_Wave_L;




   procedure Create_Child_Wave_M( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Child_IO.File_Type;
      rec         : Child_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Child_IO.Create (bin_file, Child_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.pno := Convert( slices, 1, ( -9, -8 ) );
            rec.scpno := Convert( slices, 2, ( -9, -8 ) );
            rec.scage := Convert( slices, 3, ( -9, -8, -2, -1 ) );
            rec.scsex := Convert_Scsex_Type( Get( slices, 4 ));
            rec.scage4 := Convert_Scag11_Type( Get( slices, 5 ));
            rec.sctyp := Convert_Sctyp_Type( Get( slices, 6 ));
            rec.schbgy := Convert( slices, 7, ( -9, -8, -2, -1 ) );
            rec.schbgm := Convert( slices, 8, ( -9, -8, -2, -1 ) );
            rec.schsta := Convert_Schsta_Type( Get( slices, 9 ));
            rec.schsat := Convert_Schsat_Type( Get( slices, 10 ));
            rec.schhw := Convert_Schhw_Type( Get( slices, 11 ));
            rec.scacvs := Convert_Scach_Type( Get( slices, 12 ));
            rec.scach := Convert_Scach_Type( Get( slices, 13 ));
            rec.scag11 := Convert_Scag11_Type( Get( slices, 14 ));
            rec.sctut := Convert_Sctut_Type( Get( slices, 15 ));
            rec.sctute := Convert_Sctute_Type( Get( slices, 16 ));
            rec.sctutm := Convert_Sctutm_Type( Get( slices, 17 ));
            rec.sctuts := Convert_Sctuts_Type( Get( slices, 18 ));
            rec.sctutl := Convert_Sctutl_Type( Get( slices, 19 ));
            rec.sctuth := Convert_Sctuth_Type( Get( slices, 20 ));
            rec.sctuto := Convert_Sctuto_Type( Get( slices, 21 ));
            rec.sc2uni := Convert_Sc2uni_Type( Get( slices, 22 ));
            rec.scluni := Convert_Scluni_Type( Get( slices, 23 ));
            rec.scarg := Convert_Scarg_Type( Get( slices, 24 ));
            rec.sctalk := Convert_Scarg_Type( Get( slices, 25 ));
            rec.scpraz := Convert_Sccudl_Type( Get( slices, 26 ));
            rec.scsmak := Convert_Sccudl_Type( Get( slices, 27 ));
            rec.sccudl := Convert_Sccudl_Type( Get( slices, 28 ));
            rec.scyell := Convert_Sccudl_Type( Get( slices, 29 ));
            rec.scpid := Convert( slices, 30 );
            rec.pid := Convert( slices, 31 );
            rec.hid := Convert( slices, 32 );
            rec.cheseq := Convert( slices, 33, ( -9, -8 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Child_component ).start_pos = 0 ) then
               index.pointers( Child_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Child_component ).counter := index.pointers( Child_component ).counter + 1;
            Put_Index( index_map, index );
            Child_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Child_IO.Close( bin_file );
   end Create_Child_Wave_M;




   procedure Create_Egoalt_Wave_M( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Egoalt_IO.File_Type;
      rec         : Egoalt_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Egoalt_IO.Create (bin_file, Egoalt_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.opno := Convert( slices, 3, (  1 .. 0 => -9 ) );
            rec.rel := Convert_Rel_Type( Get( slices, 4 ));
            rec.sex := Convert_Sex_Type( Get( slices, 5 ));
            rec.osex := Convert_Hgsex_Type( Get( slices, 6 ));
            rec.lwstat := Convert_Lwstat_Type( Get( slices, 7 ));
            rec.nwstat := Convert_Nwstat_Type( Get( slices, 8 ));
            rec.pid := Convert( slices, 9 );
            rec.opid := Convert( slices, 10 );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Egoalt_component ).start_pos = 0 ) then
               index.pointers( Egoalt_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Egoalt_component ).counter := index.pointers( Egoalt_component ).counter + 1;
            Put_Index( index_map, index );
            Egoalt_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Egoalt_IO.Close( bin_file );
   end Create_Egoalt_Wave_M;




   procedure Create_Hhresp_Wave_M( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Hhresp_IO.File_Type;
      rec         : Hhresp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Hhresp_IO.Create (bin_file, Hhresp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.hhdoi := Convert( slices, 2, ( -9, -8, -7 ) );
            rec.hhmoi := Convert_Doim_Type( Get( slices, 3 ));
            rec.hhyoi4 := Convert( slices, 4, ( -9, -8, -7, -2, -1 ) );
            rec.hhsoih := Convert( slices, 5, ( -9, -8, -7 ) );
            rec.hhsoim := Convert( slices, 6, ( -9, -8, -7 ) );
            rec.hstype := Convert_Hstype_Type( Get( slices, 7 ));
            rec.hsrins := Convert_Cjsck2_Type( Get( slices, 8 ));
            rec.hsroom := Convert( slices, 9, ( -9, -8, -7, -2, -1 ) );
            rec.hsownd := Convert_Hsownd_Type( Get( slices, 10 ));
            rec.hsowr1 := Convert( slices, 11, ( -9, -8, -7, -2, -1 ) );
            rec.hsowr2 := Convert( slices, 12, ( -9, -8, -7, -2, -1 ) );
            rec.hsval := Convert( slices, 13, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.mghave := Convert_Mghave_Type( Get( slices, 14 ));
            rec.hsowrp := Convert_Bscon_Type( Get( slices, 15 ));
            rec.mgynot := Convert_Mgynot_Type( Get( slices, 16 ));
            rec.hscost := Convert( slices, 17, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.hsyr04 := Convert( slices, 18, ( -9, -8, -7, -2, -1 ) );
            rec.mgyr04 := Convert( slices, 19, ( -9, -8, -7, -2, -1 ) );
            rec.mgly := Convert_Bscon_Type( Get( slices, 20 ));
            rec.hsivlw := Convert( slices, 21, ( -9, -8, -7, -2, -1 ) );
            rec.mgold := Convert( slices, 22, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.mglife := Convert( slices, 23, ( -9, -8, -7, -2, -1 ) );
            rec.mgtype := Convert_Mgtype_Type( Get( slices, 24 ));
            rec.mgxtra := Convert_Bscon_Type( Get( slices, 25 ));
            rec.mgnew := Convert( slices, 26, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.mgxty1 := Convert_Mgxty1_Type( Get( slices, 27 ));
            rec.mgxty2 := Convert_Mgxty2_Type( Get( slices, 28 ));
            rec.mgxty3 := Convert_Mgxty3_Type( Get( slices, 29 ));
            rec.mgxty4 := Convert_Mgxty4_Type( Get( slices, 30 ));
            rec.mgxty5 := Convert_Mgxty5_Type( Get( slices, 31 ));
            rec.xpmg := Convert( slices, 32, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.xpmg1 := Convert_Bscon_Type( Get( slices, 33 ));
            rec.xpmg2 := Convert_Bscon_Type( Get( slices, 34 ));
            rec.xpmg3 := Convert_Bscon_Type( Get( slices, 35 ));
            rec.xpmg4 := Convert_Bscon_Type( Get( slices, 36 ));
            rec.hsjb := Convert_Bscon_Type( Get( slices, 37 ));
            rec.rentp1 := Convert( slices, 38, ( -9, -8, -7, -2, -1 ) );
            rec.rentp2 := Convert( slices, 39, ( -9, -8, -7, -2, -1 ) );
            rec.rentll := Convert_Rentll_Type( Get( slices, 40 ));
            rec.rentf := Convert_Rentf_Type( Get( slices, 41 ));
            rec.rent := Convert( slices, 42, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.rentw := Convert( slices, 43, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.rent1 := Convert_Rent1_Type( Get( slices, 44 ));
            rec.rent7 := Convert_Rent7_Type( Get( slices, 45 ));
            rec.rent2 := Convert_Rent1_Type( Get( slices, 46 ));
            rec.rent3 := Convert_Bscon_Type( Get( slices, 47 ));
            rec.rent4 := Convert_Bscon_Type( Get( slices, 48 ));
            rec.rent5 := Convert_Bscon_Type( Get( slices, 49 ));
            rec.rent8 := Convert_Coh1mr_Type( Get( slices, 50 ));
            rec.rent6 := Convert_Bscon_Type( Get( slices, 51 ));
            rec.renthb := Convert_Renthb_Type( Get( slices, 52 ));
            rec.rentg := Convert( slices, 53, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.rentgw := Convert( slices, 54, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.xphsdf := Convert( slices, 55, ( -9, -8, -7, -2, -1 ) );
            rec.xphsd1 := Convert_Bscon_Type( Get( slices, 56 ));
            rec.xphsd2 := Convert_Bscon_Type( Get( slices, 57 ));
            rec.xphsdb := Convert_Bscon_Type( Get( slices, 58 ));
            rec.hskch := Convert_Boolean_With_Missing( Get( slices, 59 ));
            rec.hskchs := Convert_Boolean_With_Missing( Get( slices, 60 ));
            rec.hsbth := Convert_Boolean_With_Missing( Get( slices, 61 ));
            rec.hsbths := Convert_Boolean_With_Missing( Get( slices, 62 ));
            rec.hstlt := Convert_Boolean_With_Missing( Get( slices, 63 ));
            rec.hstlts := Convert_Boolean_With_Missing( Get( slices, 64 ));
            rec.hsgdn := Convert_Boolean_With_Missing( Get( slices, 65 ));
            rec.hsgdns := Convert_Boolean_With_Missing( Get( slices, 66 ));
            rec.xpgasy := Convert( slices, 67, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.xplecy := Convert( slices, 68, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.xpoily := Convert( slices, 69, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.xpsfly := Convert( slices, 70, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.heatch := Convert_Bscon_Type( Get( slices, 71 ));
            rec.heatyp := Convert_Heatyp_Type( Get( slices, 72 ));
            rec.hsprbg := Convert_Boolean_With_Missing( Get( slices, 73 ));
            rec.hsprbh := Convert_Boolean_With_Missing( Get( slices, 74 ));
            rec.hsprbi := Convert_Boolean_With_Missing( Get( slices, 75 ));
            rec.hsprbj := Convert_Boolean_With_Missing( Get( slices, 76 ));
            rec.hsprbk := Convert_Boolean_With_Missing( Get( slices, 77 ));
            rec.hsprbl := Convert_Boolean_With_Missing( Get( slices, 78 ));
            rec.hsprbm := Convert_Boolean_With_Missing( Get( slices, 79 ));
            rec.hsprbn := Convert_Boolean_With_Missing( Get( slices, 80 ));
            rec.hsprbo := Convert_Boolean_With_Missing( Get( slices, 81 ));
            rec.hsprbp := Convert_Boolean_With_Missing( Get( slices, 82 ));
            rec.hsprbq := Convert_Boolean_With_Missing( Get( slices, 83 ));
            rec.hsctax := Convert_Hsctax_Type( Get( slices, 84 ));
            rec.hs2ownd := Convert_Bscon_Type( Get( slices, 85 ));
            rec.hs2valo := Convert( slices, 86, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.hs2vala := Convert_Hldsbl1_Type( Get( slices, 87 ));
            rec.hs2valb := Convert_Hldsbl1_Type( Get( slices, 88 ));
            rec.hs2valc := Convert_Hldsbl1_Type( Get( slices, 89 ));
            rec.hs2vald := Convert_Hldsbl1_Type( Get( slices, 90 ));
            rec.mgtot := Convert( slices, 91, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.cdhave := Convert_Bscon_Type( Get( slices, 92 ));
            rec.cdbght := Convert_Bscon_Type( Get( slices, 93 ));
            rec.cd1use := Convert_Cd1new_Type( Get( slices, 94 ));
            rec.cd1new := Convert( slices, 95, ( -9, -8, -7, -2, -1 ) );
            rec.cd1cst := Convert( slices, 96, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd2use := Convert_Cd1new_Type( Get( slices, 97 ));
            rec.cd2new := Convert( slices, 98, ( -9, -8, -7, -2, -1 ) );
            rec.cd2cst := Convert( slices, 99, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd10use := Convert_Cd10new_Type( Get( slices, 100 ));
            rec.cd10new := Convert( slices, 101, ( -9, -8, -7, -2, -1 ) );
            rec.cd10cst := Convert( slices, 102, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd11use := Convert_Cd10new_Type( Get( slices, 103 ));
            rec.cd11new := Convert( slices, 104, ( -9, -8, -7, -2, -1 ) );
            rec.cd11cst := Convert( slices, 105, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd3use := Convert_Cd1new_Type( Get( slices, 106 ));
            rec.cd3new := Convert( slices, 107, ( -9, -8, -7, -2, -1 ) );
            rec.cd3cst := Convert( slices, 108, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd4use := Convert_Cd1new_Type( Get( slices, 109 ));
            rec.cd4new := Convert( slices, 110, ( -9, -8, -7, -2, -1 ) );
            rec.cd4cst := Convert( slices, 111, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd5use := Convert_Cd1new_Type( Get( slices, 112 ));
            rec.cd5new := Convert( slices, 113, ( -9, -8, -7, -2, -1 ) );
            rec.cd5cst := Convert( slices, 114, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd6use := Convert_Cd1new_Type( Get( slices, 115 ));
            rec.cd6new := Convert( slices, 116, ( -9, -8, -7, -2, -1 ) );
            rec.cd6cst := Convert( slices, 117, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd7use := Convert_Cd1new_Type( Get( slices, 118 ));
            rec.cd7new := Convert( slices, 119, ( -9, -8, -7, -2, -1 ) );
            rec.cd7cst := Convert( slices, 120, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd8use := Convert_Cd1new_Type( Get( slices, 121 ));
            rec.cd8new := Convert( slices, 122, ( -9, -8, -7, -2, -1 ) );
            rec.cd8cst := Convert( slices, 123, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd9use := Convert_Cd1new_Type( Get( slices, 124 ));
            rec.cd9new := Convert( slices, 125, ( -9, -8, -7, -2, -1 ) );
            rec.cd9cst := Convert( slices, 126, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd12use := Convert_Cd10new_Type( Get( slices, 127 ));
            rec.cd12new := Convert( slices, 128, ( -9, -8, -7, -2, -1 ) );
            rec.cd12cst := Convert( slices, 129, ( -9, -8, -7, -3, -2, -1 ) );
            rec.pcnet := Convert_Boolean_With_Missing( Get( slices, 130 ));
            rec.xphp := Convert_Bscon_Type( Get( slices, 131 ));
            rec.xphpdf := Convert_Xphpdf_Type( Get( slices, 132 ));
            rec.hscana := Convert_Boolean_With_Missing( Get( slices, 133 ));
            rec.hscnta := Convert_Boolean_With_Missing( Get( slices, 134 ));
            rec.hscanb := Convert_Boolean_With_Missing( Get( slices, 135 ));
            rec.hscntb := Convert_Boolean_With_Missing( Get( slices, 136 ));
            rec.hscanc := Convert_Boolean_With_Missing( Get( slices, 137 ));
            rec.hscntc := Convert_Boolean_With_Missing( Get( slices, 138 ));
            rec.hscand := Convert_Boolean_With_Missing( Get( slices, 139 ));
            rec.hscntd := Convert_Boolean_With_Missing( Get( slices, 140 ));
            rec.hscane := Convert_Boolean_With_Missing( Get( slices, 141 ));
            rec.hscnte := Convert_Boolean_With_Missing( Get( slices, 142 ));
            rec.hscanf := Convert_Boolean_With_Missing( Get( slices, 143 ));
            rec.hscntf := Convert_Boolean_With_Missing( Get( slices, 144 ));
            rec.xpfood := Convert( slices, 145, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ncars := Convert_Ncars_Type( Get( slices, 146 ));
            rec.carown := Convert_Carown_Type( Get( slices, 147 ));
            rec.carval := Convert( slices, 148, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ivh1 := Convert( slices, 149, ( -9, -8, -7, -1 ) );
            rec.ivh2 := Convert( slices, 150, ( -9, -8, -7 ) );
            rec.ivh3 := Convert( slices, 151, ( -9, -8, -7 ) );
            rec.hhfoih := Convert( slices, 152, ( -9, -8, -7 ) );
            rec.hhfoim := Convert( slices, 153, ( -9, -8, -7 ) );
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 154 ));
            rec.hhorig := Convert_Hhorig_Type( Get( slices, 155 ));
            rec.hhdc := Convert_Hhdc_Type( Get( slices, 156 ));
            rec.xhwght := Convert( slices, 157, ( -9.0, -8.0 ) );
            rec.hhsize := Convert( slices, 158, ( -9, -8 ) );
            rec.hhtype := Convert_Hhtype_Type( Get( slices, 159 ));
            rec.region := Convert_Region_Type( Get( slices, 160 ));
            rec.nch02 := Convert( slices, 161, ( -9, -8 ) );
            rec.nch34 := Convert( slices, 162, ( -9, -8 ) );
            rec.nch511 := Convert( slices, 163, ( -9, -8 ) );
            rec.nch1215 := Convert( slices, 164, ( -9, -8 ) );
            rec.nch1618 := Convert( slices, 165, ( -9, -8 ) );
            rec.nkids := Convert( slices, 166, ( -9, -8 ) );
            rec.nwed := Convert( slices, 167, ( -9, -8 ) );
            rec.npens := Convert( slices, 168, ( -9, -8 ) );
            rec.na75pl := Convert( slices, 169, ( -9, -8 ) );
            rec.agechy := Convert( slices, 170, ( -9, -8 ) );
            rec.ncouple := Convert( slices, 171, ( -9, -8 ) );
            rec.nonepar := Convert( slices, 172, ( -9, -8 ) );
            rec.nemp := Convert( slices, 173, ( -9, -8 ) );
            rec.nwage := Convert( slices, 174, ( -9, -8 ) );
            rec.tenure := Convert_Tenure_Type( Get( slices, 175 ));
            rec.xphsn := Convert( slices, 176, ( -9.0, -8.0, -7.0 ) );
            rec.xphsg := Convert( slices, 177, ( -9.0, -8.0, -7.0 ) );
            rec.fieqfcb := Convert( slices, 178, ( -9.0, -8.0 ) );
            rec.fieqfca := Convert( slices, 179, ( -9.0, -8.0 ) );
            rec.fihhyr := Convert( slices, 180, ( -9.0, -8.0, -7.0 ) );
            rec.fihhmn := Convert( slices, 181, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyl := Convert( slices, 182, ( -9.0, -8.0, -7.0 ) );
            rec.fihhynl := Convert( slices, 183, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyp := Convert( slices, 184, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyb := Convert( slices, 185, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyt := Convert( slices, 186, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyi := Convert( slices, 187, ( -9.0, -8.0, -7.0 ) );
            rec.fihhml := Convert( slices, 188, (  1 .. 0 => -9.0 ) );
            rec.fihhmnl := Convert( slices, 189, (  1 .. 0 => -9.0 ) );
            rec.fihhmp := Convert( slices, 190, (  1 .. 0 => -9.0 ) );
            rec.fihhmb := Convert( slices, 191, (  1 .. 0 => -9.0 ) );
            rec.fihhmt := Convert( slices, 192, (  1 .. 0 => -9.0 ) );
            rec.fihhmi := Convert( slices, 193, (  1 .. 0 => -9.0 ) );
            rec.hhmove := Convert_Hhmove_Type( Get( slices, 194 ));
            rec.mgnewi := Convert( slices, 195, ( -9, -8, -7, -2, -1 ) );
            rec.xpmgi := Convert( slices, 196, ( -9, -8, -7, -2, -1 ) );
            rec.hsvali := Convert( slices, 197, ( -9, -8, -7, -2, -1 ) );
            rec.renti := Convert( slices, 198, ( -9, -8, -7, -4, -3, -2, -1 ) );
            rec.rentgi := Convert( slices, 199, ( -9, -8, -7, -2, -1 ) );
            rec.xphsni := Convert_Jhgpayi_Type( Get( slices, 200 ));
            rec.xphsgi := Convert_Jhgpayi_Type( Get( slices, 201 ));
            rec.fihhmni := Convert_Fihhmni_Type( Get( slices, 202 ));
            rec.fihhmli := Convert_Fihhmbi_Type( Get( slices, 203 ));
            rec.fihmnli := Convert_Fihhmbi_Type( Get( slices, 204 ));
            rec.fihhmpi := Convert_Fihhmbi_Type( Get( slices, 205 ));
            rec.fihhmbi := Convert_Fihhmbi_Type( Get( slices, 206 ));
            rec.fihhmti := Convert_Fihhmbi_Type( Get( slices, 207 ));
            rec.fihhmii := Convert_Fihhmbi_Type( Get( slices, 208 ));
            rec.fihhyri := Convert_Fihhmbi_Type( Get( slices, 209 ));
            rec.fihhyli := Convert_Fihhmbi_Type( Get( slices, 210 ));
            rec.fihhyni := Convert_Fihhmbi_Type( Get( slices, 211 ));
            rec.fihhypi := Convert_Fihhmbi_Type( Get( slices, 212 ));
            rec.fihhybi := Convert_Fihhmbi_Type( Get( slices, 213 ));
            rec.fihhyti := Convert_Fihhmbi_Type( Get( slices, 214 ));
            rec.fihhyii := Convert_Fihhmbi_Type( Get( slices, 215 ));
            rec.fihhsel := Convert_Fihhsel_Type( Get( slices, 216 ));
            rec.xhwtuk1 := Convert( slices, 217, ( -9.0, -8.0 ) );
            rec.xhwtuk2 := Convert( slices, 218, ( -9.0, -8.0 ) );
            rec.region2 := Convert_Region2_Type( Get( slices, 219 ));
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Hhresp_component ).start_pos = 0 ) then
               index.pointers( Hhresp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Hhresp_component ).counter := index.pointers( Hhresp_component ).counter + 1;
            Put_Index( index_map, index );
            Hhresp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Hhresp_IO.Close( bin_file );
   end Create_Hhresp_Wave_M;




   procedure Create_Hhsamp_Wave_M( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Hhsamp_IO.File_Type;
      rec         : Hhsamp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Hhsamp_IO.Create (bin_file, Hhsamp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.fid := Convert( slices, 2 );
            rec.ivnadd := Convert( slices, 3, ( -9.0, -8.0 ) );
            rec.ivia := Convert_Ivia_Type( Get( slices, 4 ));
            rec.iviam := Convert_Iviam_Type( Get( slices, 5 ));
--             rec.ivid := Convert( slices, 6 );
            rec.ivlnc := Convert( slices, 7, ( -9, -1 ) );
            rec.ivtnc := Convert( slices, 8, ( -9, -8, -1 ) );
            rec.nelocly := Convert_Nelocly_Type( Get( slices, 9 ));
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 10 ));
            rec.ivosmrh := Convert( slices, 11, ( -9, -8, -1 ) );
            rec.ivnsmrh := Convert( slices, 12, ( -9, -8, -1 ) );
            rec.ivrrefh := Convert_Ivrrefh_Type( Get( slices, 13 ));
            rec.ivconv := Convert_Ivconv_Type( Get( slices, 14 ));
            rec.ivreis := Convert_Ivreis_Type( Get( slices, 15 ));
            rec.ivisst := Convert_Ivisst_Type( Get( slices, 16 ));
            rec.hhdc := Convert_Hhdc_Type( Get( slices, 17 ));
            rec.hhorig := Convert_Hhorig_Type( Get( slices, 18 ));
            rec.xhwght := Convert( slices, 19, ( -9.0, -8.0, -1.0 ) );
            rec.region := Convert_Region_Type( Get( slices, 20 ));
            rec.hhmove := Convert_Hhmove_Type( Get( slices, 21 ));
            rec.ahid := Convert( slices, 22 );
            rec.xhwtuk1 := Convert( slices, 23, ( -9.0, -8.0, -1.0 ) );
            rec.xhwtuk2 := Convert( slices, 24, ( -9.0, -8.0, -1.0 ) );
            rec.strata := Convert( slices, 25, ( -9, -8, -1 ) );
            rec.psu := Convert( slices, 26, ( -9, -8, -1 ) );
            rec.region2 := Convert_Region2_Type( Get( slices, 27 ));
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Hhsamp_component ).start_pos = 0 ) then
               index.pointers( Hhsamp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Hhsamp_component ).counter := index.pointers( Hhsamp_component ).counter + 1;
            Put_Index( index_map, index );
            Hhsamp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Hhsamp_IO.Close( bin_file );
   end Create_Hhsamp_Wave_M;




   procedure Create_Income_Wave_M( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Income_IO.File_Type;
      rec         : Income_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Income_IO.Create (bin_file, Income_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.pno := Convert( slices, 1 );
            rec.ficode := Convert_Ficode_Type( Get( slices, 2 ));
            rec.frall := Convert_Frall_Type( Get( slices, 3 ));
            rec.fr01 := Convert_Cd1own_Type( Get( slices, 4 ));
            rec.fr02 := Convert_Cd1own_Type( Get( slices, 5 ));
            rec.fr03 := Convert_Cd1own_Type( Get( slices, 6 ));
            rec.fr04 := Convert( slices, 7, ( -9, -8, -2, -1 ) );
            rec.fr05 := Convert_Cd1own_Type( Get( slices, 8 ));
            rec.fr06 := Convert_Cd1own_Type( Get( slices, 9 ));
            rec.fr07 := Convert_Cd1own_Type( Get( slices, 10 ));
            rec.fr08 := Convert_Cd1own_Type( Get( slices, 11 ));
            rec.fr09 := Convert_Cd1own_Type( Get( slices, 12 ));
            rec.fr10 := Convert_Cd1own_Type( Get( slices, 13 ));
            rec.fr11 := Convert_Cd1own_Type( Get( slices, 14 ));
            rec.fr12 := Convert_Cd1own_Type( Get( slices, 15 ));
            rec.fr13 := Convert_Cd1own_Type( Get( slices, 16 ));
            rec.fr14 := Convert_Cd1own_Type( Get( slices, 17 ));
            rec.fr15 := Convert_Cd1own_Type( Get( slices, 18 ));
            rec.fr16 := Convert_Cd1own_Type( Get( slices, 19 ));
            rec.fr17 := Convert_Cd1own_Type( Get( slices, 20 ));
            rec.fr18 := Convert_Fr18_Type( Get( slices, 21 ));
            rec.fr19 := Convert_Fr18_Type( Get( slices, 22 ));
            rec.fr20 := Convert_Fr18_Type( Get( slices, 23 ));
            rec.frnow := Convert_Frnow_Type( Get( slices, 24 ));
            rec.frval := Convert( slices, 25, ( -9.0, -8.0, -3.0, -2.0, -1.0 ) );
            rec.frw := Convert( slices, 26, ( -9.0, -8.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.frjt := Convert_Frjt_Type( Get( slices, 27 ));
            rec.frjtpn := Convert( slices, 28, ( -9, -8, -2, -1 ) );
            rec.fim09l := Convert( slices, 29, ( -9.0, -8.0, -3.0 ) );
            rec.fim10l := Convert( slices, 30, ( -9.0, -8.0, -3.0 ) );
            rec.fim11l := Convert( slices, 31, ( -9.0, -8.0, -3.0 ) );
            rec.fim12l := Convert( slices, 32, ( -9.0, -8.0, -3.0 ) );
            rec.fim01t := Convert( slices, 33, ( -9.0, -8.0, -3.0 ) );
            rec.fim02t := Convert( slices, 34, ( -9.0, -8.0, -3.0 ) );
            rec.fim03t := Convert( slices, 35, ( -9.0, -8.0, -3.0 ) );
            rec.fim04t := Convert( slices, 36, ( -9.0, -8.0, -3.0 ) );
            rec.fim05t := Convert( slices, 37, ( -9.0, -8.0, -3.0 ) );
            rec.fim06t := Convert( slices, 38, ( -9.0, -8.0, -3.0 ) );
            rec.fim07t := Convert( slices, 39, ( -9.0, -8.0, -3.0 ) );
            rec.fim08t := Convert( slices, 40, ( -9.0, -8.0, -3.0 ) );
            rec.fim09t := Convert( slices, 41, ( -9.0, -8.0, -3.0 ) );
            rec.fim10t := Convert( slices, 42, ( -9.0, -8.0, -3.0 ) );
            rec.fim11t := Convert( slices, 43, ( -9.0, -8.0, -3.0 ) );
            rec.fim12t := Convert( slices, 44, ( -9.0, -8.0, -3.0 ) );
            rec.fim01n := Convert( slices, 45, ( -9.0, -8.0, -3.0 ) );
            rec.fim02n := Convert( slices, 46, ( -9.0, -3.0 ) );
            rec.fim03n := Convert( slices, 47, ( -9.0, -3.0 ) );
            rec.fim04n := Convert( slices, 48, ( -9.0, -3.0 ) );
            rec.frjtvf := Convert_Frjtvf_Type( Get( slices, 49 ));
            rec.frvali := Convert( slices, 50, ( -9, -8, -3, -2, -1 ) );
            rec.pid := Convert( slices, 51 );
            rec.hid := Convert( slices, 52 );
            rec.fiseq := Convert( slices, 53 );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Income_component ).start_pos = 0 ) then
               index.pointers( Income_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Income_component ).counter := index.pointers( Income_component ).counter + 1;
            Put_Index( index_map, index );
            Income_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Income_IO.Close( bin_file );
   end Create_Income_Wave_M;




   procedure Create_Indall_Wave_M( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Indall_IO.File_Type;
      rec         : Indall_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Indall_IO.Create (bin_file, Indall_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.pid := Convert( slices, 3 );
            rec.iviolw := Convert_Iviolw_Type( Get( slices, 4 ));
            rec.ivstat1 := Convert_Ivstat1_Type( Get( slices, 5 ));
            rec.ivelig := Convert_Ivelig_Type( Get( slices, 6 ));
            rec.hhmem := Convert_Hhmem_Type( Get( slices, 7 ));
            rec.newhy := Convert_Newhy_Type( Get( slices, 8 ));
            rec.nemnjn := Convert_Nemnjn_Type( Get( slices, 9 ));
            rec.neyrjn4 := Convert( slices, 10, ( -9, -8, -7, -2, -1 ) );
            rec.ivfio := Convert_Ivfio_Type( Get( slices, 11 ));
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 12 ));
            rec.iodc := Convert_Iodc_Type( Get( slices, 13 ));
            rec.memorig := Convert_Memorig_Type( Get( slices, 14 ));
            rec.hgr2r := Convert_Hgr2r_Type( Get( slices, 15 ));
            rec.hgsex := Convert_Hgsex_Type( Get( slices, 16 ));
            rec.hgbm := Convert_Hgbm_Type( Get( slices, 17 ));
            rec.hgby := Convert( slices, 18, ( -9, -8, -2, -1 ) );
            rec.mastat := Convert_Mastat_Type( Get( slices, 19 ));
            rec.hgspn := Convert( slices, 20, ( -9, -8, -2, -1 ) );
            rec.hgemp := Convert_Hgemp_Type( Get( slices, 21 ));
            rec.hgfno := Convert( slices, 22, ( -9, -8, -2, -1 ) );
            rec.hgmno := Convert( slices, 23, ( -9, -8, -2, -1 ) );
            rec.hgra := Convert( slices, 24, ( -9, -8, -2, -1 ) );
            rec.age := Convert( slices, 25, ( -9, -8, -2, -1 ) );
            rec.age12 := Convert( slices, 26, ( -9, -8, -2, -1 ) );
            rec.butype := Convert_Butype_Type( Get( slices, 27 ));
            rec.buno := Convert( slices, 28, ( -9, -8 ) );
            rec.nchild := Convert( slices, 29, ( -9, -8 ) );
            rec.depchl := Convert_Depchl_Type( Get( slices, 30 ));
            rec.hoh := Convert_Hoh_Type( Get( slices, 31 ));
            rec.rach16 := Convert_Hhch12_Type( Get( slices, 32 ));
            rec.agei := Convert_Agei_Type( Get( slices, 33 ));
            rec.lrwght := Convert( slices, 34, ( -9.0, -8.0 ) );
            rec.lewght := Convert( slices, 35, ( -9.0, -8.0 ) );
            rec.xrwght := Convert( slices, 36, ( -9.0, -8.0 ) );
            rec.xewght := Convert( slices, 37, ( -9.0, -8.0 ) );
            rec.movest := Convert_Movest_Type( Get( slices, 38 ));
            rec.sampst := Convert_Sampst_Type( Get( slices, 39 ));
            rec.xrwtuk1 := Convert( slices, 40, ( -9.0, -8.0 ) );
            rec.xewtuk1 := Convert( slices, 41, ( -9.0, -8.0 ) );
            rec.xrwtuk2 := Convert( slices, 42, ( -9.0, -8.0 ) );
            rec.xewtuk2 := Convert( slices, 43, ( -9.0, -8.0 ) );
            rec.lrwtsw1 := Convert( slices, 44, ( -9.0, -8.0 ) );
            rec.lewtsw1 := Convert( slices, 45, ( -9.0, -8.0 ) );
            rec.lrwtsw2 := Convert( slices, 46, ( -9.0, -8.0 ) );
            rec.lewtsw2 := Convert( slices, 47, ( -9.0, -8.0 ) );
            rec.lrwtuk1 := Convert( slices, 48, ( -9.0, -8.0 ) );
            rec.lewtuk1 := Convert( slices, 49, ( -9.0, -8.0 ) );
            rec.lrwtuk2 := Convert( slices, 50, ( -9.0, -8.0 ) );
            rec.lewtuk2 := Convert( slices, 51, ( -9.0, -8.0 ) );
            rec.sppid := Convert( slices, 52 );
            rec.fpid := Convert( slices, 53 );
            rec.mpid := Convert( slices, 54 );
            rec.rapid := Convert( slices, 55 );
            rec.distmov := Convert( slices, 56, ( -9.0, -8.0 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Indall_component ).start_pos = 0 ) then
               index.pointers( Indall_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Indall_component ).counter := index.pointers( Indall_component ).counter + 1;
            Put_Index( index_map, index );
            Indall_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Indall_IO.Close( bin_file );
   end Create_Indall_Wave_M;




   procedure Create_Indresp_Wave_M( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Indresp_IO.File_Type;
      rec         : Indresp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Indresp_IO.Create (bin_file, Indresp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.doid := Convert( slices, 3, ( -9, -7 ) );
            rec.doim := Convert_Doim_Type( Get( slices, 4 ));
            rec.doiy4 := Convert( slices, 5, ( -9, -8, -7, -2, -1 ) );
            rec.ivlyr := Convert( slices, 6, ( -9, -8, -7 ) );
            rec.ivstat2 := Convert_Ivstat2_Type( Get( slices, 7 ));
            rec.ivsoih := Convert( slices, 8, ( -9, -8 ) );
            rec.ivsoim := Convert( slices, 9, ( -9, -8 ) );
            rec.lknbrd := Convert_Aidpl1_Type( Get( slices, 10 ));
            rec.lkmove := Convert_Lkmove_Type( Get( slices, 11 ));
            rec.lkmovy := Convert_Lkmovy_Type( Get( slices, 12 ));
            rec.xpmove := Convert( slices, 13, ( -9, -8, -7, -2, -1 ) );
            rec.plnew := Convert( slices, 14, ( -9, -8, -7, -2, -1 ) );
            rec.plnowm := Convert_Jbbgm1_Type( Get( slices, 15 ));
            rec.plnowy4 := Convert( slices, 16, ( -9, -8, -7, -2, -1 ) );
            rec.movjb := Convert_Aidpl1_Type( Get( slices, 17 ));
            rec.movjba := Convert_Movjba_Type( Get( slices, 18 ));
            rec.movjbb := Convert_Movjba_Type( Get( slices, 19 ));
            rec.movjbc := Convert_Movjba_Type( Get( slices, 20 ));
            rec.movjbd := Convert_Movjba_Type( Get( slices, 21 ));
            rec.movjbe := Convert_Movjba_Type( Get( slices, 22 ));
            rec.movjbf := Convert_Movjba_Type( Get( slices, 23 ));
            rec.movjbg := Convert_Movjba_Type( Get( slices, 24 ));
            rec.movjbh := Convert_Movjba_Type( Get( slices, 25 ));
            rec.movjbi := Convert_Movjba_Type( Get( slices, 26 ));
            rec.movy1 := Convert_Movy1_Type( Get( slices, 27 ));
            rec.movy2 := Convert_Movy2_Type( Get( slices, 28 ));
            rec.dobm := Convert_Cjsem_Type( Get( slices, 29 ));
            rec.doby := Convert( slices, 30, ( -9, -8, -7, -2, -1 ) );
            rec.sex := Convert_Sex_Type( Get( slices, 31 ));
            rec.mlstat := Convert_Mlstat_Type( Get( slices, 32 ));
            rec.mlchng := Convert_Bscon_Type( Get( slices, 33 ));
            rec.mlchm := Convert_Mlchm_Type( Get( slices, 34 ));
            rec.mlchy4 := Convert( slices, 35, ( -9, -8, -7, -2, -1 ) );
            rec.jbstat := Convert_Jbstat_Type( Get( slices, 36 ));
            rec.racel := Convert_Racel_Type( Get( slices, 37 ));
            rec.edlyr := Convert_Aidpl1_Type( Get( slices, 38 ));
            rec.edtype1 := Convert_Edtype1_Type( Get( slices, 39 ));
            rec.edblyr1 := Convert_Boolean_With_Missing( Get( slices, 40 ));
            rec.edbgm1 := Convert_Edbgm1_Type( Get( slices, 41 ));
            rec.edbgy1 := Convert( slices, 42, ( -9, -8, -7, -2, -1 ) );
            rec.edenm1 := Convert_Edbgm1_Type( Get( slices, 43 ));
            rec.edeny1 := Convert( slices, 44, ( -9, -8, -7, -2, -1 ) );
            rec.edenne1 := Convert_Edenne1_Type( Get( slices, 45 ));
            rec.edfeea1 := Convert_Yes_Or_Missing_Type( Get( slices, 46 ));
            rec.edfeeb1 := Convert_Yes_Or_Missing_Type( Get( slices, 47 ));
            rec.edfeec1 := Convert_Yes_Or_Missing_Type( Get( slices, 48 ));
            rec.edfeed1 := Convert_Yes_Or_Missing_Type( Get( slices, 49 ));
            rec.edfeee1 := Convert_Yes_Or_Missing_Type( Get( slices, 50 ));
            rec.edfeef1 := Convert_Yes_Or_Missing_Type( Get( slices, 51 ));
            rec.edfeeg1 := Convert_Yes_Or_Missing_Type( Get( slices, 52 ));
            rec.edqual1 := Convert_Edqual1_Type( Get( slices, 53 ));
            rec.edqnn1 := Convert( slices, 54, ( -9, -8, -7, -2, -1 ) );
            rec.edqla1 := Convert_Yes_Or_Missing_Type( Get( slices, 55 ));
            rec.edqlb1 := Convert_Yes_Or_Missing_Type( Get( slices, 56 ));
            rec.edqlc1 := Convert_Yes_Or_Missing_Type( Get( slices, 57 ));
            rec.edqld1 := Convert_Yes_Or_Missing_Type( Get( slices, 58 ));
            rec.edqle1 := Convert_Yes_Or_Missing_Type( Get( slices, 59 ));
            rec.edqlf1 := Convert_Yes_Or_Missing_Type( Get( slices, 60 ));
            rec.edqlg1 := Convert_Yes_Or_Missing_Type( Get( slices, 61 ));
            rec.edqlh1 := Convert_Yes_Or_Missing_Type( Get( slices, 62 ));
            rec.edqli1 := Convert_Yes_Or_Missing_Type( Get( slices, 63 ));
            rec.edqlj1 := Convert( slices, 64, ( -9, -8, -7 ) );
            rec.edqlan1 := Convert( slices, 65, ( -9, -8, -7, -2, -1 ) );
            rec.edqlbn1 := Convert( slices, 66, ( -9, -8, -7, -2, -1 ) );
            rec.edqlcn1 := Convert( slices, 67, ( -9, -8, -7, -2, -1 ) );
            rec.edqldn1 := Convert( slices, 68, ( -9, -8, -7, -2, -1 ) );
            rec.edqlen1 := Convert( slices, 69, ( -9, -8, -7, -2, -1 ) );
            rec.edqlfn1 := Convert( slices, 70, ( -9, -8, -7, -2, -1 ) );
            rec.edqlgn1 := Convert( slices, 71, ( -9, -8, -7, -2, -1 ) );
            rec.edqlhn1 := Convert( slices, 72, ( -9, -8, -7, -2, -1 ) );
            rec.edqlin1 := Convert( slices, 73, ( -9, -8, -7, -2, -1 ) );
            rec.edqljn1 := Convert( slices, 74, ( -9, -8, -7, -2, -1 ) );
            rec.edoqln1 := Convert( slices, 75, ( -9, -8, -7, -2, -1 ) );
            rec.edoql1 := Convert_Edoql1_Type( Get( slices, 76 ));
            rec.edmore1 := Convert_Boolean_With_Missing( Get( slices, 77 ));
            rec.edtype2 := Convert_Edtype1_Type( Get( slices, 78 ));
            rec.edblyr2 := Convert_Boolean_With_Missing( Get( slices, 79 ));
            rec.edbgm2 := Convert_Edbgm1_Type( Get( slices, 80 ));
            rec.edbgy2 := Convert( slices, 81, ( -9, -8, -7, -2, -1 ) );
            rec.edenm2 := Convert_Edbgm1_Type( Get( slices, 82 ));
            rec.edeny2 := Convert( slices, 83, ( -9, -8, -7, -2, -1 ) );
            rec.edenne2 := Convert_Edenne2_Type( Get( slices, 84 ));
            rec.edfeea2 := Convert_Yes_Or_Missing_Type( Get( slices, 85 ));
            rec.edfeeb2 := Convert_Yes_Or_Missing_Type( Get( slices, 86 ));
            rec.edfeec2 := Convert_Yes_Or_Missing_Type( Get( slices, 87 ));
            rec.edfeed2 := Convert_Yes_Or_Missing_Type( Get( slices, 88 ));
            rec.edfeee2 := Convert_Yes_Or_Missing_Type( Get( slices, 89 ));
            rec.edfeef2 := Convert_Yes_Or_Missing_Type( Get( slices, 90 ));
            rec.edfeeg2 := Convert_Yes_Or_Missing_Type( Get( slices, 91 ));
            rec.edqual2 := Convert_Edqual1_Type( Get( slices, 92 ));
            rec.edqnn2 := Convert( slices, 93, ( -9, -8, -7, -2, -1 ) );
            rec.edqla2 := Convert_Yes_Or_Missing_Type( Get( slices, 94 ));
            rec.edqlb2 := Convert_Yes_Or_Missing_Type( Get( slices, 95 ));
            rec.edqlc2 := Convert_Yes_Or_Missing_Type( Get( slices, 96 ));
            rec.edqld2 := Convert_Yes_Or_Missing_Type( Get( slices, 97 ));
            rec.edqle2 := Convert_Yes_Or_Missing_Type( Get( slices, 98 ));
            rec.edqlf2 := Convert_Yes_Or_Missing_Type( Get( slices, 99 ));
            rec.edqlg2 := Convert_Yes_Or_Missing_Type( Get( slices, 100 ));
            rec.edqlh2 := Convert_Yes_Or_Missing_Type( Get( slices, 101 ));
            rec.edqli2 := Convert_Yes_Or_Missing_Type( Get( slices, 102 ));
            rec.edqlj2 := Convert( slices, 103, ( -9, -8, -7 ) );
            rec.edqlan2 := Convert( slices, 104, ( -9, -8, -7, -2, -1 ) );
            rec.edqlbn2 := Convert( slices, 105, ( -9, -8, -7, -2, -1 ) );
            rec.edqlcn2 := Convert( slices, 106, ( -9, -8, -7, -2, -1 ) );
            rec.edqldn2 := Convert( slices, 107, ( -9, -8, -7, -2, -1 ) );
            rec.edqlen2 := Convert( slices, 108, ( -9, -8, -7, -2, -1 ) );
            rec.edqlfn2 := Convert( slices, 109, ( -9, -8, -7, -2, -1 ) );
            rec.edqlgn2 := Convert( slices, 110, ( -9, -8, -7, -2, -1 ) );
            rec.edqlhn2 := Convert( slices, 111, ( -9, -8, -7, -2, -1 ) );
            rec.edqlin2 := Convert( slices, 112, ( -9, -8, -7, -2, -1 ) );
            rec.edqljn2 := Convert( slices, 113, ( -9, -8, -7, -2, -1 ) );
            rec.edoqln2 := Convert( slices, 114, ( -9, -8, -7, -2, -1 ) );
            rec.edoql2 := Convert_Edoql1_Type( Get( slices, 115 ));
            rec.edmore2 := Convert_Boolean_With_Missing( Get( slices, 116 ));
            rec.plbornd := Convert_Plbornd_Type( Get( slices, 117 ));
            rec.plbornc := Convert_Plbornc_Type( Get( slices, 118 ));
            rec.yr2uk4 := Convert( slices, 119, ( -9, -8, -7, -2, -1 ) );
            rec.citzn1 := Convert( slices, 120, ( -9, -8, -7, -2, -1 ) );
            rec.citzn2 := Convert_Citzn2_Type( Get( slices, 121 ));
            rec.oprlg4 := Convert_Oprlg4_Type( Get( slices, 122 ));
            rec.oprlg5 := Convert_Oprlg5_Type( Get( slices, 123 ));
            rec.oprlg6 := Convert_Oprlg6_Type( Get( slices, 124 ));
            rec.paju := Convert_Paju_Type( Get( slices, 125 ));
            rec.pasoc := Convert( slices, 126, ( -9, -8, -7, -2, -1 ) );
            rec.pasoc00 := Convert( slices, 127, ( -9, -8, -7, -2, -1 ) );
            rec.pasemp := Convert_J2semp_Type( Get( slices, 128 ));
            rec.paboss := Convert_Maboss_Type( Get( slices, 129 ));
            rec.pamngr := Convert_Mamngr_Type( Get( slices, 130 ));
            rec.maju := Convert_Maju_Type( Get( slices, 131 ));
            rec.masoc := Convert( slices, 132, ( -9, -8, -7, -2, -1 ) );
            rec.masoc00 := Convert( slices, 133, ( -9, -8, -7, -2, -1 ) );
            rec.masemp := Convert_J2semp_Type( Get( slices, 134 ));
            rec.maboss := Convert_Maboss_Type( Get( slices, 135 ));
            rec.mamngr := Convert_Mamngr_Type( Get( slices, 136 ));
            rec.j1none := Convert_J1none_Type( Get( slices, 137 ));
            rec.j1soc := Convert( slices, 138, ( -9, -8, -7, -2, -1 ) );
            rec.j1soc00 := Convert( slices, 139, ( -9, -8, -7, -2, -1 ) );
            rec.j1semp := Convert_J1semp_Type( Get( slices, 140 ));
            rec.j1boss := Convert_J1boss_Type( Get( slices, 141 ));
            rec.j1mngr := Convert_J1mngr_Type( Get( slices, 142 ));
            rec.lcoh := Convert_Aidpl1_Type( Get( slices, 143 ));
            rec.coh1bm := Convert_Ch1bm_Type( Get( slices, 144 ));
            rec.coh1by := Convert( slices, 145, ( -9, -8, -7, -2, -1 ) );
            rec.coh1mr := Convert_Coh1mr_Type( Get( slices, 146 ));
            rec.coh1em := Convert_Ch1bm_Type( Get( slices, 147 ));
            rec.coh1ey := Convert( slices, 148, ( -9, -8, -7, -2, -1 ) );
            rec.nmar := Convert_Nmar_Type( Get( slices, 149 ));
            rec.lmar1m := Convert_Ch1bm_Type( Get( slices, 150 ));
            rec.lmar1y := Convert( slices, 151, ( -9, -8, -7, -2, -1 ) );
            rec.lprnt := Convert_Lprnt_Type( Get( slices, 152 ));
            rec.lnprnt := Convert( slices, 153, ( -9, -8, -7, -2, -1 ) );
            rec.ch1bm := Convert_Ch1bm_Type( Get( slices, 154 ));
            rec.ch1by := Convert( slices, 155, ( -9, -8, -7, -2, -1 ) );
            rec.school := Convert_School_Type( Get( slices, 156 ));
            rec.scend := Convert( slices, 157, ( -9, -8, -7, -2, -1 ) );
            rec.sctype := Convert_Sctype_Type( Get( slices, 158 ));
            rec.scnow := Convert_Cjsck2_Type( Get( slices, 159 ));
            rec.fetype := Convert_Fetype_Type( Get( slices, 160 ));
            rec.fenow := Convert_Fenow_Type( Get( slices, 161 ));
            rec.feend := Convert( slices, 162, ( -9, -8, -7, -2, -1 ) );
            rec.qfhas := Convert_Bscon_Type( Get( slices, 163 ));
            rec.qfa := Convert_Qfa_Type( Get( slices, 164 ));
            rec.qfb := Convert_Qfb_Type( Get( slices, 165 ));
            rec.qfc := Convert_Qfc_Type( Get( slices, 166 ));
            rec.qfd := Convert_Qfd_Type( Get( slices, 167 ));
            rec.qfe := Convert_Qfe_Type( Get( slices, 168 ));
            rec.qff := Convert_Qff_Type( Get( slices, 169 ));
            rec.qfg := Convert_Qfg_Type( Get( slices, 170 ));
            rec.qfh := Convert_Qfh_Type( Get( slices, 171 ));
            rec.qfi := Convert_Qfi_Type( Get( slices, 172 ));
            rec.qfj := Convert_Qfj_Type( Get( slices, 173 ));
            rec.qfk := Convert_Qfk_Type( Get( slices, 174 ));
            rec.qfl := Convert_Qfl_Type( Get( slices, 175 ));
            rec.qfm := Convert_Qfm_Type( Get( slices, 176 ));
            rec.qfn := Convert_Qfn_Type( Get( slices, 177 ));
            rec.qfed := Convert_Bscon_Type( Get( slices, 178 ));
            rec.qfeda := Convert_Qfeda_Type( Get( slices, 179 ));
            rec.nqfeda := Convert( slices, 180, ( -9, -8, -7, -2, -1 ) );
            rec.qfedb := Convert_Qfedb_Type( Get( slices, 181 ));
            rec.nqfedb := Convert( slices, 182, ( -9, -8, -7, -2, -1 ) );
            rec.qfedc := Convert_Qfedc_Type( Get( slices, 183 ));
            rec.nqfedc := Convert( slices, 184, ( -9, -8, -7, -2, -1 ) );
            rec.qfedd := Convert_Qfedd_Type( Get( slices, 185 ));
            rec.nqfedd := Convert( slices, 186, ( -9, -8, -7, -2, -1 ) );
            rec.qfede := Convert_Qfede_Type( Get( slices, 187 ));
            rec.nqfede := Convert( slices, 188, ( -9, -8, -7, -2, -1 ) );
            rec.qfedf := Convert_Qfedf_Type( Get( slices, 189 ));
            rec.nqfedf := Convert( slices, 190, ( -9, -8, -7, -2, -1 ) );
            rec.qfedg := Convert_Qfedg_Type( Get( slices, 191 ));
            rec.nqfedg := Convert( slices, 192, ( -9, -8, -7, -2, -1 ) );
            rec.qfedh := Convert_Qfedh_Type( Get( slices, 193 ));
            rec.nqfedh := Convert( slices, 194, ( -9, -8, -7, -2, -1 ) );
            rec.qfedi := Convert_Qfedi_Type( Get( slices, 195 ));
            rec.nqfedi := Convert( slices, 196, ( -9, -8, -7, -2, -1 ) );
            rec.qfedj := Convert_Qfedj_Type( Get( slices, 197 ));
            rec.nqfedj := Convert( slices, 198, ( -9, -8, -7, -2, -1 ) );
            rec.qfedt := Convert_Qfedt_Type( Get( slices, 199 ));
            rec.nqfedt := Convert( slices, 200, ( -9, -8, -7, -2, -1 ) );
            rec.qfedu := Convert_Qfedu_Type( Get( slices, 201 ));
            rec.nqfedu := Convert( slices, 202, ( -9, -8, -7, -2, -1 ) );
            rec.qfedk := Convert_Qfedk_Type( Get( slices, 203 ));
            rec.nqfedk := Convert( slices, 204, ( -9, -8, -7, -2, -1 ) );
            rec.qfedl := Convert_Qfedl_Type( Get( slices, 205 ));
            rec.nqfedl := Convert( slices, 206, ( -9, -8, -7, -2, -1 ) );
            rec.qfedm := Convert_Qfedm_Type( Get( slices, 207 ));
            rec.nqfedm := Convert( slices, 208, ( -9, -8, -7, -2, -1 ) );
            rec.qfedn := Convert_Qfedn_Type( Get( slices, 209 ));
            rec.nqfedn := Convert( slices, 210, ( -9, -8, -7, -2, -1 ) );
            rec.qfedo := Convert_Qfedo_Type( Get( slices, 211 ));
            rec.nqfedo := Convert( slices, 212, ( -9, -8, -7, -2, -1 ) );
            rec.qfedp := Convert( slices, 213, ( -9, -8, -7 ) );
            rec.nqfedp := Convert( slices, 214, ( -9, -8, -7, -2, -1 ) );
            rec.qfedq := Convert_Qfedq_Type( Get( slices, 215 ));
            rec.nqfedq := Convert( slices, 216, ( -9, -8, -7, -2, -1 ) );
            rec.qfedr := Convert_Qfedr_Type( Get( slices, 217 ));
            rec.nqfedr := Convert( slices, 218, ( -9, -8, -7, -2, -1 ) );
            rec.qfeds := Convert_Hlprbm_Type( Get( slices, 219 ));
            rec.nqfeds := Convert( slices, 220, ( -9, -8, -7, -2, -1 ) );
            rec.train := Convert_Boolean_With_Missing( Get( slices, 221 ));
            rec.ntrain := Convert( slices, 222, ( -9, -8, -7, -2, -1 ) );
            rec.trplce1 := Convert_Trplce1_Type( Get( slices, 223 ));
            rec.trwhya1 := Convert_Boolean_With_Missing( Get( slices, 224 ));
            rec.trwhyb1 := Convert_Boolean_With_Missing( Get( slices, 225 ));
            rec.trwhyc1 := Convert_Boolean_With_Missing( Get( slices, 226 ));
            rec.trwhyd1 := Convert_Boolean_With_Missing( Get( slices, 227 ));
            rec.trwhye1 := Convert_Boolean_With_Missing( Get( slices, 228 ));
            rec.trq1 := Convert( slices, 229, ( -9, -8, -7 ) );
            rec.tru1 := Convert_Tru1_Type( Get( slices, 230 ));
            rec.trfeea1 := Convert_Nisjsa_Type( Get( slices, 231 ));
            rec.trfeeb1 := Convert_Yes_Or_Missing_Type( Get( slices, 232 ));
            rec.trfeec1 := Convert_Yes_Or_Missing_Type( Get( slices, 233 ));
            rec.trfeee1 := Convert_Yes_Or_Missing_Type( Get( slices, 234 ));
            rec.trfeef1 := Convert_Yes_Or_Missing_Type( Get( slices, 235 ));
            rec.trfeeg1 := Convert_Yes_Or_Missing_Type( Get( slices, 236 ));
            rec.trqlxp1 := Convert_Trqlxp1_Type( Get( slices, 237 ));
            rec.trqlac1 := Convert_Trqlac1_Type( Get( slices, 238 ));
            rec.trqlnn1 := Convert( slices, 239, ( -9, -8, -7, -2, -1 ) );
            rec.trqla1 := Convert_Yes_Or_Missing_Type( Get( slices, 240 ));
            rec.trqlb1 := Convert_Yes_Or_Missing_Type( Get( slices, 241 ));
            rec.trqlc1 := Convert_Yes_Or_Missing_Type( Get( slices, 242 ));
            rec.trqld1 := Convert_Yes_Or_Missing_Type( Get( slices, 243 ));
            rec.trqle1 := Convert_Yes_Or_Missing_Type( Get( slices, 244 ));
            rec.trqlf1 := Convert_Yes_Or_Missing_Type( Get( slices, 245 ));
            rec.trqlg1 := Convert_Yes_Or_Missing_Type( Get( slices, 246 ));
            rec.trqlh1 := Convert_Yes_Or_Missing_Type( Get( slices, 247 ));
            rec.trqli1 := Convert_Yes_Or_Missing_Type( Get( slices, 248 ));
            rec.trqlj1 := Convert( slices, 249, ( -9, -8, -7 ) );
            rec.trqlan1 := Convert( slices, 250, ( -9, -8, -7, -2, -1 ) );
            rec.trqlbn1 := Convert( slices, 251, ( -9, -8, -7, -2, -1 ) );
            rec.trqlcn1 := Convert( slices, 252, ( -9, -8, -7, -2, -1 ) );
            rec.trqldn1 := Convert( slices, 253, ( -9, -8, -7, -2, -1 ) );
            rec.trqlen1 := Convert( slices, 254, ( -9, -8, -7, -2, -1 ) );
            rec.trqlfn1 := Convert( slices, 255, ( -9, -8, -7, -2, -1 ) );
            rec.trqlgn1 := Convert( slices, 256, ( -9, -8, -7, -2, -1 ) );
            rec.trqlhn1 := Convert( slices, 257, ( -9, -8, -7, -2, -1 ) );
            rec.trqlin1 := Convert( slices, 258, ( -9, -8, -7, -2, -1 ) );
            rec.trqljn1 := Convert( slices, 259, ( -9, -8, -7, -2, -1 ) );
            rec.troqln1 := Convert( slices, 260, ( -9, -8, -7, -2, -1 ) );
            rec.troql1 := Convert_Troql1_Type( Get( slices, 261 ));
            rec.trmore1 := Convert_Boolean_With_Missing( Get( slices, 262 ));
            rec.trplce2 := Convert_Trplce1_Type( Get( slices, 263 ));
            rec.trwhya2 := Convert_Boolean_With_Missing( Get( slices, 264 ));
            rec.trwhyb2 := Convert_Boolean_With_Missing( Get( slices, 265 ));
            rec.trwhyc2 := Convert_Boolean_With_Missing( Get( slices, 266 ));
            rec.trwhyd2 := Convert_Boolean_With_Missing( Get( slices, 267 ));
            rec.trwhye2 := Convert_Boolean_With_Missing( Get( slices, 268 ));
            rec.trq2 := Convert( slices, 269, ( -9, -8, -7 ) );
            rec.tru2 := Convert_Tru1_Type( Get( slices, 270 ));
            rec.trfeea2 := Convert_Nisjsa_Type( Get( slices, 271 ));
            rec.trfeeb2 := Convert_Yes_Or_Missing_Type( Get( slices, 272 ));
            rec.trfeec2 := Convert_Yes_Or_Missing_Type( Get( slices, 273 ));
            rec.trfeee2 := Convert_Yes_Or_Missing_Type( Get( slices, 274 ));
            rec.trfeef2 := Convert_Yes_Or_Missing_Type( Get( slices, 275 ));
            rec.trfeeg2 := Convert_Yes_Or_Missing_Type( Get( slices, 276 ));
            rec.trqlxp2 := Convert_Trqlxp1_Type( Get( slices, 277 ));
            rec.trqlac2 := Convert_Trqlac1_Type( Get( slices, 278 ));
            rec.trqlnn2 := Convert( slices, 279, ( -9, -8, -7, -2, -1 ) );
            rec.trqla2 := Convert_Yes_Or_Missing_Type( Get( slices, 280 ));
            rec.trqlb2 := Convert_Yes_Or_Missing_Type( Get( slices, 281 ));
            rec.trqlc2 := Convert_Yes_Or_Missing_Type( Get( slices, 282 ));
            rec.trqld2 := Convert_Yes_Or_Missing_Type( Get( slices, 283 ));
            rec.trqle2 := Convert_Yes_Or_Missing_Type( Get( slices, 284 ));
            rec.trqlf2 := Convert_Yes_Or_Missing_Type( Get( slices, 285 ));
            rec.trqlg2 := Convert_Yes_Or_Missing_Type( Get( slices, 286 ));
            rec.trqlh2 := Convert_Yes_Or_Missing_Type( Get( slices, 287 ));
            rec.trqli2 := Convert_Yes_Or_Missing_Type( Get( slices, 288 ));
            rec.trqlj2 := Convert( slices, 289, ( -9, -8, -7 ) );
            rec.trqlan2 := Convert( slices, 290, ( -9, -8, -7, -2, -1 ) );
            rec.trqlbn2 := Convert( slices, 291, ( -9, -8, -7, -2, -1 ) );
            rec.trqlcn2 := Convert( slices, 292, ( -9, -8, -7, -2, -1 ) );
            rec.trqldn2 := Convert( slices, 293, ( -9, -8, -7, -2, -1 ) );
            rec.trqlen2 := Convert( slices, 294, ( -9, -8, -7, -2, -1 ) );
            rec.trqlfn2 := Convert( slices, 295, ( -9, -8, -7, -2, -1 ) );
            rec.trqlgn2 := Convert( slices, 296, ( -9, -8, -7, -2, -1 ) );
            rec.trqlhn2 := Convert( slices, 297, ( -9, -8, -7, -2, -1 ) );
            rec.trqlin2 := Convert( slices, 298, ( -9, -8, -7, -2, -1 ) );
            rec.trqljn2 := Convert( slices, 299, ( -9, -8, -7, -2, -1 ) );
            rec.troqln2 := Convert( slices, 300, ( -9, -8, -7, -2, -1 ) );
            rec.troql2 := Convert_Troql2_Type( Get( slices, 301 ));
            rec.trmore2 := Convert_Boolean_With_Missing( Get( slices, 302 ));
            rec.trplce3 := Convert_Trplce1_Type( Get( slices, 303 ));
            rec.trwhya3 := Convert_Boolean_With_Missing( Get( slices, 304 ));
            rec.trwhyb3 := Convert_Boolean_With_Missing( Get( slices, 305 ));
            rec.trwhyc3 := Convert_Boolean_With_Missing( Get( slices, 306 ));
            rec.trwhyd3 := Convert_Boolean_With_Missing( Get( slices, 307 ));
            rec.trwhye3 := Convert_Boolean_With_Missing( Get( slices, 308 ));
            rec.trq3 := Convert( slices, 309, ( -9, -8, -7 ) );
            rec.tru3 := Convert_Tru1_Type( Get( slices, 310 ));
            rec.trfeea3 := Convert_Nisjsa_Type( Get( slices, 311 ));
            rec.trfeeb3 := Convert_Yes_Or_Missing_Type( Get( slices, 312 ));
            rec.trfeec3 := Convert_Yes_Or_Missing_Type( Get( slices, 313 ));
            rec.trfeee3 := Convert_Yes_Or_Missing_Type( Get( slices, 314 ));
            rec.trfeef3 := Convert_Yes_Or_Missing_Type( Get( slices, 315 ));
            rec.trfeeg3 := Convert_Yes_Or_Missing_Type( Get( slices, 316 ));
            rec.trqlxp3 := Convert_Trqlxp1_Type( Get( slices, 317 ));
            rec.trqlac3 := Convert_Trqlac1_Type( Get( slices, 318 ));
            rec.trqlnn3 := Convert( slices, 319, ( -9, -8, -7, -2, -1 ) );
            rec.trqla3 := Convert_Yes_Or_Missing_Type( Get( slices, 320 ));
            rec.trqlb3 := Convert_Yes_Or_Missing_Type( Get( slices, 321 ));
            rec.trqlc3 := Convert_Yes_Or_Missing_Type( Get( slices, 322 ));
            rec.trqld3 := Convert_Yes_Or_Missing_Type( Get( slices, 323 ));
            rec.trqle3 := Convert_Yes_Or_Missing_Type( Get( slices, 324 ));
            rec.trqlf3 := Convert_Yes_Or_Missing_Type( Get( slices, 325 ));
            rec.trqlg3 := Convert_Yes_Or_Missing_Type( Get( slices, 326 ));
            rec.trqlh3 := Convert_Yes_Or_Missing_Type( Get( slices, 327 ));
            rec.trqli3 := Convert_Yes_Or_Missing_Type( Get( slices, 328 ));
            rec.trqlj3 := Convert( slices, 329, ( -9, -8, -7 ) );
            rec.trqlan3 := Convert( slices, 330, ( -9, -8, -7, -2, -1 ) );
            rec.trqlbn3 := Convert( slices, 331, ( -9, -8, -7, -2, -1 ) );
            rec.trqlcn3 := Convert( slices, 332, ( -9, -8, -7, -2, -1 ) );
            rec.trqldn3 := Convert( slices, 333, ( -9, -8, -7, -2, -1 ) );
            rec.trqlen3 := Convert( slices, 334, ( -9, -8, -7, -2, -1 ) );
            rec.trqlfn3 := Convert( slices, 335, ( -9, -8, -7, -2, -1 ) );
            rec.trqlgn3 := Convert( slices, 336, ( -9, -8, -7, -2, -1 ) );
            rec.trqlhn3 := Convert( slices, 337, ( -9, -8, -7, -2, -1 ) );
            rec.trqlin3 := Convert( slices, 338, ( -9, -8, -7, -2, -1 ) );
            rec.trqljn3 := Convert( slices, 339, ( -9, -8, -7, -2, -1 ) );
            rec.troqln3 := Convert( slices, 340, ( -9, -8, -7, -2, -1 ) );
            rec.troql3 := Convert_Troql2_Type( Get( slices, 341 ));
            rec.ivlpar := Convert_Ivlpar_Type( Get( slices, 342 ));
            rec.nrpart := Convert_Boolean_With_Missing( Get( slices, 343 ));
            rec.nrptim := Convert_Nrptim_Type( Get( slices, 344 ));
            rec.nrpxpm1 := Convert_Nrpxpm1_Type( Get( slices, 345 ));
            rec.nrpxpm2 := Convert_Cohxpm2_Type( Get( slices, 346 ));
            rec.cohadv := Convert_Boolean_With_Missing( Get( slices, 347 ));
            rec.cohad1 := Convert_Cohad1_Type( Get( slices, 348 ));
            rec.cohad2 := Convert_Cohad2_Type( Get( slices, 349 ));
            rec.cohdis := Convert_Boolean_With_Missing( Get( slices, 350 ));
            rec.cohds1 := Convert_Cohds1_Type( Get( slices, 351 ));
            rec.cohds2 := Convert_Cohds2_Type( Get( slices, 352 ));
            rec.cohxpm1 := Convert_Cohxpm1_Type( Get( slices, 353 ));
            rec.cohxpm2 := Convert_Cohxpm2_Type( Get( slices, 354 ));
            rec.birhh := Convert_Aglt20_Type( Get( slices, 355 ));
            rec.mabwly := Convert_Aglt20_Type( Get( slices, 356 ));
            rec.mabwnly := Convert( slices, 357, ( -9, -8, -7 ) );
            rec.bwtpn1 := Convert( slices, 358, ( -9, -8, -7 ) );
            rec.bwtagm1 := Convert( slices, 359, ( -9, -8, -7 ) );
            rec.bwtxp1 := Convert_Boolean_With_Missing( Get( slices, 360 ));
            rec.bwtel1 := Convert_Bwtel_Type( Get( slices, 361 ));
            rec.bwtwk1 := Convert( slices, 362, ( -9, -8, -7, -2, -1 ) );
            rec.bwtkn1 := Convert_Bwtkn_Type( Get( slices, 363 ));
            rec.bwtlb1 := Convert( slices, 364, ( -9, -8, -7, -2, -1 ) );
            rec.bwtoz1 := Convert( slices, 365, ( -9, -8, -7, -2, -1 ) );
            rec.bwtgm1 := Convert( slices, 366, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.bwtg51 := Convert_Bwtg51_Type( Get( slices, 367 ));
            rec.bwtpn2 := Convert( slices, 368, ( -9, -8, -7 ) );
            rec.bwtagm2 := Convert( slices, 369, ( -9, -8, -7 ) );
            rec.bwtxp2 := Convert_Boolean_With_Missing( Get( slices, 370 ));
            rec.bwtel2 := Convert_Bwtel2_Type( Get( slices, 371 ));
            rec.bwtwk2 := Convert( slices, 372, ( -9, -8, -7, -2, -1 ) );
            rec.bwtkn2 := Convert_Bwtkn_Type( Get( slices, 373 ));
            rec.bwtlb2 := Convert( slices, 374, ( -9, -8, -7 ) );
            rec.bwtoz2 := Convert( slices, 375, ( -9, -8, -7, -2, -1 ) );
            rec.bwtgm2 := Convert( slices, 376, ( -9, -8, -7 ) );
            rec.bwtg52 := Convert_Bwtg5_Type( Get( slices, 377 ));
            rec.bwtpn3 := Convert( slices, 378, ( -9, -8, -7 ) );
            rec.bwtagm3 := Convert( slices, 379, ( -9, -8, -7 ) );
            rec.bwtxp3 := Convert_Boolean_With_Missing( Get( slices, 380 ));
            rec.bwtel3 := Convert_Bwtel2_Type( Get( slices, 381 ));
            rec.bwtwk3 := Convert( slices, 382, ( -9, -8, -7, -2, -1 ) );
            rec.bwtkn3 := Convert_Bwtkn_Type( Get( slices, 383 ));
            rec.bwtlb3 := Convert( slices, 384, ( -9, -8, -7 ) );
            rec.bwtoz3 := Convert( slices, 385, ( -9, -8, -7, -2, -1 ) );
            rec.bwtgm3 := Convert( slices, 386, ( -9, -8, -7 ) );
            rec.bwtg53 := Convert_Bwtg5_Type( Get( slices, 387 ));
            rec.cbage := Convert_Cbage_Type( Get( slices, 388 ));
            rec.lchmor := Convert_Lchmor_Type( Get( slices, 389 ));
            rec.lchmorn := Convert( slices, 390, ( -9, -8, -7, -2, -1 ) );
            rec.lvag16 := Convert_Lvag16_Type( Get( slices, 391 ));
            rec.agelh := Convert( slices, 392, ( -9, -8, -7, -3, -2, -1 ) );
            rec.lvag14 := Convert_Lvag14_Type( Get( slices, 393 ));
            rec.ynlp14 := Convert_Ynlp14_Type( Get( slices, 394 ));
            rec.sibs := Convert_Cbagef_Type( Get( slices, 395 ));
            rec.nsibs := Convert( slices, 396, ( -9, -8, -7, -2, -1 ) );
            rec.famsiz := Convert_Famsiz_Type( Get( slices, 397 ));
            rec.fampos := Convert_Fampos_Type( Get( slices, 398 ));
            rec.paby := Convert( slices, 399, ( -9, -8, -7, -2, -1 ) );
            rec.paagyb := Convert( slices, 400, ( -9, -8, -7, -2, -1 ) );
            rec.maby := Convert( slices, 401, ( -9, -8, -7, -2, -1 ) );
            rec.maagyb := Convert( slices, 402, ( -9, -8, -7, -2, -1 ) );
            rec.paedhi := Convert_Maedhi_Type( Get( slices, 403 ));
            rec.maedhi := Convert_Maedhi_Type( Get( slices, 404 ));
            rec.nbooks := Convert_Nbooks_Type( Get( slices, 405 ));
            rec.hood15 := Convert_Hood15_Type( Get( slices, 406 ));
            rec.wlsha := Convert_Yes_Or_Missing_Type( Get( slices, 407 ));
            rec.wlshb := Convert_Yes_Or_Missing_Type( Get( slices, 408 ));
            rec.wlshc := Convert_Yes_Or_Missing_Type( Get( slices, 409 ));
            rec.wlshd := Convert_Yes_Or_Missing_Type( Get( slices, 410 ));
            rec.wlshe := Convert_Jbwkhrh_Type( Get( slices, 411 ));
            rec.wlshua := Convert_Wlshua_Type( Get( slices, 412 ));
            rec.wlshub := Convert_Wlshua_Type( Get( slices, 413 ));
            rec.wlshuc := Convert_Wlshua_Type( Get( slices, 414 ));
            rec.wlshud := Convert_Wlshua_Type( Get( slices, 415 ));
            rec.wlshue := Convert_Wlshua_Type( Get( slices, 416 ));
            rec.aglt20 := Convert_Aglt20_Type( Get( slices, 417 ));
            rec.scnow2 := Convert_Cjsck2_Type( Get( slices, 418 ));
            rec.infted := Convert_Aglt20_Type( Get( slices, 419 ));
            rec.edasp := Convert_Edasp_Type( Get( slices, 420 ));
            rec.fedasp := Convert_Fedasp_Type( Get( slices, 421 ));
            rec.fedtyp := Convert_Fedtyp_Type( Get( slices, 422 ));
            rec.fedlik := Convert_Fedlik_Type( Get( slices, 423 ));
            rec.fednt1 := Convert_Fednt1_Type( Get( slices, 424 ));
            rec.fednt2 := Convert_Fednt2_Type( Get( slices, 425 ));
            rec.ocfut := Convert( slices, 426, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ocimpa := Convert_Ocimpa_Type( Get( slices, 427 ));
            rec.ocimpb := Convert_Ocimpa_Type( Get( slices, 428 ));
            rec.ocimpc := Convert_Ocimpa_Type( Get( slices, 429 ));
            rec.ocimpd := Convert_Ocimpa_Type( Get( slices, 430 ));
            rec.ocimpe := Convert_Ocimpa_Type( Get( slices, 431 ));
            rec.ocimpf := Convert_Ocimpa_Type( Get( slices, 432 ));
            rec.ocimpg := Convert_Ocimpa_Type( Get( slices, 433 ));
            rec.ocimph := Convert_Ocimpa_Type( Get( slices, 434 ));
            rec.ocimpi := Convert_Ocimpa_Type( Get( slices, 435 ));
            rec.ocimpj := Convert_Ocimpa_Type( Get( slices, 436 ));
            rec.ocimpk := Convert_Ocimpa_Type( Get( slices, 437 ));
            rec.ocimpl := Convert_Ocimpa_Type( Get( slices, 438 ));
            rec.futra := Convert( slices, 439, ( -9, -8, -7, -3, -2, -1 ) );
            rec.futrb := Convert( slices, 440, ( -9, -8, -7, -3, -2, -1 ) );
            rec.futrc := Convert( slices, 441, ( -9, -8, -7, -3, -2, -1 ) );
            rec.futrd := Convert( slices, 442, ( -9, -8, -7, -3, -2, -1 ) );
            rec.futre := Convert( slices, 443, ( -9, -8, -7, -3, -2, -1 ) );
            rec.futrf := Convert( slices, 444, ( -9, -8, -7, -3, -2, -1 ) );
            rec.futrg := Convert( slices, 445, ( -9, -8, -7, -3, -2, -1 ) );
            rec.futrh := Convert( slices, 446, ( -9, -8, -7, -3, -2, -1 ) );
            rec.futri := Convert( slices, 447, ( -9, -8, -7, -3, -2, -1 ) );
            rec.futrj := Convert( slices, 448, ( -9, -8, -7, -3, -2, -1 ) );
            rec.ivda := Convert_Ivda_Type( Get( slices, 449 ));
            rec.ivdb := Convert_Ivdb_Type( Get( slices, 450 ));
            rec.ivdc := Convert_Ivdc_Type( Get( slices, 451 ));
            rec.ivdd := Convert_Ivdd_Type( Get( slices, 452 ));
            rec.ivde := Convert_Yes_Or_Missing_Type( Get( slices, 453 ));
            rec.hldsbl1 := Convert_Hldsbl1_Type( Get( slices, 454 ));
            rec.hlstat := Convert_Hlstat_Type( Get( slices, 455 ));
            rec.hlprb := Convert( slices, 456, ( -9, -8, -7, -2, -1 ) );
            rec.hlprba := Convert_Hlprba_Type( Get( slices, 457 ));
            rec.hlprbb := Convert_Hlprbb_Type( Get( slices, 458 ));
            rec.hlprbc := Convert_Hlprbc_Type( Get( slices, 459 ));
            rec.hlprbd := Convert_Hlprbd_Type( Get( slices, 460 ));
            rec.hlprbe := Convert_Hlprbe_Type( Get( slices, 461 ));
            rec.hlprbf := Convert_Hlprbf_Type( Get( slices, 462 ));
            rec.hlprbg := Convert_Hlprbg_Type( Get( slices, 463 ));
            rec.hlprbh := Convert_Hlprbh_Type( Get( slices, 464 ));
            rec.hlprbi := Convert_Hlprbi_Type( Get( slices, 465 ));
            rec.hlprbj := Convert_Hlprbj_Type( Get( slices, 466 ));
            rec.hlprbk := Convert_Hlprbk_Type( Get( slices, 467 ));
            rec.hlprbl := Convert_Hlprbl_Type( Get( slices, 468 ));
            rec.hlprbn := Convert_Hlprbn_Type( Get( slices, 469 ));
            rec.hlprbo := Convert_Hlprbo_Type( Get( slices, 470 ));
            rec.hlprbm := Convert_Hlprbm_Type( Get( slices, 471 ));
            rec.hllt := Convert_Bscon_Type( Get( slices, 472 ));
            rec.hllta := Convert_Hllta_Type( Get( slices, 473 ));
            rec.hlltb := Convert_Hlltb_Type( Get( slices, 474 ));
            rec.hlltc := Convert_Hlltc_Type( Get( slices, 475 ));
            rec.hlltd := Convert_Hlltd_Type( Get( slices, 476 ));
            rec.hllte := Convert_Hllte_Type( Get( slices, 477 ));
            rec.hlltw := Convert_Bscon_Type( Get( slices, 478 ));
            rec.hlendw := Convert_Hlendw_Type( Get( slices, 479 ));
            rec.hlltwa := Convert_Hlltwa_Type( Get( slices, 480 ));
            rec.hliv65 := Convert_Hliv65_Type( Get( slices, 481 ));
            rec.adla := Convert_Adla_Type( Get( slices, 482 ));
            rec.adlad := Convert_Adlad_Type( Get( slices, 483 ));
            rec.adlb := Convert_Adla_Type( Get( slices, 484 ));
            rec.adlbd := Convert_Adlad_Type( Get( slices, 485 ));
            rec.adlc := Convert_Adla_Type( Get( slices, 486 ));
            rec.adlcd := Convert_Adlad_Type( Get( slices, 487 ));
            rec.adld := Convert_Adla_Type( Get( slices, 488 ));
            rec.adldd := Convert_Adlad_Type( Get( slices, 489 ));
            rec.adle := Convert_Adla_Type( Get( slices, 490 ));
            rec.adled := Convert_Adlad_Type( Get( slices, 491 ));
            rec.adlf := Convert_Adla_Type( Get( slices, 492 ));
            rec.adlfd := Convert_Adlad_Type( Get( slices, 493 ));
            rec.hl2gp := Convert_Hl2gp_Type( Get( slices, 494 ));
            rec.hl2hop := Convert( slices, 495, ( -9, -8, -7, -2, -1 ) );
            rec.xdts := Convert_Bscon_Type( Get( slices, 496 ));
            rec.nxdts := Convert_Nxdts_Type( Get( slices, 497 ));
            rec.hosp := Convert_Hlsv_Type( Get( slices, 498 ));
            rec.hospd := Convert( slices, 499, ( -9, -8, -7, -2, -1 ) );
            rec.hospch := Convert_Hospch_Type( Get( slices, 500 ));
            rec.hospnhs := Convert_Hospnhs_Type( Get( slices, 501 ));
            rec.hlcvr := Convert_Hlcvr_Type( Get( slices, 502 ));
            rec.hlcvrh := Convert_Hlcvrh_Type( Get( slices, 503 ));
            rec.hlcvrl := Convert( slices, 504, ( -9, -8, -7, -2, -1 ) );
            rec.hlsv := Convert_Hlsv_Type( Get( slices, 505 ));
            rec.hlsva := Convert_Hlsva_Type( Get( slices, 506 ));
            rec.hlsvan := Convert_Hlsvan_Type( Get( slices, 507 ));
            rec.hlsvaf := Convert_Hlsvaf_Type( Get( slices, 508 ));
            rec.hlsvb := Convert_Hlsvb_Type( Get( slices, 509 ));
            rec.hlsvbn := Convert_Hlsvan_Type( Get( slices, 510 ));
            rec.hlsvbf := Convert_Hlsvaf_Type( Get( slices, 511 ));
            rec.hlsvc := Convert_Hlsvc_Type( Get( slices, 512 ));
            rec.hlsvcn := Convert_Hlsvan_Type( Get( slices, 513 ));
            rec.hlsvcf := Convert_Hlsvaf_Type( Get( slices, 514 ));
            rec.hlsvd := Convert_Hlsvd_Type( Get( slices, 515 ));
            rec.hlsvdn := Convert_Hlsvan_Type( Get( slices, 516 ));
            rec.hlsvdf := Convert_Hlsvaf_Type( Get( slices, 517 ));
            rec.hlsve := Convert_Hlsve_Type( Get( slices, 518 ));
            rec.hlsven := Convert_Hlsvan_Type( Get( slices, 519 ));
            rec.hlsvef := Convert_Hlsvaf_Type( Get( slices, 520 ));
            rec.hlsvf := Convert_Hlsvf_Type( Get( slices, 521 ));
            rec.hlsvfn := Convert_Hlsvan_Type( Get( slices, 522 ));
            rec.hlsvff := Convert_Hlsvaf_Type( Get( slices, 523 ));
            rec.hlsvg := Convert_Hlsvg_Type( Get( slices, 524 ));
            rec.hlsvgn := Convert_Hlsvan_Type( Get( slices, 525 ));
            rec.hlsvgf := Convert_Hlsvaf_Type( Get( slices, 526 ));
            rec.hlsvh := Convert_Hlsvh_Type( Get( slices, 527 ));
            rec.hlsvhn := Convert_Hlsvan_Type( Get( slices, 528 ));
            rec.hlsvhf := Convert_Hlsvaf_Type( Get( slices, 529 ));
            rec.hlsvi := Convert_Hlsvi_Type( Get( slices, 530 ));
            rec.hlsvin := Convert_Hlsvan_Type( Get( slices, 531 ));
            rec.hlsvif := Convert_Hlsvaf_Type( Get( slices, 532 ));
            rec.hlsvl := Convert_Hlsvl_Type( Get( slices, 533 ));
            rec.hlsvln := Convert_Hlsvln_Type( Get( slices, 534 ));
            rec.hlsvlf := Convert_Hlsvlf_Type( Get( slices, 535 ));
            rec.hlsvm := Convert_Hlsvm_Type( Get( slices, 536 ));
            rec.hlsvmn := Convert_Hlsvln_Type( Get( slices, 537 ));
            rec.hlsvmf := Convert_Hlsvlf_Type( Get( slices, 538 ));
            rec.hlsvj := Convert_Hlsvj_Type( Get( slices, 539 ));
            rec.hlsvjn := Convert_Hlsvan_Type( Get( slices, 540 ));
            rec.hlsvjf := Convert_Hlsvaf_Type( Get( slices, 541 ));
            rec.hlsvk := Convert_Hlsvk_Type( Get( slices, 542 ));
            rec.hlsvkn := Convert_Hlsvan_Type( Get( slices, 543 ));
            rec.hlsvkf := Convert_Hlsvaf_Type( Get( slices, 544 ));
            rec.hlck := Convert_Aidpl1_Type( Get( slices, 545 ));
            rec.hlcka := Convert_Hlcka_Type( Get( slices, 546 ));
            rec.hlckan := Convert_Hlckan_Type( Get( slices, 547 ));
            rec.hlckb := Convert_Hlcka_Type( Get( slices, 548 ));
            rec.hlckbn := Convert_Hlckan_Type( Get( slices, 549 ));
            rec.hlckc := Convert_Hlcka_Type( Get( slices, 550 ));
            rec.hlckcn := Convert_Hlckan_Type( Get( slices, 551 ));
            rec.hlckd := Convert_Hlcka_Type( Get( slices, 552 ));
            rec.hlckdn := Convert_Hlckan_Type( Get( slices, 553 ));
            rec.hlcke := Convert_Hlcka_Type( Get( slices, 554 ));
            rec.hlcken := Convert_Hlckan_Type( Get( slices, 555 ));
            rec.hlcki := Convert_Hlcki_Type( Get( slices, 556 ));
            rec.hlckin := Convert_Hlckin_Type( Get( slices, 557 ));
            rec.hlckf := Convert_Hlcka_Type( Get( slices, 558 ));
            rec.hlckfn := Convert_Hlckan_Type( Get( slices, 559 ));
            rec.hlckg := Convert_Hlcka_Type( Get( slices, 560 ));
            rec.hlckgn := Convert_Hlckan_Type( Get( slices, 561 ));
            rec.hlckh := Convert_Hlcka_Type( Get( slices, 562 ));
            rec.hlckhn := Convert_Hlckan_Type( Get( slices, 563 ));
            rec.smoker := Convert_Bscon_Type( Get( slices, 564 ));
            rec.ncigs := Convert( slices, 565, ( -9, -8, -7, -2, -1 ) );
            rec.aidhh := Convert_Aidhh_Type( Get( slices, 566 ));
            rec.aidhua := Convert( slices, 567, ( -9, -8, -7, -1 ) );
            rec.aidhub := Convert( slices, 568, ( -9, -8, -7 ) );
            rec.aidhuc := Convert( slices, 569, ( -9, -8, -7 ) );
            rec.aidxhh := Convert_Aidxhh_Type( Get( slices, 570 ));
            rec.naidxhh := Convert_Naidxhh_Type( Get( slices, 571 ));
            rec.aidhu1 := Convert_Aidhu1_Type( Get( slices, 572 ));
            rec.aidhu2 := Convert_Aidhu2_Type( Get( slices, 573 ));
            rec.aidhrs := Convert_Aidhrs_Type( Get( slices, 574 ));
            rec.ivma := Convert_Ivda_Type( Get( slices, 575 ));
            rec.ivmb := Convert_Ivdb_Type( Get( slices, 576 ));
            rec.ivmc := Convert_Ivec_Type( Get( slices, 577 ));
            rec.ivmd := Convert_Ivdd_Type( Get( slices, 578 ));
            rec.ivme := Convert_Ivee_Type( Get( slices, 579 ));
            rec.jbhas := Convert_Frnow_Type( Get( slices, 580 ));
            rec.jboff := Convert_Jboff_Type( Get( slices, 581 ));
            rec.jboffy := Convert_Jboffy_Type( Get( slices, 582 ));
            rec.jbterm1 := Convert_Jbterm1_Type( Get( slices, 583 ));
            rec.jbterm2 := Convert_Jbterm2_Type( Get( slices, 584 ));
            rec.jbsoc := Convert( slices, 585, ( -9, -8, -2, -1 ) );
            rec.jbsoc00 := Convert( slices, 586, ( -9, -8, -2, -1 ) );
            rec.jbsic92 := Convert( slices, 587, ( -9, -8, -7, -2, -1 ) );
            rec.jbsemp := Convert_Jbsemp_Type( Get( slices, 588 ));
            rec.jbmngr := Convert_Jbmngr_Type( Get( slices, 589 ));
            rec.jbsect := Convert_Jbsect_Type( Get( slices, 590 ));
            rec.jbsize := Convert_Jbsize_Type( Get( slices, 591 ));
            rec.jbhrs := Convert( slices, 592, ( -9, -8, -7, -2, -1 ) );
            rec.jbot := Convert( slices, 593, ( -9, -8, -7, -2, -1 ) );
            rec.jbotpd := Convert( slices, 594, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbhrlk := Convert_Jbhrlk_Type( Get( slices, 595 ));
            rec.jbpl := Convert_Jbpl_Type( Get( slices, 596 ));
            rec.jbttwt := Convert( slices, 597, ( -9, -8, -7, -3, -2, -1 ) );
            rec.jbttwm := Convert_Jbttwm_Type( Get( slices, 598 ));
            rec.jbsat2 := Convert( slices, 599, ( -9, -8, -7, -2, -1 ) );
            rec.jbsat4 := Convert_Jbsat4_Type( Get( slices, 600 ));
            rec.jbsat6 := Convert_Jbsat4_Type( Get( slices, 601 ));
            rec.jbsat7 := Convert_Jbsat_Type( Get( slices, 602 ));
            rec.jbsat := Convert_Jbsat_Type( Get( slices, 603 ));
            rec.paygl := Convert( slices, 604, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.paygw := Convert( slices, 605, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.paynl := Convert( slices, 606, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.paynw := Convert( slices, 607, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.pytc := Convert_Pytc_Type( Get( slices, 608 ));
            rec.pywftc := Convert( slices, 609, ( -9, -8, -7, -2, -1 ) );
            rec.pywftcw := Convert( slices, 610, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.payslp := Convert_Payslp_Type( Get( slices, 611 ));
            rec.payusl := Convert_Aidpl1_Type( Get( slices, 612 ));
            rec.payu := Convert( slices, 613, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.payuw := Convert( slices, 614, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.payug := Convert_Paylyg_Type( Get( slices, 615 ));
            rec.paydf1 := Convert_Paydf1_Type( Get( slices, 616 ));
            rec.paydf2 := Convert_Paydf2_Type( Get( slices, 617 ));
            rec.paydf3 := Convert_Paydf3_Type( Get( slices, 618 ));
            rec.paydf4 := Convert_Paydf4_Type( Get( slices, 619 ));
            rec.paydf5 := Convert_Paydf5_Type( Get( slices, 620 ));
            rec.paydf6 := Convert_Paydf6_Type( Get( slices, 621 ));
            rec.paydf7 := Convert_Paydf7_Type( Get( slices, 622 ));
            rec.paydf9 := Convert_Paydf9_Type( Get( slices, 623 ));
            rec.paydf8 := Convert_Paydf8_Type( Get( slices, 624 ));
            rec.paytyp := Convert_Paytyp_Type( Get( slices, 625 ));
            rec.ovtpay := Convert_Bpar16_Type( Get( slices, 626 ));
            rec.extrate := Convert( slices, 627, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.extrest := Convert_Basrest_Type( Get( slices, 628 ));
            rec.basrate := Convert( slices, 629, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.basrest := Convert_Basrest_Type( Get( slices, 630 ));
            rec.ovtrate := Convert( slices, 631, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.ovtrest := Convert_Basrest_Type( Get( slices, 632 ));
            rec.jbperfp := Convert_Coh1mr_Type( Get( slices, 633 ));
            rec.jbonus := Convert_Aidpl1_Type( Get( slices, 634 ));
            rec.jbonam := Convert( slices, 635, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbong := Convert_Jbong_Type( Get( slices, 636 ));
            rec.jbrise := Convert_Aidpl1_Type( Get( slices, 637 ));
            rec.tujbpl := Convert_Aidpl1_Type( Get( slices, 638 ));
            rec.tuin1 := Convert_Aidpl1_Type( Get( slices, 639 ));
            rec.jbopps := Convert_Aidpl1_Type( Get( slices, 640 ));
            rec.jbpen := Convert_Aidpl1_Type( Get( slices, 641 ));
            rec.jbpenm := Convert_Aidpl1_Type( Get( slices, 642 ));
            rec.jbwkhra := Convert_Yes_Or_Missing_Type( Get( slices, 643 ));
            rec.jbwkhrb := Convert_Yes_Or_Missing_Type( Get( slices, 644 ));
            rec.jbwkhrc := Convert_Yes_Or_Missing_Type( Get( slices, 645 ));
            rec.jbwkhrd := Convert_Yes_Or_Missing_Type( Get( slices, 646 ));
            rec.jbwkhre := Convert_Yes_Or_Missing_Type( Get( slices, 647 ));
            rec.jbwkhrf := Convert_Yes_Or_Missing_Type( Get( slices, 648 ));
            rec.jbwkhrg := Convert_Yes_Or_Missing_Type( Get( slices, 649 ));
            rec.jbwkhrh := Convert_Jbwkhrh_Type( Get( slices, 650 ));
            rec.jbwkpat := Convert_Jbwkpat_Type( Get( slices, 651 ));
            rec.jbst1h := Convert( slices, 652, ( -9, -8, -7 ) );
            rec.jbst1m := Convert( slices, 653, ( -9, -8, -7 ) );
            rec.jben1h := Convert( slices, 654, ( -9, -8, -7 ) );
            rec.jben1m := Convert( slices, 655, ( -9, -8, -7 ) );
            rec.jbst2h := Convert( slices, 656, ( -9, -8, -7 ) );
            rec.jbst2m := Convert( slices, 657, ( -9, -8, -7 ) );
            rec.jben2h := Convert( slices, 658, ( -9, -8, -7 ) );
            rec.jben2m := Convert( slices, 659, ( -9, -8, -7 ) );
            rec.jbst3h := Convert( slices, 660, ( -9, -8, -7 ) );
            rec.jbst3m := Convert( slices, 661, ( -9, -8, -7 ) );
            rec.jben3h := Convert( slices, 662, ( -9, -8, -7 ) );
            rec.jben3m := Convert( slices, 663, ( -9, -8, -7 ) );
            rec.lwst1h := Convert( slices, 664, ( -9, -8, -7 ) );
            rec.lwst1m := Convert( slices, 665, ( -9, -8, -7 ) );
            rec.lwen1h := Convert( slices, 666, ( -9, -8, -7 ) );
            rec.lwen1m := Convert( slices, 667, ( -9, -8, -7 ) );
            rec.lwdnw1 := Convert_Lwdnw1_Type( Get( slices, 668 ));
            rec.lwst2h := Convert( slices, 669, ( -9, -8, -7 ) );
            rec.lwst2m := Convert( slices, 670, ( -9, -8, -7 ) );
            rec.lwen2h := Convert( slices, 671, ( -9, -8, -7 ) );
            rec.lwen2m := Convert( slices, 672, ( -9, -8, -7 ) );
            rec.lwdnw2 := Convert_Lwdnw2_Type( Get( slices, 673 ));
            rec.lwst3h := Convert( slices, 674, ( -9, -8, -7 ) );
            rec.lwst3m := Convert( slices, 675, ( -9, -8, -7 ) );
            rec.lwen3h := Convert( slices, 676, ( -9, -8, -7 ) );
            rec.lwen3m := Convert( slices, 677, ( -9, -8, -7 ) );
            rec.lwdnw3 := Convert_Lwdnw3_Type( Get( slices, 678 ));
            rec.lwst4h := Convert( slices, 679, ( -9, -8, -7 ) );
            rec.lwst4m := Convert( slices, 680, ( -9, -8, -7 ) );
            rec.lwen4h := Convert( slices, 681, ( -9, -8, -7 ) );
            rec.lwen4m := Convert( slices, 682, ( -9, -8, -7 ) );
            rec.lwdnw4 := Convert_Lwdnw4_Type( Get( slices, 683 ));
            rec.lwst5h := Convert( slices, 684, ( -9, -8, -7 ) );
            rec.lwst5m := Convert( slices, 685, ( -9, -8, -7 ) );
            rec.lwen5h := Convert( slices, 686, ( -9, -8, -7 ) );
            rec.lwen5m := Convert( slices, 687, ( -9, -8, -7 ) );
            rec.lwdnw5 := Convert_Lwdnw5_Type( Get( slices, 688 ));
            rec.lwst6h := Convert( slices, 689, ( -9, -8, -7 ) );
            rec.lwst6m := Convert( slices, 690, ( -9, -8, -7 ) );
            rec.lwen6h := Convert( slices, 691, ( -9, -8, -7 ) );
            rec.lwen6m := Convert( slices, 692, ( -9, -8, -7 ) );
            rec.lwdnw6 := Convert_Lwdnw6_Type( Get( slices, 693 ));
            rec.lwst7h := Convert( slices, 694, ( -9, -8, -7 ) );
            rec.lwst7m := Convert( slices, 695, ( -9, -8, -7 ) );
            rec.lwen7h := Convert( slices, 696, ( -9, -8, -7 ) );
            rec.lwen7m := Convert( slices, 697, ( -9, -8, -7 ) );
            rec.lwdnw7 := Convert_Lwdnw7_Type( Get( slices, 698 ));
            rec.jbpatw := Convert_Jbpatw_Type( Get( slices, 699 ));
            rec.jbbgd := Convert( slices, 700, ( -9, -8, -7, -2, -1 ) );
            rec.jbbgm := Convert_Cjsbgm_Type( Get( slices, 701 ));
            rec.jbbgy4 := Convert( slices, 702, ( -9, -8, -7, -2, -1 ) );
            rec.jbbgly := Convert_Jbbgly_Type( Get( slices, 703 ));
            rec.pays := Convert( slices, 704, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.paysw := Convert( slices, 705, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.paysg := Convert_Paylyg_Type( Get( slices, 706 ));
            rec.payly := Convert( slices, 707, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.paylyw := Convert( slices, 708, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.paylyg := Convert_Paylyg_Type( Get( slices, 709 ));
            rec.jsboss := Convert_Jsboss_Type( Get( slices, 710 ));
            rec.jssize := Convert_Jssize_Type( Get( slices, 711 ));
            rec.jshrs := Convert( slices, 712, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jshrlk := Convert_Jbhrlk_Type( Get( slices, 713 ));
            rec.jswkpat := Convert_Jbwkpat_Type( Get( slices, 714 ));
            rec.jsst1h := Convert( slices, 715, ( -9, -8, -7 ) );
            rec.jsst1m := Convert( slices, 716, ( -9, -8, -7 ) );
            rec.jsen1h := Convert( slices, 717, ( -9, -8, -7 ) );
            rec.jsen1m := Convert( slices, 718, ( -9, -8, -7 ) );
            rec.jsst2h := Convert( slices, 719, ( -9, -8, -7 ) );
            rec.jsst2m := Convert( slices, 720, ( -9, -8, -7 ) );
            rec.jsen2h := Convert( slices, 721, ( -9, -8, -7 ) );
            rec.jsen2m := Convert( slices, 722, ( -9, -8, -7 ) );
            rec.jsst3h := Convert( slices, 723, ( -9, -8, -7 ) );
            rec.jsst3m := Convert( slices, 724, ( -9, -8, -7 ) );
            rec.jsen3h := Convert( slices, 725, ( -9, -8, -7 ) );
            rec.jsen3m := Convert( slices, 726, ( -9, -8, -7 ) );
            rec.lwsst1h := Convert( slices, 727, ( -9, -8, -7 ) );
            rec.lwsst1m := Convert( slices, 728, ( -9, -8, -7 ) );
            rec.lwsen1h := Convert( slices, 729, ( -9, -8, -7 ) );
            rec.lwsen1m := Convert( slices, 730, ( -9, -8, -7 ) );
            rec.lwsdnw1 := Convert_Lwdnw1_Type( Get( slices, 731 ));
            rec.lwsst2h := Convert( slices, 732, ( -9, -8, -7 ) );
            rec.lwsst2m := Convert( slices, 733, ( -9, -8, -7 ) );
            rec.lwsen2h := Convert( slices, 734, ( -9, -8, -7 ) );
            rec.lwsen2m := Convert( slices, 735, ( -9, -8, -7 ) );
            rec.lwsdnw2 := Convert_Lwdnw2_Type( Get( slices, 736 ));
            rec.lwsst3h := Convert( slices, 737, ( -9, -8, -7 ) );
            rec.lwsst3m := Convert( slices, 738, ( -9, -8, -7 ) );
            rec.lwsen3h := Convert( slices, 739, ( -9, -8, -7 ) );
            rec.lwsen3m := Convert( slices, 740, ( -9, -8, -7 ) );
            rec.lwsdnw3 := Convert_Lwdnw3_Type( Get( slices, 741 ));
            rec.lwsst4h := Convert( slices, 742, ( -9, -8, -7 ) );
            rec.lwsst4m := Convert( slices, 743, ( -9, -8, -7 ) );
            rec.lwsen4h := Convert( slices, 744, ( -9, -8, -7 ) );
            rec.lwsen4m := Convert( slices, 745, ( -9, -8, -7 ) );
            rec.lwsdnw4 := Convert_Lwdnw4_Type( Get( slices, 746 ));
            rec.lwsst5h := Convert( slices, 747, ( -9, -8, -7 ) );
            rec.lwsst5m := Convert( slices, 748, ( -9, -8, -7 ) );
            rec.lwsen5h := Convert( slices, 749, ( -9, -8, -7 ) );
            rec.lwsen5m := Convert( slices, 750, ( -9, -8, -7 ) );
            rec.lwsdnw5 := Convert_Lwdnw5_Type( Get( slices, 751 ));
            rec.lwsst6h := Convert( slices, 752, ( -9, -8, -7 ) );
            rec.lwsst6m := Convert( slices, 753, ( -9, -8, -7 ) );
            rec.lwsen6h := Convert( slices, 754, ( -9, -8, -7 ) );
            rec.lwsen6m := Convert( slices, 755, ( -9, -8, -7 ) );
            rec.lwsdnw6 := Convert_Lwdnw6_Type( Get( slices, 756 ));
            rec.lwsst7h := Convert( slices, 757, ( -9, -8, -7 ) );
            rec.lwsst7m := Convert( slices, 758, ( -9, -8, -7 ) );
            rec.lwsen7h := Convert( slices, 759, ( -9, -8, -7 ) );
            rec.lwsen7m := Convert( slices, 760, ( -9, -8, -7 ) );
            rec.lwsdnw7 := Convert_Lwdnw7_Type( Get( slices, 761 ));
            rec.jstypeb := Convert_Jstypeb_Type( Get( slices, 762 ));
            rec.jsaccs := Convert_Jsaccs_Type( Get( slices, 763 ));
            rec.jspart := Convert_Jspart_Type( Get( slices, 764 ));
            rec.jsprbm := Convert_Cjsbgm_Type( Get( slices, 765 ));
            rec.jsprby4 := Convert( slices, 766, ( -9, -8, -7, -2, -1 ) );
            rec.jsprem := Convert_Cjsbgm_Type( Get( slices, 767 ));
            rec.jsprey4 := Convert( slices, 768, ( -9, -8, -7, -2, -1 ) );
            rec.jsprf := Convert( slices, 769, ( -9, -8, -7, -3, -2, -1 ) );
            rec.jsprls := Convert_Jsprls_Type( Get( slices, 770 ));
            rec.jsprtx := Convert_Jsprtx_Type( Get( slices, 771 ));
            rec.jsprni := Convert_Jsprni_Type( Get( slices, 772 ));
            rec.jspayu := Convert( slices, 773, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jspayw := Convert( slices, 774, ( -9.0, -8.0, -7.0, -4.0, -2.0, -1.0 ) );
            rec.jspytx := Convert_Jspytx_Type( Get( slices, 775 ));
            rec.jspyni := Convert_Jspyni_Type( Get( slices, 776 ));
            rec.jspl := Convert_Jspl_Type( Get( slices, 777 ));
            rec.jsttwt := Convert( slices, 778, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.jsttwm := Convert_Jsttwm_Type( Get( slices, 779 ));
            rec.jssat1 := Convert_Jssat1_Type( Get( slices, 780 ));
            rec.jssat2 := Convert_Jbsat_Type( Get( slices, 781 ));
            rec.jssat4 := Convert_Jbsat_Type( Get( slices, 782 ));
            rec.jssat5 := Convert_Jbsat_Type( Get( slices, 783 ));
            rec.jssat := Convert_Jbsat_Type( Get( slices, 784 ));
            rec.jsbgd := Convert( slices, 785, ( -9, -8, -7, -2, -1 ) );
            rec.jsbgm := Convert_Cjsbgm_Type( Get( slices, 786 ));
            rec.jsbgy4 := Convert( slices, 787, ( -9, -8, -7, -2, -1 ) );
            rec.jblkcha := Convert_Jblkcha_Type( Get( slices, 788 ));
            rec.jbxpcha := Convert_Jblkcha_Type( Get( slices, 789 ));
            rec.jblkchb := Convert_Boolean_With_Missing( Get( slices, 790 ));
            rec.jbxpchb := Convert_Boolean_With_Missing( Get( slices, 791 ));
            rec.jblkchc := Convert_Boolean_With_Missing( Get( slices, 792 ));
            rec.jbxpchc := Convert_Boolean_With_Missing( Get( slices, 793 ));
            rec.jblkchd := Convert_Boolean_With_Missing( Get( slices, 794 ));
            rec.jbxpchd := Convert_Boolean_With_Missing( Get( slices, 795 ));
            rec.jblkche := Convert_Boolean_With_Missing( Get( slices, 796 ));
            rec.jbxpche := Convert_Boolean_With_Missing( Get( slices, 797 ));
            rec.rach12 := Convert_Hhch12_Type( Get( slices, 798 ));
            rec.jbchc1 := Convert_Jbchc1_Type( Get( slices, 799 ));
            rec.jbchc2 := Convert_Jbchc2_Type( Get( slices, 800 ));
            rec.jbchc3 := Convert_Jbchc3_Type( Get( slices, 801 ));
            rec.xpchcf := Convert_Xpchcf_Type( Get( slices, 802 ));
            rec.xpchc := Convert( slices, 803, ( -9, -8, -7, -2, -1 ) );
            rec.huxpch := Convert_Huxpch_Type( Get( slices, 804 ));
            rec.hunurs := Convert_Hunurs_Type( Get( slices, 805 ));
            rec.julk1 := Convert_Aidpl1_Type( Get( slices, 806 ));
            rec.julk4 := Convert_Bscon_Type( Get( slices, 807 ));
            rec.julka := Convert_Boolean_With_Missing( Get( slices, 808 ));
            rec.julkb := Convert_Boolean_With_Missing( Get( slices, 809 ));
            rec.julkc := Convert_Boolean_With_Missing( Get( slices, 810 ));
            rec.julkd := Convert_Boolean_With_Missing( Get( slices, 811 ));
            rec.julke := Convert_Boolean_With_Missing( Get( slices, 812 ));
            rec.julkjb := Convert_Aidpl1_Type( Get( slices, 813 ));
            rec.jubgn := Convert_Boolean_With_Missing( Get( slices, 814 ));
            rec.juspec := Convert_Juspec_Type( Get( slices, 815 ));
            rec.jusoc := Convert( slices, 816, ( -9, -8, -7, -2, -1 ) );
            rec.jusoc00 := Convert( slices, 817, ( -9, -8, -7, -2, -1 ) );
            rec.juhrsx := Convert( slices, 818, ( -9, -8, -7, -2, -1 ) );
            rec.jupayx := Convert( slices, 819, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jupayl := Convert( slices, 820, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.juhrsl := Convert( slices, 821, ( -9, -8, -7, -2, -1 ) );
            rec.eprosh := Convert_Cohxpm2_Type( Get( slices, 822 ));
            rec.eaage := Convert_Eaage_Type( Get( slices, 823 ));
            rec.jbub := Convert_Bscon_Type( Get( slices, 824 ));
            rec.jbuby := Convert_Jbuby_Type( Get( slices, 825 ));
            rec.j2has := Convert_Aidpl1_Type( Get( slices, 826 ));
            rec.j2soc := Convert( slices, 827, ( -9, -8, -7, -2, -1 ) );
            rec.j2soc00 := Convert( slices, 828, ( -9, -8, -7, -2, -1 ) );
            rec.j2semp := Convert_J2semp_Type( Get( slices, 829 ));
            rec.j2hrs := Convert( slices, 830, ( -9, -8, -7, -2, -1 ) );
            rec.j2pay := Convert( slices, 831, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ivea := Convert_Ivda_Type( Get( slices, 832 ));
            rec.iveb := Convert_Ivdb_Type( Get( slices, 833 ));
            rec.ivec := Convert_Ivec_Type( Get( slices, 834 ));
            rec.ived := Convert_Ivdd_Type( Get( slices, 835 ));
            rec.ivee := Convert_Ivee_Type( Get( slices, 836 ));
            rec.nemst := Convert_Nemst_Type( Get( slices, 837 ));
            rec.cjsbgd := Convert( slices, 838, ( -9, -8, -7, -2, -1 ) );
            rec.cjsbgm := Convert_Cjsbgm_Type( Get( slices, 839 ));
            rec.cjsbgy4 := Convert( slices, 840, ( -9, -8, -7, -2, -1 ) );
            rec.cjsbly := Convert_Cjsbly_Type( Get( slices, 841 ));
            rec.njbs := Convert( slices, 842, ( -9, -8, -7 ) );
            rec.jbhad := Convert_Aidpl1_Type( Get( slices, 843 ));
            rec.jlend4 := Convert( slices, 844, ( -9, -8, -7, -2, -1 ) );
            rec.jlsoc := Convert( slices, 845, ( -9, -8, -7, -2, -1 ) );
            rec.jlsoc00 := Convert( slices, 846, ( -9, -8, -7, -2, -1 ) );
            rec.jlsic92 := Convert( slices, 847, ( -9, -8, -7 ) );
            rec.jlsemp := Convert_J2semp_Type( Get( slices, 848 ));
            rec.jlboss := Convert_Aidpl1_Type( Get( slices, 849 ));
            rec.jlmngr := Convert_Jlmngr_Type( Get( slices, 850 ));
            rec.jlsize := Convert_Jlsize_Type( Get( slices, 851 ));
            rec.ivja := Convert_Ivda_Type( Get( slices, 852 ));
            rec.ivjb := Convert_Ivdb_Type( Get( slices, 853 ));
            rec.ivjc := Convert_Ivec_Type( Get( slices, 854 ));
            rec.ivjd := Convert_Ivdd_Type( Get( slices, 855 ));
            rec.ivje := Convert_Ivee_Type( Get( slices, 856 ));
            rec.oppola := Convert_Oppola_Type( Get( slices, 857 ));
            rec.oppolb := Convert_Oppola_Type( Get( slices, 858 ));
            rec.oppolc := Convert_Oppola_Type( Get( slices, 859 ));
            rec.oppold := Convert_Oppola_Type( Get( slices, 860 ));
            rec.vote1 := Convert_Aidpl1_Type( Get( slices, 861 ));
            rec.vote2 := Convert_Aidpl1_Type( Get( slices, 862 ));
            rec.vote3 := Convert_Vote3_Type( Get( slices, 863 ));
            rec.vote4 := Convert_Vote3_Type( Get( slices, 864 ));
            rec.vote5 := Convert_Vote5_Type( Get( slices, 865 ));
            rec.vote7 := Convert_Vote7_Type( Get( slices, 866 ));
            rec.vote8 := Convert_Vote8_Type( Get( slices, 867 ));
            rec.vote6 := Convert_Vote6_Type( Get( slices, 868 ));
            rec.swvt1 := Convert_Swvt1_Type( Get( slices, 869 ));
            rec.swvt2 := Convert_Swvt2_Type( Get( slices, 870 ));
            rec.swvt3 := Convert_Swvt2_Type( Get( slices, 871 ));
            rec.swpop1 := Convert_Swpop1_Type( Get( slices, 872 ));
            rec.swpop2 := Convert_Swpop2_Type( Get( slices, 873 ));
            rec.swpop3 := Convert_Swpop3_Type( Get( slices, 874 ));
            rec.swpop4 := Convert_Swpop3_Type( Get( slices, 875 ));
            rec.nipop5 := Convert_Nipop5_Type( Get( slices, 876 ));
            rec.opdev2 := Convert_Opdev2_Type( Get( slices, 877 ));
            rec.orgm := Convert_Aidpl1_Type( Get( slices, 878 ));
            rec.orgma := Convert_Orgma_Type( Get( slices, 879 ));
            rec.orgaa := Convert_Orgaa_Type( Get( slices, 880 ));
            rec.orgmb := Convert_Orgmb_Type( Get( slices, 881 ));
            rec.orgab := Convert_Orgab_Type( Get( slices, 882 ));
            rec.orgmc := Convert_Orgmc_Type( Get( slices, 883 ));
            rec.orgac := Convert_Orgac_Type( Get( slices, 884 ));
            rec.orgmd := Convert_Orgmd_Type( Get( slices, 885 ));
            rec.orgad := Convert_Orgad_Type( Get( slices, 886 ));
            rec.orgme := Convert_Orgme_Type( Get( slices, 887 ));
            rec.orgae := Convert_Orgae_Type( Get( slices, 888 ));
            rec.orgmf := Convert_Orgmf_Type( Get( slices, 889 ));
            rec.orgaf := Convert_Orgaf_Type( Get( slices, 890 ));
            rec.orgmg := Convert_Orgmg_Type( Get( slices, 891 ));
            rec.orgag := Convert_Orgag_Type( Get( slices, 892 ));
            rec.orgmp := Convert_Orgmp_Type( Get( slices, 893 ));
            rec.orgap := Convert_Orgap_Type( Get( slices, 894 ));
            rec.orgmq := Convert_Orgmq_Type( Get( slices, 895 ));
            rec.orgaq := Convert_Orgaq_Type( Get( slices, 896 ));
            rec.orgmo := Convert_Orgmo_Type( Get( slices, 897 ));
            rec.orgao := Convert_Orgao_Type( Get( slices, 898 ));
            rec.orgmh := Convert_Orgmh_Type( Get( slices, 899 ));
            rec.orgah := Convert_Orgah_Type( Get( slices, 900 ));
            rec.orgmi := Convert_Orgmi_Type( Get( slices, 901 ));
            rec.orgai := Convert_Orgai_Type( Get( slices, 902 ));
            rec.orgmj := Convert_Orgmj_Type( Get( slices, 903 ));
            rec.orgaj := Convert_Orgaj_Type( Get( slices, 904 ));
            rec.orgmk := Convert_Orgmk_Type( Get( slices, 905 ));
            rec.orgak := Convert_Orgak_Type( Get( slices, 906 ));
            rec.orgml := Convert_Orgml_Type( Get( slices, 907 ));
            rec.orgal := Convert_Orgal_Type( Get( slices, 908 ));
            rec.orgmm := Convert_Orgmm_Type( Get( slices, 909 ));
            rec.orgam := Convert_Orgam_Type( Get( slices, 910 ));
            rec.orga := Convert_Aidpl1_Type( Get( slices, 911 ));
            rec.frna := Convert_Frna_Type( Get( slices, 912 ));
            rec.frnb := Convert_Frna_Type( Get( slices, 913 ));
            rec.frnc := Convert_Coh1mr_Type( Get( slices, 914 ));
            rec.trust := Convert_Trust_Type( Get( slices, 915 ));
            rec.lfimpa := Convert_Lfimpa_Type( Get( slices, 916 ));
            rec.lfimpb := Convert_Lfimpa_Type( Get( slices, 917 ));
            rec.lfimpc := Convert_Lfimpa_Type( Get( slices, 918 ));
            rec.lfimpd := Convert_Lfimpa_Type( Get( slices, 919 ));
            rec.lfimpe := Convert_Lfimpa_Type( Get( slices, 920 ));
            rec.lfimpf := Convert_Lfimpa_Type( Get( slices, 921 ));
            rec.lfimpg := Convert_Lfimpa_Type( Get( slices, 922 ));
            rec.lfimph := Convert_Lfimpa_Type( Get( slices, 923 ));
            rec.locsera := Convert_Locsera_Type( Get( slices, 924 ));
            rec.locserb := Convert_Locsera_Type( Get( slices, 925 ));
            rec.locserc := Convert_Locsera_Type( Get( slices, 926 ));
            rec.locserd := Convert_Locsera_Type( Get( slices, 927 ));
            rec.locsere := Convert_Locsera_Type( Get( slices, 928 ));
            rec.locchd := Convert_Locchd_Type( Get( slices, 929 ));
            rec.opngbha := Convert_Opnata_Type( Get( slices, 930 ));
            rec.opngbhb := Convert_Opnata_Type( Get( slices, 931 ));
            rec.opngbhc := Convert_Opnata_Type( Get( slices, 932 ));
            rec.opngbhd := Convert_Opnata_Type( Get( slices, 933 ));
            rec.opngbhe := Convert_Opnata_Type( Get( slices, 934 ));
            rec.opngbhf := Convert_Opnata_Type( Get( slices, 935 ));
            rec.opngbhg := Convert_Opnata_Type( Get( slices, 936 ));
            rec.opngbhh := Convert_Opnata_Type( Get( slices, 937 ));
            rec.hhch16 := Convert_Hhch16_Type( Get( slices, 938 ));
            rec.schosa := Convert_Schosa_Type( Get( slices, 939 ));
            rec.schos1 := Convert_Schos1_Type( Get( slices, 940 ));
            rec.schos2 := Convert_Schos2_Type( Get( slices, 941 ));
            rec.hscimp := Convert_Hscimp_Type( Get( slices, 942 ));
            rec.plykid := Convert_Leikid_Type( Get( slices, 943 ));
            rec.leikid := Convert_Leikid_Type( Get( slices, 944 ));
            rec.kidopa := Convert_Coh1mr_Type( Get( slices, 945 ));
            rec.kidsee := Convert_Kidsee_Type( Get( slices, 946 ));
            rec.kidwe := Convert_Holkid_Type( Get( slices, 947 ));
            rec.kidhol := Convert_Holkid_Type( Get( slices, 948 ));
            rec.kidfar := Convert_Farkid_Type( Get( slices, 949 ));
            rec.kidrel := Convert_Kidrel_Type( Get( slices, 950 ));
            rec.ohch16 := Convert_Ohch16_Type( Get( slices, 951 ));
            rec.seekid := Convert_Seekid_Type( Get( slices, 952 ));
            rec.wekid := Convert_Holkid_Type( Get( slices, 953 ));
            rec.holkid := Convert_Holkid_Type( Get( slices, 954 ));
            rec.farkid := Convert_Farkid_Type( Get( slices, 955 ));
            rec.relkid := Convert_Kidrel_Type( Get( slices, 956 ));
            rec.ivva := Convert_Ivva_Type( Get( slices, 957 ));
            rec.ivvb := Convert_Ivdb_Type( Get( slices, 958 ));
            rec.ivvc := Convert_Ivfc_Type( Get( slices, 959 ));
            rec.ivvd := Convert_Ivdd_Type( Get( slices, 960 ));
            rec.ivve := Convert_Ivee_Type( Get( slices, 961 ));
            rec.f101 := Convert_F101_Type( Get( slices, 962 ));
            rec.f102 := Convert_F102_Type( Get( slices, 963 ));
            rec.f103 := Convert_F103_Type( Get( slices, 964 ));
            rec.f104 := Convert( slices, 965, ( -9, -8, -7 ) );
            rec.f105 := Convert_F105_Type( Get( slices, 966 ));
            rec.f106 := Convert_F106_Type( Get( slices, 967 ));
            rec.f116 := Convert_F116_Type( Get( slices, 968 ));
            rec.f118 := Convert_F118_Type( Get( slices, 969 ));
            rec.f119 := Convert_F119_Type( Get( slices, 970 ));
            rec.f121 := Convert_F121_Type( Get( slices, 971 ));
            rec.f122 := Convert_F122_Type( Get( slices, 972 ));
            rec.f124 := Convert_F124_Type( Get( slices, 973 ));
            rec.f125 := Convert_F125_Type( Get( slices, 974 ));
            rec.f126 := Convert_F126_Type( Get( slices, 975 ));
            rec.f127 := Convert_F127_Type( Get( slices, 976 ));
            rec.f128 := Convert_F128_Type( Get( slices, 977 ));
            rec.f132 := Convert_F132_Type( Get( slices, 978 ));
            rec.f135 := Convert_F135_Type( Get( slices, 979 ));
            rec.f136 := Convert_F136_Type( Get( slices, 980 ));
            rec.f137 := Convert_F137_Type( Get( slices, 981 ));
            rec.f138 := Convert_F138_Type( Get( slices, 982 ));
            rec.f139 := Convert_F139_Type( Get( slices, 983 ));
            rec.f140 := Convert_F140_Type( Get( slices, 984 ));
            rec.f141 := Convert_F141_Type( Get( slices, 985 ));
            rec.f142 := Convert_F142_Type( Get( slices, 986 ));
            rec.f143 := Convert_F143_Type( Get( slices, 987 ));
            rec.f151 := Convert_F151_Type( Get( slices, 988 ));
            rec.f152 := Convert_F152_Type( Get( slices, 989 ));
            rec.f153 := Convert_F153_Type( Get( slices, 990 ));
            rec.f154 := Convert_F154_Type( Get( slices, 991 ));
            rec.f155 := Convert_F155_Type( Get( slices, 992 ));
            rec.f156 := Convert_F156_Type( Get( slices, 993 ));
            rec.f157 := Convert_F157_Type( Get( slices, 994 ));
            rec.f158 := Convert_F158_Type( Get( slices, 995 ));
            rec.f159 := Convert_F159_Type( Get( slices, 996 ));
            rec.nf1 := Convert( slices, 997, ( -9, -8, -7, -2, -1 ) );
            rec.nipens := Convert_Cbagef_Type( Get( slices, 998 ));
            rec.niserps := Convert_Cbagef_Type( Get( slices, 999 ));
            rec.fisit := Convert_Fisit_Type( Get( slices, 1000 ));
            rec.fisitc := Convert( slices, 1001, ( -9, -8, -7, -2, -1 ) );
            rec.fisity := Convert_Fisity_Type( Get( slices, 1002 ));
            rec.fisitx := Convert( slices, 1003, ( -9, -8, -7, -2, -1 ) );
            rec.fiyrdia := Convert( slices, 1004, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.fiyrdb1 := Convert_Boolean_With_Missing( Get( slices, 1005 ));
            rec.fiyrdb2 := Convert_Boolean_With_Missing( Get( slices, 1006 ));
            rec.fiyrdb3 := Convert_Boolean_With_Missing( Get( slices, 1007 ));
            rec.fiyrdb4 := Convert_Boolean_With_Missing( Get( slices, 1008 ));
            rec.fiyrdb5 := Convert_Boolean_With_Missing( Get( slices, 1009 ));
            rec.fiyrdb6 := Convert_Boolean_With_Missing( Get( slices, 1010 ));
            rec.save := Convert_Aidpl1_Type( Get( slices, 1011 ));
            rec.saved := Convert( slices, 1012, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.savey1 := Convert_Savey1_Type( Get( slices, 1013 ));
            rec.savey2 := Convert_Savey1_Type( Get( slices, 1014 ));
            rec.savreg := Convert_Savreg_Type( Get( slices, 1015 ));
            rec.savlt := Convert_Savlt_Type( Get( slices, 1016 ));
            rec.pppen := Convert_Aidpl1_Type( Get( slices, 1017 ));
            rec.penb4 := Convert_Penb4_Type( Get( slices, 1018 ));
            rec.penb4y4 := Convert( slices, 1019, ( -9, -8, -7, -2, -1 ) );
            rec.penb4v := Convert( slices, 1020, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.penb4w := Convert( slices, 1021, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.penyr4 := Convert( slices, 1022, ( -9, -8, -7, -2, -1 ) );
            rec.penadd := Convert_Aidpl1_Type( Get( slices, 1023 ));
            rec.penadv := Convert( slices, 1024, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.penadw := Convert( slices, 1025, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.windf := Convert_Debt_Type( Get( slices, 1026 ));
            rec.windfa := Convert_Windfa_Type( Get( slices, 1027 ));
            rec.windfay := Convert( slices, 1028, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windfb := Convert_Windfb_Type( Get( slices, 1029 ));
            rec.windfby := Convert( slices, 1030, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windfc := Convert_Windfc_Type( Get( slices, 1031 ));
            rec.windfcy := Convert( slices, 1032, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windfd := Convert_Windfd_Type( Get( slices, 1033 ));
            rec.windfdy := Convert( slices, 1034, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windff := Convert_Windff_Type( Get( slices, 1035 ));
            rec.windffy := Convert( slices, 1036, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windfg := Convert_Windfg_Type( Get( slices, 1037 ));
            rec.windfgy := Convert( slices, 1038, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windfh := Convert_Nisjsa_Type( Get( slices, 1039 ));
            rec.windfhy := Convert( slices, 1040, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.xpmeal := Convert_Xpleis_Type( Get( slices, 1041 ));
            rec.xpleis := Convert_Xpleis_Type( Get( slices, 1042 ));
            rec.ftexhh := Convert_Aidpl1_Type( Get( slices, 1043 ));
            rec.ftexa := Convert_Ftexa_Type( Get( slices, 1044 ));
            rec.ftexa1 := Convert_Ftexa1_Type( Get( slices, 1045 ));
            rec.ftexa2 := Convert_Ftexa2_Type( Get( slices, 1046 ));
            rec.ftexa3 := Convert_Ftexa3_Type( Get( slices, 1047 ));
            rec.ftexa4 := Convert_Ftexa4_Type( Get( slices, 1048 ));
            rec.ftexa5 := Convert_Ftexa5_Type( Get( slices, 1049 ));
            rec.ftexa6 := Convert_Ftexa6_Type( Get( slices, 1050 ));
            rec.ftexav := Convert( slices, 1051, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ftexaw := Convert( slices, 1052, ( -9.0, -8.0, -7.0, -5.0, -3.0, -2.0, -1.0 ) );
            rec.ftexb := Convert_Ftexb_Type( Get( slices, 1053 ));
            rec.ftexb1 := Convert_Ftexa1_Type( Get( slices, 1054 ));
            rec.ftexb2 := Convert_Ftexa2_Type( Get( slices, 1055 ));
            rec.ftexb3 := Convert_Ftexa3_Type( Get( slices, 1056 ));
            rec.ftexb4 := Convert_Ftexa4_Type( Get( slices, 1057 ));
            rec.ftexb5 := Convert_Ftexa5_Type( Get( slices, 1058 ));
            rec.ftexb6 := Convert_Ftexa6_Type( Get( slices, 1059 ));
            rec.ftexbv := Convert( slices, 1060, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ftexbw := Convert( slices, 1061, ( -9.0, -8.0, -7.0, -5.0, -3.0, -2.0, -1.0 ) );
            rec.ftexc := Convert_Ftexc_Type( Get( slices, 1062 ));
            rec.ftexc1 := Convert_Ftexa1_Type( Get( slices, 1063 ));
            rec.ftexc2 := Convert_Ftexa2_Type( Get( slices, 1064 ));
            rec.ftexc3 := Convert_Ftexa3_Type( Get( slices, 1065 ));
            rec.ftexc4 := Convert_Ftexa4_Type( Get( slices, 1066 ));
            rec.ftexc5 := Convert_Ftexa5_Type( Get( slices, 1067 ));
            rec.ftexc6 := Convert_Ftexa6_Type( Get( slices, 1068 ));
            rec.ftexcv := Convert( slices, 1069, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ftexcw := Convert( slices, 1070, ( -9.0, -8.0, -7.0, -5.0, -3.0, -2.0, -1.0 ) );
            rec.spinhh := Convert_Hhch12_Type( Get( slices, 1071 ));
            rec.hubuys := Convert_Hubuys_Type( Get( slices, 1072 ));
            rec.hufrys := Convert_Hubuys_Type( Get( slices, 1073 ));
            rec.humops := Convert_Hubuys_Type( Get( slices, 1074 ));
            rec.huiron := Convert_Hubuys_Type( Get( slices, 1075 ));
            rec.hhch12 := Convert_Hhch12_Type( Get( slices, 1076 ));
            rec.husits := Convert_Husits_Type( Get( slices, 1077 ));
            rec.howlng := Convert( slices, 1078, ( -9, -8, -7, -3, -2, -1 ) );
            rec.caruse := Convert_Caruse_Type( Get( slices, 1079 ));
            rec.mobuse := Convert_Mobuse_Type( Get( slices, 1080 ));
            rec.neigh := Convert_Neigh_Type( Get( slices, 1081 ));
            rec.neigh1 := Convert_Neigh1_Type( Get( slices, 1082 ));
            rec.neigh2 := Convert_Neigh2_Type( Get( slices, 1083 ));
            rec.neigh3 := Convert_Neigh2_Type( Get( slices, 1084 ));
            rec.neigh4 := Convert_Neigh2_Type( Get( slices, 1085 ));
            rec.dfwld := Convert_Bscon_Type( Get( slices, 1086 ));
            rec.dfwld1 := Convert_Dfwld1_Type( Get( slices, 1087 ));
            rec.dfwld2 := Convert_Dfwld2_Type( Get( slices, 1088 ));
            rec.dfwld3 := Convert_Dfwld2_Type( Get( slices, 1089 ));
            rec.dfwld4 := Convert_Dfwld2_Type( Get( slices, 1090 ));
            rec.ivfa := Convert_Ivda_Type( Get( slices, 1091 ));
            rec.ivfb := Convert_Ivdb_Type( Get( slices, 1092 ));
            rec.ivfc := Convert_Ivfc_Type( Get( slices, 1093 ));
            rec.ivfd := Convert_Ivdd_Type( Get( slices, 1094 ));
            rec.ivfe := Convert_Ivee_Type( Get( slices, 1095 ));
            rec.ivfoih := Convert( slices, 1096, ( -9, -8 ) );
            rec.ivfoim := Convert( slices, 1097, ( -9, -8 ) );
            rec.ivsc := Convert_Ivsc_Type( Get( slices, 1098 ));
            rec.iv1 := Convert_Hhch12_Type( Get( slices, 1099 ));
            rec.iv2 := Convert_Iv2_Type( Get( slices, 1100 ));
            rec.iv4 := Convert_Iv4_Type( Get( slices, 1101 ));
            rec.iv5 := Convert_Iv5_Type( Get( slices, 1102 ));
            rec.iv6a := Convert_Hhch12_Type( Get( slices, 1103 ));
            rec.iv6b := Convert_Hhch12_Type( Get( slices, 1104 ));
            rec.iv6c := Convert_Hhch12_Type( Get( slices, 1105 ));
            rec.iv6d := Convert_Hhch12_Type( Get( slices, 1106 ));
            rec.iv6e := Convert_Hhch12_Type( Get( slices, 1107 ));
            rec.iv6f := Convert_Hhch12_Type( Get( slices, 1108 ));
            rec.iv7 := Convert( slices, 1109, ( -9, -8, -7 ) );
            rec.ghqa := Convert_Ghqa_Type( Get( slices, 1110 ));
            rec.ghqb := Convert_Ghqb_Type( Get( slices, 1111 ));
            rec.ghqc := Convert_Ghqc_Type( Get( slices, 1112 ));
            rec.ghqd := Convert_Ghqc_Type( Get( slices, 1113 ));
            rec.ghqe := Convert_Ghqe_Type( Get( slices, 1114 ));
            rec.ghqf := Convert_Ghqe_Type( Get( slices, 1115 ));
            rec.ghqg := Convert_Ghqc_Type( Get( slices, 1116 ));
            rec.ghqh := Convert_Ghqc_Type( Get( slices, 1117 ));
            rec.ghqi := Convert_Ghqb_Type( Get( slices, 1118 ));
            rec.ghqj := Convert_Ghqe_Type( Get( slices, 1119 ));
            rec.ghqk := Convert_Ghqe_Type( Get( slices, 1120 ));
            rec.ghql := Convert_Ghqc_Type( Get( slices, 1121 ));
            rec.opfama := Convert_Opfama_Type( Get( slices, 1122 ));
            rec.opfamb := Convert_Opfama_Type( Get( slices, 1123 ));
            rec.opfamc := Convert_Opfama_Type( Get( slices, 1124 ));
            rec.opfamd := Convert_Opfama_Type( Get( slices, 1125 ));
            rec.opfame := Convert_Opfama_Type( Get( slices, 1126 ));
            rec.opfamf := Convert_Opfama_Type( Get( slices, 1127 ));
            rec.opfamg := Convert_Opfama_Type( Get( slices, 1128 ));
            rec.opfamh := Convert_Opfama_Type( Get( slices, 1129 ));
            rec.opfami := Convert_Opfama_Type( Get( slices, 1130 ));
            rec.lfsat1 := Convert_Lfsat1_Type( Get( slices, 1131 ));
            rec.lfsat2 := Convert_Lfsat1_Type( Get( slices, 1132 ));
            rec.lfsat3 := Convert_Lfsat1_Type( Get( slices, 1133 ));
            rec.lfsat4 := Convert_Lfsat1_Type( Get( slices, 1134 ));
            rec.lfsat5 := Convert_Lfsat1_Type( Get( slices, 1135 ));
            rec.lfsat6 := Convert_Lfsat1_Type( Get( slices, 1136 ));
            rec.lfsat7 := Convert_Lfsat1_Type( Get( slices, 1137 ));
            rec.lfsat8 := Convert_Lfsat1_Type( Get( slices, 1138 ));
            rec.lfsato := Convert_Lfsat1_Type( Get( slices, 1139 ));
            rec.lfsatl := Convert( slices, 1140, ( -9, -8, -7, -2, -1 ) );
            rec.xsupa := Convert_Xsupa_Type( Get( slices, 1141 ));
            rec.xsupb := Convert_Xsupa_Type( Get( slices, 1142 ));
            rec.xsupc := Convert_Xsupa_Type( Get( slices, 1143 ));
            rec.ssupa := Convert_Ssupa_Type( Get( slices, 1144 ));
            rec.ssupb := Convert_Ssupa_Type( Get( slices, 1145 ));
            rec.ssupc := Convert_Ssupa_Type( Get( slices, 1146 ));
            rec.ssupd := Convert_Ssupa_Type( Get( slices, 1147 ));
            rec.ssupe := Convert_Ssupa_Type( Get( slices, 1148 ));
            rec.ssup1 := Convert_Netsx1_Type( Get( slices, 1149 ));
            rec.ssupr2r := Convert_Ssupr2r_Type( Get( slices, 1150 ));
            rec.prrs2i := Convert_Prrs2i_Type( Get( slices, 1151 ));
            rec.pripn := Convert( slices, 1152, ( -9, -8 ) );
            rec.prwhy := Convert_Prwhy_Type( Get( slices, 1153 ));
            rec.pplevr := Convert_Plever_Type( Get( slices, 1154 ));
            rec.presbgm := Convert_Presbgm_Type( Get( slices, 1155 ));
            rec.presby4 := Convert( slices, 1156, ( -9, -8, -7, -2, -1 ) );
            rec.presly := Convert_Presly_Type( Get( slices, 1157 ));
            rec.prfehq := Convert_Prfehq_Type( Get( slices, 1158 ));
            rec.prsehq := Convert_Prsehq_Type( Get( slices, 1159 ));
            rec.hldsbl := Convert_Bscon_Type( Get( slices, 1160 ));
            rec.prjbft := Convert_Prjbft_Type( Get( slices, 1161 ));
            rec.prjbbgm := Convert_Presbgm_Type( Get( slices, 1162 ));
            rec.prjbby4 := Convert( slices, 1163, ( -9, -8, -7, -2, -1 ) );
            rec.prjbly := Convert_Prjbly_Type( Get( slices, 1164 ));
            rec.prearn := Convert_Prearn_Type( Get( slices, 1165 ));
            rec.prf101 := Convert_Prf101_Type( Get( slices, 1166 ));
            rec.prf102 := Convert_Prf102_Type( Get( slices, 1167 ));
            rec.prf116 := Convert_Prf116_Type( Get( slices, 1168 ));
            rec.prf125 := Convert_Prf125_Type( Get( slices, 1169 ));
            rec.prf131 := Convert_Prf131_Type( Get( slices, 1170 ));
            rec.prf135 := Convert_Prf135_Type( Get( slices, 1171 ));
            rec.prf137 := Convert_Prf137_Type( Get( slices, 1172 ));
            rec.prf139 := Convert_Prf139_Type( Get( slices, 1173 ));
            rec.prf141 := Convert_Prf141_Type( Get( slices, 1174 ));
            rec.prf143 := Convert_Prf143_Type( Get( slices, 1175 ));
            rec.prfirn := Convert_Prfirn_Type( Get( slices, 1176 ));
            rec.prfitb := Convert_Prfitb_Type( Get( slices, 1177 ));
            rec.ivpa := Convert_Ivpa_Type( Get( slices, 1178 ));
            rec.ivpb := Convert_Ivpb_Type( Get( slices, 1179 ));
            rec.ivpc := Convert_Ivpc_Type( Get( slices, 1180 ));
            rec.ivpd := Convert_Ivpd_Type( Get( slices, 1181 ));
            rec.ivpe := Convert_Ivpe_Type( Get( slices, 1182 ));
            rec.telwhy := Convert_Telwhy_Type( Get( slices, 1183 ));
            rec.tlfiyrl := Convert( slices, 1184, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.tlfiyr := Convert( slices, 1185, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.pid := Convert( slices, 1186 );
            rec.iviolw := Convert_Iviolw_Type( Get( slices, 1187 ));
            rec.hhmem := Convert_Hhmem_Type( Get( slices, 1188 ));
            rec.newhy := Convert_Newhy_Type( Get( slices, 1189 ));
            rec.nemnjn := Convert_Nemnjn_Type( Get( slices, 1190 ));
            rec.neyrjn4 := Convert( slices, 1191, ( -9, -8, -7, -2, -1 ) );
            rec.ivfio := Convert_Ivfio_Type( Get( slices, 1192 ));
            rec.iodc := Convert_Iodc_Type( Get( slices, 1193 ));
            rec.memorig := Convert_Memorig_Type( Get( slices, 1194 ));
            rec.hgr2r := Convert_Hgr2r_Type( Get( slices, 1195 ));
            rec.hgsex := Convert_Hgsex_Type( Get( slices, 1196 ));
            rec.hgbm := Convert_Hgbm_Type( Get( slices, 1197 ));
            rec.hgby := Convert( slices, 1198, ( -2, -1 ) );
            rec.mastat := Convert_Mastat_Type( Get( slices, 1199 ));
            rec.hgspn := Convert( slices, 1200, ( -9, -8, -2, -1 ) );
            rec.hgemp := Convert_Hgemp_Type( Get( slices, 1201 ));
            rec.hgfno := Convert( slices, 1202, ( -9, -8, -2, -1 ) );
            rec.hgmno := Convert( slices, 1203, ( -9, -8, -2, -1 ) );
            rec.hgra := Convert( slices, 1204, ( -9, -8, -2, -1 ) );
            rec.age := Convert( slices, 1205, ( -9, -8 ) );
            rec.age12 := Convert( slices, 1206, ( -9, -8 ) );
            rec.butype := Convert_Butype_Type( Get( slices, 1207 ));
            rec.buno := Convert( slices, 1208, ( -9, -8 ) );
            rec.nchild := Convert( slices, 1209, ( -9, -8 ) );
            rec.hoh := Convert_Hoh_Type( Get( slices, 1210 ));
            rec.rach16 := Convert_Hhch12_Type( Get( slices, 1211 ));
            rec.sampst := Convert_Sampst_Type( Get( slices, 1212 ));
            rec.movest := Convert_Movest_Type( Get( slices, 1213 ));
            rec.qfx := Convert_Aidpl1_Type( Get( slices, 1214 ));
            rec.qfxc := Convert_Qfc_Type( Get( slices, 1215 ));
            rec.qfxd := Convert_Qfd_Type( Get( slices, 1216 ));
            rec.qfxe := Convert_Qfe_Type( Get( slices, 1217 ));
            rec.qfxf := Convert_Qff_Type( Get( slices, 1218 ));
            rec.qfxg := Convert_Qfg_Type( Get( slices, 1219 ));
            rec.qfxh := Convert_Qfh_Type( Get( slices, 1220 ));
            rec.qfxk := Convert_Qfk_Type( Get( slices, 1221 ));
            rec.qfxl := Convert_Qfl_Type( Get( slices, 1222 ));
            rec.qfxm := Convert_Qfm_Type( Get( slices, 1223 ));
            rec.qfxn := Convert_Qfn_Type( Get( slices, 1224 ));
            rec.qfxo := Convert_Qfxo_Type( Get( slices, 1225 ));
            rec.qfxp := Convert_Qfxp_Type( Get( slices, 1226 ));
            rec.qfxq := Convert_Qfxq_Type( Get( slices, 1227 ));
            rec.qfxr := Convert_Qfxr_Type( Get( slices, 1228 ));
            rec.qfedx := Convert_Aidpl1_Type( Get( slices, 1229 ));
            rec.qfedxa := Convert_Qfedd_Type( Get( slices, 1230 ));
            rec.nqfexa := Convert( slices, 1231, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxb := Convert_Qfede_Type( Get( slices, 1232 ));
            rec.nqfexb := Convert( slices, 1233, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxc := Convert_Qfedj_Type( Get( slices, 1234 ));
            rec.nqfexc := Convert( slices, 1235, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxg := Convert_Qfedm_Type( Get( slices, 1236 ));
            rec.nqfexg := Convert( slices, 1237, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxh := Convert_Qfedxh_Type( Get( slices, 1238 ));
            rec.nqfexh := Convert( slices, 1239, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxi := Convert_Qfedo_Type( Get( slices, 1240 ));
            rec.nqfexi := Convert( slices, 1241, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxj := Convert( slices, 1242, ( -9, -8, -7 ) );
            rec.nqfexj := Convert( slices, 1243, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxl := Convert_Qfedt_Type( Get( slices, 1244 ));
            rec.nqfexl := Convert( slices, 1245, ( -9, -8, -7, -2, -1 ) );
            rec.region := Convert_Region_Type( Get( slices, 1246 ));
            rec.hhsize := Convert( slices, 1247, ( -9, -8 ) );
            rec.hhtype := Convert_Hhtype_Type( Get( slices, 1248 ));
            rec.tenure := Convert_Tenure_Type( Get( slices, 1249 ));
            rec.qfedhi := Convert_Qfedhi_Type( Get( slices, 1250 ));
            rec.qfvoc := Convert_Qfvoc_Type( Get( slices, 1251 ));
            rec.qfachi := Convert_Qfachi_Type( Get( slices, 1252 ));
            rec.jbft := Convert_Jbft_Type( Get( slices, 1253 ));
            rec.payg := Convert( slices, 1254, ( -9.0, -8.0, -7.0 ) );
            rec.payn := Convert( slices, 1255, ( -9.0, -8.0, -7.0 ) );
            rec.paygu := Convert( slices, 1256, ( -9.0, -8.0, -7.0 ) );
            rec.paynu := Convert( slices, 1257, ( -9.0, -8.0, -7.0 ) );
            rec.paygty := Convert( slices, 1258, ( -9.0, -8.0, -7.0 ) );
            rec.paygly := Convert( slices, 1259, ( -9.0, -8.0, -7.0 ) );
            rec.paynty := Convert( slices, 1260, ( -9.0, -8.0, -7.0 ) );
            rec.paynly := Convert( slices, 1261, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jsprof := Convert( slices, 1262, ( -9.0, -8.0, -7.0 ) );
            rec.jsloss := Convert( slices, 1263, ( -9.0, -8.0, -7.0 ) );
            rec.jspayg := Convert( slices, 1264, ( -9.0, -8.0, -7.0 ) );
            rec.cjsten := Convert( slices, 1265, ( -9.0, -8.0, -7.0 ) );
            rec.cjswk9 := Convert( slices, 1266, ( -9.0, -8.0, -7.0 ) );
            rec.jlid := Convert_Jlid_Type( Get( slices, 1267 ));
            rec.jlyid := Convert_Jlyid_Type( Get( slices, 1268 ));
            rec.jtyid := Convert_Jtyid_Type( Get( slices, 1269 ));
            rec.jbseg := Convert_Jbseg_Type( Get( slices, 1270 ));
            rec.jbgold := Convert( slices, 1271, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbrgsc := Convert_Jbrgsc_Type( Get( slices, 1272 ));
            rec.jbisco := Convert( slices, 1273 );
            rec.jbcssm := Convert( slices, 1274, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbcssf := Convert( slices, 1275, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbhgs := Convert( slices, 1276, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbsec := Convert_Jbsec_Type( Get( slices, 1277 ));
            rec.njbwks := Convert( slices, 1278, ( -9.0, -8.0, -7.0 ) );
            rec.njuwks := Convert( slices, 1279, ( -9.0, -8.0, -7.0 ) );
            rec.njiwks := Convert( slices, 1280, ( -9.0, -8.0, -7.0 ) );
            rec.njbnew := Convert( slices, 1281, ( -9, -8, -7 ) );
            rec.njbsp := Convert( slices, 1282, ( -9, -8, -7 ) );
            rec.njusp := Convert( slices, 1283, ( -9, -8, -7 ) );
            rec.njisp := Convert( slices, 1284, ( -9, -8, -7 ) );
            rec.jbstatl := Convert( slices, 1285, ( -9, -8, -7, -2, -1 ) );
            rec.jbstatt := Convert( slices, 1286, ( -9, -8, -7, -2, -1 ) );
            rec.jbsocly := Convert( slices, 1287, ( -9, -8, -7 ) );
            rec.jlseg := Convert_Jlseg_Type( Get( slices, 1288 ));
            rec.jlgold := Convert( slices, 1289, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlrgsc := Convert_Jlrgsc_Type( Get( slices, 1290 ));
            rec.jlisco := Convert( slices, 1291 );
            rec.jlcssm := Convert( slices, 1292, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlcssf := Convert( slices, 1293, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlhgs := Convert( slices, 1294, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlsec := Convert_Jlsec_Type( Get( slices, 1295 ));
            rec.norgm := Convert( slices, 1296, ( -9, -8, -7 ) );
            rec.norga := Convert( slices, 1297, ( -9, -8, -7 ) );
            rec.vote := Convert_Vote_Type( Get( slices, 1298 ));
            rec.fiyrdic := Convert( slices, 1299, ( -9.0, -8.0, -7.0 ) );
            rec.fimnp := Convert( slices, 1300, ( -9.0, -8.0, -7.0 ) );
            rec.fimnb := Convert( slices, 1301, ( -9.0, -8.0, -7.0 ) );
            rec.fimni := Convert( slices, 1302, ( -9.0, -8.0, -7.0 ) );
            rec.fimnt := Convert( slices, 1303, ( -9.0, -8.0, -7.0 ) );
            rec.fimnl := Convert( slices, 1304, ( -9.0, -8.0, -7.0 ) );
            rec.fimnnl := Convert( slices, 1305, ( -9.0, -8.0, -7.0 ) );
            rec.fimn := Convert( slices, 1306, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrl := Convert( slices, 1307, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrnl := Convert( slices, 1308, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrp := Convert( slices, 1309, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrb := Convert( slices, 1310, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrt := Convert( slices, 1311, ( -9.0, -8.0, -7.0 ) );
            rec.fiyri := Convert( slices, 1312, ( -9.0, -8.0, -7.0 ) );
            rec.fiyr := Convert( slices, 1313, ( -9.0, -8.0, -7.0 ) );
            rec.fihhmn := Convert( slices, 1314, ( -9.0, -8.0, -7.0 ) );
            rec.hlghq1 := Convert( slices, 1315, ( -9, -8, -7 ) );
            rec.hlghq2 := Convert( slices, 1316, ( -9, -8, -7 ) );
            rec.spjb := Convert_Spjb_Type( Get( slices, 1317 ));
            rec.spsoc := Convert( slices, 1318, ( -9.0, -8.0 ) );
            rec.spjbhr := Convert( slices, 1319, ( -9, -8, -7 ) );
            rec.spjbot := Convert( slices, 1320, ( -9, -8, -7 ) );
            rec.sppayg := Convert( slices, 1321, ( -9.0, -8.0, -7.0 ) );
            rec.spjbyr := Convert( slices, 1322, ( -9, -8, -7 ) );
            rec.lrwght := Convert( slices, 1323 );
            rec.lewght := Convert( slices, 1324 );
            rec.xrwght := Convert( slices, 1325 );
            rec.xewght := Convert( slices, 1326 );
            rec.j2payi := Convert( slices, 1327, ( -9, -8, -7, -3, -2, -1 ) );
            rec.fiyrdii := Convert_Fiyrdii_Type( Get( slices, 1328 ));
            rec.prearni := Convert( slices, 1329, ( -9, -8, -2, -1 ) );
            rec.prfitbi := Convert_Prfitbi_Type( Get( slices, 1330 ));
            rec.paygui := Convert_Fimnbi_Type( Get( slices, 1331 ));
            rec.paynui := Convert_Fimnbi_Type( Get( slices, 1332 ));
            rec.paygti := Convert_Fimnbi_Type( Get( slices, 1333 ));
            rec.paygli := Convert_Fimnbi_Type( Get( slices, 1334 ));
            rec.paynti := Convert_Fimnbi_Type( Get( slices, 1335 ));
            rec.paynli := Convert_Fimnbi_Type( Get( slices, 1336 ));
            rec.jsprofi := Convert_Fimnbi_Type( Get( slices, 1337 ));
            rec.jspaygi := Convert_Fimnbi_Type( Get( slices, 1338 ));
            rec.fimnpi := Convert_Fimnbi_Type( Get( slices, 1339 ));
            rec.fimnbi := Convert_Fimnbi_Type( Get( slices, 1340 ));
            rec.fimnii := Convert_Fimnii_Type( Get( slices, 1341 ));
            rec.fimnti := Convert_Fimnii_Type( Get( slices, 1342 ));
            rec.fimnnli := Convert_Fimnbi_Type( Get( slices, 1343 ));
            rec.fimnli := Convert_Fimnbi_Type( Get( slices, 1344 ));
            rec.fimnthi := Convert_Fimnii_Type( Get( slices, 1345 ));
            rec.fiyrli := Convert_Fimnbi_Type( Get( slices, 1346 ));
            rec.fiyrnli := Convert_Fimnbi_Type( Get( slices, 1347 ));
            rec.fiyrpi := Convert_Fimnii_Type( Get( slices, 1348 ));
            rec.fiyrbi := Convert_Fimnbi_Type( Get( slices, 1349 ));
            rec.fiyrti := Convert_Fimnbi_Type( Get( slices, 1350 ));
            rec.fiyrii := Convert_Fimnbi_Type( Get( slices, 1351 ));
            rec.fiyeari := Convert_Fimnbi_Type( Get( slices, 1352 ));
            rec.sppaygi := Convert_Prfitbi_Type( Get( slices, 1353 ));
            rec.fihhmni := Convert_Fihhmni_Type( Get( slices, 1354 ));
            rec.mrjend := Convert( slices, 1355, ( -9, -8, -7, -3, -2, -1 ) );
            rec.mrjsoc := Convert( slices, 1356, ( -9, -8, -7, -3 ) );
            rec.mrjsic := Convert( slices, 1357, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjsic9 := Convert( slices, 1358, ( -9, -8, -2, -1 ) );
            rec.mrjsemp := Convert_Mrjsemp_Type( Get( slices, 1359 ));
            rec.mrjboss := Convert_Mrjboss_Type( Get( slices, 1360 ));
            rec.mrjmngr := Convert_Mrjmngr_Type( Get( slices, 1361 ));
            rec.mrjsize := Convert_Mrjsize_Type( Get( slices, 1362 ));
            rec.mrjseg := Convert_Maseg_Type( Get( slices, 1363 ));
            rec.mrjgold := Convert( slices, 1364, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjrgsc := Convert_Margsc_Type( Get( slices, 1365 ));
            rec.mrjisco := Convert( slices, 1366 );
            rec.mrjcssm := Convert( slices, 1367, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjcssf := Convert( slices, 1368, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjhgs := Convert( slices, 1369, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjsec := Convert_J1sec_Type( Get( slices, 1370 ));
            rec.paseg := Convert_Maseg_Type( Get( slices, 1371 ));
            rec.pagold := Convert( slices, 1372, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.pargsc := Convert_Margsc_Type( Get( slices, 1373 ));
            rec.paisco := Convert( slices, 1374 );
            rec.pacssm := Convert( slices, 1375, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.pacssf := Convert( slices, 1376, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.pahgs := Convert( slices, 1377, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.pasec := Convert_J1sec_Type( Get( slices, 1378 ));
            rec.maseg := Convert_Maseg_Type( Get( slices, 1379 ));
            rec.magold := Convert( slices, 1380, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.margsc := Convert_Margsc_Type( Get( slices, 1381 ));
            rec.maisco := Convert( slices, 1382 );
            rec.macssm := Convert( slices, 1383, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.macssf := Convert( slices, 1384, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mahgs := Convert( slices, 1385, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.masec := Convert_J1sec_Type( Get( slices, 1386 ));
            rec.j1seg := Convert_J1seg_Type( Get( slices, 1387 ));
            rec.j1gold := Convert( slices, 1388, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.j1rgsc := Convert_J1rgsc_Type( Get( slices, 1389 ));
            rec.j1isco := Convert( slices, 1390 );
            rec.j1cssm := Convert( slices, 1391, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.j1cssf := Convert( slices, 1392, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.j1hgs := Convert( slices, 1393, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.j1sec := Convert_J1sec_Type( Get( slices, 1394 ));
            rec.fimnsel := Convert_Fimnsel_Type( Get( slices, 1395 ));
            rec.xrwtuk1 := Convert( slices, 1396 );
            rec.xewtuk1 := Convert( slices, 1397 );
            rec.xrwtuk2 := Convert( slices, 1398 );
            rec.xewtuk2 := Convert( slices, 1399 );
            rec.lrwtsw1 := Convert( slices, 1400 );
            rec.lewtsw1 := Convert( slices, 1401 );
            rec.lrwtsw2 := Convert( slices, 1402 );
            rec.lewtsw2 := Convert( slices, 1403 );
            rec.lrwtuk1 := Convert( slices, 1404 );
            rec.lewtuk1 := Convert( slices, 1405 );
            rec.lrwtuk2 := Convert( slices, 1406 );
            rec.lewtuk2 := Convert( slices, 1407 );
            rec.sppid := Convert( slices, 1408 );
            rec.fpid := Convert( slices, 1409 );
            rec.mpid := Convert( slices, 1410 );
            rec.distmov := Convert( slices, 1411, ( -9.0, -8.0, -7.0 ) );
            rec.iv5aa := Convert_Iv5aa_Type( Get( slices, 1412 ));
            rec.iv5ab := Convert_Iv5ab_Type( Get( slices, 1413 ));
            rec.iv5ac := Convert_Iv5ac_Type( Get( slices, 1414 ));
            rec.region2 := Convert_Region2_Type( Get( slices, 1415 ));
            rec.isced := Convert_Isced_Type( Get( slices, 1416 ));
            rec.casmin := Convert_Casmin_Type( Get( slices, 1417 ));
            rec.jbiscon := Convert( slices, 1418, ( -9, -8, -7, -2, -1 ) );
            rec.jliscon := Convert( slices, 1419, ( -9, -8, -7, -2, -1 ) );
            rec.mrjiscn := Convert( slices, 1420, ( -9, -8, -7, -2, -1 ) );
            rec.maiscon := Convert( slices, 1421, ( -9, -8, -7, -2, -1 ) );
            rec.paiscon := Convert( slices, 1422, ( -9, -8, -7, -2, -1 ) );
            rec.j1iscon := Convert( slices, 1423, ( -9, -8, -7, -2, -1 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Indresp_component ).start_pos = 0 ) then
               index.pointers( Indresp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Indresp_component ).counter := index.pointers( Indresp_component ).counter + 1;
            Put_Index( index_map, index );
            Indresp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Indresp_IO.Close( bin_file );
   end Create_Indresp_Wave_M;




   procedure Create_Indsamp_Wave_M( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Indsamp_IO.File_Type;
      rec         : Indsamp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Indsamp_IO.Create (bin_file, Indsamp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.pid := Convert( slices, 3 );
            rec.iviolw := Convert_Iviolw_Type( Get( slices, 4 ));
            rec.ivstat1 := Convert_Ivstat1_Type( Get( slices, 5 ));
            rec.ivelig := Convert_Ivelig_Type( Get( slices, 6 ));
            rec.hhmem := Convert_Hhmem_Type( Get( slices, 7 ));
            rec.newhy := Convert_Newhy_Type( Get( slices, 8 ));
            rec.nemnjn := Convert_Nemnjn_Type( Get( slices, 9 ));
            rec.neyrjn4 := Convert( slices, 10, ( -9, -8, -7, -2, -1 ) );
            rec.lvwhy := Convert_Lvwhy_Type( Get( slices, 11 ));
            rec.lvmn := Convert_Lvmn_Type( Get( slices, 12 ));
            rec.lvyr4 := Convert( slices, 13, ( -9, -8, -7, -2, -1 ) );
            rec.lvloc := Convert_Lvloc_Type( Get( slices, 14 ));
            rec.ivfio := Convert_Ivfio_Type( Get( slices, 15 ));
            rec.ivrref := Convert_Ivrref_Type( Get( slices, 16 ));
            rec.ivireis := Convert_Ivireis_Type( Get( slices, 17 ));
            rec.finloc := Convert_Finloc_Type( Get( slices, 18 ));
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 19 ));
            rec.memorig := Convert_Memorig_Type( Get( slices, 20 ));
            rec.sampst := Convert_Sampst_Type( Get( slices, 21 ));
            rec.movest := Convert_Movest_Type( Get( slices, 22 ));
            rec.lewght := Convert( slices, 23, ( -9.0, -8.0, -1.0 ) );
            rec.lrwght := Convert( slices, 24, ( -9.0, -8.0, -1.0 ) );
            rec.lrwtsw1 := Convert( slices, 25, ( -9.0, -8.0, -1.0 ) );
            rec.lewtsw1 := Convert( slices, 26, ( -9.0, -8.0, -1.0 ) );
            rec.lrwtsw2 := Convert( slices, 27, ( -9.0, -8.0, -1.0 ) );
            rec.lewtsw2 := Convert( slices, 28, ( -9.0, -8.0, -1.0 ) );
            rec.lrwtuk1 := Convert( slices, 29, ( -9.0, -8.0, -1.0 ) );
            rec.lewtuk1 := Convert( slices, 30, ( -9.0, -8.0, -1.0 ) );
            rec.lrwtuk2 := Convert( slices, 31, ( -9.0, -8.0, -1.0 ) );
            rec.lewtuk2 := Convert( slices, 32, ( -9.0, -8.0, -1.0 ) );
            rec.distmov := Convert( slices, 33, ( -9.0, -8.0 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Indsamp_component ).start_pos = 0 ) then
               index.pointers( Indsamp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Indsamp_component ).counter := index.pointers( Indsamp_component ).counter + 1;
            Put_Index( index_map, index );
            Indsamp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Indsamp_IO.Close( bin_file );
   end Create_Indsamp_Wave_M;




   procedure Create_Jobhist_Wave_M( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Jobhist_IO.File_Type;
      rec         : Jobhist_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Jobhist_IO.Create (bin_file, Jobhist_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.jspno := Convert( slices, 3 );
            rec.jhstat := Convert_Jhstat_Type( Get( slices, 4 ));
            rec.jhbgd := Convert( slices, 5, ( -9, -8, -7, -2, -1 ) );
            rec.jhbgm := Convert_Jbbgm1_Type( Get( slices, 6 ));
            rec.jhbgy4 := Convert( slices, 7, ( -9, -8, -7, -2, -1 ) );
            rec.jhsoc := Convert( slices, 8, ( -9, -8, -2, -1 ) );
            rec.jhsoc00 := Convert( slices, 9, ( -9, -8, -2, -1 ) );
            rec.jhsemp := Convert_Jhsemp_Type( Get( slices, 10 ));
            rec.jhboss := Convert_Bscon_Type( Get( slices, 11 ));
            rec.jhsect := Convert_Jhsect_Type( Get( slices, 12 ));
            rec.jhmngr := Convert_Jhmngr_Type( Get( slices, 13 ));
            rec.jhpldf := Convert_Jhpldf_Type( Get( slices, 14 ));
            rec.jhsic92 := Convert( slices, 15, ( -9, -8, -7 ) );
            rec.jhsize := Convert_Jhsize_Type( Get( slices, 16 ));
            rec.jhpayl := Convert( slices, 17, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhpylw := Convert( slices, 18, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.jhpylg := Convert_Jhpylg_Type( Get( slices, 19 ));
            rec.jhstpy := Convert_Jhstpy_Type( Get( slices, 20 ));
            rec.jblky := Convert_Jblky_Type( Get( slices, 21 ));
            rec.jhendd := Convert( slices, 22, ( -9, -8, -7, -2, -1 ) );
            rec.jhendm := Convert_Jbbgm1_Type( Get( slices, 23 ));
            rec.jhendy4 := Convert( slices, 24, ( -9, -8, -7, -2, -1 ) );
            rec.jha9ly := Convert_Jha9ly_Type( Get( slices, 25 ));
            rec.jhseg := Convert_Jhseg_Type( Get( slices, 26 ));
            rec.jhgold := Convert( slices, 27, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhrgsc := Convert_Jhrgsc_Type( Get( slices, 28 ));
            rec.jhisco := Convert( slices, 29, ( -9, -8 ) );
            rec.jhcssm := Convert( slices, 30, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhcssf := Convert( slices, 31, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhhgs := Convert( slices, 32, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhsec := Convert_Jhsec_Type( Get( slices, 33 ));
            rec.jhspw := Convert( slices, 34, ( -9.0, -8.0 ) );
            rec.jhgpay := Convert( slices, 35, ( -9.0, -8.0, -7.0 ) );
            rec.jhnpay := Convert( slices, 36, ( -9.0, -8.0, -7.0, -1.0 ) );
            rec.jhgpayi := Convert_Jhgpayi_Type( Get( slices, 37 ));
            rec.jhnpayi := Convert_Jhgpayi_Type( Get( slices, 38 ));
            rec.pid := Convert( slices, 39 );
            rec.jhiscon := Convert( slices, 40, ( -9, -8, -7, -2, -1 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Jobhist_component ).start_pos = 0 ) then
               index.pointers( Jobhist_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Jobhist_component ).counter := index.pointers( Jobhist_component ).counter + 1;
            Put_Index( index_map, index );
            Jobhist_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Jobhist_IO.Close( bin_file );
   end Create_Jobhist_Wave_M;




   procedure Create_Youth_Wave_M( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Youth_IO.File_Type;
      rec         : Youth_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Youth_IO.Create (bin_file, Youth_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.pno := Convert( slices, 1 );
            rec.ypdobm := Convert_Ypdobm_Type( Get( slices, 2 ));
            rec.ypdoby4 := Convert( slices, 3, ( -9, -8, -7, -2, -1 ) );
            rec.ypsex := Convert_Ypsex_Type( Get( slices, 4 ));
            rec.ytvhrs := Convert_Ytvhrs_Type( Get( slices, 5 ));
            rec.ytvstp := Convert_Ytvlmt_Type( Get( slices, 6 ));
            rec.ypacta := Convert_Ypacta_Type( Get( slices, 7 ));
            rec.ypactb := Convert_Ypacta_Type( Get( slices, 8 ));
            rec.ypactc := Convert_Ypacta_Type( Get( slices, 9 ));
            rec.ypactd := Convert_Ypacta_Type( Get( slices, 10 ));
            rec.ypacte := Convert_Ypacta_Type( Get( slices, 11 ));
            rec.ypactm := Convert_Ypacta_Type( Get( slices, 12 ));
            rec.ypactn := Convert_Ypacta_Type( Get( slices, 13 ));
            rec.ypactl := Convert_Ypacta_Type( Get( slices, 14 ));
            rec.ypchor := Convert_Ypchor_Type( Get( slices, 15 ));
            rec.ypcomp := Convert_Ypcomp_Type( Get( slices, 16 ));
            rec.yppchw := Convert_Yppcg_Type( Get( slices, 17 ));
            rec.yppcg := Convert_Yppcg_Type( Get( slices, 18 ));
            rec.yppcnt := Convert_Yppcg_Type( Get( slices, 19 ));
            rec.ypmobu := Convert_Ypbeau_Type( Get( slices, 20 ));
            rec.yppals := Convert_Yppalo_Type( Get( slices, 21 ));
            rec.yppalo := Convert_Yppalo_Type( Get( slices, 22 ));
            rec.yplate := Convert_Yplate_Type( Get( slices, 23 ));
            rec.ypargm := Convert_Ypargm_Type( Get( slices, 24 ));
            rec.ypargf := Convert_Ypargf_Type( Get( slices, 25 ));
            rec.yptlkm := Convert_Ypargm_Type( Get( slices, 26 ));
            rec.yptlkf := Convert_Ypargf_Type( Get( slices, 27 ));
            rec.ypnpal := Convert( slices, 28, ( -9, -8, -2, -1 ) );
            rec.ypfght := Convert_Ypfght_Type( Get( slices, 29 ));
            rec.ypeatn := Convert_Ypeatn_Type( Get( slices, 30 ));
            rec.ypsmev := Convert_Ypbeau_Type( Get( slices, 31 ));
            rec.ypsmof := Convert_Ypsmof_Type( Get( slices, 32 ));
            rec.ypsmlw := Convert( slices, 33, ( -9, -8, -2, -1 ) );
            rec.ypdgfr := Convert_Ypdgfr_Type( Get( slices, 34 ));
            rec.ypesta := Convert_Ypesta_Type( Get( slices, 35 ));
            rec.ypesti := Convert_Ypesti_Type( Get( slices, 36 ));
            rec.ypestb := Convert_Ypesta_Type( Get( slices, 37 ));
            rec.ypestj := Convert_Ypesti_Type( Get( slices, 38 ));
            rec.ypestc := Convert_Ypesta_Type( Get( slices, 39 ));
            rec.ypestk := Convert_Ypesti_Type( Get( slices, 40 ));
            rec.ypeste := Convert_Ypesta_Type( Get( slices, 41 ));
            rec.ypestf := Convert_Ypesta_Type( Get( slices, 42 ));
            rec.yptcha := Convert_Ypesta_Type( Get( slices, 43 ));
            rec.yptchb := Convert_Ypesta_Type( Get( slices, 44 ));
            rec.yphsw := Convert_Yphap_Type( Get( slices, 45 ));
            rec.yphap := Convert_Yphap_Type( Get( slices, 46 ));
            rec.yphfm := Convert_Yphap_Type( Get( slices, 47 ));
            rec.yphfr := Convert_Yphap_Type( Get( slices, 48 ));
            rec.yphsc := Convert_Yphap_Type( Get( slices, 49 ));
            rec.yphlf := Convert_Yphap_Type( Get( slices, 50 ));
            rec.ypvte6 := Convert_Ypvte6_Type( Get( slices, 51 ));
            rec.ypvte3 := Convert_Ypvte3_Type( Get( slices, 52 ));
            rec.ypvt11 := Convert_Ypvt11_Type( Get( slices, 53 ));
            rec.yptrun := Convert_Yptrun_Type( Get( slices, 54 ));
            rec.ypbull := Convert_Ypbull_Type( Get( slices, 55 ));
            rec.ypopsc := Convert_Ypopsc_Type( Get( slices, 56 ));
            rec.yplvsc := Convert_Yplvsc_Type( Get( slices, 57 ));
            rec.ypacvs := Convert_Scach_Type( Get( slices, 58 ));
            rec.ypsoc := Convert( slices, 59, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.ypwklw := Convert_Ypbeau_Type( Get( slices, 60 ));
            rec.ypsoc1 := Convert( slices, 61, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.ypsoc2 := Convert( slices, 62, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.ypwhrs := Convert( slices, 63, ( -9, -8, -2, -1 ) );
            rec.yppay := Convert( slices, 64, ( -9, -8, -2, -1 ) );
            rec.ypwkm := Convert_Ypwkm_Type( Get( slices, 65 ));
            rec.ypwkt := Convert_Ypwkt_Type( Get( slices, 66 ));
            rec.ypwkw := Convert_Ypwkw_Type( Get( slices, 67 ));
            rec.ypwkth := Convert_Ypwkth_Type( Get( slices, 68 ));
            rec.ypwkf := Convert_Ypwkf_Type( Get( slices, 69 ));
            rec.ypwksa := Convert_Ypwksa_Type( Get( slices, 70 ));
            rec.ypwksu := Convert_Ypwksu_Type( Get( slices, 71 ));
            rec.yplvhm := Convert( slices, 72, ( -9, -8, -2, -1 ) );
            rec.yp2uni := Convert_Yp2uni_Type( Get( slices, 73 ));
            rec.ypnuna := Convert_Ypnuna_Type( Get( slices, 74 ));
            rec.ypnunb := Convert_Ypnunb_Type( Get( slices, 75 ));
            rec.ypjbqa := Convert_Ypjbqa_Type( Get( slices, 76 ));
            rec.ypjbqd := Convert_Ypjbqa_Type( Get( slices, 77 ));
            rec.ypjbqb := Convert_Ypjbqa_Type( Get( slices, 78 ));
            rec.ypjbqf := Convert_Ypjbqf_Type( Get( slices, 79 ));
            rec.ypjbqg := Convert_Ypjbqf_Type( Get( slices, 80 ));
            rec.ypjbqh := Convert_Ypjbqf_Type( Get( slices, 81 ));
            rec.ypfuta := Convert_Ypfuta_Type( Get( slices, 82 ));
            rec.ypfutb := Convert_Ypfutb_Type( Get( slices, 83 ));
            rec.ypwght := Convert( slices, 84 );
            rec.hid := Convert( slices, 85 );
            rec.pid := Convert( slices, 86 );
            rec.fnspno := Convert( slices, 87, ( -9, -8 ) );
            rec.fnspid := Convert( slices, 88, ( -9.0, -8.0 ) );
            rec.mnspno := Convert( slices, 89, ( -9, -8 ) );
            rec.mnspid := Convert( slices, 90, ( -9.0, -8.0 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Youth_component ).start_pos = 0 ) then
               index.pointers( Youth_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Youth_component ).counter := index.pointers( Youth_component ).counter + 1;
            Put_Index( index_map, index );
            Youth_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Youth_IO.Close( bin_file );
   end Create_Youth_Wave_M;




   procedure Create_Egoalt_Wave_N( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Egoalt_IO.File_Type;
      rec         : Egoalt_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Egoalt_IO.Create (bin_file, Egoalt_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.opno := Convert( slices, 3, (  1 .. 0 => -9 ) );
            rec.rel := Convert_Rel_Type( Get( slices, 4 ));
            rec.sex := Convert_Sex_Type( Get( slices, 5 ));
            rec.osex := Convert_Hgsex_Type( Get( slices, 6 ));
            rec.lwstat := Convert_Lwstat_Type( Get( slices, 7 ));
            rec.nwstat := Convert_Nwstat_Type( Get( slices, 8 ));
            rec.pid := Convert( slices, 9 );
            rec.opid := Convert( slices, 10 );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Egoalt_component ).start_pos = 0 ) then
               index.pointers( Egoalt_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Egoalt_component ).counter := index.pointers( Egoalt_component ).counter + 1;
            Put_Index( index_map, index );
            Egoalt_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Egoalt_IO.Close( bin_file );
   end Create_Egoalt_Wave_N;




   procedure Create_Hhresp_Wave_N( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Hhresp_IO.File_Type;
      rec         : Hhresp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Hhresp_IO.Create (bin_file, Hhresp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.hhdoi := Convert( slices, 2, ( -9, -8, -7 ) );
            rec.hhmoi := Convert_Doim_Type( Get( slices, 3 ));
            rec.hhyoi4 := Convert( slices, 4, ( -9, -8, -7, -2, -1 ) );
            rec.hhsoih := Convert( slices, 5, ( -9, -8, -7 ) );
            rec.hhsoim := Convert( slices, 6, ( -9, -8, -7 ) );
            rec.hstype := Convert_Hstype_Type( Get( slices, 7 ));
            rec.hsrins := Convert_Cjsck2_Type( Get( slices, 8 ));
            rec.hsroom := Convert( slices, 9, ( -9, -8, -7, -2, -1 ) );
            rec.hsownd := Convert_Hsownd_Type( Get( slices, 10 ));
            rec.hsowr1 := Convert( slices, 11, ( -9, -8, -7, -2, -1 ) );
            rec.hsowr2 := Convert( slices, 12, ( -9, -8, -7, -2, -1 ) );
            rec.hsval := Convert( slices, 13, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.mghave := Convert_Mghave_Type( Get( slices, 14 ));
            rec.hsowrp := Convert_Bscon_Type( Get( slices, 15 ));
            rec.mgynot := Convert_Mgynot_Type( Get( slices, 16 ));
            rec.hscost := Convert( slices, 17, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.hsyr04 := Convert( slices, 18, ( -9, -8, -7, -2, -1 ) );
            rec.mgyr04 := Convert( slices, 19, ( -9, -8, -7, -2, -1 ) );
            rec.mgly := Convert_Bscon_Type( Get( slices, 20 ));
            rec.hsivlw := Convert( slices, 21, ( -9, -8, -7, -2, -1 ) );
            rec.mgold := Convert( slices, 22, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.mglife := Convert( slices, 23, ( -9, -8, -7, -2, -1 ) );
            rec.mgtype := Convert_Mgtype_Type( Get( slices, 24 ));
            rec.mgxtra := Convert_Bscon_Type( Get( slices, 25 ));
            rec.mgnew := Convert( slices, 26, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.mgxty1 := Convert_Mgxty1_Type( Get( slices, 27 ));
            rec.mgxty2 := Convert_Mgxty2_Type( Get( slices, 28 ));
            rec.mgxty3 := Convert_Mgxty3_Type( Get( slices, 29 ));
            rec.mgxty4 := Convert_Mgxty4_Type( Get( slices, 30 ));
            rec.mgxty5 := Convert_Mgxty5_Type( Get( slices, 31 ));
            rec.xpmg := Convert( slices, 32, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.xpmg1 := Convert_Bscon_Type( Get( slices, 33 ));
            rec.xpmg2 := Convert_Bscon_Type( Get( slices, 34 ));
            rec.xpmg3 := Convert_Bscon_Type( Get( slices, 35 ));
            rec.xpmg4 := Convert_Bscon_Type( Get( slices, 36 ));
            rec.hsjb := Convert_Bscon_Type( Get( slices, 37 ));
            rec.rentp1 := Convert( slices, 38, ( -9, -8, -7, -2, -1 ) );
            rec.rentp2 := Convert( slices, 39, ( -9, -8, -7, -2, -1 ) );
            rec.rentll := Convert_Rentll_Type( Get( slices, 40 ));
            rec.rentf := Convert_Rentf_Type( Get( slices, 41 ));
            rec.rent := Convert( slices, 42, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.rentw := Convert( slices, 43, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.rent1 := Convert_Rent1_Type( Get( slices, 44 ));
            rec.rent7 := Convert_Rent7_Type( Get( slices, 45 ));
            rec.rent2 := Convert_Rent1_Type( Get( slices, 46 ));
            rec.rent3 := Convert_Bscon_Type( Get( slices, 47 ));
            rec.rent4 := Convert_Bscon_Type( Get( slices, 48 ));
            rec.rent5 := Convert_Bscon_Type( Get( slices, 49 ));
            rec.rent8 := Convert_Coh1mr_Type( Get( slices, 50 ));
            rec.rent6 := Convert_Bscon_Type( Get( slices, 51 ));
            rec.renthb := Convert_Renthb_Type( Get( slices, 52 ));
            rec.rentg := Convert( slices, 53, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.rentgw := Convert( slices, 54, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.xphsdf := Convert( slices, 55, ( -9, -8, -7, -2, -1 ) );
            rec.xphsd1 := Convert_Bscon_Type( Get( slices, 56 ));
            rec.xphsd2 := Convert_Bscon_Type( Get( slices, 57 ));
            rec.xphsdb := Convert_Bscon_Type( Get( slices, 58 ));
            rec.hskch := Convert_Boolean_With_Missing( Get( slices, 59 ));
            rec.hskchs := Convert_Boolean_With_Missing( Get( slices, 60 ));
            rec.hsbth := Convert_Boolean_With_Missing( Get( slices, 61 ));
            rec.hsbths := Convert_Boolean_With_Missing( Get( slices, 62 ));
            rec.hstlt := Convert_Boolean_With_Missing( Get( slices, 63 ));
            rec.hstlts := Convert_Boolean_With_Missing( Get( slices, 64 ));
            rec.hsgdn := Convert_Boolean_With_Missing( Get( slices, 65 ));
            rec.hsgdns := Convert_Boolean_With_Missing( Get( slices, 66 ));
            rec.xpgasy := Convert( slices, 67, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.xplecy := Convert( slices, 68, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.xpoily := Convert( slices, 69, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.xpsfly := Convert( slices, 70, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.heatch := Convert_Bscon_Type( Get( slices, 71 ));
            rec.heatyp := Convert_Heatyp_Type( Get( slices, 72 ));
            rec.hsprbg := Convert_Boolean_With_Missing( Get( slices, 73 ));
            rec.hsprbh := Convert_Boolean_With_Missing( Get( slices, 74 ));
            rec.hsprbi := Convert_Boolean_With_Missing( Get( slices, 75 ));
            rec.hsprbj := Convert_Boolean_With_Missing( Get( slices, 76 ));
            rec.hsprbk := Convert_Boolean_With_Missing( Get( slices, 77 ));
            rec.hsprbl := Convert_Boolean_With_Missing( Get( slices, 78 ));
            rec.hsprbm := Convert_Boolean_With_Missing( Get( slices, 79 ));
            rec.hsprbn := Convert_Boolean_With_Missing( Get( slices, 80 ));
            rec.hsprbo := Convert_Boolean_With_Missing( Get( slices, 81 ));
            rec.hsprbp := Convert_Boolean_With_Missing( Get( slices, 82 ));
            rec.hsprbq := Convert_Boolean_With_Missing( Get( slices, 83 ));
            rec.hsctax := Convert_Hsctax_Type( Get( slices, 84 ));
            rec.hs2ownd := Convert_Bscon_Type( Get( slices, 85 ));
            rec.hs2valo := Convert( slices, 86, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.hs2vala := Convert_Hldsbl1_Type( Get( slices, 87 ));
            rec.hs2valb := Convert_Hldsbl1_Type( Get( slices, 88 ));
            rec.hs2valc := Convert_Hldsbl1_Type( Get( slices, 89 ));
            rec.hs2vald := Convert_Hldsbl1_Type( Get( slices, 90 ));
            rec.mgtot := Convert( slices, 91, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.cdhave := Convert_Bscon_Type( Get( slices, 92 ));
            rec.cdbght := Convert_Bscon_Type( Get( slices, 93 ));
            rec.cd1use := Convert_Cd1new_Type( Get( slices, 94 ));
            rec.cd1new := Convert( slices, 95, ( -9, -8, -7, -2, -1 ) );
            rec.cd1cst := Convert( slices, 96, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd2use := Convert_Cd1new_Type( Get( slices, 97 ));
            rec.cd2new := Convert( slices, 98, ( -9, -8, -7, -2, -1 ) );
            rec.cd2cst := Convert( slices, 99, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd10use := Convert_Cd10new_Type( Get( slices, 100 ));
            rec.cd10new := Convert( slices, 101, ( -9, -8, -7, -2, -1 ) );
            rec.cd10cst := Convert( slices, 102, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd11use := Convert_Cd10new_Type( Get( slices, 103 ));
            rec.cd11new := Convert( slices, 104, ( -9, -8, -7, -2, -1 ) );
            rec.cd11cst := Convert( slices, 105, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd3use := Convert_Cd1new_Type( Get( slices, 106 ));
            rec.cd3new := Convert( slices, 107, ( -9, -8, -7, -2, -1 ) );
            rec.cd3cst := Convert( slices, 108, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd4use := Convert_Cd1new_Type( Get( slices, 109 ));
            rec.cd4new := Convert( slices, 110, ( -9, -8, -7, -2, -1 ) );
            rec.cd4cst := Convert( slices, 111, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd5use := Convert_Cd1new_Type( Get( slices, 112 ));
            rec.cd5new := Convert( slices, 113, ( -9, -8, -7, -2, -1 ) );
            rec.cd5cst := Convert( slices, 114, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd6use := Convert_Cd1new_Type( Get( slices, 115 ));
            rec.cd6new := Convert( slices, 116, ( -9, -8, -7, -2, -1 ) );
            rec.cd6cst := Convert( slices, 117, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd7use := Convert_Cd1new_Type( Get( slices, 118 ));
            rec.cd7new := Convert( slices, 119, ( -9, -8, -7, -2, -1 ) );
            rec.cd7cst := Convert( slices, 120, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd8use := Convert_Cd1new_Type( Get( slices, 121 ));
            rec.cd8new := Convert( slices, 122, ( -9, -8, -7, -2, -1 ) );
            rec.cd8cst := Convert( slices, 123, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd9use := Convert_Cd1new_Type( Get( slices, 124 ));
            rec.cd9new := Convert( slices, 125, ( -9, -8, -7, -2, -1 ) );
            rec.cd9cst := Convert( slices, 126, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd12use := Convert_Cd10new_Type( Get( slices, 127 ));
            rec.cd12new := Convert( slices, 128, ( -9, -8, -7, -2, -1 ) );
            rec.cd12cst := Convert( slices, 129, ( -9, -8, -7, -3, -2, -1 ) );
            rec.pcnet := Convert_Boolean_With_Missing( Get( slices, 130 ));
            rec.xphp := Convert_Bscon_Type( Get( slices, 131 ));
            rec.xphpdf := Convert_Xphpdf_Type( Get( slices, 132 ));
            rec.hscana := Convert_Boolean_With_Missing( Get( slices, 133 ));
            rec.hscnta := Convert_Boolean_With_Missing( Get( slices, 134 ));
            rec.hscanb := Convert_Boolean_With_Missing( Get( slices, 135 ));
            rec.hscntb := Convert_Boolean_With_Missing( Get( slices, 136 ));
            rec.hscanc := Convert_Boolean_With_Missing( Get( slices, 137 ));
            rec.hscntc := Convert_Boolean_With_Missing( Get( slices, 138 ));
            rec.hscand := Convert_Boolean_With_Missing( Get( slices, 139 ));
            rec.hscntd := Convert_Boolean_With_Missing( Get( slices, 140 ));
            rec.hscane := Convert_Boolean_With_Missing( Get( slices, 141 ));
            rec.hscnte := Convert_Boolean_With_Missing( Get( slices, 142 ));
            rec.hscanf := Convert_Boolean_With_Missing( Get( slices, 143 ));
            rec.hscntf := Convert_Boolean_With_Missing( Get( slices, 144 ));
            rec.hscanh := Convert_Edblyr3_Type( Get( slices, 145 ));
            rec.hscnth := Convert_Edblyr3_Type( Get( slices, 146 ));
            rec.hscank := Convert_Edblyr3_Type( Get( slices, 147 ));
            rec.hscntk := Convert_Edblyr3_Type( Get( slices, 148 ));
            rec.hscanl := Convert_Edblyr3_Type( Get( slices, 149 ));
            rec.hscntl := Convert_Edblyr3_Type( Get( slices, 150 ));
            rec.xpfood := Convert( slices, 151, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ncars := Convert_Ncars_Type( Get( slices, 152 ));
            rec.carown := Convert_Carown_Type( Get( slices, 153 ));
            rec.carval := Convert( slices, 154, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ivh1 := Convert( slices, 155, ( -9, -8, -7, -1 ) );
            rec.ivh2 := Convert( slices, 156, ( -9, -8, -7 ) );
            rec.ivh3 := Convert( slices, 157, ( -9, -8, -7 ) );
            rec.hhfoih := Convert( slices, 158, ( -9, -8, -7 ) );
            rec.hhfoim := Convert( slices, 159, ( -9, -8, -7 ) );
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 160 ));
            rec.hhorig := Convert_Hhorig_Type( Get( slices, 161 ));
            rec.hhdc := Convert_Hhdc_Type( Get( slices, 162 ));
            rec.xhwght := Convert( slices, 163, ( -9.0, -8.0 ) );
            rec.hhsize := Convert( slices, 164, ( -9, -8 ) );
            rec.hhtype := Convert_Hhtype_Type( Get( slices, 165 ));
            rec.region := Convert_Region_Type( Get( slices, 166 ));
            rec.nch02 := Convert( slices, 167, ( -9, -8 ) );
            rec.nch34 := Convert( slices, 168, ( -9, -8 ) );
            rec.nch511 := Convert( slices, 169, ( -9, -8 ) );
            rec.nch1215 := Convert( slices, 170, ( -9, -8 ) );
            rec.nch1618 := Convert( slices, 171, ( -9, -8 ) );
            rec.nkids := Convert( slices, 172, ( -9, -8 ) );
            rec.nwed := Convert( slices, 173, ( -9, -8 ) );
            rec.npens := Convert( slices, 174, ( -9, -8 ) );
            rec.na75pl := Convert( slices, 175, ( -9, -8 ) );
            rec.agechy := Convert( slices, 176, ( -9, -8 ) );
            rec.ncouple := Convert( slices, 177, ( -9, -8 ) );
            rec.nonepar := Convert( slices, 178, ( -9, -8 ) );
            rec.nemp := Convert( slices, 179, ( -9, -8 ) );
            rec.nwage := Convert( slices, 180, ( -9, -8 ) );
            rec.tenure := Convert_Tenure_Type( Get( slices, 181 ));
            rec.xphsn := Convert( slices, 182, ( -9.0, -8.0, -7.0 ) );
            rec.xphsg := Convert( slices, 183, ( -9.0, -8.0, -7.0 ) );
            rec.fieqfcb := Convert( slices, 184, ( -9.0, -8.0 ) );
            rec.fieqfca := Convert( slices, 185, ( -9.0, -8.0 ) );
            rec.fihhyr := Convert( slices, 186, ( -9.0, -8.0, -7.0 ) );
            rec.fihhmn := Convert( slices, 187, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyl := Convert( slices, 188, ( -9.0, -8.0, -7.0 ) );
            rec.fihhynl := Convert( slices, 189, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyp := Convert( slices, 190, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyb := Convert( slices, 191, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyt := Convert( slices, 192, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyi := Convert( slices, 193, ( -9.0, -8.0, -7.0 ) );
            rec.fihhml := Convert( slices, 194, (  1 .. 0 => -9.0 ) );
            rec.fihhmnl := Convert( slices, 195, (  1 .. 0 => -9.0 ) );
            rec.fihhmp := Convert( slices, 196, (  1 .. 0 => -9.0 ) );
            rec.fihhmb := Convert( slices, 197, (  1 .. 0 => -9.0 ) );
            rec.fihhmt := Convert( slices, 198, (  1 .. 0 => -9.0 ) );
            rec.fihhmi := Convert( slices, 199, (  1 .. 0 => -9.0 ) );
            rec.hhmove := Convert_Hhmove_Type( Get( slices, 200 ));
            rec.mgnewi := Convert( slices, 201, ( -9, -8, -7, -2, -1 ) );
            rec.xpmgi := Convert( slices, 202, ( -9, -8, -7, -2, -1 ) );
            rec.hsvali := Convert( slices, 203, ( -9, -8, -7, -2, -1 ) );
            rec.renti := Convert( slices, 204, ( -9, -8, -7, -4, -3, -2, -1 ) );
            rec.rentgi := Convert( slices, 205, ( -9, -8, -7, -2, -1 ) );
            rec.xphsni := Convert_Jhgpayi_Type( Get( slices, 206 ));
            rec.xphsgi := Convert_Jhgpayi_Type( Get( slices, 207 ));
            rec.fihhmni := Convert_Fihhmni_Type( Get( slices, 208 ));
            rec.fihhmli := Convert_Fihhmbi_Type( Get( slices, 209 ));
            rec.fihmnli := Convert_Fihhmbi_Type( Get( slices, 210 ));
            rec.fihhmpi := Convert_Fihhmbi_Type( Get( slices, 211 ));
            rec.fihhmbi := Convert_Fihhmbi_Type( Get( slices, 212 ));
            rec.fihhmti := Convert_Fihhmbi_Type( Get( slices, 213 ));
            rec.fihhmii := Convert_Fihhmbi_Type( Get( slices, 214 ));
            rec.fihhyri := Convert_Fihhmbi_Type( Get( slices, 215 ));
            rec.fihhyli := Convert_Fihhmbi_Type( Get( slices, 216 ));
            rec.fihhyni := Convert_Fihhmbi_Type( Get( slices, 217 ));
            rec.fihhypi := Convert_Fihhmbi_Type( Get( slices, 218 ));
            rec.fihhybi := Convert_Fihhmbi_Type( Get( slices, 219 ));
            rec.fihhyti := Convert_Fihhmbi_Type( Get( slices, 220 ));
            rec.fihhyii := Convert_Fihhmbi_Type( Get( slices, 221 ));
            rec.fihhsel := Convert_Fihhsel_Type( Get( slices, 222 ));
            rec.xhwtuk1 := Convert( slices, 223, ( -9.0, -8.0 ) );
            rec.xhwtuk2 := Convert( slices, 224, ( -9.0, -8.0 ) );
            rec.region2 := Convert_Region2_Type( Get( slices, 225 ));
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Hhresp_component ).start_pos = 0 ) then
               index.pointers( Hhresp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Hhresp_component ).counter := index.pointers( Hhresp_component ).counter + 1;
            Put_Index( index_map, index );
            Hhresp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Hhresp_IO.Close( bin_file );
   end Create_Hhresp_Wave_N;




   procedure Create_Hhsamp_Wave_N( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Hhsamp_IO.File_Type;
      rec         : Hhsamp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Hhsamp_IO.Create (bin_file, Hhsamp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.fid := Convert( slices, 2 );
            rec.ivnadd := Convert( slices, 3, ( -9.0, -8.0 ) );
            rec.ivia := Convert_Ivia_Type( Get( slices, 4 ));
            rec.iviam := Convert_Iviam_Type( Get( slices, 5 ));
--             rec.ivid := Convert( slices, 6 );
            rec.ivlnc := Convert( slices, 7, ( -9, -1 ) );
            rec.ivtnc := Convert( slices, 8, ( -9, -8, -1 ) );
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 9 ));
            rec.ivosmrh := Convert( slices, 10, ( -9, -8, -1 ) );
            rec.ivnsmrh := Convert( slices, 11, ( -9, -8, -1 ) );
            rec.ivrrefh := Convert_Ivrrefh_Type( Get( slices, 12 ));
            rec.ivconv := Convert_Ivconv_Type( Get( slices, 13 ));
            rec.ivreis := Convert_Ivreis_Type( Get( slices, 14 ));
            rec.ivisst := Convert_Ivisst_Type( Get( slices, 15 ));
            rec.ivovt := Convert_Ivavt_Type( Get( slices, 16 ));
            rec.ivavt := Convert_Ivavt_Type( Get( slices, 17 ));
            rec.hhdc := Convert_Hhdc_Type( Get( slices, 18 ));
            rec.hhorig := Convert_Hhorig_Type( Get( slices, 19 ));
            rec.xhwght := Convert( slices, 20, ( -9.0, -8.0, -1.0 ) );
            rec.region := Convert_Region_Type( Get( slices, 21 ));
            rec.hhmove := Convert_Hhmove_Type( Get( slices, 22 ));
            rec.ahid := Convert( slices, 23 );
            rec.xhwtuk1 := Convert( slices, 24, ( -9.0, -8.0, -1.0 ) );
            rec.xhwtuk2 := Convert( slices, 25, ( -9.0, -8.0, -1.0 ) );
            rec.strata := Convert( slices, 26, ( -9, -8, -1 ) );
            rec.psu := Convert( slices, 27, ( -9, -8, -1 ) );
            rec.region2 := Convert_Region2_Type( Get( slices, 28 ));
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Hhsamp_component ).start_pos = 0 ) then
               index.pointers( Hhsamp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Hhsamp_component ).counter := index.pointers( Hhsamp_component ).counter + 1;
            Put_Index( index_map, index );
            Hhsamp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Hhsamp_IO.Close( bin_file );
   end Create_Hhsamp_Wave_N;




   procedure Create_Income_Wave_N( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Income_IO.File_Type;
      rec         : Income_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Income_IO.Create (bin_file, Income_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.ficode := Convert_Ficode_Type( Get( slices, 3 ));
            rec.frall := Convert_Frall_Type( Get( slices, 4 ));
            rec.fr01 := Convert_Cd1own_Type( Get( slices, 5 ));
            rec.fr02 := Convert_Cd1own_Type( Get( slices, 6 ));
            rec.fr03 := Convert_Cd1own_Type( Get( slices, 7 ));
            rec.fr04 := Convert( slices, 8, ( -9, -8, -2, -1 ) );
            rec.fr05 := Convert_Cd1own_Type( Get( slices, 9 ));
            rec.fr06 := Convert_Cd1own_Type( Get( slices, 10 ));
            rec.fr07 := Convert_Cd1own_Type( Get( slices, 11 ));
            rec.fr08 := Convert_Cd1own_Type( Get( slices, 12 ));
            rec.fr09 := Convert_Cd1own_Type( Get( slices, 13 ));
            rec.fr10 := Convert_Cd1own_Type( Get( slices, 14 ));
            rec.fr11 := Convert_Cd1own_Type( Get( slices, 15 ));
            rec.fr12 := Convert_Cd1own_Type( Get( slices, 16 ));
            rec.fr13 := Convert_Cd1own_Type( Get( slices, 17 ));
            rec.fr14 := Convert_Cd1own_Type( Get( slices, 18 ));
            rec.fr15 := Convert_Cd1own_Type( Get( slices, 19 ));
            rec.fr16 := Convert_Cd1own_Type( Get( slices, 20 ));
            rec.fr17 := Convert_Cd1own_Type( Get( slices, 21 ));
            rec.fr18 := Convert_Fr18_Type( Get( slices, 22 ));
            rec.fr19 := Convert_Fr18_Type( Get( slices, 23 ));
            rec.fr20 := Convert_Fr18_Type( Get( slices, 24 ));
            rec.frnow := Convert_Frnow_Type( Get( slices, 25 ));
            rec.frval := Convert( slices, 26, ( -9.0, -8.0, -3.0, -2.0, -1.0 ) );
            rec.frw := Convert( slices, 27, ( -9.0, -8.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.frjt := Convert_Frjt_Type( Get( slices, 28 ));
            rec.frjtpn := Convert( slices, 29, ( -9, -8, -2, -1 ) );
            rec.fim09l := Convert( slices, 30, ( -9.0, -8.0, -3.0 ) );
            rec.fim10l := Convert( slices, 31, ( -9.0, -8.0, -3.0 ) );
            rec.fim11l := Convert( slices, 32, ( -9.0, -8.0, -3.0 ) );
            rec.fim12l := Convert( slices, 33, ( -9.0, -8.0, -3.0 ) );
            rec.fim01t := Convert( slices, 34, ( -9.0, -8.0, -3.0 ) );
            rec.fim02t := Convert( slices, 35, ( -9.0, -8.0, -3.0 ) );
            rec.fim03t := Convert( slices, 36, ( -9.0, -8.0, -3.0 ) );
            rec.fim04t := Convert( slices, 37, ( -9.0, -8.0, -3.0 ) );
            rec.fim05t := Convert( slices, 38, ( -9.0, -8.0, -3.0 ) );
            rec.fim06t := Convert( slices, 39, ( -9.0, -8.0, -3.0 ) );
            rec.fim07t := Convert( slices, 40, ( -9.0, -8.0, -3.0 ) );
            rec.fim08t := Convert( slices, 41, ( -9.0, -8.0, -3.0 ) );
            rec.fim09t := Convert( slices, 42, ( -9.0, -8.0, -3.0 ) );
            rec.fim10t := Convert( slices, 43, ( -9.0, -8.0, -3.0 ) );
            rec.fim11t := Convert( slices, 44, ( -9.0, -8.0, -3.0 ) );
            rec.fim12t := Convert( slices, 45, ( -9.0, -8.0, -3.0 ) );
            rec.fim01n := Convert( slices, 46, ( -9.0, -8.0, -3.0 ) );
            rec.fim02n := Convert( slices, 47, ( -9.0, -3.0 ) );
            rec.fim03n := Convert( slices, 48, ( -9.0, -3.0 ) );
            rec.fim04n := Convert( slices, 49, ( -9.0, -3.0 ) );
            rec.frjtvf := Convert_Frjtvf_Type( Get( slices, 50 ));
            rec.frvali := Convert( slices, 51, ( -9, -8, -3, -2, -1 ) );
            rec.pid := Convert( slices, 52 );
            rec.fiseq := Convert( slices, 53 );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Income_component ).start_pos = 0 ) then
               index.pointers( Income_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Income_component ).counter := index.pointers( Income_component ).counter + 1;
            Put_Index( index_map, index );
            Income_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Income_IO.Close( bin_file );
   end Create_Income_Wave_N;




   procedure Create_Indall_Wave_N( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Indall_IO.File_Type;
      rec         : Indall_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Indall_IO.Create (bin_file, Indall_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.hgr2r := Convert_Hgr2r_Type( Get( slices, 3 ));
            rec.hgsex := Convert_Hgsex_Type( Get( slices, 4 ));
            rec.hgbm := Convert_Hgbm_Type( Get( slices, 5 ));
            rec.hgby := Convert( slices, 6, ( -9, -8, -2, -1 ) );
            rec.mastat := Convert_Mastat_Type( Get( slices, 7 ));
            rec.hgspn := Convert( slices, 8, ( -9, -8, -2, -1 ) );
            rec.hgemp := Convert_Hgemp_Type( Get( slices, 9 ));
            rec.hgfno := Convert( slices, 10, ( -9, -8, -2, -1 ) );
            rec.hgmno := Convert( slices, 11, ( -9, -8, -2, -1 ) );
            rec.hgra := Convert( slices, 12, ( -9, -8, -2, -1 ) );
            rec.pid := Convert( slices, 13 );
            rec.iviolw := Convert_Iviolw_Type( Get( slices, 14 ));
            rec.ivstat1 := Convert_Ivstat1_Type( Get( slices, 15 ));
            rec.ivelig := Convert_Ivelig_Type( Get( slices, 16 ));
            rec.hhmem := Convert_Hhmem_Type( Get( slices, 17 ));
            rec.newhy := Convert_Newhy_Type( Get( slices, 18 ));
            rec.nemnjn := Convert_Nemnjn_Type( Get( slices, 19 ));
            rec.neyrjn4 := Convert( slices, 20, ( -9, -8, -7, -2, -1 ) );
            rec.ivfio := Convert_Ivfio_Type( Get( slices, 21 ));
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 22 ));
            rec.iodc := Convert_Iodc_Type( Get( slices, 23 ));
            rec.memorig := Convert_Memorig_Type( Get( slices, 24 ));
            rec.age := Convert( slices, 25, ( -9, -8, -2, -1 ) );
            rec.age12 := Convert( slices, 26, ( -9, -8, -2, -1 ) );
            rec.butype := Convert_Butype_Type( Get( slices, 27 ));
            rec.buno := Convert( slices, 28, ( -9, -8 ) );
            rec.nchild := Convert( slices, 29, ( -9, -8 ) );
            rec.depchl := Convert_Depchl_Type( Get( slices, 30 ));
            rec.hoh := Convert_Hoh_Type( Get( slices, 31 ));
            rec.rach16 := Convert_Hhch12_Type( Get( slices, 32 ));
            rec.agei := Convert_Agei_Type( Get( slices, 33 ));
            rec.lrwght := Convert( slices, 34, ( -9.0, -8.0 ) );
            rec.lewght := Convert( slices, 35, ( -9.0, -8.0 ) );
            rec.xrwght := Convert( slices, 36, ( -9.0, -8.0 ) );
            rec.xewght := Convert( slices, 37, ( -9.0, -8.0 ) );
            rec.movest := Convert_Movest_Type( Get( slices, 38 ));
            rec.sampst := Convert_Sampst_Type( Get( slices, 39 ));
            rec.xrwtuk1 := Convert( slices, 40, ( -9.0, -8.0 ) );
            rec.xewtuk1 := Convert( slices, 41, ( -9.0, -8.0 ) );
            rec.xrwtuk2 := Convert( slices, 42, ( -9.0, -8.0 ) );
            rec.xewtuk2 := Convert( slices, 43, ( -9.0, -8.0 ) );
            rec.lrwtsw1 := Convert( slices, 44, ( -9.0, -8.0 ) );
            rec.lewtsw1 := Convert( slices, 45, ( -9.0, -8.0 ) );
            rec.lrwtsw2 := Convert( slices, 46, ( -9.0, -8.0 ) );
            rec.lewtsw2 := Convert( slices, 47, ( -9.0, -8.0 ) );
            rec.lrwtuk1 := Convert( slices, 48, ( -9.0, -8.0 ) );
            rec.lewtuk1 := Convert( slices, 49, ( -9.0, -8.0 ) );
            rec.lrwtuk2 := Convert( slices, 50, ( -9.0, -8.0 ) );
            rec.lewtuk2 := Convert( slices, 51, ( -9.0, -8.0 ) );
            rec.sppid := Convert( slices, 52 );
            rec.fpid := Convert( slices, 53 );
            rec.mpid := Convert( slices, 54 );
            rec.rapid := Convert( slices, 55 );
            rec.distmov := Convert( slices, 56, ( -9.0, -8.0 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Indall_component ).start_pos = 0 ) then
               index.pointers( Indall_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Indall_component ).counter := index.pointers( Indall_component ).counter + 1;
            Put_Index( index_map, index );
            Indall_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Indall_IO.Close( bin_file );
   end Create_Indall_Wave_N;




   procedure Create_Indresp_Wave_N( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Indresp_IO.File_Type;
      rec         : Indresp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Indresp_IO.Create (bin_file, Indresp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.doid := Convert( slices, 3, ( -9, -7 ) );
            rec.doim := Convert_Doim_Type( Get( slices, 4 ));
            rec.doiy4 := Convert( slices, 5, ( -9, -8, -7, -2, -1 ) );
            rec.ivlyr := Convert( slices, 6, ( -9, -8, -7 ) );
            rec.ivstat2 := Convert_Ivstat2_Type( Get( slices, 7 ));
            rec.ivsoih := Convert( slices, 8, ( -9, -8 ) );
            rec.ivsoim := Convert( slices, 9, ( -9, -8 ) );
            rec.lknbrd := Convert_Aidpl1_Type( Get( slices, 10 ));
            rec.lkmove := Convert_Lkmove_Type( Get( slices, 11 ));
            rec.lkmovy := Convert_Lkmovy_Type( Get( slices, 12 ));
            rec.xpmove := Convert( slices, 13, ( -9, -8, -7, -2, -1 ) );
            rec.plnew := Convert( slices, 14, ( -9, -8, -7, -2, -1 ) );
            rec.plnowm := Convert_Jbbgm1_Type( Get( slices, 15 ));
            rec.plnowy4 := Convert( slices, 16, ( -9, -8, -7, -2, -1 ) );
            rec.movjb := Convert_Aidpl1_Type( Get( slices, 17 ));
            rec.movjba := Convert_Movjba_Type( Get( slices, 18 ));
            rec.movjbb := Convert_Movjba_Type( Get( slices, 19 ));
            rec.movjbc := Convert_Movjba_Type( Get( slices, 20 ));
            rec.movjbd := Convert_Movjba_Type( Get( slices, 21 ));
            rec.movjbe := Convert_Movjba_Type( Get( slices, 22 ));
            rec.movjbf := Convert_Movjba_Type( Get( slices, 23 ));
            rec.movjbg := Convert_Movjba_Type( Get( slices, 24 ));
            rec.movjbh := Convert_Movjba_Type( Get( slices, 25 ));
            rec.movjbi := Convert_Movjba_Type( Get( slices, 26 ));
            rec.movy1 := Convert_Movy1_Type( Get( slices, 27 ));
            rec.movy2 := Convert_Movy2_Type( Get( slices, 28 ));
            rec.dobm := Convert_Cjsem_Type( Get( slices, 29 ));
            rec.doby := Convert( slices, 30, ( -9, -8, -7, -2, -1 ) );
            rec.sex := Convert_Sex_Type( Get( slices, 31 ));
            rec.mlstat := Convert_Mlstat_Type( Get( slices, 32 ));
            rec.mlchng := Convert_Bscon_Type( Get( slices, 33 ));
            rec.mlchm := Convert_Mlchm_Type( Get( slices, 34 ));
            rec.mlchy4 := Convert( slices, 35, ( -9, -8, -7, -2, -1 ) );
            rec.jbstat := Convert_Jbstat_Type( Get( slices, 36 ));
            rec.edlyr := Convert_Aidpl1_Type( Get( slices, 37 ));
            rec.edtype1 := Convert_Edtype1_Type( Get( slices, 38 ));
            rec.edblyr1 := Convert_Boolean_With_Missing( Get( slices, 39 ));
            rec.edbgm1 := Convert_Edbgm1_Type( Get( slices, 40 ));
            rec.edbgy1 := Convert( slices, 41, ( -9, -8, -7, -2, -1 ) );
            rec.edenm1 := Convert_Edbgm1_Type( Get( slices, 42 ));
            rec.edeny1 := Convert( slices, 43, ( -9, -8, -7, -2, -1 ) );
            rec.edenne1 := Convert_Edenne1_Type( Get( slices, 44 ));
            rec.edfeea1 := Convert_Yes_Or_Missing_Type( Get( slices, 45 ));
            rec.edfeeb1 := Convert_Yes_Or_Missing_Type( Get( slices, 46 ));
            rec.edfeec1 := Convert_Yes_Or_Missing_Type( Get( slices, 47 ));
            rec.edfeed1 := Convert_Yes_Or_Missing_Type( Get( slices, 48 ));
            rec.edfeee1 := Convert_Yes_Or_Missing_Type( Get( slices, 49 ));
            rec.edfeef1 := Convert_Yes_Or_Missing_Type( Get( slices, 50 ));
            rec.edfeeg1 := Convert_Yes_Or_Missing_Type( Get( slices, 51 ));
            rec.edqual1 := Convert_Edqual1_Type( Get( slices, 52 ));
            rec.edqnn1 := Convert( slices, 53, ( -9, -8, -7, -2, -1 ) );
            rec.edqla1 := Convert_Yes_Or_Missing_Type( Get( slices, 54 ));
            rec.edqlb1 := Convert_Yes_Or_Missing_Type( Get( slices, 55 ));
            rec.edqlc1 := Convert_Yes_Or_Missing_Type( Get( slices, 56 ));
            rec.edqld1 := Convert_Yes_Or_Missing_Type( Get( slices, 57 ));
            rec.edqle1 := Convert_Yes_Or_Missing_Type( Get( slices, 58 ));
            rec.edqlf1 := Convert_Yes_Or_Missing_Type( Get( slices, 59 ));
            rec.edqlg1 := Convert_Yes_Or_Missing_Type( Get( slices, 60 ));
            rec.edqlh1 := Convert_Yes_Or_Missing_Type( Get( slices, 61 ));
            rec.edqli1 := Convert_Yes_Or_Missing_Type( Get( slices, 62 ));
            rec.edqlj1 := Convert( slices, 63, ( -9, -8, -7 ) );
            rec.edqlan1 := Convert( slices, 64, ( -9, -8, -7, -2, -1 ) );
            rec.edqlbn1 := Convert( slices, 65, ( -9, -8, -7, -2, -1 ) );
            rec.edqlcn1 := Convert( slices, 66, ( -9, -8, -7, -2, -1 ) );
            rec.edqldn1 := Convert( slices, 67, ( -9, -8, -7, -2, -1 ) );
            rec.edqlen1 := Convert( slices, 68, ( -9, -8, -7, -2, -1 ) );
            rec.edqlfn1 := Convert( slices, 69, ( -9, -8, -7, -2, -1 ) );
            rec.edqlgn1 := Convert( slices, 70, ( -9, -8, -7, -2, -1 ) );
            rec.edqlhn1 := Convert( slices, 71, ( -9, -8, -7, -2, -1 ) );
            rec.edqlin1 := Convert( slices, 72, ( -9, -8, -7, -2, -1 ) );
            rec.edqljn1 := Convert( slices, 73, ( -9, -8, -7, -2, -1 ) );
            rec.edoqln1 := Convert( slices, 74, ( -9, -8, -7, -2, -1 ) );
            rec.edoql1 := Convert_Edoql1_Type( Get( slices, 75 ));
            rec.edmore1 := Convert_Boolean_With_Missing( Get( slices, 76 ));
            rec.edtype2 := Convert_Edtype1_Type( Get( slices, 77 ));
            rec.edblyr2 := Convert_Boolean_With_Missing( Get( slices, 78 ));
            rec.edbgm2 := Convert_Edbgm1_Type( Get( slices, 79 ));
            rec.edbgy2 := Convert( slices, 80, ( -9, -8, -7, -2, -1 ) );
            rec.edenm2 := Convert_Edbgm1_Type( Get( slices, 81 ));
            rec.edeny2 := Convert( slices, 82, ( -9, -8, -7, -2, -1 ) );
            rec.edenne2 := Convert_Edenne2_Type( Get( slices, 83 ));
            rec.edfeea2 := Convert_Yes_Or_Missing_Type( Get( slices, 84 ));
            rec.edfeeb2 := Convert_Yes_Or_Missing_Type( Get( slices, 85 ));
            rec.edfeec2 := Convert_Yes_Or_Missing_Type( Get( slices, 86 ));
            rec.edfeed2 := Convert_Yes_Or_Missing_Type( Get( slices, 87 ));
            rec.edfeee2 := Convert_Yes_Or_Missing_Type( Get( slices, 88 ));
            rec.edfeef2 := Convert_Yes_Or_Missing_Type( Get( slices, 89 ));
            rec.edfeeg2 := Convert_Yes_Or_Missing_Type( Get( slices, 90 ));
            rec.edqual2 := Convert_Edqual1_Type( Get( slices, 91 ));
            rec.edqnn2 := Convert( slices, 92, ( -9, -8, -7, -2, -1 ) );
            rec.edqla2 := Convert_Yes_Or_Missing_Type( Get( slices, 93 ));
            rec.edqlb2 := Convert_Yes_Or_Missing_Type( Get( slices, 94 ));
            rec.edqlc2 := Convert_Yes_Or_Missing_Type( Get( slices, 95 ));
            rec.edqld2 := Convert_Yes_Or_Missing_Type( Get( slices, 96 ));
            rec.edqle2 := Convert_Yes_Or_Missing_Type( Get( slices, 97 ));
            rec.edqlf2 := Convert_Yes_Or_Missing_Type( Get( slices, 98 ));
            rec.edqlg2 := Convert_Yes_Or_Missing_Type( Get( slices, 99 ));
            rec.edqlh2 := Convert_Yes_Or_Missing_Type( Get( slices, 100 ));
            rec.edqli2 := Convert_Yes_Or_Missing_Type( Get( slices, 101 ));
            rec.edqlj2 := Convert( slices, 102, ( -9, -8, -7 ) );
            rec.edqlan2 := Convert( slices, 103, ( -9, -8, -7, -2, -1 ) );
            rec.edqlbn2 := Convert( slices, 104, ( -9, -8, -7, -2, -1 ) );
            rec.edqlcn2 := Convert( slices, 105, ( -9, -8, -7, -2, -1 ) );
            rec.edqldn2 := Convert( slices, 106, ( -9, -8, -7, -2, -1 ) );
            rec.edqlen2 := Convert( slices, 107, ( -9, -8, -7, -2, -1 ) );
            rec.edqlfn2 := Convert( slices, 108, ( -9, -8, -7, -2, -1 ) );
            rec.edqlgn2 := Convert( slices, 109, ( -9, -8, -7, -2, -1 ) );
            rec.edqlhn2 := Convert( slices, 110, ( -9, -8, -7, -2, -1 ) );
            rec.edqlin2 := Convert( slices, 111, ( -9, -8, -7, -2, -1 ) );
            rec.edqljn2 := Convert( slices, 112, ( -9, -8, -7, -2, -1 ) );
            rec.edoqln2 := Convert( slices, 113, ( -9, -8, -7, -2, -1 ) );
            rec.edoql2 := Convert_Edoql1_Type( Get( slices, 114 ));
            rec.edmore2 := Convert_Boolean_With_Missing( Get( slices, 115 ));
            rec.edtype3 := Convert_Edtype3_Type( Get( slices, 116 ));
            rec.edblyr3 := Convert_Edblyr3_Type( Get( slices, 117 ));
            rec.edbgm3 := Convert_Edbgm3_Type( Get( slices, 118 ));
            rec.edbgy3 := Convert( slices, 119, ( -9, -8, -7, -2, -1 ) );
            rec.edenm3 := Convert_Edbgm3_Type( Get( slices, 120 ));
            rec.edeny3 := Convert( slices, 121, ( -9, -8, -7, -2, -1 ) );
            rec.edenne3 := Convert_Edenne3_Type( Get( slices, 122 ));
            rec.edfeea3 := Convert_Yes_Or_Missing_Type( Get( slices, 123 ));
            rec.edfeeb3 := Convert_Yes_Or_Missing_Type( Get( slices, 124 ));
            rec.edfeec3 := Convert_Yes_Or_Missing_Type( Get( slices, 125 ));
            rec.edfeed3 := Convert_Yes_Or_Missing_Type( Get( slices, 126 ));
            rec.edfeee3 := Convert_Yes_Or_Missing_Type( Get( slices, 127 ));
            rec.edfeef3 := Convert_Yes_Or_Missing_Type( Get( slices, 128 ));
            rec.edfeeg3 := Convert_Yes_Or_Missing_Type( Get( slices, 129 ));
            rec.edqual3 := Convert_Edqual3_Type( Get( slices, 130 ));
            rec.edqnn3 := Convert( slices, 131, ( -9, -8, -7, -2, -1 ) );
            rec.edqla3 := Convert_Yes_Or_Missing_Type( Get( slices, 132 ));
            rec.edqlb3 := Convert_Yes_Or_Missing_Type( Get( slices, 133 ));
            rec.edqlc3 := Convert_Yes_Or_Missing_Type( Get( slices, 134 ));
            rec.edqld3 := Convert_Yes_Or_Missing_Type( Get( slices, 135 ));
            rec.edqle3 := Convert_Yes_Or_Missing_Type( Get( slices, 136 ));
            rec.edqlf3 := Convert_Yes_Or_Missing_Type( Get( slices, 137 ));
            rec.edqlg3 := Convert_Yes_Or_Missing_Type( Get( slices, 138 ));
            rec.edqlh3 := Convert_Yes_Or_Missing_Type( Get( slices, 139 ));
            rec.edqli3 := Convert_Yes_Or_Missing_Type( Get( slices, 140 ));
            rec.edqlj3 := Convert( slices, 141, ( -9, -8, -7 ) );
            rec.edqlan3 := Convert( slices, 142, ( -9, -8, -7, -2, -1 ) );
            rec.edqlbn3 := Convert( slices, 143, ( -9, -8, -7, -2, -1 ) );
            rec.edqlcn3 := Convert( slices, 144, ( -9, -8, -7, -2, -1 ) );
            rec.edqldn3 := Convert( slices, 145, ( -9, -8, -7, -2, -1 ) );
            rec.edqlen3 := Convert( slices, 146, ( -9, -8, -7, -2, -1 ) );
            rec.edqlfn3 := Convert( slices, 147, ( -9, -8, -7, -2, -1 ) );
            rec.edqlgn3 := Convert( slices, 148, ( -9, -8, -7, -2, -1 ) );
            rec.edqlhn3 := Convert( slices, 149, ( -9, -8, -7, -2, -1 ) );
            rec.edqlin3 := Convert( slices, 150, ( -9, -8, -7, -2, -1 ) );
            rec.edqljn3 := Convert( slices, 151, ( -9, -8, -7, -2, -1 ) );
            rec.edoqln3 := Convert( slices, 152, ( -9, -8, -7, -2, -1 ) );
            rec.edoql3 := Convert_Edoql1_Type( Get( slices, 153 ));
            rec.plbornd := Convert_Plbornd_Type( Get( slices, 154 ));
            rec.plbornc := Convert_Plbornc_Type( Get( slices, 155 ));
            rec.yr2uk4 := Convert( slices, 156, ( -9, -8, -7, -2, -1 ) );
            rec.citzn1 := Convert( slices, 157, ( -9, -8, -7, -2, -1 ) );
            rec.citzn2 := Convert_Citzn2_Type( Get( slices, 158 ));
            rec.racel := Convert_Racel_Type( Get( slices, 159 ));
            rec.paju := Convert_Paju_Type( Get( slices, 160 ));
            rec.pasoc := Convert( slices, 161, ( -9, -8, -7, -2, -1 ) );
            rec.pasoc00 := Convert( slices, 162, ( -9, -8, -7, -2, -1 ) );
            rec.pasemp := Convert_J2semp_Type( Get( slices, 163 ));
            rec.paboss := Convert_Maboss_Type( Get( slices, 164 ));
            rec.pamngr := Convert_Mamngr_Type( Get( slices, 165 ));
            rec.maju := Convert_Maju_Type( Get( slices, 166 ));
            rec.masoc := Convert( slices, 167, ( -9, -8, -7, -2, -1 ) );
            rec.masoc00 := Convert( slices, 168, ( -9, -8, -7, -2, -1 ) );
            rec.masemp := Convert_J2semp_Type( Get( slices, 169 ));
            rec.maboss := Convert_Maboss_Type( Get( slices, 170 ));
            rec.mamngr := Convert_Mamngr_Type( Get( slices, 171 ));
            rec.j1none := Convert_J1none_Type( Get( slices, 172 ));
            rec.j1soc := Convert( slices, 173, ( -9, -8, -7, -2, -1 ) );
            rec.j1soc00 := Convert( slices, 174, ( -9, -8, -7, -2, -1 ) );
            rec.j1semp := Convert_J1semp_Type( Get( slices, 175 ));
            rec.j1boss := Convert_J1boss_Type( Get( slices, 176 ));
            rec.j1mngr := Convert_J1mngr_Type( Get( slices, 177 ));
            rec.lcoh := Convert_Aidpl1_Type( Get( slices, 178 ));
            rec.coh1bm := Convert_Ch1bm_Type( Get( slices, 179 ));
            rec.coh1by := Convert( slices, 180, ( -9, -8, -7, -2, -1 ) );
            rec.coh1mr := Convert_Coh1mr_Type( Get( slices, 181 ));
            rec.coh1em := Convert_Ch1bm_Type( Get( slices, 182 ));
            rec.coh1ey := Convert( slices, 183, ( -9, -8, -7, -2, -1 ) );
            rec.nmar := Convert_Nmar_Type( Get( slices, 184 ));
            rec.lmar1m := Convert_Ch1bm_Type( Get( slices, 185 ));
            rec.lmar1y := Convert( slices, 186, ( -9, -8, -7, -2, -1 ) );
            rec.lprnt := Convert_Lprnt_Type( Get( slices, 187 ));
            rec.lnprnt := Convert( slices, 188, ( -9, -8, -7, -2, -1 ) );
            rec.ch1bm := Convert_Ch1bm_Type( Get( slices, 189 ));
            rec.ch1by := Convert( slices, 190, ( -9, -8, -7, -2, -1 ) );
            rec.school := Convert_School_Type( Get( slices, 191 ));
            rec.scend := Convert( slices, 192, ( -9, -8, -7, -2, -1 ) );
            rec.sctype := Convert_Sctype_Type( Get( slices, 193 ));
            rec.scnow := Convert_Cjsck2_Type( Get( slices, 194 ));
            rec.fetype := Convert_Fetype_Type( Get( slices, 195 ));
            rec.fenow := Convert_Fenow_Type( Get( slices, 196 ));
            rec.feend := Convert( slices, 197, ( -9, -8, -7, -2, -1 ) );
            rec.qfhas := Convert_Bscon_Type( Get( slices, 198 ));
            rec.qfa := Convert_Qfa_Type( Get( slices, 199 ));
            rec.qfb := Convert_Qfb_Type( Get( slices, 200 ));
            rec.qfc := Convert_Qfc_Type( Get( slices, 201 ));
            rec.qfd := Convert_Qfd_Type( Get( slices, 202 ));
            rec.qfe := Convert_Qfe_Type( Get( slices, 203 ));
            rec.qff := Convert_Qff_Type( Get( slices, 204 ));
            rec.qfg := Convert_Qfg_Type( Get( slices, 205 ));
            rec.qfh := Convert_Qfh_Type( Get( slices, 206 ));
            rec.qfi := Convert_Qfi_Type( Get( slices, 207 ));
            rec.qfj := Convert_Qfj_Type( Get( slices, 208 ));
            rec.qfk := Convert_Qfk_Type( Get( slices, 209 ));
            rec.qfl := Convert_Qfl_Type( Get( slices, 210 ));
            rec.qfm := Convert_Qfm_Type( Get( slices, 211 ));
            rec.qfn := Convert_Qfn_Type( Get( slices, 212 ));
            rec.qfed := Convert_Bscon_Type( Get( slices, 213 ));
            rec.qfeda := Convert_Qfeda_Type( Get( slices, 214 ));
            rec.nqfeda := Convert( slices, 215, ( -9, -8, -7, -2, -1 ) );
            rec.qfedb := Convert_Qfedb_Type( Get( slices, 216 ));
            rec.nqfedb := Convert( slices, 217, ( -9, -8, -7, -2, -1 ) );
            rec.qfedc := Convert_Qfedc_Type( Get( slices, 218 ));
            rec.nqfedc := Convert( slices, 219, ( -9, -8, -7, -2, -1 ) );
            rec.qfedd := Convert_Qfedd_Type( Get( slices, 220 ));
            rec.nqfedd := Convert( slices, 221, ( -9, -8, -7, -2, -1 ) );
            rec.qfede := Convert_Qfede_Type( Get( slices, 222 ));
            rec.nqfede := Convert( slices, 223, ( -9, -8, -7, -2, -1 ) );
            rec.qfedf := Convert_Qfedf_Type( Get( slices, 224 ));
            rec.nqfedf := Convert( slices, 225, ( -9, -8, -7, -2, -1 ) );
            rec.qfedg := Convert_Qfedg_Type( Get( slices, 226 ));
            rec.nqfedg := Convert( slices, 227, ( -9, -8, -7, -2, -1 ) );
            rec.qfedh := Convert_Qfedh_Type( Get( slices, 228 ));
            rec.nqfedh := Convert( slices, 229, ( -9, -8, -7, -2, -1 ) );
            rec.qfedi := Convert_Qfedi_Type( Get( slices, 230 ));
            rec.nqfedi := Convert( slices, 231, ( -9, -8, -7, -2, -1 ) );
            rec.qfedj := Convert_Qfedj_Type( Get( slices, 232 ));
            rec.nqfedj := Convert( slices, 233, ( -9, -8, -7, -2, -1 ) );
            rec.qfedt := Convert_Qfedt_Type( Get( slices, 234 ));
            rec.nqfedt := Convert( slices, 235, ( -9, -8, -7, -2, -1 ) );
            rec.qfedu := Convert_Qfedu_Type( Get( slices, 236 ));
            rec.nqfedu := Convert( slices, 237, ( -9, -8, -7, -2, -1 ) );
            rec.qfedk := Convert_Qfedk_Type( Get( slices, 238 ));
            rec.nqfedk := Convert( slices, 239, ( -9, -8, -7, -2, -1 ) );
            rec.qfedl := Convert_Qfedl_Type( Get( slices, 240 ));
            rec.nqfedl := Convert( slices, 241, ( -9, -8, -7, -2, -1 ) );
            rec.qfedm := Convert_Qfedm_Type( Get( slices, 242 ));
            rec.nqfedm := Convert( slices, 243, ( -9, -8, -7, -2, -1 ) );
            rec.qfedn := Convert_Qfedn_Type( Get( slices, 244 ));
            rec.nqfedn := Convert( slices, 245, ( -9, -8, -7, -2, -1 ) );
            rec.qfedo := Convert_Qfedo_Type( Get( slices, 246 ));
            rec.nqfedo := Convert( slices, 247, ( -9, -8, -7, -2, -1 ) );
            rec.qfedp := Convert( slices, 248, ( -9, -8, -7 ) );
            rec.nqfedp := Convert( slices, 249, ( -9, -8, -7, -2, -1 ) );
            rec.qfedq := Convert_Qfedq_Type( Get( slices, 250 ));
            rec.nqfedq := Convert( slices, 251, ( -9, -8, -7, -2, -1 ) );
            rec.qfedr := Convert_Qfedr_Type( Get( slices, 252 ));
            rec.nqfedr := Convert( slices, 253, ( -9, -8, -7, -2, -1 ) );
            rec.qfeds := Convert_Hlprbm_Type( Get( slices, 254 ));
            rec.nqfeds := Convert( slices, 255, ( -9, -8, -7, -2, -1 ) );
            rec.train := Convert_Boolean_With_Missing( Get( slices, 256 ));
            rec.ntrain := Convert( slices, 257, ( -9, -8, -7, -2, -1 ) );
            rec.trplce1 := Convert_Trplce1_Type( Get( slices, 258 ));
            rec.trwhya1 := Convert_Boolean_With_Missing( Get( slices, 259 ));
            rec.trwhyb1 := Convert_Boolean_With_Missing( Get( slices, 260 ));
            rec.trwhyc1 := Convert_Boolean_With_Missing( Get( slices, 261 ));
            rec.trwhyd1 := Convert_Boolean_With_Missing( Get( slices, 262 ));
            rec.trwhye1 := Convert_Boolean_With_Missing( Get( slices, 263 ));
            rec.trq1 := Convert( slices, 264, ( -9, -8, -7 ) );
            rec.tru1 := Convert_Tru1_Type( Get( slices, 265 ));
            rec.trfeea1 := Convert_Nisjsa_Type( Get( slices, 266 ));
            rec.trfeeb1 := Convert_Yes_Or_Missing_Type( Get( slices, 267 ));
            rec.trfeec1 := Convert_Yes_Or_Missing_Type( Get( slices, 268 ));
            rec.trfeee1 := Convert_Yes_Or_Missing_Type( Get( slices, 269 ));
            rec.trfeef1 := Convert_Yes_Or_Missing_Type( Get( slices, 270 ));
            rec.trfeeg1 := Convert_Yes_Or_Missing_Type( Get( slices, 271 ));
            rec.trqlxp1 := Convert_Trqlxp1_Type( Get( slices, 272 ));
            rec.trqlac1 := Convert_Trqlac1_Type( Get( slices, 273 ));
            rec.trqlnn1 := Convert( slices, 274, ( -9, -8, -7, -2, -1 ) );
            rec.trqla1 := Convert_Yes_Or_Missing_Type( Get( slices, 275 ));
            rec.trqlb1 := Convert_Yes_Or_Missing_Type( Get( slices, 276 ));
            rec.trqlc1 := Convert_Yes_Or_Missing_Type( Get( slices, 277 ));
            rec.trqld1 := Convert_Yes_Or_Missing_Type( Get( slices, 278 ));
            rec.trqle1 := Convert_Yes_Or_Missing_Type( Get( slices, 279 ));
            rec.trqlf1 := Convert_Yes_Or_Missing_Type( Get( slices, 280 ));
            rec.trqlg1 := Convert_Yes_Or_Missing_Type( Get( slices, 281 ));
            rec.trqlh1 := Convert_Yes_Or_Missing_Type( Get( slices, 282 ));
            rec.trqli1 := Convert_Yes_Or_Missing_Type( Get( slices, 283 ));
            rec.trqlj1 := Convert( slices, 284, ( -9, -8, -7 ) );
            rec.trqlan1 := Convert( slices, 285, ( -9, -8, -7, -2, -1 ) );
            rec.trqlbn1 := Convert( slices, 286, ( -9, -8, -7, -2, -1 ) );
            rec.trqlcn1 := Convert( slices, 287, ( -9, -8, -7, -2, -1 ) );
            rec.trqldn1 := Convert( slices, 288, ( -9, -8, -7, -2, -1 ) );
            rec.trqlen1 := Convert( slices, 289, ( -9, -8, -7, -2, -1 ) );
            rec.trqlfn1 := Convert( slices, 290, ( -9, -8, -7, -2, -1 ) );
            rec.trqlgn1 := Convert( slices, 291, ( -9, -8, -7, -2, -1 ) );
            rec.trqlhn1 := Convert( slices, 292, ( -9, -8, -7, -2, -1 ) );
            rec.trqlin1 := Convert( slices, 293, ( -9, -8, -7, -2, -1 ) );
            rec.trqljn1 := Convert( slices, 294, ( -9, -8, -7, -2, -1 ) );
            rec.troqln1 := Convert( slices, 295, ( -9, -8, -7, -2, -1 ) );
            rec.troql1 := Convert_Troql1_Type( Get( slices, 296 ));
            rec.trmore1 := Convert_Boolean_With_Missing( Get( slices, 297 ));
            rec.trplce2 := Convert_Trplce1_Type( Get( slices, 298 ));
            rec.trwhya2 := Convert_Boolean_With_Missing( Get( slices, 299 ));
            rec.trwhyb2 := Convert_Boolean_With_Missing( Get( slices, 300 ));
            rec.trwhyc2 := Convert_Boolean_With_Missing( Get( slices, 301 ));
            rec.trwhyd2 := Convert_Boolean_With_Missing( Get( slices, 302 ));
            rec.trwhye2 := Convert_Boolean_With_Missing( Get( slices, 303 ));
            rec.trq2 := Convert( slices, 304, ( -9, -8, -7 ) );
            rec.tru2 := Convert_Tru1_Type( Get( slices, 305 ));
            rec.trfeea2 := Convert_Nisjsa_Type( Get( slices, 306 ));
            rec.trfeeb2 := Convert_Yes_Or_Missing_Type( Get( slices, 307 ));
            rec.trfeec2 := Convert_Yes_Or_Missing_Type( Get( slices, 308 ));
            rec.trfeee2 := Convert_Yes_Or_Missing_Type( Get( slices, 309 ));
            rec.trfeef2 := Convert_Yes_Or_Missing_Type( Get( slices, 310 ));
            rec.trfeeg2 := Convert_Yes_Or_Missing_Type( Get( slices, 311 ));
            rec.trqlxp2 := Convert_Trqlxp1_Type( Get( slices, 312 ));
            rec.trqlac2 := Convert_Trqlac1_Type( Get( slices, 313 ));
            rec.trqlnn2 := Convert( slices, 314, ( -9, -8, -7, -2, -1 ) );
            rec.trqla2 := Convert_Yes_Or_Missing_Type( Get( slices, 315 ));
            rec.trqlb2 := Convert_Yes_Or_Missing_Type( Get( slices, 316 ));
            rec.trqlc2 := Convert_Yes_Or_Missing_Type( Get( slices, 317 ));
            rec.trqld2 := Convert_Yes_Or_Missing_Type( Get( slices, 318 ));
            rec.trqle2 := Convert_Yes_Or_Missing_Type( Get( slices, 319 ));
            rec.trqlf2 := Convert_Yes_Or_Missing_Type( Get( slices, 320 ));
            rec.trqlg2 := Convert_Yes_Or_Missing_Type( Get( slices, 321 ));
            rec.trqlh2 := Convert_Yes_Or_Missing_Type( Get( slices, 322 ));
            rec.trqli2 := Convert_Yes_Or_Missing_Type( Get( slices, 323 ));
            rec.trqlj2 := Convert( slices, 324, ( -9, -8, -7 ) );
            rec.trqlan2 := Convert( slices, 325, ( -9, -8, -7, -2, -1 ) );
            rec.trqlbn2 := Convert( slices, 326, ( -9, -8, -7, -2, -1 ) );
            rec.trqlcn2 := Convert( slices, 327, ( -9, -8, -7, -2, -1 ) );
            rec.trqldn2 := Convert( slices, 328, ( -9, -8, -7, -2, -1 ) );
            rec.trqlen2 := Convert( slices, 329, ( -9, -8, -7, -2, -1 ) );
            rec.trqlfn2 := Convert( slices, 330, ( -9, -8, -7, -2, -1 ) );
            rec.trqlgn2 := Convert( slices, 331, ( -9, -8, -7, -2, -1 ) );
            rec.trqlhn2 := Convert( slices, 332, ( -9, -8, -7, -2, -1 ) );
            rec.trqlin2 := Convert( slices, 333, ( -9, -8, -7, -2, -1 ) );
            rec.trqljn2 := Convert( slices, 334, ( -9, -8, -7, -2, -1 ) );
            rec.troqln2 := Convert( slices, 335, ( -9, -8, -7, -2, -1 ) );
            rec.troql2 := Convert_Troql2_Type( Get( slices, 336 ));
            rec.trmore2 := Convert_Boolean_With_Missing( Get( slices, 337 ));
            rec.trplce3 := Convert_Trplce1_Type( Get( slices, 338 ));
            rec.trwhya3 := Convert_Boolean_With_Missing( Get( slices, 339 ));
            rec.trwhyb3 := Convert_Boolean_With_Missing( Get( slices, 340 ));
            rec.trwhyc3 := Convert_Boolean_With_Missing( Get( slices, 341 ));
            rec.trwhyd3 := Convert_Boolean_With_Missing( Get( slices, 342 ));
            rec.trwhye3 := Convert_Boolean_With_Missing( Get( slices, 343 ));
            rec.trq3 := Convert( slices, 344, ( -9, -8, -7 ) );
            rec.tru3 := Convert_Tru1_Type( Get( slices, 345 ));
            rec.trfeea3 := Convert_Nisjsa_Type( Get( slices, 346 ));
            rec.trfeeb3 := Convert_Yes_Or_Missing_Type( Get( slices, 347 ));
            rec.trfeec3 := Convert_Yes_Or_Missing_Type( Get( slices, 348 ));
            rec.trfeee3 := Convert_Yes_Or_Missing_Type( Get( slices, 349 ));
            rec.trfeef3 := Convert_Yes_Or_Missing_Type( Get( slices, 350 ));
            rec.trfeeg3 := Convert_Yes_Or_Missing_Type( Get( slices, 351 ));
            rec.trqlxp3 := Convert_Trqlxp1_Type( Get( slices, 352 ));
            rec.trqlac3 := Convert_Trqlac1_Type( Get( slices, 353 ));
            rec.trqlnn3 := Convert( slices, 354, ( -9, -8, -7, -2, -1 ) );
            rec.trqla3 := Convert_Yes_Or_Missing_Type( Get( slices, 355 ));
            rec.trqlb3 := Convert_Yes_Or_Missing_Type( Get( slices, 356 ));
            rec.trqlc3 := Convert_Yes_Or_Missing_Type( Get( slices, 357 ));
            rec.trqld3 := Convert_Yes_Or_Missing_Type( Get( slices, 358 ));
            rec.trqle3 := Convert_Yes_Or_Missing_Type( Get( slices, 359 ));
            rec.trqlf3 := Convert_Yes_Or_Missing_Type( Get( slices, 360 ));
            rec.trqlg3 := Convert_Yes_Or_Missing_Type( Get( slices, 361 ));
            rec.trqlh3 := Convert_Yes_Or_Missing_Type( Get( slices, 362 ));
            rec.trqli3 := Convert_Yes_Or_Missing_Type( Get( slices, 363 ));
            rec.trqlj3 := Convert( slices, 364, ( -9, -8, -7 ) );
            rec.trqlan3 := Convert( slices, 365, ( -9, -8, -7, -2, -1 ) );
            rec.trqlbn3 := Convert( slices, 366, ( -9, -8, -7, -2, -1 ) );
            rec.trqlcn3 := Convert( slices, 367, ( -9, -8, -7, -2, -1 ) );
            rec.trqldn3 := Convert( slices, 368, ( -9, -8, -7, -2, -1 ) );
            rec.trqlen3 := Convert( slices, 369, ( -9, -8, -7, -2, -1 ) );
            rec.trqlfn3 := Convert( slices, 370, ( -9, -8, -7, -2, -1 ) );
            rec.trqlgn3 := Convert( slices, 371, ( -9, -8, -7, -2, -1 ) );
            rec.trqlhn3 := Convert( slices, 372, ( -9, -8, -7, -2, -1 ) );
            rec.trqlin3 := Convert( slices, 373, ( -9, -8, -7, -2, -1 ) );
            rec.trqljn3 := Convert( slices, 374, ( -9, -8, -7, -2, -1 ) );
            rec.troqln3 := Convert( slices, 375, ( -9, -8, -7, -2, -1 ) );
            rec.troql3 := Convert_Troql2_Type( Get( slices, 376 ));
            rec.paperr := Convert_Aidpl1_Type( Get( slices, 377 ));
            rec.paperm := Convert_Paperm_Type( Get( slices, 378 ));
            rec.paperp := Convert_Paperp_Type( Get( slices, 379 ));
            rec.birhh := Convert_Aglt20_Type( Get( slices, 380 ));
            rec.mabwly := Convert_Aglt20_Type( Get( slices, 381 ));
            rec.mabwnly := Convert( slices, 382, ( -9, -8, -7 ) );
            rec.bwtpn1 := Convert( slices, 383, ( -9, -8, -7 ) );
            rec.bwtagm1 := Convert( slices, 384, ( -9, -8, -7 ) );
            rec.bwtxp1 := Convert_Boolean_With_Missing( Get( slices, 385 ));
            rec.bwtel1 := Convert_Bwtel_Type( Get( slices, 386 ));
            rec.bwtwk1 := Convert( slices, 387, ( -9, -8, -7, -2, -1 ) );
            rec.bwtkn1 := Convert_Bwtkn_Type( Get( slices, 388 ));
            rec.bwtlb1 := Convert( slices, 389, ( -9, -8, -7, -2, -1 ) );
            rec.bwtoz1 := Convert( slices, 390, ( -9, -8, -7, -2, -1 ) );
            rec.bwtgm1 := Convert( slices, 391, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.bwtg51 := Convert_Bwtg51_Type( Get( slices, 392 ));
            rec.bwtpn2 := Convert( slices, 393, ( -9, -8, -7 ) );
            rec.bwtagm2 := Convert( slices, 394, ( -9, -8, -7 ) );
            rec.bwtxp2 := Convert_Boolean_With_Missing( Get( slices, 395 ));
            rec.bwtel2 := Convert_Bwtel2_Type( Get( slices, 396 ));
            rec.bwtwk2 := Convert( slices, 397, ( -9, -8, -7, -2, -1 ) );
            rec.bwtkn2 := Convert_Bwtkn_Type( Get( slices, 398 ));
            rec.bwtlb2 := Convert( slices, 399, ( -9, -8, -7 ) );
            rec.bwtoz2 := Convert( slices, 400, ( -9, -8, -7, -2, -1 ) );
            rec.bwtgm2 := Convert( slices, 401, ( -9, -8, -7 ) );
            rec.bwtg52 := Convert_Bwtg5_Type( Get( slices, 402 ));
            rec.bwtpn3 := Convert( slices, 403, ( -9, -8, -7 ) );
            rec.bwtagm3 := Convert( slices, 404, ( -9, -8, -7 ) );
            rec.bwtxp3 := Convert_Boolean_With_Missing( Get( slices, 405 ));
            rec.bwtel3 := Convert_Bwtel2_Type( Get( slices, 406 ));
            rec.bwtwk3 := Convert( slices, 407, ( -9, -8, -7, -2, -1 ) );
            rec.bwtkn3 := Convert_Bwtkn_Type( Get( slices, 408 ));
            rec.bwtlb3 := Convert( slices, 409, ( -9, -8, -7 ) );
            rec.bwtoz3 := Convert( slices, 410, ( -9, -8, -7, -2, -1 ) );
            rec.bwtgm3 := Convert( slices, 411, ( -9, -8, -7 ) );
            rec.bwtg53 := Convert_Bwtg5_Type( Get( slices, 412 ));
            rec.wlsha := Convert_Yes_Or_Missing_Type( Get( slices, 413 ));
            rec.wlshb := Convert_Yes_Or_Missing_Type( Get( slices, 414 ));
            rec.wlshc := Convert_Yes_Or_Missing_Type( Get( slices, 415 ));
            rec.wlshd := Convert_Yes_Or_Missing_Type( Get( slices, 416 ));
            rec.wlshe := Convert_Jbwkhrh_Type( Get( slices, 417 ));
            rec.wlshua := Convert_Wlshua_Type( Get( slices, 418 ));
            rec.wlshub := Convert_Wlshua_Type( Get( slices, 419 ));
            rec.wlshuc := Convert_Wlshua_Type( Get( slices, 420 ));
            rec.wlshud := Convert_Wlshua_Type( Get( slices, 421 ));
            rec.wlshue := Convert_Wlshua_Type( Get( slices, 422 ));
            rec.aglt20 := Convert_Aglt20_Type( Get( slices, 423 ));
            rec.scnow2 := Convert_Cjsck2_Type( Get( slices, 424 ));
            rec.infted := Convert_Aglt20_Type( Get( slices, 425 ));
            rec.edasp := Convert_Edasp_Type( Get( slices, 426 ));
            rec.fedasp := Convert_Fedasp_Type( Get( slices, 427 ));
            rec.fedtyp := Convert_Fedtyp_Type( Get( slices, 428 ));
            rec.fedlik := Convert_Fedlik_Type( Get( slices, 429 ));
            rec.fednt1 := Convert_Fednt1_Type( Get( slices, 430 ));
            rec.fednt2 := Convert_Fednt2_Type( Get( slices, 431 ));
            rec.ocfut := Convert( slices, 432, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ivda := Convert_Ivda_Type( Get( slices, 433 ));
            rec.ivdb := Convert_Ivdb_Type( Get( slices, 434 ));
            rec.ivdc := Convert_Ivdc_Type( Get( slices, 435 ));
            rec.ivdd := Convert_Ivdd_Type( Get( slices, 436 ));
            rec.ivde := Convert_Yes_Or_Missing_Type( Get( slices, 437 ));
            rec.hldsbl1 := Convert_Hldsbl1_Type( Get( slices, 438 ));
            rec.hlstat := Convert_Hlstat_Type( Get( slices, 439 ));
            rec.hlprb := Convert( slices, 440, ( -9, -8, -7, -2, -1 ) );
            rec.hlprba := Convert_Hlprba_Type( Get( slices, 441 ));
            rec.hlprbb := Convert_Hlprbb_Type( Get( slices, 442 ));
            rec.hlprbc := Convert_Hlprbc_Type( Get( slices, 443 ));
            rec.hlprbd := Convert_Hlprbd_Type( Get( slices, 444 ));
            rec.hlprbe := Convert_Hlprbe_Type( Get( slices, 445 ));
            rec.hlprbf := Convert_Hlprbf_Type( Get( slices, 446 ));
            rec.hlprbg := Convert_Hlprbg_Type( Get( slices, 447 ));
            rec.hlprbh := Convert_Hlprbh_Type( Get( slices, 448 ));
            rec.hlprbi := Convert_Hlprbi_Type( Get( slices, 449 ));
            rec.hlprbj := Convert_Hlprbj_Type( Get( slices, 450 ));
            rec.hlprbk := Convert_Hlprbk_Type( Get( slices, 451 ));
            rec.hlprbl := Convert_Hlprbl_Type( Get( slices, 452 ));
            rec.hlprbn := Convert_Hlprbn_Type( Get( slices, 453 ));
            rec.hlprbo := Convert_Hlprbo_Type( Get( slices, 454 ));
            rec.hlprbm := Convert_Hlprbm_Type( Get( slices, 455 ));
            rec.hlsf1 := Convert_Hlsf1_Type( Get( slices, 456 ));
            rec.hlsf2 := Convert( slices, 457, ( -9, -8, -7, -2, -1 ) );
            rec.hlsf3a := Convert_Hlsf3a_Type( Get( slices, 458 ));
            rec.hlsf3b := Convert_Hlsf3a_Type( Get( slices, 459 ));
            rec.hlsf3c := Convert_Hlsf3a_Type( Get( slices, 460 ));
            rec.hlsf3d := Convert_Hlsf3a_Type( Get( slices, 461 ));
            rec.hlsf3e := Convert_Hlsf3a_Type( Get( slices, 462 ));
            rec.hlsf3f := Convert_Hlsf3a_Type( Get( slices, 463 ));
            rec.hlsf3g := Convert_Hlsf3a_Type( Get( slices, 464 ));
            rec.hlsf3h := Convert_Hlsf3a_Type( Get( slices, 465 ));
            rec.hlsf3i := Convert_Hlsf3a_Type( Get( slices, 466 ));
            rec.hlsf3j := Convert_Hlsf3a_Type( Get( slices, 467 ));
            rec.hlsf4a := Convert_Edblyr3_Type( Get( slices, 468 ));
            rec.hlsf4b := Convert_Edblyr3_Type( Get( slices, 469 ));
            rec.hlsf4c := Convert_Edblyr3_Type( Get( slices, 470 ));
            rec.hlsf4d := Convert_Edblyr3_Type( Get( slices, 471 ));
            rec.hlsf5a := Convert_Edblyr3_Type( Get( slices, 472 ));
            rec.hlsf5b := Convert_Edblyr3_Type( Get( slices, 473 ));
            rec.hlsf5c := Convert_Edblyr3_Type( Get( slices, 474 ));
            rec.hlsf6 := Convert_Hlsf6_Type( Get( slices, 475 ));
            rec.hlsf7 := Convert_Hlsf7_Type( Get( slices, 476 ));
            rec.hlsf8 := Convert_Hlsf6_Type( Get( slices, 477 ));
            rec.hlsf9a := Convert_Hlsf9a_Type( Get( slices, 478 ));
            rec.hlsf9b := Convert_Hlsf9a_Type( Get( slices, 479 ));
            rec.hlsf9c := Convert_Hlsf9a_Type( Get( slices, 480 ));
            rec.hlsf9d := Convert_Hlsf9a_Type( Get( slices, 481 ));
            rec.hlsf9e := Convert_Hlsf9a_Type( Get( slices, 482 ));
            rec.hlsf9f := Convert_Hlsf9a_Type( Get( slices, 483 ));
            rec.hlsf9g := Convert_Hlsf9a_Type( Get( slices, 484 ));
            rec.hlsf9h := Convert_Hlsf9a_Type( Get( slices, 485 ));
            rec.hlsf9i := Convert_Hlsf9a_Type( Get( slices, 486 ));
            rec.hlsf9j := Convert_Hlsf9a_Type( Get( slices, 487 ));
            rec.hlsf10a := Convert_Hlsf10a_Type( Get( slices, 488 ));
            rec.hlsf10b := Convert_Hlsf10a_Type( Get( slices, 489 ));
            rec.hlsf10c := Convert_Hlsf10a_Type( Get( slices, 490 ));
            rec.hlsf10d := Convert_Hlsf10a_Type( Get( slices, 491 ));
            rec.hl2gp := Convert_Hl2gp_Type( Get( slices, 492 ));
            rec.hl2hop := Convert( slices, 493, ( -9, -8, -7, -2, -1 ) );
            rec.xdts := Convert_Bscon_Type( Get( slices, 494 ));
            rec.nxdts := Convert_Nxdts_Type( Get( slices, 495 ));
            rec.hosp := Convert_Hlsv_Type( Get( slices, 496 ));
            rec.hospd := Convert( slices, 497, ( -9, -8, -7, -2, -1 ) );
            rec.hospch := Convert_Hospch_Type( Get( slices, 498 ));
            rec.hospnhs := Convert_Hospnhs_Type( Get( slices, 499 ));
            rec.hlcvr := Convert_Hlcvr_Type( Get( slices, 500 ));
            rec.hlcvrh := Convert_Hlcvrh_Type( Get( slices, 501 ));
            rec.hlcvrl := Convert( slices, 502, ( -9, -8, -7, -2, -1 ) );
            rec.hlsv := Convert_Hlsv_Type( Get( slices, 503 ));
            rec.hlsva := Convert_Hlsva_Type( Get( slices, 504 ));
            rec.hlsvan := Convert_Hlsvan_Type( Get( slices, 505 ));
            rec.hlsvaf := Convert_Hlsvaf_Type( Get( slices, 506 ));
            rec.hlsvb := Convert_Hlsvb_Type( Get( slices, 507 ));
            rec.hlsvbn := Convert_Hlsvan_Type( Get( slices, 508 ));
            rec.hlsvbf := Convert_Hlsvaf_Type( Get( slices, 509 ));
            rec.hlsvc := Convert_Hlsvc_Type( Get( slices, 510 ));
            rec.hlsvcn := Convert_Hlsvan_Type( Get( slices, 511 ));
            rec.hlsvcf := Convert_Hlsvaf_Type( Get( slices, 512 ));
            rec.hlsvd := Convert_Hlsvd_Type( Get( slices, 513 ));
            rec.hlsvdn := Convert_Hlsvan_Type( Get( slices, 514 ));
            rec.hlsvdf := Convert_Hlsvaf_Type( Get( slices, 515 ));
            rec.hlsve := Convert_Hlsve_Type( Get( slices, 516 ));
            rec.hlsven := Convert_Hlsvan_Type( Get( slices, 517 ));
            rec.hlsvef := Convert_Hlsvaf_Type( Get( slices, 518 ));
            rec.hlsvf := Convert_Hlsvf_Type( Get( slices, 519 ));
            rec.hlsvfn := Convert_Hlsvan_Type( Get( slices, 520 ));
            rec.hlsvff := Convert_Hlsvaf_Type( Get( slices, 521 ));
            rec.hlsvg := Convert_Hlsvg_Type( Get( slices, 522 ));
            rec.hlsvgn := Convert_Hlsvan_Type( Get( slices, 523 ));
            rec.hlsvgf := Convert_Hlsvaf_Type( Get( slices, 524 ));
            rec.hlsvh := Convert_Hlsvh_Type( Get( slices, 525 ));
            rec.hlsvhn := Convert_Hlsvan_Type( Get( slices, 526 ));
            rec.hlsvhf := Convert_Hlsvaf_Type( Get( slices, 527 ));
            rec.hlsvi := Convert_Hlsvi_Type( Get( slices, 528 ));
            rec.hlsvin := Convert_Hlsvan_Type( Get( slices, 529 ));
            rec.hlsvif := Convert_Hlsvaf_Type( Get( slices, 530 ));
            rec.hlsvl := Convert_Hlsvl_Type( Get( slices, 531 ));
            rec.hlsvln := Convert_Hlsvln_Type( Get( slices, 532 ));
            rec.hlsvlf := Convert_Hlsvlf_Type( Get( slices, 533 ));
            rec.hlsvm := Convert_Hlsvm_Type( Get( slices, 534 ));
            rec.hlsvmn := Convert_Hlsvln_Type( Get( slices, 535 ));
            rec.hlsvmf := Convert_Hlsvlf_Type( Get( slices, 536 ));
            rec.hlsvj := Convert_Hlsvj_Type( Get( slices, 537 ));
            rec.hlsvjn := Convert_Hlsvan_Type( Get( slices, 538 ));
            rec.hlsvjf := Convert_Hlsvaf_Type( Get( slices, 539 ));
            rec.hlsvk := Convert_Hlsvk_Type( Get( slices, 540 ));
            rec.hlsvkn := Convert_Hlsvan_Type( Get( slices, 541 ));
            rec.hlsvkf := Convert_Hlsvaf_Type( Get( slices, 542 ));
            rec.hlck := Convert_Aidpl1_Type( Get( slices, 543 ));
            rec.hlcka := Convert_Hlcka_Type( Get( slices, 544 ));
            rec.hlckan := Convert_Hlckan_Type( Get( slices, 545 ));
            rec.hlckb := Convert_Hlcka_Type( Get( slices, 546 ));
            rec.hlckbn := Convert_Hlckan_Type( Get( slices, 547 ));
            rec.hlckc := Convert_Hlcka_Type( Get( slices, 548 ));
            rec.hlckcn := Convert_Hlckan_Type( Get( slices, 549 ));
            rec.hlckd := Convert_Hlcka_Type( Get( slices, 550 ));
            rec.hlckdn := Convert_Hlckan_Type( Get( slices, 551 ));
            rec.hlcke := Convert_Hlcka_Type( Get( slices, 552 ));
            rec.hlcken := Convert_Hlckan_Type( Get( slices, 553 ));
            rec.hlcki := Convert_Hlcki_Type( Get( slices, 554 ));
            rec.hlckin := Convert_Hlckin_Type( Get( slices, 555 ));
            rec.hlckf := Convert_Hlcka_Type( Get( slices, 556 ));
            rec.hlckfn := Convert_Hlckan_Type( Get( slices, 557 ));
            rec.hlckg := Convert_Hlcka_Type( Get( slices, 558 ));
            rec.hlckgn := Convert_Hlckan_Type( Get( slices, 559 ));
            rec.hlckh := Convert_Hlcka_Type( Get( slices, 560 ));
            rec.hlckhn := Convert_Hlckan_Type( Get( slices, 561 ));
            rec.smoker := Convert_Bscon_Type( Get( slices, 562 ));
            rec.ncigs := Convert( slices, 563, ( -9, -8, -7, -2, -1 ) );
            rec.hlhtm := Convert_Hlhtm_Type( Get( slices, 564 ));
            rec.hlhtf := Convert( slices, 565, ( -9, -8, -7, -2, -1 ) );
            rec.hlhti := Convert( slices, 566, ( -9, -8, -7, -2, -1 ) );
            rec.hlhtc := Convert( slices, 567, ( -9, -8, -7, -2, -1 ) );
            rec.hlwtm := Convert_Hlwtm_Type( Get( slices, 568 ));
            rec.hlwts := Convert( slices, 569, ( -9, -8, -7, -2, -1 ) );
            rec.hlwtp := Convert( slices, 570, ( -9, -8, -7, -2, -1 ) );
            rec.hlwtk := Convert( slices, 571, ( -9, -8, -7, -2, -1 ) );
            rec.hlwte := Convert_Hlwte_Type( Get( slices, 572 ));
            rec.hlwtl := Convert_Hlwtl_Type( Get( slices, 573 ));
            rec.hlwtr := Convert_Hlwtr_Type( Get( slices, 574 ));
            rec.cbagef := Convert_Cbagef_Type( Get( slices, 575 ));
            rec.hlpreg := Convert_Cbagef_Type( Get( slices, 576 ));
            rec.aidhh := Convert_Aidhh_Type( Get( slices, 577 ));
            rec.aidhua := Convert( slices, 578, ( -9, -8, -7, -1 ) );
            rec.aidhub := Convert( slices, 579, ( -9, -8, -7 ) );
            rec.aidhuc := Convert( slices, 580, ( -9, -8, -7 ) );
            rec.aidxhh := Convert_Aidxhh_Type( Get( slices, 581 ));
            rec.naidxhh := Convert_Naidxhh_Type( Get( slices, 582 ));
            rec.aidhu1 := Convert_Aidhu1_Type( Get( slices, 583 ));
            rec.aidhu2 := Convert_Aidhu2_Type( Get( slices, 584 ));
            rec.aidhrs := Convert_Aidhrs_Type( Get( slices, 585 ));
            rec.ivma := Convert_Ivda_Type( Get( slices, 586 ));
            rec.ivmb := Convert_Ivdb_Type( Get( slices, 587 ));
            rec.ivmc := Convert_Ivec_Type( Get( slices, 588 ));
            rec.ivmd := Convert_Ivdd_Type( Get( slices, 589 ));
            rec.ivme := Convert_Ivee_Type( Get( slices, 590 ));
            rec.jbhas := Convert_Frnow_Type( Get( slices, 591 ));
            rec.jboff := Convert_Jboff_Type( Get( slices, 592 ));
            rec.jboffy := Convert_Jboffy_Type( Get( slices, 593 ));
            rec.jbterm1 := Convert_Jbterm1_Type( Get( slices, 594 ));
            rec.jbterm2 := Convert_Jbterm2_Type( Get( slices, 595 ));
            rec.jbsoc := Convert( slices, 596, ( -9, -8, -2, -1 ) );
            rec.jbsoc00 := Convert( slices, 597, ( -9, -8, -2, -1 ) );
            rec.jbsic92 := Convert( slices, 598, ( -9, -8, -7, -2, -1 ) );
            rec.jbsemp := Convert_Jbsemp_Type( Get( slices, 599 ));
            rec.jbmngr := Convert_Jbmngr_Type( Get( slices, 600 ));
            rec.jbsect := Convert_Jbsect_Type( Get( slices, 601 ));
            rec.jbsize := Convert_Jbsize_Type( Get( slices, 602 ));
            rec.jbhrs := Convert( slices, 603, ( -9, -8, -7, -2, -1 ) );
            rec.jbot := Convert( slices, 604, ( -9, -8, -7, -2, -1 ) );
            rec.jbotpd := Convert( slices, 605, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbhrlk := Convert_Jbhrlk_Type( Get( slices, 606 ));
            rec.jbpl := Convert_Jbpl_Type( Get( slices, 607 ));
            rec.jbttwt := Convert( slices, 608, ( -9, -8, -7, -3, -2, -1 ) );
            rec.jbttwm := Convert_Jbttwm_Type( Get( slices, 609 ));
            rec.jbsat2 := Convert( slices, 610, ( -9, -8, -7, -2, -1 ) );
            rec.jbsat4 := Convert_Jbsat4_Type( Get( slices, 611 ));
            rec.jbsat6 := Convert_Jbsat4_Type( Get( slices, 612 ));
            rec.jbsat7 := Convert_Jbsat_Type( Get( slices, 613 ));
            rec.jbsat := Convert_Jbsat_Type( Get( slices, 614 ));
            rec.paygl := Convert( slices, 615, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.paygw := Convert( slices, 616, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.paynl := Convert( slices, 617, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.paynw := Convert( slices, 618, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.pytc := Convert_Pytc_Type( Get( slices, 619 ));
            rec.pywftc := Convert( slices, 620, ( -9, -8, -7, -2, -1 ) );
            rec.pywftcw := Convert( slices, 621, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.payslp := Convert_Payslp_Type( Get( slices, 622 ));
            rec.payusl := Convert_Aidpl1_Type( Get( slices, 623 ));
            rec.payu := Convert( slices, 624, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.payuw := Convert( slices, 625, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.payug := Convert_Paylyg_Type( Get( slices, 626 ));
            rec.paydf1 := Convert_Paydf1_Type( Get( slices, 627 ));
            rec.paydf2 := Convert_Paydf2_Type( Get( slices, 628 ));
            rec.paydf3 := Convert_Paydf3_Type( Get( slices, 629 ));
            rec.paydf4 := Convert_Paydf4_Type( Get( slices, 630 ));
            rec.paydf5 := Convert_Paydf5_Type( Get( slices, 631 ));
            rec.paydf6 := Convert_Paydf6_Type( Get( slices, 632 ));
            rec.paydf7 := Convert_Paydf7_Type( Get( slices, 633 ));
            rec.paydf9 := Convert_Paydf9_Type( Get( slices, 634 ));
            rec.paydf8 := Convert_Paydf8_Type( Get( slices, 635 ));
            rec.paytyp := Convert_Paytyp_Type( Get( slices, 636 ));
            rec.ovtpay := Convert_Bpar16_Type( Get( slices, 637 ));
            rec.extrate := Convert( slices, 638, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.extrest := Convert_Basrest_Type( Get( slices, 639 ));
            rec.basrate := Convert( slices, 640, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.basrest := Convert_Basrest_Type( Get( slices, 641 ));
            rec.ovtrate := Convert( slices, 642, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.ovtrest := Convert_Basrest_Type( Get( slices, 643 ));
            rec.jbperfp := Convert_Coh1mr_Type( Get( slices, 644 ));
            rec.jbonus := Convert_Aidpl1_Type( Get( slices, 645 ));
            rec.jbonam := Convert( slices, 646, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbong := Convert_Jbong_Type( Get( slices, 647 ));
            rec.jbrise := Convert_Aidpl1_Type( Get( slices, 648 ));
            rec.tujbpl := Convert_Aidpl1_Type( Get( slices, 649 ));
            rec.tuin1 := Convert_Aidpl1_Type( Get( slices, 650 ));
            rec.jbopps := Convert_Aidpl1_Type( Get( slices, 651 ));
            rec.jbpen := Convert_Aidpl1_Type( Get( slices, 652 ));
            rec.jbpenm := Convert_Aidpl1_Type( Get( slices, 653 ));
            rec.jbtime := Convert_Jbtime_Type( Get( slices, 654 ));
            rec.jbwkhra := Convert_Yes_Or_Missing_Type( Get( slices, 655 ));
            rec.jbwkhrb := Convert_Yes_Or_Missing_Type( Get( slices, 656 ));
            rec.jbwkhrc := Convert_Yes_Or_Missing_Type( Get( slices, 657 ));
            rec.jbwkhrd := Convert_Yes_Or_Missing_Type( Get( slices, 658 ));
            rec.jbwkhre := Convert_Yes_Or_Missing_Type( Get( slices, 659 ));
            rec.jbwkhrf := Convert_Yes_Or_Missing_Type( Get( slices, 660 ));
            rec.jbwkhrg := Convert_Yes_Or_Missing_Type( Get( slices, 661 ));
            rec.jbwkhrh := Convert_Jbwkhrh_Type( Get( slices, 662 ));
            rec.jbbgd := Convert( slices, 663, ( -9, -8, -7, -2, -1 ) );
            rec.jbbgm := Convert_Cjsbgm_Type( Get( slices, 664 ));
            rec.jbbgy4 := Convert( slices, 665, ( -9, -8, -7, -2, -1 ) );
            rec.jbbgly := Convert_Jbbgly_Type( Get( slices, 666 ));
            rec.pays := Convert( slices, 667, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.paysw := Convert( slices, 668, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.paysg := Convert_Paylyg_Type( Get( slices, 669 ));
            rec.payly := Convert( slices, 670, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.paylyw := Convert( slices, 671, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.paylyg := Convert_Paylyg_Type( Get( slices, 672 ));
            rec.jsboss := Convert_Jsboss_Type( Get( slices, 673 ));
            rec.jssize := Convert_Jssize_Type( Get( slices, 674 ));
            rec.jshrs := Convert( slices, 675, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jshrlk := Convert_Jbhrlk_Type( Get( slices, 676 ));
            rec.jstypeb := Convert_Jstypeb_Type( Get( slices, 677 ));
            rec.jsaccs := Convert_Jsaccs_Type( Get( slices, 678 ));
            rec.jspart := Convert_Jspart_Type( Get( slices, 679 ));
            rec.jsprbm := Convert_Cjsbgm_Type( Get( slices, 680 ));
            rec.jsprby4 := Convert( slices, 681, ( -9, -8, -7, -2, -1 ) );
            rec.jsprem := Convert_Cjsbgm_Type( Get( slices, 682 ));
            rec.jsprey4 := Convert( slices, 683, ( -9, -8, -7, -2, -1 ) );
            rec.jsprf := Convert( slices, 684, ( -9, -8, -7, -3, -2, -1 ) );
            rec.jsprls := Convert_Jsprls_Type( Get( slices, 685 ));
            rec.jsprtx := Convert_Jsprtx_Type( Get( slices, 686 ));
            rec.jsprni := Convert_Jsprni_Type( Get( slices, 687 ));
            rec.jspayu := Convert( slices, 688, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jspayw := Convert( slices, 689, ( -9.0, -8.0, -7.0, -4.0, -2.0, -1.0 ) );
            rec.jspytx := Convert_Jspytx_Type( Get( slices, 690 ));
            rec.jspyni := Convert_Jspyni_Type( Get( slices, 691 ));
            rec.jspl := Convert_Jspl_Type( Get( slices, 692 ));
            rec.jsttwt := Convert( slices, 693, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.jsttwm := Convert_Jsttwm_Type( Get( slices, 694 ));
            rec.jssat1 := Convert_Jssat1_Type( Get( slices, 695 ));
            rec.jssat2 := Convert_Jbsat_Type( Get( slices, 696 ));
            rec.jssat4 := Convert_Jbsat_Type( Get( slices, 697 ));
            rec.jssat5 := Convert_Jbsat_Type( Get( slices, 698 ));
            rec.jssat := Convert_Jbsat_Type( Get( slices, 699 ));
            rec.jsbgd := Convert( slices, 700, ( -9, -8, -7, -2, -1 ) );
            rec.jsbgm := Convert_Cjsbgm_Type( Get( slices, 701 ));
            rec.jsbgy4 := Convert( slices, 702, ( -9, -8, -7, -2, -1 ) );
            rec.jblkcha := Convert_Jblkcha_Type( Get( slices, 703 ));
            rec.jbxpcha := Convert_Jblkcha_Type( Get( slices, 704 ));
            rec.jblkchb := Convert_Boolean_With_Missing( Get( slices, 705 ));
            rec.jbxpchb := Convert_Boolean_With_Missing( Get( slices, 706 ));
            rec.jblkchc := Convert_Boolean_With_Missing( Get( slices, 707 ));
            rec.jbxpchc := Convert_Boolean_With_Missing( Get( slices, 708 ));
            rec.jblkchd := Convert_Boolean_With_Missing( Get( slices, 709 ));
            rec.jbxpchd := Convert_Boolean_With_Missing( Get( slices, 710 ));
            rec.jblkche := Convert_Boolean_With_Missing( Get( slices, 711 ));
            rec.jbxpche := Convert_Boolean_With_Missing( Get( slices, 712 ));
            rec.jbstrna := Convert_Jbstrna_Type( Get( slices, 713 ));
            rec.jbstrnb := Convert_Jbstrna_Type( Get( slices, 714 ));
            rec.jbstrnc := Convert_Jbstrna_Type( Get( slices, 715 ));
            rec.jbstrnd := Convert_Jbstrna_Type( Get( slices, 716 ));
            rec.rach12 := Convert_Hhch12_Type( Get( slices, 717 ));
            rec.jbchc1 := Convert_Jbchc1_Type( Get( slices, 718 ));
            rec.jbchc2 := Convert_Jbchc2_Type( Get( slices, 719 ));
            rec.jbchc3 := Convert_Jbchc3_Type( Get( slices, 720 ));
            rec.xpchcf := Convert_Xpchcf_Type( Get( slices, 721 ));
            rec.xpchc := Convert( slices, 722, ( -9, -8, -7, -2, -1 ) );
            rec.huxpch := Convert_Huxpch_Type( Get( slices, 723 ));
            rec.hunurs := Convert_Hunurs_Type( Get( slices, 724 ));
            rec.julk1 := Convert_Aidpl1_Type( Get( slices, 725 ));
            rec.julk4 := Convert_Bscon_Type( Get( slices, 726 ));
            rec.julka := Convert_Boolean_With_Missing( Get( slices, 727 ));
            rec.julkb := Convert_Boolean_With_Missing( Get( slices, 728 ));
            rec.julkc := Convert_Boolean_With_Missing( Get( slices, 729 ));
            rec.julkd := Convert_Boolean_With_Missing( Get( slices, 730 ));
            rec.julke := Convert_Boolean_With_Missing( Get( slices, 731 ));
            rec.julkjb := Convert_Aidpl1_Type( Get( slices, 732 ));
            rec.jubgn := Convert_Boolean_With_Missing( Get( slices, 733 ));
            rec.juspec := Convert_Juspec_Type( Get( slices, 734 ));
            rec.jusoc := Convert( slices, 735, ( -9, -8, -7, -2, -1 ) );
            rec.jusoc00 := Convert( slices, 736, ( -9, -8, -7, -2, -1 ) );
            rec.juhrsx := Convert( slices, 737, ( -9, -8, -7, -2, -1 ) );
            rec.jupayx := Convert( slices, 738, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jupayl := Convert( slices, 739, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.juhrsl := Convert( slices, 740, ( -9, -8, -7, -2, -1 ) );
            rec.eprosh := Convert_Cohxpm2_Type( Get( slices, 741 ));
            rec.jbasp1 := Convert_Jbasp1_Type( Get( slices, 742 ));
            rec.jbasp2 := Convert_Jbasp1_Type( Get( slices, 743 ));
            rec.jblky1 := Convert_Jblky1_Type( Get( slices, 744 ));
            rec.jblky2 := Convert_Jblky1_Type( Get( slices, 745 ));
            rec.eaage := Convert_Eaage_Type( Get( slices, 746 ));
            rec.jbub := Convert_Bscon_Type( Get( slices, 747 ));
            rec.jbuby := Convert_Jbuby_Type( Get( slices, 748 ));
            rec.j2has := Convert_Aidpl1_Type( Get( slices, 749 ));
            rec.j2soc := Convert( slices, 750, ( -9, -8, -7, -2, -1 ) );
            rec.j2soc00 := Convert( slices, 751, ( -9, -8, -7, -2, -1 ) );
            rec.j2semp := Convert_J2semp_Type( Get( slices, 752 ));
            rec.j2hrs := Convert( slices, 753, ( -9, -8, -7, -2, -1 ) );
            rec.j2pay := Convert( slices, 754, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ivea := Convert_Ivda_Type( Get( slices, 755 ));
            rec.iveb := Convert_Ivdb_Type( Get( slices, 756 ));
            rec.ivec := Convert_Ivec_Type( Get( slices, 757 ));
            rec.ived := Convert_Ivdd_Type( Get( slices, 758 ));
            rec.ivee := Convert_Ivee_Type( Get( slices, 759 ));
            rec.nemst := Convert_Nemst_Type( Get( slices, 760 ));
            rec.cjsbgd := Convert( slices, 761, ( -9, -8, -7, -2, -1 ) );
            rec.cjsbgm := Convert_Cjsbgm_Type( Get( slices, 762 ));
            rec.cjsbgy4 := Convert( slices, 763, ( -9, -8, -7, -2, -1 ) );
            rec.cjsbly := Convert_Cjsbly_Type( Get( slices, 764 ));
            rec.njbs := Convert( slices, 765, ( -9, -8, -7 ) );
            rec.jbhad := Convert_Aidpl1_Type( Get( slices, 766 ));
            rec.jlend4 := Convert( slices, 767, ( -9, -8, -7, -2, -1 ) );
            rec.jlsoc := Convert( slices, 768, ( -9, -8, -7, -2, -1 ) );
            rec.jlsoc00 := Convert( slices, 769, ( -9, -8, -7, -2, -1 ) );
            rec.jlsic92 := Convert( slices, 770, ( -9, -8, -7 ) );
            rec.jlsemp := Convert_J2semp_Type( Get( slices, 771 ));
            rec.jlboss := Convert_Aidpl1_Type( Get( slices, 772 ));
            rec.jlmngr := Convert_Jlmngr_Type( Get( slices, 773 ));
            rec.jlsize := Convert_Jlsize_Type( Get( slices, 774 ));
            rec.ivja := Convert_Ivda_Type( Get( slices, 775 ));
            rec.ivjb := Convert_Ivdb_Type( Get( slices, 776 ));
            rec.ivjc := Convert_Ivec_Type( Get( slices, 777 ));
            rec.ivjd := Convert_Ivdd_Type( Get( slices, 778 ));
            rec.ivje := Convert_Ivee_Type( Get( slices, 779 ));
            rec.opsoca := Convert_Ophla_Type( Get( slices, 780 ));
            rec.opsocb := Convert_Opsocb_Type( Get( slices, 781 ));
            rec.opsocc := Convert_Ophlb_Type( Get( slices, 782 ));
            rec.opsocd := Convert_Opsocd_Type( Get( slices, 783 ));
            rec.opsoce := Convert_Opsocd_Type( Get( slices, 784 ));
            rec.opsocf := Convert_Opsocd_Type( Get( slices, 785 ));
            rec.vote1 := Convert_Aidpl1_Type( Get( slices, 786 ));
            rec.vote2 := Convert_Aidpl1_Type( Get( slices, 787 ));
            rec.vote3 := Convert_Vote3_Type( Get( slices, 788 ));
            rec.vote4 := Convert_Vote3_Type( Get( slices, 789 ));
            rec.vote5 := Convert_Vote5_Type( Get( slices, 790 ));
            rec.vote7 := Convert_Vote7_Type( Get( slices, 791 ));
            rec.vote8 := Convert_Vote8_Type( Get( slices, 792 ));
            rec.vote6 := Convert_Vote6_Type( Get( slices, 793 ));
            rec.nivt1 := Convert_Nivt1_Type( Get( slices, 794 ));
            rec.nivt2 := Convert_Nivt2_Type( Get( slices, 795 ));
            rec.lacta := Convert_Lacta_Type( Get( slices, 796 ));
            rec.lactb := Convert_Lacta_Type( Get( slices, 797 ));
            rec.lactc := Convert_Lacta_Type( Get( slices, 798 ));
            rec.lactd := Convert_Lacta_Type( Get( slices, 799 ));
            rec.lacte := Convert_Lacta_Type( Get( slices, 800 ));
            rec.lactf := Convert_Lacta_Type( Get( slices, 801 ));
            rec.lacth := Convert_Lacta_Type( Get( slices, 802 ));
            rec.lacti := Convert_Lacta_Type( Get( slices, 803 ));
            rec.lactj := Convert_Lacta_Type( Get( slices, 804 ));
            rec.lactk := Convert_Lacta_Type( Get( slices, 805 ));
            rec.lactl := Convert_Lacta_Type( Get( slices, 806 ));
            rec.frna := Convert_Frna_Type( Get( slices, 807 ));
            rec.frnb := Convert_Frna_Type( Get( slices, 808 ));
            rec.frnc := Convert_Coh1mr_Type( Get( slices, 809 ));
            rec.oprlg1 := Convert_Oprlg1_Type( Get( slices, 810 ));
            rec.oprlg2 := Convert_Oprlg2_Type( Get( slices, 811 ));
            rec.oprlg3 := Convert_Oprlg3_Type( Get( slices, 812 ));
            rec.ivva := Convert_Ivva_Type( Get( slices, 813 ));
            rec.ivvb := Convert_Ivdb_Type( Get( slices, 814 ));
            rec.ivvc := Convert_Ivfc_Type( Get( slices, 815 ));
            rec.ivvd := Convert_Ivdd_Type( Get( slices, 816 ));
            rec.ivve := Convert_Ivee_Type( Get( slices, 817 ));
            rec.f101 := Convert_F101_Type( Get( slices, 818 ));
            rec.f102 := Convert_F102_Type( Get( slices, 819 ));
            rec.f103 := Convert_F103_Type( Get( slices, 820 ));
            rec.f104 := Convert( slices, 821, ( -9, -8, -7 ) );
            rec.f105 := Convert_F105_Type( Get( slices, 822 ));
            rec.f106 := Convert_F106_Type( Get( slices, 823 ));
            rec.f107 := Convert_F107_Type( Get( slices, 824 ));
            rec.f116 := Convert_F116_Type( Get( slices, 825 ));
            rec.f118 := Convert_F118_Type( Get( slices, 826 ));
            rec.f119 := Convert_F119_Type( Get( slices, 827 ));
            rec.f121 := Convert_F121_Type( Get( slices, 828 ));
            rec.f122 := Convert_F122_Type( Get( slices, 829 ));
            rec.f125 := Convert_F125_Type( Get( slices, 830 ));
            rec.f126 := Convert_F126_Type( Get( slices, 831 ));
            rec.f127 := Convert_F127_Type( Get( slices, 832 ));
            rec.f128 := Convert_F128_Type( Get( slices, 833 ));
            rec.f132 := Convert_F132_Type( Get( slices, 834 ));
            rec.f135 := Convert_F135_Type( Get( slices, 835 ));
            rec.f136 := Convert_F136_Type( Get( slices, 836 ));
            rec.f137 := Convert_F137_Type( Get( slices, 837 ));
            rec.f138 := Convert_F138_Type( Get( slices, 838 ));
            rec.f139 := Convert_F139_Type( Get( slices, 839 ));
            rec.f140 := Convert_F140_Type( Get( slices, 840 ));
            rec.f141 := Convert_F141_Type( Get( slices, 841 ));
            rec.f142 := Convert_F142_Type( Get( slices, 842 ));
            rec.f143 := Convert_F143_Type( Get( slices, 843 ));
            rec.f151 := Convert_F151_Type( Get( slices, 844 ));
            rec.f152 := Convert_F152_Type( Get( slices, 845 ));
            rec.f153 := Convert_F153_Type( Get( slices, 846 ));
            rec.f154 := Convert_F154_Type( Get( slices, 847 ));
            rec.f155 := Convert_F155_Type( Get( slices, 848 ));
            rec.f156 := Convert_F156_Type( Get( slices, 849 ));
            rec.f157 := Convert_F157_Type( Get( slices, 850 ));
            rec.f158 := Convert_F158_Type( Get( slices, 851 ));
            rec.f159 := Convert_F159_Type( Get( slices, 852 ));
            rec.nf1 := Convert( slices, 853, ( -9, -8, -7, -2, -1 ) );
            rec.nipens := Convert_Cbagef_Type( Get( slices, 854 ));
            rec.niserps := Convert_Cbagef_Type( Get( slices, 855 ));
            rec.fisit := Convert_Fisit_Type( Get( slices, 856 ));
            rec.fisitc := Convert( slices, 857, ( -9, -8, -7, -2, -1 ) );
            rec.fisity := Convert_Fisity_Type( Get( slices, 858 ));
            rec.fisitx := Convert( slices, 859, ( -9, -8, -7, -2, -1 ) );
            rec.fiyrdia := Convert( slices, 860, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.fiyrdb1 := Convert_Boolean_With_Missing( Get( slices, 861 ));
            rec.fiyrdb2 := Convert_Boolean_With_Missing( Get( slices, 862 ));
            rec.fiyrdb3 := Convert_Boolean_With_Missing( Get( slices, 863 ));
            rec.fiyrdb4 := Convert_Boolean_With_Missing( Get( slices, 864 ));
            rec.fiyrdb5 := Convert_Boolean_With_Missing( Get( slices, 865 ));
            rec.fiyrdb6 := Convert_Boolean_With_Missing( Get( slices, 866 ));
            rec.save := Convert_Aidpl1_Type( Get( slices, 867 ));
            rec.saved := Convert( slices, 868, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.savey1 := Convert_Savey1_Type( Get( slices, 869 ));
            rec.savey2 := Convert_Savey1_Type( Get( slices, 870 ));
            rec.savreg := Convert_Savreg_Type( Get( slices, 871 ));
            rec.savlt := Convert_Savlt_Type( Get( slices, 872 ));
            rec.pppen := Convert_Aidpl1_Type( Get( slices, 873 ));
            rec.penb4 := Convert_Penb4_Type( Get( slices, 874 ));
            rec.penb4y4 := Convert( slices, 875, ( -9, -8, -7, -2, -1 ) );
            rec.penb4v := Convert( slices, 876, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.penb4w := Convert( slices, 877, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.penyr4 := Convert( slices, 878, ( -9, -8, -7, -2, -1 ) );
            rec.penadd := Convert_Aidpl1_Type( Get( slices, 879 ));
            rec.penadv := Convert( slices, 880, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.penadw := Convert( slices, 881, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.windf := Convert_Debt_Type( Get( slices, 882 ));
            rec.windfa := Convert_Windfa_Type( Get( slices, 883 ));
            rec.windfay := Convert( slices, 884, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windfb := Convert_Windfb_Type( Get( slices, 885 ));
            rec.windfby := Convert( slices, 886, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windfc := Convert_Windfc_Type( Get( slices, 887 ));
            rec.windfcy := Convert( slices, 888, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windfd := Convert_Windfd_Type( Get( slices, 889 ));
            rec.windfdy := Convert( slices, 890, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windff := Convert_Windff_Type( Get( slices, 891 ));
            rec.windffy := Convert( slices, 892, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windfg := Convert_Windfg_Type( Get( slices, 893 ));
            rec.windfgy := Convert( slices, 894, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windfh := Convert_Nisjsa_Type( Get( slices, 895 ));
            rec.windfhy := Convert( slices, 896, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.xpmeal := Convert_Xpleis_Type( Get( slices, 897 ));
            rec.xpleis := Convert_Xpleis_Type( Get( slices, 898 ));
            rec.ftexhh := Convert_Aidpl1_Type( Get( slices, 899 ));
            rec.ftexa := Convert_Ftexa_Type( Get( slices, 900 ));
            rec.ftexa1 := Convert_Ftexa1_Type( Get( slices, 901 ));
            rec.ftexa2 := Convert_Ftexa2_Type( Get( slices, 902 ));
            rec.ftexa3 := Convert_Ftexa3_Type( Get( slices, 903 ));
            rec.ftexa4 := Convert_Ftexa4_Type( Get( slices, 904 ));
            rec.ftexa5 := Convert_Ftexa5_Type( Get( slices, 905 ));
            rec.ftexa6 := Convert_Ftexa6_Type( Get( slices, 906 ));
            rec.ftexav := Convert( slices, 907, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ftexaw := Convert( slices, 908, ( -9.0, -8.0, -7.0, -5.0, -3.0, -2.0, -1.0 ) );
            rec.ftexb := Convert_Ftexb_Type( Get( slices, 909 ));
            rec.ftexb1 := Convert_Ftexa1_Type( Get( slices, 910 ));
            rec.ftexb2 := Convert_Ftexa2_Type( Get( slices, 911 ));
            rec.ftexb3 := Convert_Ftexa3_Type( Get( slices, 912 ));
            rec.ftexb4 := Convert_Ftexa4_Type( Get( slices, 913 ));
            rec.ftexb5 := Convert_Ftexa5_Type( Get( slices, 914 ));
            rec.ftexb6 := Convert_Ftexa6_Type( Get( slices, 915 ));
            rec.ftexbv := Convert( slices, 916, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ftexbw := Convert( slices, 917, ( -9.0, -8.0, -7.0, -5.0, -3.0, -2.0, -1.0 ) );
            rec.ftexc := Convert_Ftexc_Type( Get( slices, 918 ));
            rec.ftexc1 := Convert_Ftexa1_Type( Get( slices, 919 ));
            rec.ftexc2 := Convert_Ftexa2_Type( Get( slices, 920 ));
            rec.ftexc3 := Convert_Ftexa3_Type( Get( slices, 921 ));
            rec.ftexc4 := Convert_Ftexa4_Type( Get( slices, 922 ));
            rec.ftexc5 := Convert_Ftexa5_Type( Get( slices, 923 ));
            rec.ftexc6 := Convert_Ftexa6_Type( Get( slices, 924 ));
            rec.ftexcv := Convert( slices, 925, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ftexcw := Convert( slices, 926, ( -9.0, -8.0, -7.0, -5.0, -3.0, -2.0, -1.0 ) );
            rec.spinhh := Convert_Hhch12_Type( Get( slices, 927 ));
            rec.hubuys := Convert_Hubuys_Type( Get( slices, 928 ));
            rec.hufrys := Convert_Hubuys_Type( Get( slices, 929 ));
            rec.humops := Convert_Hubuys_Type( Get( slices, 930 ));
            rec.huiron := Convert_Hubuys_Type( Get( slices, 931 ));
            rec.hhch12 := Convert_Hhch12_Type( Get( slices, 932 ));
            rec.husits := Convert_Husits_Type( Get( slices, 933 ));
            rec.howlng := Convert( slices, 934, ( -9, -8, -7, -3, -2, -1 ) );
            rec.caruse := Convert_Caruse_Type( Get( slices, 935 ));
            rec.mobuse := Convert_Mobuse_Type( Get( slices, 936 ));
            rec.event1 := Convert( slices, 937, ( -9, -8, -7, -1 ) );
            rec.event1s := Convert( slices, 938, ( -9, -8, -7 ) );
            rec.event2 := Convert( slices, 939, ( -9, -8, -7, -1 ) );
            rec.event2s := Convert( slices, 940, ( -9, -8, -7 ) );
            rec.event3 := Convert( slices, 941, ( -9, -8, -7, -1 ) );
            rec.event3s := Convert( slices, 942, ( -9, -8, -7 ) );
            rec.event4 := Convert( slices, 943, ( -9, -8, -7, -1 ) );
            rec.event4s := Convert( slices, 944, ( -9, -8, -7 ) );
            rec.ivfa := Convert_Ivda_Type( Get( slices, 945 ));
            rec.ivfb := Convert_Ivdb_Type( Get( slices, 946 ));
            rec.ivfc := Convert_Ivfc_Type( Get( slices, 947 ));
            rec.ivfd := Convert_Ivdd_Type( Get( slices, 948 ));
            rec.ivfe := Convert_Ivee_Type( Get( slices, 949 ));
            rec.ivfoih := Convert( slices, 950, ( -9, -8 ) );
            rec.ivfoim := Convert( slices, 951, ( -9, -8 ) );
            rec.ivsc := Convert_Ivsc_Type( Get( slices, 952 ));
            rec.iv1 := Convert_Hhch12_Type( Get( slices, 953 ));
            rec.iv2 := Convert_Iv2_Type( Get( slices, 954 ));
            rec.iv4 := Convert_Iv4_Type( Get( slices, 955 ));
            rec.iv5 := Convert_Iv5_Type( Get( slices, 956 ));
            rec.iv5aa := Convert_Iv5aa_Type( Get( slices, 957 ));
            rec.iv5ab := Convert_Iv5ab_Type( Get( slices, 958 ));
            rec.iv5ac := Convert_Iv5ac_Type( Get( slices, 959 ));
            rec.iv6a := Convert_Hhch12_Type( Get( slices, 960 ));
            rec.iv6b := Convert_Hhch12_Type( Get( slices, 961 ));
            rec.iv6c := Convert_Hhch12_Type( Get( slices, 962 ));
            rec.iv6d := Convert_Hhch12_Type( Get( slices, 963 ));
            rec.iv6e := Convert_Hhch12_Type( Get( slices, 964 ));
            rec.iv6f := Convert_Hhch12_Type( Get( slices, 965 ));
            rec.iv7 := Convert( slices, 966, ( -9, -8, -7 ) );
            rec.ghqa := Convert_Ghqa_Type( Get( slices, 967 ));
            rec.ghqb := Convert_Ghqb_Type( Get( slices, 968 ));
            rec.ghqc := Convert_Ghqc_Type( Get( slices, 969 ));
            rec.ghqd := Convert_Ghqc_Type( Get( slices, 970 ));
            rec.ghqe := Convert_Ghqe_Type( Get( slices, 971 ));
            rec.ghqf := Convert_Ghqe_Type( Get( slices, 972 ));
            rec.ghqg := Convert_Ghqc_Type( Get( slices, 973 ));
            rec.ghqh := Convert_Ghqc_Type( Get( slices, 974 ));
            rec.ghqi := Convert_Ghqb_Type( Get( slices, 975 ));
            rec.ghqj := Convert_Ghqe_Type( Get( slices, 976 ));
            rec.ghqk := Convert_Ghqe_Type( Get( slices, 977 ));
            rec.ghql := Convert_Ghqc_Type( Get( slices, 978 ));
            rec.opfamo := Convert_Opfamo_Type( Get( slices, 979 ));
            rec.opfaml := Convert_Opfamj_Type( Get( slices, 980 ));
            rec.opfamp := Convert_Opfamo_Type( Get( slices, 981 ));
            rec.opfamq := Convert_Opfamq_Type( Get( slices, 982 ));
            rec.opfamk := Convert_Opfamj_Type( Get( slices, 983 ));
            rec.opfamr := Convert_Opfamr_Type( Get( slices, 984 ));
            rec.lfsat1 := Convert_Lfsat1_Type( Get( slices, 985 ));
            rec.lfsat2 := Convert_Lfsat1_Type( Get( slices, 986 ));
            rec.lfsat3 := Convert_Lfsat1_Type( Get( slices, 987 ));
            rec.lfsat4 := Convert_Lfsat1_Type( Get( slices, 988 ));
            rec.lfsat5 := Convert_Lfsat1_Type( Get( slices, 989 ));
            rec.lfsat6 := Convert_Lfsat1_Type( Get( slices, 990 ));
            rec.lfsat7 := Convert_Lfsat1_Type( Get( slices, 991 ));
            rec.lfsat8 := Convert_Lfsat1_Type( Get( slices, 992 ));
            rec.lfsato := Convert_Lfsat1_Type( Get( slices, 993 ));
            rec.lfsatl := Convert( slices, 994, ( -9, -8, -7, -2, -1 ) );
            rec.netsx1 := Convert_Netsx1_Type( Get( slices, 995 ));
            rec.netsx2 := Convert_Netsx1_Type( Get( slices, 996 ));
            rec.netsx3 := Convert_Netsx1_Type( Get( slices, 997 ));
            rec.net1wr := Convert_Aidpl1_Type( Get( slices, 998 ));
            rec.net2wr := Convert_Aidpl1_Type( Get( slices, 999 ));
            rec.net3wr := Convert_Aidpl1_Type( Get( slices, 1000 ));
            rec.net1rl := Convert_Net1rl_Type( Get( slices, 1001 ));
            rec.net2rl := Convert_Net1rl_Type( Get( slices, 1002 ));
            rec.net3rl := Convert_Net1rl_Type( Get( slices, 1003 ));
            rec.net1ag := Convert( slices, 1004, ( -9, -8, -7, -2, -1 ) );
            rec.net2ag := Convert( slices, 1005, ( -9, -8, -7, -2, -1 ) );
            rec.net3ag := Convert( slices, 1006, ( -9, -8, -7, -2, -1 ) );
            rec.net1kn := Convert_Net1kn_Type( Get( slices, 1007 ));
            rec.net2kn := Convert_Net1kn_Type( Get( slices, 1008 ));
            rec.net3kn := Convert_Net1kn_Type( Get( slices, 1009 ));
            rec.net1ph := Convert_Net1ph_Type( Get( slices, 1010 ));
            rec.net2ph := Convert_Net1ph_Type( Get( slices, 1011 ));
            rec.net3ph := Convert_Net1ph_Type( Get( slices, 1012 ));
            rec.net1lv := Convert_Net1lv_Type( Get( slices, 1013 ));
            rec.net2lv := Convert_Net1lv_Type( Get( slices, 1014 ));
            rec.net3lv := Convert_Net1lv_Type( Get( slices, 1015 ));
            rec.net1jb := Convert_Net1jb_Type( Get( slices, 1016 ));
            rec.net2jb := Convert_Net1jb_Type( Get( slices, 1017 ));
            rec.net3jb := Convert_Net1jb_Type( Get( slices, 1018 ));
            rec.net1et := Convert_Net1et_Type( Get( slices, 1019 ));
            rec.net2et := Convert_Net1et_Type( Get( slices, 1020 ));
            rec.net3et := Convert_Net1et_Type( Get( slices, 1021 ));
            rec.netsoc := Convert( slices, 1022, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.prrs2i := Convert_Prrs2i_Type( Get( slices, 1023 ));
            rec.pripn := Convert( slices, 1024, ( -9, -8 ) );
            rec.prwhy := Convert_Prwhy_Type( Get( slices, 1025 ));
            rec.pplevr := Convert_Plever_Type( Get( slices, 1026 ));
            rec.presbgm := Convert_Presbgm_Type( Get( slices, 1027 ));
            rec.presby4 := Convert( slices, 1028, ( -9, -8, -7, -2, -1 ) );
            rec.presly := Convert_Presly_Type( Get( slices, 1029 ));
            rec.prfehq := Convert_Prfehq_Type( Get( slices, 1030 ));
            rec.prsehq := Convert_Prsehq_Type( Get( slices, 1031 ));
            rec.prjbft := Convert_Prjbft_Type( Get( slices, 1032 ));
            rec.prjbbgm := Convert_Presbgm_Type( Get( slices, 1033 ));
            rec.prjbby4 := Convert( slices, 1034, ( -9, -8, -7, -2, -1 ) );
            rec.prjbly := Convert_Prjbly_Type( Get( slices, 1035 ));
            rec.prearn := Convert_Prearn_Type( Get( slices, 1036 ));
            rec.prf101 := Convert_Prf101_Type( Get( slices, 1037 ));
            rec.prf102 := Convert_Prf102_Type( Get( slices, 1038 ));
            rec.prf116 := Convert_Prf116_Type( Get( slices, 1039 ));
            rec.prf131 := Convert_Prf131_Type( Get( slices, 1040 ));
            rec.prf135 := Convert_Prf135_Type( Get( slices, 1041 ));
            rec.prf137 := Convert_Prf137_Type( Get( slices, 1042 ));
            rec.prf139 := Convert_Prf139_Type( Get( slices, 1043 ));
            rec.prf125 := Convert_Prf125_Type( Get( slices, 1044 ));
            rec.prf141 := Convert_Prf141_Type( Get( slices, 1045 ));
            rec.prf143 := Convert_Prf143_Type( Get( slices, 1046 ));
            rec.prf107 := Convert_Prf107_Type( Get( slices, 1047 ));
            rec.prfirn := Convert_Prfirn_Type( Get( slices, 1048 ));
            rec.prfitb := Convert_Prfitb_Type( Get( slices, 1049 ));
            rec.ivpa := Convert_Ivpa_Type( Get( slices, 1050 ));
            rec.ivpb := Convert_Ivpb_Type( Get( slices, 1051 ));
            rec.ivpc := Convert_Ivpc_Type( Get( slices, 1052 ));
            rec.ivpd := Convert_Ivpd_Type( Get( slices, 1053 ));
            rec.ivpe := Convert_Ivpe_Type( Get( slices, 1054 ));
            rec.telwhy := Convert_Telwhy_Type( Get( slices, 1055 ));
            rec.tlfiyrl := Convert( slices, 1056, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.tlfiyr := Convert( slices, 1057, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.pid := Convert( slices, 1058 );
            rec.iviolw := Convert_Iviolw_Type( Get( slices, 1059 ));
            rec.hhmem := Convert_Hhmem_Type( Get( slices, 1060 ));
            rec.newhy := Convert_Newhy_Type( Get( slices, 1061 ));
            rec.nemnjn := Convert_Nemnjn_Type( Get( slices, 1062 ));
            rec.neyrjn4 := Convert( slices, 1063, ( -9, -8, -7, -2, -1 ) );
            rec.ivfio := Convert_Ivfio_Type( Get( slices, 1064 ));
            rec.iodc := Convert_Iodc_Type( Get( slices, 1065 ));
            rec.memorig := Convert_Memorig_Type( Get( slices, 1066 ));
            rec.hgr2r := Convert_Hgr2r_Type( Get( slices, 1067 ));
            rec.hgsex := Convert_Hgsex_Type( Get( slices, 1068 ));
            rec.hgbm := Convert_Hgbm_Type( Get( slices, 1069 ));
            rec.hgby := Convert( slices, 1070, ( -2, -1 ) );
            rec.mastat := Convert_Mastat_Type( Get( slices, 1071 ));
            rec.hgspn := Convert( slices, 1072, ( -9, -8, -2, -1 ) );
            rec.hgemp := Convert_Hgemp_Type( Get( slices, 1073 ));
            rec.hgfno := Convert( slices, 1074, ( -9, -8, -2, -1 ) );
            rec.hgmno := Convert( slices, 1075, ( -9, -8, -2, -1 ) );
            rec.hgra := Convert( slices, 1076, ( -9, -8, -2, -1 ) );
            rec.age := Convert( slices, 1077, ( -9, -8 ) );
            rec.age12 := Convert( slices, 1078, ( -9, -8 ) );
            rec.butype := Convert_Butype_Type( Get( slices, 1079 ));
            rec.buno := Convert( slices, 1080, ( -9, -8 ) );
            rec.nchild := Convert( slices, 1081, ( -9, -8 ) );
            rec.hoh := Convert_Hoh_Type( Get( slices, 1082 ));
            rec.rach16 := Convert_Hhch12_Type( Get( slices, 1083 ));
            rec.sampst := Convert_Sampst_Type( Get( slices, 1084 ));
            rec.movest := Convert_Movest_Type( Get( slices, 1085 ));
            rec.qfx := Convert_Aidpl1_Type( Get( slices, 1086 ));
            rec.qfxc := Convert_Qfc_Type( Get( slices, 1087 ));
            rec.qfxd := Convert_Qfd_Type( Get( slices, 1088 ));
            rec.qfxe := Convert_Qfe_Type( Get( slices, 1089 ));
            rec.qfxf := Convert_Qff_Type( Get( slices, 1090 ));
            rec.qfxg := Convert_Qfg_Type( Get( slices, 1091 ));
            rec.qfxh := Convert_Qfh_Type( Get( slices, 1092 ));
            rec.qfxk := Convert_Qfk_Type( Get( slices, 1093 ));
            rec.qfxl := Convert_Qfl_Type( Get( slices, 1094 ));
            rec.qfxm := Convert_Qfm_Type( Get( slices, 1095 ));
            rec.qfxn := Convert_Qfn_Type( Get( slices, 1096 ));
            rec.qfxo := Convert_Qfxo_Type( Get( slices, 1097 ));
            rec.qfxp := Convert_Qfxp_Type( Get( slices, 1098 ));
            rec.qfxq := Convert_Qfxq_Type( Get( slices, 1099 ));
            rec.qfxr := Convert_Qfxr_Type( Get( slices, 1100 ));
            rec.qfedx := Convert_Aidpl1_Type( Get( slices, 1101 ));
            rec.qfedxa := Convert_Qfedd_Type( Get( slices, 1102 ));
            rec.nqfexa := Convert( slices, 1103, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxb := Convert_Qfede_Type( Get( slices, 1104 ));
            rec.nqfexb := Convert( slices, 1105, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxc := Convert_Qfedj_Type( Get( slices, 1106 ));
            rec.nqfexc := Convert( slices, 1107, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxg := Convert_Qfedm_Type( Get( slices, 1108 ));
            rec.nqfexg := Convert( slices, 1109, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxh := Convert_Qfedxh_Type( Get( slices, 1110 ));
            rec.nqfexh := Convert( slices, 1111, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxi := Convert_Qfedo_Type( Get( slices, 1112 ));
            rec.nqfexi := Convert( slices, 1113, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxj := Convert( slices, 1114, ( -9, -8, -7 ) );
            rec.nqfexj := Convert( slices, 1115, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxl := Convert_Qfedt_Type( Get( slices, 1116 ));
            rec.nqfexl := Convert( slices, 1117, ( -9, -8, -7, -2, -1 ) );
            rec.region := Convert_Region_Type( Get( slices, 1118 ));
            rec.hhsize := Convert( slices, 1119, ( -9, -8 ) );
            rec.hhtype := Convert_Hhtype_Type( Get( slices, 1120 ));
            rec.tenure := Convert_Tenure_Type( Get( slices, 1121 ));
            rec.qfedhi := Convert_Qfedhi_Type( Get( slices, 1122 ));
            rec.qfvoc := Convert_Qfvoc_Type( Get( slices, 1123 ));
            rec.qfachi := Convert_Qfachi_Type( Get( slices, 1124 ));
            rec.jbft := Convert_Jbft_Type( Get( slices, 1125 ));
            rec.payg := Convert( slices, 1126, ( -9.0, -8.0, -7.0 ) );
            rec.payn := Convert( slices, 1127, ( -9.0, -8.0, -7.0 ) );
            rec.paygu := Convert( slices, 1128, ( -9.0, -8.0, -7.0 ) );
            rec.paynu := Convert( slices, 1129, ( -9.0, -8.0, -7.0 ) );
            rec.paygty := Convert( slices, 1130, ( -9.0, -8.0, -7.0 ) );
            rec.paygly := Convert( slices, 1131, ( -9.0, -8.0, -7.0 ) );
            rec.paynty := Convert( slices, 1132, ( -9.0, -8.0, -7.0 ) );
            rec.paynly := Convert( slices, 1133, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jsprof := Convert( slices, 1134, ( -9.0, -8.0, -7.0 ) );
            rec.jsloss := Convert( slices, 1135, ( -9.0, -8.0, -7.0 ) );
            rec.jspayg := Convert( slices, 1136, ( -9.0, -8.0, -7.0 ) );
            rec.cjsten := Convert( slices, 1137, ( -9.0, -8.0, -7.0 ) );
            rec.cjswk9 := Convert( slices, 1138, ( -9.0, -8.0, -7.0 ) );
            rec.jlid := Convert_Jlid_Type( Get( slices, 1139 ));
            rec.jlyid := Convert_Jlyid_Type( Get( slices, 1140 ));
            rec.jtyid := Convert_Jtyid_Type( Get( slices, 1141 ));
            rec.jbseg := Convert_Jbseg_Type( Get( slices, 1142 ));
            rec.jbgold := Convert( slices, 1143, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbrgsc := Convert_Jbrgsc_Type( Get( slices, 1144 ));
            rec.jbisco := Convert( slices, 1145 );
            rec.jbcssm := Convert( slices, 1146, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbcssf := Convert( slices, 1147, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbhgs := Convert( slices, 1148, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbsec := Convert_Jbsec_Type( Get( slices, 1149 ));
            rec.njbwks := Convert( slices, 1150, ( -9.0, -8.0, -7.0 ) );
            rec.njuwks := Convert( slices, 1151, ( -9.0, -8.0, -7.0 ) );
            rec.njiwks := Convert( slices, 1152, ( -9.0, -8.0, -7.0 ) );
            rec.njbnew := Convert( slices, 1153, ( -9, -8, -7 ) );
            rec.njbsp := Convert( slices, 1154, ( -9, -8, -7 ) );
            rec.njusp := Convert( slices, 1155, ( -9, -8, -7 ) );
            rec.njisp := Convert( slices, 1156, ( -9, -8, -7 ) );
            rec.jbstatl := Convert( slices, 1157, ( -9, -8, -7, -2, -1 ) );
            rec.jbstatt := Convert( slices, 1158, ( -9, -8, -7, -2, -1 ) );
            rec.jbsocly := Convert( slices, 1159, ( -9, -8, -7 ) );
            rec.jlseg := Convert_Jlseg_Type( Get( slices, 1160 ));
            rec.jlgold := Convert( slices, 1161, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlrgsc := Convert_Jlrgsc_Type( Get( slices, 1162 ));
            rec.jlisco := Convert( slices, 1163 );
            rec.jlcssm := Convert( slices, 1164, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlcssf := Convert( slices, 1165, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlhgs := Convert( slices, 1166, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlsec := Convert_Jlsec_Type( Get( slices, 1167 ));
            rec.vote := Convert_Vote_Type( Get( slices, 1168 ));
            rec.fiyrdic := Convert( slices, 1169, ( -9.0, -8.0, -7.0 ) );
            rec.fimnp := Convert( slices, 1170, ( -9.0, -8.0, -7.0 ) );
            rec.fimnb := Convert( slices, 1171, ( -9.0, -8.0, -7.0 ) );
            rec.fimni := Convert( slices, 1172, ( -9.0, -8.0, -7.0 ) );
            rec.fimnt := Convert( slices, 1173, ( -9.0, -8.0, -7.0 ) );
            rec.fimnl := Convert( slices, 1174, ( -9.0, -8.0, -7.0 ) );
            rec.fimnnl := Convert( slices, 1175, ( -9.0, -8.0, -7.0 ) );
            rec.fimn := Convert( slices, 1176, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrl := Convert( slices, 1177, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrnl := Convert( slices, 1178, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrp := Convert( slices, 1179, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrb := Convert( slices, 1180, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrt := Convert( slices, 1181, ( -9.0, -8.0, -7.0 ) );
            rec.fiyri := Convert( slices, 1182, ( -9.0, -8.0, -7.0 ) );
            rec.fiyr := Convert( slices, 1183, ( -9.0, -8.0, -7.0 ) );
            rec.fihhmn := Convert( slices, 1184, ( -9.0, -8.0, -7.0 ) );
            rec.hlghq1 := Convert( slices, 1185, ( -9, -8, -7 ) );
            rec.hlghq2 := Convert( slices, 1186, ( -9, -8, -7 ) );
            rec.spjb := Convert_Spjb_Type( Get( slices, 1187 ));
            rec.spsoc := Convert( slices, 1188, ( -9.0, -8.0 ) );
            rec.spjbhr := Convert( slices, 1189, ( -9, -8, -7 ) );
            rec.spjbot := Convert( slices, 1190, ( -9, -8, -7 ) );
            rec.sppayg := Convert( slices, 1191, ( -9.0, -8.0, -7.0 ) );
            rec.spjbyr := Convert( slices, 1192, ( -9, -8, -7 ) );
            rec.lrwght := Convert( slices, 1193 );
            rec.lewght := Convert( slices, 1194 );
            rec.xrwght := Convert( slices, 1195 );
            rec.xewght := Convert( slices, 1196 );
            rec.j2payi := Convert( slices, 1197, ( -9, -8, -7, -3, -2, -1 ) );
            rec.fiyrdii := Convert_Fiyrdii_Type( Get( slices, 1198 ));
            rec.prearni := Convert( slices, 1199, ( -9, -8, -2, -1 ) );
            rec.prfitbi := Convert_Prfitbi_Type( Get( slices, 1200 ));
            rec.paygui := Convert_Fimnbi_Type( Get( slices, 1201 ));
            rec.paynui := Convert_Fimnbi_Type( Get( slices, 1202 ));
            rec.paygti := Convert_Fimnbi_Type( Get( slices, 1203 ));
            rec.paygli := Convert_Fimnbi_Type( Get( slices, 1204 ));
            rec.paynti := Convert_Fimnbi_Type( Get( slices, 1205 ));
            rec.paynli := Convert_Fimnbi_Type( Get( slices, 1206 ));
            rec.jsprofi := Convert_Fimnbi_Type( Get( slices, 1207 ));
            rec.jspaygi := Convert_Fimnbi_Type( Get( slices, 1208 ));
            rec.fimnpi := Convert_Fimnbi_Type( Get( slices, 1209 ));
            rec.fimnbi := Convert_Fimnbi_Type( Get( slices, 1210 ));
            rec.fimnii := Convert_Fimnii_Type( Get( slices, 1211 ));
            rec.fimnti := Convert_Fimnii_Type( Get( slices, 1212 ));
            rec.fimnnli := Convert_Fimnbi_Type( Get( slices, 1213 ));
            rec.fimnli := Convert_Fimnbi_Type( Get( slices, 1214 ));
            rec.fimnthi := Convert_Fimnii_Type( Get( slices, 1215 ));
            rec.fiyrli := Convert_Fimnbi_Type( Get( slices, 1216 ));
            rec.fiyrnli := Convert_Fimnbi_Type( Get( slices, 1217 ));
            rec.fiyrpi := Convert_Fimnii_Type( Get( slices, 1218 ));
            rec.fiyrbi := Convert_Fimnbi_Type( Get( slices, 1219 ));
            rec.fiyrti := Convert_Fimnbi_Type( Get( slices, 1220 ));
            rec.fiyrii := Convert_Fimnbi_Type( Get( slices, 1221 ));
            rec.fiyeari := Convert_Fimnbi_Type( Get( slices, 1222 ));
            rec.sppaygi := Convert_Prfitbi_Type( Get( slices, 1223 ));
            rec.fihhmni := Convert_Fihhmni_Type( Get( slices, 1224 ));
            rec.mrjend := Convert( slices, 1225, ( -9, -8, -7, -3, -2, -1 ) );
            rec.mrjsoc := Convert( slices, 1226, ( -9, -8, -7, -3 ) );
            rec.mrjsic := Convert( slices, 1227, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjsic9 := Convert( slices, 1228, ( -9, -8, -2, -1 ) );
            rec.mrjsemp := Convert_Mrjsemp_Type( Get( slices, 1229 ));
            rec.mrjboss := Convert_Mrjboss_Type( Get( slices, 1230 ));
            rec.mrjmngr := Convert_Mrjmngr_Type( Get( slices, 1231 ));
            rec.mrjsize := Convert_Mrjsize_Type( Get( slices, 1232 ));
            rec.mrjseg := Convert_Maseg_Type( Get( slices, 1233 ));
            rec.mrjgold := Convert( slices, 1234, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjrgsc := Convert_Margsc_Type( Get( slices, 1235 ));
            rec.mrjisco := Convert( slices, 1236 );
            rec.mrjcssm := Convert( slices, 1237, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjcssf := Convert( slices, 1238, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjhgs := Convert( slices, 1239, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjsec := Convert_J1sec_Type( Get( slices, 1240 ));
            rec.paseg := Convert_Maseg_Type( Get( slices, 1241 ));
            rec.pagold := Convert( slices, 1242, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.pargsc := Convert_Margsc_Type( Get( slices, 1243 ));
            rec.paisco := Convert( slices, 1244 );
            rec.pacssm := Convert( slices, 1245, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.pacssf := Convert( slices, 1246, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.pahgs := Convert( slices, 1247, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.pasec := Convert_J1sec_Type( Get( slices, 1248 ));
            rec.maseg := Convert_Maseg_Type( Get( slices, 1249 ));
            rec.magold := Convert( slices, 1250, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.margsc := Convert_Margsc_Type( Get( slices, 1251 ));
            rec.maisco := Convert( slices, 1252 );
            rec.macssm := Convert( slices, 1253, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.macssf := Convert( slices, 1254, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mahgs := Convert( slices, 1255, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.masec := Convert_J1sec_Type( Get( slices, 1256 ));
            rec.j1seg := Convert_J1seg_Type( Get( slices, 1257 ));
            rec.j1gold := Convert( slices, 1258, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.j1rgsc := Convert_J1rgsc_Type( Get( slices, 1259 ));
            rec.j1isco := Convert( slices, 1260 );
            rec.j1cssm := Convert( slices, 1261, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.j1cssf := Convert( slices, 1262, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.j1hgs := Convert( slices, 1263, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.j1sec := Convert_J1sec_Type( Get( slices, 1264 ));
            rec.fimnsel := Convert_Fimnsel_Type( Get( slices, 1265 ));
            rec.xrwtuk1 := Convert( slices, 1266 );
            rec.xewtuk1 := Convert( slices, 1267 );
            rec.xrwtuk2 := Convert( slices, 1268 );
            rec.xewtuk2 := Convert( slices, 1269 );
            rec.lrwtsw1 := Convert( slices, 1270 );
            rec.lewtsw1 := Convert( slices, 1271 );
            rec.lrwtsw2 := Convert( slices, 1272 );
            rec.lewtsw2 := Convert( slices, 1273 );
            rec.lrwtuk1 := Convert( slices, 1274 );
            rec.lewtuk1 := Convert( slices, 1275 );
            rec.lrwtuk2 := Convert( slices, 1276 );
            rec.lewtuk2 := Convert( slices, 1277 );
            rec.sppid := Convert( slices, 1278 );
            rec.fpid := Convert( slices, 1279 );
            rec.mpid := Convert( slices, 1280 );
            rec.distmov := Convert( slices, 1281, ( -9.0, -8.0, -7.0 ) );
            rec.region2 := Convert_Region2_Type( Get( slices, 1282 ));
            rec.isced := Convert_Isced_Type( Get( slices, 1283 ));
            rec.casmin := Convert_Casmin_Type( Get( slices, 1284 ));
            rec.jbiscon := Convert( slices, 1285, ( -9, -8, -7, -2, -1 ) );
            rec.jliscon := Convert( slices, 1286, ( -9, -8, -7, -2, -1 ) );
            rec.mrjiscn := Convert( slices, 1287, ( -9, -8, -7, -2, -1 ) );
            rec.maiscon := Convert( slices, 1288, ( -9, -8, -7, -2, -1 ) );
            rec.paiscon := Convert( slices, 1289, ( -9, -8, -7, -2, -1 ) );
            rec.j1iscon := Convert( slices, 1290, ( -9, -8, -7, -2, -1 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Indresp_component ).start_pos = 0 ) then
               index.pointers( Indresp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Indresp_component ).counter := index.pointers( Indresp_component ).counter + 1;
            Put_Index( index_map, index );
            Indresp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Indresp_IO.Close( bin_file );
   end Create_Indresp_Wave_N;




   procedure Create_Indsamp_Wave_N( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Indsamp_IO.File_Type;
      rec         : Indsamp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Indsamp_IO.Create (bin_file, Indsamp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.pid := Convert( slices, 3 );
            rec.iviolw := Convert_Iviolw_Type( Get( slices, 4 ));
            rec.ivstat1 := Convert_Ivstat1_Type( Get( slices, 5 ));
            rec.ivelig := Convert_Ivelig_Type( Get( slices, 6 ));
            rec.hhmem := Convert_Hhmem_Type( Get( slices, 7 ));
            rec.newhy := Convert_Newhy_Type( Get( slices, 8 ));
            rec.nemnjn := Convert_Nemnjn_Type( Get( slices, 9 ));
            rec.neyrjn4 := Convert( slices, 10, ( -9, -8, -7, -2, -1 ) );
            rec.lvwhy := Convert_Lvwhy_Type( Get( slices, 11 ));
            rec.lvmn := Convert_Lvmn_Type( Get( slices, 12 ));
            rec.lvyr4 := Convert( slices, 13, ( -9, -8, -7, -2, -1 ) );
            rec.lvloc := Convert_Lvloc_Type( Get( slices, 14 ));
            rec.ivfio := Convert_Ivfio_Type( Get( slices, 15 ));
            rec.ivrref := Convert_Ivrref_Type( Get( slices, 16 ));
            rec.ivireis := Convert_Ivireis_Type( Get( slices, 17 ));
            rec.finloc := Convert_Finloc_Type( Get( slices, 18 ));
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 19 ));
            rec.memorig := Convert_Memorig_Type( Get( slices, 20 ));
            rec.sampst := Convert_Sampst_Type( Get( slices, 21 ));
            rec.movest := Convert_Movest_Type( Get( slices, 22 ));
            rec.lewght := Convert( slices, 23, ( -9.0, -8.0, -1.0 ) );
            rec.lrwght := Convert( slices, 24, ( -9.0, -8.0, -1.0 ) );
            rec.lrwtsw1 := Convert( slices, 25, ( -9.0, -8.0, -1.0 ) );
            rec.lewtsw1 := Convert( slices, 26, ( -9.0, -8.0, -1.0 ) );
            rec.lrwtsw2 := Convert( slices, 27, ( -9.0, -8.0, -1.0 ) );
            rec.lewtsw2 := Convert( slices, 28, ( -9.0, -8.0, -1.0 ) );
            rec.lrwtuk1 := Convert( slices, 29, ( -9.0, -8.0, -1.0 ) );
            rec.lewtuk1 := Convert( slices, 30, ( -9.0, -8.0, -1.0 ) );
            rec.lrwtuk2 := Convert( slices, 31, ( -9.0, -8.0, -1.0 ) );
            rec.lewtuk2 := Convert( slices, 32, ( -9.0, -8.0, -1.0 ) );
            rec.distmov := Convert( slices, 33, ( -9.0, -8.0 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Indsamp_component ).start_pos = 0 ) then
               index.pointers( Indsamp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Indsamp_component ).counter := index.pointers( Indsamp_component ).counter + 1;
            Put_Index( index_map, index );
            Indsamp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Indsamp_IO.Close( bin_file );
   end Create_Indsamp_Wave_N;




   procedure Create_Jobhist_Wave_N( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Jobhist_IO.File_Type;
      rec         : Jobhist_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Jobhist_IO.Create (bin_file, Jobhist_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.jspno := Convert( slices, 3 );
            rec.jhstat := Convert_Jhstat_Type( Get( slices, 4 ));
            rec.jhbgd := Convert( slices, 5, ( -9, -8, -7, -2, -1 ) );
            rec.jhbgm := Convert_Jbbgm1_Type( Get( slices, 6 ));
            rec.jhbgy4 := Convert( slices, 7, ( -9, -8, -7, -2, -1 ) );
            rec.jhsoc := Convert( slices, 8, ( -9, -8, -2, -1 ) );
            rec.jhsoc00 := Convert( slices, 9, ( -9, -8, -2, -1 ) );
            rec.jhsemp := Convert_Jhsemp_Type( Get( slices, 10 ));
            rec.jhboss := Convert_Bscon_Type( Get( slices, 11 ));
            rec.jhsect := Convert_Jhsect_Type( Get( slices, 12 ));
            rec.jhmngr := Convert_Jhmngr_Type( Get( slices, 13 ));
            rec.jhpldf := Convert_Jhpldf_Type( Get( slices, 14 ));
            rec.jhsic92 := Convert( slices, 15, ( -9, -8, -7 ) );
            rec.jhsize := Convert_Jhsize_Type( Get( slices, 16 ));
            rec.jhpayl := Convert( slices, 17, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhpylw := Convert( slices, 18, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.jhpylg := Convert_Jhpylg_Type( Get( slices, 19 ));
            rec.jhstpy := Convert_Jhstpy_Type( Get( slices, 20 ));
            rec.jblky := Convert_Jblky_Type( Get( slices, 21 ));
            rec.jhendd := Convert( slices, 22, ( -9, -8, -7, -2, -1 ) );
            rec.jhendm := Convert_Jbbgm1_Type( Get( slices, 23 ));
            rec.jhendy4 := Convert( slices, 24, ( -9, -8, -7, -2, -1 ) );
            rec.jha9ly := Convert_Jha9ly_Type( Get( slices, 25 ));
            rec.jhseg := Convert_Jhseg_Type( Get( slices, 26 ));
            rec.jhgold := Convert( slices, 27, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhrgsc := Convert_Jhrgsc_Type( Get( slices, 28 ));
            rec.jhisco := Convert( slices, 29, ( -9, -8 ) );
            rec.jhcssm := Convert( slices, 30, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhcssf := Convert( slices, 31, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhhgs := Convert( slices, 32, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhsec := Convert_Jhsec_Type( Get( slices, 33 ));
            rec.jhspw := Convert( slices, 34, ( -9.0, -8.0 ) );
            rec.jhgpay := Convert( slices, 35, ( -9.0, -8.0, -7.0 ) );
            rec.jhnpay := Convert( slices, 36, ( -9.0, -8.0, -7.0, -1.0 ) );
            rec.jhgpayi := Convert_Jhgpayi_Type( Get( slices, 37 ));
            rec.jhnpayi := Convert_Jhgpayi_Type( Get( slices, 38 ));
            rec.pid := Convert( slices, 39 );
            rec.jhiscon := Convert( slices, 40, ( -9, -8, -7, -2, -1 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Jobhist_component ).start_pos = 0 ) then
               index.pointers( Jobhist_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Jobhist_component ).counter := index.pointers( Jobhist_component ).counter + 1;
            Put_Index( index_map, index );
            Jobhist_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Jobhist_IO.Close( bin_file );
   end Create_Jobhist_Wave_N;




   procedure Create_Youth_Wave_N( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Youth_IO.File_Type;
      rec         : Youth_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Youth_IO.Create (bin_file, Youth_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.ypdobm := Convert_Ypdobm_Type( Get( slices, 3 ));
            rec.ypdoby4 := Convert( slices, 4, ( -9, -8, -7, -2, -1 ) );
            rec.ypsex := Convert_Ypsex_Type( Get( slices, 5 ));
            rec.ytvhrs := Convert_Ytvhrs_Type( Get( slices, 6 ));
            rec.ytvstp := Convert_Ytvlmt_Type( Get( slices, 7 ));
            rec.ypcomp := Convert_Ypcomp_Type( Get( slices, 8 ));
            rec.yppchw := Convert_Yppcg_Type( Get( slices, 9 ));
            rec.yppcg := Convert_Yppcg_Type( Get( slices, 10 ));
            rec.yppcnt := Convert_Yppcg_Type( Get( slices, 11 ));
            rec.ypmobu := Convert_Ypbeau_Type( Get( slices, 12 ));
            rec.ypchor := Convert_Ypchor_Type( Get( slices, 13 ));
            rec.yppals := Convert_Yppalo_Type( Get( slices, 14 ));
            rec.yppalo := Convert_Yppalo_Type( Get( slices, 15 ));
            rec.yplate := Convert_Yplate_Type( Get( slices, 16 ));
            rec.ypargm := Convert_Ypargm_Type( Get( slices, 17 ));
            rec.ypargf := Convert_Ypargf_Type( Get( slices, 18 ));
            rec.yptlkm := Convert_Ypargm_Type( Get( slices, 19 ));
            rec.yptlkf := Convert_Ypargf_Type( Get( slices, 20 ));
            rec.ypnpal := Convert( slices, 21, ( -9, -8, -2, -1 ) );
            rec.ypfght := Convert_Ypfght_Type( Get( slices, 22 ));
            rec.ypeatn := Convert_Ypeatn_Type( Get( slices, 23 ));
            rec.ypsmev := Convert_Ypbeau_Type( Get( slices, 24 ));
            rec.ypsmof := Convert_Ypsmof_Type( Get( slices, 25 ));
            rec.ypsmlw := Convert( slices, 26, ( -9, -8, -2, -1 ) );
            rec.ypdgfr := Convert_Ypdgfr_Type( Get( slices, 27 ));
            rec.yphstat := Convert_Yphstat_Type( Get( slices, 28 ));
            rec.ypophe := Convert_Ypopfj_Type( Get( slices, 29 ));
            rec.ypophc := Convert_Ypopfj_Type( Get( slices, 30 ));
            rec.yphtf := Convert( slices, 31, ( -9, -8, -2, -1 ) );
            rec.yphfi := Convert( slices, 32, ( -9, -8, -2, -1 ) );
            rec.yphtc := Convert( slices, 33, ( -9, -8, -2, -1 ) );
            rec.ypwts := Convert( slices, 34, ( -9, -8, -2, -1 ) );
            rec.ypwtp := Convert( slices, 35, ( -9, -8, -2, -1 ) );
            rec.ypwtk := Convert( slices, 36, ( -9, -8, -2, -1 ) );
            rec.ypwghr := Convert_Ypwghr_Type( Get( slices, 37 ));
            rec.ypdiet := Convert_Ypdiet_Type( Get( slices, 38 ));
            rec.ypsprt := Convert_Ypsprt_Type( Get( slices, 39 ));
            rec.ypsprt1 := Convert_Ypsprt1_Type( Get( slices, 40 ));
            rec.ypsprt2 := Convert_Ypsprt2_Type( Get( slices, 41 ));
            rec.ypnspt1 := Convert_Ypnspt1_Type( Get( slices, 42 ));
            rec.ypnspt2 := Convert_Ypnspt2_Type( Get( slices, 43 ));
            rec.ypfrut := Convert_Ypffd_Type( Get( slices, 44 ));
            rec.ypffd := Convert_Ypffd_Type( Get( slices, 45 ));
            rec.ypjfd := Convert_Ypffd_Type( Get( slices, 46 ));
            rec.ypttsm := Convert_Ypttsm_Type( Get( slices, 47 ));
            rec.ypesta := Convert_Ypesta_Type( Get( slices, 48 ));
            rec.ypesti := Convert_Ypesti_Type( Get( slices, 49 ));
            rec.ypestb := Convert_Ypesta_Type( Get( slices, 50 ));
            rec.ypestj := Convert_Ypesti_Type( Get( slices, 51 ));
            rec.ypestc := Convert_Ypesta_Type( Get( slices, 52 ));
            rec.ypestk := Convert_Ypesti_Type( Get( slices, 53 ));
            rec.ypeste := Convert_Ypesta_Type( Get( slices, 54 ));
            rec.ypestf := Convert_Ypesta_Type( Get( slices, 55 ));
            rec.yptcha := Convert_Ypesta_Type( Get( slices, 56 ));
            rec.yptchb := Convert_Ypesta_Type( Get( slices, 57 ));
            rec.yphsw := Convert_Yphap_Type( Get( slices, 58 ));
            rec.yphap := Convert_Yphap_Type( Get( slices, 59 ));
            rec.yphfm := Convert_Yphap_Type( Get( slices, 60 ));
            rec.yphfr := Convert_Yphap_Type( Get( slices, 61 ));
            rec.yphsc := Convert_Yphap_Type( Get( slices, 62 ));
            rec.yphlf := Convert_Yphap_Type( Get( slices, 63 ));
            rec.ypvte6 := Convert_Ypvte6_Type( Get( slices, 64 ));
            rec.ypvte3 := Convert_Ypvte3_Type( Get( slices, 65 ));
            rec.yptrun := Convert_Yptrun_Type( Get( slices, 66 ));
            rec.ypbull := Convert_Ypbull_Type( Get( slices, 67 ));
            rec.ypopsc := Convert_Ypopsc_Type( Get( slices, 68 ));
            rec.yplvsc := Convert_Yplvsc_Type( Get( slices, 69 ));
            rec.ypacvs := Convert_Scach_Type( Get( slices, 70 ));
            rec.ypsoc := Convert( slices, 71, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.ypwklw := Convert_Ypbeau_Type( Get( slices, 72 ));
            rec.ypsoc1 := Convert( slices, 73, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.ypsoc2 := Convert( slices, 74, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.ypwhrs := Convert( slices, 75, ( -9, -8, -2, -1 ) );
            rec.yppay := Convert( slices, 76, ( -9, -8, -2, -1 ) );
            rec.ypwkm := Convert_Ypwkm_Type( Get( slices, 77 ));
            rec.ypwkt := Convert_Ypwkt_Type( Get( slices, 78 ));
            rec.ypwkw := Convert_Ypwkw_Type( Get( slices, 79 ));
            rec.ypwkth := Convert_Ypwkth_Type( Get( slices, 80 ));
            rec.ypwkf := Convert_Ypwkf_Type( Get( slices, 81 ));
            rec.ypwksa := Convert_Ypwksa_Type( Get( slices, 82 ));
            rec.ypwksu := Convert_Ypwksu_Type( Get( slices, 83 ));
            rec.yplvhm := Convert( slices, 84, ( -9, -8, -2, -1 ) );
            rec.yp2uni := Convert_Yp2uni_Type( Get( slices, 85 ));
            rec.ypnuna := Convert_Ypnuna_Type( Get( slices, 86 ));
            rec.ypnunb := Convert_Ypnunb_Type( Get( slices, 87 ));
            rec.ypevnt1 := Convert( slices, 88, ( -9, -8, -2, -1 ) );
            rec.ypevnt2 := Convert( slices, 89, ( -9, -8, -2, -1 ) );
            rec.ypwght := Convert( slices, 90 );
            rec.pid := Convert( slices, 91 );
            rec.fnspno := Convert( slices, 92, ( -9, -8 ) );
            rec.fnspid := Convert( slices, 93, ( -9.0, -8.0 ) );
            rec.mnspno := Convert( slices, 94, ( -9, -8 ) );
            rec.mnspid := Convert( slices, 95, ( -9.0, -8.0 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Youth_component ).start_pos = 0 ) then
               index.pointers( Youth_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Youth_component ).counter := index.pointers( Youth_component ).counter + 1;
            Put_Index( index_map, index );
            Youth_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Youth_IO.Close( bin_file );
   end Create_Youth_Wave_N;




   procedure Create_Egoalt_Wave_O( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Egoalt_IO.File_Type;
      rec         : Egoalt_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Egoalt_IO.Create (bin_file, Egoalt_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.opno := Convert( slices, 3, (  1 .. 0 => -9 ) );
            rec.rel := Convert_Rel_Type( Get( slices, 4 ));
            rec.sex := Convert_Sex_Type( Get( slices, 5 ));
            rec.osex := Convert_Hgsex_Type( Get( slices, 6 ));
            rec.lwstat := Convert_Lwstat_Type( Get( slices, 7 ));
            rec.nwstat := Convert_Nwstat_Type( Get( slices, 8 ));
            rec.pid := Convert( slices, 9 );
            rec.opid := Convert( slices, 10 );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Egoalt_component ).start_pos = 0 ) then
               index.pointers( Egoalt_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Egoalt_component ).counter := index.pointers( Egoalt_component ).counter + 1;
            Put_Index( index_map, index );
            Egoalt_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Egoalt_IO.Close( bin_file );
   end Create_Egoalt_Wave_O;




   procedure Create_Hhresp_Wave_O( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Hhresp_IO.File_Type;
      rec         : Hhresp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Hhresp_IO.Create (bin_file, Hhresp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.hhdoi := Convert( slices, 2, ( -9, -8, -7 ) );
            rec.hhmoi := Convert_Doim_Type( Get( slices, 3 ));
            rec.hhyoi4 := Convert( slices, 4, ( -9, -8, -7, -2, -1 ) );
            rec.hhsoih := Convert( slices, 5, ( -9, -8, -7 ) );
            rec.hhsoim := Convert( slices, 6, ( -9, -8, -7 ) );
            rec.hstype := Convert_Hstype_Type( Get( slices, 7 ));
            rec.hsrins := Convert_Cjsck2_Type( Get( slices, 8 ));
            rec.hsroom := Convert( slices, 9, ( -9, -8, -7, -2, -1 ) );
            rec.hsownd := Convert_Hsownd_Type( Get( slices, 10 ));
            rec.hsowr1 := Convert( slices, 11, ( -9, -8, -7, -2, -1 ) );
            rec.hsowr2 := Convert( slices, 12, ( -9, -8, -7, -2, -1 ) );
            rec.hsval := Convert( slices, 13, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.mghave := Convert_Mghave_Type( Get( slices, 14 ));
            rec.hsowrp := Convert_Bscon_Type( Get( slices, 15 ));
            rec.mgynot := Convert_Mgynot_Type( Get( slices, 16 ));
            rec.hscost := Convert( slices, 17, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.hsyr04 := Convert( slices, 18, ( -9, -8, -7, -2, -1 ) );
            rec.mgyr04 := Convert( slices, 19, ( -9, -8, -7, -2, -1 ) );
            rec.mgly := Convert_Bscon_Type( Get( slices, 20 ));
            rec.hsivlw := Convert( slices, 21, ( -9, -8, -7, -2, -1 ) );
            rec.mgold := Convert( slices, 22, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.mglife := Convert( slices, 23, ( -9, -8, -7, -2, -1 ) );
            rec.mgtype := Convert_Mgtype_Type( Get( slices, 24 ));
            rec.mgxtra := Convert_Bscon_Type( Get( slices, 25 ));
            rec.mgnew := Convert( slices, 26, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.mgxty1 := Convert_Mgxty1_Type( Get( slices, 27 ));
            rec.mgxty2 := Convert_Mgxty2_Type( Get( slices, 28 ));
            rec.mgxty3 := Convert_Mgxty3_Type( Get( slices, 29 ));
            rec.mgxty4 := Convert_Mgxty4_Type( Get( slices, 30 ));
            rec.mgxty5 := Convert_Mgxty5_Type( Get( slices, 31 ));
            rec.xpmg := Convert( slices, 32, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.xpmg1 := Convert_Bscon_Type( Get( slices, 33 ));
            rec.xpmg2 := Convert_Bscon_Type( Get( slices, 34 ));
            rec.xpmg3 := Convert_Bscon_Type( Get( slices, 35 ));
            rec.xpmg4 := Convert_Bscon_Type( Get( slices, 36 ));
            rec.hsjb := Convert_Bscon_Type( Get( slices, 37 ));
            rec.rentp1 := Convert( slices, 38, ( -9, -8, -7, -2, -1 ) );
            rec.rentp2 := Convert( slices, 39, ( -9, -8, -7, -2, -1 ) );
            rec.rentll := Convert_Rentll_Type( Get( slices, 40 ));
            rec.rentf := Convert_Rentf_Type( Get( slices, 41 ));
            rec.rent := Convert( slices, 42, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.rentw := Convert( slices, 43, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.rent1 := Convert_Rent1_Type( Get( slices, 44 ));
            rec.rent7 := Convert_Rent7_Type( Get( slices, 45 ));
            rec.rent2 := Convert_Rent1_Type( Get( slices, 46 ));
            rec.rent3 := Convert_Bscon_Type( Get( slices, 47 ));
            rec.rent4 := Convert_Bscon_Type( Get( slices, 48 ));
            rec.rent5 := Convert_Bscon_Type( Get( slices, 49 ));
            rec.rent8 := Convert_Coh1mr_Type( Get( slices, 50 ));
            rec.rent6 := Convert_Bscon_Type( Get( slices, 51 ));
            rec.renthb := Convert_Renthb_Type( Get( slices, 52 ));
            rec.rentg := Convert( slices, 53, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.rentgw := Convert( slices, 54, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.xphsdf := Convert( slices, 55, ( -9, -8, -7, -2, -1 ) );
            rec.xphsd1 := Convert_Bscon_Type( Get( slices, 56 ));
            rec.xphsd2 := Convert_Bscon_Type( Get( slices, 57 ));
            rec.xphsdb := Convert_Bscon_Type( Get( slices, 58 ));
            rec.hskch := Convert_Boolean_With_Missing( Get( slices, 59 ));
            rec.hskchs := Convert_Boolean_With_Missing( Get( slices, 60 ));
            rec.hsbth := Convert_Boolean_With_Missing( Get( slices, 61 ));
            rec.hsbths := Convert_Boolean_With_Missing( Get( slices, 62 ));
            rec.hstlt := Convert_Boolean_With_Missing( Get( slices, 63 ));
            rec.hstlts := Convert_Boolean_With_Missing( Get( slices, 64 ));
            rec.hsgdn := Convert_Boolean_With_Missing( Get( slices, 65 ));
            rec.hsgdns := Convert_Boolean_With_Missing( Get( slices, 66 ));
            rec.xpgasy := Convert( slices, 67, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.xplecy := Convert( slices, 68, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.xpoily := Convert( slices, 69, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.xpsfly := Convert( slices, 70, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.heatch := Convert_Bscon_Type( Get( slices, 71 ));
            rec.heatyp := Convert_Heatyp_Type( Get( slices, 72 ));
            rec.hsprbg := Convert_Boolean_With_Missing( Get( slices, 73 ));
            rec.hsprbh := Convert_Boolean_With_Missing( Get( slices, 74 ));
            rec.hsprbi := Convert_Boolean_With_Missing( Get( slices, 75 ));
            rec.hsprbj := Convert_Boolean_With_Missing( Get( slices, 76 ));
            rec.hsprbk := Convert_Boolean_With_Missing( Get( slices, 77 ));
            rec.hsprbl := Convert_Boolean_With_Missing( Get( slices, 78 ));
            rec.hsprbm := Convert_Boolean_With_Missing( Get( slices, 79 ));
            rec.hsprbn := Convert_Boolean_With_Missing( Get( slices, 80 ));
            rec.hsprbo := Convert_Boolean_With_Missing( Get( slices, 81 ));
            rec.hsprbp := Convert_Boolean_With_Missing( Get( slices, 82 ));
            rec.hsprbq := Convert_Boolean_With_Missing( Get( slices, 83 ));
            rec.hsctax := Convert_Hsctax_Type( Get( slices, 84 ));
            rec.hs2ownd := Convert_Bscon_Type( Get( slices, 85 ));
            rec.hs2valo := Convert( slices, 86, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.hs2vala := Convert_Hldsbl1_Type( Get( slices, 87 ));
            rec.hs2valb := Convert_Hldsbl1_Type( Get( slices, 88 ));
            rec.hs2valc := Convert_Hldsbl1_Type( Get( slices, 89 ));
            rec.hs2vald := Convert_Hldsbl1_Type( Get( slices, 90 ));
            rec.mgtot := Convert( slices, 91, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.cdhave := Convert_Bscon_Type( Get( slices, 92 ));
            rec.cdbght := Convert_Bscon_Type( Get( slices, 93 ));
            rec.cd1use := Convert_Cd1new_Type( Get( slices, 94 ));
            rec.cd1new := Convert( slices, 95, ( -9, -8, -7, -2, -1 ) );
            rec.cd1cst := Convert( slices, 96, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd2use := Convert_Cd1new_Type( Get( slices, 97 ));
            rec.cd2new := Convert( slices, 98, ( -9, -8, -7, -2, -1 ) );
            rec.cd2cst := Convert( slices, 99, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd10use := Convert_Cd10new_Type( Get( slices, 100 ));
            rec.cd10new := Convert( slices, 101, ( -9, -8, -7, -2, -1 ) );
            rec.cd10cst := Convert( slices, 102, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd11use := Convert_Cd10new_Type( Get( slices, 103 ));
            rec.cd11new := Convert( slices, 104, ( -9, -8, -7, -2, -1 ) );
            rec.cd11cst := Convert( slices, 105, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd3use := Convert_Cd1new_Type( Get( slices, 106 ));
            rec.cd3new := Convert( slices, 107, ( -9, -8, -7, -2, -1 ) );
            rec.cd3cst := Convert( slices, 108, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd4use := Convert_Cd1new_Type( Get( slices, 109 ));
            rec.cd4new := Convert( slices, 110, ( -9, -8, -7, -2, -1 ) );
            rec.cd4cst := Convert( slices, 111, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd5use := Convert_Cd1new_Type( Get( slices, 112 ));
            rec.cd5new := Convert( slices, 113, ( -9, -8, -7, -2, -1 ) );
            rec.cd5cst := Convert( slices, 114, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd6use := Convert_Cd1new_Type( Get( slices, 115 ));
            rec.cd6new := Convert( slices, 116, ( -9, -8, -7, -2, -1 ) );
            rec.cd6cst := Convert( slices, 117, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd7use := Convert_Cd1new_Type( Get( slices, 118 ));
            rec.cd7new := Convert( slices, 119, ( -9, -8, -7, -2, -1 ) );
            rec.cd7cst := Convert( slices, 120, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd8use := Convert_Cd1new_Type( Get( slices, 121 ));
            rec.cd8new := Convert( slices, 122, ( -9, -8, -7, -2, -1 ) );
            rec.cd8cst := Convert( slices, 123, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd9use := Convert_Cd1new_Type( Get( slices, 124 ));
            rec.cd9new := Convert( slices, 125, ( -9, -8, -7, -2, -1 ) );
            rec.cd9cst := Convert( slices, 126, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd12use := Convert_Cd10new_Type( Get( slices, 127 ));
            rec.cd12new := Convert( slices, 128, ( -9, -8, -7, -2, -1 ) );
            rec.cd12cst := Convert( slices, 129, ( -9, -8, -7, -3, -2, -1 ) );
            rec.pcnet := Convert_Boolean_With_Missing( Get( slices, 130 ));
            rec.xphp := Convert_Bscon_Type( Get( slices, 131 ));
            rec.xphpdf := Convert_Xphpdf_Type( Get( slices, 132 ));
            rec.hscana := Convert_Boolean_With_Missing( Get( slices, 133 ));
            rec.hscnta := Convert_Boolean_With_Missing( Get( slices, 134 ));
            rec.hscanb := Convert_Boolean_With_Missing( Get( slices, 135 ));
            rec.hscntb := Convert_Boolean_With_Missing( Get( slices, 136 ));
            rec.hscanc := Convert_Boolean_With_Missing( Get( slices, 137 ));
            rec.hscntc := Convert_Boolean_With_Missing( Get( slices, 138 ));
            rec.hscand := Convert_Boolean_With_Missing( Get( slices, 139 ));
            rec.hscntd := Convert_Boolean_With_Missing( Get( slices, 140 ));
            rec.hscane := Convert_Boolean_With_Missing( Get( slices, 141 ));
            rec.hscnte := Convert_Boolean_With_Missing( Get( slices, 142 ));
            rec.hscanf := Convert_Boolean_With_Missing( Get( slices, 143 ));
            rec.hscntf := Convert_Boolean_With_Missing( Get( slices, 144 ));
            rec.hscanh := Convert_Edblyr3_Type( Get( slices, 145 ));
            rec.hscnth := Convert_Edblyr3_Type( Get( slices, 146 ));
            rec.hscank := Convert_Edblyr3_Type( Get( slices, 147 ));
            rec.hscntk := Convert_Edblyr3_Type( Get( slices, 148 ));
            rec.hscanl := Convert_Edblyr3_Type( Get( slices, 149 ));
            rec.hscntl := Convert_Edblyr3_Type( Get( slices, 150 ));
            rec.xpfood := Convert( slices, 151, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ncars := Convert_Ncars_Type( Get( slices, 152 ));
            rec.carown := Convert_Carown_Type( Get( slices, 153 ));
            rec.carval := Convert( slices, 154, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ivh1 := Convert( slices, 155, ( -9, -8, -7, -1 ) );
            rec.ivh2 := Convert( slices, 156, ( -9, -8, -7 ) );
            rec.ivh3 := Convert( slices, 157, ( -9, -8, -7 ) );
            rec.hhfoih := Convert( slices, 158, ( -9, -8, -7 ) );
            rec.hhfoim := Convert( slices, 159, ( -9, -8, -7 ) );
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 160 ));
            rec.hhorig := Convert_Hhorig_Type( Get( slices, 161 ));
            rec.hhdc := Convert_Hhdc_Type( Get( slices, 162 ));
            rec.xhwght := Convert( slices, 163, ( -9.0, -8.0 ) );
            rec.hhsize := Convert( slices, 164, ( -9, -8 ) );
            rec.hhtype := Convert_Hhtype_Type( Get( slices, 165 ));
            rec.region := Convert_Region_Type( Get( slices, 166 ));
            rec.nch02 := Convert( slices, 167, ( -9, -8 ) );
            rec.nch34 := Convert( slices, 168, ( -9, -8 ) );
            rec.nch511 := Convert( slices, 169, ( -9, -8 ) );
            rec.nch1215 := Convert( slices, 170, ( -9, -8 ) );
            rec.nch1618 := Convert( slices, 171, ( -9, -8 ) );
            rec.nkids := Convert( slices, 172, ( -9, -8 ) );
            rec.nwed := Convert( slices, 173, ( -9, -8 ) );
            rec.npens := Convert( slices, 174, ( -9, -8 ) );
            rec.na75pl := Convert( slices, 175, ( -9, -8 ) );
            rec.agechy := Convert( slices, 176, ( -9, -8 ) );
            rec.ncouple := Convert( slices, 177, ( -9, -8 ) );
            rec.nonepar := Convert( slices, 178, ( -9, -8 ) );
            rec.nemp := Convert( slices, 179, ( -9, -8 ) );
            rec.nwage := Convert( slices, 180, ( -9, -8 ) );
            rec.tenure := Convert_Tenure_Type( Get( slices, 181 ));
            rec.xphsn := Convert( slices, 182, ( -9.0, -8.0, -7.0 ) );
            rec.xphsg := Convert( slices, 183, ( -9.0, -8.0, -7.0 ) );
            rec.fieqfcb := Convert( slices, 184, ( -9.0, -8.0 ) );
            rec.fieqfca := Convert( slices, 185, ( -9.0, -8.0 ) );
            rec.fihhyr := Convert( slices, 186, ( -9.0, -8.0, -7.0 ) );
            rec.fihhmn := Convert( slices, 187, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyl := Convert( slices, 188, ( -9.0, -8.0, -7.0 ) );
            rec.fihhynl := Convert( slices, 189, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyp := Convert( slices, 190, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyb := Convert( slices, 191, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyt := Convert( slices, 192, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyi := Convert( slices, 193, ( -9.0, -8.0, -7.0 ) );
            rec.fihhml := Convert( slices, 194, (  1 .. 0 => -9.0 ) );
            rec.fihhmnl := Convert( slices, 195, (  1 .. 0 => -9.0 ) );
            rec.fihhmp := Convert( slices, 196, (  1 .. 0 => -9.0 ) );
            rec.fihhmb := Convert( slices, 197, (  1 .. 0 => -9.0 ) );
            rec.fihhmt := Convert( slices, 198, (  1 .. 0 => -9.0 ) );
            rec.fihhmi := Convert( slices, 199, (  1 .. 0 => -9.0 ) );
            rec.hhmove := Convert_Hhmove_Type( Get( slices, 200 ));
            rec.mgnewi := Convert( slices, 201, ( -9, -8, -7, -2, -1 ) );
            rec.xpmgi := Convert( slices, 202, ( -9, -8, -7, -2, -1 ) );
            rec.hsvali := Convert( slices, 203, ( -9, -8, -7, -2, -1 ) );
            rec.renti := Convert( slices, 204, ( -9, -8, -7, -4, -3, -2, -1 ) );
            rec.rentgi := Convert( slices, 205, ( -9, -8, -7, -2, -1 ) );
            rec.xphsni := Convert_Jhgpayi_Type( Get( slices, 206 ));
            rec.xphsgi := Convert_Jhgpayi_Type( Get( slices, 207 ));
            rec.fihhmni := Convert_Fihhmni_Type( Get( slices, 208 ));
            rec.fihhmli := Convert_Fihhmbi_Type( Get( slices, 209 ));
            rec.fihmnli := Convert_Fihhmbi_Type( Get( slices, 210 ));
            rec.fihhmpi := Convert_Fihhmbi_Type( Get( slices, 211 ));
            rec.fihhmbi := Convert_Fihhmbi_Type( Get( slices, 212 ));
            rec.fihhmti := Convert_Fihhmbi_Type( Get( slices, 213 ));
            rec.fihhmii := Convert_Fihhmbi_Type( Get( slices, 214 ));
            rec.fihhyri := Convert_Fihhmbi_Type( Get( slices, 215 ));
            rec.fihhyli := Convert_Fihhmbi_Type( Get( slices, 216 ));
            rec.fihhyni := Convert_Fihhmbi_Type( Get( slices, 217 ));
            rec.fihhypi := Convert_Fihhmbi_Type( Get( slices, 218 ));
            rec.fihhybi := Convert_Fihhmbi_Type( Get( slices, 219 ));
            rec.fihhyti := Convert_Fihhmbi_Type( Get( slices, 220 ));
            rec.fihhyii := Convert_Fihhmbi_Type( Get( slices, 221 ));
            rec.fihhsel := Convert_Fihhsel_Type( Get( slices, 222 ));
            rec.xhwtuk1 := Convert( slices, 223, ( -9.0, -8.0 ) );
            rec.xhwtuk2 := Convert( slices, 224, ( -9.0, -8.0 ) );
            rec.region2 := Convert_Region2_Type( Get( slices, 225 ));
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Hhresp_component ).start_pos = 0 ) then
               index.pointers( Hhresp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Hhresp_component ).counter := index.pointers( Hhresp_component ).counter + 1;
            Put_Index( index_map, index );
            Hhresp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Hhresp_IO.Close( bin_file );
   end Create_Hhresp_Wave_O;




   procedure Create_Hhsamp_Wave_O( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Hhsamp_IO.File_Type;
      rec         : Hhsamp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Hhsamp_IO.Create (bin_file, Hhsamp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.fid := Convert( slices, 2 );
            rec.ivnadd := Convert( slices, 3, ( -9.0, -8.0 ) );
            rec.ivia := Convert_Ivia_Type( Get( slices, 4 ));
            rec.iviam := Convert_Iviam_Type( Get( slices, 5 ));
--             rec.ivid := Convert( slices, 6 );
            rec.ivlnc := Convert( slices, 7, ( -9, -1 ) );
            rec.ivtnc := Convert( slices, 8, ( -9, -8, -1 ) );
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 9 ));
            rec.ivosmrh := Convert( slices, 10, ( -9, -8, -1 ) );
            rec.ivnsmrh := Convert( slices, 11, ( -9, -8, -1 ) );
            rec.ivrrefh := Convert_Ivrrefh_Type( Get( slices, 12 ));
            rec.ivconv := Convert_Ivconv_Type( Get( slices, 13 ));
            rec.ivreis := Convert_Ivreis_Type( Get( slices, 14 ));
            rec.ivisst := Convert_Ivisst_Type( Get( slices, 15 ));
            rec.hhdc := Convert_Hhdc_Type( Get( slices, 16 ));
            rec.hhorig := Convert_Hhorig_Type( Get( slices, 17 ));
            rec.xhwght := Convert( slices, 18, ( -9.0, -8.0, -1.0 ) );
            rec.region := Convert_Region_Type( Get( slices, 19 ));
            rec.hhmove := Convert_Hhmove_Type( Get( slices, 20 ));
            rec.ahid := Convert( slices, 21 );
            rec.xhwtuk1 := Convert( slices, 22, ( -9.0, -8.0, -1.0 ) );
            rec.xhwtuk2 := Convert( slices, 23, ( -9.0, -8.0, -1.0 ) );
            rec.strata := Convert( slices, 24, ( -9, -8, -1 ) );
            rec.psu := Convert( slices, 25, ( -9, -8, -1 ) );
            rec.region2 := Convert_Region2_Type( Get( slices, 26 ));
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Hhsamp_component ).start_pos = 0 ) then
               index.pointers( Hhsamp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Hhsamp_component ).counter := index.pointers( Hhsamp_component ).counter + 1;
            Put_Index( index_map, index );
            Hhsamp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Hhsamp_IO.Close( bin_file );
   end Create_Hhsamp_Wave_O;




   procedure Create_Income_Wave_O( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Income_IO.File_Type;
      rec         : Income_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Income_IO.Create (bin_file, Income_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.ficode := Convert_Ficode_Type( Get( slices, 3 ));
            rec.frall := Convert_Frall_Type( Get( slices, 4 ));
            rec.fr01 := Convert_Cd1own_Type( Get( slices, 5 ));
            rec.fr02 := Convert_Cd1own_Type( Get( slices, 6 ));
            rec.fr03 := Convert_Cd1own_Type( Get( slices, 7 ));
            rec.fr04 := Convert( slices, 8, ( -9, -8, -2, -1 ) );
            rec.fr05 := Convert_Cd1own_Type( Get( slices, 9 ));
            rec.fr06 := Convert_Cd1own_Type( Get( slices, 10 ));
            rec.fr07 := Convert_Cd1own_Type( Get( slices, 11 ));
            rec.fr08 := Convert_Cd1own_Type( Get( slices, 12 ));
            rec.fr09 := Convert_Cd1own_Type( Get( slices, 13 ));
            rec.fr10 := Convert_Cd1own_Type( Get( slices, 14 ));
            rec.fr11 := Convert_Cd1own_Type( Get( slices, 15 ));
            rec.fr12 := Convert_Cd1own_Type( Get( slices, 16 ));
            rec.fr13 := Convert_Cd1own_Type( Get( slices, 17 ));
            rec.fr14 := Convert_Cd1own_Type( Get( slices, 18 ));
            rec.fr15 := Convert_Cd1own_Type( Get( slices, 19 ));
            rec.fr16 := Convert_Cd1own_Type( Get( slices, 20 ));
            rec.fr17 := Convert_Cd1own_Type( Get( slices, 21 ));
            rec.fr18 := Convert_Fr18_Type( Get( slices, 22 ));
            rec.fr19 := Convert_Fr18_Type( Get( slices, 23 ));
            rec.fr20 := Convert_Fr18_Type( Get( slices, 24 ));
            rec.frnow := Convert_Frnow_Type( Get( slices, 25 ));
            rec.frval := Convert( slices, 26, ( -9.0, -8.0, -3.0, -2.0, -1.0 ) );
            rec.frw := Convert( slices, 27, ( -9.0, -8.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.frjt := Convert_Frjt_Type( Get( slices, 28 ));
            rec.frjtpn := Convert( slices, 29, ( -9, -8, -2, -1 ) );
            rec.fradd := Convert_Cjsck2_Type( Get( slices, 30 ));
            rec.fim09l := Convert( slices, 31, ( -9.0, -8.0, -3.0 ) );
            rec.fim10l := Convert( slices, 32, ( -9.0, -8.0, -3.0 ) );
            rec.fim11l := Convert( slices, 33, ( -9.0, -8.0, -3.0 ) );
            rec.fim12l := Convert( slices, 34, ( -9.0, -8.0, -3.0 ) );
            rec.fim01t := Convert( slices, 35, ( -9.0, -8.0, -3.0 ) );
            rec.fim02t := Convert( slices, 36, ( -9.0, -8.0, -3.0 ) );
            rec.fim03t := Convert( slices, 37, ( -9.0, -8.0, -3.0 ) );
            rec.fim04t := Convert( slices, 38, ( -9.0, -8.0, -3.0 ) );
            rec.fim05t := Convert( slices, 39, ( -9.0, -8.0, -3.0 ) );
            rec.fim06t := Convert( slices, 40, ( -9.0, -8.0, -3.0 ) );
            rec.fim07t := Convert( slices, 41, ( -9.0, -8.0, -3.0 ) );
            rec.fim08t := Convert( slices, 42, ( -9.0, -8.0, -3.0 ) );
            rec.fim09t := Convert( slices, 43, ( -9.0, -8.0, -3.0 ) );
            rec.fim10t := Convert( slices, 44, ( -9.0, -8.0, -3.0 ) );
            rec.fim11t := Convert( slices, 45, ( -9.0, -8.0, -3.0 ) );
            rec.fim12t := Convert( slices, 46, ( -9.0, -8.0, -3.0 ) );
            rec.fim01n := Convert( slices, 47, ( -9.0, -8.0, -3.0 ) );
            rec.fim02n := Convert( slices, 48, ( -9.0, -3.0 ) );
            rec.fim03n := Convert( slices, 49, ( -9.0, -3.0 ) );
            rec.fim04n := Convert( slices, 50, ( -9.0, -3.0 ) );
            rec.frjtvf := Convert_Frjtvf_Type( Get( slices, 51 ));
            rec.frvali := Convert( slices, 52, ( -9, -8, -3, -2, -1 ) );
            rec.pid := Convert( slices, 53 );
            rec.fiseq := Convert( slices, 54 );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Income_component ).start_pos = 0 ) then
               index.pointers( Income_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Income_component ).counter := index.pointers( Income_component ).counter + 1;
            Put_Index( index_map, index );
            Income_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Income_IO.Close( bin_file );
   end Create_Income_Wave_O;




   procedure Create_Indall_Wave_O( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Indall_IO.File_Type;
      rec         : Indall_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Indall_IO.Create (bin_file, Indall_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.hgr2r := Convert_Hgr2r_Type( Get( slices, 3 ));
            rec.hgsex := Convert_Hgsex_Type( Get( slices, 4 ));
            rec.hgbm := Convert_Hgbm_Type( Get( slices, 5 ));
            rec.hgby := Convert( slices, 6, ( -9, -8, -2, -1 ) );
            rec.mastat := Convert_Mastat_Type( Get( slices, 7 ));
            rec.hgspn := Convert( slices, 8, ( -9, -8, -2, -1 ) );
            rec.hgemp := Convert_Hgemp_Type( Get( slices, 9 ));
            rec.hgfno := Convert( slices, 10, ( -9, -8, -2, -1 ) );
            rec.hgmno := Convert( slices, 11, ( -9, -8, -2, -1 ) );
            rec.hgra := Convert( slices, 12, ( -9, -8, -2, -1 ) );
            rec.pid := Convert( slices, 13 );
            rec.iviolw := Convert_Iviolw_Type( Get( slices, 14 ));
            rec.ivstat1 := Convert_Ivstat1_Type( Get( slices, 15 ));
            rec.ivelig := Convert_Ivelig_Type( Get( slices, 16 ));
            rec.hhmem := Convert_Hhmem_Type( Get( slices, 17 ));
            rec.newhy := Convert_Newhy_Type( Get( slices, 18 ));
            rec.nemnjn := Convert_Nemnjn_Type( Get( slices, 19 ));
            rec.neyrjn4 := Convert( slices, 20, ( -9, -8, -7, -2, -1 ) );
            rec.ivfio := Convert_Ivfio_Type( Get( slices, 21 ));
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 22 ));
            rec.iodc := Convert_Iodc_Type( Get( slices, 23 ));
            rec.memorig := Convert_Memorig_Type( Get( slices, 24 ));
            rec.age := Convert( slices, 25, ( -9, -8, -2, -1 ) );
            rec.age12 := Convert( slices, 26, ( -9, -8, -2, -1 ) );
            rec.butype := Convert_Butype_Type( Get( slices, 27 ));
            rec.buno := Convert( slices, 28, ( -9, -8 ) );
            rec.nchild := Convert( slices, 29, ( -9, -8 ) );
            rec.depchl := Convert_Depchl_Type( Get( slices, 30 ));
            rec.hoh := Convert_Hoh_Type( Get( slices, 31 ));
            rec.rach16 := Convert_Hhch12_Type( Get( slices, 32 ));
            rec.agei := Convert_Agei_Type( Get( slices, 33 ));
            rec.lrwght := Convert( slices, 34, ( -9.0, -8.0 ) );
            rec.lewght := Convert( slices, 35, ( -9.0, -8.0 ) );
            rec.xrwght := Convert( slices, 36, ( -9.0, -8.0 ) );
            rec.xewght := Convert( slices, 37, ( -9.0, -8.0 ) );
            rec.movest := Convert_Movest_Type( Get( slices, 38 ));
            rec.sampst := Convert_Sampst_Type( Get( slices, 39 ));
            rec.xrwtuk1 := Convert( slices, 40, ( -9.0, -8.0 ) );
            rec.xewtuk1 := Convert( slices, 41, ( -9.0, -8.0 ) );
            rec.xrwtuk2 := Convert( slices, 42, ( -9.0, -8.0 ) );
            rec.xewtuk2 := Convert( slices, 43, ( -9.0, -8.0 ) );
            rec.lrwtsw1 := Convert( slices, 44, ( -9.0, -8.0 ) );
            rec.lewtsw1 := Convert( slices, 45, ( -9.0, -8.0 ) );
            rec.lrwtsw2 := Convert( slices, 46, ( -9.0, -8.0 ) );
            rec.lewtsw2 := Convert( slices, 47, ( -9.0, -8.0 ) );
            rec.lrwtuk1 := Convert( slices, 48, ( -9.0, -8.0 ) );
            rec.lewtuk1 := Convert( slices, 49, ( -9.0, -8.0 ) );
            rec.lrwtuk2 := Convert( slices, 50, ( -9.0, -8.0 ) );
            rec.lewtuk2 := Convert( slices, 51, ( -9.0, -8.0 ) );
            rec.sppid := Convert( slices, 52 );
            rec.fpid := Convert( slices, 53 );
            rec.mpid := Convert( slices, 54 );
            rec.rapid := Convert( slices, 55 );
            rec.distmov := Convert( slices, 56, ( -9.0, -8.0 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Indall_component ).start_pos = 0 ) then
               index.pointers( Indall_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Indall_component ).counter := index.pointers( Indall_component ).counter + 1;
            Put_Index( index_map, index );
            Indall_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Indall_IO.Close( bin_file );
   end Create_Indall_Wave_O;




   procedure Create_Indresp_Wave_O( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Indresp_IO.File_Type;
      rec         : Indresp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Indresp_IO.Create (bin_file, Indresp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.doid := Convert( slices, 3, ( -9, -7 ) );
            rec.doim := Convert_Doim_Type( Get( slices, 4 ));
            rec.doiy4 := Convert( slices, 5, ( -9, -8, -7, -2, -1 ) );
            rec.ivlyr := Convert( slices, 6, ( -9, -8, -7 ) );
            rec.ivstat2 := Convert_Ivstat2_Type( Get( slices, 7 ));
            rec.ivsoih := Convert( slices, 8, ( -9, -8 ) );
            rec.ivsoim := Convert( slices, 9, ( -9, -8 ) );
            rec.lknbrd := Convert_Aidpl1_Type( Get( slices, 10 ));
            rec.lkmove := Convert_Lkmove_Type( Get( slices, 11 ));
            rec.lkmovy := Convert_Lkmovy_Type( Get( slices, 12 ));
            rec.xpmove := Convert( slices, 13, ( -9, -8, -7, -2, -1 ) );
            rec.plnew := Convert( slices, 14, ( -9, -8, -7, -2, -1 ) );
            rec.plnowm := Convert_Jbbgm1_Type( Get( slices, 15 ));
            rec.plnowy4 := Convert( slices, 16, ( -9, -8, -7, -2, -1 ) );
            rec.movjb := Convert_Aidpl1_Type( Get( slices, 17 ));
            rec.movjba := Convert_Movjba_Type( Get( slices, 18 ));
            rec.movjbb := Convert_Movjba_Type( Get( slices, 19 ));
            rec.movjbc := Convert_Movjba_Type( Get( slices, 20 ));
            rec.movjbd := Convert_Movjba_Type( Get( slices, 21 ));
            rec.movjbe := Convert_Movjba_Type( Get( slices, 22 ));
            rec.movjbf := Convert_Movjba_Type( Get( slices, 23 ));
            rec.movjbg := Convert_Movjba_Type( Get( slices, 24 ));
            rec.movjbh := Convert_Movjba_Type( Get( slices, 25 ));
            rec.movjbi := Convert_Movjba_Type( Get( slices, 26 ));
            rec.movy1 := Convert_Movy1_Type( Get( slices, 27 ));
            rec.movy2 := Convert_Movy2_Type( Get( slices, 28 ));
            rec.dobm := Convert_Cjsem_Type( Get( slices, 29 ));
            rec.doby := Convert( slices, 30, ( -9, -8, -7, -2, -1 ) );
            rec.sex := Convert_Sex_Type( Get( slices, 31 ));
            rec.mlstat := Convert_Mlstat_Type( Get( slices, 32 ));
            rec.mlchng := Convert_Bscon_Type( Get( slices, 33 ));
            rec.mlchm := Convert_Mlchm_Type( Get( slices, 34 ));
            rec.mlchy4 := Convert( slices, 35, ( -9, -8, -7, -2, -1 ) );
            rec.jbstat := Convert_Jbstat_Type( Get( slices, 36 ));
            rec.edlyr := Convert_Aidpl1_Type( Get( slices, 37 ));
            rec.edtype1 := Convert_Edtype1_Type( Get( slices, 38 ));
            rec.edblyr1 := Convert_Boolean_With_Missing( Get( slices, 39 ));
            rec.edbgm1 := Convert_Edbgm1_Type( Get( slices, 40 ));
            rec.edbgy1 := Convert( slices, 41, ( -9, -8, -7, -2, -1 ) );
            rec.edenm1 := Convert_Edbgm1_Type( Get( slices, 42 ));
            rec.edeny1 := Convert( slices, 43, ( -9, -8, -7, -2, -1 ) );
            rec.edenne1 := Convert_Edenne1_Type( Get( slices, 44 ));
            rec.edfeea1 := Convert_Yes_Or_Missing_Type( Get( slices, 45 ));
            rec.edfeeb1 := Convert_Yes_Or_Missing_Type( Get( slices, 46 ));
            rec.edfeec1 := Convert_Yes_Or_Missing_Type( Get( slices, 47 ));
            rec.edfeed1 := Convert_Yes_Or_Missing_Type( Get( slices, 48 ));
            rec.edfeee1 := Convert_Yes_Or_Missing_Type( Get( slices, 49 ));
            rec.edfeef1 := Convert_Yes_Or_Missing_Type( Get( slices, 50 ));
            rec.edfeeg1 := Convert_Yes_Or_Missing_Type( Get( slices, 51 ));
            rec.edmore1 := Convert_Boolean_With_Missing( Get( slices, 52 ));
            rec.edtype2 := Convert_Edtype1_Type( Get( slices, 53 ));
            rec.edblyr2 := Convert_Boolean_With_Missing( Get( slices, 54 ));
            rec.edbgm2 := Convert_Edbgm1_Type( Get( slices, 55 ));
            rec.edbgy2 := Convert( slices, 56, ( -9, -8, -7, -2, -1 ) );
            rec.edenm2 := Convert_Edbgm1_Type( Get( slices, 57 ));
            rec.edeny2 := Convert( slices, 58, ( -9, -8, -7, -2, -1 ) );
            rec.edenne2 := Convert_Edenne2_Type( Get( slices, 59 ));
            rec.edfeea2 := Convert_Yes_Or_Missing_Type( Get( slices, 60 ));
            rec.edfeeb2 := Convert_Yes_Or_Missing_Type( Get( slices, 61 ));
            rec.edfeec2 := Convert_Yes_Or_Missing_Type( Get( slices, 62 ));
            rec.edfeed2 := Convert_Yes_Or_Missing_Type( Get( slices, 63 ));
            rec.edfeee2 := Convert_Yes_Or_Missing_Type( Get( slices, 64 ));
            rec.edfeef2 := Convert_Yes_Or_Missing_Type( Get( slices, 65 ));
            rec.edfeeg2 := Convert_Yes_Or_Missing_Type( Get( slices, 66 ));
            rec.edmore2 := Convert_Boolean_With_Missing( Get( slices, 67 ));
            rec.edtype3 := Convert_Edtype3_Type( Get( slices, 68 ));
            rec.edblyr3 := Convert_Edblyr3_Type( Get( slices, 69 ));
            rec.edbgm3 := Convert_Edbgm3_Type( Get( slices, 70 ));
            rec.edbgy3 := Convert( slices, 71, ( -9, -8, -7, -2, -1 ) );
            rec.edenm3 := Convert_Edbgm3_Type( Get( slices, 72 ));
            rec.edeny3 := Convert( slices, 73, ( -9, -8, -7, -2, -1 ) );
            rec.edenne3 := Convert_Edenne3_Type( Get( slices, 74 ));
            rec.edfeea3 := Convert_Yes_Or_Missing_Type( Get( slices, 75 ));
            rec.edfeeb3 := Convert_Yes_Or_Missing_Type( Get( slices, 76 ));
            rec.edfeec3 := Convert_Yes_Or_Missing_Type( Get( slices, 77 ));
            rec.edfeed3 := Convert_Yes_Or_Missing_Type( Get( slices, 78 ));
            rec.edfeee3 := Convert_Yes_Or_Missing_Type( Get( slices, 79 ));
            rec.edfeef3 := Convert_Yes_Or_Missing_Type( Get( slices, 80 ));
            rec.edfeeg3 := Convert_Yes_Or_Missing_Type( Get( slices, 81 ));
            rec.plbornd := Convert_Plbornd_Type( Get( slices, 82 ));
            rec.plbornc := Convert_Plbornc_Type( Get( slices, 83 ));
            rec.yr2uk4 := Convert( slices, 84, ( -9, -8, -7, -2, -1 ) );
            rec.citzn1 := Convert( slices, 85, ( -9, -8, -7, -2, -1 ) );
            rec.citzn2 := Convert_Citzn2_Type( Get( slices, 86 ));
            rec.natidb := Convert_Yes_Or_Missing_Type( Get( slices, 87 ));
            rec.natidf := Convert_Yes_Or_Missing_Type( Get( slices, 88 ));
            rec.natidg := Convert_Yes_Or_Missing_Type( Get( slices, 89 ));
            rec.natide := Convert_Yes_Or_Missing_Type( Get( slices, 90 ));
            rec.natida := Convert_Yes_Or_Missing_Type( Get( slices, 91 ));
            rec.natidh := Convert_Natidh_Type( Get( slices, 92 ));
            rec.racel := Convert_Racel_Type( Get( slices, 93 ));
            rec.oprlg4 := Convert_Oprlg4_Type( Get( slices, 94 ));
            rec.oprlg5 := Convert_Oprlg5_Type( Get( slices, 95 ));
            rec.oprlg6 := Convert_Oprlg6_Type( Get( slices, 96 ));
            rec.paju := Convert_Paju_Type( Get( slices, 97 ));
            rec.pasoc := Convert( slices, 98, ( -9, -8, -7, -2, -1 ) );
            rec.pasoc00 := Convert( slices, 99, ( -9, -8, -7, -2, -1 ) );
            rec.pasemp := Convert_J2semp_Type( Get( slices, 100 ));
            rec.paboss := Convert_Maboss_Type( Get( slices, 101 ));
            rec.pamngr := Convert_Mamngr_Type( Get( slices, 102 ));
            rec.maju := Convert_Maju_Type( Get( slices, 103 ));
            rec.masoc := Convert( slices, 104, ( -9, -8, -7, -2, -1 ) );
            rec.masoc00 := Convert( slices, 105, ( -9, -8, -7, -2, -1 ) );
            rec.masemp := Convert_J2semp_Type( Get( slices, 106 ));
            rec.maboss := Convert_Maboss_Type( Get( slices, 107 ));
            rec.mamngr := Convert_Mamngr_Type( Get( slices, 108 ));
            rec.j1none := Convert_J1none_Type( Get( slices, 109 ));
            rec.j1soc := Convert( slices, 110, ( -9, -8, -7, -2, -1 ) );
            rec.j1soc00 := Convert( slices, 111, ( -9, -8, -7, -2, -1 ) );
            rec.j1semp := Convert_J1semp_Type( Get( slices, 112 ));
            rec.j1boss := Convert_J1boss_Type( Get( slices, 113 ));
            rec.j1mngr := Convert_J1mngr_Type( Get( slices, 114 ));
            rec.lcoh := Convert_Aidpl1_Type( Get( slices, 115 ));
            rec.coh1bm := Convert_Ch1bm_Type( Get( slices, 116 ));
            rec.coh1by := Convert( slices, 117, ( -9, -8, -7, -2, -1 ) );
            rec.coh1mr := Convert_Coh1mr_Type( Get( slices, 118 ));
            rec.coh1em := Convert_Ch1bm_Type( Get( slices, 119 ));
            rec.coh1ey := Convert( slices, 120, ( -9, -8, -7, -2, -1 ) );
            rec.nmar := Convert_Nmar_Type( Get( slices, 121 ));
            rec.lmar1m := Convert_Ch1bm_Type( Get( slices, 122 ));
            rec.lmar1y := Convert( slices, 123, ( -9, -8, -7, -2, -1 ) );
            rec.lprnt := Convert_Lprnt_Type( Get( slices, 124 ));
            rec.lnprnt := Convert( slices, 125, ( -9, -8, -7, -2, -1 ) );
            rec.ch1bm := Convert_Ch1bm_Type( Get( slices, 126 ));
            rec.ch1by := Convert( slices, 127, ( -9, -8, -7, -2, -1 ) );
            rec.school := Convert_School_Type( Get( slices, 128 ));
            rec.scend := Convert( slices, 129, ( -9, -8, -7, -2, -1 ) );
            rec.sctype := Convert_Sctype_Type( Get( slices, 130 ));
            rec.scnow := Convert_Cjsck2_Type( Get( slices, 131 ));
            rec.fetype := Convert_Fetype_Type( Get( slices, 132 ));
            rec.fenow := Convert_Fenow_Type( Get( slices, 133 ));
            rec.feend := Convert( slices, 134, ( -9, -8, -7, -2, -1 ) );
            rec.qfhas := Convert_Bscon_Type( Get( slices, 135 ));
            rec.qfa := Convert_Qfa_Type( Get( slices, 136 ));
            rec.qfb := Convert_Qfb_Type( Get( slices, 137 ));
            rec.qfc := Convert_Qfc_Type( Get( slices, 138 ));
            rec.qfd := Convert_Qfd_Type( Get( slices, 139 ));
            rec.qfe := Convert_Qfe_Type( Get( slices, 140 ));
            rec.qff := Convert_Qff_Type( Get( slices, 141 ));
            rec.qfg := Convert_Qfg_Type( Get( slices, 142 ));
            rec.qfh := Convert_Qfh_Type( Get( slices, 143 ));
            rec.qfi := Convert_Qfi_Type( Get( slices, 144 ));
            rec.qfj := Convert_Qfj_Type( Get( slices, 145 ));
            rec.qfk := Convert_Qfk_Type( Get( slices, 146 ));
            rec.qfl := Convert_Qfl_Type( Get( slices, 147 ));
            rec.qfm := Convert_Qfm_Type( Get( slices, 148 ));
            rec.qfn := Convert_Qfn_Type( Get( slices, 149 ));
            rec.qfed := Convert_Bscon_Type( Get( slices, 150 ));
            rec.qfeda := Convert_Qfeda_Type( Get( slices, 151 ));
            rec.nqfeda := Convert( slices, 152, ( -9, -8, -7, -2, -1 ) );
            rec.qfedb := Convert_Qfedb_Type( Get( slices, 153 ));
            rec.nqfedb := Convert( slices, 154, ( -9, -8, -7, -2, -1 ) );
            rec.qfedc := Convert_Qfedc_Type( Get( slices, 155 ));
            rec.nqfedc := Convert( slices, 156, ( -9, -8, -7, -2, -1 ) );
            rec.qfedd := Convert_Qfedd_Type( Get( slices, 157 ));
            rec.nqfedd := Convert( slices, 158, ( -9, -8, -7, -2, -1 ) );
            rec.qfede := Convert_Qfede_Type( Get( slices, 159 ));
            rec.nqfede := Convert( slices, 160, ( -9, -8, -7, -2, -1 ) );
            rec.qfedf := Convert_Qfedf_Type( Get( slices, 161 ));
            rec.nqfedf := Convert( slices, 162, ( -9, -8, -7, -2, -1 ) );
            rec.qfedg := Convert_Qfedg_Type( Get( slices, 163 ));
            rec.nqfedg := Convert( slices, 164, ( -9, -8, -7, -2, -1 ) );
            rec.qfedh := Convert_Qfedh_Type( Get( slices, 165 ));
            rec.nqfedh := Convert( slices, 166, ( -9, -8, -7, -2, -1 ) );
            rec.qfedi := Convert_Qfedi_Type( Get( slices, 167 ));
            rec.nqfedi := Convert( slices, 168, ( -9, -8, -7, -2, -1 ) );
            rec.qfedj := Convert_Qfedj_Type( Get( slices, 169 ));
            rec.nqfedj := Convert( slices, 170, ( -9, -8, -7, -2, -1 ) );
            rec.qfedt := Convert_Qfedt_Type( Get( slices, 171 ));
            rec.nqfedt := Convert( slices, 172, ( -9, -8, -7, -2, -1 ) );
            rec.qfedu := Convert_Qfedu_Type( Get( slices, 173 ));
            rec.nqfedu := Convert( slices, 174, ( -9, -8, -7, -2, -1 ) );
            rec.qfedk := Convert_Qfedk_Type( Get( slices, 175 ));
            rec.nqfedk := Convert( slices, 176, ( -9, -8, -7, -2, -1 ) );
            rec.qfedl := Convert_Qfedl_Type( Get( slices, 177 ));
            rec.nqfedl := Convert( slices, 178, ( -9, -8, -7, -2, -1 ) );
            rec.qfedm := Convert_Qfedm_Type( Get( slices, 179 ));
            rec.nqfedm := Convert( slices, 180, ( -9, -8, -7, -2, -1 ) );
            rec.qfedn := Convert_Qfedn_Type( Get( slices, 181 ));
            rec.nqfedn := Convert( slices, 182, ( -9, -8, -7, -2, -1 ) );
            rec.qfedo := Convert_Qfedo_Type( Get( slices, 183 ));
            rec.nqfedo := Convert( slices, 184, ( -9, -8, -7, -2, -1 ) );
            rec.qfedp := Convert( slices, 185, ( -9, -8, -7 ) );
            rec.nqfedp := Convert( slices, 186, ( -9, -8, -7, -2, -1 ) );
            rec.qfedq := Convert_Qfedq_Type( Get( slices, 187 ));
            rec.nqfedq := Convert( slices, 188, ( -9, -8, -7, -2, -1 ) );
            rec.qfedr := Convert_Qfedr_Type( Get( slices, 189 ));
            rec.nqfedr := Convert( slices, 190, ( -9, -8, -7, -2, -1 ) );
            rec.qfeds := Convert_Hlprbm_Type( Get( slices, 191 ));
            rec.nqfeds := Convert( slices, 192, ( -9, -8, -7, -2, -1 ) );
            rec.train := Convert_Boolean_With_Missing( Get( slices, 193 ));
            rec.ntrain := Convert( slices, 194, ( -9, -8, -7, -2, -1 ) );
            rec.trplce1 := Convert_Trplce1_Type( Get( slices, 195 ));
            rec.trwhya1 := Convert_Boolean_With_Missing( Get( slices, 196 ));
            rec.trwhyb1 := Convert_Boolean_With_Missing( Get( slices, 197 ));
            rec.trwhyc1 := Convert_Boolean_With_Missing( Get( slices, 198 ));
            rec.trwhyd1 := Convert_Boolean_With_Missing( Get( slices, 199 ));
            rec.trwhye1 := Convert_Boolean_With_Missing( Get( slices, 200 ));
            rec.trq1 := Convert( slices, 201, ( -9, -8, -7 ) );
            rec.tru1 := Convert_Tru1_Type( Get( slices, 202 ));
            rec.trfeea1 := Convert_Nisjsa_Type( Get( slices, 203 ));
            rec.trfeeb1 := Convert_Yes_Or_Missing_Type( Get( slices, 204 ));
            rec.trfeec1 := Convert_Yes_Or_Missing_Type( Get( slices, 205 ));
            rec.trfeee1 := Convert_Yes_Or_Missing_Type( Get( slices, 206 ));
            rec.trfeef1 := Convert_Yes_Or_Missing_Type( Get( slices, 207 ));
            rec.trfeeg1 := Convert_Yes_Or_Missing_Type( Get( slices, 208 ));
            rec.trqlxp1 := Convert_Trqlxp1_Type( Get( slices, 209 ));
            rec.trqlac1 := Convert_Trqlac1_Type( Get( slices, 210 ));
            rec.trmore1 := Convert_Boolean_With_Missing( Get( slices, 211 ));
            rec.trplce2 := Convert_Trplce1_Type( Get( slices, 212 ));
            rec.trwhya2 := Convert_Boolean_With_Missing( Get( slices, 213 ));
            rec.trwhyb2 := Convert_Boolean_With_Missing( Get( slices, 214 ));
            rec.trwhyc2 := Convert_Boolean_With_Missing( Get( slices, 215 ));
            rec.trwhyd2 := Convert_Boolean_With_Missing( Get( slices, 216 ));
            rec.trwhye2 := Convert_Boolean_With_Missing( Get( slices, 217 ));
            rec.trq2 := Convert( slices, 218, ( -9, -8, -7 ) );
            rec.tru2 := Convert_Tru1_Type( Get( slices, 219 ));
            rec.trfeea2 := Convert_Nisjsa_Type( Get( slices, 220 ));
            rec.trfeeb2 := Convert_Yes_Or_Missing_Type( Get( slices, 221 ));
            rec.trfeec2 := Convert_Yes_Or_Missing_Type( Get( slices, 222 ));
            rec.trfeee2 := Convert_Yes_Or_Missing_Type( Get( slices, 223 ));
            rec.trfeef2 := Convert_Yes_Or_Missing_Type( Get( slices, 224 ));
            rec.trfeeg2 := Convert_Yes_Or_Missing_Type( Get( slices, 225 ));
            rec.trqlxp2 := Convert_Trqlxp1_Type( Get( slices, 226 ));
            rec.trqlac2 := Convert_Trqlac1_Type( Get( slices, 227 ));
            rec.trmore2 := Convert_Boolean_With_Missing( Get( slices, 228 ));
            rec.trplce3 := Convert_Trplce1_Type( Get( slices, 229 ));
            rec.trwhya3 := Convert_Boolean_With_Missing( Get( slices, 230 ));
            rec.trwhyb3 := Convert_Boolean_With_Missing( Get( slices, 231 ));
            rec.trwhyc3 := Convert_Boolean_With_Missing( Get( slices, 232 ));
            rec.trwhyd3 := Convert_Boolean_With_Missing( Get( slices, 233 ));
            rec.trwhye3 := Convert_Boolean_With_Missing( Get( slices, 234 ));
            rec.trq3 := Convert( slices, 235, ( -9, -8, -7 ) );
            rec.tru3 := Convert_Tru1_Type( Get( slices, 236 ));
            rec.trfeea3 := Convert_Nisjsa_Type( Get( slices, 237 ));
            rec.trfeeb3 := Convert_Yes_Or_Missing_Type( Get( slices, 238 ));
            rec.trfeec3 := Convert_Yes_Or_Missing_Type( Get( slices, 239 ));
            rec.trfeee3 := Convert_Yes_Or_Missing_Type( Get( slices, 240 ));
            rec.trfeef3 := Convert_Yes_Or_Missing_Type( Get( slices, 241 ));
            rec.trfeeg3 := Convert_Yes_Or_Missing_Type( Get( slices, 242 ));
            rec.trqlxp3 := Convert_Trqlxp1_Type( Get( slices, 243 ));
            rec.trqlac3 := Convert_Trqlac1_Type( Get( slices, 244 ));
            rec.qfrec := Convert_Edblyr3_Type( Get( slices, 245 ));
            rec.qfedx := Convert_Aidpl1_Type( Get( slices, 246 ));
            rec.qfedxa := Convert_Qfedd_Type( Get( slices, 247 ));
            rec.nqfexa := Convert( slices, 248, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxb := Convert_Qfede_Type( Get( slices, 249 ));
            rec.nqfexb := Convert( slices, 250, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxl := Convert_Qfedt_Type( Get( slices, 251 ));
            rec.nqfexl := Convert( slices, 252, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxm := Convert_Qfedxm_Type( Get( slices, 253 ));
            rec.nqfexm := Convert( slices, 254, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxn := Convert_Qfedxn_Type( Get( slices, 255 ));
            rec.nqfexn := Convert( slices, 256, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxo := Convert_Qfedxo_Type( Get( slices, 257 ));
            rec.nqfexo := Convert( slices, 258, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxg := Convert_Qfedm_Type( Get( slices, 259 ));
            rec.nqfexg := Convert( slices, 260, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxh := Convert_Qfedxh_Type( Get( slices, 261 ));
            rec.nqfexh := Convert( slices, 262, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxi := Convert_Qfedo_Type( Get( slices, 263 ));
            rec.nqfexi := Convert( slices, 264, ( -9, -8, -7, -2, -1 ) );
            rec.qfx := Convert_Aidpl1_Type( Get( slices, 265 ));
            rec.qfxc := Convert_Qfc_Type( Get( slices, 266 ));
            rec.qfxd := Convert_Qfd_Type( Get( slices, 267 ));
            rec.qfxe := Convert_Qfe_Type( Get( slices, 268 ));
            rec.qfxf := Convert_Qff_Type( Get( slices, 269 ));
            rec.qfxg := Convert_Qfg_Type( Get( slices, 270 ));
            rec.qfxh := Convert_Qfh_Type( Get( slices, 271 ));
            rec.qfxo := Convert_Qfxo_Type( Get( slices, 272 ));
            rec.qfxp := Convert_Qfxp_Type( Get( slices, 273 ));
            rec.qfxq := Convert_Qfxq_Type( Get( slices, 274 ));
            rec.qfxr := Convert_Qfxr_Type( Get( slices, 275 ));
            rec.qfxk := Convert_Qfk_Type( Get( slices, 276 ));
            rec.qfxl := Convert_Qfl_Type( Get( slices, 277 ));
            rec.qfxm := Convert_Qfm_Type( Get( slices, 278 ));
            rec.qfxn := Convert_Qfn_Type( Get( slices, 279 ));
            rec.birhh := Convert_Aglt20_Type( Get( slices, 280 ));
            rec.mabwly := Convert_Aglt20_Type( Get( slices, 281 ));
            rec.mabwnly := Convert( slices, 282, ( -9, -8, -7 ) );
            rec.bwtpn1 := Convert( slices, 283, ( -9, -8, -7 ) );
            rec.bwtagm1 := Convert( slices, 284, ( -9, -8, -7 ) );
            rec.bwtxp1 := Convert_Boolean_With_Missing( Get( slices, 285 ));
            rec.bwtel1 := Convert_Bwtel_Type( Get( slices, 286 ));
            rec.bwtwk1 := Convert( slices, 287, ( -9, -8, -7, -2, -1 ) );
            rec.bwtkn1 := Convert_Bwtkn_Type( Get( slices, 288 ));
            rec.bwtlb1 := Convert( slices, 289, ( -9, -8, -7, -2, -1 ) );
            rec.bwtoz1 := Convert( slices, 290, ( -9, -8, -7, -2, -1 ) );
            rec.bwtgm1 := Convert( slices, 291, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.bwtg51 := Convert_Bwtg51_Type( Get( slices, 292 ));
            rec.bwtpn2 := Convert( slices, 293, ( -9, -8, -7 ) );
            rec.bwtagm2 := Convert( slices, 294, ( -9, -8, -7 ) );
            rec.bwtxp2 := Convert_Boolean_With_Missing( Get( slices, 295 ));
            rec.bwtel2 := Convert_Bwtel2_Type( Get( slices, 296 ));
            rec.bwtwk2 := Convert( slices, 297, ( -9, -8, -7, -2, -1 ) );
            rec.bwtkn2 := Convert_Bwtkn_Type( Get( slices, 298 ));
            rec.bwtlb2 := Convert( slices, 299, ( -9, -8, -7 ) );
            rec.bwtoz2 := Convert( slices, 300, ( -9, -8, -7, -2, -1 ) );
            rec.bwtgm2 := Convert( slices, 301, ( -9, -8, -7 ) );
            rec.bwtg52 := Convert_Bwtg5_Type( Get( slices, 302 ));
            rec.bwtpn3 := Convert( slices, 303, ( -9, -8, -7 ) );
            rec.bwtagm3 := Convert( slices, 304, ( -9, -8, -7 ) );
            rec.bwtxp3 := Convert_Boolean_With_Missing( Get( slices, 305 ));
            rec.bwtel3 := Convert_Bwtel2_Type( Get( slices, 306 ));
            rec.bwtwk3 := Convert( slices, 307, ( -9, -8, -7, -2, -1 ) );
            rec.bwtkn3 := Convert_Bwtkn_Type( Get( slices, 308 ));
            rec.bwtlb3 := Convert( slices, 309, ( -9, -8, -7 ) );
            rec.bwtoz3 := Convert( slices, 310, ( -9, -8, -7, -2, -1 ) );
            rec.bwtgm3 := Convert( slices, 311, ( -9, -8, -7 ) );
            rec.bwtg53 := Convert_Bwtg5_Type( Get( slices, 312 ));
            rec.wlsha := Convert_Yes_Or_Missing_Type( Get( slices, 313 ));
            rec.wlshb := Convert_Yes_Or_Missing_Type( Get( slices, 314 ));
            rec.wlshc := Convert_Yes_Or_Missing_Type( Get( slices, 315 ));
            rec.wlshd := Convert_Yes_Or_Missing_Type( Get( slices, 316 ));
            rec.wlshe := Convert_Jbwkhrh_Type( Get( slices, 317 ));
            rec.wlshua := Convert_Wlshua_Type( Get( slices, 318 ));
            rec.wlshub := Convert_Wlshua_Type( Get( slices, 319 ));
            rec.wlshuc := Convert_Wlshua_Type( Get( slices, 320 ));
            rec.wlshud := Convert_Wlshua_Type( Get( slices, 321 ));
            rec.wlshue := Convert_Wlshua_Type( Get( slices, 322 ));
            rec.aglt20 := Convert_Aglt20_Type( Get( slices, 323 ));
            rec.scnow2 := Convert_Cjsck2_Type( Get( slices, 324 ));
            rec.infted := Convert_Aglt20_Type( Get( slices, 325 ));
            rec.edasp := Convert_Edasp_Type( Get( slices, 326 ));
            rec.fedasp := Convert_Fedasp_Type( Get( slices, 327 ));
            rec.fedtyp := Convert_Fedtyp_Type( Get( slices, 328 ));
            rec.fedlik := Convert_Fedlik_Type( Get( slices, 329 ));
            rec.fednt1 := Convert_Fednt1_Type( Get( slices, 330 ));
            rec.fednt2 := Convert_Fednt2_Type( Get( slices, 331 ));
            rec.ocfut := Convert( slices, 332, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ivda := Convert_Ivda_Type( Get( slices, 333 ));
            rec.ivdb := Convert_Ivdb_Type( Get( slices, 334 ));
            rec.ivdc := Convert_Ivdc_Type( Get( slices, 335 ));
            rec.ivdd := Convert_Ivdd_Type( Get( slices, 336 ));
            rec.ivde := Convert_Yes_Or_Missing_Type( Get( slices, 337 ));
            rec.hldsbl1 := Convert_Hldsbl1_Type( Get( slices, 338 ));
            rec.hlstat := Convert_Hlstat_Type( Get( slices, 339 ));
            rec.hlprb := Convert( slices, 340, ( -9, -8, -7, -2, -1 ) );
            rec.hlprba := Convert_Hlprba_Type( Get( slices, 341 ));
            rec.hlprbb := Convert_Hlprbb_Type( Get( slices, 342 ));
            rec.hlprbc := Convert_Hlprbc_Type( Get( slices, 343 ));
            rec.hlprbd := Convert_Hlprbd_Type( Get( slices, 344 ));
            rec.hlprbe := Convert_Hlprbe_Type( Get( slices, 345 ));
            rec.hlprbf := Convert_Hlprbf_Type( Get( slices, 346 ));
            rec.hlprbg := Convert_Hlprbg_Type( Get( slices, 347 ));
            rec.hlprbh := Convert_Hlprbh_Type( Get( slices, 348 ));
            rec.hlprbi := Convert_Hlprbi_Type( Get( slices, 349 ));
            rec.hlprbj := Convert_Hlprbj_Type( Get( slices, 350 ));
            rec.hlprbk := Convert_Hlprbk_Type( Get( slices, 351 ));
            rec.hlprbl := Convert_Hlprbl_Type( Get( slices, 352 ));
            rec.hlprbn := Convert_Hlprbn_Type( Get( slices, 353 ));
            rec.hlprbo := Convert_Hlprbo_Type( Get( slices, 354 ));
            rec.hlprbm := Convert_Hlprbm_Type( Get( slices, 355 ));
            rec.hllt := Convert_Bscon_Type( Get( slices, 356 ));
            rec.hllta := Convert_Hllta_Type( Get( slices, 357 ));
            rec.hlltb := Convert_Hlltb_Type( Get( slices, 358 ));
            rec.hlltc := Convert_Hlltc_Type( Get( slices, 359 ));
            rec.hlltd := Convert_Hlltd_Type( Get( slices, 360 ));
            rec.hllte := Convert_Hllte_Type( Get( slices, 361 ));
            rec.hlltw := Convert_Bscon_Type( Get( slices, 362 ));
            rec.hlendw := Convert_Hlendw_Type( Get( slices, 363 ));
            rec.hlltwa := Convert_Hlltwa_Type( Get( slices, 364 ));
            rec.hliv65 := Convert_Hliv65_Type( Get( slices, 365 ));
            rec.adla := Convert_Adla_Type( Get( slices, 366 ));
            rec.adlad := Convert_Adlad_Type( Get( slices, 367 ));
            rec.adlb := Convert_Adla_Type( Get( slices, 368 ));
            rec.adlbd := Convert_Adlad_Type( Get( slices, 369 ));
            rec.adlc := Convert_Adla_Type( Get( slices, 370 ));
            rec.adlcd := Convert_Adlad_Type( Get( slices, 371 ));
            rec.adld := Convert_Adla_Type( Get( slices, 372 ));
            rec.adldd := Convert_Adlad_Type( Get( slices, 373 ));
            rec.adle := Convert_Adla_Type( Get( slices, 374 ));
            rec.adled := Convert_Adlad_Type( Get( slices, 375 ));
            rec.adlf := Convert_Adla_Type( Get( slices, 376 ));
            rec.adlfd := Convert_Adlad_Type( Get( slices, 377 ));
            rec.hl2gp := Convert_Hl2gp_Type( Get( slices, 378 ));
            rec.hl2hop := Convert( slices, 379, ( -9, -8, -7, -2, -1 ) );
            rec.xdts := Convert_Bscon_Type( Get( slices, 380 ));
            rec.nxdts := Convert_Nxdts_Type( Get( slices, 381 ));
            rec.hosp := Convert_Hlsv_Type( Get( slices, 382 ));
            rec.hospd := Convert( slices, 383, ( -9, -8, -7, -2, -1 ) );
            rec.hospch := Convert_Hospch_Type( Get( slices, 384 ));
            rec.hospnhs := Convert_Hospnhs_Type( Get( slices, 385 ));
            rec.hlcvr := Convert_Hlcvr_Type( Get( slices, 386 ));
            rec.hlcvrh := Convert_Hlcvrh_Type( Get( slices, 387 ));
            rec.hlcvrl := Convert( slices, 388, ( -9, -8, -7, -2, -1 ) );
            rec.hlsv := Convert_Hlsv_Type( Get( slices, 389 ));
            rec.hlsva := Convert_Hlsva_Type( Get( slices, 390 ));
            rec.hlsvan := Convert_Hlsvan_Type( Get( slices, 391 ));
            rec.hlsvaf := Convert_Hlsvaf_Type( Get( slices, 392 ));
            rec.hlsvb := Convert_Hlsvb_Type( Get( slices, 393 ));
            rec.hlsvbn := Convert_Hlsvan_Type( Get( slices, 394 ));
            rec.hlsvbf := Convert_Hlsvaf_Type( Get( slices, 395 ));
            rec.hlsvc := Convert_Hlsvc_Type( Get( slices, 396 ));
            rec.hlsvcn := Convert_Hlsvan_Type( Get( slices, 397 ));
            rec.hlsvcf := Convert_Hlsvaf_Type( Get( slices, 398 ));
            rec.hlsvd := Convert_Hlsvd_Type( Get( slices, 399 ));
            rec.hlsvdn := Convert_Hlsvan_Type( Get( slices, 400 ));
            rec.hlsvdf := Convert_Hlsvaf_Type( Get( slices, 401 ));
            rec.hlsve := Convert_Hlsve_Type( Get( slices, 402 ));
            rec.hlsven := Convert_Hlsvan_Type( Get( slices, 403 ));
            rec.hlsvef := Convert_Hlsvaf_Type( Get( slices, 404 ));
            rec.hlsvf := Convert_Hlsvf_Type( Get( slices, 405 ));
            rec.hlsvfn := Convert_Hlsvan_Type( Get( slices, 406 ));
            rec.hlsvff := Convert_Hlsvaf_Type( Get( slices, 407 ));
            rec.hlsvg := Convert_Hlsvg_Type( Get( slices, 408 ));
            rec.hlsvgn := Convert_Hlsvan_Type( Get( slices, 409 ));
            rec.hlsvgf := Convert_Hlsvaf_Type( Get( slices, 410 ));
            rec.hlsvh := Convert_Hlsvh_Type( Get( slices, 411 ));
            rec.hlsvhn := Convert_Hlsvan_Type( Get( slices, 412 ));
            rec.hlsvhf := Convert_Hlsvaf_Type( Get( slices, 413 ));
            rec.hlsvi := Convert_Hlsvi_Type( Get( slices, 414 ));
            rec.hlsvin := Convert_Hlsvan_Type( Get( slices, 415 ));
            rec.hlsvif := Convert_Hlsvaf_Type( Get( slices, 416 ));
            rec.hlsvl := Convert_Hlsvl_Type( Get( slices, 417 ));
            rec.hlsvln := Convert_Hlsvln_Type( Get( slices, 418 ));
            rec.hlsvlf := Convert_Hlsvlf_Type( Get( slices, 419 ));
            rec.hlsvm := Convert_Hlsvm_Type( Get( slices, 420 ));
            rec.hlsvmn := Convert_Hlsvln_Type( Get( slices, 421 ));
            rec.hlsvmf := Convert_Hlsvlf_Type( Get( slices, 422 ));
            rec.hlsvj := Convert_Hlsvj_Type( Get( slices, 423 ));
            rec.hlsvjn := Convert_Hlsvan_Type( Get( slices, 424 ));
            rec.hlsvjf := Convert_Hlsvaf_Type( Get( slices, 425 ));
            rec.hlsvk := Convert_Hlsvk_Type( Get( slices, 426 ));
            rec.hlsvkn := Convert_Hlsvan_Type( Get( slices, 427 ));
            rec.hlsvkf := Convert_Hlsvaf_Type( Get( slices, 428 ));
            rec.hlck := Convert_Aidpl1_Type( Get( slices, 429 ));
            rec.hlcka := Convert_Hlcka_Type( Get( slices, 430 ));
            rec.hlckan := Convert_Hlckan_Type( Get( slices, 431 ));
            rec.hlckb := Convert_Hlcka_Type( Get( slices, 432 ));
            rec.hlckbn := Convert_Hlckan_Type( Get( slices, 433 ));
            rec.hlckc := Convert_Hlcka_Type( Get( slices, 434 ));
            rec.hlckcn := Convert_Hlckan_Type( Get( slices, 435 ));
            rec.hlckd := Convert_Hlcka_Type( Get( slices, 436 ));
            rec.hlckdn := Convert_Hlckan_Type( Get( slices, 437 ));
            rec.hlcke := Convert_Hlcka_Type( Get( slices, 438 ));
            rec.hlcken := Convert_Hlckan_Type( Get( slices, 439 ));
            rec.hlcki := Convert_Hlcki_Type( Get( slices, 440 ));
            rec.hlckin := Convert_Hlckin_Type( Get( slices, 441 ));
            rec.hlckf := Convert_Hlcka_Type( Get( slices, 442 ));
            rec.hlckfn := Convert_Hlckan_Type( Get( slices, 443 ));
            rec.hlckg := Convert_Hlcka_Type( Get( slices, 444 ));
            rec.hlckgn := Convert_Hlckan_Type( Get( slices, 445 ));
            rec.hlckh := Convert_Hlcka_Type( Get( slices, 446 ));
            rec.hlckhn := Convert_Hlckan_Type( Get( slices, 447 ));
            rec.smoker := Convert_Bscon_Type( Get( slices, 448 ));
            rec.ncigs := Convert( slices, 449, ( -9, -8, -7, -2, -1 ) );
            rec.aidhh := Convert_Aidhh_Type( Get( slices, 450 ));
            rec.aidhua := Convert( slices, 451, ( -9, -8, -7, -1 ) );
            rec.aidhub := Convert( slices, 452, ( -9, -8, -7 ) );
            rec.aidhuc := Convert( slices, 453, ( -9, -8, -7 ) );
            rec.aidxhh := Convert_Aidxhh_Type( Get( slices, 454 ));
            rec.naidxhh := Convert_Naidxhh_Type( Get( slices, 455 ));
            rec.aidhu1 := Convert_Aidhu1_Type( Get( slices, 456 ));
            rec.aidhu2 := Convert_Aidhu2_Type( Get( slices, 457 ));
            rec.aidhrs := Convert_Aidhrs_Type( Get( slices, 458 ));
            rec.ivma := Convert_Ivda_Type( Get( slices, 459 ));
            rec.ivmb := Convert_Ivdb_Type( Get( slices, 460 ));
            rec.ivmc := Convert_Ivec_Type( Get( slices, 461 ));
            rec.ivmd := Convert_Ivdd_Type( Get( slices, 462 ));
            rec.ivme := Convert_Ivee_Type( Get( slices, 463 ));
            rec.jbhas := Convert_Frnow_Type( Get( slices, 464 ));
            rec.jboff := Convert_Jboff_Type( Get( slices, 465 ));
            rec.jboffy := Convert_Jboffy_Type( Get( slices, 466 ));
            rec.jbterm1 := Convert_Jbterm1_Type( Get( slices, 467 ));
            rec.jbterm2 := Convert_Jbterm2_Type( Get( slices, 468 ));
            rec.jbsoc := Convert( slices, 469, ( -9, -8, -2, -1 ) );
            rec.jbsoc00 := Convert( slices, 470, ( -9, -8, -2, -1 ) );
            rec.jbsic92 := Convert( slices, 471, ( -9, -8, -7, -2, -1 ) );
            rec.jbsemp := Convert_Jbsemp_Type( Get( slices, 472 ));
            rec.jbmngr := Convert_Jbmngr_Type( Get( slices, 473 ));
            rec.jbsect := Convert_Jbsect_Type( Get( slices, 474 ));
            rec.jbsize := Convert_Jbsize_Type( Get( slices, 475 ));
            rec.jbmrs := Convert_Jbmrs_Type( Get( slices, 476 ));
            rec.jbhrs := Convert( slices, 477, ( -9, -8, -7, -2, -1 ) );
            rec.jbot := Convert( slices, 478, ( -9, -8, -7, -2, -1 ) );
            rec.jbotpd := Convert( slices, 479, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbhrlk := Convert_Jbhrlk_Type( Get( slices, 480 ));
            rec.jbpl := Convert_Jbpl_Type( Get( slices, 481 ));
            rec.jbttwt := Convert( slices, 482, ( -9, -8, -7, -3, -2, -1 ) );
            rec.jbttwm := Convert_Jbttwm_Type( Get( slices, 483 ));
            rec.jbsat2 := Convert( slices, 484, ( -9, -8, -7, -2, -1 ) );
            rec.jbsat4 := Convert_Jbsat4_Type( Get( slices, 485 ));
            rec.jbsat6 := Convert_Jbsat4_Type( Get( slices, 486 ));
            rec.jbsat7 := Convert_Jbsat_Type( Get( slices, 487 ));
            rec.jbsat := Convert_Jbsat_Type( Get( slices, 488 ));
            rec.paygl := Convert( slices, 489, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.paygw := Convert( slices, 490, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.paynl := Convert( slices, 491, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.paynw := Convert( slices, 492, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.pytc := Convert_Pytc_Type( Get( slices, 493 ));
            rec.pywftc := Convert( slices, 494, ( -9, -8, -7, -2, -1 ) );
            rec.pywftcw := Convert( slices, 495, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.payslp := Convert_Payslp_Type( Get( slices, 496 ));
            rec.payusl := Convert_Aidpl1_Type( Get( slices, 497 ));
            rec.payu := Convert( slices, 498, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.payuw := Convert( slices, 499, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.payug := Convert_Paylyg_Type( Get( slices, 500 ));
            rec.paydf1 := Convert_Paydf1_Type( Get( slices, 501 ));
            rec.paydf2 := Convert_Paydf2_Type( Get( slices, 502 ));
            rec.paydf3 := Convert_Paydf3_Type( Get( slices, 503 ));
            rec.paydf4 := Convert_Paydf4_Type( Get( slices, 504 ));
            rec.paydf5 := Convert_Paydf5_Type( Get( slices, 505 ));
            rec.paydf6 := Convert_Paydf6_Type( Get( slices, 506 ));
            rec.paydf7 := Convert_Paydf7_Type( Get( slices, 507 ));
            rec.paydf9 := Convert_Paydf9_Type( Get( slices, 508 ));
            rec.paydf8 := Convert_Paydf8_Type( Get( slices, 509 ));
            rec.paytyp := Convert_Paytyp_Type( Get( slices, 510 ));
            rec.ovtpay := Convert_Bpar16_Type( Get( slices, 511 ));
            rec.extrate := Convert( slices, 512, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.extrest := Convert_Basrest_Type( Get( slices, 513 ));
            rec.basrate := Convert( slices, 514, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.basrest := Convert_Basrest_Type( Get( slices, 515 ));
            rec.ovtrate := Convert( slices, 516, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.ovtrest := Convert_Basrest_Type( Get( slices, 517 ));
            rec.jbperfp := Convert_Coh1mr_Type( Get( slices, 518 ));
            rec.jbonus := Convert_Aidpl1_Type( Get( slices, 519 ));
            rec.jbonam := Convert( slices, 520, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbong := Convert_Jbong_Type( Get( slices, 521 ));
            rec.jbrise := Convert_Aidpl1_Type( Get( slices, 522 ));
            rec.tujbpl := Convert_Aidpl1_Type( Get( slices, 523 ));
            rec.tuin1 := Convert_Aidpl1_Type( Get( slices, 524 ));
            rec.jbopps := Convert_Aidpl1_Type( Get( slices, 525 ));
            rec.jbpen := Convert_Aidpl1_Type( Get( slices, 526 ));
            rec.jbpenm := Convert_Aidpl1_Type( Get( slices, 527 ));
            rec.jbpeny4 := Convert( slices, 528, ( -9, -8, -7, -2, -1 ) );
            rec.penmcn := Convert_Penmcn_Type( Get( slices, 529 ));
            rec.penmpy := Convert( slices, 530, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.penmtp := Convert_Penmtp_Type( Get( slices, 531 ));
            rec.spinhh := Convert_Hhch12_Type( Get( slices, 532 ));
            rec.penspb := Convert_Bscon_Type( Get( slices, 533 ));
            rec.jbtime := Convert_Jbtime_Type( Get( slices, 534 ));
            rec.jbwkhra := Convert_Yes_Or_Missing_Type( Get( slices, 535 ));
            rec.jbwkhrb := Convert_Yes_Or_Missing_Type( Get( slices, 536 ));
            rec.jbwkhrc := Convert_Yes_Or_Missing_Type( Get( slices, 537 ));
            rec.jbwkhrd := Convert_Yes_Or_Missing_Type( Get( slices, 538 ));
            rec.jbwkhre := Convert_Yes_Or_Missing_Type( Get( slices, 539 ));
            rec.jbwkhrf := Convert_Yes_Or_Missing_Type( Get( slices, 540 ));
            rec.jbwkhrg := Convert_Yes_Or_Missing_Type( Get( slices, 541 ));
            rec.jbwkhrh := Convert_Jbwkhrh_Type( Get( slices, 542 ));
            rec.jbbgd := Convert( slices, 543, ( -9, -8, -7, -2, -1 ) );
            rec.jbbgm := Convert_Cjsbgm_Type( Get( slices, 544 ));
            rec.jbbgy4 := Convert( slices, 545, ( -9, -8, -7, -2, -1 ) );
            rec.jbbgly := Convert_Jbbgly_Type( Get( slices, 546 ));
            rec.pays := Convert( slices, 547, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.paysw := Convert( slices, 548, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.paysg := Convert_Paylyg_Type( Get( slices, 549 ));
            rec.payly := Convert( slices, 550, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.paylyw := Convert( slices, 551, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.paylyg := Convert_Paylyg_Type( Get( slices, 552 ));
            rec.jsboss := Convert_Jsboss_Type( Get( slices, 553 ));
            rec.jssize := Convert_Jssize_Type( Get( slices, 554 ));
            rec.jshrs := Convert( slices, 555, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jshrlk := Convert_Jbhrlk_Type( Get( slices, 556 ));
            rec.jstime := Convert_Jstime_Type( Get( slices, 557 ));
            rec.jstypeb := Convert_Jstypeb_Type( Get( slices, 558 ));
            rec.jsaccs := Convert_Jsaccs_Type( Get( slices, 559 ));
            rec.jspart := Convert_Jspart_Type( Get( slices, 560 ));
            rec.jsprbm := Convert_Cjsbgm_Type( Get( slices, 561 ));
            rec.jsprby4 := Convert( slices, 562, ( -9, -8, -7, -2, -1 ) );
            rec.jsprem := Convert_Cjsbgm_Type( Get( slices, 563 ));
            rec.jsprey4 := Convert( slices, 564, ( -9, -8, -7, -2, -1 ) );
            rec.jsprf := Convert( slices, 565, ( -9, -8, -7, -3, -2, -1 ) );
            rec.jsprls := Convert_Jsprls_Type( Get( slices, 566 ));
            rec.jsprtx := Convert_Jsprtx_Type( Get( slices, 567 ));
            rec.jsprni := Convert_Jsprni_Type( Get( slices, 568 ));
            rec.jspayu := Convert( slices, 569, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jspayw := Convert( slices, 570, ( -9.0, -8.0, -7.0, -4.0, -2.0, -1.0 ) );
            rec.jspytx := Convert_Jspytx_Type( Get( slices, 571 ));
            rec.jspyni := Convert_Jspyni_Type( Get( slices, 572 ));
            rec.jspl := Convert_Jspl_Type( Get( slices, 573 ));
            rec.jsttwt := Convert( slices, 574, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.jsttwm := Convert_Jsttwm_Type( Get( slices, 575 ));
            rec.jssat1 := Convert_Jssat1_Type( Get( slices, 576 ));
            rec.jssat2 := Convert_Jbsat_Type( Get( slices, 577 ));
            rec.jssat4 := Convert_Jbsat_Type( Get( slices, 578 ));
            rec.jssat5 := Convert_Jbsat_Type( Get( slices, 579 ));
            rec.jssat := Convert_Jbsat_Type( Get( slices, 580 ));
            rec.jsbgd := Convert( slices, 581, ( -9, -8, -7, -2, -1 ) );
            rec.jsbgm := Convert_Cjsbgm_Type( Get( slices, 582 ));
            rec.jsbgy4 := Convert( slices, 583, ( -9, -8, -7, -2, -1 ) );
            rec.jblkcha := Convert_Jblkcha_Type( Get( slices, 584 ));
            rec.jbxpcha := Convert_Jblkcha_Type( Get( slices, 585 ));
            rec.jblkchb := Convert_Boolean_With_Missing( Get( slices, 586 ));
            rec.jbxpchb := Convert_Boolean_With_Missing( Get( slices, 587 ));
            rec.jblkchc := Convert_Boolean_With_Missing( Get( slices, 588 ));
            rec.jbxpchc := Convert_Boolean_With_Missing( Get( slices, 589 ));
            rec.jblkchd := Convert_Boolean_With_Missing( Get( slices, 590 ));
            rec.jbxpchd := Convert_Boolean_With_Missing( Get( slices, 591 ));
            rec.jblkche := Convert_Boolean_With_Missing( Get( slices, 592 ));
            rec.jbxpche := Convert_Boolean_With_Missing( Get( slices, 593 ));
            rec.rach12 := Convert_Hhch12_Type( Get( slices, 594 ));
            rec.jbchc1 := Convert_Jbchc1_Type( Get( slices, 595 ));
            rec.jbchc2 := Convert_Jbchc2_Type( Get( slices, 596 ));
            rec.jbchc3 := Convert_Jbchc3_Type( Get( slices, 597 ));
            rec.xpchcf := Convert_Xpchcf_Type( Get( slices, 598 ));
            rec.xpchc := Convert( slices, 599, ( -9, -8, -7, -2, -1 ) );
            rec.huxpch := Convert_Huxpch_Type( Get( slices, 600 ));
            rec.hunurs := Convert_Hunurs_Type( Get( slices, 601 ));
            rec.julk1 := Convert_Aidpl1_Type( Get( slices, 602 ));
            rec.julk4 := Convert_Bscon_Type( Get( slices, 603 ));
            rec.julka := Convert_Boolean_With_Missing( Get( slices, 604 ));
            rec.julkb := Convert_Boolean_With_Missing( Get( slices, 605 ));
            rec.julkc := Convert_Boolean_With_Missing( Get( slices, 606 ));
            rec.julkd := Convert_Boolean_With_Missing( Get( slices, 607 ));
            rec.julke := Convert_Boolean_With_Missing( Get( slices, 608 ));
            rec.julkjb := Convert_Aidpl1_Type( Get( slices, 609 ));
            rec.jubgn := Convert_Boolean_With_Missing( Get( slices, 610 ));
            rec.juspec := Convert_Juspec_Type( Get( slices, 611 ));
            rec.jusoc := Convert( slices, 612, ( -9, -8, -7, -2, -1 ) );
            rec.jusoc00 := Convert( slices, 613, ( -9, -8, -7, -2, -1 ) );
            rec.juhrsx := Convert( slices, 614, ( -9, -8, -7, -2, -1 ) );
            rec.jupayx := Convert( slices, 615, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jupayl := Convert( slices, 616, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.juhrsl := Convert( slices, 617, ( -9, -8, -7, -2, -1 ) );
            rec.eprosh := Convert_Cohxpm2_Type( Get( slices, 618 ));
            rec.eaage := Convert_Eaage_Type( Get( slices, 619 ));
            rec.jbub := Convert_Bscon_Type( Get( slices, 620 ));
            rec.jbuby := Convert_Jbuby_Type( Get( slices, 621 ));
            rec.j2has := Convert_Aidpl1_Type( Get( slices, 622 ));
            rec.j2soc := Convert( slices, 623, ( -9, -8, -7, -2, -1 ) );
            rec.j2soc00 := Convert( slices, 624, ( -9, -8, -7, -2, -1 ) );
            rec.j2semp := Convert_J2semp_Type( Get( slices, 625 ));
            rec.j2hrs := Convert( slices, 626, ( -9, -8, -7, -2, -1 ) );
            rec.j2pay := Convert( slices, 627, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ivea := Convert_Ivda_Type( Get( slices, 628 ));
            rec.iveb := Convert_Ivdb_Type( Get( slices, 629 ));
            rec.ivec := Convert_Ivec_Type( Get( slices, 630 ));
            rec.ived := Convert_Ivdd_Type( Get( slices, 631 ));
            rec.ivee := Convert_Ivee_Type( Get( slices, 632 ));
            rec.nemst := Convert_Nemst_Type( Get( slices, 633 ));
            rec.cjsbgd := Convert( slices, 634, ( -9, -8, -7, -2, -1 ) );
            rec.cjsbgm := Convert_Cjsbgm_Type( Get( slices, 635 ));
            rec.cjsbgy4 := Convert( slices, 636, ( -9, -8, -7, -2, -1 ) );
            rec.cjsbly := Convert_Cjsbly_Type( Get( slices, 637 ));
            rec.njbs := Convert( slices, 638, ( -9, -8, -7 ) );
            rec.jbhad := Convert_Aidpl1_Type( Get( slices, 639 ));
            rec.jlend4 := Convert( slices, 640, ( -9, -8, -7, -2, -1 ) );
            rec.jlsoc := Convert( slices, 641, ( -9, -8, -7, -2, -1 ) );
            rec.jlsoc00 := Convert( slices, 642, ( -9, -8, -7, -2, -1 ) );
            rec.jlsic92 := Convert( slices, 643, ( -9, -8, -7 ) );
            rec.jlsemp := Convert_J2semp_Type( Get( slices, 644 ));
            rec.jlboss := Convert_Aidpl1_Type( Get( slices, 645 ));
            rec.jlmngr := Convert_Jlmngr_Type( Get( slices, 646 ));
            rec.jlsize := Convert_Jlsize_Type( Get( slices, 647 ));
            rec.ivja := Convert_Ivda_Type( Get( slices, 648 ));
            rec.ivjb := Convert_Ivdb_Type( Get( slices, 649 ));
            rec.ivjc := Convert_Ivec_Type( Get( slices, 650 ));
            rec.ivjd := Convert_Ivdd_Type( Get( slices, 651 ));
            rec.ivje := Convert_Ivee_Type( Get( slices, 652 ));
            rec.opnata := Convert_Opnata_Type( Get( slices, 653 ));
            rec.opnatb := Convert_Opnata_Type( Get( slices, 654 ));
            rec.opnatc := Convert_Opnata_Type( Get( slices, 655 ));
            rec.opnatd := Convert_Opnata_Type( Get( slices, 656 ));
            rec.opnate := Convert_Opnata_Type( Get( slices, 657 ));
            rec.opnatf := Convert_Opnata_Type( Get( slices, 658 ));
            rec.vote1 := Convert_Aidpl1_Type( Get( slices, 659 ));
            rec.vote2 := Convert_Aidpl1_Type( Get( slices, 660 ));
            rec.vote3 := Convert_Vote3_Type( Get( slices, 661 ));
            rec.vote4 := Convert_Vote3_Type( Get( slices, 662 ));
            rec.vote5 := Convert_Vote5_Type( Get( slices, 663 ));
            rec.vote7 := Convert_Vote7_Type( Get( slices, 664 ));
            rec.vote8 := Convert_Vote8_Type( Get( slices, 665 ));
            rec.vote6 := Convert_Vote6_Type( Get( slices, 666 ));
            rec.opcls1 := Convert_Aidpl1_Type( Get( slices, 667 ));
            rec.opcls2 := Convert_Opcls2_Type( Get( slices, 668 ));
            rec.opcls3 := Convert_Opcls3_Type( Get( slices, 669 ));
            rec.orgm := Convert_Aidpl1_Type( Get( slices, 670 ));
            rec.orgma := Convert_Orgma_Type( Get( slices, 671 ));
            rec.orgaa := Convert_Orgaa_Type( Get( slices, 672 ));
            rec.orgmb := Convert_Orgmb_Type( Get( slices, 673 ));
            rec.orgab := Convert_Orgab_Type( Get( slices, 674 ));
            rec.orgmc := Convert_Orgmc_Type( Get( slices, 675 ));
            rec.orgac := Convert_Orgac_Type( Get( slices, 676 ));
            rec.orgmd := Convert_Orgmd_Type( Get( slices, 677 ));
            rec.orgad := Convert_Orgad_Type( Get( slices, 678 ));
            rec.orgme := Convert_Orgme_Type( Get( slices, 679 ));
            rec.orgae := Convert_Orgae_Type( Get( slices, 680 ));
            rec.orgmf := Convert_Orgmf_Type( Get( slices, 681 ));
            rec.orgaf := Convert_Orgaf_Type( Get( slices, 682 ));
            rec.orgmg := Convert_Orgmg_Type( Get( slices, 683 ));
            rec.orgag := Convert_Orgag_Type( Get( slices, 684 ));
            rec.orgmp := Convert_Orgmp_Type( Get( slices, 685 ));
            rec.orgap := Convert_Orgap_Type( Get( slices, 686 ));
            rec.orgmq := Convert_Orgmq_Type( Get( slices, 687 ));
            rec.orgaq := Convert_Orgaq_Type( Get( slices, 688 ));
            rec.orgmo := Convert_Orgmo_Type( Get( slices, 689 ));
            rec.orgao := Convert_Orgao_Type( Get( slices, 690 ));
            rec.orgmh := Convert_Orgmh_Type( Get( slices, 691 ));
            rec.orgah := Convert_Orgah_Type( Get( slices, 692 ));
            rec.orgmi := Convert_Orgmi_Type( Get( slices, 693 ));
            rec.orgai := Convert_Orgai_Type( Get( slices, 694 ));
            rec.orgmj := Convert_Orgmj_Type( Get( slices, 695 ));
            rec.orgaj := Convert_Orgaj_Type( Get( slices, 696 ));
            rec.orgmk := Convert_Orgmk_Type( Get( slices, 697 ));
            rec.orgak := Convert_Orgak_Type( Get( slices, 698 ));
            rec.orgml := Convert_Orgml_Type( Get( slices, 699 ));
            rec.orgal := Convert_Orgal_Type( Get( slices, 700 ));
            rec.orgmm := Convert_Orgmm_Type( Get( slices, 701 ));
            rec.orgam := Convert_Orgam_Type( Get( slices, 702 ));
            rec.orga := Convert_Aidpl1_Type( Get( slices, 703 ));
            rec.trust := Convert_Trust_Type( Get( slices, 704 ));
            rec.frna := Convert_Frna_Type( Get( slices, 705 ));
            rec.frnb := Convert_Frna_Type( Get( slices, 706 ));
            rec.frnc := Convert_Coh1mr_Type( Get( slices, 707 ));
            rec.ivva := Convert_Ivva_Type( Get( slices, 708 ));
            rec.ivvb := Convert_Ivdb_Type( Get( slices, 709 ));
            rec.ivvc := Convert_Ivfc_Type( Get( slices, 710 ));
            rec.ivvd := Convert_Ivdd_Type( Get( slices, 711 ));
            rec.ivve := Convert_Ivee_Type( Get( slices, 712 ));
            rec.f101 := Convert_F101_Type( Get( slices, 713 ));
            rec.f102 := Convert_F102_Type( Get( slices, 714 ));
            rec.f103 := Convert_F103_Type( Get( slices, 715 ));
            rec.f104 := Convert( slices, 716, ( -9, -8, -7 ) );
            rec.f105 := Convert_F105_Type( Get( slices, 717 ));
            rec.f106 := Convert_F106_Type( Get( slices, 718 ));
            rec.f107 := Convert_F107_Type( Get( slices, 719 ));
            rec.f116 := Convert_F116_Type( Get( slices, 720 ));
            rec.f118 := Convert_F118_Type( Get( slices, 721 ));
            rec.f119 := Convert_F119_Type( Get( slices, 722 ));
            rec.f121 := Convert_F121_Type( Get( slices, 723 ));
            rec.f122 := Convert_F122_Type( Get( slices, 724 ));
            rec.f125 := Convert_F125_Type( Get( slices, 725 ));
            rec.f126 := Convert_F126_Type( Get( slices, 726 ));
            rec.f127 := Convert_F127_Type( Get( slices, 727 ));
            rec.f128 := Convert_F128_Type( Get( slices, 728 ));
            rec.f132 := Convert_F132_Type( Get( slices, 729 ));
            rec.f135 := Convert_F135_Type( Get( slices, 730 ));
            rec.f136 := Convert_F136_Type( Get( slices, 731 ));
            rec.f137 := Convert_F137_Type( Get( slices, 732 ));
            rec.f138 := Convert_F138_Type( Get( slices, 733 ));
            rec.f139 := Convert_F139_Type( Get( slices, 734 ));
            rec.f140 := Convert_F140_Type( Get( slices, 735 ));
            rec.f141 := Convert_F141_Type( Get( slices, 736 ));
            rec.f142 := Convert_F142_Type( Get( slices, 737 ));
            rec.f143 := Convert_F143_Type( Get( slices, 738 ));
            rec.f151 := Convert_F151_Type( Get( slices, 739 ));
            rec.f152 := Convert_F152_Type( Get( slices, 740 ));
            rec.f153 := Convert_F153_Type( Get( slices, 741 ));
            rec.f154 := Convert_F154_Type( Get( slices, 742 ));
            rec.f155 := Convert_F155_Type( Get( slices, 743 ));
            rec.f156 := Convert_F156_Type( Get( slices, 744 ));
            rec.f157 := Convert_F157_Type( Get( slices, 745 ));
            rec.f158 := Convert_F158_Type( Get( slices, 746 ));
            rec.f159 := Convert_F159_Type( Get( slices, 747 ));
            rec.nf1 := Convert( slices, 748, ( -9, -8, -7, -2, -1 ) );
            rec.rsrpen := Convert_Cbagef_Type( Get( slices, 749 ));
            rec.rpencr := Convert_Cbagef_Type( Get( slices, 750 ));
            rec.rdsben := Convert_Cbagef_Type( Get( slices, 751 ));
            rec.rdsbn16 := Convert_Yes_Or_Missing_Type( Get( slices, 752 ));
            rec.rdsbn18 := Convert_Yes_Or_Missing_Type( Get( slices, 753 ));
            rec.rdsbn19 := Convert_Yes_Or_Missing_Type( Get( slices, 754 ));
            rec.rdsbn21 := Convert_Yes_Or_Missing_Type( Get( slices, 755 ));
            rec.rdsbn22 := Convert_Yes_Or_Missing_Type( Get( slices, 756 ));
            rec.rdsbn25 := Convert_Yes_Or_Missing_Type( Get( slices, 757 ));
            rec.rdsbn26 := Convert_Yes_Or_Missing_Type( Get( slices, 758 ));
            rec.rdsbn27 := Convert_Yes_Or_Missing_Type( Get( slices, 759 ));
            rec.rdsbn28 := Convert_Yes_Or_Missing_Type( Get( slices, 760 ));
            rec.ris := Convert_Yes_Or_Missing_Type( Get( slices, 761 ));
            rec.rjsa := Convert_Yes_Or_Missing_Type( Get( slices, 762 ));
            rec.nisjsa := Convert_Nisjsa_Type( Get( slices, 763 ));
            rec.mach18 := Convert_Mach18_Type( Get( slices, 764 ));
            rec.rchben := Convert_Cbagef_Type( Get( slices, 765 ));
            rec.rhben := Convert_Cbagef_Type( Get( slices, 766 ));
            rec.nipens := Convert_Cbagef_Type( Get( slices, 767 ));
            rec.niserps := Convert_Cbagef_Type( Get( slices, 768 ));
            rec.fisit := Convert_Fisit_Type( Get( slices, 769 ));
            rec.fisitc := Convert( slices, 770, ( -9, -8, -7, -2, -1 ) );
            rec.fisity := Convert_Fisity_Type( Get( slices, 771 ));
            rec.fisitx := Convert( slices, 772, ( -9, -8, -7, -2, -1 ) );
            rec.fiyrdia := Convert( slices, 773, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.fiyrdb1 := Convert_Boolean_With_Missing( Get( slices, 774 ));
            rec.fiyrdb2 := Convert_Boolean_With_Missing( Get( slices, 775 ));
            rec.fiyrdb3 := Convert_Boolean_With_Missing( Get( slices, 776 ));
            rec.fiyrdb4 := Convert_Boolean_With_Missing( Get( slices, 777 ));
            rec.fiyrdb5 := Convert_Boolean_With_Missing( Get( slices, 778 ));
            rec.fiyrdb6 := Convert_Boolean_With_Missing( Get( slices, 779 ));
            rec.save := Convert_Aidpl1_Type( Get( slices, 780 ));
            rec.saved := Convert( slices, 781, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.savey1 := Convert_Savey1_Type( Get( slices, 782 ));
            rec.savey2 := Convert_Savey1_Type( Get( slices, 783 ));
            rec.savreg := Convert_Savreg_Type( Get( slices, 784 ));
            rec.savlt := Convert_Savlt_Type( Get( slices, 785 ));
            rec.nvestnn := Convert( slices, 786, ( -9, -8, -7, -2, -1 ) );
            rec.nvesth := Convert_Nvesth_Type( Get( slices, 787 ));
            rec.nvesti := Convert_Nvesti_Type( Get( slices, 788 ));
            rec.nvestj := Convert_Nvestj_Type( Get( slices, 789 ));
            rec.nvesta := Convert_Nvesta_Type( Get( slices, 790 ));
            rec.nvestb := Convert_Nvestb_Type( Get( slices, 791 ));
            rec.nvestc := Convert_Nvestc_Type( Get( slices, 792 ));
            rec.nvestd := Convert_Nvestd_Type( Get( slices, 793 ));
            rec.nveste := Convert_Nveste_Type( Get( slices, 794 ));
            rec.nvestf := Convert_Nvestf_Type( Get( slices, 795 ));
            rec.nvestg := Convert_Nvestg_Type( Get( slices, 796 ));
            rec.svack := Convert( slices, 797, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.svackb1 := Convert_Boolean_With_Missing( Get( slices, 798 ));
            rec.svackb2 := Convert_Boolean_With_Missing( Get( slices, 799 ));
            rec.svackb3 := Convert_Boolean_With_Missing( Get( slices, 800 ));
            rec.svackb5 := Convert_Bscon_Type( Get( slices, 801 ));
            rec.svackb4 := Convert_Boolean_With_Missing( Get( slices, 802 ));
            rec.svacsj := Convert_Bankj_Type( Get( slices, 803 ));
            rec.svacpn1 := Convert( slices, 804, ( -9, -8, -7, -2, -1 ) );
            rec.svacpn2 := Convert( slices, 805, ( -9, -8, -7, -2, -1 ) );
            rec.svacpn3 := Convert( slices, 806, ( -9, -8, -7, -2, -1 ) );
            rec.svacsk := Convert( slices, 807, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.svacsp := Convert( slices, 808, ( -9, -8, -7, -2, -1 ) );
            rec.nvestk := Convert( slices, 809, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.nvestc1 := Convert_Boolean_With_Missing( Get( slices, 810 ));
            rec.nvestc2 := Convert_Boolean_With_Missing( Get( slices, 811 ));
            rec.nvestc3 := Convert_Boolean_With_Missing( Get( slices, 812 ));
            rec.nvestc5 := Convert_Bscon_Type( Get( slices, 813 ));
            rec.nvestc4 := Convert_Boolean_With_Missing( Get( slices, 814 ));
            rec.nvestsj := Convert_Bankj_Type( Get( slices, 815 ));
            rec.nvstpn1 := Convert( slices, 816, ( -9, -8, -7, -2, -1 ) );
            rec.nvstpn2 := Convert( slices, 817, ( -9, -8, -7, -2, -1 ) );
            rec.nvstpn3 := Convert( slices, 818, ( -9, -8, -7, -2, -1 ) );
            rec.nvestsk := Convert( slices, 819, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.nvestsp := Convert( slices, 820, ( -9, -8, -7, -2, -1 ) );
            rec.pppen := Convert_Aidpl1_Type( Get( slices, 821 ));
            rec.penb4 := Convert_Penb4_Type( Get( slices, 822 ));
            rec.penb4y4 := Convert( slices, 823, ( -9, -8, -7, -2, -1 ) );
            rec.penb4v := Convert( slices, 824, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.penb4w := Convert( slices, 825, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.penyr4 := Convert( slices, 826, ( -9, -8, -7, -2, -1 ) );
            rec.penadd := Convert_Aidpl1_Type( Get( slices, 827 ));
            rec.penadv := Convert( slices, 828, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.penadw := Convert( slices, 829, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.penmex := Convert_Bscon_Type( Get( slices, 830 ));
            rec.pppex := Convert_Bscon_Type( Get( slices, 831 ));
            rec.pppexm := Convert_Bscon_Type( Get( slices, 832 ));
            rec.stakeh := Convert_Bscon_Type( Get( slices, 833 ));
            rec.sppen := Convert_Bscon_Type( Get( slices, 834 ));
            rec.retexp := Convert_Retexp_Type( Get( slices, 835 ));
            rec.retamt := Convert_Retamt_Type( Get( slices, 836 ));
            rec.retsuf := Convert_Retsuf_Type( Get( slices, 837 ));
            rec.pensoc := Convert( slices, 838, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windf := Convert_Debt_Type( Get( slices, 839 ));
            rec.windfa := Convert_Windfa_Type( Get( slices, 840 ));
            rec.windfay := Convert( slices, 841, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windfb := Convert_Windfb_Type( Get( slices, 842 ));
            rec.windfby := Convert( slices, 843, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windfc := Convert_Windfc_Type( Get( slices, 844 ));
            rec.windfcy := Convert( slices, 845, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windfd := Convert_Windfd_Type( Get( slices, 846 ));
            rec.windfdy := Convert( slices, 847, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windff := Convert_Windff_Type( Get( slices, 848 ));
            rec.windffy := Convert( slices, 849, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windfg := Convert_Windfg_Type( Get( slices, 850 ));
            rec.windfgy := Convert( slices, 851, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windfh := Convert_Nisjsa_Type( Get( slices, 852 ));
            rec.windfhy := Convert( slices, 853, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.xpmeal := Convert_Xpleis_Type( Get( slices, 854 ));
            rec.xpleis := Convert_Xpleis_Type( Get( slices, 855 ));
            rec.ftexhh := Convert_Aidpl1_Type( Get( slices, 856 ));
            rec.ftexa := Convert_Ftexa_Type( Get( slices, 857 ));
            rec.ftexa1 := Convert_Ftexa1_Type( Get( slices, 858 ));
            rec.ftexa2 := Convert_Ftexa2_Type( Get( slices, 859 ));
            rec.ftexa3 := Convert_Ftexa3_Type( Get( slices, 860 ));
            rec.ftexa4 := Convert_Ftexa4_Type( Get( slices, 861 ));
            rec.ftexa5 := Convert_Ftexa5_Type( Get( slices, 862 ));
            rec.ftexa6 := Convert_Ftexa6_Type( Get( slices, 863 ));
            rec.ftexav := Convert( slices, 864, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ftexaw := Convert( slices, 865, ( -9.0, -8.0, -7.0, -5.0, -3.0, -2.0, -1.0 ) );
            rec.ftexb := Convert_Ftexb_Type( Get( slices, 866 ));
            rec.ftexb1 := Convert_Ftexa1_Type( Get( slices, 867 ));
            rec.ftexb2 := Convert_Ftexa2_Type( Get( slices, 868 ));
            rec.ftexb3 := Convert_Ftexa3_Type( Get( slices, 869 ));
            rec.ftexb4 := Convert_Ftexa4_Type( Get( slices, 870 ));
            rec.ftexb5 := Convert_Ftexa5_Type( Get( slices, 871 ));
            rec.ftexb6 := Convert_Ftexa6_Type( Get( slices, 872 ));
            rec.ftexbv := Convert( slices, 873, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ftexbw := Convert( slices, 874, ( -9.0, -8.0, -7.0, -5.0, -3.0, -2.0, -1.0 ) );
            rec.ftexc := Convert_Ftexc_Type( Get( slices, 875 ));
            rec.ftexc1 := Convert_Ftexa1_Type( Get( slices, 876 ));
            rec.ftexc2 := Convert_Ftexa2_Type( Get( slices, 877 ));
            rec.ftexc3 := Convert_Ftexa3_Type( Get( slices, 878 ));
            rec.ftexc4 := Convert_Ftexa4_Type( Get( slices, 879 ));
            rec.ftexc5 := Convert_Ftexa5_Type( Get( slices, 880 ));
            rec.ftexc6 := Convert_Ftexa6_Type( Get( slices, 881 ));
            rec.ftexcv := Convert( slices, 882, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ftexcw := Convert( slices, 883, ( -9.0, -8.0, -7.0, -5.0, -3.0, -2.0, -1.0 ) );
            rec.fccard := Convert_Boolean_With_Missing( Get( slices, 884 ));
            rec.nccard := Convert( slices, 885, ( -9, -8, -7, -2, -1 ) );
            rec.ccbill := Convert_Ccbill_Type( Get( slices, 886 ));
            rec.debt := Convert_Debt_Type( Get( slices, 887 ));
            rec.debta := Convert_Debta_Type( Get( slices, 888 ));
            rec.debtb := Convert_Debtb_Type( Get( slices, 889 ));
            rec.debtc := Convert_Debtc_Type( Get( slices, 890 ));
            rec.debtd := Convert_Debtd_Type( Get( slices, 891 ));
            rec.debte := Convert_Debte_Type( Get( slices, 892 ));
            rec.debtf := Convert_Debtf_Type( Get( slices, 893 ));
            rec.debth := Convert_Debth_Type( Get( slices, 894 ));
            rec.debti := Convert_Debti_Type( Get( slices, 895 ));
            rec.debtg := Convert_Debtg_Type( Get( slices, 896 ));
            rec.debty := Convert( slices, 897, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.debtc1 := Convert_Boolean_With_Missing( Get( slices, 898 ));
            rec.debtc2 := Convert_Boolean_With_Missing( Get( slices, 899 ));
            rec.debtc3 := Convert_Boolean_With_Missing( Get( slices, 900 ));
            rec.debtc5 := Convert_Bscon_Type( Get( slices, 901 ));
            rec.debtc4 := Convert_Boolean_With_Missing( Get( slices, 902 ));
            rec.debtsj := Convert_Debtsj_Type( Get( slices, 903 ));
            rec.debtpn1 := Convert( slices, 904, ( -9, -8, -7, -2, -1 ) );
            rec.debtpn2 := Convert( slices, 905, ( -9, -8, -7, -2, -1 ) );
            rec.debtpn3 := Convert( slices, 906, ( -9, -8, -7, -2, -1 ) );
            rec.debtsk := Convert( slices, 907, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.debtsp := Convert( slices, 908, ( -9, -8, -7, -2, -1 ) );
            rec.huruns := Convert_Huruns_Type( Get( slices, 909 ));
            rec.huboss := Convert_Huboss_Type( Get( slices, 910 ));
            rec.hubuys := Convert_Hubuys_Type( Get( slices, 911 ));
            rec.hufrys := Convert_Hubuys_Type( Get( slices, 912 ));
            rec.humops := Convert_Hubuys_Type( Get( slices, 913 ));
            rec.huiron := Convert_Hubuys_Type( Get( slices, 914 ));
            rec.hhch12 := Convert_Hhch12_Type( Get( slices, 915 ));
            rec.husits := Convert_Husits_Type( Get( slices, 916 ));
            rec.howlng := Convert( slices, 917, ( -9, -8, -7, -3, -2, -1 ) );
            rec.caruse := Convert_Caruse_Type( Get( slices, 918 ));
            rec.mobuse := Convert_Mobuse_Type( Get( slices, 919 ));
            rec.dfwld := Convert_Bscon_Type( Get( slices, 920 ));
            rec.dfwld1 := Convert_Dfwld1_Type( Get( slices, 921 ));
            rec.dfwld2 := Convert_Dfwld2_Type( Get( slices, 922 ));
            rec.dfwld3 := Convert_Dfwld2_Type( Get( slices, 923 ));
            rec.dfwld4 := Convert_Dfwld2_Type( Get( slices, 924 ));
            rec.ivfa := Convert_Ivda_Type( Get( slices, 925 ));
            rec.ivfb := Convert_Ivdb_Type( Get( slices, 926 ));
            rec.ivfc := Convert_Ivfc_Type( Get( slices, 927 ));
            rec.ivfd := Convert_Ivdd_Type( Get( slices, 928 ));
            rec.ivfe := Convert_Ivee_Type( Get( slices, 929 ));
            rec.ivfoih := Convert( slices, 930, ( -9, -8 ) );
            rec.ivfoim := Convert( slices, 931, ( -9, -8 ) );
            rec.ivsc := Convert_Ivsc_Type( Get( slices, 932 ));
            rec.iv1 := Convert_Hhch12_Type( Get( slices, 933 ));
            rec.iv2 := Convert_Iv2_Type( Get( slices, 934 ));
            rec.iv4 := Convert_Iv4_Type( Get( slices, 935 ));
            rec.iv5 := Convert_Iv5_Type( Get( slices, 936 ));
            rec.iv6a := Convert_Hhch12_Type( Get( slices, 937 ));
            rec.iv6b := Convert_Hhch12_Type( Get( slices, 938 ));
            rec.iv6c := Convert_Hhch12_Type( Get( slices, 939 ));
            rec.iv6d := Convert_Hhch12_Type( Get( slices, 940 ));
            rec.iv6e := Convert_Hhch12_Type( Get( slices, 941 ));
            rec.iv6f := Convert_Hhch12_Type( Get( slices, 942 ));
            rec.iv7 := Convert( slices, 943, ( -9, -8, -7 ) );
            rec.ghqa := Convert_Ghqa_Type( Get( slices, 944 ));
            rec.ghqb := Convert_Ghqb_Type( Get( slices, 945 ));
            rec.ghqc := Convert_Ghqc_Type( Get( slices, 946 ));
            rec.ghqd := Convert_Ghqc_Type( Get( slices, 947 ));
            rec.ghqe := Convert_Ghqe_Type( Get( slices, 948 ));
            rec.ghqf := Convert_Ghqe_Type( Get( slices, 949 ));
            rec.ghqg := Convert_Ghqc_Type( Get( slices, 950 ));
            rec.ghqh := Convert_Ghqc_Type( Get( slices, 951 ));
            rec.ghqi := Convert_Ghqb_Type( Get( slices, 952 ));
            rec.ghqj := Convert_Ghqe_Type( Get( slices, 953 ));
            rec.ghqk := Convert_Ghqe_Type( Get( slices, 954 ));
            rec.ghql := Convert_Ghqc_Type( Get( slices, 955 ));
            rec.opfama := Convert_Opfama_Type( Get( slices, 956 ));
            rec.opfamb := Convert_Opfama_Type( Get( slices, 957 ));
            rec.opfamc := Convert_Opfama_Type( Get( slices, 958 ));
            rec.opfamd := Convert_Opfama_Type( Get( slices, 959 ));
            rec.opfame := Convert_Opfama_Type( Get( slices, 960 ));
            rec.opfamf := Convert_Opfama_Type( Get( slices, 961 ));
            rec.opfamg := Convert_Opfama_Type( Get( slices, 962 ));
            rec.opfamh := Convert_Opfama_Type( Get( slices, 963 ));
            rec.opfami := Convert_Opfama_Type( Get( slices, 964 ));
            rec.ptrt5a1 := Convert_Ptrt5a1_Type( Get( slices, 965 ));
            rec.ptrt5c1 := Convert_Ptrt5a1_Type( Get( slices, 966 ));
            rec.ptrt5e1 := Convert_Ptrt5a1_Type( Get( slices, 967 ));
            rec.ptrt5n1 := Convert_Ptrt5a1_Type( Get( slices, 968 ));
            rec.ptrt5o1 := Convert_Ptrt5a1_Type( Get( slices, 969 ));
            rec.ptrt5a2 := Convert_Ptrt5a1_Type( Get( slices, 970 ));
            rec.ptrt5c2 := Convert_Ptrt5a1_Type( Get( slices, 971 ));
            rec.ptrt5e2 := Convert_Ptrt5a1_Type( Get( slices, 972 ));
            rec.ptrt5n2 := Convert_Ptrt5a1_Type( Get( slices, 973 ));
            rec.ptrt5o2 := Convert_Ptrt5a1_Type( Get( slices, 974 ));
            rec.ptrt5a3 := Convert_Ptrt5a1_Type( Get( slices, 975 ));
            rec.ptrt5c3 := Convert_Ptrt5a1_Type( Get( slices, 976 ));
            rec.ptrt5e3 := Convert_Ptrt5a1_Type( Get( slices, 977 ));
            rec.ptrt5n3 := Convert_Ptrt5a1_Type( Get( slices, 978 ));
            rec.ptrt5o3 := Convert_Ptrt5a1_Type( Get( slices, 979 ));
            rec.lfsat1 := Convert_Lfsat1_Type( Get( slices, 980 ));
            rec.lfsat2 := Convert_Lfsat1_Type( Get( slices, 981 ));
            rec.lfsat3 := Convert_Lfsat1_Type( Get( slices, 982 ));
            rec.lfsat4 := Convert_Lfsat1_Type( Get( slices, 983 ));
            rec.lfsat5 := Convert_Lfsat1_Type( Get( slices, 984 ));
            rec.lfsat6 := Convert_Lfsat1_Type( Get( slices, 985 ));
            rec.lfsat7 := Convert_Lfsat1_Type( Get( slices, 986 ));
            rec.lfsat8 := Convert_Lfsat1_Type( Get( slices, 987 ));
            rec.lfsato := Convert_Lfsat1_Type( Get( slices, 988 ));
            rec.lfsatl := Convert( slices, 989, ( -9, -8, -7, -2, -1 ) );
            rec.xsupa := Convert_Xsupa_Type( Get( slices, 990 ));
            rec.xsupb := Convert_Xsupa_Type( Get( slices, 991 ));
            rec.xsupc := Convert_Xsupa_Type( Get( slices, 992 ));
            rec.ssupa := Convert_Ssupa_Type( Get( slices, 993 ));
            rec.ssupb := Convert_Ssupa_Type( Get( slices, 994 ));
            rec.ssupc := Convert_Ssupa_Type( Get( slices, 995 ));
            rec.ssupd := Convert_Ssupa_Type( Get( slices, 996 ));
            rec.ssupe := Convert_Ssupa_Type( Get( slices, 997 ));
            rec.ssup1 := Convert_Netsx1_Type( Get( slices, 998 ));
            rec.ssupr2r := Convert_Ssupr2r_Type( Get( slices, 999 ));
            rec.prrs2i := Convert_Prrs2i_Type( Get( slices, 1000 ));
            rec.pripn := Convert( slices, 1001, ( -9, -8 ) );
            rec.prwhy := Convert_Prwhy_Type( Get( slices, 1002 ));
            rec.pplevr := Convert_Plever_Type( Get( slices, 1003 ));
            rec.presbgm := Convert_Presbgm_Type( Get( slices, 1004 ));
            rec.presby4 := Convert( slices, 1005, ( -9, -8, -7, -2, -1 ) );
            rec.presly := Convert_Presly_Type( Get( slices, 1006 ));
            rec.prfehq := Convert_Prfehq_Type( Get( slices, 1007 ));
            rec.prsehq := Convert_Prsehq_Type( Get( slices, 1008 ));
            rec.prjbft := Convert_Prjbft_Type( Get( slices, 1009 ));
            rec.prjbbgm := Convert_Presbgm_Type( Get( slices, 1010 ));
            rec.prjbby4 := Convert( slices, 1011, ( -9, -8, -7, -2, -1 ) );
            rec.prjbly := Convert_Prjbly_Type( Get( slices, 1012 ));
            rec.prearn := Convert_Prearn_Type( Get( slices, 1013 ));
            rec.prf101 := Convert_Prf101_Type( Get( slices, 1014 ));
            rec.prf102 := Convert_Prf102_Type( Get( slices, 1015 ));
            rec.prf116 := Convert_Prf116_Type( Get( slices, 1016 ));
            rec.prf131 := Convert_Prf131_Type( Get( slices, 1017 ));
            rec.prf135 := Convert_Prf135_Type( Get( slices, 1018 ));
            rec.prf137 := Convert_Prf137_Type( Get( slices, 1019 ));
            rec.prf139 := Convert_Prf139_Type( Get( slices, 1020 ));
            rec.prf125 := Convert_Prf125_Type( Get( slices, 1021 ));
            rec.prf141 := Convert_Prf141_Type( Get( slices, 1022 ));
            rec.prf143 := Convert_Prf143_Type( Get( slices, 1023 ));
            rec.prf107 := Convert_Prf107_Type( Get( slices, 1024 ));
            rec.prfirn := Convert_Prfirn_Type( Get( slices, 1025 ));
            rec.prfitb := Convert_Prfitb_Type( Get( slices, 1026 ));
            rec.ivpa := Convert_Ivpa_Type( Get( slices, 1027 ));
            rec.ivpb := Convert_Ivpb_Type( Get( slices, 1028 ));
            rec.ivpc := Convert_Ivpc_Type( Get( slices, 1029 ));
            rec.ivpd := Convert_Ivpd_Type( Get( slices, 1030 ));
            rec.ivpe := Convert_Ivpe_Type( Get( slices, 1031 ));
            rec.thrpop := Convert_Bscon_Type( Get( slices, 1032 ));
            rec.thhrpw := Convert_Bscon_Type( Get( slices, 1033 ));
            rec.telqly := Convert_Bscon_Type( Get( slices, 1034 ));
            rec.tlhqly := Convert_Tlhqly_Type( Get( slices, 1035 ));
            rec.telqal := Convert_Bscon_Type( Get( slices, 1036 ));
            rec.telhtq := Convert_Telhtq_Type( Get( slices, 1037 ));
            rec.trpen := Convert_Bscon_Type( Get( slices, 1038 ));
            rec.trben1 := Convert_Bscon_Type( Get( slices, 1039 ));
            rec.trben2 := Convert_Bscon_Type( Get( slices, 1040 ));
            rec.tropay := Convert_Bscon_Type( Get( slices, 1041 ));
            rec.tiv2 := Convert_Bscon_Type( Get( slices, 1042 ));
            rec.pid := Convert( slices, 1043 );
            rec.iviolw := Convert_Iviolw_Type( Get( slices, 1044 ));
            rec.hhmem := Convert_Hhmem_Type( Get( slices, 1045 ));
            rec.newhy := Convert_Newhy_Type( Get( slices, 1046 ));
            rec.nemnjn := Convert_Nemnjn_Type( Get( slices, 1047 ));
            rec.neyrjn4 := Convert( slices, 1048, ( -9, -8, -7, -2, -1 ) );
            rec.ivfio := Convert_Ivfio_Type( Get( slices, 1049 ));
            rec.iodc := Convert_Iodc_Type( Get( slices, 1050 ));
            rec.memorig := Convert_Memorig_Type( Get( slices, 1051 ));
            rec.hgr2r := Convert_Hgr2r_Type( Get( slices, 1052 ));
            rec.hgsex := Convert_Hgsex_Type( Get( slices, 1053 ));
            rec.hgbm := Convert_Hgbm_Type( Get( slices, 1054 ));
            rec.hgby := Convert( slices, 1055, ( -2, -1 ) );
            rec.mastat := Convert_Mastat_Type( Get( slices, 1056 ));
            rec.hgspn := Convert( slices, 1057, ( -9, -8, -2, -1 ) );
            rec.hgemp := Convert_Hgemp_Type( Get( slices, 1058 ));
            rec.hgfno := Convert( slices, 1059, ( -9, -8, -2, -1 ) );
            rec.hgmno := Convert( slices, 1060, ( -9, -8, -2, -1 ) );
            rec.hgra := Convert( slices, 1061, ( -9, -8, -2, -1 ) );
            rec.age := Convert( slices, 1062, ( -9, -8 ) );
            rec.age12 := Convert( slices, 1063, ( -9, -8 ) );
            rec.butype := Convert_Butype_Type( Get( slices, 1064 ));
            rec.buno := Convert( slices, 1065, ( -9, -8 ) );
            rec.nchild := Convert( slices, 1066, ( -9, -8 ) );
            rec.hoh := Convert_Hoh_Type( Get( slices, 1067 ));
            rec.rach16 := Convert_Hhch12_Type( Get( slices, 1068 ));
            rec.sampst := Convert_Sampst_Type( Get( slices, 1069 ));
            rec.movest := Convert_Movest_Type( Get( slices, 1070 ));
            rec.region := Convert_Region_Type( Get( slices, 1071 ));
            rec.hhsize := Convert( slices, 1072, ( -9, -8 ) );
            rec.hhtype := Convert_Hhtype_Type( Get( slices, 1073 ));
            rec.tenure := Convert_Tenure_Type( Get( slices, 1074 ));
            rec.qfedhi := Convert_Qfedhi_Type( Get( slices, 1075 ));
            rec.qfvoc := Convert_Qfvoc_Type( Get( slices, 1076 ));
            rec.qfachi := Convert_Qfachi_Type( Get( slices, 1077 ));
            rec.jbft := Convert_Jbft_Type( Get( slices, 1078 ));
            rec.payg := Convert( slices, 1079, ( -9.0, -8.0, -7.0 ) );
            rec.payn := Convert( slices, 1080, ( -9.0, -8.0, -7.0 ) );
            rec.paygu := Convert( slices, 1081, ( -9.0, -8.0, -7.0 ) );
            rec.paynu := Convert( slices, 1082, ( -9.0, -8.0, -7.0 ) );
            rec.paygty := Convert( slices, 1083, ( -9.0, -8.0, -7.0 ) );
            rec.paygly := Convert( slices, 1084, ( -9.0, -8.0, -7.0 ) );
            rec.paynty := Convert( slices, 1085, ( -9.0, -8.0, -7.0 ) );
            rec.paynly := Convert( slices, 1086, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jsprof := Convert( slices, 1087, ( -9.0, -8.0, -7.0 ) );
            rec.jsloss := Convert( slices, 1088, ( -9.0, -8.0, -7.0 ) );
            rec.jspayg := Convert( slices, 1089, ( -9.0, -8.0, -7.0 ) );
            rec.cjsten := Convert( slices, 1090, ( -9.0, -8.0, -7.0 ) );
            rec.cjswk9 := Convert( slices, 1091, ( -9.0, -8.0, -7.0 ) );
            rec.jlid := Convert_Jlid_Type( Get( slices, 1092 ));
            rec.jlyid := Convert_Jlyid_Type( Get( slices, 1093 ));
            rec.jtyid := Convert_Jtyid_Type( Get( slices, 1094 ));
            rec.jbseg := Convert_Jbseg_Type( Get( slices, 1095 ));
            rec.jbgold := Convert( slices, 1096, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbrgsc := Convert_Jbrgsc_Type( Get( slices, 1097 ));
            rec.jbisco := Convert( slices, 1098 );
            rec.jbcssm := Convert( slices, 1099, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbcssf := Convert( slices, 1100, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbhgs := Convert( slices, 1101, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbsec := Convert_Jbsec_Type( Get( slices, 1102 ));
            rec.njbwks := Convert( slices, 1103, ( -9.0, -8.0, -7.0 ) );
            rec.njuwks := Convert( slices, 1104, ( -9.0, -8.0, -7.0 ) );
            rec.njiwks := Convert( slices, 1105, ( -9.0, -8.0, -7.0 ) );
            rec.njbnew := Convert( slices, 1106, ( -9, -8, -7 ) );
            rec.njbsp := Convert( slices, 1107, ( -9, -8, -7 ) );
            rec.njusp := Convert( slices, 1108, ( -9, -8, -7 ) );
            rec.njisp := Convert( slices, 1109, ( -9, -8, -7 ) );
            rec.jbstatl := Convert( slices, 1110, ( -9, -8, -7, -2, -1 ) );
            rec.jbstatt := Convert( slices, 1111, ( -9, -8, -7, -2, -1 ) );
            rec.jbsocly := Convert( slices, 1112, ( -9, -8, -7 ) );
            rec.jlseg := Convert_Jlseg_Type( Get( slices, 1113 ));
            rec.jlgold := Convert( slices, 1114, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlrgsc := Convert_Jlrgsc_Type( Get( slices, 1115 ));
            rec.jlisco := Convert( slices, 1116 );
            rec.jlcssm := Convert( slices, 1117, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlcssf := Convert( slices, 1118, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlhgs := Convert( slices, 1119, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlsec := Convert_Jlsec_Type( Get( slices, 1120 ));
            rec.norgm := Convert( slices, 1121, ( -9, -8, -7 ) );
            rec.norga := Convert( slices, 1122, ( -9, -8, -7 ) );
            rec.vote := Convert_Vote_Type( Get( slices, 1123 ));
            rec.fiyrdic := Convert( slices, 1124, ( -9.0, -8.0, -7.0 ) );
            rec.fimnp := Convert( slices, 1125, ( -9.0, -8.0, -7.0 ) );
            rec.fimnb := Convert( slices, 1126, ( -9.0, -8.0, -7.0 ) );
            rec.fimni := Convert( slices, 1127, ( -9.0, -8.0, -7.0 ) );
            rec.fimnt := Convert( slices, 1128, ( -9.0, -8.0, -7.0 ) );
            rec.fimnl := Convert( slices, 1129, ( -9.0, -8.0, -7.0 ) );
            rec.fimnnl := Convert( slices, 1130, ( -9.0, -8.0, -7.0 ) );
            rec.fimn := Convert( slices, 1131, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrl := Convert( slices, 1132, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrnl := Convert( slices, 1133, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrp := Convert( slices, 1134, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrb := Convert( slices, 1135, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrt := Convert( slices, 1136, ( -9.0, -8.0, -7.0 ) );
            rec.fiyri := Convert( slices, 1137, ( -9.0, -8.0, -7.0 ) );
            rec.fiyr := Convert( slices, 1138, ( -9.0, -8.0, -7.0 ) );
            rec.fihhmn := Convert( slices, 1139, ( -9.0, -8.0, -7.0 ) );
            rec.hlghq1 := Convert( slices, 1140, ( -9, -8, -7 ) );
            rec.hlghq2 := Convert( slices, 1141, ( -9, -8, -7 ) );
            rec.spjb := Convert_Spjb_Type( Get( slices, 1142 ));
            rec.spsoc := Convert( slices, 1143, ( -9.0, -8.0 ) );
            rec.spjbhr := Convert( slices, 1144, ( -9, -8, -7 ) );
            rec.spjbot := Convert( slices, 1145, ( -9, -8, -7 ) );
            rec.sppayg := Convert( slices, 1146, ( -9.0, -8.0, -7.0 ) );
            rec.spjbyr := Convert( slices, 1147, ( -9, -8, -7 ) );
            rec.lrwght := Convert( slices, 1148 );
            rec.lewght := Convert( slices, 1149 );
            rec.xrwght := Convert( slices, 1150 );
            rec.xewght := Convert( slices, 1151 );
            rec.j2payi := Convert( slices, 1152, ( -9, -8, -7, -3, -2, -1 ) );
            rec.fiyrdii := Convert_Fiyrdii_Type( Get( slices, 1153 ));
            rec.prearni := Convert( slices, 1154, ( -9, -8, -2, -1 ) );
            rec.prfitbi := Convert_Prfitbi_Type( Get( slices, 1155 ));
            rec.paygui := Convert_Fimnbi_Type( Get( slices, 1156 ));
            rec.paynui := Convert_Fimnbi_Type( Get( slices, 1157 ));
            rec.paygti := Convert_Fimnbi_Type( Get( slices, 1158 ));
            rec.paygli := Convert_Fimnbi_Type( Get( slices, 1159 ));
            rec.paynti := Convert_Fimnbi_Type( Get( slices, 1160 ));
            rec.paynli := Convert_Fimnbi_Type( Get( slices, 1161 ));
            rec.jsprofi := Convert_Fimnbi_Type( Get( slices, 1162 ));
            rec.jspaygi := Convert_Fimnbi_Type( Get( slices, 1163 ));
            rec.fimnpi := Convert_Fimnbi_Type( Get( slices, 1164 ));
            rec.fimnbi := Convert_Fimnbi_Type( Get( slices, 1165 ));
            rec.fimnii := Convert_Fimnii_Type( Get( slices, 1166 ));
            rec.fimnti := Convert_Fimnii_Type( Get( slices, 1167 ));
            rec.fimnnli := Convert_Fimnbi_Type( Get( slices, 1168 ));
            rec.fimnli := Convert_Fimnbi_Type( Get( slices, 1169 ));
            rec.fimnthi := Convert_Fimnii_Type( Get( slices, 1170 ));
            rec.fiyrli := Convert_Fimnbi_Type( Get( slices, 1171 ));
            rec.fiyrnli := Convert_Fimnbi_Type( Get( slices, 1172 ));
            rec.fiyrpi := Convert_Fimnii_Type( Get( slices, 1173 ));
            rec.fiyrbi := Convert_Fimnbi_Type( Get( slices, 1174 ));
            rec.fiyrti := Convert_Fimnbi_Type( Get( slices, 1175 ));
            rec.fiyrii := Convert_Fimnbi_Type( Get( slices, 1176 ));
            rec.fiyeari := Convert_Fimnbi_Type( Get( slices, 1177 ));
            rec.sppaygi := Convert_Prfitbi_Type( Get( slices, 1178 ));
            rec.fihhmni := Convert_Fihhmni_Type( Get( slices, 1179 ));
            rec.mrjend := Convert( slices, 1180, ( -9, -8, -7, -3, -2, -1 ) );
            rec.mrjsoc := Convert( slices, 1181, ( -9, -8, -7, -3 ) );
            rec.mrjsic := Convert( slices, 1182, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjsic9 := Convert( slices, 1183, ( -9, -8, -2, -1 ) );
            rec.mrjsemp := Convert_Mrjsemp_Type( Get( slices, 1184 ));
            rec.mrjboss := Convert_Mrjboss_Type( Get( slices, 1185 ));
            rec.mrjmngr := Convert_Mrjmngr_Type( Get( slices, 1186 ));
            rec.mrjsize := Convert_Mrjsize_Type( Get( slices, 1187 ));
            rec.mrjseg := Convert_Maseg_Type( Get( slices, 1188 ));
            rec.mrjgold := Convert( slices, 1189, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjrgsc := Convert_Margsc_Type( Get( slices, 1190 ));
            rec.mrjisco := Convert( slices, 1191 );
            rec.mrjcssm := Convert( slices, 1192, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjcssf := Convert( slices, 1193, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjhgs := Convert( slices, 1194, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjsec := Convert_J1sec_Type( Get( slices, 1195 ));
            rec.paseg := Convert_Maseg_Type( Get( slices, 1196 ));
            rec.pagold := Convert( slices, 1197, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.pargsc := Convert_Margsc_Type( Get( slices, 1198 ));
            rec.paisco := Convert( slices, 1199 );
            rec.pacssm := Convert( slices, 1200, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.pacssf := Convert( slices, 1201, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.pahgs := Convert( slices, 1202, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.pasec := Convert_J1sec_Type( Get( slices, 1203 ));
            rec.maseg := Convert_Maseg_Type( Get( slices, 1204 ));
            rec.magold := Convert( slices, 1205, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.margsc := Convert_Margsc_Type( Get( slices, 1206 ));
            rec.maisco := Convert( slices, 1207 );
            rec.macssm := Convert( slices, 1208, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.macssf := Convert( slices, 1209, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mahgs := Convert( slices, 1210, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.masec := Convert_J1sec_Type( Get( slices, 1211 ));
            rec.j1seg := Convert_J1seg_Type( Get( slices, 1212 ));
            rec.j1gold := Convert( slices, 1213, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.j1rgsc := Convert_J1rgsc_Type( Get( slices, 1214 ));
            rec.j1isco := Convert( slices, 1215 );
            rec.j1cssm := Convert( slices, 1216, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.j1cssf := Convert( slices, 1217, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.j1hgs := Convert( slices, 1218, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.j1sec := Convert_J1sec_Type( Get( slices, 1219 ));
            rec.fimnsel := Convert_Fimnsel_Type( Get( slices, 1220 ));
            rec.xrwtuk1 := Convert( slices, 1221 );
            rec.xewtuk1 := Convert( slices, 1222 );
            rec.xrwtuk2 := Convert( slices, 1223 );
            rec.xewtuk2 := Convert( slices, 1224 );
            rec.lrwtsw1 := Convert( slices, 1225 );
            rec.lewtsw1 := Convert( slices, 1226 );
            rec.lrwtsw2 := Convert( slices, 1227 );
            rec.lewtsw2 := Convert( slices, 1228 );
            rec.lrwtuk1 := Convert( slices, 1229 );
            rec.lewtuk1 := Convert( slices, 1230 );
            rec.lrwtuk2 := Convert( slices, 1231 );
            rec.lewtuk2 := Convert( slices, 1232 );
            rec.sppid := Convert( slices, 1233 );
            rec.fpid := Convert( slices, 1234 );
            rec.mpid := Convert( slices, 1235 );
            rec.distmov := Convert( slices, 1236, ( -9.0, -8.0, -7.0 ) );
            rec.region2 := Convert_Region2_Type( Get( slices, 1237 ));
            rec.isced := Convert_Isced_Type( Get( slices, 1238 ));
            rec.casmin := Convert_Casmin_Type( Get( slices, 1239 ));
            rec.jbiscon := Convert( slices, 1240, ( -9, -8, -7, -2, -1 ) );
            rec.jliscon := Convert( slices, 1241, ( -9, -8, -7, -2, -1 ) );
            rec.mrjiscn := Convert( slices, 1242, ( -9, -8, -7, -2, -1 ) );
            rec.maiscon := Convert( slices, 1243, ( -9, -8, -7, -2, -1 ) );
            rec.paiscon := Convert( slices, 1244, ( -9, -8, -7, -2, -1 ) );
            rec.j1iscon := Convert( slices, 1245, ( -9, -8, -7, -2, -1 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Indresp_component ).start_pos = 0 ) then
               index.pointers( Indresp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Indresp_component ).counter := index.pointers( Indresp_component ).counter + 1;
            Put_Index( index_map, index );
            Indresp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Indresp_IO.Close( bin_file );
   end Create_Indresp_Wave_O;




   procedure Create_Indsamp_Wave_O( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Indsamp_IO.File_Type;
      rec         : Indsamp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Indsamp_IO.Create (bin_file, Indsamp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.pid := Convert( slices, 3 );
            rec.iviolw := Convert_Iviolw_Type( Get( slices, 4 ));
            rec.ivstat1 := Convert_Ivstat1_Type( Get( slices, 5 ));
            rec.ivelig := Convert_Ivelig_Type( Get( slices, 6 ));
            rec.hhmem := Convert_Hhmem_Type( Get( slices, 7 ));
            rec.newhy := Convert_Newhy_Type( Get( slices, 8 ));
            rec.nemnjn := Convert_Nemnjn_Type( Get( slices, 9 ));
            rec.neyrjn4 := Convert( slices, 10, ( -9, -8, -7, -2, -1 ) );
            rec.lvwhy := Convert_Lvwhy_Type( Get( slices, 11 ));
            rec.lvmn := Convert_Lvmn_Type( Get( slices, 12 ));
            rec.lvyr4 := Convert( slices, 13, ( -9, -8, -7, -2, -1 ) );
            rec.lvloc := Convert_Lvloc_Type( Get( slices, 14 ));
            rec.ivfio := Convert_Ivfio_Type( Get( slices, 15 ));
            rec.ivrref := Convert_Ivrref_Type( Get( slices, 16 ));
            rec.ivireis := Convert_Ivireis_Type( Get( slices, 17 ));
            rec.finloc := Convert_Finloc_Type( Get( slices, 18 ));
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 19 ));
            rec.memorig := Convert_Memorig_Type( Get( slices, 20 ));
            rec.sampst := Convert_Sampst_Type( Get( slices, 21 ));
            rec.movest := Convert_Movest_Type( Get( slices, 22 ));
            rec.lewght := Convert( slices, 23, ( -9.0, -8.0, -1.0 ) );
            rec.lrwght := Convert( slices, 24, ( -9.0, -8.0, -1.0 ) );
            rec.lrwtsw1 := Convert( slices, 25, ( -9.0, -8.0, -1.0 ) );
            rec.lewtsw1 := Convert( slices, 26, ( -9.0, -8.0, -1.0 ) );
            rec.lrwtsw2 := Convert( slices, 27, ( -9.0, -8.0, -1.0 ) );
            rec.lewtsw2 := Convert( slices, 28, ( -9.0, -8.0, -1.0 ) );
            rec.lrwtuk1 := Convert( slices, 29, ( -9.0, -8.0, -1.0 ) );
            rec.lewtuk1 := Convert( slices, 30, ( -9.0, -8.0, -1.0 ) );
            rec.lrwtuk2 := Convert( slices, 31, ( -9.0, -8.0, -1.0 ) );
            rec.lewtuk2 := Convert( slices, 32, ( -9.0, -8.0, -1.0 ) );
            rec.distmov := Convert( slices, 33, ( -9.0, -8.0 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Indsamp_component ).start_pos = 0 ) then
               index.pointers( Indsamp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Indsamp_component ).counter := index.pointers( Indsamp_component ).counter + 1;
            Put_Index( index_map, index );
            Indsamp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Indsamp_IO.Close( bin_file );
   end Create_Indsamp_Wave_O;




   procedure Create_Jobhist_Wave_O( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Jobhist_IO.File_Type;
      rec         : Jobhist_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Jobhist_IO.Create (bin_file, Jobhist_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.jspno := Convert( slices, 3 );
            rec.jhstat := Convert_Jhstat_Type( Get( slices, 4 ));
            rec.jhbgd := Convert( slices, 5, ( -9, -8, -7, -2, -1 ) );
            rec.jhbgm := Convert_Jbbgm1_Type( Get( slices, 6 ));
            rec.jhbgy4 := Convert( slices, 7, ( -9, -8, -7, -2, -1 ) );
            rec.jhsoc := Convert( slices, 8, ( -9, -8, -2, -1 ) );
            rec.jhsoc00 := Convert( slices, 9, ( -9, -8, -2, -1 ) );
            rec.jhsemp := Convert_Jhsemp_Type( Get( slices, 10 ));
            rec.jhboss := Convert_Bscon_Type( Get( slices, 11 ));
            rec.jhsect := Convert_Jhsect_Type( Get( slices, 12 ));
            rec.jhmngr := Convert_Jhmngr_Type( Get( slices, 13 ));
            rec.jhpldf := Convert_Jhpldf_Type( Get( slices, 14 ));
            rec.jhsic92 := Convert( slices, 15, ( -9, -8, -7 ) );
            rec.jhsize := Convert_Jhsize_Type( Get( slices, 16 ));
            rec.jhpayl := Convert( slices, 17, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhpylw := Convert( slices, 18, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.jhpylg := Convert_Jhpylg_Type( Get( slices, 19 ));
            rec.jhstpy := Convert_Jhstpy_Type( Get( slices, 20 ));
            rec.jblky := Convert_Jblky_Type( Get( slices, 21 ));
            rec.jhendd := Convert( slices, 22, ( -9, -8, -7, -2, -1 ) );
            rec.jhendm := Convert_Jbbgm1_Type( Get( slices, 23 ));
            rec.jhendy4 := Convert( slices, 24, ( -9, -8, -7, -2, -1 ) );
            rec.jha9ly := Convert_Jha9ly_Type( Get( slices, 25 ));
            rec.jhseg := Convert_Jhseg_Type( Get( slices, 26 ));
            rec.jhgold := Convert( slices, 27, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhrgsc := Convert_Jhrgsc_Type( Get( slices, 28 ));
            rec.jhisco := Convert( slices, 29, ( -9, -8 ) );
            rec.jhcssm := Convert( slices, 30, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhcssf := Convert( slices, 31, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhhgs := Convert( slices, 32, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhsec := Convert_Jhsec_Type( Get( slices, 33 ));
            rec.jhspw := Convert( slices, 34, ( -9.0, -8.0 ) );
            rec.jhgpay := Convert( slices, 35, ( -9.0, -8.0, -7.0 ) );
            rec.jhnpay := Convert( slices, 36, ( -9.0, -8.0, -7.0, -1.0 ) );
            rec.jhgpayi := Convert_Jhgpayi_Type( Get( slices, 37 ));
            rec.jhnpayi := Convert_Jhgpayi_Type( Get( slices, 38 ));
            rec.pid := Convert( slices, 39 );
            rec.jhiscon := Convert( slices, 40, ( -9, -8, -7, -2, -1 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Jobhist_component ).start_pos = 0 ) then
               index.pointers( Jobhist_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Jobhist_component ).counter := index.pointers( Jobhist_component ).counter + 1;
            Put_Index( index_map, index );
            Jobhist_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Jobhist_IO.Close( bin_file );
   end Create_Jobhist_Wave_O;




   procedure Create_Youth_Wave_O( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Youth_IO.File_Type;
      rec         : Youth_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Youth_IO.Create (bin_file, Youth_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.ypdobm := Convert_Ypdobm_Type( Get( slices, 3 ));
            rec.ypdoby4 := Convert( slices, 4, ( -9, -8, -7, -2, -1 ) );
            rec.ypsex := Convert_Ypsex_Type( Get( slices, 5 ));
            rec.ytvhrs := Convert_Ytvhrs_Type( Get( slices, 6 ));
            rec.ytvstp := Convert_Ytvlmt_Type( Get( slices, 7 ));
            rec.ypcomp := Convert_Ypcomp_Type( Get( slices, 8 ));
            rec.yppchw := Convert_Yppcg_Type( Get( slices, 9 ));
            rec.yppcg := Convert_Yppcg_Type( Get( slices, 10 ));
            rec.yppcnt := Convert_Yppcg_Type( Get( slices, 11 ));
            rec.ypmobu := Convert_Ypbeau_Type( Get( slices, 12 ));
            rec.ypchor := Convert_Ypchor_Type( Get( slices, 13 ));
            rec.yppals := Convert_Yppalo_Type( Get( slices, 14 ));
            rec.yppalo := Convert_Yppalo_Type( Get( slices, 15 ));
            rec.yplate := Convert_Yplate_Type( Get( slices, 16 ));
            rec.ypnpal := Convert( slices, 17, ( -9, -8, -2, -1 ) );
            rec.ypfght := Convert_Ypfght_Type( Get( slices, 18 ));
            rec.ypargm := Convert_Ypargm_Type( Get( slices, 19 ));
            rec.ypargf := Convert_Ypargf_Type( Get( slices, 20 ));
            rec.yptlkm := Convert_Ypargm_Type( Get( slices, 21 ));
            rec.yptlkf := Convert_Ypargf_Type( Get( slices, 22 ));
            rec.ypeatn := Convert_Ypeatn_Type( Get( slices, 23 ));
            rec.ypfrut := Convert_Ypffd_Type( Get( slices, 24 ));
            rec.ypffd := Convert_Ypffd_Type( Get( slices, 25 ));
            rec.ypjfd := Convert_Ypffd_Type( Get( slices, 26 ));
            rec.ypttsm := Convert_Ypttsm_Type( Get( slices, 27 ));
            rec.ypsprt := Convert_Ypsprt_Type( Get( slices, 28 ));
            rec.ypsave := Convert_Ypsave_Type( Get( slices, 29 ));
            rec.yppkml := Convert( slices, 30, ( -9, -2, -1 ) );
            rec.yppkmp := Convert( slices, 31, ( -9, -2, -1 ) );
            rec.ypsmev := Convert_Ypbeau_Type( Get( slices, 32 ));
            rec.ypsmof := Convert_Ypsmof_Type( Get( slices, 33 ));
            rec.ypsmlw := Convert( slices, 34, ( -9, -8, -2, -1 ) );
            rec.ypdgfr := Convert_Ypdgfr_Type( Get( slices, 35 ));
            rec.ypdklm := Convert_Ypdklm_Type( Get( slices, 36 ));
            rec.ypesta := Convert_Ypesta_Type( Get( slices, 37 ));
            rec.ypesti := Convert_Ypesti_Type( Get( slices, 38 ));
            rec.ypestb := Convert_Ypesta_Type( Get( slices, 39 ));
            rec.ypestj := Convert_Ypesti_Type( Get( slices, 40 ));
            rec.ypestc := Convert_Ypesta_Type( Get( slices, 41 ));
            rec.ypestk := Convert_Ypesti_Type( Get( slices, 42 ));
            rec.ypeste := Convert_Ypesta_Type( Get( slices, 43 ));
            rec.ypestf := Convert_Ypesta_Type( Get( slices, 44 ));
            rec.yptcha := Convert_Ypesta_Type( Get( slices, 45 ));
            rec.yptchb := Convert_Ypesta_Type( Get( slices, 46 ));
            rec.yphsw := Convert_Yphap_Type( Get( slices, 47 ));
            rec.yphap := Convert_Yphap_Type( Get( slices, 48 ));
            rec.yphfm := Convert_Yphap_Type( Get( slices, 49 ));
            rec.yphfr := Convert_Yphap_Type( Get( slices, 50 ));
            rec.yphsc := Convert_Yphap_Type( Get( slices, 51 ));
            rec.yphlf := Convert_Yphap_Type( Get( slices, 52 ));
            rec.ypopff := Convert_Ypopfb_Type( Get( slices, 53 ));
            rec.ypopfb := Convert_Ypopfb_Type( Get( slices, 54 ));
            rec.ypopfj := Convert_Ypopfj_Type( Get( slices, 55 ));
            rec.ypoppl := Convert_Ypopfj_Type( Get( slices, 56 ));
            rec.ypvte6 := Convert_Ypvte6_Type( Get( slices, 57 ));
            rec.ypvte3 := Convert_Ypvte3_Type( Get( slices, 58 ));
            rec.yptrun := Convert_Yptrun_Type( Get( slices, 59 ));
            rec.ypbull := Convert_Ypbull_Type( Get( slices, 60 ));
            rec.ypopsc := Convert_Ypopsc_Type( Get( slices, 61 ));
            rec.yplvsc := Convert_Yplvsc_Type( Get( slices, 62 ));
            rec.ypacvs := Convert_Scach_Type( Get( slices, 63 ));
            rec.ypsoc := Convert( slices, 64, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.ypwklw := Convert_Ypbeau_Type( Get( slices, 65 ));
            rec.ypsoc1 := Convert( slices, 66, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.ypsoc2 := Convert( slices, 67, ( -9.0, -8.0, -2.0, -1.0 ) );
            rec.ypwhrs := Convert( slices, 68, ( -9, -8, -2, -1 ) );
            rec.yppay := Convert( slices, 69, ( -9, -8, -2, -1 ) );
            rec.ypwkm := Convert_Ypwkm_Type( Get( slices, 70 ));
            rec.ypwkt := Convert_Ypwkt_Type( Get( slices, 71 ));
            rec.ypwkw := Convert_Ypwkw_Type( Get( slices, 72 ));
            rec.ypwkth := Convert_Ypwkth_Type( Get( slices, 73 ));
            rec.ypwkf := Convert_Ypwkf_Type( Get( slices, 74 ));
            rec.ypwksa := Convert_Ypwksa_Type( Get( slices, 75 ));
            rec.ypwksu := Convert_Ypwksu_Type( Get( slices, 76 ));
            rec.yplvhm := Convert( slices, 77, ( -9, -8, -2, -1 ) );
            rec.yp2uni := Convert_Yp2uni_Type( Get( slices, 78 ));
            rec.ypnuna := Convert_Ypnuna_Type( Get( slices, 79 ));
            rec.ypnunb := Convert_Ypnunb_Type( Get( slices, 80 ));
            rec.ypdlfa := Convert_Ypdlfa_Type( Get( slices, 81 ));
            rec.ypdlfb := Convert_Ypdlfb_Type( Get( slices, 82 ));
            rec.ypwght := Convert( slices, 83 );
            rec.pid := Convert( slices, 84 );
            rec.fnspno := Convert( slices, 85, ( -9, -8 ) );
            rec.fnspid := Convert( slices, 86, ( -9.0, -8.0 ) );
            rec.mnspno := Convert( slices, 87, ( -9, -8 ) );
            rec.mnspid := Convert( slices, 88, ( -9.0, -8.0 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Youth_component ).start_pos = 0 ) then
               index.pointers( Youth_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Youth_component ).counter := index.pointers( Youth_component ).counter + 1;
            Put_Index( index_map, index );
            Youth_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Youth_IO.Close( bin_file );
   end Create_Youth_Wave_O;




   procedure Create_Egoalt_Wave_P( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Egoalt_IO.File_Type;
      rec         : Egoalt_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Egoalt_IO.Create (bin_file, Egoalt_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.opno := Convert( slices, 3, (  1 .. 0 => -9 ) );
            rec.rel := Convert_Rel_Type( Get( slices, 4 ));
            rec.sex := Convert_Sex_Type( Get( slices, 5 ));
            rec.osex := Convert_Hgsex_Type( Get( slices, 6 ));
            rec.lwstat := Convert_Lwstat_Type( Get( slices, 7 ));
            rec.nwstat := Convert_Nwstat_Type( Get( slices, 8 ));
            rec.pid := Convert( slices, 9 );
            rec.opid := Convert( slices, 10 );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Egoalt_component ).start_pos = 0 ) then
               index.pointers( Egoalt_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Egoalt_component ).counter := index.pointers( Egoalt_component ).counter + 1;
            Put_Index( index_map, index );
            Egoalt_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Egoalt_IO.Close( bin_file );
   end Create_Egoalt_Wave_P;




   procedure Create_Hhresp_Wave_P( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Hhresp_IO.File_Type;
      rec         : Hhresp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Hhresp_IO.Create (bin_file, Hhresp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.hhdoi := Convert( slices, 2, ( -9, -8, -7 ) );
            rec.hhmoi := Convert_Doim_Type( Get( slices, 3 ));
            rec.hhyoi4 := Convert( slices, 4, ( -9, -8, -7, -2, -1 ) );
            rec.hhsoih := Convert( slices, 5, ( -9, -8, -7 ) );
            rec.hhsoim := Convert( slices, 6, ( -9, -8, -7 ) );
            rec.hstype := Convert_Hstype_Type( Get( slices, 7 ));
            rec.hsrins := Convert_Cjsck2_Type( Get( slices, 8 ));
            rec.hsroom := Convert( slices, 9, ( -9, -8, -7, -2, -1 ) );
            rec.hsownd := Convert_Hsownd_Type( Get( slices, 10 ));
            rec.hsowr1 := Convert( slices, 11, ( -9, -8, -7, -2, -1 ) );
            rec.hsowr2 := Convert( slices, 12, ( -9, -8, -7, -2, -1 ) );
            rec.hsval := Convert( slices, 13, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.mghave := Convert_Mghave_Type( Get( slices, 14 ));
            rec.hsowrp := Convert_Bscon_Type( Get( slices, 15 ));
            rec.mgynot := Convert_Mgynot_Type( Get( slices, 16 ));
            rec.hscost := Convert( slices, 17, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.hsyr04 := Convert( slices, 18, ( -9, -8, -7, -2, -1 ) );
            rec.mgyr04 := Convert( slices, 19, ( -9, -8, -7, -2, -1 ) );
            rec.mgly := Convert_Bscon_Type( Get( slices, 20 ));
            rec.hsivlw := Convert( slices, 21, ( -9, -8, -7, -2, -1 ) );
            rec.mgold := Convert( slices, 22, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.mglife := Convert( slices, 23, ( -9, -8, -7, -2, -1 ) );
            rec.mgtype := Convert_Mgtype_Type( Get( slices, 24 ));
            rec.mgxtra := Convert_Bscon_Type( Get( slices, 25 ));
            rec.mgnew := Convert( slices, 26, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.mgxty1 := Convert_Mgxty1_Type( Get( slices, 27 ));
            rec.mgxty2 := Convert_Mgxty2_Type( Get( slices, 28 ));
            rec.mgxty3 := Convert_Mgxty3_Type( Get( slices, 29 ));
            rec.mgxty4 := Convert_Mgxty4_Type( Get( slices, 30 ));
            rec.mgxty5 := Convert_Mgxty5_Type( Get( slices, 31 ));
            rec.xpmg := Convert( slices, 32, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.xpmg1 := Convert_Bscon_Type( Get( slices, 33 ));
            rec.xpmg2 := Convert_Bscon_Type( Get( slices, 34 ));
            rec.xpmg3 := Convert_Bscon_Type( Get( slices, 35 ));
            rec.xpmg4 := Convert_Bscon_Type( Get( slices, 36 ));
            rec.hsjb := Convert_Bscon_Type( Get( slices, 37 ));
            rec.rentp1 := Convert( slices, 38, ( -9, -8, -7, -2, -1 ) );
            rec.rentp2 := Convert( slices, 39, ( -9, -8, -7, -2, -1 ) );
            rec.rentll := Convert_Rentll_Type( Get( slices, 40 ));
            rec.rentf := Convert_Rentf_Type( Get( slices, 41 ));
            rec.rent := Convert( slices, 42, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.rentw := Convert( slices, 43, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.rent1 := Convert_Rent1_Type( Get( slices, 44 ));
            rec.rent7 := Convert_Rent7_Type( Get( slices, 45 ));
            rec.rent2 := Convert_Rent1_Type( Get( slices, 46 ));
            rec.rent3 := Convert_Bscon_Type( Get( slices, 47 ));
            rec.rent4 := Convert_Bscon_Type( Get( slices, 48 ));
            rec.rent5 := Convert_Bscon_Type( Get( slices, 49 ));
            rec.rent8 := Convert_Coh1mr_Type( Get( slices, 50 ));
            rec.rent6 := Convert_Bscon_Type( Get( slices, 51 ));
            rec.renthb := Convert_Renthb_Type( Get( slices, 52 ));
            rec.rentg := Convert( slices, 53, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.rentgw := Convert( slices, 54, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.xphsdf := Convert( slices, 55, ( -9, -8, -7, -2, -1 ) );
            rec.xphsd1 := Convert_Bscon_Type( Get( slices, 56 ));
            rec.xphsd2 := Convert_Bscon_Type( Get( slices, 57 ));
            rec.xphsdb := Convert_Bscon_Type( Get( slices, 58 ));
            rec.hskch := Convert_Boolean_With_Missing( Get( slices, 59 ));
            rec.hskchs := Convert_Boolean_With_Missing( Get( slices, 60 ));
            rec.hsbth := Convert_Boolean_With_Missing( Get( slices, 61 ));
            rec.hsbths := Convert_Boolean_With_Missing( Get( slices, 62 ));
            rec.hstlt := Convert_Boolean_With_Missing( Get( slices, 63 ));
            rec.hstlts := Convert_Boolean_With_Missing( Get( slices, 64 ));
            rec.hsgdn := Convert_Boolean_With_Missing( Get( slices, 65 ));
            rec.hsgdns := Convert_Boolean_With_Missing( Get( slices, 66 ));
            rec.xpgasy := Convert( slices, 67, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.xplecy := Convert( slices, 68, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.xpoily := Convert( slices, 69, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.xpsfly := Convert( slices, 70, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.heatch := Convert_Bscon_Type( Get( slices, 71 ));
            rec.heatyp := Convert_Heatyp_Type( Get( slices, 72 ));
            rec.hsprbg := Convert_Boolean_With_Missing( Get( slices, 73 ));
            rec.hsprbh := Convert_Boolean_With_Missing( Get( slices, 74 ));
            rec.hsprbi := Convert_Boolean_With_Missing( Get( slices, 75 ));
            rec.hsprbj := Convert_Boolean_With_Missing( Get( slices, 76 ));
            rec.hsprbk := Convert_Boolean_With_Missing( Get( slices, 77 ));
            rec.hsprbl := Convert_Boolean_With_Missing( Get( slices, 78 ));
            rec.hsprbm := Convert_Boolean_With_Missing( Get( slices, 79 ));
            rec.hsprbn := Convert_Boolean_With_Missing( Get( slices, 80 ));
            rec.hsprbo := Convert_Boolean_With_Missing( Get( slices, 81 ));
            rec.hsprbp := Convert_Boolean_With_Missing( Get( slices, 82 ));
            rec.hsprbq := Convert_Boolean_With_Missing( Get( slices, 83 ));
            rec.hsctax := Convert_Hsctax_Type( Get( slices, 84 ));
            rec.hs2ownd := Convert_Bscon_Type( Get( slices, 85 ));
            rec.hs2valo := Convert( slices, 86, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.hs2vala := Convert_Hldsbl1_Type( Get( slices, 87 ));
            rec.hs2valb := Convert_Hldsbl1_Type( Get( slices, 88 ));
            rec.hs2valc := Convert_Hldsbl1_Type( Get( slices, 89 ));
            rec.hs2vald := Convert_Hldsbl1_Type( Get( slices, 90 ));
            rec.mgtot := Convert( slices, 91, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.cdhave := Convert_Bscon_Type( Get( slices, 92 ));
            rec.cdbght := Convert_Bscon_Type( Get( slices, 93 ));
            rec.cd1use := Convert_Cd1new_Type( Get( slices, 94 ));
            rec.cd1new := Convert( slices, 95, ( -9, -8, -7, -2, -1 ) );
            rec.cd1cst := Convert( slices, 96, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd2use := Convert_Cd1new_Type( Get( slices, 97 ));
            rec.cd2new := Convert( slices, 98, ( -9, -8, -7, -2, -1 ) );
            rec.cd2cst := Convert( slices, 99, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd10use := Convert_Cd10new_Type( Get( slices, 100 ));
            rec.cd10new := Convert( slices, 101, ( -9, -8, -7, -2, -1 ) );
            rec.cd10cst := Convert( slices, 102, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd11use := Convert_Cd10new_Type( Get( slices, 103 ));
            rec.cd11new := Convert( slices, 104, ( -9, -8, -7, -2, -1 ) );
            rec.cd11cst := Convert( slices, 105, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd3use := Convert_Cd1new_Type( Get( slices, 106 ));
            rec.cd3new := Convert( slices, 107, ( -9, -8, -7, -2, -1 ) );
            rec.cd3cst := Convert( slices, 108, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd4use := Convert_Cd1new_Type( Get( slices, 109 ));
            rec.cd4new := Convert( slices, 110, ( -9, -8, -7, -2, -1 ) );
            rec.cd4cst := Convert( slices, 111, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd5use := Convert_Cd1new_Type( Get( slices, 112 ));
            rec.cd5new := Convert( slices, 113, ( -9, -8, -7, -2, -1 ) );
            rec.cd5cst := Convert( slices, 114, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd6use := Convert_Cd1new_Type( Get( slices, 115 ));
            rec.cd6new := Convert( slices, 116, ( -9, -8, -7, -2, -1 ) );
            rec.cd6cst := Convert( slices, 117, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd7use := Convert_Cd1new_Type( Get( slices, 118 ));
            rec.cd7new := Convert( slices, 119, ( -9, -8, -7, -2, -1 ) );
            rec.cd7cst := Convert( slices, 120, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd8use := Convert_Cd1new_Type( Get( slices, 121 ));
            rec.cd8new := Convert( slices, 122, ( -9, -8, -7, -2, -1 ) );
            rec.cd8cst := Convert( slices, 123, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd9use := Convert_Cd1new_Type( Get( slices, 124 ));
            rec.cd9new := Convert( slices, 125, ( -9, -8, -7, -2, -1 ) );
            rec.cd9cst := Convert( slices, 126, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd12use := Convert_Cd10new_Type( Get( slices, 127 ));
            rec.cd12new := Convert( slices, 128, ( -9, -8, -7, -2, -1 ) );
            rec.cd12cst := Convert( slices, 129, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd13use := Convert_Cd13new_Type( Get( slices, 130 ));
            rec.cd13new := Convert( slices, 131, ( -9, -8, -7, -2, -1 ) );
            rec.cd13cst := Convert( slices, 132, ( -9, -8, -7, -3, -2, -1 ) );
            rec.pcnet := Convert_Boolean_With_Missing( Get( slices, 133 ));
            rec.hsnet1 := Convert_Cd13new_Type( Get( slices, 134 ));
            rec.hsnet2 := Convert_Cd13new_Type( Get( slices, 135 ));
            rec.hsnet3 := Convert_Cd13new_Type( Get( slices, 136 ));
            rec.hsnet4 := Convert_Cd13new_Type( Get( slices, 137 ));
            rec.hsnetb := Convert_Bscon_Type( Get( slices, 138 ));
            rec.xphp := Convert_Bscon_Type( Get( slices, 139 ));
            rec.xphpdf := Convert_Xphpdf_Type( Get( slices, 140 ));
            rec.hscana := Convert_Boolean_With_Missing( Get( slices, 141 ));
            rec.hscnta := Convert_Boolean_With_Missing( Get( slices, 142 ));
            rec.hscanb := Convert_Boolean_With_Missing( Get( slices, 143 ));
            rec.hscntb := Convert_Boolean_With_Missing( Get( slices, 144 ));
            rec.hscanc := Convert_Boolean_With_Missing( Get( slices, 145 ));
            rec.hscntc := Convert_Boolean_With_Missing( Get( slices, 146 ));
            rec.hscand := Convert_Boolean_With_Missing( Get( slices, 147 ));
            rec.hscntd := Convert_Boolean_With_Missing( Get( slices, 148 ));
            rec.hscane := Convert_Boolean_With_Missing( Get( slices, 149 ));
            rec.hscnte := Convert_Boolean_With_Missing( Get( slices, 150 ));
            rec.hscanf := Convert_Boolean_With_Missing( Get( slices, 151 ));
            rec.hscntf := Convert_Boolean_With_Missing( Get( slices, 152 ));
            rec.hscanh := Convert_Edblyr3_Type( Get( slices, 153 ));
            rec.hscnth := Convert_Edblyr3_Type( Get( slices, 154 ));
            rec.hscank := Convert_Edblyr3_Type( Get( slices, 155 ));
            rec.hscntk := Convert_Edblyr3_Type( Get( slices, 156 ));
            rec.hscanl := Convert_Edblyr3_Type( Get( slices, 157 ));
            rec.hscntl := Convert_Edblyr3_Type( Get( slices, 158 ));
            rec.xpfood := Convert( slices, 159, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ncars := Convert_Ncars_Type( Get( slices, 160 ));
            rec.carown := Convert_Carown_Type( Get( slices, 161 ));
            rec.carval := Convert( slices, 162, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ivh1 := Convert( slices, 163, ( -9, -8, -7, -1 ) );
            rec.ivh2 := Convert( slices, 164, ( -9, -8, -7 ) );
            rec.ivh3 := Convert( slices, 165, ( -9, -8, -7 ) );
            rec.hhfoih := Convert( slices, 166, ( -9, -8, -7 ) );
            rec.hhfoim := Convert( slices, 167, ( -9, -8, -7 ) );
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 168 ));
            rec.hhorig := Convert_Hhorig_Type( Get( slices, 169 ));
            rec.hhdc := Convert_Hhdc_Type( Get( slices, 170 ));
            rec.xhwght := Convert( slices, 171, ( -9.0, -8.0 ) );
            rec.hhsize := Convert( slices, 172, ( -9, -8 ) );
            rec.hhtype := Convert_Hhtype_Type( Get( slices, 173 ));
            rec.region := Convert_Region_Type( Get( slices, 174 ));
            rec.nch02 := Convert( slices, 175, ( -9, -8 ) );
            rec.nch34 := Convert( slices, 176, ( -9, -8 ) );
            rec.nch511 := Convert( slices, 177, ( -9, -8 ) );
            rec.nch1215 := Convert( slices, 178, ( -9, -8 ) );
            rec.nch1618 := Convert( slices, 179, ( -9, -8 ) );
            rec.nkids := Convert( slices, 180, ( -9, -8 ) );
            rec.nwed := Convert( slices, 181, ( -9, -8 ) );
            rec.npens := Convert( slices, 182, ( -9, -8 ) );
            rec.na75pl := Convert( slices, 183, ( -9, -8 ) );
            rec.agechy := Convert( slices, 184, ( -9, -8 ) );
            rec.ncouple := Convert( slices, 185, ( -9, -8 ) );
            rec.nonepar := Convert( slices, 186, ( -9, -8 ) );
            rec.nemp := Convert( slices, 187, ( -9, -8 ) );
            rec.nwage := Convert( slices, 188, ( -9, -8 ) );
            rec.tenure := Convert_Tenure_Type( Get( slices, 189 ));
            rec.xphsn := Convert( slices, 190, ( -9.0, -8.0, -7.0 ) );
            rec.xphsg := Convert( slices, 191, ( -9.0, -8.0, -7.0 ) );
            rec.fieqfcb := Convert( slices, 192, ( -9.0, -8.0 ) );
            rec.fieqfca := Convert( slices, 193, ( -9.0, -8.0 ) );
            rec.fihhyr := Convert( slices, 194, ( -9.0, -8.0, -7.0 ) );
            rec.fihhmn := Convert( slices, 195, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyl := Convert( slices, 196, ( -9.0, -8.0, -7.0 ) );
            rec.fihhynl := Convert( slices, 197, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyp := Convert( slices, 198, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyb := Convert( slices, 199, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyt := Convert( slices, 200, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyi := Convert( slices, 201, ( -9.0, -8.0, -7.0 ) );
            rec.fihhml := Convert( slices, 202, (  1 .. 0 => -9.0 ) );
            rec.fihhmnl := Convert( slices, 203, (  1 .. 0 => -9.0 ) );
            rec.fihhmp := Convert( slices, 204, (  1 .. 0 => -9.0 ) );
            rec.fihhmb := Convert( slices, 205, (  1 .. 0 => -9.0 ) );
            rec.fihhmt := Convert( slices, 206, (  1 .. 0 => -9.0 ) );
            rec.fihhmi := Convert( slices, 207, (  1 .. 0 => -9.0 ) );
            rec.hhmove := Convert_Hhmove_Type( Get( slices, 208 ));
            rec.mgnewi := Convert( slices, 209, ( -9, -8, -7, -2, -1 ) );
            rec.xpmgi := Convert( slices, 210, ( -9, -8, -7, -2, -1 ) );
            rec.hsvali := Convert( slices, 211, ( -9, -8, -7, -2, -1 ) );
            rec.renti := Convert( slices, 212, ( -9, -8, -7, -4, -3, -2, -1 ) );
            rec.rentgi := Convert( slices, 213, ( -9, -8, -7, -2, -1 ) );
            rec.xphsni := Convert_Jhgpayi_Type( Get( slices, 214 ));
            rec.xphsgi := Convert_Jhgpayi_Type( Get( slices, 215 ));
            rec.fihhmni := Convert_Fihhmni_Type( Get( slices, 216 ));
            rec.fihhmli := Convert_Fihhmbi_Type( Get( slices, 217 ));
            rec.fihmnli := Convert_Fihhmbi_Type( Get( slices, 218 ));
            rec.fihhmpi := Convert_Fihhmbi_Type( Get( slices, 219 ));
            rec.fihhmbi := Convert_Fihhmbi_Type( Get( slices, 220 ));
            rec.fihhmti := Convert_Fihhmbi_Type( Get( slices, 221 ));
            rec.fihhmii := Convert_Fihhmbi_Type( Get( slices, 222 ));
            rec.fihhyri := Convert_Fihhmbi_Type( Get( slices, 223 ));
            rec.fihhyli := Convert_Fihhmbi_Type( Get( slices, 224 ));
            rec.fihhyni := Convert_Fihhmbi_Type( Get( slices, 225 ));
            rec.fihhypi := Convert_Fihhmbi_Type( Get( slices, 226 ));
            rec.fihhybi := Convert_Fihhmbi_Type( Get( slices, 227 ));
            rec.fihhyti := Convert_Fihhmbi_Type( Get( slices, 228 ));
            rec.fihhyii := Convert_Fihhmbi_Type( Get( slices, 229 ));
            rec.fihhsel := Convert_Fihhsel_Type( Get( slices, 230 ));
            rec.xhwtuk1 := Convert( slices, 231, ( -9.0, -8.0 ) );
            rec.xhwtuk2 := Convert( slices, 232, ( -9.0, -8.0 ) );
            rec.region2 := Convert_Region2_Type( Get( slices, 233 ));
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Hhresp_component ).start_pos = 0 ) then
               index.pointers( Hhresp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Hhresp_component ).counter := index.pointers( Hhresp_component ).counter + 1;
            Put_Index( index_map, index );
            Hhresp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Hhresp_IO.Close( bin_file );
   end Create_Hhresp_Wave_P;




   procedure Create_Hhsamp_Wave_P( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Hhsamp_IO.File_Type;
      rec         : Hhsamp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Hhsamp_IO.Create (bin_file, Hhsamp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.fid := Convert( slices, 2 );
            rec.ivnadd := Convert( slices, 3, ( -9.0, -8.0 ) );
            rec.ivia := Convert_Ivia_Type( Get( slices, 4 ));
            rec.iviam := Convert_Iviam_Type( Get( slices, 5 ));
--             rec.ivid := Convert( slices, 6 );
            rec.ivlnc := Convert( slices, 7, ( -9, -1 ) );
            rec.ivtnc := Convert( slices, 8, ( -9, -8, -1 ) );
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 9 ));
            rec.ivosmrh := Convert( slices, 10, ( -9, -8, -1 ) );
            rec.ivnsmrh := Convert( slices, 11, ( -9, -8, -1 ) );
            rec.ivrrefh := Convert_Ivrrefh_Type( Get( slices, 12 ));
            rec.ivconv := Convert_Ivconv_Type( Get( slices, 13 ));
            rec.ivreis := Convert_Ivreis_Type( Get( slices, 14 ));
            rec.ivisst := Convert_Ivisst_Type( Get( slices, 15 ));
            rec.hhdc := Convert_Hhdc_Type( Get( slices, 16 ));
            rec.hhorig := Convert_Hhorig_Type( Get( slices, 17 ));
            rec.xhwght := Convert( slices, 18, ( -9.0, -8.0, -1.0 ) );
            rec.region := Convert_Region_Type( Get( slices, 19 ));
            rec.hhmove := Convert_Hhmove_Type( Get( slices, 20 ));
            rec.ahid := Convert( slices, 21 );
            rec.xhwtuk1 := Convert( slices, 22, ( -9.0, -8.0, -1.0 ) );
            rec.xhwtuk2 := Convert( slices, 23, ( -9.0, -8.0, -1.0 ) );
            rec.strata := Convert( slices, 24, ( -9, -8, -1 ) );
            rec.psu := Convert( slices, 25, ( -9, -8, -1 ) );
            rec.region2 := Convert_Region2_Type( Get( slices, 26 ));
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Hhsamp_component ).start_pos = 0 ) then
               index.pointers( Hhsamp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Hhsamp_component ).counter := index.pointers( Hhsamp_component ).counter + 1;
            Put_Index( index_map, index );
            Hhsamp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Hhsamp_IO.Close( bin_file );
   end Create_Hhsamp_Wave_P;




   procedure Create_Income_Wave_P( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Income_IO.File_Type;
      rec         : Income_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Income_IO.Create (bin_file, Income_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.ficode := Convert_Ficode_Type( Get( slices, 3 ));
            rec.frall := Convert_Frall_Type( Get( slices, 4 ));
            rec.fr01 := Convert_Cd1own_Type( Get( slices, 5 ));
            rec.fr02 := Convert_Cd1own_Type( Get( slices, 6 ));
            rec.fr03 := Convert_Cd1own_Type( Get( slices, 7 ));
            rec.fr04 := Convert( slices, 8, ( -9, -8, -2, -1 ) );
            rec.fr05 := Convert_Cd1own_Type( Get( slices, 9 ));
            rec.fr06 := Convert_Cd1own_Type( Get( slices, 10 ));
            rec.fr07 := Convert_Cd1own_Type( Get( slices, 11 ));
            rec.fr08 := Convert_Cd1own_Type( Get( slices, 12 ));
            rec.fr09 := Convert_Cd1own_Type( Get( slices, 13 ));
            rec.fr10 := Convert_Cd1own_Type( Get( slices, 14 ));
            rec.fr11 := Convert_Cd1own_Type( Get( slices, 15 ));
            rec.fr12 := Convert_Cd1own_Type( Get( slices, 16 ));
            rec.fr13 := Convert_Cd1own_Type( Get( slices, 17 ));
            rec.fr14 := Convert_Cd1own_Type( Get( slices, 18 ));
            rec.fr15 := Convert_Cd1own_Type( Get( slices, 19 ));
            rec.fr16 := Convert_Cd1own_Type( Get( slices, 20 ));
            rec.fr17 := Convert_Cd1own_Type( Get( slices, 21 ));
            rec.fr18 := Convert_Fr18_Type( Get( slices, 22 ));
            rec.fr19 := Convert_Fr18_Type( Get( slices, 23 ));
            rec.fr20 := Convert_Fr18_Type( Get( slices, 24 ));
            rec.frnow := Convert_Frnow_Type( Get( slices, 25 ));
            rec.frval := Convert( slices, 26, ( -9.0, -8.0, -3.0, -2.0, -1.0 ) );
            rec.frw := Convert( slices, 27, ( -9.0, -8.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.frjt := Convert_Frjt_Type( Get( slices, 28 ));
            rec.frjtpn := Convert( slices, 29, ( -9, -8, -2, -1 ) );
            rec.fiseq := Convert( slices, 30 );
            rec.frjtvf := Convert_Frjtvf_Type( Get( slices, 31 ));
            rec.fradd := Convert_Cjsck2_Type( Get( slices, 32 ));
            rec.fim09l := Convert( slices, 33, ( -9.0, -8.0, -3.0 ) );
            rec.fim10l := Convert( slices, 34, ( -9.0, -8.0, -3.0 ) );
            rec.fim11l := Convert( slices, 35, ( -9.0, -8.0, -3.0 ) );
            rec.fim12l := Convert( slices, 36, ( -9.0, -8.0, -3.0 ) );
            rec.fim01t := Convert( slices, 37, ( -9.0, -8.0, -3.0 ) );
            rec.fim02t := Convert( slices, 38, ( -9.0, -8.0, -3.0 ) );
            rec.fim03t := Convert( slices, 39, ( -9.0, -8.0, -3.0 ) );
            rec.fim04t := Convert( slices, 40, ( -9.0, -8.0, -3.0 ) );
            rec.fim05t := Convert( slices, 41, ( -9.0, -8.0, -3.0 ) );
            rec.fim06t := Convert( slices, 42, ( -9.0, -8.0, -3.0 ) );
            rec.fim07t := Convert( slices, 43, ( -9.0, -8.0, -3.0 ) );
            rec.fim08t := Convert( slices, 44, ( -9.0, -8.0, -3.0 ) );
            rec.fim09t := Convert( slices, 45, ( -9.0, -8.0, -3.0 ) );
            rec.fim10t := Convert( slices, 46, ( -9.0, -8.0, -3.0 ) );
            rec.fim11t := Convert( slices, 47, ( -9.0, -8.0, -3.0 ) );
            rec.fim12t := Convert( slices, 48, ( -9.0, -8.0, -3.0 ) );
            rec.fim01n := Convert( slices, 49, ( -9.0, -8.0, -3.0 ) );
            rec.fim02n := Convert( slices, 50, ( -9.0, -3.0 ) );
            rec.fim03n := Convert( slices, 51, ( -9.0, -3.0 ) );
            rec.fim04n := Convert( slices, 52, ( -9.0, -3.0 ) );
            rec.frvali := Convert( slices, 53, ( -9, -8, -3, -2, -1 ) );
            rec.pid := Convert( slices, 54 );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Income_component ).start_pos = 0 ) then
               index.pointers( Income_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Income_component ).counter := index.pointers( Income_component ).counter + 1;
            Put_Index( index_map, index );
            Income_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Income_IO.Close( bin_file );
   end Create_Income_Wave_P;




   procedure Create_Indall_Wave_P( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Indall_IO.File_Type;
      rec         : Indall_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Indall_IO.Create (bin_file, Indall_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.hgr2r := Convert_Hgr2r_Type( Get( slices, 3 ));
            rec.hgsex := Convert_Hgsex_Type( Get( slices, 4 ));
            rec.hgbm := Convert_Hgbm_Type( Get( slices, 5 ));
            rec.hgby := Convert( slices, 6, ( -9, -8, -2, -1 ) );
            rec.mastat := Convert_Mastat_Type( Get( slices, 7 ));
            rec.hgspn := Convert( slices, 8, ( -9, -8, -2, -1 ) );
            rec.hgemp := Convert_Hgemp_Type( Get( slices, 9 ));
            rec.hgfno := Convert( slices, 10, ( -9, -8, -2, -1 ) );
            rec.hgmno := Convert( slices, 11, ( -9, -8, -2, -1 ) );
            rec.hgra := Convert( slices, 12, ( -9, -8, -2, -1 ) );
            rec.pid := Convert( slices, 13 );
            rec.iviolw := Convert_Iviolw_Type( Get( slices, 14 ));
            rec.ivstat1 := Convert_Ivstat1_Type( Get( slices, 15 ));
            rec.ivelig := Convert_Ivelig_Type( Get( slices, 16 ));
            rec.hhmem := Convert_Hhmem_Type( Get( slices, 17 ));
            rec.newhy := Convert_Newhy_Type( Get( slices, 18 ));
            rec.nemnjn := Convert_Nemnjn_Type( Get( slices, 19 ));
            rec.neyrjn4 := Convert( slices, 20, ( -9, -8, -7, -2, -1 ) );
            rec.ivfio := Convert_Ivfio_Type( Get( slices, 21 ));
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 22 ));
            rec.iodc := Convert_Iodc_Type( Get( slices, 23 ));
            rec.memorig := Convert_Memorig_Type( Get( slices, 24 ));
            rec.age := Convert( slices, 25, ( -9, -8, -2, -1 ) );
            rec.age12 := Convert( slices, 26, ( -9, -8, -2, -1 ) );
            rec.butype := Convert_Butype_Type( Get( slices, 27 ));
            rec.buno := Convert( slices, 28, ( -9, -8 ) );
            rec.nchild := Convert( slices, 29, ( -9, -8 ) );
            rec.depchl := Convert_Depchl_Type( Get( slices, 30 ));
            rec.hoh := Convert_Hoh_Type( Get( slices, 31 ));
            rec.rach16 := Convert_Hhch12_Type( Get( slices, 32 ));
            rec.agei := Convert_Agei_Type( Get( slices, 33 ));
            rec.lrwght := Convert( slices, 34, ( -9.0, -8.0 ) );
            rec.lewght := Convert( slices, 35, ( -9.0, -8.0 ) );
            rec.xrwght := Convert( slices, 36, ( -9.0, -8.0 ) );
            rec.xewght := Convert( slices, 37, ( -9.0, -8.0 ) );
            rec.movest := Convert_Movest_Type( Get( slices, 38 ));
            rec.sampst := Convert_Sampst_Type( Get( slices, 39 ));
            rec.xrwtuk1 := Convert( slices, 40, ( -9.0, -8.0 ) );
            rec.xewtuk1 := Convert( slices, 41, ( -9.0, -8.0 ) );
            rec.xrwtuk2 := Convert( slices, 42, ( -9.0, -8.0 ) );
            rec.xewtuk2 := Convert( slices, 43, ( -9.0, -8.0 ) );
            rec.lrwtsw1 := Convert( slices, 44, ( -9.0, -8.0 ) );
            rec.lewtsw1 := Convert( slices, 45, ( -9.0, -8.0 ) );
            rec.lrwtsw2 := Convert( slices, 46, ( -9.0, -8.0 ) );
            rec.lewtsw2 := Convert( slices, 47, ( -9.0, -8.0 ) );
            rec.lrwtuk1 := Convert( slices, 48, ( -9.0, -8.0 ) );
            rec.lewtuk1 := Convert( slices, 49, ( -9.0, -8.0 ) );
            rec.lrwtuk2 := Convert( slices, 50, ( -9.0, -8.0 ) );
            rec.lewtuk2 := Convert( slices, 51, ( -9.0, -8.0 ) );
            rec.sppid := Convert( slices, 52 );
            rec.fpid := Convert( slices, 53 );
            rec.mpid := Convert( slices, 54 );
            rec.rapid := Convert( slices, 55 );
            rec.distmov := Convert( slices, 56, ( -9.0, -8.0 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Indall_component ).start_pos = 0 ) then
               index.pointers( Indall_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Indall_component ).counter := index.pointers( Indall_component ).counter + 1;
            Put_Index( index_map, index );
            Indall_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Indall_IO.Close( bin_file );
   end Create_Indall_Wave_P;




   procedure Create_Indresp_Wave_P( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Indresp_IO.File_Type;
      rec         : Indresp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Indresp_IO.Create (bin_file, Indresp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.doid := Convert( slices, 3, ( -9, -7 ) );
            rec.doim := Convert_Doim_Type( Get( slices, 4 ));
            rec.doiy4 := Convert( slices, 5, ( -9, -8, -7, -2, -1 ) );
            rec.ivlyr := Convert( slices, 6, ( -9, -8, -7 ) );
            rec.ivstat2 := Convert_Ivstat2_Type( Get( slices, 7 ));
            rec.ivsoih := Convert( slices, 8, ( -9, -8 ) );
            rec.ivsoim := Convert( slices, 9, ( -9, -8 ) );
            rec.lknbrd := Convert_Aidpl1_Type( Get( slices, 10 ));
            rec.lkmove := Convert_Lkmove_Type( Get( slices, 11 ));
            rec.lkmovy := Convert_Lkmovy_Type( Get( slices, 12 ));
            rec.xpmove := Convert( slices, 13, ( -9, -8, -7, -2, -1 ) );
            rec.plnew := Convert( slices, 14, ( -9, -8, -7, -2, -1 ) );
            rec.plnowm := Convert_Jbbgm1_Type( Get( slices, 15 ));
            rec.plnowy4 := Convert( slices, 16, ( -9, -8, -7, -2, -1 ) );
            rec.movjb := Convert_Aidpl1_Type( Get( slices, 17 ));
            rec.movjba := Convert_Movjba_Type( Get( slices, 18 ));
            rec.movjbb := Convert_Movjba_Type( Get( slices, 19 ));
            rec.movjbc := Convert_Movjba_Type( Get( slices, 20 ));
            rec.movjbd := Convert_Movjba_Type( Get( slices, 21 ));
            rec.movjbe := Convert_Movjba_Type( Get( slices, 22 ));
            rec.movjbf := Convert_Movjba_Type( Get( slices, 23 ));
            rec.movjbg := Convert_Movjba_Type( Get( slices, 24 ));
            rec.movjbh := Convert_Movjba_Type( Get( slices, 25 ));
            rec.movjbi := Convert_Movjba_Type( Get( slices, 26 ));
            rec.movy1 := Convert_Movy1_Type( Get( slices, 27 ));
            rec.movy2 := Convert_Movy2_Type( Get( slices, 28 ));
            rec.dobm := Convert_Cjsem_Type( Get( slices, 29 ));
            rec.doby := Convert( slices, 30, ( -9, -8, -7, -2, -1 ) );
            rec.sex := Convert_Sex_Type( Get( slices, 31 ));
            rec.mlstat := Convert_Mlstat_Type( Get( slices, 32 ));
            rec.mlchng := Convert_Bscon_Type( Get( slices, 33 ));
            rec.mlchm := Convert_Mlchm_Type( Get( slices, 34 ));
            rec.mlchy4 := Convert( slices, 35, ( -9, -8, -7, -2, -1 ) );
            rec.jbstat := Convert_Jbstat_Type( Get( slices, 36 ));
            rec.edlyr := Convert_Aidpl1_Type( Get( slices, 37 ));
            rec.edtype1 := Convert_Edtype1_Type( Get( slices, 38 ));
            rec.edblyr1 := Convert_Boolean_With_Missing( Get( slices, 39 ));
            rec.edbgm1 := Convert_Edbgm1_Type( Get( slices, 40 ));
            rec.edbgy1 := Convert( slices, 41, ( -9, -8, -7, -2, -1 ) );
            rec.edenm1 := Convert_Edbgm1_Type( Get( slices, 42 ));
            rec.edeny1 := Convert( slices, 43, ( -9, -8, -7, -2, -1 ) );
            rec.edenne1 := Convert_Edenne1_Type( Get( slices, 44 ));
            rec.edfeea1 := Convert_Yes_Or_Missing_Type( Get( slices, 45 ));
            rec.edfeeb1 := Convert_Yes_Or_Missing_Type( Get( slices, 46 ));
            rec.edfeec1 := Convert_Yes_Or_Missing_Type( Get( slices, 47 ));
            rec.edfeed1 := Convert_Yes_Or_Missing_Type( Get( slices, 48 ));
            rec.edfeee1 := Convert_Yes_Or_Missing_Type( Get( slices, 49 ));
            rec.edfeef1 := Convert_Yes_Or_Missing_Type( Get( slices, 50 ));
            rec.edfeeg1 := Convert_Yes_Or_Missing_Type( Get( slices, 51 ));
            rec.edmore1 := Convert_Boolean_With_Missing( Get( slices, 52 ));
            rec.edtype2 := Convert_Edtype1_Type( Get( slices, 53 ));
            rec.edblyr2 := Convert_Boolean_With_Missing( Get( slices, 54 ));
            rec.edbgm2 := Convert_Edbgm1_Type( Get( slices, 55 ));
            rec.edbgy2 := Convert( slices, 56, ( -9, -8, -7, -2, -1 ) );
            rec.edenm2 := Convert_Edbgm1_Type( Get( slices, 57 ));
            rec.edeny2 := Convert( slices, 58, ( -9, -8, -7, -2, -1 ) );
            rec.edenne2 := Convert_Edenne2_Type( Get( slices, 59 ));
            rec.edfeea2 := Convert_Yes_Or_Missing_Type( Get( slices, 60 ));
            rec.edfeeb2 := Convert_Yes_Or_Missing_Type( Get( slices, 61 ));
            rec.edfeec2 := Convert_Yes_Or_Missing_Type( Get( slices, 62 ));
            rec.edfeed2 := Convert_Yes_Or_Missing_Type( Get( slices, 63 ));
            rec.edfeee2 := Convert_Yes_Or_Missing_Type( Get( slices, 64 ));
            rec.edfeef2 := Convert_Yes_Or_Missing_Type( Get( slices, 65 ));
            rec.edfeeg2 := Convert_Yes_Or_Missing_Type( Get( slices, 66 ));
            rec.edmore2 := Convert_Boolean_With_Missing( Get( slices, 67 ));
            rec.edtype3 := Convert_Edtype3_Type( Get( slices, 68 ));
            rec.edblyr3 := Convert_Edblyr3_Type( Get( slices, 69 ));
            rec.edbgm3 := Convert_Edbgm3_Type( Get( slices, 70 ));
            rec.edbgy3 := Convert( slices, 71, ( -9, -8, -7, -2, -1 ) );
            rec.edenm3 := Convert_Edbgm3_Type( Get( slices, 72 ));
            rec.edeny3 := Convert( slices, 73, ( -9, -8, -7, -2, -1 ) );
            rec.edenne3 := Convert_Edenne3_Type( Get( slices, 74 ));
            rec.edfeea3 := Convert_Yes_Or_Missing_Type( Get( slices, 75 ));
            rec.edfeeb3 := Convert_Yes_Or_Missing_Type( Get( slices, 76 ));
            rec.edfeec3 := Convert_Yes_Or_Missing_Type( Get( slices, 77 ));
            rec.edfeed3 := Convert_Yes_Or_Missing_Type( Get( slices, 78 ));
            rec.edfeee3 := Convert_Yes_Or_Missing_Type( Get( slices, 79 ));
            rec.edfeef3 := Convert_Yes_Or_Missing_Type( Get( slices, 80 ));
            rec.edfeeg3 := Convert_Yes_Or_Missing_Type( Get( slices, 81 ));
            rec.plbornd := Convert_Plbornd_Type( Get( slices, 82 ));
            rec.plbornc := Convert_Plbornc_Type( Get( slices, 83 ));
            rec.yr2uk4 := Convert( slices, 84, ( -9, -8, -7, -2, -1 ) );
            rec.citzn1 := Convert( slices, 85, ( -9, -8, -7, -2, -1 ) );
            rec.citzn2 := Convert_Citzn2_Type( Get( slices, 86 ));
            rec.natidb := Convert_Yes_Or_Missing_Type( Get( slices, 87 ));
            rec.natidf := Convert_Yes_Or_Missing_Type( Get( slices, 88 ));
            rec.natidg := Convert_Yes_Or_Missing_Type( Get( slices, 89 ));
            rec.natide := Convert_Yes_Or_Missing_Type( Get( slices, 90 ));
            rec.natida := Convert_Yes_Or_Missing_Type( Get( slices, 91 ));
            rec.natidh := Convert_Natidh_Type( Get( slices, 92 ));
            rec.racel := Convert_Racel_Type( Get( slices, 93 ));
            rec.oprlg5 := Convert_Oprlg5_Type( Get( slices, 94 ));
            rec.oprlg7 := Convert_Cbagef_Type( Get( slices, 95 ));
            rec.paju := Convert_Paju_Type( Get( slices, 96 ));
            rec.pasoc := Convert( slices, 97, ( -9, -8, -7, -2, -1 ) );
            rec.pasoc00 := Convert( slices, 98, ( -9, -8, -7, -2, -1 ) );
            rec.pasemp := Convert_J2semp_Type( Get( slices, 99 ));
            rec.paboss := Convert_Maboss_Type( Get( slices, 100 ));
            rec.pamngr := Convert_Mamngr_Type( Get( slices, 101 ));
            rec.maju := Convert_Maju_Type( Get( slices, 102 ));
            rec.masoc := Convert( slices, 103, ( -9, -8, -7, -2, -1 ) );
            rec.masoc00 := Convert( slices, 104, ( -9, -8, -7, -2, -1 ) );
            rec.masemp := Convert_J2semp_Type( Get( slices, 105 ));
            rec.maboss := Convert_Maboss_Type( Get( slices, 106 ));
            rec.mamngr := Convert_Mamngr_Type( Get( slices, 107 ));
            rec.j1none := Convert_J1none_Type( Get( slices, 108 ));
            rec.j1soc := Convert( slices, 109, ( -9, -8, -7, -2, -1 ) );
            rec.j1soc00 := Convert( slices, 110, ( -9, -8, -7, -2, -1 ) );
            rec.j1semp := Convert_J1semp_Type( Get( slices, 111 ));
            rec.j1boss := Convert_J1boss_Type( Get( slices, 112 ));
            rec.j1mngr := Convert_J1mngr_Type( Get( slices, 113 ));
            rec.lcoh := Convert_Aidpl1_Type( Get( slices, 114 ));
            rec.coh1bm := Convert_Ch1bm_Type( Get( slices, 115 ));
            rec.coh1by := Convert( slices, 116, ( -9, -8, -7, -2, -1 ) );
            rec.coh1mr := Convert_Coh1mr_Type( Get( slices, 117 ));
            rec.coh1em := Convert_Ch1bm_Type( Get( slices, 118 ));
            rec.coh1ey := Convert( slices, 119, ( -9, -8, -7, -2, -1 ) );
            rec.nmar := Convert_Nmar_Type( Get( slices, 120 ));
            rec.lmar1m := Convert_Ch1bm_Type( Get( slices, 121 ));
            rec.lmar1y := Convert( slices, 122, ( -9, -8, -7, -2, -1 ) );
            rec.lprnt := Convert_Lprnt_Type( Get( slices, 123 ));
            rec.lnprnt := Convert( slices, 124, ( -9, -8, -7, -2, -1 ) );
            rec.ch1bm := Convert_Ch1bm_Type( Get( slices, 125 ));
            rec.ch1by := Convert( slices, 126, ( -9, -8, -7, -2, -1 ) );
            rec.school := Convert_School_Type( Get( slices, 127 ));
            rec.scend := Convert( slices, 128, ( -9, -8, -7, -2, -1 ) );
            rec.sctype := Convert_Sctype_Type( Get( slices, 129 ));
            rec.scnow := Convert_Cjsck2_Type( Get( slices, 130 ));
            rec.fetype := Convert_Fetype_Type( Get( slices, 131 ));
            rec.fenow := Convert_Fenow_Type( Get( slices, 132 ));
            rec.feend := Convert( slices, 133, ( -9, -8, -7, -2, -1 ) );
            rec.qfhas := Convert_Bscon_Type( Get( slices, 134 ));
            rec.qfa := Convert_Qfa_Type( Get( slices, 135 ));
            rec.qfb := Convert_Qfb_Type( Get( slices, 136 ));
            rec.qfc := Convert_Qfc_Type( Get( slices, 137 ));
            rec.qfd := Convert_Qfd_Type( Get( slices, 138 ));
            rec.qfe := Convert_Qfe_Type( Get( slices, 139 ));
            rec.qff := Convert_Qff_Type( Get( slices, 140 ));
            rec.qfg := Convert_Qfg_Type( Get( slices, 141 ));
            rec.qfh := Convert_Qfh_Type( Get( slices, 142 ));
            rec.qfi := Convert_Qfi_Type( Get( slices, 143 ));
            rec.qfj := Convert_Qfj_Type( Get( slices, 144 ));
            rec.qfk := Convert_Qfk_Type( Get( slices, 145 ));
            rec.qfl := Convert_Qfl_Type( Get( slices, 146 ));
            rec.qfm := Convert_Qfm_Type( Get( slices, 147 ));
            rec.qfn := Convert_Qfn_Type( Get( slices, 148 ));
            rec.qfed := Convert_Bscon_Type( Get( slices, 149 ));
            rec.qfeda := Convert_Qfeda_Type( Get( slices, 150 ));
            rec.nqfeda := Convert( slices, 151, ( -9, -8, -7, -2, -1 ) );
            rec.qfedb := Convert_Qfedb_Type( Get( slices, 152 ));
            rec.nqfedb := Convert( slices, 153, ( -9, -8, -7, -2, -1 ) );
            rec.qfedc := Convert_Qfedc_Type( Get( slices, 154 ));
            rec.nqfedc := Convert( slices, 155, ( -9, -8, -7, -2, -1 ) );
            rec.qfedd := Convert_Qfedd_Type( Get( slices, 156 ));
            rec.nqfedd := Convert( slices, 157, ( -9, -8, -7, -2, -1 ) );
            rec.qfede := Convert_Qfede_Type( Get( slices, 158 ));
            rec.nqfede := Convert( slices, 159, ( -9, -8, -7, -2, -1 ) );
            rec.qfedf := Convert_Qfedf_Type( Get( slices, 160 ));
            rec.nqfedf := Convert( slices, 161, ( -9, -8, -7, -2, -1 ) );
            rec.qfedg := Convert_Qfedg_Type( Get( slices, 162 ));
            rec.nqfedg := Convert( slices, 163, ( -9, -8, -7, -2, -1 ) );
            rec.qfedh := Convert_Qfedh_Type( Get( slices, 164 ));
            rec.nqfedh := Convert( slices, 165, ( -9, -8, -7, -2, -1 ) );
            rec.qfedi := Convert_Qfedi_Type( Get( slices, 166 ));
            rec.nqfedi := Convert( slices, 167, ( -9, -8, -7, -2, -1 ) );
            rec.qfedj := Convert_Qfedj_Type( Get( slices, 168 ));
            rec.nqfedj := Convert( slices, 169, ( -9, -8, -7, -2, -1 ) );
            rec.qfedt := Convert_Qfedt_Type( Get( slices, 170 ));
            rec.nqfedt := Convert( slices, 171, ( -9, -8, -7, -2, -1 ) );
            rec.qfedu := Convert_Qfedu_Type( Get( slices, 172 ));
            rec.nqfedu := Convert( slices, 173, ( -9, -8, -7, -2, -1 ) );
            rec.qfedk := Convert_Qfedk_Type( Get( slices, 174 ));
            rec.nqfedk := Convert( slices, 175, ( -9, -8, -7, -2, -1 ) );
            rec.qfedl := Convert_Qfedl_Type( Get( slices, 176 ));
            rec.nqfedl := Convert( slices, 177, ( -9, -8, -7, -2, -1 ) );
            rec.qfedm := Convert_Qfedm_Type( Get( slices, 178 ));
            rec.nqfedm := Convert( slices, 179, ( -9, -8, -7, -2, -1 ) );
            rec.qfedn := Convert_Qfedn_Type( Get( slices, 180 ));
            rec.nqfedn := Convert( slices, 181, ( -9, -8, -7, -2, -1 ) );
            rec.qfedo := Convert_Qfedo_Type( Get( slices, 182 ));
            rec.nqfedo := Convert( slices, 183, ( -9, -8, -7, -2, -1 ) );
            rec.qfedp := Convert( slices, 184, ( -9, -8, -7 ) );
            rec.nqfedp := Convert( slices, 185, ( -9, -8, -7, -2, -1 ) );
            rec.qfedq := Convert_Qfedq_Type( Get( slices, 186 ));
            rec.nqfedq := Convert( slices, 187, ( -9, -8, -7, -2, -1 ) );
            rec.qfedr := Convert_Qfedr_Type( Get( slices, 188 ));
            rec.nqfedr := Convert( slices, 189, ( -9, -8, -7, -2, -1 ) );
            rec.qfeds := Convert_Hlprbm_Type( Get( slices, 190 ));
            rec.nqfeds := Convert( slices, 191, ( -9, -8, -7, -2, -1 ) );
            rec.train := Convert_Boolean_With_Missing( Get( slices, 192 ));
            rec.ntrain := Convert( slices, 193, ( -9, -8, -7, -2, -1 ) );
            rec.trplce1 := Convert_Trplce1_Type( Get( slices, 194 ));
            rec.trwhya1 := Convert_Boolean_With_Missing( Get( slices, 195 ));
            rec.trwhyb1 := Convert_Boolean_With_Missing( Get( slices, 196 ));
            rec.trwhyc1 := Convert_Boolean_With_Missing( Get( slices, 197 ));
            rec.trwhyd1 := Convert_Boolean_With_Missing( Get( slices, 198 ));
            rec.trwhye1 := Convert_Boolean_With_Missing( Get( slices, 199 ));
            rec.trq1 := Convert( slices, 200, ( -9, -8, -7 ) );
            rec.tru1 := Convert_Tru1_Type( Get( slices, 201 ));
            rec.trfeea1 := Convert_Nisjsa_Type( Get( slices, 202 ));
            rec.trfeeb1 := Convert_Yes_Or_Missing_Type( Get( slices, 203 ));
            rec.trfeec1 := Convert_Yes_Or_Missing_Type( Get( slices, 204 ));
            rec.trfeee1 := Convert_Yes_Or_Missing_Type( Get( slices, 205 ));
            rec.trfeef1 := Convert_Yes_Or_Missing_Type( Get( slices, 206 ));
            rec.trfeeg1 := Convert_Yes_Or_Missing_Type( Get( slices, 207 ));
            rec.trqlxp1 := Convert_Trqlxp1_Type( Get( slices, 208 ));
            rec.trqlac1 := Convert_Trqlac1_Type( Get( slices, 209 ));
            rec.trmore1 := Convert_Boolean_With_Missing( Get( slices, 210 ));
            rec.trplce2 := Convert_Trplce1_Type( Get( slices, 211 ));
            rec.trwhya2 := Convert_Boolean_With_Missing( Get( slices, 212 ));
            rec.trwhyb2 := Convert_Boolean_With_Missing( Get( slices, 213 ));
            rec.trwhyc2 := Convert_Boolean_With_Missing( Get( slices, 214 ));
            rec.trwhyd2 := Convert_Boolean_With_Missing( Get( slices, 215 ));
            rec.trwhye2 := Convert_Boolean_With_Missing( Get( slices, 216 ));
            rec.trq2 := Convert( slices, 217, ( -9, -8, -7 ) );
            rec.tru2 := Convert_Tru1_Type( Get( slices, 218 ));
            rec.trfeea2 := Convert_Nisjsa_Type( Get( slices, 219 ));
            rec.trfeeb2 := Convert_Yes_Or_Missing_Type( Get( slices, 220 ));
            rec.trfeec2 := Convert_Yes_Or_Missing_Type( Get( slices, 221 ));
            rec.trfeee2 := Convert_Yes_Or_Missing_Type( Get( slices, 222 ));
            rec.trfeef2 := Convert_Yes_Or_Missing_Type( Get( slices, 223 ));
            rec.trfeeg2 := Convert_Yes_Or_Missing_Type( Get( slices, 224 ));
            rec.trqlxp2 := Convert_Trqlxp1_Type( Get( slices, 225 ));
            rec.trqlac2 := Convert_Trqlac1_Type( Get( slices, 226 ));
            rec.trmore2 := Convert_Boolean_With_Missing( Get( slices, 227 ));
            rec.trplce3 := Convert_Trplce1_Type( Get( slices, 228 ));
            rec.trwhya3 := Convert_Boolean_With_Missing( Get( slices, 229 ));
            rec.trwhyb3 := Convert_Boolean_With_Missing( Get( slices, 230 ));
            rec.trwhyc3 := Convert_Boolean_With_Missing( Get( slices, 231 ));
            rec.trwhyd3 := Convert_Boolean_With_Missing( Get( slices, 232 ));
            rec.trwhye3 := Convert_Boolean_With_Missing( Get( slices, 233 ));
            rec.trq3 := Convert( slices, 234, ( -9, -8, -7 ) );
            rec.tru3 := Convert_Tru1_Type( Get( slices, 235 ));
            rec.trfeea3 := Convert_Nisjsa_Type( Get( slices, 236 ));
            rec.trfeeb3 := Convert_Yes_Or_Missing_Type( Get( slices, 237 ));
            rec.trfeec3 := Convert_Yes_Or_Missing_Type( Get( slices, 238 ));
            rec.trfeee3 := Convert_Yes_Or_Missing_Type( Get( slices, 239 ));
            rec.trfeef3 := Convert_Yes_Or_Missing_Type( Get( slices, 240 ));
            rec.trfeeg3 := Convert_Yes_Or_Missing_Type( Get( slices, 241 ));
            rec.trqlxp3 := Convert_Trqlxp1_Type( Get( slices, 242 ));
            rec.trqlac3 := Convert_Trqlac1_Type( Get( slices, 243 ));
            rec.qfrec := Convert_Edblyr3_Type( Get( slices, 244 ));
            rec.qfedx := Convert_Aidpl1_Type( Get( slices, 245 ));
            rec.qfedxa := Convert_Qfedd_Type( Get( slices, 246 ));
            rec.nqfexa := Convert( slices, 247, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxb := Convert_Qfede_Type( Get( slices, 248 ));
            rec.nqfexb := Convert( slices, 249, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxl := Convert_Qfedt_Type( Get( slices, 250 ));
            rec.nqfexl := Convert( slices, 251, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxm := Convert_Qfedxm_Type( Get( slices, 252 ));
            rec.nqfexm := Convert( slices, 253, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxn := Convert_Qfedxn_Type( Get( slices, 254 ));
            rec.nqfexn := Convert( slices, 255, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxo := Convert_Qfedxo_Type( Get( slices, 256 ));
            rec.nqfexo := Convert( slices, 257, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxg := Convert_Qfedm_Type( Get( slices, 258 ));
            rec.nqfexg := Convert( slices, 259, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxh := Convert_Qfedxh_Type( Get( slices, 260 ));
            rec.nqfexh := Convert( slices, 261, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxi := Convert_Qfedo_Type( Get( slices, 262 ));
            rec.nqfexi := Convert( slices, 263, ( -9, -8, -7, -2, -1 ) );
            rec.qfx := Convert_Aidpl1_Type( Get( slices, 264 ));
            rec.qfxc := Convert_Qfc_Type( Get( slices, 265 ));
            rec.qfxd := Convert_Qfd_Type( Get( slices, 266 ));
            rec.qfxe := Convert_Qfe_Type( Get( slices, 267 ));
            rec.qfxf := Convert_Qff_Type( Get( slices, 268 ));
            rec.qfxg := Convert_Qfg_Type( Get( slices, 269 ));
            rec.qfxh := Convert_Qfh_Type( Get( slices, 270 ));
            rec.qfxo := Convert_Qfxo_Type( Get( slices, 271 ));
            rec.qfxp := Convert_Qfxp_Type( Get( slices, 272 ));
            rec.qfxq := Convert_Qfxq_Type( Get( slices, 273 ));
            rec.qfxr := Convert_Qfxr_Type( Get( slices, 274 ));
            rec.qfxk := Convert_Qfk_Type( Get( slices, 275 ));
            rec.qfxl := Convert_Qfl_Type( Get( slices, 276 ));
            rec.qfxm := Convert_Qfm_Type( Get( slices, 277 ));
            rec.qfxn := Convert_Qfn_Type( Get( slices, 278 ));
            rec.birhh := Convert_Aglt20_Type( Get( slices, 279 ));
            rec.mabwly := Convert_Aglt20_Type( Get( slices, 280 ));
            rec.mabwnly := Convert( slices, 281, ( -9, -8, -7 ) );
            rec.bwtpn1 := Convert( slices, 282, ( -9, -8, -7 ) );
            rec.bwtagm1 := Convert( slices, 283, ( -9, -8, -7 ) );
            rec.bwtxp1 := Convert_Boolean_With_Missing( Get( slices, 284 ));
            rec.bwtel1 := Convert_Bwtel_Type( Get( slices, 285 ));
            rec.bwtwk1 := Convert( slices, 286, ( -9, -8, -7, -2, -1 ) );
            rec.bwtkn1 := Convert_Bwtkn_Type( Get( slices, 287 ));
            rec.bwtlb1 := Convert( slices, 288, ( -9, -8, -7, -2, -1 ) );
            rec.bwtoz1 := Convert( slices, 289, ( -9, -8, -7, -2, -1 ) );
            rec.bwtgm1 := Convert( slices, 290, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.bwtg51 := Convert_Bwtg51_Type( Get( slices, 291 ));
            rec.bwtpn2 := Convert( slices, 292, ( -9, -8, -7 ) );
            rec.bwtagm2 := Convert( slices, 293, ( -9, -8, -7 ) );
            rec.bwtxp2 := Convert_Boolean_With_Missing( Get( slices, 294 ));
            rec.bwtel2 := Convert_Bwtel2_Type( Get( slices, 295 ));
            rec.bwtwk2 := Convert( slices, 296, ( -9, -8, -7, -2, -1 ) );
            rec.bwtkn2 := Convert_Bwtkn_Type( Get( slices, 297 ));
            rec.bwtlb2 := Convert( slices, 298, ( -9, -8, -7 ) );
            rec.bwtoz2 := Convert( slices, 299, ( -9, -8, -7, -2, -1 ) );
            rec.bwtgm2 := Convert( slices, 300, ( -9, -8, -7 ) );
            rec.bwtg52 := Convert_Bwtg5_Type( Get( slices, 301 ));
            rec.bwtpn3 := Convert( slices, 302, ( -9, -8, -7 ) );
            rec.bwtagm3 := Convert( slices, 303, ( -9, -8, -7 ) );
            rec.bwtxp3 := Convert_Boolean_With_Missing( Get( slices, 304 ));
            rec.bwtel3 := Convert_Bwtel2_Type( Get( slices, 305 ));
            rec.bwtwk3 := Convert( slices, 306, ( -9, -8, -7, -2, -1 ) );
            rec.bwtkn3 := Convert_Bwtkn_Type( Get( slices, 307 ));
            rec.bwtlb3 := Convert( slices, 308, ( -9, -8, -7 ) );
            rec.bwtoz3 := Convert( slices, 309, ( -9, -8, -7, -2, -1 ) );
            rec.bwtgm3 := Convert( slices, 310, ( -9, -8, -7 ) );
            rec.bwtg53 := Convert_Bwtg5_Type( Get( slices, 311 ));
            rec.wlsha := Convert_Yes_Or_Missing_Type( Get( slices, 312 ));
            rec.wlshb := Convert_Yes_Or_Missing_Type( Get( slices, 313 ));
            rec.wlshc := Convert_Yes_Or_Missing_Type( Get( slices, 314 ));
            rec.wlshd := Convert_Yes_Or_Missing_Type( Get( slices, 315 ));
            rec.wlshe := Convert_Jbwkhrh_Type( Get( slices, 316 ));
            rec.wlshua := Convert_Wlshua_Type( Get( slices, 317 ));
            rec.wlshub := Convert_Wlshua_Type( Get( slices, 318 ));
            rec.wlshuc := Convert_Wlshua_Type( Get( slices, 319 ));
            rec.wlshud := Convert_Wlshua_Type( Get( slices, 320 ));
            rec.wlshue := Convert_Wlshua_Type( Get( slices, 321 ));
            rec.aglt20 := Convert_Aglt20_Type( Get( slices, 322 ));
            rec.scnow2 := Convert_Cjsck2_Type( Get( slices, 323 ));
            rec.infted := Convert_Aglt20_Type( Get( slices, 324 ));
            rec.edasp := Convert_Edasp_Type( Get( slices, 325 ));
            rec.fedasp := Convert_Fedasp_Type( Get( slices, 326 ));
            rec.fedtyp := Convert_Fedtyp_Type( Get( slices, 327 ));
            rec.fedlik := Convert_Fedlik_Type( Get( slices, 328 ));
            rec.fednt1 := Convert_Fednt1_Type( Get( slices, 329 ));
            rec.fednt2 := Convert_Fednt2_Type( Get( slices, 330 ));
            rec.ocfut00 := Convert( slices, 331, ( -9, -8, -7, -2, -1 ) );
            rec.ocfut90 := Convert( slices, 332, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ageret := Convert( slices, 333, ( -9, -8, -7, -2, -1 ) );
            rec.rework := Convert_Rework_Type( Get( slices, 334 ));
            rec.retex := Convert( slices, 335, ( -9, -8, -7, -2, -1 ) );
            rec.agexrt := Convert( slices, 336, ( -9, -8, -7, -2, -1 ) );
            rec.retfix := Convert_Retfix_Type( Get( slices, 337 ));
            rec.rtmage := Convert( slices, 338, ( -9, -8, -7, -2, -1 ) );
            rec.rtrllt := Convert_Rtrllt_Type( Get( slices, 339 ));
            rec.rtrlya := Convert_Rtrlya_Type( Get( slices, 340 ));
            rec.rtrlyb := Convert_Rtrlyb_Type( Get( slices, 341 ));
            rec.rtrlyc := Convert_Rtrlyc_Type( Get( slices, 342 ));
            rec.rtrlyd := Convert_Rtrlyd_Type( Get( slices, 343 ));
            rec.rtrlye := Convert_Rtrlye_Type( Get( slices, 344 ));
            rec.rtrlyf := Convert_Rtrlyf_Type( Get( slices, 345 ));
            rec.rtrlyg := Convert_Rtrlyg_Type( Get( slices, 346 ));
            rec.rtrlyh := Convert_Rtrlyh_Type( Get( slices, 347 ));
            rec.rtrlyi := Convert_Rtrlyi_Type( Get( slices, 348 ));
            rec.rtrlyj := Convert_Rtrlyj_Type( Get( slices, 349 ));
            rec.rtrlyk := Convert_Rtrlyk_Type( Get( slices, 350 ));
            rec.rtrlyl := Convert_Rtrlyl_Type( Get( slices, 351 ));
            rec.rtrlym := Convert_Rtrlym_Type( Get( slices, 352 ));
            rec.yrtrly := Convert_Yrtrly_Type( Get( slices, 353 ));
            rec.rtlata := Convert_Rtlata_Type( Get( slices, 354 ));
            rec.rtlatb := Convert_Rtlatb_Type( Get( slices, 355 ));
            rec.rtlatc := Convert_Rtlatc_Type( Get( slices, 356 ));
            rec.rtlatd := Convert_Rtlatd_Type( Get( slices, 357 ));
            rec.rtlate := Convert_Rtlate_Type( Get( slices, 358 ));
            rec.rtlatf := Convert_Rtlatf_Type( Get( slices, 359 ));
            rec.rtlatg := Convert_Rtlatg_Type( Get( slices, 360 ));
            rec.rtlath := Convert_Rtlath_Type( Get( slices, 361 ));
            rec.rtlati := Convert_Rtlati_Type( Get( slices, 362 ));
            rec.rtlatj := Convert_Rtlatj_Type( Get( slices, 363 ));
            rec.yrtlat := Convert_Yrtlat_Type( Get( slices, 364 ));
            rec.rtvol := Convert_Rtvol_Type( Get( slices, 365 ));
            rec.rtsat := Convert_Rtsat_Type( Get( slices, 366 ));
            rec.rtcomp := Convert_Rtcomp_Type( Get( slices, 367 ));
            rec.rtpro1 := Convert_Rtpro1_Type( Get( slices, 368 ));
            rec.rtpro2 := Convert_Rtpro1_Type( Get( slices, 369 ));
            rec.rtpro3 := Convert_Rtpro1_Type( Get( slices, 370 ));
            rec.rtpro4 := Convert_Rtpro1_Type( Get( slices, 371 ));
            rec.rtpro5 := Convert_Rtpro1_Type( Get( slices, 372 ));
            rec.rtpro6 := Convert_Rtpro1_Type( Get( slices, 373 ));
            rec.rtcon1 := Convert_Rtcon1_Type( Get( slices, 374 ));
            rec.rtcon2 := Convert_Rtcon1_Type( Get( slices, 375 ));
            rec.rtcon3 := Convert_Rtcon1_Type( Get( slices, 376 ));
            rec.rtcon4 := Convert_Rtcon1_Type( Get( slices, 377 ));
            rec.ivda := Convert_Ivda_Type( Get( slices, 378 ));
            rec.ivdb := Convert_Ivdb_Type( Get( slices, 379 ));
            rec.ivdc := Convert_Ivdc_Type( Get( slices, 380 ));
            rec.ivdd := Convert_Ivdd_Type( Get( slices, 381 ));
            rec.ivde := Convert_Yes_Or_Missing_Type( Get( slices, 382 ));
            rec.pm0h := Convert( slices, 383, ( -9, -8 ) );
            rec.pm0m := Convert( slices, 384, ( -9, -8 ) );
            rec.hldsbl1 := Convert_Hldsbl1_Type( Get( slices, 385 ));
            rec.hlstat := Convert_Hlstat_Type( Get( slices, 386 ));
            rec.hlprb := Convert( slices, 387, ( -9, -8, -7, -2, -1 ) );
            rec.hlprba := Convert_Hlprba_Type( Get( slices, 388 ));
            rec.hlprbb := Convert_Hlprbb_Type( Get( slices, 389 ));
            rec.hlprbc := Convert_Hlprbc_Type( Get( slices, 390 ));
            rec.hlprbd := Convert_Hlprbd_Type( Get( slices, 391 ));
            rec.hlprbe := Convert_Hlprbe_Type( Get( slices, 392 ));
            rec.hlprbf := Convert_Hlprbf_Type( Get( slices, 393 ));
            rec.hlprbg := Convert_Hlprbg_Type( Get( slices, 394 ));
            rec.hlprbh := Convert_Hlprbh_Type( Get( slices, 395 ));
            rec.hlprbi := Convert_Hlprbi_Type( Get( slices, 396 ));
            rec.hlprbj := Convert_Hlprbj_Type( Get( slices, 397 ));
            rec.hlprbk := Convert_Hlprbk_Type( Get( slices, 398 ));
            rec.hlprbl := Convert_Hlprbl_Type( Get( slices, 399 ));
            rec.hlprbn := Convert_Hlprbn_Type( Get( slices, 400 ));
            rec.hlprbo := Convert_Hlprbo_Type( Get( slices, 401 ));
            rec.hlprbm := Convert_Hlprbm_Type( Get( slices, 402 ));
            rec.hlprxa := Convert_Bscon_Type( Get( slices, 403 ));
            rec.hlprxb := Convert_Bscon_Type( Get( slices, 404 ));
            rec.hlprxc := Convert_Bscon_Type( Get( slices, 405 ));
            rec.hlprxd := Convert_Bscon_Type( Get( slices, 406 ));
            rec.hlprxe := Convert_Bscon_Type( Get( slices, 407 ));
            rec.hlprxf := Convert_Bscon_Type( Get( slices, 408 ));
            rec.hlprxg := Convert_Bscon_Type( Get( slices, 409 ));
            rec.hlprxh := Convert_Bscon_Type( Get( slices, 410 ));
            rec.hlprxi := Convert_Bscon_Type( Get( slices, 411 ));
            rec.hlprxj := Convert_Bscon_Type( Get( slices, 412 ));
            rec.hlprxk := Convert_Bscon_Type( Get( slices, 413 ));
            rec.hlprxl := Convert_Bscon_Type( Get( slices, 414 ));
            rec.hlprxm := Convert_Bscon_Type( Get( slices, 415 ));
            rec.hlprxn := Convert_Bscon_Type( Get( slices, 416 ));
            rec.hlprxo := Convert_Bscon_Type( Get( slices, 417 ));
            rec.hllt := Convert_Bscon_Type( Get( slices, 418 ));
            rec.hllta := Convert_Hllta_Type( Get( slices, 419 ));
            rec.hlltb := Convert_Hlltb_Type( Get( slices, 420 ));
            rec.hlltc := Convert_Hlltc_Type( Get( slices, 421 ));
            rec.hlltd := Convert_Hlltd_Type( Get( slices, 422 ));
            rec.hllte := Convert_Hllte_Type( Get( slices, 423 ));
            rec.hlltw := Convert_Bscon_Type( Get( slices, 424 ));
            rec.hlendw := Convert_Hlendw_Type( Get( slices, 425 ));
            rec.hlltwa := Convert_Hlltwa_Type( Get( slices, 426 ));
            rec.hlpain := Convert_Bscon_Type( Get( slices, 427 ));
            rec.hltrpn := Convert_Hltrpn_Type( Get( slices, 428 ));
            rec.hlavpn := Convert_Hlavpn_Type( Get( slices, 429 ));
            rec.hlwtpn := Convert_Hlavpn_Type( Get( slices, 430 ));
            rec.hliv65 := Convert_Hliv65_Type( Get( slices, 431 ));
            rec.adla := Convert_Adla_Type( Get( slices, 432 ));
            rec.adlad := Convert_Adlad_Type( Get( slices, 433 ));
            rec.adlb := Convert_Adla_Type( Get( slices, 434 ));
            rec.adlbd := Convert_Adlad_Type( Get( slices, 435 ));
            rec.adlc := Convert_Adla_Type( Get( slices, 436 ));
            rec.adlcd := Convert_Adlad_Type( Get( slices, 437 ));
            rec.adld := Convert_Adla_Type( Get( slices, 438 ));
            rec.adldd := Convert_Adlad_Type( Get( slices, 439 ));
            rec.adle := Convert_Adla_Type( Get( slices, 440 ));
            rec.adled := Convert_Adlad_Type( Get( slices, 441 ));
            rec.adlf := Convert_Adla_Type( Get( slices, 442 ));
            rec.adlfd := Convert_Adlad_Type( Get( slices, 443 ));
            rec.rtrhm := Convert_Rtrhm_Type( Get( slices, 444 ));
            rec.lvlong := Convert( slices, 445, ( -9, -8, -7, -2, -1 ) );
            rec.hl2gp := Convert_Hl2gp_Type( Get( slices, 446 ));
            rec.hl2hop := Convert( slices, 447, ( -9, -8, -7, -2, -1 ) );
            rec.xdts := Convert_Bscon_Type( Get( slices, 448 ));
            rec.nxdts := Convert_Nxdts_Type( Get( slices, 449 ));
            rec.hosp := Convert_Hlsv_Type( Get( slices, 450 ));
            rec.hospd := Convert( slices, 451, ( -9, -8, -7, -2, -1 ) );
            rec.hospch := Convert_Hospch_Type( Get( slices, 452 ));
            rec.hospnhs := Convert_Hospnhs_Type( Get( slices, 453 ));
            rec.hlcvr := Convert_Hlcvr_Type( Get( slices, 454 ));
            rec.hlcvrh := Convert_Hlcvrh_Type( Get( slices, 455 ));
            rec.hlcvrl := Convert( slices, 456, ( -9, -8, -7, -2, -1 ) );
            rec.hlsv := Convert_Hlsv_Type( Get( slices, 457 ));
            rec.hlsva := Convert_Hlsva_Type( Get( slices, 458 ));
            rec.hlsvan := Convert_Hlsvan_Type( Get( slices, 459 ));
            rec.hlsvaf := Convert_Hlsvaf_Type( Get( slices, 460 ));
            rec.hlsvb := Convert_Hlsvb_Type( Get( slices, 461 ));
            rec.hlsvbn := Convert_Hlsvan_Type( Get( slices, 462 ));
            rec.hlsvbf := Convert_Hlsvaf_Type( Get( slices, 463 ));
            rec.hlsvc := Convert_Hlsvc_Type( Get( slices, 464 ));
            rec.hlsvcn := Convert_Hlsvan_Type( Get( slices, 465 ));
            rec.hlsvcf := Convert_Hlsvaf_Type( Get( slices, 466 ));
            rec.hlsvd := Convert_Hlsvd_Type( Get( slices, 467 ));
            rec.hlsvdn := Convert_Hlsvan_Type( Get( slices, 468 ));
            rec.hlsvdf := Convert_Hlsvaf_Type( Get( slices, 469 ));
            rec.hlsve := Convert_Hlsve_Type( Get( slices, 470 ));
            rec.hlsven := Convert_Hlsvan_Type( Get( slices, 471 ));
            rec.hlsvef := Convert_Hlsvaf_Type( Get( slices, 472 ));
            rec.hlsvf := Convert_Hlsvf_Type( Get( slices, 473 ));
            rec.hlsvfn := Convert_Hlsvan_Type( Get( slices, 474 ));
            rec.hlsvff := Convert_Hlsvaf_Type( Get( slices, 475 ));
            rec.hlsvg := Convert_Hlsvg_Type( Get( slices, 476 ));
            rec.hlsvgn := Convert_Hlsvan_Type( Get( slices, 477 ));
            rec.hlsvgf := Convert_Hlsvaf_Type( Get( slices, 478 ));
            rec.hlsvh := Convert_Hlsvh_Type( Get( slices, 479 ));
            rec.hlsvhn := Convert_Hlsvan_Type( Get( slices, 480 ));
            rec.hlsvhf := Convert_Hlsvaf_Type( Get( slices, 481 ));
            rec.hlsvi := Convert_Hlsvi_Type( Get( slices, 482 ));
            rec.hlsvin := Convert_Hlsvan_Type( Get( slices, 483 ));
            rec.hlsvif := Convert_Hlsvaf_Type( Get( slices, 484 ));
            rec.hlsvl := Convert_Hlsvl_Type( Get( slices, 485 ));
            rec.hlsvln := Convert_Hlsvln_Type( Get( slices, 486 ));
            rec.hlsvlf := Convert_Hlsvlf_Type( Get( slices, 487 ));
            rec.hlsvm := Convert_Hlsvm_Type( Get( slices, 488 ));
            rec.hlsvmn := Convert_Hlsvln_Type( Get( slices, 489 ));
            rec.hlsvmf := Convert_Hlsvlf_Type( Get( slices, 490 ));
            rec.hlsvj := Convert_Hlsvj_Type( Get( slices, 491 ));
            rec.hlsvjn := Convert_Hlsvan_Type( Get( slices, 492 ));
            rec.hlsvjf := Convert_Hlsvaf_Type( Get( slices, 493 ));
            rec.hlsvk := Convert_Hlsvk_Type( Get( slices, 494 ));
            rec.hlsvkn := Convert_Hlsvan_Type( Get( slices, 495 ));
            rec.hlsvkf := Convert_Hlsvaf_Type( Get( slices, 496 ));
            rec.hlck := Convert_Aidpl1_Type( Get( slices, 497 ));
            rec.hlcka := Convert_Hlcka_Type( Get( slices, 498 ));
            rec.hlckan := Convert_Hlckan_Type( Get( slices, 499 ));
            rec.hlckb := Convert_Hlcka_Type( Get( slices, 500 ));
            rec.hlckbn := Convert_Hlckan_Type( Get( slices, 501 ));
            rec.hlckc := Convert_Hlcka_Type( Get( slices, 502 ));
            rec.hlckcn := Convert_Hlckan_Type( Get( slices, 503 ));
            rec.hlckd := Convert_Hlcka_Type( Get( slices, 504 ));
            rec.hlckdn := Convert_Hlckan_Type( Get( slices, 505 ));
            rec.hlcke := Convert_Hlcka_Type( Get( slices, 506 ));
            rec.hlcken := Convert_Hlckan_Type( Get( slices, 507 ));
            rec.hlcki := Convert_Hlcki_Type( Get( slices, 508 ));
            rec.hlckin := Convert_Hlckin_Type( Get( slices, 509 ));
            rec.hlckf := Convert_Hlcka_Type( Get( slices, 510 ));
            rec.hlckfn := Convert_Hlckan_Type( Get( slices, 511 ));
            rec.hlckg := Convert_Hlcka_Type( Get( slices, 512 ));
            rec.hlckgn := Convert_Hlckan_Type( Get( slices, 513 ));
            rec.hlckh := Convert_Hlcka_Type( Get( slices, 514 ));
            rec.hlckhn := Convert_Hlckan_Type( Get( slices, 515 ));
            rec.smoker := Convert_Bscon_Type( Get( slices, 516 ));
            rec.ncigs := Convert( slices, 517, ( -9, -8, -7, -2, -1 ) );
            rec.hlhtm := Convert_Hlhtm_Type( Get( slices, 518 ));
            rec.hlhtf := Convert( slices, 519, ( -9, -8, -7, -2, -1 ) );
            rec.hlhti := Convert( slices, 520, ( -9, -8, -7, -2, -1 ) );
            rec.hlhtc := Convert( slices, 521, ( -9, -8, -7, -2, -1 ) );
            rec.hlwtm := Convert_Hlwtm_Type( Get( slices, 522 ));
            rec.hlwts := Convert( slices, 523, ( -9, -8, -7, -2, -1 ) );
            rec.hlwtp := Convert( slices, 524, ( -9, -8, -7, -2, -1 ) );
            rec.hlwtk := Convert( slices, 525, ( -9, -8, -7, -2, -1 ) );
            rec.hlwte := Convert_Hlwte_Type( Get( slices, 526 ));
            rec.hlwtl := Convert_Hlwtl_Type( Get( slices, 527 ));
            rec.hlwtr := Convert_Hlwtr_Type( Get( slices, 528 ));
            rec.cbagef := Convert_Cbagef_Type( Get( slices, 529 ));
            rec.hlpreg := Convert_Cbagef_Type( Get( slices, 530 ));
            rec.spinhh := Convert_Hhch12_Type( Get( slices, 531 ));
            rec.aidhh := Convert_Aidhh_Type( Get( slices, 532 ));
            rec.aidhua := Convert( slices, 533, ( -9, -8, -7, -1 ) );
            rec.aidhub := Convert( slices, 534, ( -9, -8, -7 ) );
            rec.aidhuc := Convert( slices, 535, ( -9, -8, -7 ) );
            rec.aidxhh := Convert_Aidxhh_Type( Get( slices, 536 ));
            rec.naidxhh := Convert_Naidxhh_Type( Get( slices, 537 ));
            rec.aidhu1 := Convert_Aidhu1_Type( Get( slices, 538 ));
            rec.aidhu2 := Convert_Aidhu2_Type( Get( slices, 539 ));
            rec.aidhrs := Convert_Aidhrs_Type( Get( slices, 540 ));
            rec.ivma := Convert_Ivda_Type( Get( slices, 541 ));
            rec.ivmb := Convert_Ivdb_Type( Get( slices, 542 ));
            rec.ivmc := Convert_Ivec_Type( Get( slices, 543 ));
            rec.ivmd := Convert_Ivdd_Type( Get( slices, 544 ));
            rec.ivme := Convert_Ivee_Type( Get( slices, 545 ));
            rec.pe0h := Convert( slices, 546, ( -9, -8 ) );
            rec.pe0m := Convert( slices, 547, ( -9, -8 ) );
            rec.jbhas := Convert_Frnow_Type( Get( slices, 548 ));
            rec.jboff := Convert_Jboff_Type( Get( slices, 549 ));
            rec.jboffy := Convert_Jboffy_Type( Get( slices, 550 ));
            rec.jbterm1 := Convert_Jbterm1_Type( Get( slices, 551 ));
            rec.jbterm2 := Convert_Jbterm2_Type( Get( slices, 552 ));
            rec.jbck1 := Convert_Jbck1_Type( Get( slices, 553 ));
            rec.jbsocp := Convert_Hldsbl1_Type( Get( slices, 554 ));
            rec.jbsoc := Convert( slices, 555, ( -9, -8, -2, -1 ) );
            rec.jbsoc00 := Convert( slices, 556, ( -9, -8, -2, -1 ) );
            rec.jbck2 := Convert_Jbck2_Type( Get( slices, 557 ));
            rec.jbsocr := Convert_Bscon_Type( Get( slices, 558 ));
            rec.jbck3 := Convert_Jbck3_Type( Get( slices, 559 ));
            rec.jbsicp := Convert_Bscon_Type( Get( slices, 560 ));
            rec.jbsic92 := Convert( slices, 561, ( -9, -8, -7, -2, -1 ) );
            rec.jbck4 := Convert_Jbck4_Type( Get( slices, 562 ));
            rec.jbsicr := Convert_Bscon_Type( Get( slices, 563 ));
            rec.jbck5 := Convert_Jbck5_Type( Get( slices, 564 ));
            rec.jbempp := Convert_Bscon_Type( Get( slices, 565 ));
            rec.jbck6 := Convert_Jbck6_Type( Get( slices, 566 ));
            rec.jbempr := Convert_Bscon_Type( Get( slices, 567 ));
            rec.jbck7 := Convert_Jbck7_Type( Get( slices, 568 ));
            rec.jbsempp := Convert_Jbsempp_Type( Get( slices, 569 ));
            rec.jbsempr := Convert_Jbsempp_Type( Get( slices, 570 ));
            rec.jbsemp := Convert_Jbsemp_Type( Get( slices, 571 ));
            rec.jbck8 := Convert_Jbck8_Type( Get( slices, 572 ));
            rec.jbprom := Convert_Bscon_Type( Get( slices, 573 ));
            rec.jbchgd := Convert( slices, 574, ( -9, -8, -7, -2, -1 ) );
            rec.jbchgm := Convert_Cjsem_Type( Get( slices, 575 ));
            rec.jbchgy4 := Convert( slices, 576, ( -9, -8, -7, -2, -1 ) );
            rec.jbchgly := Convert_Jbchgly_Type( Get( slices, 577 ));
            rec.jbcspl := Convert_Bscon_Type( Get( slices, 578 ));
            rec.jbck9 := Convert_Jbck9_Type( Get( slices, 579 ));
            rec.jbmngp := Convert_Bscon_Type( Get( slices, 580 ));
            rec.jbmngr := Convert_Jbmngr_Type( Get( slices, 581 ));
            rec.jbck10 := Convert_Jbck10_Type( Get( slices, 582 ));
            rec.jbsectp := Convert_Bscon_Type( Get( slices, 583 ));
            rec.jbsect := Convert_Jbsect_Type( Get( slices, 584 ));
            rec.jbck11 := Convert_Jbck11_Type( Get( slices, 585 ));
            rec.jbsizep := Convert_Bscon_Type( Get( slices, 586 ));
            rec.jbsize := Convert_Jbsize_Type( Get( slices, 587 ));
            rec.jbhrs := Convert( slices, 588, ( -9, -8, -7, -2, -1 ) );
            rec.jbot := Convert( slices, 589, ( -9, -8, -7, -2, -1 ) );
            rec.jbotpd := Convert( slices, 590, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbhrlk := Convert_Jbhrlk_Type( Get( slices, 591 ));
            rec.jbpl := Convert_Jbpl_Type( Get( slices, 592 ));
            rec.jbttwt := Convert( slices, 593, ( -9, -8, -7, -3, -2, -1 ) );
            rec.jbttwm := Convert_Jbttwm_Type( Get( slices, 594 ));
            rec.jbsat2 := Convert( slices, 595, ( -9, -8, -7, -2, -1 ) );
            rec.jbsat4 := Convert_Jbsat4_Type( Get( slices, 596 ));
            rec.jbsat6 := Convert_Jbsat4_Type( Get( slices, 597 ));
            rec.jbsat7 := Convert_Jbsat_Type( Get( slices, 598 ));
            rec.jbsat := Convert_Jbsat_Type( Get( slices, 599 ));
            rec.paygl := Convert( slices, 600, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.paygw := Convert( slices, 601, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.paynl := Convert( slices, 602, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.paynw := Convert( slices, 603, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.pytc := Convert_Pytc_Type( Get( slices, 604 ));
            rec.pywftc := Convert( slices, 605, ( -9, -8, -7, -2, -1 ) );
            rec.pywftcw := Convert( slices, 606, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.payslp := Convert_Payslp_Type( Get( slices, 607 ));
            rec.payusl := Convert_Aidpl1_Type( Get( slices, 608 ));
            rec.payu := Convert( slices, 609, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.payuw := Convert( slices, 610, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.payug := Convert_Paylyg_Type( Get( slices, 611 ));
            rec.paydf1 := Convert_Paydf1_Type( Get( slices, 612 ));
            rec.paydf2 := Convert_Paydf2_Type( Get( slices, 613 ));
            rec.paydf3 := Convert_Paydf3_Type( Get( slices, 614 ));
            rec.paydf4 := Convert_Paydf4_Type( Get( slices, 615 ));
            rec.paydf5 := Convert_Paydf5_Type( Get( slices, 616 ));
            rec.paydf6 := Convert_Paydf6_Type( Get( slices, 617 ));
            rec.paydf7 := Convert_Paydf7_Type( Get( slices, 618 ));
            rec.paydf9 := Convert_Paydf9_Type( Get( slices, 619 ));
            rec.paydf8 := Convert_Paydf8_Type( Get( slices, 620 ));
            rec.paytyp := Convert_Paytyp_Type( Get( slices, 621 ));
            rec.ovtpay := Convert_Bpar16_Type( Get( slices, 622 ));
            rec.extrate := Convert( slices, 623, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.extrest := Convert_Basrest_Type( Get( slices, 624 ));
            rec.basrate := Convert( slices, 625, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.basrest := Convert_Basrest_Type( Get( slices, 626 ));
            rec.ovtrate := Convert( slices, 627, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.ovtrest := Convert_Basrest_Type( Get( slices, 628 ));
            rec.jbperfp := Convert_Coh1mr_Type( Get( slices, 629 ));
            rec.jbonus := Convert_Aidpl1_Type( Get( slices, 630 ));
            rec.jbonam := Convert( slices, 631, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbong := Convert_Jbong_Type( Get( slices, 632 ));
            rec.jbrise := Convert_Aidpl1_Type( Get( slices, 633 ));
            rec.tujbpl := Convert_Aidpl1_Type( Get( slices, 634 ));
            rec.tuin1 := Convert_Aidpl1_Type( Get( slices, 635 ));
            rec.jbopps := Convert_Aidpl1_Type( Get( slices, 636 ));
            rec.jbpen := Convert_Aidpl1_Type( Get( slices, 637 ));
            rec.jbpenm := Convert_Aidpl1_Type( Get( slices, 638 ));
            rec.jbtime := Convert_Jbtime_Type( Get( slices, 639 ));
            rec.jbwkhra := Convert_Yes_Or_Missing_Type( Get( slices, 640 ));
            rec.jbwkhrb := Convert_Yes_Or_Missing_Type( Get( slices, 641 ));
            rec.jbwkhrc := Convert_Yes_Or_Missing_Type( Get( slices, 642 ));
            rec.jbwkhrd := Convert_Yes_Or_Missing_Type( Get( slices, 643 ));
            rec.jbwkhre := Convert_Yes_Or_Missing_Type( Get( slices, 644 ));
            rec.jbwkhrf := Convert_Yes_Or_Missing_Type( Get( slices, 645 ));
            rec.jbwkhrg := Convert_Yes_Or_Missing_Type( Get( slices, 646 ));
            rec.jbwkhrh := Convert_Jbwkhrh_Type( Get( slices, 647 ));
            rec.payck1 := Convert_Payck1_Type( Get( slices, 648 ));
            rec.pays := Convert( slices, 649, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.paysw := Convert( slices, 650, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.paysg := Convert_Paylyg_Type( Get( slices, 651 ));
            rec.jbbgd1 := Convert( slices, 652, ( -9, -8, -7, -2, -1 ) );
            rec.jbbgm1 := Convert_Jbbgm1_Type( Get( slices, 653 ));
            rec.jbbgy41 := Convert( slices, 654, ( -9, -8, -7, -2, -1 ) );
            rec.jbbgly1 := Convert_Jbbgly1_Type( Get( slices, 655 ));
            rec.payly := Convert( slices, 656, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.paylyw := Convert( slices, 657, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.paylyg := Convert_Paylyg_Type( Get( slices, 658 ));
            rec.jsboss := Convert_Jsboss_Type( Get( slices, 659 ));
            rec.jssize := Convert_Jssize_Type( Get( slices, 660 ));
            rec.jshrs := Convert( slices, 661, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jshrlk := Convert_Jbhrlk_Type( Get( slices, 662 ));
            rec.jstime := Convert_Jstime_Type( Get( slices, 663 ));
            rec.jstypeb := Convert_Jstypeb_Type( Get( slices, 664 ));
            rec.jsaccs := Convert_Jsaccs_Type( Get( slices, 665 ));
            rec.jspart := Convert_Jspart_Type( Get( slices, 666 ));
            rec.jsprbm := Convert_Cjsbgm_Type( Get( slices, 667 ));
            rec.jsprby4 := Convert( slices, 668, ( -9, -8, -7, -2, -1 ) );
            rec.jsprem := Convert_Cjsbgm_Type( Get( slices, 669 ));
            rec.jsprey4 := Convert( slices, 670, ( -9, -8, -7, -2, -1 ) );
            rec.jsprf := Convert( slices, 671, ( -9, -8, -7, -3, -2, -1 ) );
            rec.jsprls := Convert_Jsprls_Type( Get( slices, 672 ));
            rec.jsprtx := Convert_Jsprtx_Type( Get( slices, 673 ));
            rec.jsprni := Convert_Jsprni_Type( Get( slices, 674 ));
            rec.jspayu := Convert( slices, 675, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jspayw := Convert( slices, 676, ( -9.0, -8.0, -7.0, -4.0, -2.0, -1.0 ) );
            rec.jspytx := Convert_Jspytx_Type( Get( slices, 677 ));
            rec.jspyni := Convert_Jspyni_Type( Get( slices, 678 ));
            rec.jspl := Convert_Jspl_Type( Get( slices, 679 ));
            rec.jsttwt := Convert( slices, 680, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.jsttwm := Convert_Jsttwm_Type( Get( slices, 681 ));
            rec.jssat1 := Convert_Jssat1_Type( Get( slices, 682 ));
            rec.jssat2 := Convert_Jbsat_Type( Get( slices, 683 ));
            rec.jssat4 := Convert_Jbsat_Type( Get( slices, 684 ));
            rec.jssat5 := Convert_Jbsat_Type( Get( slices, 685 ));
            rec.jssat := Convert_Jbsat_Type( Get( slices, 686 ));
            rec.jsck1 := Convert_Jsck1_Type( Get( slices, 687 ));
            rec.jssame := Convert_Bscon_Type( Get( slices, 688 ));
            rec.jsbgd1 := Convert( slices, 689, ( -9, -8, -7, -2, -1 ) );
            rec.jsbgm1 := Convert_Jbbgm1_Type( Get( slices, 690 ));
            rec.jsbgy41 := Convert( slices, 691, ( -9, -8, -7, -2, -1 ) );
            rec.jsbgly1 := Convert( slices, 692, ( -9, -8, -7 ) );
            rec.jblkcha := Convert_Jblkcha_Type( Get( slices, 693 ));
            rec.jbxpcha := Convert_Jblkcha_Type( Get( slices, 694 ));
            rec.jblkchb := Convert_Boolean_With_Missing( Get( slices, 695 ));
            rec.jbxpchb := Convert_Boolean_With_Missing( Get( slices, 696 ));
            rec.jblkchc := Convert_Boolean_With_Missing( Get( slices, 697 ));
            rec.jbxpchc := Convert_Boolean_With_Missing( Get( slices, 698 ));
            rec.jblkchd := Convert_Boolean_With_Missing( Get( slices, 699 ));
            rec.jbxpchd := Convert_Boolean_With_Missing( Get( slices, 700 ));
            rec.jblkche := Convert_Boolean_With_Missing( Get( slices, 701 ));
            rec.jbxpche := Convert_Boolean_With_Missing( Get( slices, 702 ));
            rec.rach12 := Convert_Hhch12_Type( Get( slices, 703 ));
            rec.jbchc1 := Convert_Jbchc1_Type( Get( slices, 704 ));
            rec.jbchc2 := Convert_Jbchc2_Type( Get( slices, 705 ));
            rec.jbchc3 := Convert_Jbchc3_Type( Get( slices, 706 ));
            rec.xpchcf := Convert_Xpchcf_Type( Get( slices, 707 ));
            rec.xpchc := Convert( slices, 708, ( -9, -8, -7, -2, -1 ) );
            rec.huxpch := Convert_Huxpch_Type( Get( slices, 709 ));
            rec.hunurs := Convert_Hunurs_Type( Get( slices, 710 ));
            rec.julk1 := Convert_Aidpl1_Type( Get( slices, 711 ));
            rec.julk4 := Convert_Bscon_Type( Get( slices, 712 ));
            rec.julka := Convert_Boolean_With_Missing( Get( slices, 713 ));
            rec.julkb := Convert_Boolean_With_Missing( Get( slices, 714 ));
            rec.julkc := Convert_Boolean_With_Missing( Get( slices, 715 ));
            rec.julkd := Convert_Boolean_With_Missing( Get( slices, 716 ));
            rec.julke := Convert_Boolean_With_Missing( Get( slices, 717 ));
            rec.julkjb := Convert_Aidpl1_Type( Get( slices, 718 ));
            rec.jubgn := Convert_Boolean_With_Missing( Get( slices, 719 ));
            rec.juspec := Convert_Juspec_Type( Get( slices, 720 ));
            rec.jusoc := Convert( slices, 721, ( -9, -8, -7, -2, -1 ) );
            rec.jusoc00 := Convert( slices, 722, ( -9, -8, -7, -2, -1 ) );
            rec.juhrsx := Convert( slices, 723, ( -9, -8, -7, -2, -1 ) );
            rec.jupayx := Convert( slices, 724, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jupayl := Convert( slices, 725, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.juhrsl := Convert( slices, 726, ( -9, -8, -7, -2, -1 ) );
            rec.eprosh := Convert_Cohxpm2_Type( Get( slices, 727 ));
            rec.eaage := Convert_Eaage_Type( Get( slices, 728 ));
            rec.jbub := Convert_Bscon_Type( Get( slices, 729 ));
            rec.jbuby := Convert_Jbuby_Type( Get( slices, 730 ));
            rec.j2has := Convert_Aidpl1_Type( Get( slices, 731 ));
            rec.j2soc := Convert( slices, 732, ( -9, -8, -7, -2, -1 ) );
            rec.j2soc00 := Convert( slices, 733, ( -9, -8, -7, -2, -1 ) );
            rec.j2semp := Convert_J2semp_Type( Get( slices, 734 ));
            rec.j2hrs := Convert( slices, 735, ( -9, -8, -7, -2, -1 ) );
            rec.j2pay := Convert( slices, 736, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ivea := Convert_Ivda_Type( Get( slices, 737 ));
            rec.iveb := Convert_Ivdb_Type( Get( slices, 738 ));
            rec.ivec := Convert_Ivec_Type( Get( slices, 739 ));
            rec.ived := Convert_Ivdd_Type( Get( slices, 740 ));
            rec.ivee := Convert_Ivee_Type( Get( slices, 741 ));
            rec.cjsck1 := Convert_Cjsck1_Type( Get( slices, 742 ));
            rec.cjsbgd := Convert( slices, 743, ( -9, -8, -7, -2, -1 ) );
            rec.cjsbgm := Convert_Cjsbgm_Type( Get( slices, 744 ));
            rec.cjsbgy4 := Convert( slices, 745, ( -9, -8, -7, -2, -1 ) );
            rec.cjsbly := Convert_Cjsbly_Type( Get( slices, 746 ));
            rec.cjsck2 := Convert_Cjsck2_Type( Get( slices, 747 ));
            rec.cjsck3 := Convert_Bscon_Type( Get( slices, 748 ));
            rec.cjsstly := Convert_Cjsstly_Type( Get( slices, 749 ));
            rec.cjsed := Convert( slices, 750, ( -9, -8, -7, -2, -1 ) );
            rec.cjsem := Convert_Cjsem_Type( Get( slices, 751 ));
            rec.cjsey4 := Convert( slices, 752, ( -9, -8, -7, -2, -1 ) );
            rec.cjscjs := Convert_Cjscjs_Type( Get( slices, 753 ));
            rec.cjsck4 := Convert_Cjsck2_Type( Get( slices, 754 ));
            rec.jhstpy := Convert_Jhstpy_Type( Get( slices, 755 ));
            rec.jbhad := Convert_Aidpl1_Type( Get( slices, 756 ));
            rec.jlend4 := Convert( slices, 757, ( -9, -8, -7, -2, -1 ) );
            rec.jlsoc := Convert( slices, 758, ( -9, -8, -7, -2, -1 ) );
            rec.jlsoc00 := Convert( slices, 759, ( -9, -8, -7, -2, -1 ) );
            rec.jlsic92 := Convert( slices, 760, ( -9, -8, -7 ) );
            rec.jlsemp := Convert_J2semp_Type( Get( slices, 761 ));
            rec.jlboss := Convert_Aidpl1_Type( Get( slices, 762 ));
            rec.jlmngr := Convert_Jlmngr_Type( Get( slices, 763 ));
            rec.jlsize := Convert_Jlsize_Type( Get( slices, 764 ));
            rec.ivja := Convert_Ivda_Type( Get( slices, 765 ));
            rec.ivjb := Convert_Ivdb_Type( Get( slices, 766 ));
            rec.ivjc := Convert_Ivec_Type( Get( slices, 767 ));
            rec.ivjd := Convert_Ivdd_Type( Get( slices, 768 ));
            rec.ivje := Convert_Ivee_Type( Get( slices, 769 ));
            rec.pv0h := Convert( slices, 770, ( -9, -8, -7 ) );
            rec.pv0m := Convert( slices, 771, ( -9, -8, -7 ) );
            rec.oppola := Convert_Oppola_Type( Get( slices, 772 ));
            rec.oppolb := Convert_Oppola_Type( Get( slices, 773 ));
            rec.oppolc := Convert_Oppola_Type( Get( slices, 774 ));
            rec.oppold := Convert_Oppola_Type( Get( slices, 775 ));
            rec.vote1 := Convert_Aidpl1_Type( Get( slices, 776 ));
            rec.vote2 := Convert_Aidpl1_Type( Get( slices, 777 ));
            rec.vote3 := Convert_Vote3_Type( Get( slices, 778 ));
            rec.vote4 := Convert_Vote3_Type( Get( slices, 779 ));
            rec.vote5 := Convert_Vote5_Type( Get( slices, 780 ));
            rec.vote7 := Convert_Vote7_Type( Get( slices, 781 ));
            rec.vote8 := Convert_Vote8_Type( Get( slices, 782 ));
            rec.vote6 := Convert_Vote6_Type( Get( slices, 783 ));
            rec.opdev1 := Convert_Opdev1_Type( Get( slices, 784 ));
            rec.opdev2 := Convert_Opdev2_Type( Get( slices, 785 ));
            rec.opdvni1 := Convert_Opdvni1_Type( Get( slices, 786 ));
            rec.opdvni2 := Convert_Opdvni2_Type( Get( slices, 787 ));
            rec.opnisec := Convert_Opnisec_Type( Get( slices, 788 ));
            rec.opeur1 := Convert_Opeur1_Type( Get( slices, 789 ));
            rec.opeur2 := Convert_Opeur2_Type( Get( slices, 790 ));
            rec.opeur3 := Convert_Opeur3_Type( Get( slices, 791 ));
            rec.lacta := Convert_Lacta_Type( Get( slices, 792 ));
            rec.lactb := Convert_Lacta_Type( Get( slices, 793 ));
            rec.lactc := Convert_Lacta_Type( Get( slices, 794 ));
            rec.lactd := Convert_Lacta_Type( Get( slices, 795 ));
            rec.lacte := Convert_Lacta_Type( Get( slices, 796 ));
            rec.lactf := Convert_Lacta_Type( Get( slices, 797 ));
            rec.lacth := Convert_Lacta_Type( Get( slices, 798 ));
            rec.lacti := Convert_Lacta_Type( Get( slices, 799 ));
            rec.lactj := Convert_Lacta_Type( Get( slices, 800 ));
            rec.lactk := Convert_Lacta_Type( Get( slices, 801 ));
            rec.lactl := Convert_Lacta_Type( Get( slices, 802 ));
            rec.oprlg2 := Convert_Oprlg2_Type( Get( slices, 803 ));
            rec.frna := Convert_Frna_Type( Get( slices, 804 ));
            rec.frnb := Convert_Frna_Type( Get( slices, 805 ));
            rec.frnc := Convert_Coh1mr_Type( Get( slices, 806 ));
            rec.lvma := Convert_Lvma_Type( Get( slices, 807 ));
            rec.maage := Convert( slices, 808, ( -9, -8, -7, -2, -1 ) );
            rec.lvpa := Convert_Lvpa_Type( Get( slices, 809 ));
            rec.paage := Convert( slices, 810, ( -9, -8, -7, -2, -1 ) );
            rec.lvch := Convert_Lvch_Type( Get( slices, 811 ));
            rec.nlvch := Convert( slices, 812, ( -9, -8, -7, -2, -1 ) );
            rec.lvsib := Convert_Lvsib_Type( Get( slices, 813 ));
            rec.nlvsib := Convert( slices, 814, ( -9, -8, -7, -2, -1 ) );
            rec.lvgch := Convert_Lvgch_Type( Get( slices, 815 ));
            rec.nlvgch := Convert( slices, 816, ( -9, -8, -7, -2, -1 ) );
            rec.lvgpar := Convert_Lvgpar_Type( Get( slices, 817 ));
            rec.nlvgpa := Convert( slices, 818, ( -9, -8, -7, -2, -1 ) );
            rec.lvggch := Convert_Lvggch_Type( Get( slices, 819 ));
            rec.nlvggch := Convert( slices, 820, ( -9, -8, -7, -2, -1 ) );
            rec.lvggpa := Convert_Lvggpa_Type( Get( slices, 821 ));
            rec.nlvggpa := Convert( slices, 822, ( -9, -8, -7, -2, -1 ) );
            rec.nolvrel := Convert_Nocaidu_Type( Get( slices, 823 ));
            rec.parmar := Convert_Bscon_Type( Get( slices, 824 ));
            rec.malone := Convert_Bscon_Type( Get( slices, 825 ));
            rec.palone := Convert_Bscon_Type( Get( slices, 826 ));
            rec.masee := Convert_Chmail_Type( Get( slices, 827 ));
            rec.matel := Convert_Chmail_Type( Get( slices, 828 ));
            rec.mamail := Convert_Chmail_Type( Get( slices, 829 ));
            rec.mafar := Convert_Chfar_Type( Get( slices, 830 ));
            rec.pasee := Convert_Chmail_Type( Get( slices, 831 ));
            rec.patel := Convert_Chmail_Type( Get( slices, 832 ));
            rec.pamail := Convert_Chmail_Type( Get( slices, 833 ));
            rec.pafar := Convert_Pafar_Type( Get( slices, 834 ));
            rec.chsee := Convert_Chmail_Type( Get( slices, 835 ));
            rec.chtel := Convert_Chmail_Type( Get( slices, 836 ));
            rec.chmail := Convert_Chmail_Type( Get( slices, 837 ));
            rec.chfar := Convert_Chfar_Type( Get( slices, 838 ));
            rec.chaida := Convert_Chaida_Type( Get( slices, 839 ));
            rec.chaidb := Convert_Chaidb_Type( Get( slices, 840 ));
            rec.chaidc := Convert_Chaidc_Type( Get( slices, 841 ));
            rec.chaidd := Convert_Chaidd_Type( Get( slices, 842 ));
            rec.chaide := Convert_Chaide_Type( Get( slices, 843 ));
            rec.chaidf := Convert_Chaidf_Type( Get( slices, 844 ));
            rec.chaidg := Convert_Chaidg_Type( Get( slices, 845 ));
            rec.chaidh := Convert_Caiduh_Type( Get( slices, 846 ));
            rec.chaidi := Convert_Caidui_Type( Get( slices, 847 ));
            rec.nochaid := Convert_Nocaidu_Type( Get( slices, 848 ));
            rec.caidua := Convert_Caidua_Type( Get( slices, 849 ));
            rec.caidub := Convert_Caidub_Type( Get( slices, 850 ));
            rec.caiduc := Convert_Caiduc_Type( Get( slices, 851 ));
            rec.caidud := Convert_Caidud_Type( Get( slices, 852 ));
            rec.caidue := Convert_Caidue_Type( Get( slices, 853 ));
            rec.caiduf := Convert_Caiduf_Type( Get( slices, 854 ));
            rec.caidug := Convert_Caidug_Type( Get( slices, 855 ));
            rec.caiduh := Convert_Caiduh_Type( Get( slices, 856 ));
            rec.caidui := Convert_Caidui_Type( Get( slices, 857 ));
            rec.nocaidu := Convert_Nocaidu_Type( Get( slices, 858 ));
            rec.paaida := Convert_Paaida_Type( Get( slices, 859 ));
            rec.paaidb := Convert_Paaidb_Type( Get( slices, 860 ));
            rec.paaidc := Convert_Paaidc_Type( Get( slices, 861 ));
            rec.paaidd := Convert_Paaidd_Type( Get( slices, 862 ));
            rec.paaide := Convert_Paaide_Type( Get( slices, 863 ));
            rec.paaidf := Convert_Paaidf_Type( Get( slices, 864 ));
            rec.paaidg := Convert_Paaidg_Type( Get( slices, 865 ));
            rec.paaidh := Convert_Paaidh_Type( Get( slices, 866 ));
            rec.paaidi := Convert_Paaidi_Type( Get( slices, 867 ));
            rec.nopaaid := Convert_Nocaidu_Type( Get( slices, 868 ));
            rec.paidua := Convert_Caidua_Type( Get( slices, 869 ));
            rec.paidub := Convert_Caidub_Type( Get( slices, 870 ));
            rec.paiduc := Convert_Caiduc_Type( Get( slices, 871 ));
            rec.paidud := Convert_Paidud_Type( Get( slices, 872 ));
            rec.paidue := Convert_Caidue_Type( Get( slices, 873 ));
            rec.paiduf := Convert_Caiduf_Type( Get( slices, 874 ));
            rec.paidug := Convert_Caidug_Type( Get( slices, 875 ));
            rec.paiduh := Convert_Caiduh_Type( Get( slices, 876 ));
            rec.paidui := Convert_Caidui_Type( Get( slices, 877 ));
            rec.nopaidu := Convert_Nocaidu_Type( Get( slices, 878 ));
            rec.ivva := Convert_Ivva_Type( Get( slices, 879 ));
            rec.ivvb := Convert_Ivdb_Type( Get( slices, 880 ));
            rec.ivvc := Convert_Ivfc_Type( Get( slices, 881 ));
            rec.ivvd := Convert_Ivdd_Type( Get( slices, 882 ));
            rec.ivve := Convert_Ivee_Type( Get( slices, 883 ));
            rec.pf0h := Convert( slices, 884, ( -9, -8 ) );
            rec.pf0m := Convert( slices, 885, ( -9, -8 ) );
            rec.f101 := Convert_F101_Type( Get( slices, 886 ));
            rec.f102 := Convert_F102_Type( Get( slices, 887 ));
            rec.f103 := Convert_F103_Type( Get( slices, 888 ));
            rec.f104 := Convert( slices, 889, ( -9, -8, -7 ) );
            rec.f105 := Convert_F105_Type( Get( slices, 890 ));
            rec.f106 := Convert_F106_Type( Get( slices, 891 ));
            rec.f107 := Convert_F107_Type( Get( slices, 892 ));
            rec.f116 := Convert_F116_Type( Get( slices, 893 ));
            rec.f118 := Convert_F118_Type( Get( slices, 894 ));
            rec.f119 := Convert_F119_Type( Get( slices, 895 ));
            rec.f121 := Convert_F121_Type( Get( slices, 896 ));
            rec.f122 := Convert_F122_Type( Get( slices, 897 ));
            rec.f125 := Convert_F125_Type( Get( slices, 898 ));
            rec.f126 := Convert_F126_Type( Get( slices, 899 ));
            rec.f127 := Convert_F127_Type( Get( slices, 900 ));
            rec.f128 := Convert_F128_Type( Get( slices, 901 ));
            rec.f132 := Convert_F132_Type( Get( slices, 902 ));
            rec.f135 := Convert_F135_Type( Get( slices, 903 ));
            rec.f136 := Convert_F136_Type( Get( slices, 904 ));
            rec.f137 := Convert_F137_Type( Get( slices, 905 ));
            rec.f138 := Convert_F138_Type( Get( slices, 906 ));
            rec.f139 := Convert_F139_Type( Get( slices, 907 ));
            rec.f140 := Convert_F140_Type( Get( slices, 908 ));
            rec.f141 := Convert_F141_Type( Get( slices, 909 ));
            rec.f142 := Convert_F142_Type( Get( slices, 910 ));
            rec.f143 := Convert_F143_Type( Get( slices, 911 ));
            rec.f151 := Convert_F151_Type( Get( slices, 912 ));
            rec.f152 := Convert_F152_Type( Get( slices, 913 ));
            rec.f153 := Convert_F153_Type( Get( slices, 914 ));
            rec.f154 := Convert_F154_Type( Get( slices, 915 ));
            rec.f155 := Convert_F155_Type( Get( slices, 916 ));
            rec.f156 := Convert_F156_Type( Get( slices, 917 ));
            rec.f157 := Convert_F157_Type( Get( slices, 918 ));
            rec.f158 := Convert_F158_Type( Get( slices, 919 ));
            rec.f159 := Convert_F159_Type( Get( slices, 920 ));
            rec.rsrpen := Convert_Cbagef_Type( Get( slices, 921 ));
            rec.rpencr := Convert_Cbagef_Type( Get( slices, 922 ));
            rec.rdsben := Convert_Cbagef_Type( Get( slices, 923 ));
            rec.rdsbn16 := Convert_Yes_Or_Missing_Type( Get( slices, 924 ));
            rec.rdsbn18 := Convert_Yes_Or_Missing_Type( Get( slices, 925 ));
            rec.rdsbn19 := Convert_Yes_Or_Missing_Type( Get( slices, 926 ));
            rec.rdsbn21 := Convert_Yes_Or_Missing_Type( Get( slices, 927 ));
            rec.rdsbn22 := Convert_Yes_Or_Missing_Type( Get( slices, 928 ));
            rec.rdsbn25 := Convert_Yes_Or_Missing_Type( Get( slices, 929 ));
            rec.rdsbn26 := Convert_Yes_Or_Missing_Type( Get( slices, 930 ));
            rec.rdsbn27 := Convert_Yes_Or_Missing_Type( Get( slices, 931 ));
            rec.rdsbn28 := Convert_Yes_Or_Missing_Type( Get( slices, 932 ));
            rec.ris := Convert_Yes_Or_Missing_Type( Get( slices, 933 ));
            rec.rjsa := Convert_Yes_Or_Missing_Type( Get( slices, 934 ));
            rec.nisjsa := Convert_Nisjsa_Type( Get( slices, 935 ));
            rec.mach18 := Convert_Mach18_Type( Get( slices, 936 ));
            rec.rchben := Convert_Cbagef_Type( Get( slices, 937 ));
            rec.rhben := Convert_Cbagef_Type( Get( slices, 938 ));
            rec.nfhs1 := Convert_Nfhs1_Type( Get( slices, 939 ));
            rec.nfhs2 := Convert_Nfhs1_Type( Get( slices, 940 ));
            rec.nfhs3 := Convert_Nfhs1_Type( Get( slices, 941 ));
            rec.nfhs4 := Convert_Nfhs1_Type( Get( slices, 942 ));
            rec.nfhs5 := Convert_Nfhs1_Type( Get( slices, 943 ));
            rec.nfhs6 := Convert_Nfhs1_Type( Get( slices, 944 ));
            rec.nfhs7 := Convert_Nfhs1_Type( Get( slices, 945 ));
            rec.nfhs8 := Convert_Nfhs1_Type( Get( slices, 946 ));
            rec.nfhs9 := Convert_Nfhs1_Type( Get( slices, 947 ));
            rec.nfhs10 := Convert_Nfhs1_Type( Get( slices, 948 ));
            rec.nfhs11 := Convert_Nfhs1_Type( Get( slices, 949 ));
            rec.nfhs12 := Convert_Nfhs1_Type( Get( slices, 950 ));
            rec.nfh1 := Convert_Cbagef_Type( Get( slices, 951 ));
            rec.nfh2 := Convert_Cbagef_Type( Get( slices, 952 ));
            rec.nfh3 := Convert_Cbagef_Type( Get( slices, 953 ));
            rec.nfh4 := Convert_Cbagef_Type( Get( slices, 954 ));
            rec.nfh5 := Convert_Cbagef_Type( Get( slices, 955 ));
            rec.nfh6 := Convert_Cbagef_Type( Get( slices, 956 ));
            rec.nfh7 := Convert_Cbagef_Type( Get( slices, 957 ));
            rec.nfh8 := Convert_Cbagef_Type( Get( slices, 958 ));
            rec.nfh9 := Convert_Cbagef_Type( Get( slices, 959 ));
            rec.nfh10 := Convert_Cbagef_Type( Get( slices, 960 ));
            rec.nfh11 := Convert_Cbagef_Type( Get( slices, 961 ));
            rec.nfh12 := Convert_Cbagef_Type( Get( slices, 962 ));
            rec.nf1 := Convert( slices, 963, ( -9, -8, -7, -2, -1 ) );
            rec.nipens := Convert_Cbagef_Type( Get( slices, 964 ));
            rec.niserps := Convert_Cbagef_Type( Get( slices, 965 ));
            rec.fisit := Convert_Fisit_Type( Get( slices, 966 ));
            rec.fisitc := Convert( slices, 967, ( -9, -8, -7, -2, -1 ) );
            rec.fisity := Convert_Fisity_Type( Get( slices, 968 ));
            rec.fisitx := Convert( slices, 969, ( -9, -8, -7, -2, -1 ) );
            rec.fiyrdia := Convert( slices, 970, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.fiyrdb1 := Convert_Boolean_With_Missing( Get( slices, 971 ));
            rec.fiyrdb2 := Convert_Boolean_With_Missing( Get( slices, 972 ));
            rec.fiyrdb3 := Convert_Boolean_With_Missing( Get( slices, 973 ));
            rec.fiyrdb4 := Convert_Boolean_With_Missing( Get( slices, 974 ));
            rec.fiyrdb5 := Convert_Boolean_With_Missing( Get( slices, 975 ));
            rec.fiyrdb6 := Convert_Boolean_With_Missing( Get( slices, 976 ));
            rec.save := Convert_Aidpl1_Type( Get( slices, 977 ));
            rec.saved := Convert( slices, 978, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.savey1 := Convert_Savey1_Type( Get( slices, 979 ));
            rec.savey2 := Convert_Savey1_Type( Get( slices, 980 ));
            rec.savreg := Convert_Savreg_Type( Get( slices, 981 ));
            rec.savlt := Convert_Savlt_Type( Get( slices, 982 ));
            rec.pppen := Convert_Aidpl1_Type( Get( slices, 983 ));
            rec.pck1 := Convert( slices, 984, ( -9, -8, -7 ) );
            rec.penvrf := Convert_Hldsbl1_Type( Get( slices, 985 ));
            rec.pck2 := Convert( slices, 986, ( -9, -8, -7 ) );
            rec.penb4 := Convert_Penb4_Type( Get( slices, 987 ));
            rec.penb4y4 := Convert( slices, 988, ( -9, -8, -7, -2, -1 ) );
            rec.penb4v := Convert( slices, 989, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.penb4w := Convert( slices, 990, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.penyr4 := Convert( slices, 991, ( -9, -8, -7, -2, -1 ) );
            rec.penadd := Convert_Aidpl1_Type( Get( slices, 992 ));
            rec.penadv := Convert( slices, 993, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.penadw := Convert( slices, 994, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.penck1 := Convert_Penck1_Type( Get( slices, 995 ));
            rec.penmex := Convert_Bscon_Type( Get( slices, 996 ));
            rec.rf2ck := Convert_Rf2ck_Type( Get( slices, 997 ));
            rec.pppex := Convert_Bscon_Type( Get( slices, 998 ));
            rec.pppexm := Convert_Bscon_Type( Get( slices, 999 ));
            rec.stakeh := Convert_Bscon_Type( Get( slices, 1000 ));
            rec.sppen := Convert_Bscon_Type( Get( slices, 1001 ));
            rec.penck2 := Convert_Penck2_Type( Get( slices, 1002 ));
            rec.ynopen1 := Convert_Ynopen1_Type( Get( slices, 1003 ));
            rec.ynopen2 := Convert_Ynopen2_Type( Get( slices, 1004 ));
            rec.rtfnda := Convert_Hlcki_Type( Get( slices, 1005 ));
            rec.rtfndb := Convert_Hlcki_Type( Get( slices, 1006 ));
            rec.rtfndc := Convert_Hlcki_Type( Get( slices, 1007 ));
            rec.rtfndd := Convert_Hlcki_Type( Get( slices, 1008 ));
            rec.rtfnde := Convert_Hlcki_Type( Get( slices, 1009 ));
            rec.rtfndf := Convert_Hlcki_Type( Get( slices, 1010 ));
            rec.rtfndg := Convert_Hlcki_Type( Get( slices, 1011 ));
            rec.rtfndh := Convert_Hlcki_Type( Get( slices, 1012 ));
            rec.rtfndi := Convert_Hlcki_Type( Get( slices, 1013 ));
            rec.rtfndj := Convert_Hlcki_Type( Get( slices, 1014 ));
            rec.rtfndk := Convert_Hlcki_Type( Get( slices, 1015 ));
            rec.rtfndl := Convert_Hlcki_Type( Get( slices, 1016 ));
            rec.rtfndm := Convert_Hlcki_Type( Get( slices, 1017 ));
            rec.rtfndn := Convert_Hlcki_Type( Get( slices, 1018 ));
            rec.rtfndo := Convert_Hlcki_Type( Get( slices, 1019 ));
            rec.rtfndp := Convert_Cd10new_Type( Get( slices, 1020 ));
            rec.rf6ck := Convert_Cjsck2_Type( Get( slices, 1021 ));
            rec.retexp := Convert_Retexp_Type( Get( slices, 1022 ));
            rec.retamt := Convert_Retamt_Type( Get( slices, 1023 ));
            rec.retsuf := Convert_Retsuf_Type( Get( slices, 1024 ));
            rec.windf := Convert_Debt_Type( Get( slices, 1025 ));
            rec.windfa := Convert_Windfa_Type( Get( slices, 1026 ));
            rec.windfay := Convert( slices, 1027, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windfb := Convert_Windfb_Type( Get( slices, 1028 ));
            rec.windfby := Convert( slices, 1029, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windfc := Convert_Windfc_Type( Get( slices, 1030 ));
            rec.windfcy := Convert( slices, 1031, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windfd := Convert_Windfd_Type( Get( slices, 1032 ));
            rec.windfdy := Convert( slices, 1033, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windff := Convert_Windff_Type( Get( slices, 1034 ));
            rec.windffy := Convert( slices, 1035, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windfg := Convert_Windfg_Type( Get( slices, 1036 ));
            rec.windfgy := Convert( slices, 1037, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windfh := Convert_Nisjsa_Type( Get( slices, 1038 ));
            rec.windfhy := Convert( slices, 1039, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.xpmeal := Convert_Xpleis_Type( Get( slices, 1040 ));
            rec.xpleis := Convert_Xpleis_Type( Get( slices, 1041 ));
            rec.ftexhh := Convert_Aidpl1_Type( Get( slices, 1042 ));
            rec.ftexa := Convert_Ftexa_Type( Get( slices, 1043 ));
            rec.ftexa1 := Convert_Ftexa1_Type( Get( slices, 1044 ));
            rec.ftexa2 := Convert_Ftexa2_Type( Get( slices, 1045 ));
            rec.ftexa3 := Convert_Ftexa3_Type( Get( slices, 1046 ));
            rec.ftexa4 := Convert_Ftexa4_Type( Get( slices, 1047 ));
            rec.ftexa5 := Convert_Ftexa5_Type( Get( slices, 1048 ));
            rec.ftexa6 := Convert_Ftexa6_Type( Get( slices, 1049 ));
            rec.ftexav := Convert( slices, 1050, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ftexaw := Convert( slices, 1051, ( -9.0, -8.0, -7.0, -5.0, -3.0, -2.0, -1.0 ) );
            rec.ftexb := Convert_Ftexb_Type( Get( slices, 1052 ));
            rec.ftexb1 := Convert_Ftexa1_Type( Get( slices, 1053 ));
            rec.ftexb2 := Convert_Ftexa2_Type( Get( slices, 1054 ));
            rec.ftexb3 := Convert_Ftexa3_Type( Get( slices, 1055 ));
            rec.ftexb4 := Convert_Ftexa4_Type( Get( slices, 1056 ));
            rec.ftexb5 := Convert_Ftexa5_Type( Get( slices, 1057 ));
            rec.ftexb6 := Convert_Ftexa6_Type( Get( slices, 1058 ));
            rec.ftexbv := Convert( slices, 1059, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ftexbw := Convert( slices, 1060, ( -9.0, -8.0, -7.0, -5.0, -3.0, -2.0, -1.0 ) );
            rec.ftexc := Convert_Ftexc_Type( Get( slices, 1061 ));
            rec.ftexc1 := Convert_Ftexa1_Type( Get( slices, 1062 ));
            rec.ftexc2 := Convert_Ftexa2_Type( Get( slices, 1063 ));
            rec.ftexc3 := Convert_Ftexa3_Type( Get( slices, 1064 ));
            rec.ftexc4 := Convert_Ftexa4_Type( Get( slices, 1065 ));
            rec.ftexc5 := Convert_Ftexa5_Type( Get( slices, 1066 ));
            rec.ftexc6 := Convert_Ftexa6_Type( Get( slices, 1067 ));
            rec.ftexcv := Convert( slices, 1068, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ftexcw := Convert( slices, 1069, ( -9.0, -8.0, -7.0, -5.0, -3.0, -2.0, -1.0 ) );
            rec.hubuys := Convert_Hubuys_Type( Get( slices, 1070 ));
            rec.hufrys := Convert_Hubuys_Type( Get( slices, 1071 ));
            rec.humops := Convert_Hubuys_Type( Get( slices, 1072 ));
            rec.huiron := Convert_Hubuys_Type( Get( slices, 1073 ));
            rec.hhch12 := Convert_Hhch12_Type( Get( slices, 1074 ));
            rec.husits := Convert_Husits_Type( Get( slices, 1075 ));
            rec.howlng := Convert( slices, 1076, ( -9, -8, -7, -3, -2, -1 ) );
            rec.caruse := Convert_Caruse_Type( Get( slices, 1077 ));
            rec.mobuse := Convert_Mobuse_Type( Get( slices, 1078 ));
            rec.ageadv := Convert_Ageadv_Type( Get( slices, 1079 ));
            rec.agead1 := Convert_Agead1_Type( Get( slices, 1080 ));
            rec.agead2 := Convert_Agead1_Type( Get( slices, 1081 ));
            rec.agead3 := Convert_Agead1_Type( Get( slices, 1082 ));
            rec.agead4 := Convert_Agead1_Type( Get( slices, 1083 ));
            rec.ivfa := Convert_Ivda_Type( Get( slices, 1084 ));
            rec.ivfb := Convert_Ivdb_Type( Get( slices, 1085 ));
            rec.ivfc := Convert_Ivfc_Type( Get( slices, 1086 ));
            rec.ivfd := Convert_Ivdd_Type( Get( slices, 1087 ));
            rec.ivfe := Convert_Ivee_Type( Get( slices, 1088 ));
            rec.ivfoih := Convert( slices, 1089, ( -9, -8 ) );
            rec.ivfoim := Convert( slices, 1090, ( -9, -8 ) );
            rec.ivsc := Convert_Ivsc_Type( Get( slices, 1091 ));
            rec.iv1 := Convert_Hhch12_Type( Get( slices, 1092 ));
            rec.iv2 := Convert_Iv2_Type( Get( slices, 1093 ));
            rec.iv4 := Convert_Iv4_Type( Get( slices, 1094 ));
            rec.iv5 := Convert_Iv5_Type( Get( slices, 1095 ));
            rec.iv5aa := Convert_Iv5aa_Type( Get( slices, 1096 ));
            rec.iv5ab := Convert_Iv5ab_Type( Get( slices, 1097 ));
            rec.iv5ac := Convert_Iv5ac_Type( Get( slices, 1098 ));
            rec.iv6a := Convert_Hhch12_Type( Get( slices, 1099 ));
            rec.iv6b := Convert_Hhch12_Type( Get( slices, 1100 ));
            rec.iv6c := Convert_Hhch12_Type( Get( slices, 1101 ));
            rec.iv6d := Convert_Hhch12_Type( Get( slices, 1102 ));
            rec.iv6e := Convert_Hhch12_Type( Get( slices, 1103 ));
            rec.iv6f := Convert_Hhch12_Type( Get( slices, 1104 ));
            rec.iv7 := Convert( slices, 1105, ( -9, -8, -7 ) );
            rec.iv9 := Convert_Aglt20_Type( Get( slices, 1106 ));
            rec.iv10no := Convert_Iv10no_Type( Get( slices, 1107 ));
            rec.iv10a := Convert_Yes_Or_Missing_Type( Get( slices, 1108 ));
            rec.iv10b := Convert_Yes_Or_Missing_Type( Get( slices, 1109 ));
            rec.iv10c := Convert_Yes_Or_Missing_Type( Get( slices, 1110 ));
            rec.iv10d := Convert_Yes_Or_Missing_Type( Get( slices, 1111 ));
            rec.iv10e := Convert_Yes_Or_Missing_Type( Get( slices, 1112 ));
            rec.iv10f := Convert_Yes_Or_Missing_Type( Get( slices, 1113 ));
            rec.iv10g := Convert_Yes_Or_Missing_Type( Get( slices, 1114 ));
            rec.iv10h := Convert_Yes_Or_Missing_Type( Get( slices, 1115 ));
            rec.iv10i := Convert_Yes_Or_Missing_Type( Get( slices, 1116 ));
            rec.iv10j := Convert_Yes_Or_Missing_Type( Get( slices, 1117 ));
            rec.iv10k := Convert_Yes_Or_Missing_Type( Get( slices, 1118 ));
            rec.iv10l := Convert_Yes_Or_Missing_Type( Get( slices, 1119 ));
            rec.ghqa := Convert_Ghqa_Type( Get( slices, 1120 ));
            rec.ghqb := Convert_Ghqb_Type( Get( slices, 1121 ));
            rec.ghqc := Convert_Ghqc_Type( Get( slices, 1122 ));
            rec.ghqd := Convert_Ghqc_Type( Get( slices, 1123 ));
            rec.ghqe := Convert_Ghqe_Type( Get( slices, 1124 ));
            rec.ghqf := Convert_Ghqe_Type( Get( slices, 1125 ));
            rec.ghqg := Convert_Ghqc_Type( Get( slices, 1126 ));
            rec.ghqh := Convert_Ghqc_Type( Get( slices, 1127 ));
            rec.ghqi := Convert_Ghqb_Type( Get( slices, 1128 ));
            rec.ghqj := Convert_Ghqe_Type( Get( slices, 1129 ));
            rec.ghqk := Convert_Ghqe_Type( Get( slices, 1130 ));
            rec.ghql := Convert_Ghqc_Type( Get( slices, 1131 ));
            rec.opfamo := Convert_Opfamo_Type( Get( slices, 1132 ));
            rec.opfaml := Convert_Opfamj_Type( Get( slices, 1133 ));
            rec.opfamp := Convert_Opfamo_Type( Get( slices, 1134 ));
            rec.opfamq := Convert_Opfamq_Type( Get( slices, 1135 ));
            rec.opfamk := Convert_Opfamj_Type( Get( slices, 1136 ));
            rec.opfamr := Convert_Opfamr_Type( Get( slices, 1137 ));
            rec.lfsat1 := Convert_Lfsat1_Type( Get( slices, 1138 ));
            rec.lfsat2 := Convert_Lfsat1_Type( Get( slices, 1139 ));
            rec.lfsat3 := Convert_Lfsat1_Type( Get( slices, 1140 ));
            rec.lfsat4 := Convert_Lfsat1_Type( Get( slices, 1141 ));
            rec.lfsat5 := Convert_Lfsat1_Type( Get( slices, 1142 ));
            rec.lfsat6 := Convert_Lfsat1_Type( Get( slices, 1143 ));
            rec.lfsat7 := Convert_Lfsat1_Type( Get( slices, 1144 ));
            rec.lfsat8 := Convert_Lfsat1_Type( Get( slices, 1145 ));
            rec.lfsato := Convert_Lfsat1_Type( Get( slices, 1146 ));
            rec.lfsatl := Convert( slices, 1147, ( -9, -8, -7, -2, -1 ) );
            rec.satinv := Convert_Satinv_Type( Get( slices, 1148 ));
            rec.qlfa := Convert_Qlfa_Type( Get( slices, 1149 ));
            rec.qlfb := Convert_Qlfa_Type( Get( slices, 1150 ));
            rec.qlfc := Convert_Qlfa_Type( Get( slices, 1151 ));
            rec.qlfd := Convert_Qlfa_Type( Get( slices, 1152 ));
            rec.qlfe := Convert_Qlfa_Type( Get( slices, 1153 ));
            rec.qlff := Convert_Qlfa_Type( Get( slices, 1154 ));
            rec.qlfg := Convert_Qlfa_Type( Get( slices, 1155 ));
            rec.qlfh := Convert_Qlfa_Type( Get( slices, 1156 ));
            rec.qlfi := Convert_Qlfa_Type( Get( slices, 1157 ));
            rec.qlfj := Convert_Qlfa_Type( Get( slices, 1158 ));
            rec.qlfk := Convert_Qlfa_Type( Get( slices, 1159 ));
            rec.qlfl := Convert_Qlfa_Type( Get( slices, 1160 ));
            rec.qlfm := Convert_Qlfa_Type( Get( slices, 1161 ));
            rec.qlfn := Convert_Qlfa_Type( Get( slices, 1162 ));
            rec.qlfo := Convert_Qlfa_Type( Get( slices, 1163 ));
            rec.qlfp := Convert_Qlfa_Type( Get( slices, 1164 ));
            rec.qlfq := Convert_Qlfa_Type( Get( slices, 1165 ));
            rec.qlfr := Convert_Qlfa_Type( Get( slices, 1166 ));
            rec.qlfs := Convert_Qlfa_Type( Get( slices, 1167 ));
            rec.netsx1 := Convert_Netsx1_Type( Get( slices, 1168 ));
            rec.netsx2 := Convert_Netsx1_Type( Get( slices, 1169 ));
            rec.netsx3 := Convert_Netsx1_Type( Get( slices, 1170 ));
            rec.net1wr := Convert_Aidpl1_Type( Get( slices, 1171 ));
            rec.net2wr := Convert_Aidpl1_Type( Get( slices, 1172 ));
            rec.net3wr := Convert_Aidpl1_Type( Get( slices, 1173 ));
            rec.net1rl := Convert_Net1rl_Type( Get( slices, 1174 ));
            rec.net2rl := Convert_Net1rl_Type( Get( slices, 1175 ));
            rec.net3rl := Convert_Net1rl_Type( Get( slices, 1176 ));
            rec.net1ag := Convert( slices, 1177, ( -9, -8, -7, -2, -1 ) );
            rec.net2ag := Convert( slices, 1178, ( -9, -8, -7, -2, -1 ) );
            rec.net3ag := Convert( slices, 1179, ( -9, -8, -7, -2, -1 ) );
            rec.net1kn := Convert_Net1kn_Type( Get( slices, 1180 ));
            rec.net2kn := Convert_Net1kn_Type( Get( slices, 1181 ));
            rec.net3kn := Convert_Net1kn_Type( Get( slices, 1182 ));
            rec.net1ph := Convert_Net1ph_Type( Get( slices, 1183 ));
            rec.net2ph := Convert_Net1ph_Type( Get( slices, 1184 ));
            rec.net3ph := Convert_Net1ph_Type( Get( slices, 1185 ));
            rec.net1lv := Convert_Net1lv_Type( Get( slices, 1186 ));
            rec.net2lv := Convert_Net1lv_Type( Get( slices, 1187 ));
            rec.net3lv := Convert_Net1lv_Type( Get( slices, 1188 ));
            rec.net1jb := Convert_Net1jb_Type( Get( slices, 1189 ));
            rec.net2jb := Convert_Net1jb_Type( Get( slices, 1190 ));
            rec.net3jb := Convert_Net1jb_Type( Get( slices, 1191 ));
            rec.net1et := Convert_Net1et_Type( Get( slices, 1192 ));
            rec.net2et := Convert_Net1et_Type( Get( slices, 1193 ));
            rec.net3et := Convert_Net1et_Type( Get( slices, 1194 ));
            rec.netsoc := Convert( slices, 1195, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.prrs2i := Convert_Prrs2i_Type( Get( slices, 1196 ));
            rec.pripn := Convert( slices, 1197, ( -9, -8 ) );
            rec.prwhy := Convert_Prwhy_Type( Get( slices, 1198 ));
            rec.pplevr := Convert_Plever_Type( Get( slices, 1199 ));
            rec.presbgm := Convert_Presbgm_Type( Get( slices, 1200 ));
            rec.presby4 := Convert( slices, 1201, ( -9, -8, -7, -2, -1 ) );
            rec.presly := Convert_Presly_Type( Get( slices, 1202 ));
            rec.prfehq := Convert_Prfehq_Type( Get( slices, 1203 ));
            rec.prsehq := Convert_Prsehq_Type( Get( slices, 1204 ));
            rec.prjbft := Convert_Prjbft_Type( Get( slices, 1205 ));
            rec.prjbbgm := Convert_Presbgm_Type( Get( slices, 1206 ));
            rec.prjbby4 := Convert( slices, 1207, ( -9, -8, -7, -2, -1 ) );
            rec.prjbly := Convert_Prjbly_Type( Get( slices, 1208 ));
            rec.prearn := Convert_Prearn_Type( Get( slices, 1209 ));
            rec.prf101 := Convert_Prf101_Type( Get( slices, 1210 ));
            rec.prf102 := Convert_Prf102_Type( Get( slices, 1211 ));
            rec.prf116 := Convert_Prf116_Type( Get( slices, 1212 ));
            rec.prf131 := Convert_Prf131_Type( Get( slices, 1213 ));
            rec.prf135 := Convert_Prf135_Type( Get( slices, 1214 ));
            rec.prf137 := Convert_Prf137_Type( Get( slices, 1215 ));
            rec.prf139 := Convert_Prf139_Type( Get( slices, 1216 ));
            rec.prf125 := Convert_Prf125_Type( Get( slices, 1217 ));
            rec.prf141 := Convert_Prf141_Type( Get( slices, 1218 ));
            rec.prf143 := Convert_Prf143_Type( Get( slices, 1219 ));
            rec.prf107 := Convert_Prf107_Type( Get( slices, 1220 ));
            rec.prfirn := Convert_Prfirn_Type( Get( slices, 1221 ));
            rec.prfitb := Convert_Prfitb_Type( Get( slices, 1222 ));
            rec.ivpa := Convert_Ivpa_Type( Get( slices, 1223 ));
            rec.ivpb := Convert_Ivpb_Type( Get( slices, 1224 ));
            rec.ivpc := Convert_Ivpc_Type( Get( slices, 1225 ));
            rec.ivpd := Convert_Ivpd_Type( Get( slices, 1226 ));
            rec.ivpe := Convert_Ivpe_Type( Get( slices, 1227 ));
            rec.thrpop := Convert_Bscon_Type( Get( slices, 1228 ));
            rec.thhrpw := Convert_Bscon_Type( Get( slices, 1229 ));
            rec.telqly := Convert_Bscon_Type( Get( slices, 1230 ));
            rec.tlhqly := Convert_Tlhqly_Type( Get( slices, 1231 ));
            rec.telqal := Convert_Bscon_Type( Get( slices, 1232 ));
            rec.telhtq := Convert_Telhtq_Type( Get( slices, 1233 ));
            rec.trpen := Convert_Bscon_Type( Get( slices, 1234 ));
            rec.trben1 := Convert_Bscon_Type( Get( slices, 1235 ));
            rec.trben2 := Convert_Bscon_Type( Get( slices, 1236 ));
            rec.tropay := Convert_Bscon_Type( Get( slices, 1237 ));
            rec.pid := Convert( slices, 1238 );
            rec.iviolw := Convert_Iviolw_Type( Get( slices, 1239 ));
            rec.hhmem := Convert_Hhmem_Type( Get( slices, 1240 ));
            rec.newhy := Convert_Newhy_Type( Get( slices, 1241 ));
            rec.nemnjn := Convert_Nemnjn_Type( Get( slices, 1242 ));
            rec.neyrjn4 := Convert( slices, 1243, ( -9, -8, -7, -2, -1 ) );
            rec.ivfio := Convert_Ivfio_Type( Get( slices, 1244 ));
            rec.iodc := Convert_Iodc_Type( Get( slices, 1245 ));
            rec.memorig := Convert_Memorig_Type( Get( slices, 1246 ));
            rec.hgr2r := Convert_Hgr2r_Type( Get( slices, 1247 ));
            rec.hgsex := Convert_Hgsex_Type( Get( slices, 1248 ));
            rec.hgbm := Convert_Hgbm_Type( Get( slices, 1249 ));
            rec.hgby := Convert( slices, 1250, ( -2, -1 ) );
            rec.mastat := Convert_Mastat_Type( Get( slices, 1251 ));
            rec.hgspn := Convert( slices, 1252, ( -9, -8, -2, -1 ) );
            rec.hgemp := Convert_Hgemp_Type( Get( slices, 1253 ));
            rec.hgfno := Convert( slices, 1254, ( -9, -8, -2, -1 ) );
            rec.hgmno := Convert( slices, 1255, ( -9, -8, -2, -1 ) );
            rec.hgra := Convert( slices, 1256, ( -9, -8, -2, -1 ) );
            rec.age := Convert( slices, 1257, ( -9, -8 ) );
            rec.age12 := Convert( slices, 1258, ( -9, -8 ) );
            rec.butype := Convert_Butype_Type( Get( slices, 1259 ));
            rec.buno := Convert( slices, 1260, ( -9, -8 ) );
            rec.nchild := Convert( slices, 1261, ( -9, -8 ) );
            rec.hoh := Convert_Hoh_Type( Get( slices, 1262 ));
            rec.rach16 := Convert_Hhch12_Type( Get( slices, 1263 ));
            rec.sampst := Convert_Sampst_Type( Get( slices, 1264 ));
            rec.movest := Convert_Movest_Type( Get( slices, 1265 ));
            rec.region := Convert_Region_Type( Get( slices, 1266 ));
            rec.hhsize := Convert( slices, 1267, ( -9, -8 ) );
            rec.hhtype := Convert_Hhtype_Type( Get( slices, 1268 ));
            rec.tenure := Convert_Tenure_Type( Get( slices, 1269 ));
            rec.qfedhi := Convert_Qfedhi_Type( Get( slices, 1270 ));
            rec.qfvoc := Convert_Qfvoc_Type( Get( slices, 1271 ));
            rec.qfachi := Convert_Qfachi_Type( Get( slices, 1272 ));
            rec.jbft := Convert_Jbft_Type( Get( slices, 1273 ));
            rec.payg := Convert( slices, 1274, ( -9.0, -8.0, -7.0 ) );
            rec.payn := Convert( slices, 1275, ( -9.0, -8.0, -7.0 ) );
            rec.paygu := Convert( slices, 1276, ( -9.0, -8.0, -7.0 ) );
            rec.paynu := Convert( slices, 1277, ( -9.0, -8.0, -7.0 ) );
            rec.paygty := Convert( slices, 1278, ( -9.0, -8.0, -7.0 ) );
            rec.paygly := Convert( slices, 1279, ( -9.0, -8.0, -7.0 ) );
            rec.paynty := Convert( slices, 1280, ( -9.0, -8.0, -7.0 ) );
            rec.paynly := Convert( slices, 1281, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jsprof := Convert( slices, 1282, ( -9.0, -8.0, -7.0 ) );
            rec.jsloss := Convert( slices, 1283, ( -9.0, -8.0, -7.0 ) );
            rec.jspayg := Convert( slices, 1284, ( -9.0, -8.0, -7.0 ) );
            rec.cjsten := Convert( slices, 1285, ( -9.0, -8.0, -7.0 ) );
            rec.cjswk9 := Convert( slices, 1286, ( -9.0, -8.0, -7.0 ) );
            rec.jlid := Convert_Jlid_Type( Get( slices, 1287 ));
            rec.jlyid := Convert_Jlyid_Type( Get( slices, 1288 ));
            rec.jtyid := Convert_Jtyid_Type( Get( slices, 1289 ));
            rec.jbseg := Convert_Jbseg_Type( Get( slices, 1290 ));
            rec.jbgold := Convert( slices, 1291, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbrgsc := Convert_Jbrgsc_Type( Get( slices, 1292 ));
            rec.jbisco := Convert( slices, 1293 );
            rec.jbcssm := Convert( slices, 1294, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbcssf := Convert( slices, 1295, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbhgs := Convert( slices, 1296, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbsec := Convert_Jbsec_Type( Get( slices, 1297 ));
            rec.njbwks := Convert( slices, 1298, ( -9.0, -8.0, -7.0 ) );
            rec.njuwks := Convert( slices, 1299, ( -9.0, -8.0, -7.0 ) );
            rec.njiwks := Convert( slices, 1300, ( -9.0, -8.0, -7.0 ) );
            rec.njbnew := Convert( slices, 1301, ( -9, -8, -7 ) );
            rec.njbsp := Convert( slices, 1302, ( -9, -8, -7 ) );
            rec.njusp := Convert( slices, 1303, ( -9, -8, -7 ) );
            rec.njisp := Convert( slices, 1304, ( -9, -8, -7 ) );
            rec.jbstatl := Convert( slices, 1305, ( -9, -8, -7, -2, -1 ) );
            rec.jbstatt := Convert( slices, 1306, ( -9, -8, -7, -2, -1 ) );
            rec.jbsocly := Convert( slices, 1307, ( -9, -8, -7 ) );
            rec.jlseg := Convert_Jlseg_Type( Get( slices, 1308 ));
            rec.jlgold := Convert( slices, 1309, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlrgsc := Convert_Jlrgsc_Type( Get( slices, 1310 ));
            rec.jlisco := Convert( slices, 1311 );
            rec.jlcssm := Convert( slices, 1312, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlcssf := Convert( slices, 1313, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlhgs := Convert( slices, 1314, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlsec := Convert_Jlsec_Type( Get( slices, 1315 ));
            rec.vote := Convert_Vote_Type( Get( slices, 1316 ));
            rec.fiyrdic := Convert( slices, 1317, ( -9.0, -8.0, -7.0 ) );
            rec.fimnp := Convert( slices, 1318, ( -9.0, -8.0, -7.0 ) );
            rec.fimnb := Convert( slices, 1319, ( -9.0, -8.0, -7.0 ) );
            rec.fimni := Convert( slices, 1320, ( -9.0, -8.0, -7.0 ) );
            rec.fimnt := Convert( slices, 1321, ( -9.0, -8.0, -7.0 ) );
            rec.fimnl := Convert( slices, 1322, ( -9.0, -8.0, -7.0 ) );
            rec.fimnnl := Convert( slices, 1323, ( -9.0, -8.0, -7.0 ) );
            rec.fimn := Convert( slices, 1324, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrl := Convert( slices, 1325, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrnl := Convert( slices, 1326, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrp := Convert( slices, 1327, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrb := Convert( slices, 1328, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrt := Convert( slices, 1329, ( -9.0, -8.0, -7.0 ) );
            rec.fiyri := Convert( slices, 1330, ( -9.0, -8.0, -7.0 ) );
            rec.fiyr := Convert( slices, 1331, ( -9.0, -8.0, -7.0 ) );
            rec.fihhmn := Convert( slices, 1332, ( -9.0, -8.0, -7.0 ) );
            rec.hlghq1 := Convert( slices, 1333, ( -9, -8, -7 ) );
            rec.hlghq2 := Convert( slices, 1334, ( -9, -8, -7 ) );
            rec.spjb := Convert_Spjb_Type( Get( slices, 1335 ));
            rec.spsoc := Convert( slices, 1336, ( -9.0, -8.0 ) );
            rec.spjbhr := Convert( slices, 1337, ( -9, -8, -7 ) );
            rec.spjbot := Convert( slices, 1338, ( -9, -8, -7 ) );
            rec.sppayg := Convert( slices, 1339, ( -9.0, -8.0, -7.0 ) );
            rec.spjbyr := Convert( slices, 1340, ( -9, -8, -7 ) );
            rec.lrwght := Convert( slices, 1341 );
            rec.lewght := Convert( slices, 1342 );
            rec.xrwght := Convert( slices, 1343 );
            rec.xewght := Convert( slices, 1344 );
            rec.j2payi := Convert( slices, 1345, ( -9, -8, -7, -3, -2, -1 ) );
            rec.fiyrdii := Convert_Fiyrdii_Type( Get( slices, 1346 ));
            rec.prearni := Convert( slices, 1347, ( -9, -8, -2, -1 ) );
            rec.prfitbi := Convert_Prfitbi_Type( Get( slices, 1348 ));
            rec.paygui := Convert_Fimnbi_Type( Get( slices, 1349 ));
            rec.paynui := Convert_Fimnbi_Type( Get( slices, 1350 ));
            rec.paygti := Convert_Fimnbi_Type( Get( slices, 1351 ));
            rec.paygli := Convert_Fimnbi_Type( Get( slices, 1352 ));
            rec.paynti := Convert_Fimnbi_Type( Get( slices, 1353 ));
            rec.paynli := Convert_Fimnbi_Type( Get( slices, 1354 ));
            rec.jsprofi := Convert_Fimnbi_Type( Get( slices, 1355 ));
            rec.jspaygi := Convert_Fimnbi_Type( Get( slices, 1356 ));
            rec.fimnpi := Convert_Fimnbi_Type( Get( slices, 1357 ));
            rec.fimnbi := Convert_Fimnbi_Type( Get( slices, 1358 ));
            rec.fimnii := Convert_Fimnii_Type( Get( slices, 1359 ));
            rec.fimnti := Convert_Fimnii_Type( Get( slices, 1360 ));
            rec.fimnnli := Convert_Fimnbi_Type( Get( slices, 1361 ));
            rec.fimnli := Convert_Fimnbi_Type( Get( slices, 1362 ));
            rec.fimnthi := Convert_Fimnii_Type( Get( slices, 1363 ));
            rec.fiyrli := Convert_Fimnbi_Type( Get( slices, 1364 ));
            rec.fiyrnli := Convert_Fimnbi_Type( Get( slices, 1365 ));
            rec.fiyrpi := Convert_Fimnii_Type( Get( slices, 1366 ));
            rec.fiyrbi := Convert_Fimnbi_Type( Get( slices, 1367 ));
            rec.fiyrti := Convert_Fimnbi_Type( Get( slices, 1368 ));
            rec.fiyrii := Convert_Fimnbi_Type( Get( slices, 1369 ));
            rec.fiyeari := Convert_Fimnbi_Type( Get( slices, 1370 ));
            rec.sppaygi := Convert_Prfitbi_Type( Get( slices, 1371 ));
            rec.fihhmni := Convert_Fihhmni_Type( Get( slices, 1372 ));
            rec.mrjend := Convert( slices, 1373, ( -9, -8, -7, -3, -2, -1 ) );
            rec.mrjsoc := Convert( slices, 1374, ( -9, -8, -7, -3 ) );
            rec.mrjsic := Convert( slices, 1375, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjsic9 := Convert( slices, 1376, ( -9, -8, -2, -1 ) );
            rec.mrjsemp := Convert_Mrjsemp_Type( Get( slices, 1377 ));
            rec.mrjboss := Convert_Mrjboss_Type( Get( slices, 1378 ));
            rec.mrjmngr := Convert_Mrjmngr_Type( Get( slices, 1379 ));
            rec.mrjsize := Convert_Mrjsize_Type( Get( slices, 1380 ));
            rec.mrjseg := Convert_Maseg_Type( Get( slices, 1381 ));
            rec.mrjgold := Convert( slices, 1382, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjrgsc := Convert_Margsc_Type( Get( slices, 1383 ));
            rec.mrjisco := Convert( slices, 1384 );
            rec.mrjcssm := Convert( slices, 1385, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjcssf := Convert( slices, 1386, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjhgs := Convert( slices, 1387, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjsec := Convert_J1sec_Type( Get( slices, 1388 ));
            rec.paseg := Convert_Maseg_Type( Get( slices, 1389 ));
            rec.pagold := Convert( slices, 1390, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.pargsc := Convert_Margsc_Type( Get( slices, 1391 ));
            rec.paisco := Convert( slices, 1392 );
            rec.pacssm := Convert( slices, 1393, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.pacssf := Convert( slices, 1394, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.pahgs := Convert( slices, 1395, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.pasec := Convert_J1sec_Type( Get( slices, 1396 ));
            rec.maseg := Convert_Maseg_Type( Get( slices, 1397 ));
            rec.magold := Convert( slices, 1398, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.margsc := Convert_Margsc_Type( Get( slices, 1399 ));
            rec.maisco := Convert( slices, 1400 );
            rec.macssm := Convert( slices, 1401, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.macssf := Convert( slices, 1402, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mahgs := Convert( slices, 1403, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.masec := Convert_J1sec_Type( Get( slices, 1404 ));
            rec.j1seg := Convert_J1seg_Type( Get( slices, 1405 ));
            rec.j1gold := Convert( slices, 1406, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.j1rgsc := Convert_J1rgsc_Type( Get( slices, 1407 ));
            rec.j1isco := Convert( slices, 1408 );
            rec.j1cssm := Convert( slices, 1409, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.j1cssf := Convert( slices, 1410, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.j1hgs := Convert( slices, 1411, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.j1sec := Convert_J1sec_Type( Get( slices, 1412 ));
            rec.fimnsel := Convert_Fimnsel_Type( Get( slices, 1413 ));
            rec.xrwtuk1 := Convert( slices, 1414 );
            rec.xewtuk1 := Convert( slices, 1415 );
            rec.xrwtuk2 := Convert( slices, 1416 );
            rec.xewtuk2 := Convert( slices, 1417 );
            rec.lrwtsw1 := Convert( slices, 1418 );
            rec.lewtsw1 := Convert( slices, 1419 );
            rec.lrwtsw2 := Convert( slices, 1420 );
            rec.lewtsw2 := Convert( slices, 1421 );
            rec.lrwtuk1 := Convert( slices, 1422 );
            rec.lewtuk1 := Convert( slices, 1423 );
            rec.lrwtuk2 := Convert( slices, 1424 );
            rec.lewtuk2 := Convert( slices, 1425 );
            rec.sppid := Convert( slices, 1426 );
            rec.fpid := Convert( slices, 1427 );
            rec.mpid := Convert( slices, 1428 );
            rec.jbbgd := Convert( slices, 1429, ( -9, -8, -7, -2, -1 ) );
            rec.jbbgm := Convert_Cjsbgm_Type( Get( slices, 1430 ));
            rec.jbbgy4 := Convert( slices, 1431, ( -9, -8, -7, -2, -1 ) );
            rec.jbbgly := Convert_Jbbgly_Type( Get( slices, 1432 ));
            rec.jsbgd := Convert( slices, 1433, ( -9, -8, -7, -2, -1 ) );
            rec.jsbgm := Convert_Cjsbgm_Type( Get( slices, 1434 ));
            rec.jsbgy4 := Convert( slices, 1435, ( -9, -8, -7, -2, -1 ) );
            rec.jsbgly := Convert_Jsbgly_Type( Get( slices, 1436 ));
            rec.distmov := Convert( slices, 1437, ( -9.0, -8.0, -7.0 ) );
            rec.region2 := Convert_Region2_Type( Get( slices, 1438 ));
            rec.isced := Convert_Isced_Type( Get( slices, 1439 ));
            rec.casmin := Convert_Casmin_Type( Get( slices, 1440 ));
            rec.jbiscon := Convert( slices, 1441, ( -9, -8, -7, -2, -1 ) );
            rec.jliscon := Convert( slices, 1442, ( -9, -8, -7, -2, -1 ) );
            rec.mrjiscn := Convert( slices, 1443, ( -9, -8, -7, -2, -1 ) );
            rec.maiscon := Convert( slices, 1444, ( -9, -8, -7, -2, -1 ) );
            rec.paiscon := Convert( slices, 1445, ( -9, -8, -7, -2, -1 ) );
            rec.j1iscon := Convert( slices, 1446, ( -9, -8, -7, -2, -1 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Indresp_component ).start_pos = 0 ) then
               index.pointers( Indresp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Indresp_component ).counter := index.pointers( Indresp_component ).counter + 1;
            Put_Index( index_map, index );
            Indresp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Indresp_IO.Close( bin_file );
   end Create_Indresp_Wave_P;




   procedure Create_Indsamp_Wave_P( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Indsamp_IO.File_Type;
      rec         : Indsamp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Indsamp_IO.Create (bin_file, Indsamp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.pid := Convert( slices, 3 );
            rec.iviolw := Convert_Iviolw_Type( Get( slices, 4 ));
            rec.ivstat1 := Convert_Ivstat1_Type( Get( slices, 5 ));
            rec.ivelig := Convert_Ivelig_Type( Get( slices, 6 ));
            rec.hhmem := Convert_Hhmem_Type( Get( slices, 7 ));
            rec.newhy := Convert_Newhy_Type( Get( slices, 8 ));
            rec.nemnjn := Convert_Nemnjn_Type( Get( slices, 9 ));
            rec.neyrjn4 := Convert( slices, 10, ( -9, -8, -7, -2, -1 ) );
            rec.lvwhy := Convert_Lvwhy_Type( Get( slices, 11 ));
            rec.lvmn := Convert_Lvmn_Type( Get( slices, 12 ));
            rec.lvyr4 := Convert( slices, 13, ( -9, -8, -7, -2, -1 ) );
            rec.lvloc := Convert_Lvloc_Type( Get( slices, 14 ));
            rec.ivfio := Convert_Ivfio_Type( Get( slices, 15 ));
            rec.ivrref := Convert_Ivrref_Type( Get( slices, 16 ));
            rec.ivireis := Convert_Ivireis_Type( Get( slices, 17 ));
            rec.finloc := Convert_Finloc_Type( Get( slices, 18 ));
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 19 ));
            rec.memorig := Convert_Memorig_Type( Get( slices, 20 ));
            rec.sampst := Convert_Sampst_Type( Get( slices, 21 ));
            rec.movest := Convert_Movest_Type( Get( slices, 22 ));
            rec.lewght := Convert( slices, 23, ( -9.0, -8.0, -1.0 ) );
            rec.lrwght := Convert( slices, 24, ( -9.0, -8.0, -1.0 ) );
            rec.lrwtsw1 := Convert( slices, 25, ( -9.0, -8.0, -1.0 ) );
            rec.lewtsw1 := Convert( slices, 26, ( -9.0, -8.0, -1.0 ) );
            rec.lrwtsw2 := Convert( slices, 27, ( -9.0, -8.0, -1.0 ) );
            rec.lewtsw2 := Convert( slices, 28, ( -9.0, -8.0, -1.0 ) );
            rec.lrwtuk1 := Convert( slices, 29, ( -9.0, -8.0, -1.0 ) );
            rec.lewtuk1 := Convert( slices, 30, ( -9.0, -8.0, -1.0 ) );
            rec.lrwtuk2 := Convert( slices, 31, ( -9.0, -8.0, -1.0 ) );
            rec.lewtuk2 := Convert( slices, 32, ( -9.0, -8.0, -1.0 ) );
            rec.distmov := Convert( slices, 33, ( -9.0, -8.0 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Indsamp_component ).start_pos = 0 ) then
               index.pointers( Indsamp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Indsamp_component ).counter := index.pointers( Indsamp_component ).counter + 1;
            Put_Index( index_map, index );
            Indsamp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Indsamp_IO.Close( bin_file );
   end Create_Indsamp_Wave_P;




   procedure Create_Jobhist_Wave_P( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Jobhist_IO.File_Type;
      rec         : Jobhist_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Jobhist_IO.Create (bin_file, Jobhist_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.pno := Convert( slices, 1 );
            rec.jhstat := Convert_Jhstat_Type( Get( slices, 2 ));
            rec.jhendd := Convert( slices, 3, ( -9, -8, -7, -2, -1 ) );
            rec.jhendm := Convert_Jbbgm1_Type( Get( slices, 4 ));
            rec.jhendy4 := Convert( slices, 5, ( -9, -8, -7, -2, -1 ) );
            rec.jhsoc := Convert( slices, 6, ( -9, -8, -2, -1 ) );
            rec.jhsoc00 := Convert( slices, 7, ( -9, -8, -2, -1 ) );
            rec.jhsemp := Convert_Jhsemp_Type( Get( slices, 8 ));
            rec.jhboss := Convert_Bscon_Type( Get( slices, 9 ));
            rec.jhsect := Convert_Jhsect_Type( Get( slices, 10 ));
            rec.jhmngr := Convert_Jhmngr_Type( Get( slices, 11 ));
            rec.jhsic92 := Convert( slices, 12, ( -9, -8, -7 ) );
            rec.jhsize := Convert_Jhsize_Type( Get( slices, 13 ));
            rec.jhpayl := Convert( slices, 14, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhpylw := Convert( slices, 15, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.jhpylg := Convert_Jhpylg_Type( Get( slices, 16 ));
            rec.jhstpy := Convert_Jhstpy_Type( Get( slices, 17 ));
            rec.jblky := Convert_Jblky_Type( Get( slices, 18 ));
            rec.hid := Convert( slices, 19 );
            rec.jspno := Convert( slices, 20 );
            rec.jhbgd := Convert( slices, 21, ( -9, -8, -7, -2, -1 ) );
            rec.jhbgm := Convert_Jbbgm1_Type( Get( slices, 22 ));
            rec.jhbgy4 := Convert( slices, 23, ( -9, -8, -7, -2, -1 ) );
            rec.jha9ly := Convert_Jha9ly_Type( Get( slices, 24 ));
            rec.jhlwai := Convert_Jhlwai_Type( Get( slices, 25 ));
            rec.jhseg := Convert_Jhseg_Type( Get( slices, 26 ));
            rec.jhgold := Convert( slices, 27, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhrgsc := Convert_Jhrgsc_Type( Get( slices, 28 ));
            rec.jhisco := Convert( slices, 29, ( -9, -8 ) );
            rec.jhcssm := Convert( slices, 30, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhcssf := Convert( slices, 31, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhhgs := Convert( slices, 32, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhsec := Convert_Jhsec_Type( Get( slices, 33 ));
            rec.jhspw := Convert( slices, 34, ( -9.0, -8.0 ) );
            rec.jhgpay := Convert( slices, 35, ( -9.0, -8.0, -7.0 ) );
            rec.jhnpay := Convert( slices, 36, ( -9.0, -8.0, -7.0, -1.0 ) );
            rec.jhgpayi := Convert_Jhgpayi_Type( Get( slices, 37 ));
            rec.jhnpayi := Convert_Jhgpayi_Type( Get( slices, 38 ));
            rec.pid := Convert( slices, 39 );
            rec.jhiscon := Convert( slices, 40, ( -9, -8, -7, -2, -1 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Jobhist_component ).start_pos = 0 ) then
               index.pointers( Jobhist_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Jobhist_component ).counter := index.pointers( Jobhist_component ).counter + 1;
            Put_Index( index_map, index );
            Jobhist_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Jobhist_IO.Close( bin_file );
   end Create_Jobhist_Wave_P;




   procedure Create_Jobhstd_Wave_P( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Jobhstd_IO.File_Type;
      rec         : Jobhstd_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Jobhstd_IO.Create (bin_file, Jobhstd_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.pno := Convert( slices, 1 );
            rec.jhstat := Convert_Jhstat_Type( Get( slices, 2 ));
            rec.jhendd := Convert( slices, 3, ( -9, -8, -2, -1 ) );
            rec.jhendm := Convert_Jbbgm1_Type( Get( slices, 4 ));
            rec.jhendy4 := Convert( slices, 5, ( -9, -8, -2, -1 ) );
            rec.jhcjs := Convert_Jhcjs_Type( Get( slices, 6 ));
            rec.jhck1 := Convert_Jhck1_Type( Get( slices, 7 ));
            rec.jhck2 := Convert_Jhck2_Type( Get( slices, 8 ));
            rec.jhsoc := Convert( slices, 9, ( -9, -8, -2, -1 ) );
            rec.jhsoc00 := Convert( slices, 10, ( -9, -8, -2, -1 ) );
            rec.jhsemp := Convert_Jhsemp_Type( Get( slices, 11 ));
            rec.jhboss := Convert_Bscon_Type( Get( slices, 12 ));
            rec.jhsect := Convert_Jhsect_Type( Get( slices, 13 ));
            rec.jhmngr := Convert_Jhmngr_Type( Get( slices, 14 ));
            rec.jhsic92 := Convert( slices, 15, ( -9, -8, -7 ) );
            rec.jhsize := Convert_Jhsize_Type( Get( slices, 16 ));
            rec.jhpayl := Convert( slices, 17, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhpylw := Convert( slices, 18, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.jhpylg := Convert_Jhpylg_Type( Get( slices, 19 ));
            rec.jhstpy := Convert_Jhstpy_Type( Get( slices, 20 ));
            rec.jblky := Convert_Jblky_Type( Get( slices, 21 ));
            rec.hid := Convert( slices, 22 );
            rec.jspno := Convert( slices, 23 );
            rec.pid := Convert( slices, 24 );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Jobhstd_component ).start_pos = 0 ) then
               index.pointers( Jobhstd_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Jobhstd_component ).counter := index.pointers( Jobhstd_component ).counter + 1;
            Put_Index( index_map, index );
            Jobhstd_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Jobhstd_IO.Close( bin_file );
   end Create_Jobhstd_Wave_P;




   procedure Create_Youth_Wave_P( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Youth_IO.File_Type;
      rec         : Youth_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Youth_IO.Create (bin_file, Youth_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.ypdobm := Convert_Ypdobm_Type( Get( slices, 3 ));
            rec.ypdoby4 := Convert( slices, 4, ( -9, -8, -7, -2, -1 ) );
            rec.ypsex := Convert_Ypsex_Type( Get( slices, 5 ));
            rec.ytvhrs := Convert_Ytvhrs_Type( Get( slices, 6 ));
            rec.ytvstp := Convert_Ytvlmt_Type( Get( slices, 7 ));
            rec.ypchor := Convert_Ypchor_Type( Get( slices, 8 ));
            rec.ypcomp := Convert_Ypcomp_Type( Get( slices, 9 ));
            rec.yppchw := Convert_Yppcg_Type( Get( slices, 10 ));
            rec.yppcg := Convert_Yppcg_Type( Get( slices, 11 ));
            rec.yppcnt := Convert_Yppcg_Type( Get( slices, 12 ));
            rec.ypmobu := Convert_Ypbeau_Type( Get( slices, 13 ));
            rec.yppals := Convert_Yppalo_Type( Get( slices, 14 ));
            rec.yppalo := Convert_Yppalo_Type( Get( slices, 15 ));
            rec.yplate := Convert_Yplate_Type( Get( slices, 16 ));
            rec.ypbeau := Convert_Ypbeau_Type( Get( slices, 17 ));
            rec.ypfclub := Convert_Ypfarca_Type( Get( slices, 18 ));
            rec.ypfdisc := Convert_Ypfarca_Type( Get( slices, 19 ));
            rec.ypfspor := Convert_Ypfarca_Type( Get( slices, 20 ));
            rec.ypargm := Convert_Ypargm_Type( Get( slices, 21 ));
            rec.ypargf := Convert_Ypargf_Type( Get( slices, 22 ));
            rec.yptlkm := Convert_Ypargm_Type( Get( slices, 23 ));
            rec.yptlkf := Convert_Ypargf_Type( Get( slices, 24 ));
            rec.ypnpal := Convert( slices, 25, ( -9, -8, -2, -1 ) );
            rec.ypfght := Convert_Ypfght_Type( Get( slices, 26 ));
            rec.ypeatn := Convert_Ypeatn_Type( Get( slices, 27 ));
            rec.ypsad := Convert_Ypsad_Type( Get( slices, 28 ));
            rec.ypbored := Convert_Ypbored_Type( Get( slices, 29 ));
            rec.yphstat := Convert_Yphstat_Type( Get( slices, 30 ));
            rec.ypophe := Convert_Ypopfj_Type( Get( slices, 31 ));
            rec.ypophc := Convert_Ypopfj_Type( Get( slices, 32 ));
            rec.yphtf := Convert( slices, 33, ( -9, -8, -2, -1 ) );
            rec.yphfi := Convert( slices, 34, ( -9, -8, -2, -1 ) );
            rec.yphtc := Convert( slices, 35, ( -9, -8, -2, -1 ) );
            rec.ypwts := Convert( slices, 36, ( -9, -8, -2, -1 ) );
            rec.ypwtp := Convert( slices, 37, ( -9, -8, -2, -1 ) );
            rec.ypwtk := Convert( slices, 38, ( -9, -8, -2, -1 ) );
            rec.ypwghr := Convert_Ypwghr_Type( Get( slices, 39 ));
            rec.ypdiet := Convert_Ypdiet_Type( Get( slices, 40 ));
            rec.ypsprt := Convert_Ypsprt_Type( Get( slices, 41 ));
            rec.ypsprt1 := Convert_Ypsprt1_Type( Get( slices, 42 ));
            rec.ypsprt2 := Convert_Ypsprt2_Type( Get( slices, 43 ));
            rec.ypnspt1 := Convert_Ypnspt1_Type( Get( slices, 44 ));
            rec.ypnspt2 := Convert_Ypnspt2_Type( Get( slices, 45 ));
            rec.ypfrut := Convert_Ypffd_Type( Get( slices, 46 ));
            rec.ypffd := Convert_Ypffd_Type( Get( slices, 47 ));
            rec.ypjfd := Convert_Ypffd_Type( Get( slices, 48 ));
            rec.ypsmev := Convert_Ypbeau_Type( Get( slices, 49 ));
            rec.ypsmof := Convert_Ypsmof_Type( Get( slices, 50 ));
            rec.ypsmlw := Convert( slices, 51, ( -9, -8, -2, -1 ) );
            rec.ypdgfr := Convert_Ypdgfr_Type( Get( slices, 52 ));
            rec.ypesta := Convert_Ypesta_Type( Get( slices, 53 ));
            rec.ypesti := Convert_Ypesti_Type( Get( slices, 54 ));
            rec.ypestb := Convert_Ypesta_Type( Get( slices, 55 ));
            rec.ypestj := Convert_Ypesti_Type( Get( slices, 56 ));
            rec.ypestc := Convert_Ypesta_Type( Get( slices, 57 ));
            rec.ypestk := Convert_Ypesti_Type( Get( slices, 58 ));
            rec.ypeste := Convert_Ypesta_Type( Get( slices, 59 ));
            rec.ypestf := Convert_Ypesta_Type( Get( slices, 60 ));
            rec.yptcha := Convert_Ypesta_Type( Get( slices, 61 ));
            rec.yptchb := Convert_Ypesta_Type( Get( slices, 62 ));
            rec.yphsw := Convert_Yphap_Type( Get( slices, 63 ));
            rec.yphap := Convert_Yphap_Type( Get( slices, 64 ));
            rec.yphfm := Convert_Yphap_Type( Get( slices, 65 ));
            rec.yphfr := Convert_Yphap_Type( Get( slices, 66 ));
            rec.yphsc := Convert_Yphap_Type( Get( slices, 67 ));
            rec.yphlf := Convert_Yphap_Type( Get( slices, 68 ));
            rec.ypvte6 := Convert_Ypvte6_Type( Get( slices, 69 ));
            rec.ypvte3 := Convert_Ypvte3_Type( Get( slices, 70 ));
            rec.ynbuks := Convert( slices, 71, ( -9, -8, -2, -1 ) );
            rec.yptrun := Convert_Yptrun_Type( Get( slices, 72 ));
            rec.ypbull := Convert_Ypbull_Type( Get( slices, 73 ));
            rec.ypopsc := Convert_Ypopsc_Type( Get( slices, 74 ));
            rec.yplvsc := Convert_Yplvsc_Type( Get( slices, 75 ));
            rec.ypacvs := Convert_Scach_Type( Get( slices, 76 ));
            rec.ypsoc00 := Convert( slices, 77, ( -9, -8, -3, -2, -1 ) );
            rec.ypsoc90 := Convert( slices, 78, ( -9, -8, -3, -2, -1 ) );
            rec.ypwklw := Convert_Ypbeau_Type( Get( slices, 79 ));
            rec.ypsoc10 := Convert( slices, 80, ( -9, -8, -3, -2, -1 ) );
            rec.ypsoc19 := Convert( slices, 81, ( -9, -8, -3, -2, -1 ) );
            rec.ypsoc20 := Convert( slices, 82, ( -9, -8, -3, -2, -1 ) );
            rec.ypsoc29 := Convert( slices, 83, ( -9, -8, -3, -2, -1 ) );
            rec.ypwhrs := Convert( slices, 84, ( -9, -8, -2, -1 ) );
            rec.yppay := Convert( slices, 85, ( -9, -8, -2, -1 ) );
            rec.yplvhm := Convert( slices, 86, ( -9, -8, -2, -1 ) );
            rec.yp2uni := Convert_Yp2uni_Type( Get( slices, 87 ));
            rec.ypnuna := Convert_Ypnuna_Type( Get( slices, 88 ));
            rec.ypnunb := Convert_Ypnunb_Type( Get( slices, 89 ));
            rec.ypfuta := Convert_Ypfuta_Type( Get( slices, 90 ));
            rec.ypfutb := Convert_Ypfutb_Type( Get( slices, 91 ));
            rec.ypwght := Convert( slices, 92 );
            rec.pid := Convert( slices, 93 );
            rec.fnspno := Convert( slices, 94, ( -9, -8 ) );
            rec.fnspid := Convert( slices, 95, ( -9.0, -8.0 ) );
            rec.mnspno := Convert( slices, 96, ( -9, -8 ) );
            rec.mnspid := Convert( slices, 97, ( -9.0, -8.0 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Youth_component ).start_pos = 0 ) then
               index.pointers( Youth_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Youth_component ).counter := index.pointers( Youth_component ).counter + 1;
            Put_Index( index_map, index );
            Youth_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Youth_IO.Close( bin_file );
   end Create_Youth_Wave_P;




   procedure Create_Child_Wave_Q( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Child_IO.File_Type;
      rec         : Child_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Child_IO.Create (bin_file, Child_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.pno := Convert( slices, 1, ( -9, -8 ) );
            rec.scpno := Convert( slices, 2, ( -9, -8 ) );
            rec.scage := Convert( slices, 3, ( -9, -8, -2, -1 ) );
            rec.scsex := Convert_Scsex_Type( Get( slices, 4 ));
            rec.scage4 := Convert_Scag11_Type( Get( slices, 5 ));
            rec.sctyp := Convert_Sctyp_Type( Get( slices, 6 ));
            rec.schbgy := Convert( slices, 7, ( -9, -8, -2, -1 ) );
            rec.schbgm := Convert( slices, 8, ( -9, -8, -2, -1 ) );
            rec.schsta := Convert_Schsta_Type( Get( slices, 9 ));
            rec.schlng := Convert_Schlng_Type( Get( slices, 10 ));
            rec.schsat := Convert_Schsat_Type( Get( slices, 11 ));
            rec.schhw := Convert_Schhw_Type( Get( slices, 12 ));
            rec.scacvs := Convert_Scach_Type( Get( slices, 13 ));
            rec.scach := Convert_Scach_Type( Get( slices, 14 ));
            rec.scag11 := Convert_Scag11_Type( Get( slices, 15 ));
            rec.sctut := Convert_Sctut_Type( Get( slices, 16 ));
            rec.sctute := Convert_Sctute_Type( Get( slices, 17 ));
            rec.sctutm := Convert_Sctutm_Type( Get( slices, 18 ));
            rec.sctuts := Convert_Sctuts_Type( Get( slices, 19 ));
            rec.sctutl := Convert_Sctutl_Type( Get( slices, 20 ));
            rec.sctuth := Convert_Sctuth_Type( Get( slices, 21 ));
            rec.sctuto := Convert_Sctuto_Type( Get( slices, 22 ));
            rec.sc2uni := Convert_Sc2uni_Type( Get( slices, 23 ));
            rec.scluni := Convert_Scluni_Type( Get( slices, 24 ));
            rec.scarg := Convert_Scarg_Type( Get( slices, 25 ));
            rec.sctalk := Convert_Scarg_Type( Get( slices, 26 ));
            rec.scpraz := Convert_Sccudl_Type( Get( slices, 27 ));
            rec.scsmak := Convert_Sccudl_Type( Get( slices, 28 ));
            rec.sccudl := Convert_Sccudl_Type( Get( slices, 29 ));
            rec.scyell := Convert_Sccudl_Type( Get( slices, 30 ));
            rec.scpid := Convert( slices, 31 );
            rec.pid := Convert( slices, 32 );
            rec.hid := Convert( slices, 33 );
            rec.cheseq := Convert( slices, 34, ( -9, -8 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Child_component ).start_pos = 0 ) then
               index.pointers( Child_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Child_component ).counter := index.pointers( Child_component ).counter + 1;
            Put_Index( index_map, index );
            Child_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Child_IO.Close( bin_file );
   end Create_Child_Wave_Q;




   procedure Create_Egoalt_Wave_Q( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Egoalt_IO.File_Type;
      rec         : Egoalt_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Egoalt_IO.Create (bin_file, Egoalt_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.opno := Convert( slices, 3, (  1 .. 0 => -9 ) );
            rec.rel := Convert_Rel_Type( Get( slices, 4 ));
            rec.sex := Convert_Sex_Type( Get( slices, 5 ));
            rec.osex := Convert_Hgsex_Type( Get( slices, 6 ));
            rec.lwstat := Convert_Lwstat_Type( Get( slices, 7 ));
            rec.nwstat := Convert_Nwstat_Type( Get( slices, 8 ));
            rec.pid := Convert( slices, 9 );
            rec.opid := Convert( slices, 10 );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Egoalt_component ).start_pos = 0 ) then
               index.pointers( Egoalt_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Egoalt_component ).counter := index.pointers( Egoalt_component ).counter + 1;
            Put_Index( index_map, index );
            Egoalt_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Egoalt_IO.Close( bin_file );
   end Create_Egoalt_Wave_Q;




   procedure Create_Hhresp_Wave_Q( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Hhresp_IO.File_Type;
      rec         : Hhresp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Hhresp_IO.Create (bin_file, Hhresp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.hhdoi := Convert( slices, 2, ( -9, -8, -7 ) );
            rec.hhmoi := Convert_Doim_Type( Get( slices, 3 ));
            rec.hhyoi4 := Convert( slices, 4, ( -9, -8, -7, -2, -1 ) );
            rec.hhsoih := Convert( slices, 5, ( -9, -8, -7 ) );
            rec.hhsoim := Convert( slices, 6, ( -9, -8, -7 ) );
            rec.hstype := Convert_Hstype_Type( Get( slices, 7 ));
            rec.hsrins := Convert_Cjsck2_Type( Get( slices, 8 ));
            rec.hsroom := Convert( slices, 9, ( -9, -8, -7, -2, -1 ) );
            rec.hsownd := Convert_Hsownd_Type( Get( slices, 10 ));
            rec.hsowr1 := Convert( slices, 11, ( -9, -8, -7, -2, -1 ) );
            rec.hsowr2 := Convert( slices, 12, ( -9, -8, -7, -2, -1 ) );
            rec.hsval := Convert( slices, 13, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.mghave := Convert_Mghave_Type( Get( slices, 14 ));
            rec.hsowrp := Convert_Bscon_Type( Get( slices, 15 ));
            rec.mgynot := Convert_Mgynot_Type( Get( slices, 16 ));
            rec.hscost := Convert( slices, 17, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.hsyr04 := Convert( slices, 18, ( -9, -8, -7, -2, -1 ) );
            rec.mgyr04 := Convert( slices, 19, ( -9, -8, -7, -2, -1 ) );
            rec.mgly := Convert_Bscon_Type( Get( slices, 20 ));
            rec.hsivlw := Convert( slices, 21, ( -9, -8, -7, -2, -1 ) );
            rec.mgold := Convert( slices, 22, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.mglife := Convert( slices, 23, ( -9, -8, -7, -2, -1 ) );
            rec.mgtype := Convert_Mgtype_Type( Get( slices, 24 ));
            rec.mgxtra := Convert_Bscon_Type( Get( slices, 25 ));
            rec.mgnew := Convert( slices, 26, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.mgxty1 := Convert_Mgxty1_Type( Get( slices, 27 ));
            rec.mgxty2 := Convert_Mgxty2_Type( Get( slices, 28 ));
            rec.mgxty3 := Convert_Mgxty3_Type( Get( slices, 29 ));
            rec.mgxty4 := Convert_Mgxty4_Type( Get( slices, 30 ));
            rec.mgxty5 := Convert_Mgxty5_Type( Get( slices, 31 ));
            rec.xpmg := Convert( slices, 32, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.xpmg1 := Convert_Bscon_Type( Get( slices, 33 ));
            rec.xpmg2 := Convert_Bscon_Type( Get( slices, 34 ));
            rec.xpmg3 := Convert_Bscon_Type( Get( slices, 35 ));
            rec.xpmg4 := Convert_Bscon_Type( Get( slices, 36 ));
            rec.hsjb := Convert_Bscon_Type( Get( slices, 37 ));
            rec.rentp1 := Convert( slices, 38, ( -9, -8, -7, -2, -1 ) );
            rec.rentp2 := Convert( slices, 39, ( -9, -8, -7, -2, -1 ) );
            rec.rentll := Convert_Rentll_Type( Get( slices, 40 ));
            rec.rentf := Convert_Rentf_Type( Get( slices, 41 ));
            rec.rent := Convert( slices, 42, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.rentw := Convert( slices, 43, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.rent1 := Convert_Rent1_Type( Get( slices, 44 ));
            rec.rent7 := Convert_Rent7_Type( Get( slices, 45 ));
            rec.rent2 := Convert_Rent1_Type( Get( slices, 46 ));
            rec.rent3 := Convert_Bscon_Type( Get( slices, 47 ));
            rec.rent4 := Convert_Bscon_Type( Get( slices, 48 ));
            rec.rent5 := Convert_Bscon_Type( Get( slices, 49 ));
            rec.rent8 := Convert_Coh1mr_Type( Get( slices, 50 ));
            rec.rent6 := Convert_Bscon_Type( Get( slices, 51 ));
            rec.renthb := Convert_Renthb_Type( Get( slices, 52 ));
            rec.rentg := Convert( slices, 53, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.rentgw := Convert( slices, 54, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.xphsdf := Convert( slices, 55, ( -9, -8, -7, -2, -1 ) );
            rec.xphsd1 := Convert_Bscon_Type( Get( slices, 56 ));
            rec.xphsd2 := Convert_Bscon_Type( Get( slices, 57 ));
            rec.xphsdb := Convert_Bscon_Type( Get( slices, 58 ));
            rec.hskch := Convert_Boolean_With_Missing( Get( slices, 59 ));
            rec.hskchs := Convert_Boolean_With_Missing( Get( slices, 60 ));
            rec.hsbth := Convert_Boolean_With_Missing( Get( slices, 61 ));
            rec.hsbths := Convert_Boolean_With_Missing( Get( slices, 62 ));
            rec.hstlt := Convert_Boolean_With_Missing( Get( slices, 63 ));
            rec.hstlts := Convert_Boolean_With_Missing( Get( slices, 64 ));
            rec.hsgdn := Convert_Boolean_With_Missing( Get( slices, 65 ));
            rec.hsgdns := Convert_Boolean_With_Missing( Get( slices, 66 ));
            rec.xpgasy := Convert( slices, 67, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.xplecy := Convert( slices, 68, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.xpoily := Convert( slices, 69, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.xpsfly := Convert( slices, 70, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.heatch := Convert_Bscon_Type( Get( slices, 71 ));
            rec.heatyp := Convert_Heatyp_Type( Get( slices, 72 ));
            rec.hsprbg := Convert_Boolean_With_Missing( Get( slices, 73 ));
            rec.hsprbh := Convert_Boolean_With_Missing( Get( slices, 74 ));
            rec.hsprbi := Convert_Boolean_With_Missing( Get( slices, 75 ));
            rec.hsprbj := Convert_Boolean_With_Missing( Get( slices, 76 ));
            rec.hsprbk := Convert_Boolean_With_Missing( Get( slices, 77 ));
            rec.hsprbl := Convert_Boolean_With_Missing( Get( slices, 78 ));
            rec.hsprbm := Convert_Boolean_With_Missing( Get( slices, 79 ));
            rec.hsprbn := Convert_Boolean_With_Missing( Get( slices, 80 ));
            rec.hsprbo := Convert_Boolean_With_Missing( Get( slices, 81 ));
            rec.hsprbp := Convert_Boolean_With_Missing( Get( slices, 82 ));
            rec.hsprbq := Convert_Boolean_With_Missing( Get( slices, 83 ));
            rec.hsctax := Convert_Hsctax_Type( Get( slices, 84 ));
            rec.hs2ownd := Convert_Bscon_Type( Get( slices, 85 ));
            rec.hs2valo := Convert( slices, 86, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.hs2vala := Convert_Hldsbl1_Type( Get( slices, 87 ));
            rec.hs2valb := Convert_Hldsbl1_Type( Get( slices, 88 ));
            rec.hs2valc := Convert_Hldsbl1_Type( Get( slices, 89 ));
            rec.hs2vald := Convert_Hldsbl1_Type( Get( slices, 90 ));
            rec.mgtot := Convert( slices, 91, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.cdhave := Convert_Bscon_Type( Get( slices, 92 ));
            rec.cdbght := Convert_Bscon_Type( Get( slices, 93 ));
            rec.cd1use := Convert_Cd1new_Type( Get( slices, 94 ));
            rec.cd1new := Convert( slices, 95, ( -9, -8, -7, -2, -1 ) );
            rec.cd1cst := Convert( slices, 96, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd2use := Convert_Cd1new_Type( Get( slices, 97 ));
            rec.cd2new := Convert( slices, 98, ( -9, -8, -7, -2, -1 ) );
            rec.cd2cst := Convert( slices, 99, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd10use := Convert_Cd10new_Type( Get( slices, 100 ));
            rec.cd10new := Convert( slices, 101, ( -9, -8, -7, -2, -1 ) );
            rec.cd10cst := Convert( slices, 102, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd11use := Convert_Cd10new_Type( Get( slices, 103 ));
            rec.cd11new := Convert( slices, 104, ( -9, -8, -7, -2, -1 ) );
            rec.cd11cst := Convert( slices, 105, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd3use := Convert_Cd1new_Type( Get( slices, 106 ));
            rec.cd3new := Convert( slices, 107, ( -9, -8, -7, -2, -1 ) );
            rec.cd3cst := Convert( slices, 108, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd4use := Convert_Cd1new_Type( Get( slices, 109 ));
            rec.cd4new := Convert( slices, 110, ( -9, -8, -7, -2, -1 ) );
            rec.cd4cst := Convert( slices, 111, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd5use := Convert_Cd1new_Type( Get( slices, 112 ));
            rec.cd5new := Convert( slices, 113, ( -9, -8, -7, -2, -1 ) );
            rec.cd5cst := Convert( slices, 114, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd6use := Convert_Cd1new_Type( Get( slices, 115 ));
            rec.cd6new := Convert( slices, 116, ( -9, -8, -7, -2, -1 ) );
            rec.cd6cst := Convert( slices, 117, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd7use := Convert_Cd1new_Type( Get( slices, 118 ));
            rec.cd7new := Convert( slices, 119, ( -9, -8, -7, -2, -1 ) );
            rec.cd7cst := Convert( slices, 120, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd8use := Convert_Cd1new_Type( Get( slices, 121 ));
            rec.cd8new := Convert( slices, 122, ( -9, -8, -7, -2, -1 ) );
            rec.cd8cst := Convert( slices, 123, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd9use := Convert_Cd1new_Type( Get( slices, 124 ));
            rec.cd9new := Convert( slices, 125, ( -9, -8, -7, -2, -1 ) );
            rec.cd9cst := Convert( slices, 126, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd12use := Convert_Cd10new_Type( Get( slices, 127 ));
            rec.cd12new := Convert( slices, 128, ( -9, -8, -7, -2, -1 ) );
            rec.cd12cst := Convert( slices, 129, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd13use := Convert_Cd13new_Type( Get( slices, 130 ));
            rec.cd13new := Convert( slices, 131, ( -9, -8, -7, -2, -1 ) );
            rec.cd13cst := Convert( slices, 132, ( -9, -8, -7, -3, -2, -1 ) );
            rec.pcnet := Convert_Boolean_With_Missing( Get( slices, 133 ));
            rec.hsnet1 := Convert_Cd13new_Type( Get( slices, 134 ));
            rec.hsnet2 := Convert_Cd13new_Type( Get( slices, 135 ));
            rec.hsnet3 := Convert_Cd13new_Type( Get( slices, 136 ));
            rec.hsnet4 := Convert_Cd13new_Type( Get( slices, 137 ));
            rec.hsnetb := Convert_Bscon_Type( Get( slices, 138 ));
            rec.xphp := Convert_Bscon_Type( Get( slices, 139 ));
            rec.xphpdf := Convert_Xphpdf_Type( Get( slices, 140 ));
            rec.hscana := Convert_Boolean_With_Missing( Get( slices, 141 ));
            rec.hscnta := Convert_Boolean_With_Missing( Get( slices, 142 ));
            rec.hscanb := Convert_Boolean_With_Missing( Get( slices, 143 ));
            rec.hscntb := Convert_Boolean_With_Missing( Get( slices, 144 ));
            rec.hscanc := Convert_Boolean_With_Missing( Get( slices, 145 ));
            rec.hscntc := Convert_Boolean_With_Missing( Get( slices, 146 ));
            rec.hscand := Convert_Boolean_With_Missing( Get( slices, 147 ));
            rec.hscntd := Convert_Boolean_With_Missing( Get( slices, 148 ));
            rec.hscane := Convert_Boolean_With_Missing( Get( slices, 149 ));
            rec.hscnte := Convert_Boolean_With_Missing( Get( slices, 150 ));
            rec.hscanf := Convert_Boolean_With_Missing( Get( slices, 151 ));
            rec.hscntf := Convert_Boolean_With_Missing( Get( slices, 152 ));
            rec.hscanh := Convert_Edblyr3_Type( Get( slices, 153 ));
            rec.hscnth := Convert_Edblyr3_Type( Get( slices, 154 ));
            rec.hscank := Convert_Edblyr3_Type( Get( slices, 155 ));
            rec.hscntk := Convert_Edblyr3_Type( Get( slices, 156 ));
            rec.hscanl := Convert_Edblyr3_Type( Get( slices, 157 ));
            rec.hscntl := Convert_Edblyr3_Type( Get( slices, 158 ));
            rec.xpfood := Convert( slices, 159, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ncars := Convert_Ncars_Type( Get( slices, 160 ));
            rec.carown := Convert_Carown_Type( Get( slices, 161 ));
            rec.carval := Convert( slices, 162, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ivh1 := Convert( slices, 163, ( -9, -8, -7, -1 ) );
            rec.ivh2 := Convert( slices, 164, ( -9, -8, -7 ) );
            rec.ivh3 := Convert( slices, 165, ( -9, -8, -7 ) );
            rec.hhfoih := Convert( slices, 166, ( -9, -8, -7 ) );
            rec.hhfoim := Convert( slices, 167, ( -9, -8, -7 ) );
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 168 ));
            rec.hhorig := Convert_Hhorig_Type( Get( slices, 169 ));
            rec.hhdc := Convert_Hhdc_Type( Get( slices, 170 ));
            rec.xhwght := Convert( slices, 171, ( -9.0, -8.0 ) );
            rec.hhsize := Convert( slices, 172, ( -9, -8 ) );
            rec.hhtype := Convert_Hhtype_Type( Get( slices, 173 ));
            rec.region := Convert_Region_Type( Get( slices, 174 ));
            rec.nch02 := Convert( slices, 175, ( -9, -8 ) );
            rec.nch34 := Convert( slices, 176, ( -9, -8 ) );
            rec.nch511 := Convert( slices, 177, ( -9, -8 ) );
            rec.nch1215 := Convert( slices, 178, ( -9, -8 ) );
            rec.nch1618 := Convert( slices, 179, ( -9, -8 ) );
            rec.nkids := Convert( slices, 180, ( -9, -8 ) );
            rec.nwed := Convert( slices, 181, ( -9, -8 ) );
            rec.npens := Convert( slices, 182, ( -9, -8 ) );
            rec.na75pl := Convert( slices, 183, ( -9, -8 ) );
            rec.agechy := Convert( slices, 184, ( -9, -8 ) );
            rec.ncouple := Convert( slices, 185, ( -9, -8 ) );
            rec.nonepar := Convert( slices, 186, ( -9, -8 ) );
            rec.nemp := Convert( slices, 187, ( -9, -8 ) );
            rec.nwage := Convert( slices, 188, ( -9, -8 ) );
            rec.tenure := Convert_Tenure_Type( Get( slices, 189 ));
            rec.xphsn := Convert( slices, 190, ( -9.0, -8.0, -7.0 ) );
            rec.xphsg := Convert( slices, 191, ( -9.0, -8.0, -7.0 ) );
            rec.fieqfcb := Convert( slices, 192, ( -9.0, -8.0 ) );
            rec.fieqfca := Convert( slices, 193, ( -9.0, -8.0 ) );
            rec.fihhyr := Convert( slices, 194, ( -9.0, -8.0, -7.0 ) );
            rec.fihhmn := Convert( slices, 195, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyl := Convert( slices, 196, ( -9.0, -8.0, -7.0 ) );
            rec.fihhynl := Convert( slices, 197, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyp := Convert( slices, 198, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyb := Convert( slices, 199, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyt := Convert( slices, 200, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyi := Convert( slices, 201, ( -9.0, -8.0, -7.0 ) );
            rec.fihhml := Convert( slices, 202, (  1 .. 0 => -9.0 ) );
            rec.fihhmnl := Convert( slices, 203, (  1 .. 0 => -9.0 ) );
            rec.fihhmp := Convert( slices, 204, (  1 .. 0 => -9.0 ) );
            rec.fihhmb := Convert( slices, 205, (  1 .. 0 => -9.0 ) );
            rec.fihhmt := Convert( slices, 206, (  1 .. 0 => -9.0 ) );
            rec.fihhmi := Convert( slices, 207, (  1 .. 0 => -9.0 ) );
            rec.hhmove := Convert_Hhmove_Type( Get( slices, 208 ));
            rec.mgnewi := Convert( slices, 209, ( -9, -8, -7, -2, -1 ) );
            rec.xpmgi := Convert( slices, 210, ( -9, -8, -7, -2, -1 ) );
            rec.hsvali := Convert( slices, 211, ( -9, -8, -7, -2, -1 ) );
            rec.renti := Convert( slices, 212, ( -9, -8, -7, -4, -3, -2, -1 ) );
            rec.rentgi := Convert( slices, 213, ( -9, -8, -7, -2, -1 ) );
            rec.xphsni := Convert_Jhgpayi_Type( Get( slices, 214 ));
            rec.xphsgi := Convert_Jhgpayi_Type( Get( slices, 215 ));
            rec.fihhmni := Convert_Fihhmni_Type( Get( slices, 216 ));
            rec.fihhmli := Convert_Fihhmbi_Type( Get( slices, 217 ));
            rec.fihmnli := Convert_Fihhmbi_Type( Get( slices, 218 ));
            rec.fihhmpi := Convert_Fihhmbi_Type( Get( slices, 219 ));
            rec.fihhmbi := Convert_Fihhmbi_Type( Get( slices, 220 ));
            rec.fihhmti := Convert_Fihhmbi_Type( Get( slices, 221 ));
            rec.fihhmii := Convert_Fihhmbi_Type( Get( slices, 222 ));
            rec.fihhyri := Convert_Fihhmbi_Type( Get( slices, 223 ));
            rec.fihhyli := Convert_Fihhmbi_Type( Get( slices, 224 ));
            rec.fihhyni := Convert_Fihhmbi_Type( Get( slices, 225 ));
            rec.fihhypi := Convert_Fihhmbi_Type( Get( slices, 226 ));
            rec.fihhybi := Convert_Fihhmbi_Type( Get( slices, 227 ));
            rec.fihhyti := Convert_Fihhmbi_Type( Get( slices, 228 ));
            rec.fihhyii := Convert_Fihhmbi_Type( Get( slices, 229 ));
            rec.fihhsel := Convert_Fihhsel_Type( Get( slices, 230 ));
            rec.xhwtuk1 := Convert( slices, 231, ( -9.0, -8.0 ) );
            rec.xhwtuk2 := Convert( slices, 232, ( -9.0, -8.0 ) );
            rec.region2 := Convert_Region2_Type( Get( slices, 233 ));
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Hhresp_component ).start_pos = 0 ) then
               index.pointers( Hhresp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Hhresp_component ).counter := index.pointers( Hhresp_component ).counter + 1;
            Put_Index( index_map, index );
            Hhresp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Hhresp_IO.Close( bin_file );
   end Create_Hhresp_Wave_Q;




   procedure Create_Hhsamp_Wave_Q( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Hhsamp_IO.File_Type;
      rec         : Hhsamp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Hhsamp_IO.Create (bin_file, Hhsamp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.fid := Convert( slices, 2 );
            rec.ivnadd := Convert( slices, 3, ( -9.0, -8.0 ) );
            rec.ivia := Convert_Ivia_Type( Get( slices, 4 ));
            rec.iviam := Convert_Iviam_Type( Get( slices, 5 ));
--             rec.ivid := Convert( slices, 6 );
            rec.ivlnc := Convert( slices, 7, ( -9, -1 ) );
            rec.ivtnc := Convert( slices, 8, ( -9, -8, -1 ) );
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 9 ));
            rec.ivosmrh := Convert( slices, 10, ( -9, -8, -1 ) );
            rec.ivnsmrh := Convert( slices, 11, ( -9, -8, -1 ) );
            rec.ivrrefh := Convert_Ivrrefh_Type( Get( slices, 12 ));
            rec.ivconv := Convert_Ivconv_Type( Get( slices, 13 ));
            rec.ivreis := Convert_Ivreis_Type( Get( slices, 14 ));
            rec.ivisst := Convert_Ivisst_Type( Get( slices, 15 ));
            rec.hhdc := Convert_Hhdc_Type( Get( slices, 16 ));
            rec.hhorig := Convert_Hhorig_Type( Get( slices, 17 ));
            rec.xhwght := Convert( slices, 18, ( -9.0, -8.0, -1.0 ) );
            rec.region := Convert_Region_Type( Get( slices, 19 ));
            rec.hhmove := Convert_Hhmove_Type( Get( slices, 20 ));
            rec.ahid := Convert( slices, 21 );
            rec.xhwtuk1 := Convert( slices, 22, ( -9.0, -8.0, -1.0 ) );
            rec.xhwtuk2 := Convert( slices, 23, ( -9.0, -8.0, -1.0 ) );
            rec.strata := Convert( slices, 24, ( -9, -8, -1 ) );
            rec.psu := Convert( slices, 25, ( -9, -8, -1 ) );
            rec.region2 := Convert_Region2_Type( Get( slices, 26 ));
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Hhsamp_component ).start_pos = 0 ) then
               index.pointers( Hhsamp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Hhsamp_component ).counter := index.pointers( Hhsamp_component ).counter + 1;
            Put_Index( index_map, index );
            Hhsamp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Hhsamp_IO.Close( bin_file );
   end Create_Hhsamp_Wave_Q;




   procedure Create_Income_Wave_Q( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Income_IO.File_Type;
      rec         : Income_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Income_IO.Create (bin_file, Income_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.ficode := Convert_Ficode_Type( Get( slices, 3 ));
            rec.frall := Convert_Frall_Type( Get( slices, 4 ));
            rec.fr01 := Convert_Cd1own_Type( Get( slices, 5 ));
            rec.fr02 := Convert_Cd1own_Type( Get( slices, 6 ));
            rec.fr03 := Convert_Cd1own_Type( Get( slices, 7 ));
            rec.fr04 := Convert( slices, 8, ( -9, -8, -2, -1 ) );
            rec.fr05 := Convert_Cd1own_Type( Get( slices, 9 ));
            rec.fr06 := Convert_Cd1own_Type( Get( slices, 10 ));
            rec.fr07 := Convert_Cd1own_Type( Get( slices, 11 ));
            rec.fr08 := Convert_Cd1own_Type( Get( slices, 12 ));
            rec.fr09 := Convert_Cd1own_Type( Get( slices, 13 ));
            rec.fr10 := Convert_Cd1own_Type( Get( slices, 14 ));
            rec.fr11 := Convert_Cd1own_Type( Get( slices, 15 ));
            rec.fr12 := Convert_Cd1own_Type( Get( slices, 16 ));
            rec.fr13 := Convert_Cd1own_Type( Get( slices, 17 ));
            rec.fr14 := Convert_Cd1own_Type( Get( slices, 18 ));
            rec.fr15 := Convert_Cd1own_Type( Get( slices, 19 ));
            rec.fr16 := Convert_Cd1own_Type( Get( slices, 20 ));
            rec.fr17 := Convert_Cd1own_Type( Get( slices, 21 ));
            rec.fr18 := Convert_Fr18_Type( Get( slices, 22 ));
            rec.fr19 := Convert_Fr18_Type( Get( slices, 23 ));
            rec.fr20 := Convert_Fr18_Type( Get( slices, 24 ));
            rec.frnow := Convert_Frnow_Type( Get( slices, 25 ));
            rec.frval := Convert( slices, 26, ( -9.0, -8.0, -3.0, -2.0, -1.0 ) );
            rec.frw := Convert( slices, 27, ( -9.0, -8.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.frjt := Convert_Frjt_Type( Get( slices, 28 ));
            rec.frjtpn := Convert( slices, 29, ( -9, -8, -2, -1 ) );
            rec.fiseq := Convert( slices, 30 );
            rec.frjtvf := Convert_Frjtvf_Type( Get( slices, 31 ));
            rec.fradd := Convert_Cjsck2_Type( Get( slices, 32 ));
            rec.fim09l := Convert( slices, 33, ( -9.0, -8.0, -3.0 ) );
            rec.fim10l := Convert( slices, 34, ( -9.0, -8.0, -3.0 ) );
            rec.fim11l := Convert( slices, 35, ( -9.0, -8.0, -3.0 ) );
            rec.fim12l := Convert( slices, 36, ( -9.0, -8.0, -3.0 ) );
            rec.fim01t := Convert( slices, 37, ( -9.0, -8.0, -3.0 ) );
            rec.fim02t := Convert( slices, 38, ( -9.0, -8.0, -3.0 ) );
            rec.fim03t := Convert( slices, 39, ( -9.0, -8.0, -3.0 ) );
            rec.fim04t := Convert( slices, 40, ( -9.0, -8.0, -3.0 ) );
            rec.fim05t := Convert( slices, 41, ( -9.0, -8.0, -3.0 ) );
            rec.fim06t := Convert( slices, 42, ( -9.0, -8.0, -3.0 ) );
            rec.fim07t := Convert( slices, 43, ( -9.0, -8.0, -3.0 ) );
            rec.fim08t := Convert( slices, 44, ( -9.0, -8.0, -3.0 ) );
            rec.fim09t := Convert( slices, 45, ( -9.0, -8.0, -3.0 ) );
            rec.fim10t := Convert( slices, 46, ( -9.0, -8.0, -3.0 ) );
            rec.fim11t := Convert( slices, 47, ( -9.0, -8.0, -3.0 ) );
            rec.fim12t := Convert( slices, 48, ( -9.0, -8.0, -3.0 ) );
            rec.fim01n := Convert( slices, 49, ( -9.0, -8.0, -3.0 ) );
            rec.fim02n := Convert( slices, 50, ( -9.0, -3.0 ) );
            rec.fim03n := Convert( slices, 51, ( -9.0, -3.0 ) );
            rec.fim04n := Convert( slices, 52, ( -9.0, -3.0 ) );
            rec.frvali := Convert( slices, 53, ( -9, -8, -3, -2, -1 ) );
            rec.pid := Convert( slices, 54 );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Income_component ).start_pos = 0 ) then
               index.pointers( Income_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Income_component ).counter := index.pointers( Income_component ).counter + 1;
            Put_Index( index_map, index );
            Income_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Income_IO.Close( bin_file );
   end Create_Income_Wave_Q;




   procedure Create_Indall_Wave_Q( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Indall_IO.File_Type;
      rec         : Indall_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Indall_IO.Create (bin_file, Indall_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.hgr2r := Convert_Hgr2r_Type( Get( slices, 3 ));
            rec.hgsex := Convert_Hgsex_Type( Get( slices, 4 ));
            rec.hgbm := Convert_Hgbm_Type( Get( slices, 5 ));
            rec.hgby := Convert( slices, 6, ( -9, -8, -2, -1 ) );
            rec.mastat := Convert_Mastat_Type( Get( slices, 7 ));
            rec.hgspn := Convert( slices, 8, ( -9, -8, -2, -1 ) );
            rec.hgemp := Convert_Hgemp_Type( Get( slices, 9 ));
            rec.hgfno := Convert( slices, 10, ( -9, -8, -2, -1 ) );
            rec.hgmno := Convert( slices, 11, ( -9, -8, -2, -1 ) );
            rec.hgra := Convert( slices, 12, ( -9, -8, -2, -1 ) );
            rec.pid := Convert( slices, 13 );
            rec.iviolw := Convert_Iviolw_Type( Get( slices, 14 ));
            rec.ivstat1 := Convert_Ivstat1_Type( Get( slices, 15 ));
            rec.ivelig := Convert_Ivelig_Type( Get( slices, 16 ));
            rec.hhmem := Convert_Hhmem_Type( Get( slices, 17 ));
            rec.newhy := Convert_Newhy_Type( Get( slices, 18 ));
            rec.nemnjn := Convert_Nemnjn_Type( Get( slices, 19 ));
            rec.neyrjn4 := Convert( slices, 20, ( -9, -8, -7, -2, -1 ) );
            rec.ivfio := Convert_Ivfio_Type( Get( slices, 21 ));
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 22 ));
            rec.iodc := Convert_Iodc_Type( Get( slices, 23 ));
            rec.memorig := Convert_Memorig_Type( Get( slices, 24 ));
            rec.age := Convert( slices, 25, ( -9, -8, -2, -1 ) );
            rec.age12 := Convert( slices, 26, ( -9, -8, -2, -1 ) );
            rec.butype := Convert_Butype_Type( Get( slices, 27 ));
            rec.buno := Convert( slices, 28, ( -9, -8 ) );
            rec.nchild := Convert( slices, 29, ( -9, -8 ) );
            rec.depchl := Convert_Depchl_Type( Get( slices, 30 ));
            rec.hoh := Convert_Hoh_Type( Get( slices, 31 ));
            rec.rach16 := Convert_Hhch12_Type( Get( slices, 32 ));
            rec.agei := Convert_Agei_Type( Get( slices, 33 ));
            rec.lrwght := Convert( slices, 34, ( -9.0, -8.0 ) );
            rec.lewght := Convert( slices, 35, ( -9.0, -8.0 ) );
            rec.xrwght := Convert( slices, 36, ( -9.0, -8.0 ) );
            rec.xewght := Convert( slices, 37, ( -9.0, -8.0 ) );
            rec.movest := Convert_Movest_Type( Get( slices, 38 ));
            rec.sampst := Convert_Sampst_Type( Get( slices, 39 ));
            rec.xrwtuk1 := Convert( slices, 40, ( -9.0, -8.0 ) );
            rec.xewtuk1 := Convert( slices, 41, ( -9.0, -8.0 ) );
            rec.xrwtuk2 := Convert( slices, 42, ( -9.0, -8.0 ) );
            rec.xewtuk2 := Convert( slices, 43, ( -9.0, -8.0 ) );
            rec.lrwtsw1 := Convert( slices, 44, ( -9.0, -8.0 ) );
            rec.lewtsw1 := Convert( slices, 45, ( -9.0, -8.0 ) );
            rec.lrwtsw2 := Convert( slices, 46, ( -9.0, -8.0 ) );
            rec.lewtsw2 := Convert( slices, 47, ( -9.0, -8.0 ) );
            rec.lrwtuk1 := Convert( slices, 48, ( -9.0, -8.0 ) );
            rec.lewtuk1 := Convert( slices, 49, ( -9.0, -8.0 ) );
            rec.lrwtuk2 := Convert( slices, 50, ( -9.0, -8.0 ) );
            rec.lewtuk2 := Convert( slices, 51, ( -9.0, -8.0 ) );
            rec.sppid := Convert( slices, 52 );
            rec.fpid := Convert( slices, 53 );
            rec.mpid := Convert( slices, 54 );
            rec.rapid := Convert( slices, 55 );
            rec.distmov := Convert( slices, 56, ( -9.0, -8.0 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Indall_component ).start_pos = 0 ) then
               index.pointers( Indall_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Indall_component ).counter := index.pointers( Indall_component ).counter + 1;
            Put_Index( index_map, index );
            Indall_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Indall_IO.Close( bin_file );
   end Create_Indall_Wave_Q;




   procedure Create_Indresp_Wave_Q( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Indresp_IO.File_Type;
      rec         : Indresp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Indresp_IO.Create (bin_file, Indresp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.doid := Convert( slices, 3, ( -9, -7 ) );
            rec.doim := Convert_Doim_Type( Get( slices, 4 ));
            rec.doiy4 := Convert( slices, 5, ( -9, -8, -7, -2, -1 ) );
            rec.ivlyr := Convert( slices, 6, ( -9, -8, -7 ) );
            rec.ivstat2 := Convert_Ivstat2_Type( Get( slices, 7 ));
            rec.ivsoih := Convert( slices, 8, ( -9, -8 ) );
            rec.ivsoim := Convert( slices, 9, ( -9, -8 ) );
            rec.lknbrd := Convert_Aidpl1_Type( Get( slices, 10 ));
            rec.lkmove := Convert_Lkmove_Type( Get( slices, 11 ));
            rec.lkmovy := Convert_Lkmovy_Type( Get( slices, 12 ));
            rec.xpmove := Convert( slices, 13, ( -9, -8, -7, -2, -1 ) );
            rec.plnew := Convert( slices, 14, ( -9, -8, -7, -2, -1 ) );
            rec.plnowm := Convert_Jbbgm1_Type( Get( slices, 15 ));
            rec.plnowy4 := Convert( slices, 16, ( -9, -8, -7, -2, -1 ) );
            rec.movjb := Convert_Aidpl1_Type( Get( slices, 17 ));
            rec.movjba := Convert_Movjba_Type( Get( slices, 18 ));
            rec.movjbb := Convert_Movjba_Type( Get( slices, 19 ));
            rec.movjbc := Convert_Movjba_Type( Get( slices, 20 ));
            rec.movjbd := Convert_Movjba_Type( Get( slices, 21 ));
            rec.movjbe := Convert_Movjba_Type( Get( slices, 22 ));
            rec.movjbf := Convert_Movjba_Type( Get( slices, 23 ));
            rec.movjbg := Convert_Movjba_Type( Get( slices, 24 ));
            rec.movjbh := Convert_Movjba_Type( Get( slices, 25 ));
            rec.movjbi := Convert_Movjba_Type( Get( slices, 26 ));
            rec.movy1 := Convert_Movy1_Type( Get( slices, 27 ));
            rec.movy2 := Convert_Movy2_Type( Get( slices, 28 ));
            rec.dobm := Convert_Cjsem_Type( Get( slices, 29 ));
            rec.doby := Convert( slices, 30, ( -9, -8, -7, -2, -1 ) );
            rec.sex := Convert_Sex_Type( Get( slices, 31 ));
            rec.mlstat := Convert_Mlstat_Type( Get( slices, 32 ));
            rec.mlchng := Convert_Bscon_Type( Get( slices, 33 ));
            rec.mlchm := Convert_Mlchm_Type( Get( slices, 34 ));
            rec.mlchy4 := Convert( slices, 35, ( -9, -8, -7, -2, -1 ) );
            rec.jbstat := Convert_Jbstat_Type( Get( slices, 36 ));
            rec.edlyr := Convert_Aidpl1_Type( Get( slices, 37 ));
            rec.edtype1 := Convert_Edtype1_Type( Get( slices, 38 ));
            rec.edblyr1 := Convert_Boolean_With_Missing( Get( slices, 39 ));
            rec.edbgm1 := Convert_Edbgm1_Type( Get( slices, 40 ));
            rec.edbgy1 := Convert( slices, 41, ( -9, -8, -7, -2, -1 ) );
            rec.edenm1 := Convert_Edbgm1_Type( Get( slices, 42 ));
            rec.edeny1 := Convert( slices, 43, ( -9, -8, -7, -2, -1 ) );
            rec.edenne1 := Convert_Edenne1_Type( Get( slices, 44 ));
            rec.edfeea1 := Convert_Yes_Or_Missing_Type( Get( slices, 45 ));
            rec.edfeeb1 := Convert_Yes_Or_Missing_Type( Get( slices, 46 ));
            rec.edfeec1 := Convert_Yes_Or_Missing_Type( Get( slices, 47 ));
            rec.edfeed1 := Convert_Yes_Or_Missing_Type( Get( slices, 48 ));
            rec.edfeee1 := Convert_Yes_Or_Missing_Type( Get( slices, 49 ));
            rec.edfeef1 := Convert_Yes_Or_Missing_Type( Get( slices, 50 ));
            rec.edfeeg1 := Convert_Yes_Or_Missing_Type( Get( slices, 51 ));
            rec.edmore1 := Convert_Boolean_With_Missing( Get( slices, 52 ));
            rec.edtype2 := Convert_Edtype1_Type( Get( slices, 53 ));
            rec.edblyr2 := Convert_Boolean_With_Missing( Get( slices, 54 ));
            rec.edbgm2 := Convert_Edbgm1_Type( Get( slices, 55 ));
            rec.edbgy2 := Convert( slices, 56, ( -9, -8, -7, -2, -1 ) );
            rec.edenm2 := Convert_Edbgm1_Type( Get( slices, 57 ));
            rec.edeny2 := Convert( slices, 58, ( -9, -8, -7, -2, -1 ) );
            rec.edenne2 := Convert_Edenne2_Type( Get( slices, 59 ));
            rec.edfeea2 := Convert_Yes_Or_Missing_Type( Get( slices, 60 ));
            rec.edfeeb2 := Convert_Yes_Or_Missing_Type( Get( slices, 61 ));
            rec.edfeec2 := Convert_Yes_Or_Missing_Type( Get( slices, 62 ));
            rec.edfeed2 := Convert_Yes_Or_Missing_Type( Get( slices, 63 ));
            rec.edfeee2 := Convert_Yes_Or_Missing_Type( Get( slices, 64 ));
            rec.edfeef2 := Convert_Yes_Or_Missing_Type( Get( slices, 65 ));
            rec.edfeeg2 := Convert_Yes_Or_Missing_Type( Get( slices, 66 ));
            rec.edmore2 := Convert_Boolean_With_Missing( Get( slices, 67 ));
            rec.edtype3 := Convert_Edtype3_Type( Get( slices, 68 ));
            rec.edblyr3 := Convert_Edblyr3_Type( Get( slices, 69 ));
            rec.edbgm3 := Convert_Edbgm3_Type( Get( slices, 70 ));
            rec.edbgy3 := Convert( slices, 71, ( -9, -8, -7, -2, -1 ) );
            rec.edenm3 := Convert_Edbgm3_Type( Get( slices, 72 ));
            rec.edeny3 := Convert( slices, 73, ( -9, -8, -7, -2, -1 ) );
            rec.edenne3 := Convert_Edenne3_Type( Get( slices, 74 ));
            rec.edfeea3 := Convert_Yes_Or_Missing_Type( Get( slices, 75 ));
            rec.edfeeb3 := Convert_Yes_Or_Missing_Type( Get( slices, 76 ));
            rec.edfeec3 := Convert_Yes_Or_Missing_Type( Get( slices, 77 ));
            rec.edfeed3 := Convert_Yes_Or_Missing_Type( Get( slices, 78 ));
            rec.edfeee3 := Convert_Yes_Or_Missing_Type( Get( slices, 79 ));
            rec.edfeef3 := Convert_Yes_Or_Missing_Type( Get( slices, 80 ));
            rec.edfeeg3 := Convert_Yes_Or_Missing_Type( Get( slices, 81 ));
            rec.plbornd := Convert_Plbornd_Type( Get( slices, 82 ));
            rec.plbornc := Convert_Plbornc_Type( Get( slices, 83 ));
            rec.yr2uk4 := Convert( slices, 84, ( -9, -8, -7, -2, -1 ) );
            rec.citzn1 := Convert( slices, 85, ( -9, -8, -7, -2, -1 ) );
            rec.citzn2 := Convert_Citzn2_Type( Get( slices, 86 ));
            rec.natidb := Convert_Yes_Or_Missing_Type( Get( slices, 87 ));
            rec.natidf := Convert_Yes_Or_Missing_Type( Get( slices, 88 ));
            rec.natidg := Convert_Yes_Or_Missing_Type( Get( slices, 89 ));
            rec.natide := Convert_Yes_Or_Missing_Type( Get( slices, 90 ));
            rec.natida := Convert_Yes_Or_Missing_Type( Get( slices, 91 ));
            rec.natidh := Convert_Natidh_Type( Get( slices, 92 ));
            rec.racel := Convert_Racel_Type( Get( slices, 93 ));
            rec.oprlg5 := Convert_Oprlg5_Type( Get( slices, 94 ));
            rec.oprlg7 := Convert_Cbagef_Type( Get( slices, 95 ));
            rec.paju := Convert_Paju_Type( Get( slices, 96 ));
            rec.pasoc := Convert( slices, 97, ( -9, -8, -7, -2, -1 ) );
            rec.pasoc00 := Convert( slices, 98, ( -9, -8, -7, -2, -1 ) );
            rec.pasemp := Convert_J2semp_Type( Get( slices, 99 ));
            rec.paboss := Convert_Maboss_Type( Get( slices, 100 ));
            rec.pamngr := Convert_Mamngr_Type( Get( slices, 101 ));
            rec.maju := Convert_Maju_Type( Get( slices, 102 ));
            rec.masoc := Convert( slices, 103, ( -9, -8, -7, -2, -1 ) );
            rec.masoc00 := Convert( slices, 104, ( -9, -8, -7, -2, -1 ) );
            rec.masemp := Convert_J2semp_Type( Get( slices, 105 ));
            rec.maboss := Convert_Maboss_Type( Get( slices, 106 ));
            rec.mamngr := Convert_Mamngr_Type( Get( slices, 107 ));
            rec.j1none := Convert_J1none_Type( Get( slices, 108 ));
            rec.j1soc := Convert( slices, 109, ( -9, -8, -7, -2, -1 ) );
            rec.j1soc00 := Convert( slices, 110, ( -9, -8, -7, -2, -1 ) );
            rec.j1semp := Convert_J1semp_Type( Get( slices, 111 ));
            rec.j1boss := Convert_J1boss_Type( Get( slices, 112 ));
            rec.j1mngr := Convert_J1mngr_Type( Get( slices, 113 ));
            rec.lcoh := Convert_Aidpl1_Type( Get( slices, 114 ));
            rec.coh1bm := Convert_Ch1bm_Type( Get( slices, 115 ));
            rec.coh1by := Convert( slices, 116, ( -9, -8, -7, -2, -1 ) );
            rec.coh1mr := Convert_Coh1mr_Type( Get( slices, 117 ));
            rec.coh1em := Convert_Ch1bm_Type( Get( slices, 118 ));
            rec.coh1ey := Convert( slices, 119, ( -9, -8, -7, -2, -1 ) );
            rec.nmar := Convert_Nmar_Type( Get( slices, 120 ));
            rec.lmar1m := Convert_Ch1bm_Type( Get( slices, 121 ));
            rec.lmar1y := Convert( slices, 122, ( -9, -8, -7, -2, -1 ) );
            rec.lprnt := Convert_Lprnt_Type( Get( slices, 123 ));
            rec.lnprnt := Convert( slices, 124, ( -9, -8, -7, -2, -1 ) );
            rec.ch1bm := Convert_Ch1bm_Type( Get( slices, 125 ));
            rec.ch1by := Convert( slices, 126, ( -9, -8, -7, -2, -1 ) );
            rec.school := Convert_School_Type( Get( slices, 127 ));
            rec.scend := Convert( slices, 128, ( -9, -8, -7, -2, -1 ) );
            rec.sctype := Convert_Sctype_Type( Get( slices, 129 ));
            rec.scnow := Convert_Cjsck2_Type( Get( slices, 130 ));
            rec.fetype := Convert_Fetype_Type( Get( slices, 131 ));
            rec.fenow := Convert_Fenow_Type( Get( slices, 132 ));
            rec.feend := Convert( slices, 133, ( -9, -8, -7, -2, -1 ) );
            rec.qfhas := Convert_Bscon_Type( Get( slices, 134 ));
            rec.qfa := Convert_Qfa_Type( Get( slices, 135 ));
            rec.qfb := Convert_Qfb_Type( Get( slices, 136 ));
            rec.qfc := Convert_Qfc_Type( Get( slices, 137 ));
            rec.qfd := Convert_Qfd_Type( Get( slices, 138 ));
            rec.qfe := Convert_Qfe_Type( Get( slices, 139 ));
            rec.qff := Convert_Qff_Type( Get( slices, 140 ));
            rec.qfg := Convert_Qfg_Type( Get( slices, 141 ));
            rec.qfh := Convert_Qfh_Type( Get( slices, 142 ));
            rec.qfi := Convert_Qfi_Type( Get( slices, 143 ));
            rec.qfj := Convert_Qfj_Type( Get( slices, 144 ));
            rec.qfk := Convert_Qfk_Type( Get( slices, 145 ));
            rec.qfl := Convert_Qfl_Type( Get( slices, 146 ));
            rec.qfm := Convert_Qfm_Type( Get( slices, 147 ));
            rec.qfn := Convert_Qfn_Type( Get( slices, 148 ));
            rec.qfed := Convert_Bscon_Type( Get( slices, 149 ));
            rec.qfeda := Convert_Qfeda_Type( Get( slices, 150 ));
            rec.nqfeda := Convert( slices, 151, ( -9, -8, -7, -2, -1 ) );
            rec.qfedb := Convert_Qfedb_Type( Get( slices, 152 ));
            rec.nqfedb := Convert( slices, 153, ( -9, -8, -7, -2, -1 ) );
            rec.qfedc := Convert_Qfedc_Type( Get( slices, 154 ));
            rec.nqfedc := Convert( slices, 155, ( -9, -8, -7, -2, -1 ) );
            rec.qfedd := Convert_Qfedd_Type( Get( slices, 156 ));
            rec.nqfedd := Convert( slices, 157, ( -9, -8, -7, -2, -1 ) );
            rec.qfede := Convert_Qfede_Type( Get( slices, 158 ));
            rec.nqfede := Convert( slices, 159, ( -9, -8, -7, -2, -1 ) );
            rec.qfedf := Convert_Qfedf_Type( Get( slices, 160 ));
            rec.nqfedf := Convert( slices, 161, ( -9, -8, -7, -2, -1 ) );
            rec.qfedg := Convert_Qfedg_Type( Get( slices, 162 ));
            rec.nqfedg := Convert( slices, 163, ( -9, -8, -7, -2, -1 ) );
            rec.qfedh := Convert_Qfedh_Type( Get( slices, 164 ));
            rec.nqfedh := Convert( slices, 165, ( -9, -8, -7, -2, -1 ) );
            rec.qfedi := Convert_Qfedi_Type( Get( slices, 166 ));
            rec.nqfedi := Convert( slices, 167, ( -9, -8, -7, -2, -1 ) );
            rec.qfedj := Convert_Qfedj_Type( Get( slices, 168 ));
            rec.nqfedj := Convert( slices, 169, ( -9, -8, -7, -2, -1 ) );
            rec.qfedt := Convert_Qfedt_Type( Get( slices, 170 ));
            rec.nqfedt := Convert( slices, 171, ( -9, -8, -7, -2, -1 ) );
            rec.qfedu := Convert_Qfedu_Type( Get( slices, 172 ));
            rec.nqfedu := Convert( slices, 173, ( -9, -8, -7, -2, -1 ) );
            rec.qfedk := Convert_Qfedk_Type( Get( slices, 174 ));
            rec.nqfedk := Convert( slices, 175, ( -9, -8, -7, -2, -1 ) );
            rec.qfedl := Convert_Qfedl_Type( Get( slices, 176 ));
            rec.nqfedl := Convert( slices, 177, ( -9, -8, -7, -2, -1 ) );
            rec.qfedm := Convert_Qfedm_Type( Get( slices, 178 ));
            rec.nqfedm := Convert( slices, 179, ( -9, -8, -7, -2, -1 ) );
            rec.qfedn := Convert_Qfedn_Type( Get( slices, 180 ));
            rec.nqfedn := Convert( slices, 181, ( -9, -8, -7, -2, -1 ) );
            rec.qfedo := Convert_Qfedo_Type( Get( slices, 182 ));
            rec.nqfedo := Convert( slices, 183, ( -9, -8, -7, -2, -1 ) );
            rec.qfedp := Convert( slices, 184, ( -9, -8, -7 ) );
            rec.nqfedp := Convert( slices, 185, ( -9, -8, -7, -2, -1 ) );
            rec.qfedq := Convert_Qfedq_Type( Get( slices, 186 ));
            rec.nqfedq := Convert( slices, 187, ( -9, -8, -7, -2, -1 ) );
            rec.qfedr := Convert_Qfedr_Type( Get( slices, 188 ));
            rec.nqfedr := Convert( slices, 189, ( -9, -8, -7, -2, -1 ) );
            rec.qfeds := Convert_Hlprbm_Type( Get( slices, 190 ));
            rec.nqfeds := Convert( slices, 191, ( -9, -8, -7, -2, -1 ) );
            rec.train := Convert_Boolean_With_Missing( Get( slices, 192 ));
            rec.ntrain := Convert( slices, 193, ( -9, -8, -7, -2, -1 ) );
            rec.trplce1 := Convert_Trplce1_Type( Get( slices, 194 ));
            rec.trwhya1 := Convert_Boolean_With_Missing( Get( slices, 195 ));
            rec.trwhyb1 := Convert_Boolean_With_Missing( Get( slices, 196 ));
            rec.trwhyc1 := Convert_Boolean_With_Missing( Get( slices, 197 ));
            rec.trwhyd1 := Convert_Boolean_With_Missing( Get( slices, 198 ));
            rec.trwhye1 := Convert_Boolean_With_Missing( Get( slices, 199 ));
            rec.trq1 := Convert( slices, 200, ( -9, -8, -7 ) );
            rec.tru1 := Convert_Tru1_Type( Get( slices, 201 ));
            rec.trfeea1 := Convert_Nisjsa_Type( Get( slices, 202 ));
            rec.trfeeb1 := Convert_Yes_Or_Missing_Type( Get( slices, 203 ));
            rec.trfeec1 := Convert_Yes_Or_Missing_Type( Get( slices, 204 ));
            rec.trfeee1 := Convert_Yes_Or_Missing_Type( Get( slices, 205 ));
            rec.trfeef1 := Convert_Yes_Or_Missing_Type( Get( slices, 206 ));
            rec.trfeeg1 := Convert_Yes_Or_Missing_Type( Get( slices, 207 ));
            rec.trqlxp1 := Convert_Trqlxp1_Type( Get( slices, 208 ));
            rec.trqlac1 := Convert_Trqlac1_Type( Get( slices, 209 ));
            rec.trmore1 := Convert_Boolean_With_Missing( Get( slices, 210 ));
            rec.trplce2 := Convert_Trplce1_Type( Get( slices, 211 ));
            rec.trwhya2 := Convert_Boolean_With_Missing( Get( slices, 212 ));
            rec.trwhyb2 := Convert_Boolean_With_Missing( Get( slices, 213 ));
            rec.trwhyc2 := Convert_Boolean_With_Missing( Get( slices, 214 ));
            rec.trwhyd2 := Convert_Boolean_With_Missing( Get( slices, 215 ));
            rec.trwhye2 := Convert_Boolean_With_Missing( Get( slices, 216 ));
            rec.trq2 := Convert( slices, 217, ( -9, -8, -7 ) );
            rec.tru2 := Convert_Tru1_Type( Get( slices, 218 ));
            rec.trfeea2 := Convert_Nisjsa_Type( Get( slices, 219 ));
            rec.trfeeb2 := Convert_Yes_Or_Missing_Type( Get( slices, 220 ));
            rec.trfeec2 := Convert_Yes_Or_Missing_Type( Get( slices, 221 ));
            rec.trfeee2 := Convert_Yes_Or_Missing_Type( Get( slices, 222 ));
            rec.trfeef2 := Convert_Yes_Or_Missing_Type( Get( slices, 223 ));
            rec.trfeeg2 := Convert_Yes_Or_Missing_Type( Get( slices, 224 ));
            rec.trqlxp2 := Convert_Trqlxp1_Type( Get( slices, 225 ));
            rec.trqlac2 := Convert_Trqlac1_Type( Get( slices, 226 ));
            rec.trmore2 := Convert_Boolean_With_Missing( Get( slices, 227 ));
            rec.trplce3 := Convert_Trplce1_Type( Get( slices, 228 ));
            rec.trwhya3 := Convert_Boolean_With_Missing( Get( slices, 229 ));
            rec.trwhyb3 := Convert_Boolean_With_Missing( Get( slices, 230 ));
            rec.trwhyc3 := Convert_Boolean_With_Missing( Get( slices, 231 ));
            rec.trwhyd3 := Convert_Boolean_With_Missing( Get( slices, 232 ));
            rec.trwhye3 := Convert_Boolean_With_Missing( Get( slices, 233 ));
            rec.trq3 := Convert( slices, 234, ( -9, -8, -7 ) );
            rec.tru3 := Convert_Tru1_Type( Get( slices, 235 ));
            rec.trfeea3 := Convert_Nisjsa_Type( Get( slices, 236 ));
            rec.trfeeb3 := Convert_Yes_Or_Missing_Type( Get( slices, 237 ));
            rec.trfeec3 := Convert_Yes_Or_Missing_Type( Get( slices, 238 ));
            rec.trfeee3 := Convert_Yes_Or_Missing_Type( Get( slices, 239 ));
            rec.trfeef3 := Convert_Yes_Or_Missing_Type( Get( slices, 240 ));
            rec.trfeeg3 := Convert_Yes_Or_Missing_Type( Get( slices, 241 ));
            rec.trqlxp3 := Convert_Trqlxp1_Type( Get( slices, 242 ));
            rec.trqlac3 := Convert_Trqlac1_Type( Get( slices, 243 ));
            rec.qfrec := Convert_Edblyr3_Type( Get( slices, 244 ));
            rec.qfedx := Convert_Aidpl1_Type( Get( slices, 245 ));
            rec.qfedxa := Convert_Qfedd_Type( Get( slices, 246 ));
            rec.nqfexa := Convert( slices, 247, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxb := Convert_Qfede_Type( Get( slices, 248 ));
            rec.nqfexb := Convert( slices, 249, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxl := Convert_Qfedt_Type( Get( slices, 250 ));
            rec.nqfexl := Convert( slices, 251, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxm := Convert_Qfedxm_Type( Get( slices, 252 ));
            rec.nqfexm := Convert( slices, 253, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxn := Convert_Qfedxn_Type( Get( slices, 254 ));
            rec.nqfexn := Convert( slices, 255, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxo := Convert_Qfedxo_Type( Get( slices, 256 ));
            rec.nqfexo := Convert( slices, 257, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxg := Convert_Qfedm_Type( Get( slices, 258 ));
            rec.nqfexg := Convert( slices, 259, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxh := Convert_Qfedxh_Type( Get( slices, 260 ));
            rec.nqfexh := Convert( slices, 261, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxi := Convert_Qfedo_Type( Get( slices, 262 ));
            rec.nqfexi := Convert( slices, 263, ( -9, -8, -7, -2, -1 ) );
            rec.qfx := Convert_Aidpl1_Type( Get( slices, 264 ));
            rec.qfxc := Convert_Qfc_Type( Get( slices, 265 ));
            rec.qfxd := Convert_Qfd_Type( Get( slices, 266 ));
            rec.qfxe := Convert_Qfe_Type( Get( slices, 267 ));
            rec.qfxf := Convert_Qff_Type( Get( slices, 268 ));
            rec.qfxg := Convert_Qfg_Type( Get( slices, 269 ));
            rec.qfxh := Convert_Qfh_Type( Get( slices, 270 ));
            rec.qfxo := Convert_Qfxo_Type( Get( slices, 271 ));
            rec.qfxp := Convert_Qfxp_Type( Get( slices, 272 ));
            rec.qfxq := Convert_Qfxq_Type( Get( slices, 273 ));
            rec.qfxr := Convert_Qfxr_Type( Get( slices, 274 ));
            rec.qfxk := Convert_Qfk_Type( Get( slices, 275 ));
            rec.qfxl := Convert_Qfl_Type( Get( slices, 276 ));
            rec.qfxm := Convert_Qfm_Type( Get( slices, 277 ));
            rec.qfxn := Convert_Qfn_Type( Get( slices, 278 ));
            rec.birhh := Convert_Aglt20_Type( Get( slices, 279 ));
            rec.mabwly := Convert_Aglt20_Type( Get( slices, 280 ));
            rec.mabwnly := Convert( slices, 281, ( -9, -8, -7 ) );
            rec.bwtpn1 := Convert( slices, 282, ( -9, -8, -7 ) );
            rec.bwtagm1 := Convert( slices, 283, ( -9, -8, -7 ) );
            rec.bwtxp1 := Convert_Boolean_With_Missing( Get( slices, 284 ));
            rec.bwtel1 := Convert_Bwtel_Type( Get( slices, 285 ));
            rec.bwtwk1 := Convert( slices, 286, ( -9, -8, -7, -2, -1 ) );
            rec.bwtkn1 := Convert_Bwtkn_Type( Get( slices, 287 ));
            rec.bwtlb1 := Convert( slices, 288, ( -9, -8, -7, -2, -1 ) );
            rec.bwtoz1 := Convert( slices, 289, ( -9, -8, -7, -2, -1 ) );
            rec.bwtgm1 := Convert( slices, 290, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.bwtg51 := Convert_Bwtg51_Type( Get( slices, 291 ));
            rec.bwtpn2 := Convert( slices, 292, ( -9, -8, -7 ) );
            rec.bwtagm2 := Convert( slices, 293, ( -9, -8, -7 ) );
            rec.bwtxp2 := Convert_Boolean_With_Missing( Get( slices, 294 ));
            rec.bwtel2 := Convert_Bwtel2_Type( Get( slices, 295 ));
            rec.bwtwk2 := Convert( slices, 296, ( -9, -8, -7, -2, -1 ) );
            rec.bwtkn2 := Convert_Bwtkn_Type( Get( slices, 297 ));
            rec.bwtlb2 := Convert( slices, 298, ( -9, -8, -7 ) );
            rec.bwtoz2 := Convert( slices, 299, ( -9, -8, -7, -2, -1 ) );
            rec.bwtgm2 := Convert( slices, 300, ( -9, -8, -7 ) );
            rec.bwtg52 := Convert_Bwtg5_Type( Get( slices, 301 ));
            rec.bwtpn3 := Convert( slices, 302, ( -9, -8, -7 ) );
            rec.bwtagm3 := Convert( slices, 303, ( -9, -8, -7 ) );
            rec.bwtxp3 := Convert_Boolean_With_Missing( Get( slices, 304 ));
            rec.bwtel3 := Convert_Bwtel2_Type( Get( slices, 305 ));
            rec.bwtwk3 := Convert( slices, 306, ( -9, -8, -7, -2, -1 ) );
            rec.bwtkn3 := Convert_Bwtkn_Type( Get( slices, 307 ));
            rec.bwtlb3 := Convert( slices, 308, ( -9, -8, -7 ) );
            rec.bwtoz3 := Convert( slices, 309, ( -9, -8, -7, -2, -1 ) );
            rec.bwtgm3 := Convert( slices, 310, ( -9, -8, -7 ) );
            rec.bwtg53 := Convert_Bwtg5_Type( Get( slices, 311 ));
            rec.wlsha := Convert_Yes_Or_Missing_Type( Get( slices, 312 ));
            rec.wlshb := Convert_Yes_Or_Missing_Type( Get( slices, 313 ));
            rec.wlshc := Convert_Yes_Or_Missing_Type( Get( slices, 314 ));
            rec.wlshd := Convert_Yes_Or_Missing_Type( Get( slices, 315 ));
            rec.wlshe := Convert_Jbwkhrh_Type( Get( slices, 316 ));
            rec.wlshua := Convert_Wlshua_Type( Get( slices, 317 ));
            rec.wlshub := Convert_Wlshua_Type( Get( slices, 318 ));
            rec.wlshuc := Convert_Wlshua_Type( Get( slices, 319 ));
            rec.wlshud := Convert_Wlshua_Type( Get( slices, 320 ));
            rec.wlshue := Convert_Wlshua_Type( Get( slices, 321 ));
            rec.aglt20 := Convert_Aglt20_Type( Get( slices, 322 ));
            rec.scnow2 := Convert_Cjsck2_Type( Get( slices, 323 ));
            rec.infted := Convert_Aglt20_Type( Get( slices, 324 ));
            rec.edasp := Convert_Edasp_Type( Get( slices, 325 ));
            rec.fedasp := Convert_Fedasp_Type( Get( slices, 326 ));
            rec.fedtyp := Convert_Fedtyp_Type( Get( slices, 327 ));
            rec.fedlik := Convert_Fedlik_Type( Get( slices, 328 ));
            rec.fednt1 := Convert_Fednt1_Type( Get( slices, 329 ));
            rec.fednt2 := Convert_Fednt2_Type( Get( slices, 330 ));
            rec.ocfut00 := Convert( slices, 331, ( -9, -8, -7, -2, -1 ) );
            rec.ocfut90 := Convert( slices, 332, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ocimpa := Convert_Ocimpa_Type( Get( slices, 333 ));
            rec.ocimpb := Convert_Ocimpa_Type( Get( slices, 334 ));
            rec.ocimpc := Convert_Ocimpa_Type( Get( slices, 335 ));
            rec.ocimpd := Convert_Ocimpa_Type( Get( slices, 336 ));
            rec.ocimpe := Convert_Ocimpa_Type( Get( slices, 337 ));
            rec.ocimpf := Convert_Ocimpa_Type( Get( slices, 338 ));
            rec.ocimpg := Convert_Ocimpa_Type( Get( slices, 339 ));
            rec.ocimph := Convert_Ocimpa_Type( Get( slices, 340 ));
            rec.ocimpi := Convert_Ocimpa_Type( Get( slices, 341 ));
            rec.ocimpj := Convert_Ocimpa_Type( Get( slices, 342 ));
            rec.ocimpk := Convert_Ocimpa_Type( Get( slices, 343 ));
            rec.ocimpl := Convert_Ocimpa_Type( Get( slices, 344 ));
            rec.futra := Convert( slices, 345, ( -9, -8, -7, -3, -2, -1 ) );
            rec.futrb := Convert( slices, 346, ( -9, -8, -7, -3, -2, -1 ) );
            rec.futrc := Convert( slices, 347, ( -9, -8, -7, -3, -2, -1 ) );
            rec.futrd := Convert( slices, 348, ( -9, -8, -7, -3, -2, -1 ) );
            rec.futre := Convert( slices, 349, ( -9, -8, -7, -3, -2, -1 ) );
            rec.futrf := Convert( slices, 350, ( -9, -8, -7, -3, -2, -1 ) );
            rec.futrg := Convert( slices, 351, ( -9, -8, -7, -3, -2, -1 ) );
            rec.futrh := Convert( slices, 352, ( -9, -8, -7, -3, -2, -1 ) );
            rec.futri := Convert( slices, 353, ( -9, -8, -7, -3, -2, -1 ) );
            rec.futrj := Convert( slices, 354, ( -9, -8, -7, -3, -2, -1 ) );
            rec.futrk := Convert( slices, 355, ( -9, -8, -7, -3, -2, -1 ) );
            rec.futrl := Convert( slices, 356, ( -9, -8, -7, -3, -2, -1 ) );
            rec.crwora := Convert_Boolean_With_Missing( Get( slices, 357 ));
            rec.crworb := Convert_Crworb_Type( Get( slices, 358 ));
            rec.crdark := Convert_Crdark_Type( Get( slices, 359 ));
            rec.crgraf := Convert_Crburg_Type( Get( slices, 360 ));
            rec.crteen := Convert_Crburg_Type( Get( slices, 361 ));
            rec.crdrnk := Convert_Crburg_Type( Get( slices, 362 ));
            rec.crvand := Convert_Crburg_Type( Get( slices, 363 ));
            rec.crrace := Convert_Crburg_Type( Get( slices, 364 ));
            rec.crburg := Convert_Crburg_Type( Get( slices, 365 ));
            rec.crcar := Convert_Crburg_Type( Get( slices, 366 ));
            rec.crmugg := Convert_Crburg_Type( Get( slices, 367 ));
            rec.pcuse := Convert_Boolean_With_Missing( Get( slices, 368 ));
            rec.pcusea := Convert_Yes_Or_Missing_Type( Get( slices, 369 ));
            rec.pcuseb := Convert_Yes_Or_Missing_Type( Get( slices, 370 ));
            rec.pcusec := Convert_Yes_Or_Missing_Type( Get( slices, 371 ));
            rec.pcused := Convert_Yes_Or_Missing_Type( Get( slices, 372 ));
            rec.pcusee := Convert_Yes_Or_Missing_Type( Get( slices, 373 ));
            rec.pcusef := Convert_Yes_Or_Missing_Type( Get( slices, 374 ));
            rec.pcuseg := Convert_Yes_Or_Missing_Type( Get( slices, 375 ));
            rec.pcuseh := Convert_Yes_Or_Missing_Type( Get( slices, 376 ));
            rec.pcusei := Convert_Pcusei_Type( Get( slices, 377 ));
            rec.pcusem := Convert_Pcusem_Type( Get( slices, 378 ));
            rec.pcoftn := Convert_Pcoftn_Type( Get( slices, 379 ));
            rec.ivda := Convert_Ivda_Type( Get( slices, 380 ));
            rec.ivdb := Convert_Ivdb_Type( Get( slices, 381 ));
            rec.ivdc := Convert_Ivdc_Type( Get( slices, 382 ));
            rec.ivdd := Convert_Ivdd_Type( Get( slices, 383 ));
            rec.ivde := Convert_Yes_Or_Missing_Type( Get( slices, 384 ));
            rec.pm0h := Convert( slices, 385, ( -9, -8 ) );
            rec.pm0m := Convert( slices, 386, ( -9, -8 ) );
            rec.hldsbl1 := Convert_Hldsbl1_Type( Get( slices, 387 ));
            rec.hlstat := Convert_Hlstat_Type( Get( slices, 388 ));
            rec.hlprb := Convert( slices, 389, ( -9, -8, -7, -2, -1 ) );
            rec.hlprba := Convert_Hlprba_Type( Get( slices, 390 ));
            rec.hlprbb := Convert_Hlprbb_Type( Get( slices, 391 ));
            rec.hlprbc := Convert_Hlprbc_Type( Get( slices, 392 ));
            rec.hlprbd := Convert_Hlprbd_Type( Get( slices, 393 ));
            rec.hlprbe := Convert_Hlprbe_Type( Get( slices, 394 ));
            rec.hlprbf := Convert_Hlprbf_Type( Get( slices, 395 ));
            rec.hlprbg := Convert_Hlprbg_Type( Get( slices, 396 ));
            rec.hlprbh := Convert_Hlprbh_Type( Get( slices, 397 ));
            rec.hlprbi := Convert_Hlprbi_Type( Get( slices, 398 ));
            rec.hlprbj := Convert_Hlprbj_Type( Get( slices, 399 ));
            rec.hlprbk := Convert_Hlprbk_Type( Get( slices, 400 ));
            rec.hlprbl := Convert_Hlprbl_Type( Get( slices, 401 ));
            rec.hlprbn := Convert_Hlprbn_Type( Get( slices, 402 ));
            rec.hlprbo := Convert_Hlprbo_Type( Get( slices, 403 ));
            rec.hlprbm := Convert_Hlprbm_Type( Get( slices, 404 ));
            rec.hllt := Convert_Bscon_Type( Get( slices, 405 ));
            rec.hllta := Convert_Hllta_Type( Get( slices, 406 ));
            rec.hlltb := Convert_Hlltb_Type( Get( slices, 407 ));
            rec.hlltc := Convert_Hlltc_Type( Get( slices, 408 ));
            rec.hlltd := Convert_Hlltd_Type( Get( slices, 409 ));
            rec.hllte := Convert_Hllte_Type( Get( slices, 410 ));
            rec.hlltw := Convert_Bscon_Type( Get( slices, 411 ));
            rec.hlendw := Convert_Hlendw_Type( Get( slices, 412 ));
            rec.hlltwa := Convert_Hlltwa_Type( Get( slices, 413 ));
            rec.hliv65 := Convert_Hliv65_Type( Get( slices, 414 ));
            rec.adla := Convert_Adla_Type( Get( slices, 415 ));
            rec.adlad := Convert_Adlad_Type( Get( slices, 416 ));
            rec.adlb := Convert_Adla_Type( Get( slices, 417 ));
            rec.adlbd := Convert_Adlad_Type( Get( slices, 418 ));
            rec.adlc := Convert_Adla_Type( Get( slices, 419 ));
            rec.adlcd := Convert_Adlad_Type( Get( slices, 420 ));
            rec.adld := Convert_Adla_Type( Get( slices, 421 ));
            rec.adldd := Convert_Adlad_Type( Get( slices, 422 ));
            rec.adle := Convert_Adla_Type( Get( slices, 423 ));
            rec.adled := Convert_Adlad_Type( Get( slices, 424 ));
            rec.adlf := Convert_Adla_Type( Get( slices, 425 ));
            rec.adlfd := Convert_Adlad_Type( Get( slices, 426 ));
            rec.hl2gp := Convert_Hl2gp_Type( Get( slices, 427 ));
            rec.hl2hop := Convert( slices, 428, ( -9, -8, -7, -2, -1 ) );
            rec.xdts := Convert_Bscon_Type( Get( slices, 429 ));
            rec.nxdts := Convert_Nxdts_Type( Get( slices, 430 ));
            rec.hosp := Convert_Hlsv_Type( Get( slices, 431 ));
            rec.hospd := Convert( slices, 432, ( -9, -8, -7, -2, -1 ) );
            rec.hospch := Convert_Hospch_Type( Get( slices, 433 ));
            rec.hospnhs := Convert_Hospnhs_Type( Get( slices, 434 ));
            rec.hlcvr := Convert_Hlcvr_Type( Get( slices, 435 ));
            rec.hlcvrh := Convert_Hlcvrh_Type( Get( slices, 436 ));
            rec.hlcvrl := Convert( slices, 437, ( -9, -8, -7, -2, -1 ) );
            rec.hlsv := Convert_Hlsv_Type( Get( slices, 438 ));
            rec.hlsva := Convert_Hlsva_Type( Get( slices, 439 ));
            rec.hlsvan := Convert_Hlsvan_Type( Get( slices, 440 ));
            rec.hlsvaf := Convert_Hlsvaf_Type( Get( slices, 441 ));
            rec.hlsvb := Convert_Hlsvb_Type( Get( slices, 442 ));
            rec.hlsvbn := Convert_Hlsvan_Type( Get( slices, 443 ));
            rec.hlsvbf := Convert_Hlsvaf_Type( Get( slices, 444 ));
            rec.hlsvc := Convert_Hlsvc_Type( Get( slices, 445 ));
            rec.hlsvcn := Convert_Hlsvan_Type( Get( slices, 446 ));
            rec.hlsvcf := Convert_Hlsvaf_Type( Get( slices, 447 ));
            rec.hlsvd := Convert_Hlsvd_Type( Get( slices, 448 ));
            rec.hlsvdn := Convert_Hlsvan_Type( Get( slices, 449 ));
            rec.hlsvdf := Convert_Hlsvaf_Type( Get( slices, 450 ));
            rec.hlsve := Convert_Hlsve_Type( Get( slices, 451 ));
            rec.hlsven := Convert_Hlsvan_Type( Get( slices, 452 ));
            rec.hlsvef := Convert_Hlsvaf_Type( Get( slices, 453 ));
            rec.hlsvf := Convert_Hlsvf_Type( Get( slices, 454 ));
            rec.hlsvfn := Convert_Hlsvan_Type( Get( slices, 455 ));
            rec.hlsvff := Convert_Hlsvaf_Type( Get( slices, 456 ));
            rec.hlsvg := Convert_Hlsvg_Type( Get( slices, 457 ));
            rec.hlsvgn := Convert_Hlsvan_Type( Get( slices, 458 ));
            rec.hlsvgf := Convert_Hlsvaf_Type( Get( slices, 459 ));
            rec.hlsvh := Convert_Hlsvh_Type( Get( slices, 460 ));
            rec.hlsvhn := Convert_Hlsvan_Type( Get( slices, 461 ));
            rec.hlsvhf := Convert_Hlsvaf_Type( Get( slices, 462 ));
            rec.hlsvi := Convert_Hlsvi_Type( Get( slices, 463 ));
            rec.hlsvin := Convert_Hlsvan_Type( Get( slices, 464 ));
            rec.hlsvif := Convert_Hlsvaf_Type( Get( slices, 465 ));
            rec.hlsvl := Convert_Hlsvl_Type( Get( slices, 466 ));
            rec.hlsvln := Convert_Hlsvln_Type( Get( slices, 467 ));
            rec.hlsvlf := Convert_Hlsvlf_Type( Get( slices, 468 ));
            rec.hlsvm := Convert_Hlsvm_Type( Get( slices, 469 ));
            rec.hlsvmn := Convert_Hlsvln_Type( Get( slices, 470 ));
            rec.hlsvmf := Convert_Hlsvlf_Type( Get( slices, 471 ));
            rec.hlsvj := Convert_Hlsvj_Type( Get( slices, 472 ));
            rec.hlsvjn := Convert_Hlsvan_Type( Get( slices, 473 ));
            rec.hlsvjf := Convert_Hlsvaf_Type( Get( slices, 474 ));
            rec.hlsvk := Convert_Hlsvk_Type( Get( slices, 475 ));
            rec.hlsvkn := Convert_Hlsvan_Type( Get( slices, 476 ));
            rec.hlsvkf := Convert_Hlsvaf_Type( Get( slices, 477 ));
            rec.hlck := Convert_Aidpl1_Type( Get( slices, 478 ));
            rec.hlcka := Convert_Hlcka_Type( Get( slices, 479 ));
            rec.hlckan := Convert_Hlckan_Type( Get( slices, 480 ));
            rec.hlckb := Convert_Hlcka_Type( Get( slices, 481 ));
            rec.hlckbn := Convert_Hlckan_Type( Get( slices, 482 ));
            rec.hlckc := Convert_Hlcka_Type( Get( slices, 483 ));
            rec.hlckcn := Convert_Hlckan_Type( Get( slices, 484 ));
            rec.hlckd := Convert_Hlcka_Type( Get( slices, 485 ));
            rec.hlckdn := Convert_Hlckan_Type( Get( slices, 486 ));
            rec.hlcke := Convert_Hlcka_Type( Get( slices, 487 ));
            rec.hlcken := Convert_Hlckan_Type( Get( slices, 488 ));
            rec.hlcki := Convert_Hlcki_Type( Get( slices, 489 ));
            rec.hlckin := Convert_Hlckin_Type( Get( slices, 490 ));
            rec.hlckf := Convert_Hlcka_Type( Get( slices, 491 ));
            rec.hlckfn := Convert_Hlckan_Type( Get( slices, 492 ));
            rec.hlckg := Convert_Hlcka_Type( Get( slices, 493 ));
            rec.hlckgn := Convert_Hlckan_Type( Get( slices, 494 ));
            rec.hlckh := Convert_Hlcka_Type( Get( slices, 495 ));
            rec.hlckhn := Convert_Hlckan_Type( Get( slices, 496 ));
            rec.smoker := Convert_Bscon_Type( Get( slices, 497 ));
            rec.ncigs := Convert( slices, 498, ( -9, -8, -7, -2, -1 ) );
            rec.cbage := Convert_Cbage_Type( Get( slices, 499 ));
            rec.lchmor := Convert_Lchmor_Type( Get( slices, 500 ));
            rec.lchmorn := Convert( slices, 501, ( -9, -8, -7, -2, -1 ) );
            rec.spinhh := Convert_Hhch12_Type( Get( slices, 502 ));
            rec.aidhh := Convert_Aidhh_Type( Get( slices, 503 ));
            rec.aidhua := Convert( slices, 504, ( -9, -8, -7, -1 ) );
            rec.aidhub := Convert( slices, 505, ( -9, -8, -7 ) );
            rec.aidhuc := Convert( slices, 506, ( -9, -8, -7 ) );
            rec.aidxhh := Convert_Aidxhh_Type( Get( slices, 507 ));
            rec.naidxhh := Convert_Naidxhh_Type( Get( slices, 508 ));
            rec.aidhu1 := Convert_Aidhu1_Type( Get( slices, 509 ));
            rec.aidhu2 := Convert_Aidhu2_Type( Get( slices, 510 ));
            rec.aidhrs := Convert_Aidhrs_Type( Get( slices, 511 ));
            rec.ivma := Convert_Ivda_Type( Get( slices, 512 ));
            rec.ivmb := Convert_Ivdb_Type( Get( slices, 513 ));
            rec.ivmc := Convert_Ivec_Type( Get( slices, 514 ));
            rec.ivmd := Convert_Ivdd_Type( Get( slices, 515 ));
            rec.ivme := Convert_Ivee_Type( Get( slices, 516 ));
            rec.pe0h := Convert( slices, 517, ( -9, -8 ) );
            rec.pe0m := Convert( slices, 518, ( -9, -8 ) );
            rec.jbhas := Convert_Frnow_Type( Get( slices, 519 ));
            rec.jboff := Convert_Jboff_Type( Get( slices, 520 ));
            rec.jboffy := Convert_Jboffy_Type( Get( slices, 521 ));
            rec.jbterm1 := Convert_Jbterm1_Type( Get( slices, 522 ));
            rec.jbterm2 := Convert_Jbterm2_Type( Get( slices, 523 ));
            rec.jbck1 := Convert_Jbck1_Type( Get( slices, 524 ));
            rec.jbsocp := Convert_Hldsbl1_Type( Get( slices, 525 ));
            rec.jbsoc := Convert( slices, 526, ( -9, -8, -2, -1 ) );
            rec.jbsoc00 := Convert( slices, 527, ( -9, -8, -2, -1 ) );
            rec.jbck2 := Convert_Jbck2_Type( Get( slices, 528 ));
            rec.jbsocr := Convert_Bscon_Type( Get( slices, 529 ));
            rec.jbck3 := Convert_Jbck3_Type( Get( slices, 530 ));
            rec.jbsicp := Convert_Bscon_Type( Get( slices, 531 ));
            rec.jbsic92 := Convert( slices, 532, ( -9, -8, -7, -2, -1 ) );
            rec.jbck4 := Convert_Jbck4_Type( Get( slices, 533 ));
            rec.jbsicr := Convert_Bscon_Type( Get( slices, 534 ));
            rec.jbck5 := Convert_Jbck5_Type( Get( slices, 535 ));
            rec.jbempp := Convert_Bscon_Type( Get( slices, 536 ));
            rec.jbck6 := Convert_Jbck6_Type( Get( slices, 537 ));
            rec.jbempr := Convert_Bscon_Type( Get( slices, 538 ));
            rec.jbck7 := Convert_Jbck7_Type( Get( slices, 539 ));
            rec.jbsempp := Convert_Jbsempp_Type( Get( slices, 540 ));
            rec.jbsempr := Convert_Jbsempp_Type( Get( slices, 541 ));
            rec.jbsemp := Convert_Jbsemp_Type( Get( slices, 542 ));
            rec.jbck8 := Convert_Jbck8_Type( Get( slices, 543 ));
            rec.jbprom := Convert_Bscon_Type( Get( slices, 544 ));
            rec.jbchgd := Convert( slices, 545, ( -9, -8, -7, -2, -1 ) );
            rec.jbchgm := Convert_Cjsem_Type( Get( slices, 546 ));
            rec.jbchgy4 := Convert( slices, 547, ( -9, -8, -7, -2, -1 ) );
            rec.jbchgly := Convert_Jbchgly_Type( Get( slices, 548 ));
            rec.jbcspl := Convert_Bscon_Type( Get( slices, 549 ));
            rec.jbck9 := Convert_Jbck9_Type( Get( slices, 550 ));
            rec.jbmngp := Convert_Bscon_Type( Get( slices, 551 ));
            rec.jbmngr := Convert_Jbmngr_Type( Get( slices, 552 ));
            rec.jbck10 := Convert_Jbck10_Type( Get( slices, 553 ));
            rec.jbsectp := Convert_Bscon_Type( Get( slices, 554 ));
            rec.jbsect := Convert_Jbsect_Type( Get( slices, 555 ));
            rec.jbck11 := Convert_Jbck11_Type( Get( slices, 556 ));
            rec.jbsizep := Convert_Bscon_Type( Get( slices, 557 ));
            rec.jbsize := Convert_Jbsize_Type( Get( slices, 558 ));
            rec.jbhrs := Convert( slices, 559, ( -9, -8, -7, -2, -1 ) );
            rec.jbot := Convert( slices, 560, ( -9, -8, -7, -2, -1 ) );
            rec.jbotpd := Convert( slices, 561, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbhrlk := Convert_Jbhrlk_Type( Get( slices, 562 ));
            rec.jbpl := Convert_Jbpl_Type( Get( slices, 563 ));
            rec.jbttwt := Convert( slices, 564, ( -9, -8, -7, -3, -2, -1 ) );
            rec.jbttwm := Convert_Jbttwm_Type( Get( slices, 565 ));
            rec.jbsat2 := Convert( slices, 566, ( -9, -8, -7, -2, -1 ) );
            rec.jbsat4 := Convert_Jbsat4_Type( Get( slices, 567 ));
            rec.jbsat6 := Convert_Jbsat4_Type( Get( slices, 568 ));
            rec.jbsat7 := Convert_Jbsat_Type( Get( slices, 569 ));
            rec.jbsat := Convert_Jbsat_Type( Get( slices, 570 ));
            rec.paygl := Convert( slices, 571, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.paygw := Convert( slices, 572, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.paynl := Convert( slices, 573, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.paynw := Convert( slices, 574, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.pytc := Convert_Pytc_Type( Get( slices, 575 ));
            rec.pywftc := Convert( slices, 576, ( -9, -8, -7, -2, -1 ) );
            rec.pywftcw := Convert( slices, 577, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.payslp := Convert_Payslp_Type( Get( slices, 578 ));
            rec.payusl := Convert_Aidpl1_Type( Get( slices, 579 ));
            rec.payu := Convert( slices, 580, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.payuw := Convert( slices, 581, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.payug := Convert_Paylyg_Type( Get( slices, 582 ));
            rec.paydf1 := Convert_Paydf1_Type( Get( slices, 583 ));
            rec.paydf2 := Convert_Paydf2_Type( Get( slices, 584 ));
            rec.paydf3 := Convert_Paydf3_Type( Get( slices, 585 ));
            rec.paydf4 := Convert_Paydf4_Type( Get( slices, 586 ));
            rec.paydf5 := Convert_Paydf5_Type( Get( slices, 587 ));
            rec.paydf6 := Convert_Paydf6_Type( Get( slices, 588 ));
            rec.paydf7 := Convert_Paydf7_Type( Get( slices, 589 ));
            rec.paydf9 := Convert_Paydf9_Type( Get( slices, 590 ));
            rec.paydf8 := Convert_Paydf8_Type( Get( slices, 591 ));
            rec.paytyp := Convert_Paytyp_Type( Get( slices, 592 ));
            rec.ovtpay := Convert_Bpar16_Type( Get( slices, 593 ));
            rec.extrate := Convert( slices, 594, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.extrest := Convert_Basrest_Type( Get( slices, 595 ));
            rec.basrate := Convert( slices, 596, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.basrest := Convert_Basrest_Type( Get( slices, 597 ));
            rec.ovtrate := Convert( slices, 598, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.ovtrest := Convert_Basrest_Type( Get( slices, 599 ));
            rec.jbperfp := Convert_Coh1mr_Type( Get( slices, 600 ));
            rec.jbonus := Convert_Aidpl1_Type( Get( slices, 601 ));
            rec.jbonam := Convert( slices, 602, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbong := Convert_Jbong_Type( Get( slices, 603 ));
            rec.jbrise := Convert_Aidpl1_Type( Get( slices, 604 ));
            rec.tujbpl := Convert_Aidpl1_Type( Get( slices, 605 ));
            rec.tuin1 := Convert_Aidpl1_Type( Get( slices, 606 ));
            rec.jbopps := Convert_Aidpl1_Type( Get( slices, 607 ));
            rec.jbpen := Convert_Aidpl1_Type( Get( slices, 608 ));
            rec.jbpenm := Convert_Aidpl1_Type( Get( slices, 609 ));
            rec.jbtime := Convert_Jbtime_Type( Get( slices, 610 ));
            rec.jbwkhra := Convert_Yes_Or_Missing_Type( Get( slices, 611 ));
            rec.jbwkhrb := Convert_Yes_Or_Missing_Type( Get( slices, 612 ));
            rec.jbwkhrc := Convert_Yes_Or_Missing_Type( Get( slices, 613 ));
            rec.jbwkhrd := Convert_Yes_Or_Missing_Type( Get( slices, 614 ));
            rec.jbwkhre := Convert_Yes_Or_Missing_Type( Get( slices, 615 ));
            rec.jbwkhrf := Convert_Yes_Or_Missing_Type( Get( slices, 616 ));
            rec.jbwkhrg := Convert_Yes_Or_Missing_Type( Get( slices, 617 ));
            rec.jbwkhrh := Convert_Jbwkhrh_Type( Get( slices, 618 ));
            rec.payck1 := Convert_Payck1_Type( Get( slices, 619 ));
            rec.pays := Convert( slices, 620, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.paysw := Convert( slices, 621, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.paysg := Convert_Paylyg_Type( Get( slices, 622 ));
            rec.jbbgd1 := Convert( slices, 623, ( -9, -8, -7, -2, -1 ) );
            rec.jbbgm1 := Convert_Jbbgm1_Type( Get( slices, 624 ));
            rec.jbbgy41 := Convert( slices, 625, ( -9, -8, -7, -2, -1 ) );
            rec.jbbgly1 := Convert_Jbbgly1_Type( Get( slices, 626 ));
            rec.payly := Convert( slices, 627, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.paylyw := Convert( slices, 628, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.paylyg := Convert_Paylyg_Type( Get( slices, 629 ));
            rec.jsboss := Convert_Jsboss_Type( Get( slices, 630 ));
            rec.jssize := Convert_Jssize_Type( Get( slices, 631 ));
            rec.jshrs := Convert( slices, 632, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jshrlk := Convert_Jbhrlk_Type( Get( slices, 633 ));
            rec.jstime := Convert_Jstime_Type( Get( slices, 634 ));
            rec.jstypeb := Convert_Jstypeb_Type( Get( slices, 635 ));
            rec.jsaccs := Convert_Jsaccs_Type( Get( slices, 636 ));
            rec.jspart := Convert_Jspart_Type( Get( slices, 637 ));
            rec.jsprbm := Convert_Cjsbgm_Type( Get( slices, 638 ));
            rec.jsprby4 := Convert( slices, 639, ( -9, -8, -7, -2, -1 ) );
            rec.jsprem := Convert_Cjsbgm_Type( Get( slices, 640 ));
            rec.jsprey4 := Convert( slices, 641, ( -9, -8, -7, -2, -1 ) );
            rec.jsprf := Convert( slices, 642, ( -9, -8, -7, -3, -2, -1 ) );
            rec.jsprls := Convert_Jsprls_Type( Get( slices, 643 ));
            rec.jsprtx := Convert_Jsprtx_Type( Get( slices, 644 ));
            rec.jsprni := Convert_Jsprni_Type( Get( slices, 645 ));
            rec.jspayu := Convert( slices, 646, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jspayw := Convert( slices, 647, ( -9.0, -8.0, -7.0, -4.0, -2.0, -1.0 ) );
            rec.jspytx := Convert_Jspytx_Type( Get( slices, 648 ));
            rec.jspyni := Convert_Jspyni_Type( Get( slices, 649 ));
            rec.jspl := Convert_Jspl_Type( Get( slices, 650 ));
            rec.jsttwt := Convert( slices, 651, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.jsttwm := Convert_Jsttwm_Type( Get( slices, 652 ));
            rec.jssat1 := Convert_Jssat1_Type( Get( slices, 653 ));
            rec.jssat2 := Convert_Jbsat_Type( Get( slices, 654 ));
            rec.jssat4 := Convert_Jbsat_Type( Get( slices, 655 ));
            rec.jssat5 := Convert_Jbsat_Type( Get( slices, 656 ));
            rec.jssat := Convert_Jbsat_Type( Get( slices, 657 ));
            rec.jsck1 := Convert_Jsck1_Type( Get( slices, 658 ));
            rec.jssame := Convert_Bscon_Type( Get( slices, 659 ));
            rec.jsbgd1 := Convert( slices, 660, ( -9, -8, -7, -2, -1 ) );
            rec.jsbgm1 := Convert_Jbbgm1_Type( Get( slices, 661 ));
            rec.jsbgy41 := Convert( slices, 662, ( -9, -8, -7, -2, -1 ) );
            rec.jsbgly1 := Convert( slices, 663, ( -9, -8, -7 ) );
            rec.jblkcha := Convert_Jblkcha_Type( Get( slices, 664 ));
            rec.jbxpcha := Convert_Jblkcha_Type( Get( slices, 665 ));
            rec.jblkchb := Convert_Boolean_With_Missing( Get( slices, 666 ));
            rec.jbxpchb := Convert_Boolean_With_Missing( Get( slices, 667 ));
            rec.jblkchc := Convert_Boolean_With_Missing( Get( slices, 668 ));
            rec.jbxpchc := Convert_Boolean_With_Missing( Get( slices, 669 ));
            rec.jblkchd := Convert_Boolean_With_Missing( Get( slices, 670 ));
            rec.jbxpchd := Convert_Boolean_With_Missing( Get( slices, 671 ));
            rec.jblkche := Convert_Boolean_With_Missing( Get( slices, 672 ));
            rec.jbxpche := Convert_Boolean_With_Missing( Get( slices, 673 ));
            rec.rach12 := Convert_Hhch12_Type( Get( slices, 674 ));
            rec.jbchc1 := Convert_Jbchc1_Type( Get( slices, 675 ));
            rec.jbchc2 := Convert_Jbchc2_Type( Get( slices, 676 ));
            rec.jbchc3 := Convert_Jbchc3_Type( Get( slices, 677 ));
            rec.xpchcf := Convert_Xpchcf_Type( Get( slices, 678 ));
            rec.xpchc := Convert( slices, 679, ( -9, -8, -7, -2, -1 ) );
            rec.huxpch := Convert_Huxpch_Type( Get( slices, 680 ));
            rec.hunurs := Convert_Hunurs_Type( Get( slices, 681 ));
            rec.julk1 := Convert_Aidpl1_Type( Get( slices, 682 ));
            rec.julk4 := Convert_Bscon_Type( Get( slices, 683 ));
            rec.julka := Convert_Boolean_With_Missing( Get( slices, 684 ));
            rec.julkb := Convert_Boolean_With_Missing( Get( slices, 685 ));
            rec.julkc := Convert_Boolean_With_Missing( Get( slices, 686 ));
            rec.julkd := Convert_Boolean_With_Missing( Get( slices, 687 ));
            rec.julke := Convert_Boolean_With_Missing( Get( slices, 688 ));
            rec.julkjb := Convert_Aidpl1_Type( Get( slices, 689 ));
            rec.jubgn := Convert_Boolean_With_Missing( Get( slices, 690 ));
            rec.juspec := Convert_Juspec_Type( Get( slices, 691 ));
            rec.jusoc := Convert( slices, 692, ( -9, -8, -7, -2, -1 ) );
            rec.jusoc00 := Convert( slices, 693, ( -9, -8, -7, -2, -1 ) );
            rec.juhrsx := Convert( slices, 694, ( -9, -8, -7, -2, -1 ) );
            rec.jupayx := Convert( slices, 695, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jupayl := Convert( slices, 696, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.juhrsl := Convert( slices, 697, ( -9, -8, -7, -2, -1 ) );
            rec.eprosh := Convert_Cohxpm2_Type( Get( slices, 698 ));
            rec.eaage := Convert_Eaage_Type( Get( slices, 699 ));
            rec.jbub := Convert_Bscon_Type( Get( slices, 700 ));
            rec.jbuby := Convert_Jbuby_Type( Get( slices, 701 ));
            rec.j2has := Convert_Aidpl1_Type( Get( slices, 702 ));
            rec.j2soc := Convert( slices, 703, ( -9, -8, -7, -2, -1 ) );
            rec.j2soc00 := Convert( slices, 704, ( -9, -8, -7, -2, -1 ) );
            rec.j2semp := Convert_J2semp_Type( Get( slices, 705 ));
            rec.j2hrs := Convert( slices, 706, ( -9, -8, -7, -2, -1 ) );
            rec.j2pay := Convert( slices, 707, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ivea := Convert_Ivda_Type( Get( slices, 708 ));
            rec.iveb := Convert_Ivdb_Type( Get( slices, 709 ));
            rec.ivec := Convert_Ivec_Type( Get( slices, 710 ));
            rec.ived := Convert_Ivdd_Type( Get( slices, 711 ));
            rec.ivee := Convert_Ivee_Type( Get( slices, 712 ));
            rec.cjsck1 := Convert_Cjsck1_Type( Get( slices, 713 ));
            rec.cjsbgd := Convert( slices, 714, ( -9, -8, -7, -2, -1 ) );
            rec.cjsbgm := Convert_Cjsbgm_Type( Get( slices, 715 ));
            rec.cjsbgy4 := Convert( slices, 716, ( -9, -8, -7, -2, -1 ) );
            rec.cjsbly := Convert_Cjsbly_Type( Get( slices, 717 ));
            rec.cjsck2 := Convert_Cjsck2_Type( Get( slices, 718 ));
            rec.cjsck3 := Convert_Bscon_Type( Get( slices, 719 ));
            rec.cjsstly := Convert_Cjsstly_Type( Get( slices, 720 ));
            rec.cjsed := Convert( slices, 721, ( -9, -8, -7, -2, -1 ) );
            rec.cjsem := Convert_Cjsem_Type( Get( slices, 722 ));
            rec.cjsey4 := Convert( slices, 723, ( -9, -8, -7, -2, -1 ) );
            rec.cjscjs := Convert_Cjscjs_Type( Get( slices, 724 ));
            rec.cjsck4 := Convert_Cjsck2_Type( Get( slices, 725 ));
            rec.jhstpy := Convert_Jhstpy_Type( Get( slices, 726 ));
            rec.jbhad := Convert_Aidpl1_Type( Get( slices, 727 ));
            rec.jlend4 := Convert( slices, 728, ( -9, -8, -7, -2, -1 ) );
            rec.jlsoc := Convert( slices, 729, ( -9, -8, -7, -2, -1 ) );
            rec.jlsoc00 := Convert( slices, 730, ( -9, -8, -7, -2, -1 ) );
            rec.jlsic92 := Convert( slices, 731, ( -9, -8, -7 ) );
            rec.jlsemp := Convert_J2semp_Type( Get( slices, 732 ));
            rec.jlboss := Convert_Aidpl1_Type( Get( slices, 733 ));
            rec.jlmngr := Convert_Jlmngr_Type( Get( slices, 734 ));
            rec.jlsize := Convert_Jlsize_Type( Get( slices, 735 ));
            rec.ivja := Convert_Ivda_Type( Get( slices, 736 ));
            rec.ivjb := Convert_Ivdb_Type( Get( slices, 737 ));
            rec.ivjc := Convert_Ivec_Type( Get( slices, 738 ));
            rec.ivjd := Convert_Ivdd_Type( Get( slices, 739 ));
            rec.ivje := Convert_Ivee_Type( Get( slices, 740 ));
            rec.pv0h := Convert( slices, 741, ( -9, -8, -7 ) );
            rec.pv0m := Convert( slices, 742, ( -9, -8, -7 ) );
            rec.opsoca := Convert_Ophla_Type( Get( slices, 743 ));
            rec.opsocb := Convert_Opsocb_Type( Get( slices, 744 ));
            rec.opsocc := Convert_Ophlb_Type( Get( slices, 745 ));
            rec.opsocd := Convert_Opsocd_Type( Get( slices, 746 ));
            rec.opsoce := Convert_Opsocd_Type( Get( slices, 747 ));
            rec.opsocf := Convert_Opsocd_Type( Get( slices, 748 ));
            rec.vote1 := Convert_Aidpl1_Type( Get( slices, 749 ));
            rec.vote2 := Convert_Aidpl1_Type( Get( slices, 750 ));
            rec.vote3 := Convert_Vote3_Type( Get( slices, 751 ));
            rec.vote4 := Convert_Vote3_Type( Get( slices, 752 ));
            rec.vote5 := Convert_Vote5_Type( Get( slices, 753 ));
            rec.vote7 := Convert_Vote7_Type( Get( slices, 754 ));
            rec.vote8 := Convert_Vote8_Type( Get( slices, 755 ));
            rec.vote6 := Convert_Vote6_Type( Get( slices, 756 ));
            rec.swvt1 := Convert_Swvt1_Type( Get( slices, 757 ));
            rec.swvt2 := Convert_Swvt2_Type( Get( slices, 758 ));
            rec.swvt3 := Convert_Swvt2_Type( Get( slices, 759 ));
            rec.swpop1 := Convert_Swpop1_Type( Get( slices, 760 ));
            rec.swpop2 := Convert_Swpop2_Type( Get( slices, 761 ));
            rec.swpop3 := Convert_Swpop3_Type( Get( slices, 762 ));
            rec.swpop4 := Convert_Swpop3_Type( Get( slices, 763 ));
            rec.nipop5 := Convert_Nipop5_Type( Get( slices, 764 ));
            rec.opdev2 := Convert_Opdev2_Type( Get( slices, 765 ));
            rec.orgm := Convert_Aidpl1_Type( Get( slices, 766 ));
            rec.orgma := Convert_Orgma_Type( Get( slices, 767 ));
            rec.orgaa := Convert_Orgaa_Type( Get( slices, 768 ));
            rec.orgmb := Convert_Orgmb_Type( Get( slices, 769 ));
            rec.orgab := Convert_Orgab_Type( Get( slices, 770 ));
            rec.orgmc := Convert_Orgmc_Type( Get( slices, 771 ));
            rec.orgac := Convert_Orgac_Type( Get( slices, 772 ));
            rec.orgmd := Convert_Orgmd_Type( Get( slices, 773 ));
            rec.orgad := Convert_Orgad_Type( Get( slices, 774 ));
            rec.orgme := Convert_Orgme_Type( Get( slices, 775 ));
            rec.orgae := Convert_Orgae_Type( Get( slices, 776 ));
            rec.orgmf := Convert_Orgmf_Type( Get( slices, 777 ));
            rec.orgaf := Convert_Orgaf_Type( Get( slices, 778 ));
            rec.orgmg := Convert_Orgmg_Type( Get( slices, 779 ));
            rec.orgag := Convert_Orgag_Type( Get( slices, 780 ));
            rec.orgmp := Convert_Orgmp_Type( Get( slices, 781 ));
            rec.orgap := Convert_Orgap_Type( Get( slices, 782 ));
            rec.orgmq := Convert_Orgmq_Type( Get( slices, 783 ));
            rec.orgaq := Convert_Orgaq_Type( Get( slices, 784 ));
            rec.orgmo := Convert_Orgmo_Type( Get( slices, 785 ));
            rec.orgao := Convert_Orgao_Type( Get( slices, 786 ));
            rec.orgmh := Convert_Orgmh_Type( Get( slices, 787 ));
            rec.orgah := Convert_Orgah_Type( Get( slices, 788 ));
            rec.orgmi := Convert_Orgmi_Type( Get( slices, 789 ));
            rec.orgai := Convert_Orgai_Type( Get( slices, 790 ));
            rec.orgmj := Convert_Orgmj_Type( Get( slices, 791 ));
            rec.orgaj := Convert_Orgaj_Type( Get( slices, 792 ));
            rec.orgmk := Convert_Orgmk_Type( Get( slices, 793 ));
            rec.orgak := Convert_Orgak_Type( Get( slices, 794 ));
            rec.orgml := Convert_Orgml_Type( Get( slices, 795 ));
            rec.orgal := Convert_Orgal_Type( Get( slices, 796 ));
            rec.orgmm := Convert_Orgmm_Type( Get( slices, 797 ));
            rec.orgam := Convert_Orgam_Type( Get( slices, 798 ));
            rec.orga := Convert_Aidpl1_Type( Get( slices, 799 ));
            rec.trust := Convert_Trust_Type( Get( slices, 800 ));
            rec.frna := Convert_Frna_Type( Get( slices, 801 ));
            rec.frnb := Convert_Frna_Type( Get( slices, 802 ));
            rec.frnc := Convert_Coh1mr_Type( Get( slices, 803 ));
            rec.hhmpch := Convert_Cjsck2_Type( Get( slices, 804 ));
            rec.hhch16 := Convert_Hhch16_Type( Get( slices, 805 ));
            rec.schosa := Convert_Schosa_Type( Get( slices, 806 ));
            rec.schos1 := Convert_Schos1_Type( Get( slices, 807 ));
            rec.schos2 := Convert_Schos2_Type( Get( slices, 808 ));
            rec.hscimp := Convert_Hscimp_Type( Get( slices, 809 ));
            rec.plykid := Convert_Leikid_Type( Get( slices, 810 ));
            rec.leikid := Convert_Leikid_Type( Get( slices, 811 ));
            rec.kidopa := Convert_Coh1mr_Type( Get( slices, 812 ));
            rec.kidsee := Convert_Kidsee_Type( Get( slices, 813 ));
            rec.kidwe := Convert_Holkid_Type( Get( slices, 814 ));
            rec.kidhol := Convert_Holkid_Type( Get( slices, 815 ));
            rec.kidfar := Convert_Farkid_Type( Get( slices, 816 ));
            rec.kidrel := Convert_Kidrel_Type( Get( slices, 817 ));
            rec.ohch16 := Convert_Ohch16_Type( Get( slices, 818 ));
            rec.seekid := Convert_Seekid_Type( Get( slices, 819 ));
            rec.wekid := Convert_Holkid_Type( Get( slices, 820 ));
            rec.holkid := Convert_Holkid_Type( Get( slices, 821 ));
            rec.farkid := Convert_Farkid_Type( Get( slices, 822 ));
            rec.relkid := Convert_Kidrel_Type( Get( slices, 823 ));
            rec.ivva := Convert_Ivva_Type( Get( slices, 824 ));
            rec.ivvb := Convert_Ivdb_Type( Get( slices, 825 ));
            rec.ivvc := Convert_Ivfc_Type( Get( slices, 826 ));
            rec.ivvd := Convert_Ivdd_Type( Get( slices, 827 ));
            rec.ivve := Convert_Ivee_Type( Get( slices, 828 ));
            rec.pf0h := Convert( slices, 829, ( -9, -8 ) );
            rec.pf0m := Convert( slices, 830, ( -9, -8 ) );
            rec.f101 := Convert_F101_Type( Get( slices, 831 ));
            rec.f102 := Convert_F102_Type( Get( slices, 832 ));
            rec.f103 := Convert_F103_Type( Get( slices, 833 ));
            rec.f104 := Convert( slices, 834, ( -9, -8, -7 ) );
            rec.f105 := Convert_F105_Type( Get( slices, 835 ));
            rec.f106 := Convert_F106_Type( Get( slices, 836 ));
            rec.f107 := Convert_F107_Type( Get( slices, 837 ));
            rec.f116 := Convert_F116_Type( Get( slices, 838 ));
            rec.f118 := Convert_F118_Type( Get( slices, 839 ));
            rec.f119 := Convert_F119_Type( Get( slices, 840 ));
            rec.f121 := Convert_F121_Type( Get( slices, 841 ));
            rec.f122 := Convert_F122_Type( Get( slices, 842 ));
            rec.f125 := Convert_F125_Type( Get( slices, 843 ));
            rec.f126 := Convert_F126_Type( Get( slices, 844 ));
            rec.f127 := Convert_F127_Type( Get( slices, 845 ));
            rec.f128 := Convert_F128_Type( Get( slices, 846 ));
            rec.f132 := Convert_F132_Type( Get( slices, 847 ));
            rec.f135 := Convert_F135_Type( Get( slices, 848 ));
            rec.f137 := Convert_F137_Type( Get( slices, 849 ));
            rec.f138 := Convert_F138_Type( Get( slices, 850 ));
            rec.f139 := Convert_F139_Type( Get( slices, 851 ));
            rec.f140 := Convert_F140_Type( Get( slices, 852 ));
            rec.f141 := Convert_F141_Type( Get( slices, 853 ));
            rec.f142 := Convert_F142_Type( Get( slices, 854 ));
            rec.f143 := Convert_F143_Type( Get( slices, 855 ));
            rec.f144 := Convert_F144_Type( Get( slices, 856 ));
            rec.f151 := Convert_F151_Type( Get( slices, 857 ));
            rec.f152 := Convert_F152_Type( Get( slices, 858 ));
            rec.f153 := Convert_F153_Type( Get( slices, 859 ));
            rec.f154 := Convert_F154_Type( Get( slices, 860 ));
            rec.f155 := Convert_F155_Type( Get( slices, 861 ));
            rec.f156 := Convert_F156_Type( Get( slices, 862 ));
            rec.f157 := Convert_F157_Type( Get( slices, 863 ));
            rec.f158 := Convert_F158_Type( Get( slices, 864 ));
            rec.f159 := Convert_F159_Type( Get( slices, 865 ));
            rec.rsrpen := Convert_Cbagef_Type( Get( slices, 866 ));
            rec.rpencr := Convert_Cbagef_Type( Get( slices, 867 ));
            rec.rdsben := Convert_Cbagef_Type( Get( slices, 868 ));
            rec.rdsbn16 := Convert_Yes_Or_Missing_Type( Get( slices, 869 ));
            rec.rdsbn18 := Convert_Yes_Or_Missing_Type( Get( slices, 870 ));
            rec.rdsbn19 := Convert_Yes_Or_Missing_Type( Get( slices, 871 ));
            rec.rdsbn21 := Convert_Yes_Or_Missing_Type( Get( slices, 872 ));
            rec.rdsbn22 := Convert_Yes_Or_Missing_Type( Get( slices, 873 ));
            rec.rdsbn25 := Convert_Yes_Or_Missing_Type( Get( slices, 874 ));
            rec.rdsbn26 := Convert_Yes_Or_Missing_Type( Get( slices, 875 ));
            rec.rdsbn27 := Convert_Yes_Or_Missing_Type( Get( slices, 876 ));
            rec.rdsbn28 := Convert_Yes_Or_Missing_Type( Get( slices, 877 ));
            rec.ris := Convert_Yes_Or_Missing_Type( Get( slices, 878 ));
            rec.rjsa := Convert_Yes_Or_Missing_Type( Get( slices, 879 ));
            rec.nisjsa := Convert_Nisjsa_Type( Get( slices, 880 ));
            rec.mach18 := Convert_Mach18_Type( Get( slices, 881 ));
            rec.rchben := Convert_Cbagef_Type( Get( slices, 882 ));
            rec.rhben := Convert_Cbagef_Type( Get( slices, 883 ));
            rec.nfhs1 := Convert_Nfhs1_Type( Get( slices, 884 ));
            rec.nfhs2 := Convert_Nfhs1_Type( Get( slices, 885 ));
            rec.nfhs3 := Convert_Nfhs1_Type( Get( slices, 886 ));
            rec.nfhs4 := Convert_Nfhs1_Type( Get( slices, 887 ));
            rec.nfhs5 := Convert_Nfhs1_Type( Get( slices, 888 ));
            rec.nfhs6 := Convert_Nfhs1_Type( Get( slices, 889 ));
            rec.nfhs7 := Convert_Nfhs1_Type( Get( slices, 890 ));
            rec.nfhs8 := Convert_Nfhs1_Type( Get( slices, 891 ));
            rec.nfhs9 := Convert_Nfhs1_Type( Get( slices, 892 ));
            rec.nfhs10 := Convert_Nfhs1_Type( Get( slices, 893 ));
            rec.nfhs11 := Convert_Nfhs1_Type( Get( slices, 894 ));
            rec.nfhs12 := Convert_Nfhs1_Type( Get( slices, 895 ));
            rec.nfh1 := Convert_Cbagef_Type( Get( slices, 896 ));
            rec.nfh2 := Convert_Cbagef_Type( Get( slices, 897 ));
            rec.nfh3 := Convert_Cbagef_Type( Get( slices, 898 ));
            rec.nfh4 := Convert_Cbagef_Type( Get( slices, 899 ));
            rec.nfh5 := Convert_Cbagef_Type( Get( slices, 900 ));
            rec.nfh6 := Convert_Cbagef_Type( Get( slices, 901 ));
            rec.nfh7 := Convert_Cbagef_Type( Get( slices, 902 ));
            rec.nfh8 := Convert_Cbagef_Type( Get( slices, 903 ));
            rec.nfh9 := Convert_Cbagef_Type( Get( slices, 904 ));
            rec.nfh10 := Convert_Cbagef_Type( Get( slices, 905 ));
            rec.nfh11 := Convert_Cbagef_Type( Get( slices, 906 ));
            rec.nfh12 := Convert_Cbagef_Type( Get( slices, 907 ));
            rec.nf1 := Convert( slices, 908, ( -9, -8, -7, -2, -1 ) );
            rec.nipens := Convert_Cbagef_Type( Get( slices, 909 ));
            rec.niserps := Convert_Cbagef_Type( Get( slices, 910 ));
            rec.fisit := Convert_Fisit_Type( Get( slices, 911 ));
            rec.fisitc := Convert( slices, 912, ( -9, -8, -7, -2, -1 ) );
            rec.fisity := Convert_Fisity_Type( Get( slices, 913 ));
            rec.fisitx := Convert( slices, 914, ( -9, -8, -7, -2, -1 ) );
            rec.fiyrdia := Convert( slices, 915, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.fiyrdb1 := Convert_Boolean_With_Missing( Get( slices, 916 ));
            rec.fiyrdb2 := Convert_Boolean_With_Missing( Get( slices, 917 ));
            rec.fiyrdb3 := Convert_Boolean_With_Missing( Get( slices, 918 ));
            rec.fiyrdb4 := Convert_Boolean_With_Missing( Get( slices, 919 ));
            rec.fiyrdb5 := Convert_Boolean_With_Missing( Get( slices, 920 ));
            rec.fiyrdb6 := Convert_Boolean_With_Missing( Get( slices, 921 ));
            rec.save := Convert_Aidpl1_Type( Get( slices, 922 ));
            rec.saved := Convert( slices, 923, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.savey1 := Convert_Savey1_Type( Get( slices, 924 ));
            rec.savey2 := Convert_Savey1_Type( Get( slices, 925 ));
            rec.savreg := Convert_Savreg_Type( Get( slices, 926 ));
            rec.savlt := Convert_Savlt_Type( Get( slices, 927 ));
            rec.pppen := Convert_Aidpl1_Type( Get( slices, 928 ));
            rec.pck1 := Convert( slices, 929, ( -9, -8, -7 ) );
            rec.penvrf := Convert_Hldsbl1_Type( Get( slices, 930 ));
            rec.pck2 := Convert( slices, 931, ( -9, -8, -7 ) );
            rec.penb4 := Convert_Penb4_Type( Get( slices, 932 ));
            rec.penb4y4 := Convert( slices, 933, ( -9, -8, -7, -2, -1 ) );
            rec.penb4v := Convert( slices, 934, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.penb4w := Convert( slices, 935, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.penyr4 := Convert( slices, 936, ( -9, -8, -7, -2, -1 ) );
            rec.penadd := Convert_Aidpl1_Type( Get( slices, 937 ));
            rec.penadv := Convert( slices, 938, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.penadw := Convert( slices, 939, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.windf := Convert_Debt_Type( Get( slices, 940 ));
            rec.windfa := Convert_Windfa_Type( Get( slices, 941 ));
            rec.windfay := Convert( slices, 942, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windfb := Convert_Windfb_Type( Get( slices, 943 ));
            rec.windfby := Convert( slices, 944, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windfc := Convert_Windfc_Type( Get( slices, 945 ));
            rec.windfcy := Convert( slices, 946, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windfd := Convert_Windfd_Type( Get( slices, 947 ));
            rec.windfdy := Convert( slices, 948, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windff := Convert_Windff_Type( Get( slices, 949 ));
            rec.windffy := Convert( slices, 950, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windfg := Convert_Windfg_Type( Get( slices, 951 ));
            rec.windfgy := Convert( slices, 952, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windfh := Convert_Nisjsa_Type( Get( slices, 953 ));
            rec.windfhy := Convert( slices, 954, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.xpmeal := Convert_Xpleis_Type( Get( slices, 955 ));
            rec.xpleis := Convert_Xpleis_Type( Get( slices, 956 ));
            rec.ftexhh := Convert_Aidpl1_Type( Get( slices, 957 ));
            rec.ftexa := Convert_Ftexa_Type( Get( slices, 958 ));
            rec.ftexa1 := Convert_Ftexa1_Type( Get( slices, 959 ));
            rec.ftexa2 := Convert_Ftexa2_Type( Get( slices, 960 ));
            rec.ftexa3 := Convert_Ftexa3_Type( Get( slices, 961 ));
            rec.ftexa4 := Convert_Ftexa4_Type( Get( slices, 962 ));
            rec.ftexa5 := Convert_Ftexa5_Type( Get( slices, 963 ));
            rec.ftexa6 := Convert_Ftexa6_Type( Get( slices, 964 ));
            rec.ftexav := Convert( slices, 965, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ftexaw := Convert( slices, 966, ( -9.0, -8.0, -7.0, -5.0, -3.0, -2.0, -1.0 ) );
            rec.ftexb := Convert_Ftexb_Type( Get( slices, 967 ));
            rec.ftexb1 := Convert_Ftexa1_Type( Get( slices, 968 ));
            rec.ftexb2 := Convert_Ftexa2_Type( Get( slices, 969 ));
            rec.ftexb3 := Convert_Ftexa3_Type( Get( slices, 970 ));
            rec.ftexb4 := Convert_Ftexa4_Type( Get( slices, 971 ));
            rec.ftexb5 := Convert_Ftexa5_Type( Get( slices, 972 ));
            rec.ftexb6 := Convert_Ftexa6_Type( Get( slices, 973 ));
            rec.ftexbv := Convert( slices, 974, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ftexbw := Convert( slices, 975, ( -9.0, -8.0, -7.0, -5.0, -3.0, -2.0, -1.0 ) );
            rec.ftexc := Convert_Ftexc_Type( Get( slices, 976 ));
            rec.ftexc1 := Convert_Ftexa1_Type( Get( slices, 977 ));
            rec.ftexc2 := Convert_Ftexa2_Type( Get( slices, 978 ));
            rec.ftexc3 := Convert_Ftexa3_Type( Get( slices, 979 ));
            rec.ftexc4 := Convert_Ftexa4_Type( Get( slices, 980 ));
            rec.ftexc5 := Convert_Ftexa5_Type( Get( slices, 981 ));
            rec.ftexc6 := Convert_Ftexa6_Type( Get( slices, 982 ));
            rec.ftexcv := Convert( slices, 983, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ftexcw := Convert( slices, 984, ( -9.0, -8.0, -7.0, -5.0, -3.0, -2.0, -1.0 ) );
            rec.hubuys := Convert_Hubuys_Type( Get( slices, 985 ));
            rec.hufrys := Convert_Hubuys_Type( Get( slices, 986 ));
            rec.humops := Convert_Hubuys_Type( Get( slices, 987 ));
            rec.huiron := Convert_Hubuys_Type( Get( slices, 988 ));
            rec.hhch12 := Convert_Hhch12_Type( Get( slices, 989 ));
            rec.husits := Convert_Husits_Type( Get( slices, 990 ));
            rec.howlng := Convert( slices, 991, ( -9, -8, -7, -3, -2, -1 ) );
            rec.caruse := Convert_Caruse_Type( Get( slices, 992 ));
            rec.mobuse := Convert_Mobuse_Type( Get( slices, 993 ));
            rec.qallif1 := Convert_Qallif1_Type( Get( slices, 994 ));
            rec.qallif2 := Convert_Qallif2_Type( Get( slices, 995 ));
            rec.qallif3 := Convert_Qallif2_Type( Get( slices, 996 ));
            rec.qallif4 := Convert_Qallif2_Type( Get( slices, 997 ));
            rec.ivfa := Convert_Ivda_Type( Get( slices, 998 ));
            rec.ivfb := Convert_Ivdb_Type( Get( slices, 999 ));
            rec.ivfc := Convert_Ivfc_Type( Get( slices, 1000 ));
            rec.ivfd := Convert_Ivdd_Type( Get( slices, 1001 ));
            rec.ivfe := Convert_Ivee_Type( Get( slices, 1002 ));
            rec.ivfoih := Convert( slices, 1003, ( -9, -8 ) );
            rec.ivfoim := Convert( slices, 1004, ( -9, -8 ) );
            rec.ivsc := Convert_Ivsc_Type( Get( slices, 1005 ));
            rec.iv1 := Convert_Hhch12_Type( Get( slices, 1006 ));
            rec.iv2 := Convert_Iv2_Type( Get( slices, 1007 ));
            rec.iv4 := Convert_Iv4_Type( Get( slices, 1008 ));
            rec.iv5 := Convert_Iv5_Type( Get( slices, 1009 ));
            rec.iv5aa := Convert_Iv5aa_Type( Get( slices, 1010 ));
            rec.iv5ab := Convert_Iv5ab_Type( Get( slices, 1011 ));
            rec.iv5ac := Convert_Iv5ac_Type( Get( slices, 1012 ));
            rec.iv6a := Convert_Hhch12_Type( Get( slices, 1013 ));
            rec.iv6b := Convert_Hhch12_Type( Get( slices, 1014 ));
            rec.iv6c := Convert_Hhch12_Type( Get( slices, 1015 ));
            rec.iv6d := Convert_Hhch12_Type( Get( slices, 1016 ));
            rec.iv6e := Convert_Hhch12_Type( Get( slices, 1017 ));
            rec.iv6f := Convert_Hhch12_Type( Get( slices, 1018 ));
            rec.iv7 := Convert( slices, 1019, ( -9, -8, -7 ) );
            rec.iv9 := Convert_Aglt20_Type( Get( slices, 1020 ));
            rec.iv10no := Convert_Iv10no_Type( Get( slices, 1021 ));
            rec.iv10a := Convert_Yes_Or_Missing_Type( Get( slices, 1022 ));
            rec.iv10b := Convert_Yes_Or_Missing_Type( Get( slices, 1023 ));
            rec.iv10c := Convert_Yes_Or_Missing_Type( Get( slices, 1024 ));
            rec.iv10d := Convert_Yes_Or_Missing_Type( Get( slices, 1025 ));
            rec.iv10e := Convert_Yes_Or_Missing_Type( Get( slices, 1026 ));
            rec.iv10f := Convert_Yes_Or_Missing_Type( Get( slices, 1027 ));
            rec.iv10g := Convert_Yes_Or_Missing_Type( Get( slices, 1028 ));
            rec.iv10h := Convert_Yes_Or_Missing_Type( Get( slices, 1029 ));
            rec.iv10i := Convert_Yes_Or_Missing_Type( Get( slices, 1030 ));
            rec.iv10j := Convert_Yes_Or_Missing_Type( Get( slices, 1031 ));
            rec.iv10k := Convert_Yes_Or_Missing_Type( Get( slices, 1032 ));
            rec.iv10l := Convert_Yes_Or_Missing_Type( Get( slices, 1033 ));
            rec.ghqa := Convert_Ghqa_Type( Get( slices, 1034 ));
            rec.ghqb := Convert_Ghqb_Type( Get( slices, 1035 ));
            rec.ghqc := Convert_Ghqc_Type( Get( slices, 1036 ));
            rec.ghqd := Convert_Ghqc_Type( Get( slices, 1037 ));
            rec.ghqe := Convert_Ghqe_Type( Get( slices, 1038 ));
            rec.ghqf := Convert_Ghqe_Type( Get( slices, 1039 ));
            rec.ghqg := Convert_Ghqc_Type( Get( slices, 1040 ));
            rec.ghqh := Convert_Ghqc_Type( Get( slices, 1041 ));
            rec.ghqi := Convert_Ghqb_Type( Get( slices, 1042 ));
            rec.ghqj := Convert_Ghqe_Type( Get( slices, 1043 ));
            rec.ghqk := Convert_Ghqe_Type( Get( slices, 1044 ));
            rec.ghql := Convert_Ghqc_Type( Get( slices, 1045 ));
            rec.opfama := Convert_Opfama_Type( Get( slices, 1046 ));
            rec.opfamb := Convert_Opfama_Type( Get( slices, 1047 ));
            rec.opfamc := Convert_Opfama_Type( Get( slices, 1048 ));
            rec.opfamd := Convert_Opfama_Type( Get( slices, 1049 ));
            rec.opfame := Convert_Opfama_Type( Get( slices, 1050 ));
            rec.opfamf := Convert_Opfama_Type( Get( slices, 1051 ));
            rec.opfamg := Convert_Opfama_Type( Get( slices, 1052 ));
            rec.opfamh := Convert_Opfama_Type( Get( slices, 1053 ));
            rec.opfami := Convert_Opfama_Type( Get( slices, 1054 ));
            rec.lfsat1 := Convert_Lfsat1_Type( Get( slices, 1055 ));
            rec.lfsat2 := Convert_Lfsat1_Type( Get( slices, 1056 ));
            rec.lfsat3 := Convert_Lfsat1_Type( Get( slices, 1057 ));
            rec.lfsat4 := Convert_Lfsat1_Type( Get( slices, 1058 ));
            rec.lfsat5 := Convert_Lfsat1_Type( Get( slices, 1059 ));
            rec.lfsat6 := Convert_Lfsat1_Type( Get( slices, 1060 ));
            rec.lfsat7 := Convert_Lfsat1_Type( Get( slices, 1061 ));
            rec.lfsat8 := Convert_Lfsat1_Type( Get( slices, 1062 ));
            rec.lfsato := Convert_Lfsat1_Type( Get( slices, 1063 ));
            rec.lfsatl := Convert( slices, 1064, ( -9, -8, -7, -2, -1 ) );
            rec.xsupa := Convert_Xsupa_Type( Get( slices, 1065 ));
            rec.xsupb := Convert_Xsupa_Type( Get( slices, 1066 ));
            rec.xsupc := Convert_Xsupa_Type( Get( slices, 1067 ));
            rec.ssupa := Convert_Ssupa_Type( Get( slices, 1068 ));
            rec.ssupb := Convert_Ssupa_Type( Get( slices, 1069 ));
            rec.ssupc := Convert_Ssupa_Type( Get( slices, 1070 ));
            rec.ssupd := Convert_Ssupa_Type( Get( slices, 1071 ));
            rec.ssupe := Convert_Ssupa_Type( Get( slices, 1072 ));
            rec.ssup1 := Convert_Netsx1_Type( Get( slices, 1073 ));
            rec.ssupr2r := Convert_Ssupr2r_Type( Get( slices, 1074 ));
            rec.prrs2i := Convert_Prrs2i_Type( Get( slices, 1075 ));
            rec.pripn := Convert( slices, 1076, ( -9, -8 ) );
            rec.prwhy := Convert_Prwhy_Type( Get( slices, 1077 ));
            rec.pplevr := Convert_Plever_Type( Get( slices, 1078 ));
            rec.presbgm := Convert_Presbgm_Type( Get( slices, 1079 ));
            rec.presby4 := Convert( slices, 1080, ( -9, -8, -7, -2, -1 ) );
            rec.presly := Convert_Presly_Type( Get( slices, 1081 ));
            rec.prfehq := Convert_Prfehq_Type( Get( slices, 1082 ));
            rec.prsehq := Convert_Prsehq_Type( Get( slices, 1083 ));
            rec.prjbft := Convert_Prjbft_Type( Get( slices, 1084 ));
            rec.prjbbgm := Convert_Presbgm_Type( Get( slices, 1085 ));
            rec.prjbby4 := Convert( slices, 1086, ( -9, -8, -7, -2, -1 ) );
            rec.prjbly := Convert_Prjbly_Type( Get( slices, 1087 ));
            rec.prearn := Convert_Prearn_Type( Get( slices, 1088 ));
            rec.prf101 := Convert_Prf101_Type( Get( slices, 1089 ));
            rec.prf102 := Convert_Prf102_Type( Get( slices, 1090 ));
            rec.prf116 := Convert_Prf116_Type( Get( slices, 1091 ));
            rec.prf131 := Convert_Prf131_Type( Get( slices, 1092 ));
            rec.prf135 := Convert_Prf135_Type( Get( slices, 1093 ));
            rec.prf137 := Convert_Prf137_Type( Get( slices, 1094 ));
            rec.prf139 := Convert_Prf139_Type( Get( slices, 1095 ));
            rec.prf125 := Convert_Prf125_Type( Get( slices, 1096 ));
            rec.prf141 := Convert_Prf141_Type( Get( slices, 1097 ));
            rec.prf143 := Convert_Prf143_Type( Get( slices, 1098 ));
            rec.prf107 := Convert_Prf107_Type( Get( slices, 1099 ));
            rec.prfirn := Convert_Prfirn_Type( Get( slices, 1100 ));
            rec.prfitb := Convert_Prfitb_Type( Get( slices, 1101 ));
            rec.ivpa := Convert_Ivpa_Type( Get( slices, 1102 ));
            rec.ivpb := Convert_Ivpb_Type( Get( slices, 1103 ));
            rec.ivpc := Convert_Ivpc_Type( Get( slices, 1104 ));
            rec.ivpd := Convert_Ivpd_Type( Get( slices, 1105 ));
            rec.ivpe := Convert_Ivpe_Type( Get( slices, 1106 ));
            rec.thrpop := Convert_Bscon_Type( Get( slices, 1107 ));
            rec.thhrpw := Convert_Bscon_Type( Get( slices, 1108 ));
            rec.telqly := Convert_Bscon_Type( Get( slices, 1109 ));
            rec.tlhqly := Convert_Tlhqly_Type( Get( slices, 1110 ));
            rec.telqal := Convert_Bscon_Type( Get( slices, 1111 ));
            rec.telhtq := Convert_Telhtq_Type( Get( slices, 1112 ));
            rec.trpen := Convert_Bscon_Type( Get( slices, 1113 ));
            rec.trben1 := Convert_Bscon_Type( Get( slices, 1114 ));
            rec.trben2 := Convert_Bscon_Type( Get( slices, 1115 ));
            rec.tropay := Convert_Bscon_Type( Get( slices, 1116 ));
            rec.pid := Convert( slices, 1117 );
            rec.iviolw := Convert_Iviolw_Type( Get( slices, 1118 ));
            rec.hhmem := Convert_Hhmem_Type( Get( slices, 1119 ));
            rec.newhy := Convert_Newhy_Type( Get( slices, 1120 ));
            rec.nemnjn := Convert_Nemnjn_Type( Get( slices, 1121 ));
            rec.neyrjn4 := Convert( slices, 1122, ( -9, -8, -7, -2, -1 ) );
            rec.ivfio := Convert_Ivfio_Type( Get( slices, 1123 ));
            rec.iodc := Convert_Iodc_Type( Get( slices, 1124 ));
            rec.memorig := Convert_Memorig_Type( Get( slices, 1125 ));
            rec.hgr2r := Convert_Hgr2r_Type( Get( slices, 1126 ));
            rec.hgsex := Convert_Hgsex_Type( Get( slices, 1127 ));
            rec.hgbm := Convert_Hgbm_Type( Get( slices, 1128 ));
            rec.hgby := Convert( slices, 1129, ( -2, -1 ) );
            rec.mastat := Convert_Mastat_Type( Get( slices, 1130 ));
            rec.hgspn := Convert( slices, 1131, ( -9, -8, -2, -1 ) );
            rec.hgemp := Convert_Hgemp_Type( Get( slices, 1132 ));
            rec.hgfno := Convert( slices, 1133, ( -9, -8, -2, -1 ) );
            rec.hgmno := Convert( slices, 1134, ( -9, -8, -2, -1 ) );
            rec.hgra := Convert( slices, 1135, ( -9, -8, -2, -1 ) );
            rec.age := Convert( slices, 1136, ( -9, -8 ) );
            rec.age12 := Convert( slices, 1137, ( -9, -8 ) );
            rec.butype := Convert_Butype_Type( Get( slices, 1138 ));
            rec.buno := Convert( slices, 1139, ( -9, -8 ) );
            rec.nchild := Convert( slices, 1140, ( -9, -8 ) );
            rec.hoh := Convert_Hoh_Type( Get( slices, 1141 ));
            rec.rach16 := Convert_Hhch12_Type( Get( slices, 1142 ));
            rec.sampst := Convert_Sampst_Type( Get( slices, 1143 ));
            rec.movest := Convert_Movest_Type( Get( slices, 1144 ));
            rec.region := Convert_Region_Type( Get( slices, 1145 ));
            rec.hhsize := Convert( slices, 1146, ( -9, -8 ) );
            rec.hhtype := Convert_Hhtype_Type( Get( slices, 1147 ));
            rec.tenure := Convert_Tenure_Type( Get( slices, 1148 ));
            rec.qfedhi := Convert_Qfedhi_Type( Get( slices, 1149 ));
            rec.qfvoc := Convert_Qfvoc_Type( Get( slices, 1150 ));
            rec.qfachi := Convert_Qfachi_Type( Get( slices, 1151 ));
            rec.jbft := Convert_Jbft_Type( Get( slices, 1152 ));
            rec.payg := Convert( slices, 1153, ( -9.0, -8.0, -7.0 ) );
            rec.payn := Convert( slices, 1154, ( -9.0, -8.0, -7.0 ) );
            rec.paygu := Convert( slices, 1155, ( -9.0, -8.0, -7.0 ) );
            rec.paynu := Convert( slices, 1156, ( -9.0, -8.0, -7.0 ) );
            rec.paygty := Convert( slices, 1157, ( -9.0, -8.0, -7.0 ) );
            rec.paygly := Convert( slices, 1158, ( -9.0, -8.0, -7.0 ) );
            rec.paynty := Convert( slices, 1159, ( -9.0, -8.0, -7.0 ) );
            rec.paynly := Convert( slices, 1160, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jsprof := Convert( slices, 1161, ( -9.0, -8.0, -7.0 ) );
            rec.jsloss := Convert( slices, 1162, ( -9.0, -8.0, -7.0 ) );
            rec.jspayg := Convert( slices, 1163, ( -9.0, -8.0, -7.0 ) );
            rec.cjsten := Convert( slices, 1164, ( -9.0, -8.0, -7.0 ) );
            rec.cjswk9 := Convert( slices, 1165, ( -9.0, -8.0, -7.0 ) );
            rec.jlid := Convert_Jlid_Type( Get( slices, 1166 ));
            rec.jlyid := Convert_Jlyid_Type( Get( slices, 1167 ));
            rec.jtyid := Convert_Jtyid_Type( Get( slices, 1168 ));
            rec.jbseg := Convert_Jbseg_Type( Get( slices, 1169 ));
            rec.jbgold := Convert( slices, 1170, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbrgsc := Convert_Jbrgsc_Type( Get( slices, 1171 ));
            rec.jbisco := Convert( slices, 1172 );
            rec.jbcssm := Convert( slices, 1173, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbcssf := Convert( slices, 1174, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbhgs := Convert( slices, 1175, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbsec := Convert_Jbsec_Type( Get( slices, 1176 ));
            rec.njbwks := Convert( slices, 1177, ( -9.0, -8.0, -7.0 ) );
            rec.njuwks := Convert( slices, 1178, ( -9.0, -8.0, -7.0 ) );
            rec.njiwks := Convert( slices, 1179, ( -9.0, -8.0, -7.0 ) );
            rec.njbnew := Convert( slices, 1180, ( -9, -8, -7 ) );
            rec.njbsp := Convert( slices, 1181, ( -9, -8, -7 ) );
            rec.njusp := Convert( slices, 1182, ( -9, -8, -7 ) );
            rec.njisp := Convert( slices, 1183, ( -9, -8, -7 ) );
            rec.jbstatl := Convert( slices, 1184, ( -9, -8, -7, -2, -1 ) );
            rec.jbstatt := Convert( slices, 1185, ( -9, -8, -7, -2, -1 ) );
            rec.jbsocly := Convert( slices, 1186, ( -9, -8, -7 ) );
            rec.jlseg := Convert_Jlseg_Type( Get( slices, 1187 ));
            rec.jlgold := Convert( slices, 1188, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlrgsc := Convert_Jlrgsc_Type( Get( slices, 1189 ));
            rec.jlisco := Convert( slices, 1190 );
            rec.jlcssm := Convert( slices, 1191, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlcssf := Convert( slices, 1192, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlhgs := Convert( slices, 1193, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlsec := Convert_Jlsec_Type( Get( slices, 1194 ));
            rec.norgm := Convert( slices, 1195, ( -9, -8, -7 ) );
            rec.norga := Convert( slices, 1196, ( -9, -8, -7 ) );
            rec.vote := Convert_Vote_Type( Get( slices, 1197 ));
            rec.fiyrdic := Convert( slices, 1198, ( -9.0, -8.0, -7.0 ) );
            rec.fimnp := Convert( slices, 1199, ( -9.0, -8.0, -7.0 ) );
            rec.fimnb := Convert( slices, 1200, ( -9.0, -8.0, -7.0 ) );
            rec.fimni := Convert( slices, 1201, ( -9.0, -8.0, -7.0 ) );
            rec.fimnt := Convert( slices, 1202, ( -9.0, -8.0, -7.0 ) );
            rec.fimnl := Convert( slices, 1203, ( -9.0, -8.0, -7.0 ) );
            rec.fimnnl := Convert( slices, 1204, ( -9.0, -8.0, -7.0 ) );
            rec.fimn := Convert( slices, 1205, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrl := Convert( slices, 1206, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrnl := Convert( slices, 1207, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrp := Convert( slices, 1208, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrb := Convert( slices, 1209, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrt := Convert( slices, 1210, ( -9.0, -8.0, -7.0 ) );
            rec.fiyri := Convert( slices, 1211, ( -9.0, -8.0, -7.0 ) );
            rec.fiyr := Convert( slices, 1212, ( -9.0, -8.0, -7.0 ) );
            rec.fihhmn := Convert( slices, 1213, ( -9.0, -8.0, -7.0 ) );
            rec.hlghq1 := Convert( slices, 1214, ( -9, -8, -7 ) );
            rec.hlghq2 := Convert( slices, 1215, ( -9, -8, -7 ) );
            rec.spjb := Convert_Spjb_Type( Get( slices, 1216 ));
            rec.spsoc := Convert( slices, 1217, ( -9.0, -8.0 ) );
            rec.spjbhr := Convert( slices, 1218, ( -9, -8, -7 ) );
            rec.spjbot := Convert( slices, 1219, ( -9, -8, -7 ) );
            rec.sppayg := Convert( slices, 1220, ( -9.0, -8.0, -7.0 ) );
            rec.spjbyr := Convert( slices, 1221, ( -9, -8, -7 ) );
            rec.lrwght := Convert( slices, 1222 );
            rec.lewght := Convert( slices, 1223 );
            rec.xrwght := Convert( slices, 1224 );
            rec.xewght := Convert( slices, 1225 );
            rec.j2payi := Convert( slices, 1226, ( -9, -8, -7, -3, -2, -1 ) );
            rec.fiyrdii := Convert_Fiyrdii_Type( Get( slices, 1227 ));
            rec.prearni := Convert( slices, 1228, ( -9, -8, -2, -1 ) );
            rec.prfitbi := Convert_Prfitbi_Type( Get( slices, 1229 ));
            rec.paygui := Convert_Fimnbi_Type( Get( slices, 1230 ));
            rec.paynui := Convert_Fimnbi_Type( Get( slices, 1231 ));
            rec.paygti := Convert_Fimnbi_Type( Get( slices, 1232 ));
            rec.paygli := Convert_Fimnbi_Type( Get( slices, 1233 ));
            rec.paynti := Convert_Fimnbi_Type( Get( slices, 1234 ));
            rec.paynli := Convert_Fimnbi_Type( Get( slices, 1235 ));
            rec.jsprofi := Convert_Fimnbi_Type( Get( slices, 1236 ));
            rec.jspaygi := Convert_Fimnbi_Type( Get( slices, 1237 ));
            rec.fimnpi := Convert_Fimnbi_Type( Get( slices, 1238 ));
            rec.fimnbi := Convert_Fimnbi_Type( Get( slices, 1239 ));
            rec.fimnii := Convert_Fimnii_Type( Get( slices, 1240 ));
            rec.fimnti := Convert_Fimnii_Type( Get( slices, 1241 ));
            rec.fimnnli := Convert_Fimnbi_Type( Get( slices, 1242 ));
            rec.fimnli := Convert_Fimnbi_Type( Get( slices, 1243 ));
            rec.fimnthi := Convert_Fimnii_Type( Get( slices, 1244 ));
            rec.fiyrli := Convert_Fimnbi_Type( Get( slices, 1245 ));
            rec.fiyrnli := Convert_Fimnbi_Type( Get( slices, 1246 ));
            rec.fiyrpi := Convert_Fimnii_Type( Get( slices, 1247 ));
            rec.fiyrbi := Convert_Fimnbi_Type( Get( slices, 1248 ));
            rec.fiyrti := Convert_Fimnbi_Type( Get( slices, 1249 ));
            rec.fiyrii := Convert_Fimnbi_Type( Get( slices, 1250 ));
            rec.fiyeari := Convert_Fimnbi_Type( Get( slices, 1251 ));
            rec.sppaygi := Convert_Prfitbi_Type( Get( slices, 1252 ));
            rec.fihhmni := Convert_Fihhmni_Type( Get( slices, 1253 ));
            rec.mrjend := Convert( slices, 1254, ( -9, -8, -7, -3, -2, -1 ) );
            rec.mrjsoc := Convert( slices, 1255, ( -9, -8, -7, -3 ) );
            rec.mrjsic := Convert( slices, 1256, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjsic9 := Convert( slices, 1257, ( -9, -8, -2, -1 ) );
            rec.mrjsemp := Convert_Mrjsemp_Type( Get( slices, 1258 ));
            rec.mrjboss := Convert_Mrjboss_Type( Get( slices, 1259 ));
            rec.mrjmngr := Convert_Mrjmngr_Type( Get( slices, 1260 ));
            rec.mrjsize := Convert_Mrjsize_Type( Get( slices, 1261 ));
            rec.mrjseg := Convert_Maseg_Type( Get( slices, 1262 ));
            rec.mrjgold := Convert( slices, 1263, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjrgsc := Convert_Margsc_Type( Get( slices, 1264 ));
            rec.mrjisco := Convert( slices, 1265 );
            rec.mrjcssm := Convert( slices, 1266, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjcssf := Convert( slices, 1267, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjhgs := Convert( slices, 1268, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjsec := Convert_J1sec_Type( Get( slices, 1269 ));
            rec.paseg := Convert_Maseg_Type( Get( slices, 1270 ));
            rec.pagold := Convert( slices, 1271, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.pargsc := Convert_Margsc_Type( Get( slices, 1272 ));
            rec.paisco := Convert( slices, 1273 );
            rec.pacssm := Convert( slices, 1274, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.pacssf := Convert( slices, 1275, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.pahgs := Convert( slices, 1276, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.pasec := Convert_J1sec_Type( Get( slices, 1277 ));
            rec.maseg := Convert_Maseg_Type( Get( slices, 1278 ));
            rec.magold := Convert( slices, 1279, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.margsc := Convert_Margsc_Type( Get( slices, 1280 ));
            rec.maisco := Convert( slices, 1281 );
            rec.macssm := Convert( slices, 1282, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.macssf := Convert( slices, 1283, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mahgs := Convert( slices, 1284, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.masec := Convert_J1sec_Type( Get( slices, 1285 ));
            rec.j1seg := Convert_J1seg_Type( Get( slices, 1286 ));
            rec.j1gold := Convert( slices, 1287, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.j1rgsc := Convert_J1rgsc_Type( Get( slices, 1288 ));
            rec.j1isco := Convert( slices, 1289 );
            rec.j1cssm := Convert( slices, 1290, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.j1cssf := Convert( slices, 1291, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.j1hgs := Convert( slices, 1292, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.j1sec := Convert_J1sec_Type( Get( slices, 1293 ));
            rec.fimnsel := Convert_Fimnsel_Type( Get( slices, 1294 ));
            rec.xrwtuk1 := Convert( slices, 1295 );
            rec.xewtuk1 := Convert( slices, 1296 );
            rec.xrwtuk2 := Convert( slices, 1297 );
            rec.xewtuk2 := Convert( slices, 1298 );
            rec.lrwtsw1 := Convert( slices, 1299 );
            rec.lewtsw1 := Convert( slices, 1300 );
            rec.lrwtsw2 := Convert( slices, 1301 );
            rec.lewtsw2 := Convert( slices, 1302 );
            rec.lrwtuk1 := Convert( slices, 1303 );
            rec.lewtuk1 := Convert( slices, 1304 );
            rec.lrwtuk2 := Convert( slices, 1305 );
            rec.lewtuk2 := Convert( slices, 1306 );
            rec.sppid := Convert( slices, 1307 );
            rec.fpid := Convert( slices, 1308 );
            rec.mpid := Convert( slices, 1309 );
            rec.jbbgd := Convert( slices, 1310, ( -9, -8, -7, -2, -1 ) );
            rec.jbbgm := Convert_Cjsbgm_Type( Get( slices, 1311 ));
            rec.jbbgy4 := Convert( slices, 1312, ( -9, -8, -7, -2, -1 ) );
            rec.jbbgly := Convert_Jbbgly_Type( Get( slices, 1313 ));
            rec.jsbgd := Convert( slices, 1314, ( -9, -8, -7, -2, -1 ) );
            rec.jsbgm := Convert_Cjsbgm_Type( Get( slices, 1315 ));
            rec.jsbgy4 := Convert( slices, 1316, ( -9, -8, -7, -2, -1 ) );
            rec.jsbgly := Convert_Jsbgly_Type( Get( slices, 1317 ));
            rec.distmov := Convert( slices, 1318, ( -9.0, -8.0, -7.0 ) );
            rec.region2 := Convert_Region2_Type( Get( slices, 1319 ));
            rec.isced := Convert_Isced_Type( Get( slices, 1320 ));
            rec.casmin := Convert_Casmin_Type( Get( slices, 1321 ));
            rec.jbiscon := Convert( slices, 1322, ( -9, -8, -7, -2, -1 ) );
            rec.jliscon := Convert( slices, 1323, ( -9, -8, -7, -2, -1 ) );
            rec.mrjiscn := Convert( slices, 1324, ( -9, -8, -7, -2, -1 ) );
            rec.maiscon := Convert( slices, 1325, ( -9, -8, -7, -2, -1 ) );
            rec.paiscon := Convert( slices, 1326, ( -9, -8, -7, -2, -1 ) );
            rec.j1iscon := Convert( slices, 1327, ( -9, -8, -7, -2, -1 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Indresp_component ).start_pos = 0 ) then
               index.pointers( Indresp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Indresp_component ).counter := index.pointers( Indresp_component ).counter + 1;
            Put_Index( index_map, index );
            Indresp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Indresp_IO.Close( bin_file );
   end Create_Indresp_Wave_Q;




   procedure Create_Indsamp_Wave_Q( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Indsamp_IO.File_Type;
      rec         : Indsamp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Indsamp_IO.Create (bin_file, Indsamp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.pid := Convert( slices, 3 );
            rec.iviolw := Convert_Iviolw_Type( Get( slices, 4 ));
            rec.ivstat1 := Convert_Ivstat1_Type( Get( slices, 5 ));
            rec.ivelig := Convert_Ivelig_Type( Get( slices, 6 ));
            rec.hhmem := Convert_Hhmem_Type( Get( slices, 7 ));
            rec.newhy := Convert_Newhy_Type( Get( slices, 8 ));
            rec.nemnjn := Convert_Nemnjn_Type( Get( slices, 9 ));
            rec.neyrjn4 := Convert( slices, 10, ( -9, -8, -7, -2, -1 ) );
            rec.lvwhy := Convert_Lvwhy_Type( Get( slices, 11 ));
            rec.lvmn := Convert_Lvmn_Type( Get( slices, 12 ));
            rec.lvyr4 := Convert( slices, 13, ( -9, -8, -7, -2, -1 ) );
            rec.lvloc := Convert_Lvloc_Type( Get( slices, 14 ));
            rec.ivfio := Convert_Ivfio_Type( Get( slices, 15 ));
            rec.ivrref := Convert_Ivrref_Type( Get( slices, 16 ));
            rec.ivireis := Convert_Ivireis_Type( Get( slices, 17 ));
            rec.finloc := Convert_Finloc_Type( Get( slices, 18 ));
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 19 ));
            rec.memorig := Convert_Memorig_Type( Get( slices, 20 ));
            rec.sampst := Convert_Sampst_Type( Get( slices, 21 ));
            rec.movest := Convert_Movest_Type( Get( slices, 22 ));
            rec.lewght := Convert( slices, 23, ( -9.0, -8.0, -1.0 ) );
            rec.lrwght := Convert( slices, 24, ( -9.0, -8.0, -1.0 ) );
            rec.lrwtsw1 := Convert( slices, 25, ( -9.0, -8.0, -1.0 ) );
            rec.lewtsw1 := Convert( slices, 26, ( -9.0, -8.0, -1.0 ) );
            rec.lrwtsw2 := Convert( slices, 27, ( -9.0, -8.0, -1.0 ) );
            rec.lewtsw2 := Convert( slices, 28, ( -9.0, -8.0, -1.0 ) );
            rec.lrwtuk1 := Convert( slices, 29, ( -9.0, -8.0, -1.0 ) );
            rec.lewtuk1 := Convert( slices, 30, ( -9.0, -8.0, -1.0 ) );
            rec.lrwtuk2 := Convert( slices, 31, ( -9.0, -8.0, -1.0 ) );
            rec.lewtuk2 := Convert( slices, 32, ( -9.0, -8.0, -1.0 ) );
            rec.distmov := Convert( slices, 33, ( -9.0, -8.0 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Indsamp_component ).start_pos = 0 ) then
               index.pointers( Indsamp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Indsamp_component ).counter := index.pointers( Indsamp_component ).counter + 1;
            Put_Index( index_map, index );
            Indsamp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Indsamp_IO.Close( bin_file );
   end Create_Indsamp_Wave_Q;




   procedure Create_Jobhist_Wave_Q( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Jobhist_IO.File_Type;
      rec         : Jobhist_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Jobhist_IO.Create (bin_file, Jobhist_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.pno := Convert( slices, 1 );
            rec.jhstat := Convert_Jhstat_Type( Get( slices, 2 ));
            rec.jhbgd := Convert( slices, 3, ( -9, -8, -7, -2, -1 ) );
            rec.jhbgm := Convert_Jbbgm1_Type( Get( slices, 4 ));
            rec.jhbgy4 := Convert( slices, 5, ( -9, -8, -7, -2, -1 ) );
            rec.jhsoc := Convert( slices, 6, ( -9, -8, -2, -1 ) );
            rec.jhsoc00 := Convert( slices, 7, ( -9, -8, -2, -1 ) );
            rec.jhsemp := Convert_Jhsemp_Type( Get( slices, 8 ));
            rec.jhboss := Convert_Bscon_Type( Get( slices, 9 ));
            rec.jhsect := Convert_Jhsect_Type( Get( slices, 10 ));
            rec.jhmngr := Convert_Jhmngr_Type( Get( slices, 11 ));
            rec.jhsic92 := Convert( slices, 12, ( -9, -8, -7 ) );
            rec.jhsize := Convert_Jhsize_Type( Get( slices, 13 ));
            rec.jhpayl := Convert( slices, 14, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhpylw := Convert( slices, 15, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.jhpylg := Convert_Jhpylg_Type( Get( slices, 16 ));
            rec.jhstpy := Convert_Jhstpy_Type( Get( slices, 17 ));
            rec.jblky := Convert_Jblky_Type( Get( slices, 18 ));
            rec.hid := Convert( slices, 19 );
            rec.jspno := Convert( slices, 20 );
            rec.jhendd := Convert( slices, 21, ( -9, -8, -7, -2, -1 ) );
            rec.jhendm := Convert_Jbbgm1_Type( Get( slices, 22 ));
            rec.jhendy4 := Convert( slices, 23, ( -9, -8, -7, -2, -1 ) );
            rec.jha9ly := Convert_Jha9ly_Type( Get( slices, 24 ));
            rec.jhlwai := Convert_Jhlwai_Type( Get( slices, 25 ));
            rec.jhseg := Convert_Jhseg_Type( Get( slices, 26 ));
            rec.jhgold := Convert( slices, 27, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhrgsc := Convert_Jhrgsc_Type( Get( slices, 28 ));
            rec.jhisco := Convert( slices, 29, ( -9, -8 ) );
            rec.jhcssm := Convert( slices, 30, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhcssf := Convert( slices, 31, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhhgs := Convert( slices, 32, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhsec := Convert_Jhsec_Type( Get( slices, 33 ));
            rec.jhspw := Convert( slices, 34, ( -9.0, -8.0 ) );
            rec.jhgpay := Convert( slices, 35, ( -9.0, -8.0, -7.0 ) );
            rec.jhnpay := Convert( slices, 36, ( -9.0, -8.0, -7.0, -1.0 ) );
            rec.jhgpayi := Convert_Jhgpayi_Type( Get( slices, 37 ));
            rec.jhnpayi := Convert_Jhgpayi_Type( Get( slices, 38 ));
            rec.pid := Convert( slices, 39 );
            rec.jhiscon := Convert( slices, 40, ( -9, -8, -7, -2, -1 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Jobhist_component ).start_pos = 0 ) then
               index.pointers( Jobhist_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Jobhist_component ).counter := index.pointers( Jobhist_component ).counter + 1;
            Put_Index( index_map, index );
            Jobhist_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Jobhist_IO.Close( bin_file );
   end Create_Jobhist_Wave_Q;




   procedure Create_Jobhstd_Wave_Q( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Jobhstd_IO.File_Type;
      rec         : Jobhstd_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Jobhstd_IO.Create (bin_file, Jobhstd_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.pno := Convert( slices, 1 );
            rec.jhstat := Convert_Jhstat_Type( Get( slices, 2 ));
            rec.jhcjs := Convert_Jhcjs_Type( Get( slices, 3 ));
            rec.jhendd := Convert( slices, 4, ( -9, -8, -2, -1 ) );
            rec.jhendm := Convert_Jbbgm1_Type( Get( slices, 5 ));
            rec.jhendy4 := Convert( slices, 6, ( -9, -8, -2, -1 ) );
            rec.jhck1 := Convert_Jhck1_Type( Get( slices, 7 ));
            rec.jhck2 := Convert_Jhck2_Type( Get( slices, 8 ));
            rec.jhsoc := Convert( slices, 9, ( -9, -8, -2, -1 ) );
            rec.jhsoc00 := Convert( slices, 10, ( -9, -8, -2, -1 ) );
            rec.jhsemp := Convert_Jhsemp_Type( Get( slices, 11 ));
            rec.jhboss := Convert_Bscon_Type( Get( slices, 12 ));
            rec.jhsect := Convert_Jhsect_Type( Get( slices, 13 ));
            rec.jhmngr := Convert_Jhmngr_Type( Get( slices, 14 ));
            rec.jhsic92 := Convert( slices, 15, ( -9, -8, -7 ) );
            rec.jhsize := Convert_Jhsize_Type( Get( slices, 16 ));
            rec.jhpayl := Convert( slices, 17, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhpylw := Convert( slices, 18, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.jhpylg := Convert_Jhpylg_Type( Get( slices, 19 ));
            rec.jhstpy := Convert_Jhstpy_Type( Get( slices, 20 ));
            rec.jblky := Convert_Jblky_Type( Get( slices, 21 ));
            rec.hid := Convert( slices, 22 );
            rec.jspno := Convert( slices, 23 );
            rec.pid := Convert( slices, 24 );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Jobhstd_component ).start_pos = 0 ) then
               index.pointers( Jobhstd_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Jobhstd_component ).counter := index.pointers( Jobhstd_component ).counter + 1;
            Put_Index( index_map, index );
            Jobhstd_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Jobhstd_IO.Close( bin_file );
   end Create_Jobhstd_Wave_Q;




   procedure Create_Youth_Wave_Q( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Youth_IO.File_Type;
      rec         : Youth_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Youth_IO.Create (bin_file, Youth_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.ypdobm := Convert_Ypdobm_Type( Get( slices, 3 ));
            rec.ypdoby4 := Convert( slices, 4, ( -9, -8, -7, -2, -1 ) );
            rec.ypsex := Convert_Ypsex_Type( Get( slices, 5 ));
            rec.yptvbr := Convert_Ypbeau_Type( Get( slices, 6 ));
            rec.ytvhrs := Convert_Ytvhrs_Type( Get( slices, 7 ));
            rec.ytvstp := Convert_Ytvlmt_Type( Get( slices, 8 ));
            rec.ypacta := Convert_Ypacta_Type( Get( slices, 9 ));
            rec.ypactb := Convert_Ypacta_Type( Get( slices, 10 ));
            rec.ypactc := Convert_Ypacta_Type( Get( slices, 11 ));
            rec.ypactd := Convert_Ypacta_Type( Get( slices, 12 ));
            rec.ypacte := Convert_Ypacta_Type( Get( slices, 13 ));
            rec.ypactm := Convert_Ypacta_Type( Get( slices, 14 ));
            rec.ypactn := Convert_Ypacta_Type( Get( slices, 15 ));
            rec.ypactl := Convert_Ypacta_Type( Get( slices, 16 ));
            rec.ypchor := Convert_Ypchor_Type( Get( slices, 17 ));
            rec.ypcomp := Convert_Ypcomp_Type( Get( slices, 18 ));
            rec.yppchw := Convert_Yppcg_Type( Get( slices, 19 ));
            rec.yppcg := Convert_Yppcg_Type( Get( slices, 20 ));
            rec.yppcnt := Convert_Yppcg_Type( Get( slices, 21 ));
            rec.ypmobu := Convert_Ypbeau_Type( Get( slices, 22 ));
            rec.yppals := Convert_Yppalo_Type( Get( slices, 23 ));
            rec.yppalo := Convert_Yppalo_Type( Get( slices, 24 ));
            rec.yputel := Convert_Yputel_Type( Get( slices, 25 ));
            rec.yplate := Convert_Yplate_Type( Get( slices, 26 ));
            rec.ypgang := Convert_Ypbeau_Type( Get( slices, 27 ));
            rec.ypvand := Convert( slices, 28, ( -9, -8, -2, -1 ) );
            rec.ypargm := Convert_Ypargm_Type( Get( slices, 29 ));
            rec.ypargf := Convert_Ypargf_Type( Get( slices, 30 ));
            rec.yptlkm := Convert_Ypargm_Type( Get( slices, 31 ));
            rec.yptlkf := Convert_Ypargf_Type( Get( slices, 32 ));
            rec.ypnpal := Convert( slices, 33, ( -9, -8, -2, -1 ) );
            rec.ypfght := Convert_Ypfght_Type( Get( slices, 34 ));
            rec.ypeatn := Convert_Ypeatn_Type( Get( slices, 35 ));
            rec.yphstat := Convert_Yphstat_Type( Get( slices, 36 ));
            rec.ypfrut := Convert_Ypffd_Type( Get( slices, 37 ));
            rec.ypffd := Convert_Ypffd_Type( Get( slices, 38 ));
            rec.ypjfd := Convert_Ypffd_Type( Get( slices, 39 ));
            rec.ypsmev := Convert_Ypbeau_Type( Get( slices, 40 ));
            rec.ypsmof := Convert_Ypsmof_Type( Get( slices, 41 ));
            rec.ypsmlw := Convert( slices, 42, ( -9, -8, -2, -1 ) );
            rec.ypdklm := Convert_Ypdklm_Type( Get( slices, 43 ));
            rec.ypdgfr := Convert_Ypdgfr_Type( Get( slices, 44 ));
            rec.ypdgyr := Convert_Ypbeau_Type( Get( slices, 45 ));
            rec.ypesta := Convert_Ypesta_Type( Get( slices, 46 ));
            rec.ypesti := Convert_Ypesti_Type( Get( slices, 47 ));
            rec.ypestb := Convert_Ypesta_Type( Get( slices, 48 ));
            rec.ypestj := Convert_Ypesti_Type( Get( slices, 49 ));
            rec.ypestc := Convert_Ypesta_Type( Get( slices, 50 ));
            rec.ypestk := Convert_Ypesti_Type( Get( slices, 51 ));
            rec.ypeste := Convert_Ypesta_Type( Get( slices, 52 ));
            rec.ypestf := Convert_Ypesta_Type( Get( slices, 53 ));
            rec.yptcha := Convert_Ypesta_Type( Get( slices, 54 ));
            rec.yptchb := Convert_Ypesta_Type( Get( slices, 55 ));
            rec.yphsw := Convert_Yphap_Type( Get( slices, 56 ));
            rec.yphap := Convert_Yphap_Type( Get( slices, 57 ));
            rec.yphfm := Convert_Yphap_Type( Get( slices, 58 ));
            rec.yphfr := Convert_Yphap_Type( Get( slices, 59 ));
            rec.yphsc := Convert_Yphap_Type( Get( slices, 60 ));
            rec.yphlf := Convert_Yphap_Type( Get( slices, 61 ));
            rec.ypoppl := Convert_Ypopfj_Type( Get( slices, 62 ));
            rec.ypoplc := Convert_Ypopfb_Type( Get( slices, 63 ));
            rec.ypvte6 := Convert_Ypvte6_Type( Get( slices, 64 ));
            rec.ypvte3 := Convert_Ypvte3_Type( Get( slices, 65 ));
            rec.ypcrwra := Convert_Ypcrwra_Type( Get( slices, 66 ));
            rec.ypcrwrb := Convert_Ypcrwrb_Type( Get( slices, 67 ));
            rec.yptrun := Convert_Yptrun_Type( Get( slices, 68 ));
            rec.ypexpl := Convert_Ypbeau_Type( Get( slices, 69 ));
            rec.ypbull := Convert_Ypbull_Type( Get( slices, 70 ));
            rec.ypopsc := Convert_Ypopsc_Type( Get( slices, 71 ));
            rec.yplvsc := Convert_Yplvsc_Type( Get( slices, 72 ));
            rec.ypacvs := Convert_Scach_Type( Get( slices, 73 ));
            rec.ypsoc00 := Convert( slices, 74, ( -9, -8, -3, -2, -1 ) );
            rec.ypsoc90 := Convert( slices, 75, ( -9, -8, -3, -2, -1 ) );
            rec.ypwklw := Convert_Ypbeau_Type( Get( slices, 76 ));
            rec.ypsoc10 := Convert( slices, 77, ( -9, -8, -3, -2, -1 ) );
            rec.ypsoc19 := Convert( slices, 78, ( -9, -8, -3, -2, -1 ) );
            rec.ypsoc20 := Convert( slices, 79, ( -9, -8, -3, -2, -1 ) );
            rec.ypsoc29 := Convert( slices, 80, ( -9, -8, -3, -2, -1 ) );
            rec.ypwhrs := Convert( slices, 81, ( -9, -8, -2, -1 ) );
            rec.yppay := Convert( slices, 82, ( -9, -8, -2, -1 ) );
            rec.yplvhm := Convert( slices, 83, ( -9, -8, -2, -1 ) );
            rec.yp2uni := Convert_Yp2uni_Type( Get( slices, 84 ));
            rec.ypnuna := Convert_Ypnuna_Type( Get( slices, 85 ));
            rec.ypnunb := Convert_Ypnunb_Type( Get( slices, 86 ));
            rec.ypevnt1 := Convert( slices, 87, ( -9, -8, -2, -1 ) );
            rec.ypevnt2 := Convert( slices, 88, ( -9, -8, -2, -1 ) );
            rec.ypjbqa := Convert_Ypjbqa_Type( Get( slices, 89 ));
            rec.ypjbqd := Convert_Ypjbqa_Type( Get( slices, 90 ));
            rec.ypjbqb := Convert_Ypjbqa_Type( Get( slices, 91 ));
            rec.ypjbqf := Convert_Ypjbqf_Type( Get( slices, 92 ));
            rec.ypjbqg := Convert_Ypjbqf_Type( Get( slices, 93 ));
            rec.ypjbqh := Convert_Ypjbqf_Type( Get( slices, 94 ));
            rec.ypwght := Convert( slices, 95 );
            rec.pid := Convert( slices, 96 );
            rec.fnspno := Convert( slices, 97, ( -9, -8 ) );
            rec.fnspid := Convert( slices, 98, ( -9.0, -8.0 ) );
            rec.mnspno := Convert( slices, 99, ( -9, -8 ) );
            rec.mnspid := Convert( slices, 100, ( -9.0, -8.0 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Youth_component ).start_pos = 0 ) then
               index.pointers( Youth_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Youth_component ).counter := index.pointers( Youth_component ).counter + 1;
            Put_Index( index_map, index );
            Youth_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Youth_IO.Close( bin_file );
   end Create_Youth_Wave_Q;




   procedure Create_Egoalt_Wave_R( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Egoalt_IO.File_Type;
      rec         : Egoalt_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Egoalt_IO.Create (bin_file, Egoalt_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.opno := Convert( slices, 3, (  1 .. 0 => -9 ) );
            rec.rel := Convert_Rel_Type( Get( slices, 4 ));
            rec.sex := Convert_Sex_Type( Get( slices, 5 ));
            rec.osex := Convert_Hgsex_Type( Get( slices, 6 ));
            rec.lwstat := Convert_Lwstat_Type( Get( slices, 7 ));
            rec.pid := Convert( slices, 8 );
            rec.opid := Convert( slices, 9 );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Egoalt_component ).start_pos = 0 ) then
               index.pointers( Egoalt_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Egoalt_component ).counter := index.pointers( Egoalt_component ).counter + 1;
            Put_Index( index_map, index );
            Egoalt_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Egoalt_IO.Close( bin_file );
   end Create_Egoalt_Wave_R;




   procedure Create_Hhresp_Wave_R( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Hhresp_IO.File_Type;
      rec         : Hhresp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Hhresp_IO.Create (bin_file, Hhresp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.hhdoi := Convert( slices, 2, ( -9, -8, -7 ) );
            rec.hhmoi := Convert_Doim_Type( Get( slices, 3 ));
            rec.hhyoi4 := Convert( slices, 4, ( -9, -8, -7, -2, -1 ) );
            rec.hhsoih := Convert( slices, 5, ( -9, -8, -7 ) );
            rec.hhsoim := Convert( slices, 6, ( -9, -8, -7 ) );
            rec.hstype := Convert_Hstype_Type( Get( slices, 7 ));
            rec.hsrins := Convert_Cjsck2_Type( Get( slices, 8 ));
            rec.hsroom := Convert( slices, 9, ( -9, -8, -7, -2, -1 ) );
            rec.hsownd := Convert_Hsownd_Type( Get( slices, 10 ));
            rec.hsowr1 := Convert( slices, 11, ( -9, -8, -7, -2, -1 ) );
            rec.hsowr2 := Convert( slices, 12, ( -9, -8, -7, -2, -1 ) );
            rec.hsval := Convert( slices, 13, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.mghave := Convert_Mghave_Type( Get( slices, 14 ));
            rec.hsowrp := Convert_Bscon_Type( Get( slices, 15 ));
            rec.mgynot := Convert_Mgynot_Type( Get( slices, 16 ));
            rec.hscost := Convert( slices, 17, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.hsyr04 := Convert( slices, 18, ( -9, -8, -7, -2, -1 ) );
            rec.mgyr04 := Convert( slices, 19, ( -9, -8, -7, -2, -1 ) );
            rec.mgly := Convert_Bscon_Type( Get( slices, 20 ));
            rec.hsivlw := Convert( slices, 21, ( -9, -8, -7, -2, -1 ) );
            rec.mgold := Convert( slices, 22, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.mglife := Convert( slices, 23, ( -9, -8, -7, -2, -1 ) );
            rec.mgtype := Convert_Mgtype_Type( Get( slices, 24 ));
            rec.mgxtra := Convert_Bscon_Type( Get( slices, 25 ));
            rec.mgnew := Convert( slices, 26, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.mgxty1 := Convert_Mgxty1_Type( Get( slices, 27 ));
            rec.mgxty2 := Convert_Mgxty2_Type( Get( slices, 28 ));
            rec.mgxty3 := Convert_Mgxty3_Type( Get( slices, 29 ));
            rec.mgxty4 := Convert_Mgxty4_Type( Get( slices, 30 ));
            rec.mgxty5 := Convert_Mgxty5_Type( Get( slices, 31 ));
            rec.xpmg := Convert( slices, 32, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.xpmg1 := Convert_Bscon_Type( Get( slices, 33 ));
            rec.xpmg2 := Convert_Bscon_Type( Get( slices, 34 ));
            rec.xpmg3 := Convert_Bscon_Type( Get( slices, 35 ));
            rec.xpmg4 := Convert_Bscon_Type( Get( slices, 36 ));
            rec.hsjb := Convert_Bscon_Type( Get( slices, 37 ));
            rec.rentp1 := Convert( slices, 38, ( -9, -8, -7, -2, -1 ) );
            rec.rentp2 := Convert( slices, 39, ( -9, -8, -7, -2, -1 ) );
            rec.rentll := Convert_Rentll_Type( Get( slices, 40 ));
            rec.rentf := Convert_Rentf_Type( Get( slices, 41 ));
            rec.rent := Convert( slices, 42, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.rentw := Convert( slices, 43, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.rent1 := Convert_Rent1_Type( Get( slices, 44 ));
            rec.rent7 := Convert_Rent7_Type( Get( slices, 45 ));
            rec.rent2 := Convert_Rent1_Type( Get( slices, 46 ));
            rec.rent3 := Convert_Bscon_Type( Get( slices, 47 ));
            rec.rent4 := Convert_Bscon_Type( Get( slices, 48 ));
            rec.rent5 := Convert_Bscon_Type( Get( slices, 49 ));
            rec.rent8 := Convert_Coh1mr_Type( Get( slices, 50 ));
            rec.rent6 := Convert_Bscon_Type( Get( slices, 51 ));
            rec.renthb := Convert_Renthb_Type( Get( slices, 52 ));
            rec.rentg := Convert( slices, 53, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.rentgw := Convert( slices, 54, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.xphsdf := Convert( slices, 55, ( -9, -8, -7, -2, -1 ) );
            rec.xphsd1 := Convert_Bscon_Type( Get( slices, 56 ));
            rec.xphsd2 := Convert_Bscon_Type( Get( slices, 57 ));
            rec.xphsdb := Convert_Bscon_Type( Get( slices, 58 ));
            rec.hskch := Convert_Boolean_With_Missing( Get( slices, 59 ));
            rec.hskchs := Convert_Boolean_With_Missing( Get( slices, 60 ));
            rec.hsbth := Convert_Boolean_With_Missing( Get( slices, 61 ));
            rec.hsbths := Convert_Boolean_With_Missing( Get( slices, 62 ));
            rec.hstlt := Convert_Boolean_With_Missing( Get( slices, 63 ));
            rec.hstlts := Convert_Boolean_With_Missing( Get( slices, 64 ));
            rec.hsgdn := Convert_Boolean_With_Missing( Get( slices, 65 ));
            rec.hsgdns := Convert_Boolean_With_Missing( Get( slices, 66 ));
            rec.xpgasy := Convert( slices, 67, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.xplecy := Convert( slices, 68, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.xpoily := Convert( slices, 69, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.xpsfly := Convert( slices, 70, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.heatch := Convert_Bscon_Type( Get( slices, 71 ));
            rec.heatyp := Convert_Heatyp_Type( Get( slices, 72 ));
            rec.gfuela := Convert_Gfuela_Type( Get( slices, 73 ));
            rec.gfuelb := Convert_Gfuela_Type( Get( slices, 74 ));
            rec.gfuelc := Convert_Gfuela_Type( Get( slices, 75 ));
            rec.gelec := Convert_Gelec_Type( Get( slices, 76 ));
            rec.larcyc := Convert_Hldsbl1_Type( Get( slices, 77 ));
            rec.hhrcyc := Convert_Hhrcyc_Type( Get( slices, 78 ));
            rec.hhbb := Convert_Hhbb_Type( Get( slices, 79 ));
            rec.hsprbg := Convert_Boolean_With_Missing( Get( slices, 80 ));
            rec.hsprbh := Convert_Boolean_With_Missing( Get( slices, 81 ));
            rec.hsprbi := Convert_Boolean_With_Missing( Get( slices, 82 ));
            rec.hsprbj := Convert_Boolean_With_Missing( Get( slices, 83 ));
            rec.hsprbk := Convert_Boolean_With_Missing( Get( slices, 84 ));
            rec.hsprbl := Convert_Boolean_With_Missing( Get( slices, 85 ));
            rec.hsprbm := Convert_Boolean_With_Missing( Get( slices, 86 ));
            rec.hsprbn := Convert_Boolean_With_Missing( Get( slices, 87 ));
            rec.hsprbo := Convert_Boolean_With_Missing( Get( slices, 88 ));
            rec.hsprbp := Convert_Boolean_With_Missing( Get( slices, 89 ));
            rec.hsprbq := Convert_Boolean_With_Missing( Get( slices, 90 ));
            rec.hsctax := Convert_Hsctax_Type( Get( slices, 91 ));
            rec.hs2ownd := Convert_Bscon_Type( Get( slices, 92 ));
            rec.hs2valo := Convert( slices, 93, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.hs2vala := Convert_Hldsbl1_Type( Get( slices, 94 ));
            rec.hs2valb := Convert_Hldsbl1_Type( Get( slices, 95 ));
            rec.hs2valc := Convert_Hldsbl1_Type( Get( slices, 96 ));
            rec.hs2vald := Convert_Hldsbl1_Type( Get( slices, 97 ));
            rec.mgtot := Convert( slices, 98, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.cdhave := Convert_Bscon_Type( Get( slices, 99 ));
            rec.cdbght := Convert_Bscon_Type( Get( slices, 100 ));
            rec.cd1use := Convert_Cd1new_Type( Get( slices, 101 ));
            rec.cd1new := Convert( slices, 102, ( -9, -8, -7, -2, -1 ) );
            rec.cd1cst := Convert( slices, 103, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd2use := Convert_Cd1new_Type( Get( slices, 104 ));
            rec.cd2new := Convert( slices, 105, ( -9, -8, -7, -2, -1 ) );
            rec.cd2cst := Convert( slices, 106, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd10use := Convert_Cd10new_Type( Get( slices, 107 ));
            rec.cd10new := Convert( slices, 108, ( -9, -8, -7, -2, -1 ) );
            rec.cd10cst := Convert( slices, 109, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd11use := Convert_Cd10new_Type( Get( slices, 110 ));
            rec.cd11new := Convert( slices, 111, ( -9, -8, -7, -2, -1 ) );
            rec.cd11cst := Convert( slices, 112, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd3use := Convert_Cd1new_Type( Get( slices, 113 ));
            rec.cd3new := Convert( slices, 114, ( -9, -8, -7, -2, -1 ) );
            rec.cd3cst := Convert( slices, 115, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd4use := Convert_Cd1new_Type( Get( slices, 116 ));
            rec.cd4new := Convert( slices, 117, ( -9, -8, -7, -2, -1 ) );
            rec.cd4cst := Convert( slices, 118, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd5use := Convert_Cd1new_Type( Get( slices, 119 ));
            rec.cd5new := Convert( slices, 120, ( -9, -8, -7, -2, -1 ) );
            rec.cd5cst := Convert( slices, 121, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd6use := Convert_Cd1new_Type( Get( slices, 122 ));
            rec.cd6new := Convert( slices, 123, ( -9, -8, -7, -2, -1 ) );
            rec.cd6cst := Convert( slices, 124, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd7use := Convert_Cd1new_Type( Get( slices, 125 ));
            rec.cd7new := Convert( slices, 126, ( -9, -8, -7, -2, -1 ) );
            rec.cd7cst := Convert( slices, 127, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd8use := Convert_Cd1new_Type( Get( slices, 128 ));
            rec.cd8new := Convert( slices, 129, ( -9, -8, -7, -2, -1 ) );
            rec.cd8cst := Convert( slices, 130, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd9use := Convert_Cd1new_Type( Get( slices, 131 ));
            rec.cd9new := Convert( slices, 132, ( -9, -8, -7, -2, -1 ) );
            rec.cd9cst := Convert( slices, 133, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd12use := Convert_Cd10new_Type( Get( slices, 134 ));
            rec.cd12new := Convert( slices, 135, ( -9, -8, -7, -2, -1 ) );
            rec.cd12cst := Convert( slices, 136, ( -9, -8, -7, -3, -2, -1 ) );
            rec.cd13use := Convert_Cd13new_Type( Get( slices, 137 ));
            rec.cd13new := Convert( slices, 138, ( -9, -8, -7, -2, -1 ) );
            rec.cd13cst := Convert( slices, 139, ( -9, -8, -7, -3, -2, -1 ) );
            rec.pcnet := Convert_Boolean_With_Missing( Get( slices, 140 ));
            rec.hsnet1 := Convert_Cd13new_Type( Get( slices, 141 ));
            rec.hsnet2 := Convert_Cd13new_Type( Get( slices, 142 ));
            rec.hsnet3 := Convert_Cd13new_Type( Get( slices, 143 ));
            rec.hsnet4 := Convert_Cd13new_Type( Get( slices, 144 ));
            rec.hsnetb := Convert_Bscon_Type( Get( slices, 145 ));
            rec.xphp := Convert_Bscon_Type( Get( slices, 146 ));
            rec.xphpdf := Convert_Xphpdf_Type( Get( slices, 147 ));
            rec.hscana := Convert_Boolean_With_Missing( Get( slices, 148 ));
            rec.hscnta := Convert_Boolean_With_Missing( Get( slices, 149 ));
            rec.hscanb := Convert_Boolean_With_Missing( Get( slices, 150 ));
            rec.hscntb := Convert_Boolean_With_Missing( Get( slices, 151 ));
            rec.hscanc := Convert_Boolean_With_Missing( Get( slices, 152 ));
            rec.hscntc := Convert_Boolean_With_Missing( Get( slices, 153 ));
            rec.hscand := Convert_Boolean_With_Missing( Get( slices, 154 ));
            rec.hscntd := Convert_Boolean_With_Missing( Get( slices, 155 ));
            rec.hscane := Convert_Boolean_With_Missing( Get( slices, 156 ));
            rec.hscnte := Convert_Boolean_With_Missing( Get( slices, 157 ));
            rec.hscanf := Convert_Boolean_With_Missing( Get( slices, 158 ));
            rec.hscntf := Convert_Boolean_With_Missing( Get( slices, 159 ));
            rec.hscanh := Convert_Edblyr3_Type( Get( slices, 160 ));
            rec.hscnth := Convert_Edblyr3_Type( Get( slices, 161 ));
            rec.hscank := Convert_Edblyr3_Type( Get( slices, 162 ));
            rec.hscntk := Convert_Edblyr3_Type( Get( slices, 163 ));
            rec.hscanl := Convert_Edblyr3_Type( Get( slices, 164 ));
            rec.hscntl := Convert_Edblyr3_Type( Get( slices, 165 ));
            rec.xpfood := Convert( slices, 166, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ncars := Convert_Ncars_Type( Get( slices, 167 ));
            rec.carown := Convert_Carown_Type( Get( slices, 168 ));
            rec.carval := Convert( slices, 169, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ivh1 := Convert( slices, 170, ( -9, -8, -7, -1 ) );
            rec.ivh2 := Convert( slices, 171, ( -9, -8, -7 ) );
            rec.ivh3 := Convert( slices, 172, ( -9, -8, -7 ) );
            rec.hhfoih := Convert( slices, 173, ( -9, -8, -7 ) );
            rec.hhfoim := Convert( slices, 174, ( -9, -8, -7 ) );
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 175 ));
            rec.hhorig := Convert_Hhorig_Type( Get( slices, 176 ));
            rec.hhdc := Convert_Hhdc_Type( Get( slices, 177 ));
            rec.xhwght := Convert( slices, 178, ( -9.0, -8.0 ) );
            rec.hhsize := Convert( slices, 179, ( -9, -8 ) );
            rec.hhtype := Convert_Hhtype_Type( Get( slices, 180 ));
            rec.region := Convert_Region_Type( Get( slices, 181 ));
            rec.nch02 := Convert( slices, 182, ( -9, -8 ) );
            rec.nch34 := Convert( slices, 183, ( -9, -8 ) );
            rec.nch511 := Convert( slices, 184, ( -9, -8 ) );
            rec.nch1215 := Convert( slices, 185, ( -9, -8 ) );
            rec.nch1618 := Convert( slices, 186, ( -9, -8 ) );
            rec.nkids := Convert( slices, 187, ( -9, -8 ) );
            rec.nwed := Convert( slices, 188, ( -9, -8 ) );
            rec.npens := Convert( slices, 189, ( -9, -8 ) );
            rec.na75pl := Convert( slices, 190, ( -9, -8 ) );
            rec.agechy := Convert( slices, 191, ( -9, -8 ) );
            rec.ncouple := Convert( slices, 192, ( -9, -8 ) );
            rec.nonepar := Convert( slices, 193, ( -9, -8 ) );
            rec.nemp := Convert( slices, 194, ( -9, -8 ) );
            rec.nwage := Convert( slices, 195, ( -9, -8 ) );
            rec.tenure := Convert_Tenure_Type( Get( slices, 196 ));
            rec.xphsn := Convert( slices, 197, ( -9.0, -8.0, -7.0 ) );
            rec.xphsg := Convert( slices, 198, ( -9.0, -8.0, -7.0 ) );
            rec.fieqfcb := Convert( slices, 199, ( -9.0, -8.0 ) );
            rec.fieqfca := Convert( slices, 200, ( -9.0, -8.0 ) );
            rec.fihhyr := Convert( slices, 201, ( -9.0, -8.0, -7.0 ) );
            rec.fihhmn := Convert( slices, 202, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyl := Convert( slices, 203, ( -9.0, -8.0, -7.0 ) );
            rec.fihhynl := Convert( slices, 204, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyp := Convert( slices, 205, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyb := Convert( slices, 206, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyt := Convert( slices, 207, ( -9.0, -8.0, -7.0 ) );
            rec.fihhyi := Convert( slices, 208, ( -9.0, -8.0, -7.0 ) );
            rec.fihhml := Convert( slices, 209, (  1 .. 0 => -9.0 ) );
            rec.fihhmnl := Convert( slices, 210, (  1 .. 0 => -9.0 ) );
            rec.fihhmp := Convert( slices, 211, (  1 .. 0 => -9.0 ) );
            rec.fihhmb := Convert( slices, 212, (  1 .. 0 => -9.0 ) );
            rec.fihhmt := Convert( slices, 213, (  1 .. 0 => -9.0 ) );
            rec.fihhmi := Convert( slices, 214, (  1 .. 0 => -9.0 ) );
            rec.hhmove := Convert_Hhmove_Type( Get( slices, 215 ));
            rec.mgnewi := Convert( slices, 216, ( -9, -8, -7, -2, -1 ) );
            rec.xpmgi := Convert( slices, 217, ( -9, -8, -7, -2, -1 ) );
            rec.hsvali := Convert( slices, 218, ( -9, -8, -7, -2, -1 ) );
            rec.renti := Convert( slices, 219, ( -9, -8, -7, -4, -3, -2, -1 ) );
            rec.rentgi := Convert( slices, 220, ( -9, -8, -7, -2, -1 ) );
            rec.xphsni := Convert_Jhgpayi_Type( Get( slices, 221 ));
            rec.xphsgi := Convert_Jhgpayi_Type( Get( slices, 222 ));
            rec.fihhmni := Convert_Fihhmni_Type( Get( slices, 223 ));
            rec.fihhmli := Convert_Fihhmbi_Type( Get( slices, 224 ));
            rec.fihmnli := Convert_Fihhmbi_Type( Get( slices, 225 ));
            rec.fihhmpi := Convert_Fihhmbi_Type( Get( slices, 226 ));
            rec.fihhmbi := Convert_Fihhmbi_Type( Get( slices, 227 ));
            rec.fihhmti := Convert_Fihhmbi_Type( Get( slices, 228 ));
            rec.fihhmii := Convert_Fihhmbi_Type( Get( slices, 229 ));
            rec.fihhyri := Convert_Fihhmbi_Type( Get( slices, 230 ));
            rec.fihhyli := Convert_Fihhmbi_Type( Get( slices, 231 ));
            rec.fihhyni := Convert_Fihhmbi_Type( Get( slices, 232 ));
            rec.fihhypi := Convert_Fihhmbi_Type( Get( slices, 233 ));
            rec.fihhybi := Convert_Fihhmbi_Type( Get( slices, 234 ));
            rec.fihhyti := Convert_Fihhmbi_Type( Get( slices, 235 ));
            rec.fihhyii := Convert_Fihhmbi_Type( Get( slices, 236 ));
            rec.fihhsel := Convert_Fihhsel_Type( Get( slices, 237 ));
            rec.xhwtuk1 := Convert( slices, 238, ( -9.0, -8.0 ) );
            rec.xhwtuk2 := Convert( slices, 239, ( -9.0, -8.0 ) );
            rec.region2 := Convert_Region2_Type( Get( slices, 240 ));
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Hhresp_component ).start_pos = 0 ) then
               index.pointers( Hhresp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Hhresp_component ).counter := index.pointers( Hhresp_component ).counter + 1;
            Put_Index( index_map, index );
            Hhresp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Hhresp_IO.Close( bin_file );
   end Create_Hhresp_Wave_R;




   procedure Create_Hhsamp_Wave_R( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Hhsamp_IO.File_Type;
      rec         : Hhsamp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Hhsamp_IO.Create (bin_file, Hhsamp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.fid := Convert( slices, 2 );
            rec.ivnadd := Convert( slices, 3, ( -9.0, -8.0 ) );
            rec.ivia := Convert_Ivia_Type( Get( slices, 4 ));
            rec.iviam := Convert_Iviam_Type( Get( slices, 5 ));
--             rec.ivid := Convert( slices, 6 );
            rec.ivlnc := Convert( slices, 7, ( -9, -1 ) );
            rec.ivtnc := Convert( slices, 8, ( -9, -8, -1 ) );
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 9 ));
            rec.ivosmrh := Convert( slices, 10, ( -9, -8, -1 ) );
            rec.ivnsmrh := Convert( slices, 11, ( -9, -8, -1 ) );
            rec.ivrrefh := Convert_Ivrrefh_Type( Get( slices, 12 ));
            rec.ivconv := Convert_Ivconv_Type( Get( slices, 13 ));
            rec.ivreis := Convert_Ivreis_Type( Get( slices, 14 ));
            rec.ivisst := Convert_Ivisst_Type( Get( slices, 15 ));
            rec.hhdc := Convert_Hhdc_Type( Get( slices, 16 ));
            rec.hhorig := Convert_Hhorig_Type( Get( slices, 17 ));
            rec.xhwght := Convert( slices, 18, ( -9.0, -8.0, -1.0 ) );
            rec.region := Convert_Region_Type( Get( slices, 19 ));
            rec.hhmove := Convert_Hhmove_Type( Get( slices, 20 ));
            rec.ahid := Convert( slices, 21 );
            rec.xhwtuk1 := Convert( slices, 22, ( -9.0, -8.0, -1.0 ) );
            rec.xhwtuk2 := Convert( slices, 23, ( -9.0, -8.0, -1.0 ) );
            rec.strata := Convert( slices, 24, ( -9, -8, -1 ) );
            rec.psu := Convert( slices, 25, ( -9, -8, -1 ) );
            rec.region2 := Convert_Region2_Type( Get( slices, 26 ));
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Hhsamp_component ).start_pos = 0 ) then
               index.pointers( Hhsamp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Hhsamp_component ).counter := index.pointers( Hhsamp_component ).counter + 1;
            Put_Index( index_map, index );
            Hhsamp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Hhsamp_IO.Close( bin_file );
   end Create_Hhsamp_Wave_R;




   procedure Create_Income_Wave_R( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Income_IO.File_Type;
      rec         : Income_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Income_IO.Create (bin_file, Income_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.ficode := Convert_Ficode_Type( Get( slices, 3 ));
            rec.frall := Convert_Frall_Type( Get( slices, 4 ));
            rec.fr01 := Convert_Cd1own_Type( Get( slices, 5 ));
            rec.fr02 := Convert_Cd1own_Type( Get( slices, 6 ));
            rec.fr03 := Convert_Cd1own_Type( Get( slices, 7 ));
            rec.fr04 := Convert( slices, 8, ( -9, -8, -2, -1 ) );
            rec.fr05 := Convert_Cd1own_Type( Get( slices, 9 ));
            rec.fr06 := Convert_Cd1own_Type( Get( slices, 10 ));
            rec.fr07 := Convert_Cd1own_Type( Get( slices, 11 ));
            rec.fr08 := Convert_Cd1own_Type( Get( slices, 12 ));
            rec.fr09 := Convert_Cd1own_Type( Get( slices, 13 ));
            rec.fr10 := Convert_Cd1own_Type( Get( slices, 14 ));
            rec.fr11 := Convert_Cd1own_Type( Get( slices, 15 ));
            rec.fr12 := Convert_Cd1own_Type( Get( slices, 16 ));
            rec.fr13 := Convert_Cd1own_Type( Get( slices, 17 ));
            rec.fr14 := Convert_Cd1own_Type( Get( slices, 18 ));
            rec.fr15 := Convert_Cd1own_Type( Get( slices, 19 ));
            rec.fr16 := Convert_Cd1own_Type( Get( slices, 20 ));
            rec.fr17 := Convert_Cd1own_Type( Get( slices, 21 ));
            rec.fr18 := Convert_Fr18_Type( Get( slices, 22 ));
            rec.fr19 := Convert_Fr18_Type( Get( slices, 23 ));
            rec.fr20 := Convert_Fr18_Type( Get( slices, 24 ));
            rec.frnow := Convert_Frnow_Type( Get( slices, 25 ));
            rec.frval := Convert( slices, 26, ( -9.0, -8.0, -3.0, -2.0, -1.0 ) );
            rec.frw := Convert( slices, 27, ( -9.0, -8.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.frjt := Convert_Frjt_Type( Get( slices, 28 ));
            rec.frjtpn := Convert( slices, 29, ( -9, -8, -2, -1 ) );
            rec.fiseq := Convert( slices, 30 );
            rec.frjtvf := Convert_Frjtvf_Type( Get( slices, 31 ));
            rec.fradd := Convert_Cjsck2_Type( Get( slices, 32 ));
            rec.fim09l := Convert( slices, 33, ( -9.0, -8.0, -3.0 ) );
            rec.fim10l := Convert( slices, 34, ( -9.0, -8.0, -3.0 ) );
            rec.fim11l := Convert( slices, 35, ( -9.0, -8.0, -3.0 ) );
            rec.fim12l := Convert( slices, 36, ( -9.0, -8.0, -3.0 ) );
            rec.fim01t := Convert( slices, 37, ( -9.0, -8.0, -3.0 ) );
            rec.fim02t := Convert( slices, 38, ( -9.0, -8.0, -3.0 ) );
            rec.fim03t := Convert( slices, 39, ( -9.0, -8.0, -3.0 ) );
            rec.fim04t := Convert( slices, 40, ( -9.0, -8.0, -3.0 ) );
            rec.fim05t := Convert( slices, 41, ( -9.0, -8.0, -3.0 ) );
            rec.fim06t := Convert( slices, 42, ( -9.0, -8.0, -3.0 ) );
            rec.fim07t := Convert( slices, 43, ( -9.0, -8.0, -3.0 ) );
            rec.fim08t := Convert( slices, 44, ( -9.0, -8.0, -3.0 ) );
            rec.fim09t := Convert( slices, 45, ( -9.0, -8.0, -3.0 ) );
            rec.fim10t := Convert( slices, 46, ( -9.0, -8.0, -3.0 ) );
            rec.fim11t := Convert( slices, 47, ( -9.0, -8.0, -3.0 ) );
            rec.fim12t := Convert( slices, 48, ( -9.0, -8.0, -3.0 ) );
            rec.fim01n := Convert( slices, 49, ( -9.0, -8.0, -3.0 ) );
            rec.fim02n := Convert( slices, 50, ( -9.0, -3.0 ) );
            rec.fim03n := Convert( slices, 51, ( -9.0, -3.0 ) );
            rec.fim04n := Convert( slices, 52, ( -9.0, -3.0 ) );
            rec.frvali := Convert( slices, 53, ( -9, -8, -3, -2, -1 ) );
            rec.pid := Convert( slices, 54 );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Income_component ).start_pos = 0 ) then
               index.pointers( Income_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Income_component ).counter := index.pointers( Income_component ).counter + 1;
            Put_Index( index_map, index );
            Income_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Income_IO.Close( bin_file );
   end Create_Income_Wave_R;




   procedure Create_Indall_Wave_R( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Indall_IO.File_Type;
      rec         : Indall_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Indall_IO.Create (bin_file, Indall_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.hgr2r := Convert_Hgr2r_Type( Get( slices, 3 ));
            rec.hgsex := Convert_Hgsex_Type( Get( slices, 4 ));
            rec.hgbm := Convert_Hgbm_Type( Get( slices, 5 ));
            rec.hgby := Convert( slices, 6, ( -9, -8, -2, -1 ) );
            rec.mastat := Convert_Mastat_Type( Get( slices, 7 ));
            rec.hgspn := Convert( slices, 8, ( -9, -8, -2, -1 ) );
            rec.hgemp := Convert_Hgemp_Type( Get( slices, 9 ));
            rec.hgfno := Convert( slices, 10, ( -9, -8, -2, -1 ) );
            rec.hgmno := Convert( slices, 11, ( -9, -8, -2, -1 ) );
            rec.hgra := Convert( slices, 12, ( -9, -8, -2, -1 ) );
            rec.cosano := Convert( slices, 13, ( -9, -8, -7, -2, -1 ) );
            rec.cosh := Convert_Cosb_Type( Get( slices, 14 ));
            rec.coshf := Convert_Cosb_Type( Get( slices, 15 ));
            rec.cose := Convert_Cose_Type( Get( slices, 16 ));
            rec.pid := Convert( slices, 17 );
            rec.iviolw := Convert_Iviolw_Type( Get( slices, 18 ));
            rec.ivstat1 := Convert_Ivstat1_Type( Get( slices, 19 ));
            rec.ivelig := Convert_Ivelig_Type( Get( slices, 20 ));
            rec.hhmem := Convert_Hhmem_Type( Get( slices, 21 ));
            rec.newhy := Convert_Newhy_Type( Get( slices, 22 ));
            rec.nemnjn := Convert_Nemnjn_Type( Get( slices, 23 ));
            rec.neyrjn4 := Convert( slices, 24, ( -9, -8, -7, -2, -1 ) );
            rec.ivfio := Convert_Ivfio_Type( Get( slices, 25 ));
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 26 ));
            rec.iodc := Convert_Iodc_Type( Get( slices, 27 ));
            rec.memorig := Convert_Memorig_Type( Get( slices, 28 ));
            rec.age := Convert( slices, 29, ( -9, -8, -2, -1 ) );
            rec.age12 := Convert( slices, 30, ( -9, -8, -2, -1 ) );
            rec.butype := Convert_Butype_Type( Get( slices, 31 ));
            rec.buno := Convert( slices, 32, ( -9, -8 ) );
            rec.nchild := Convert( slices, 33, ( -9, -8 ) );
            rec.depchl := Convert_Depchl_Type( Get( slices, 34 ));
            rec.hoh := Convert_Hoh_Type( Get( slices, 35 ));
            rec.rach16 := Convert_Hhch12_Type( Get( slices, 36 ));
            rec.agei := Convert_Agei_Type( Get( slices, 37 ));
            rec.lrwght := Convert( slices, 38, ( -9.0, -8.0 ) );
            rec.lewght := Convert( slices, 39, ( -9.0, -8.0 ) );
            rec.xrwght := Convert( slices, 40, ( -9.0, -8.0 ) );
            rec.xewght := Convert( slices, 41, ( -9.0, -8.0 ) );
            rec.movest := Convert_Movest_Type( Get( slices, 42 ));
            rec.sampst := Convert_Sampst_Type( Get( slices, 43 ));
            rec.xrwtuk1 := Convert( slices, 44, ( -9.0, -8.0 ) );
            rec.xewtuk1 := Convert( slices, 45, ( -9.0, -8.0 ) );
            rec.xrwtuk2 := Convert( slices, 46, ( -9.0, -8.0 ) );
            rec.xewtuk2 := Convert( slices, 47, ( -9.0, -8.0 ) );
            rec.lrwtsw1 := Convert( slices, 48, ( -9.0, -8.0 ) );
            rec.lewtsw1 := Convert( slices, 49, ( -9.0, -8.0 ) );
            rec.lrwtsw2 := Convert( slices, 50, ( -9.0, -8.0 ) );
            rec.lewtsw2 := Convert( slices, 51, ( -9.0, -8.0 ) );
            rec.lrwtuk1 := Convert( slices, 52, ( -9.0, -8.0 ) );
            rec.lewtuk1 := Convert( slices, 53, ( -9.0, -8.0 ) );
            rec.lrwtuk2 := Convert( slices, 54, ( -9.0, -8.0 ) );
            rec.lewtuk2 := Convert( slices, 55, ( -9.0, -8.0 ) );
            rec.sppid := Convert( slices, 56 );
            rec.fpid := Convert( slices, 57 );
            rec.mpid := Convert( slices, 58 );
            rec.rapid := Convert( slices, 59 );
            rec.cosapid := Convert( slices, 60 );
            rec.distmov := Convert( slices, 61, ( -9.0, -8.0 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Indall_component ).start_pos = 0 ) then
               index.pointers( Indall_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Indall_component ).counter := index.pointers( Indall_component ).counter + 1;
            Put_Index( index_map, index );
            Indall_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Indall_IO.Close( bin_file );
   end Create_Indall_Wave_R;




   procedure Create_Indresp_Wave_R( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Indresp_IO.File_Type;
      rec         : Indresp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Indresp_IO.Create (bin_file, Indresp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.doid := Convert( slices, 3, ( -9, -7 ) );
            rec.doim := Convert_Doim_Type( Get( slices, 4 ));
            rec.doiy4 := Convert( slices, 5, ( -9, -8, -7, -2, -1 ) );
            rec.ivlyr := Convert( slices, 6, ( -9, -8, -7 ) );
            rec.ivstat2 := Convert_Ivstat2_Type( Get( slices, 7 ));
            rec.ivsoih := Convert( slices, 8, ( -9, -8 ) );
            rec.ivsoim := Convert( slices, 9, ( -9, -8 ) );
            rec.lknbrd := Convert_Aidpl1_Type( Get( slices, 10 ));
            rec.lkmove := Convert_Lkmove_Type( Get( slices, 11 ));
            rec.lkmovy := Convert_Lkmovy_Type( Get( slices, 12 ));
            rec.xpmove := Convert( slices, 13, ( -9, -8, -7, -2, -1 ) );
            rec.plnew := Convert( slices, 14, ( -9, -8, -7, -2, -1 ) );
            rec.plnowm := Convert_Jbbgm1_Type( Get( slices, 15 ));
            rec.plnowy4 := Convert( slices, 16, ( -9, -8, -7, -2, -1 ) );
            rec.movjb := Convert_Aidpl1_Type( Get( slices, 17 ));
            rec.movjba := Convert_Movjba_Type( Get( slices, 18 ));
            rec.movjbb := Convert_Movjba_Type( Get( slices, 19 ));
            rec.movjbc := Convert_Movjba_Type( Get( slices, 20 ));
            rec.movjbd := Convert_Movjba_Type( Get( slices, 21 ));
            rec.movjbe := Convert_Movjba_Type( Get( slices, 22 ));
            rec.movjbf := Convert_Movjba_Type( Get( slices, 23 ));
            rec.movjbg := Convert_Movjba_Type( Get( slices, 24 ));
            rec.movjbh := Convert_Movjba_Type( Get( slices, 25 ));
            rec.movjbi := Convert_Movjba_Type( Get( slices, 26 ));
            rec.movy1 := Convert_Movy1_Type( Get( slices, 27 ));
            rec.movy2 := Convert_Movy2_Type( Get( slices, 28 ));
            rec.dobm := Convert_Cjsem_Type( Get( slices, 29 ));
            rec.doby := Convert( slices, 30, ( -9, -8, -7, -2, -1 ) );
            rec.sex := Convert_Sex_Type( Get( slices, 31 ));
            rec.mlstat := Convert_Mlstat_Type( Get( slices, 32 ));
            rec.mlchng := Convert_Bscon_Type( Get( slices, 33 ));
            rec.mlchm := Convert_Mlchm_Type( Get( slices, 34 ));
            rec.mlchy4 := Convert( slices, 35, ( -9, -8, -7, -2, -1 ) );
            rec.jbstat := Convert_Jbstat_Type( Get( slices, 36 ));
            rec.edlyr := Convert_Aidpl1_Type( Get( slices, 37 ));
            rec.edtype1 := Convert_Edtype1_Type( Get( slices, 38 ));
            rec.edblyr1 := Convert_Boolean_With_Missing( Get( slices, 39 ));
            rec.edbgm1 := Convert_Edbgm1_Type( Get( slices, 40 ));
            rec.edbgy1 := Convert( slices, 41, ( -9, -8, -7, -2, -1 ) );
            rec.edenm1 := Convert_Edbgm1_Type( Get( slices, 42 ));
            rec.edeny1 := Convert( slices, 43, ( -9, -8, -7, -2, -1 ) );
            rec.edenne1 := Convert_Edenne1_Type( Get( slices, 44 ));
            rec.edfeea1 := Convert_Yes_Or_Missing_Type( Get( slices, 45 ));
            rec.edfeeb1 := Convert_Yes_Or_Missing_Type( Get( slices, 46 ));
            rec.edfeec1 := Convert_Yes_Or_Missing_Type( Get( slices, 47 ));
            rec.edfeed1 := Convert_Yes_Or_Missing_Type( Get( slices, 48 ));
            rec.edfeee1 := Convert_Yes_Or_Missing_Type( Get( slices, 49 ));
            rec.edfeef1 := Convert_Yes_Or_Missing_Type( Get( slices, 50 ));
            rec.edfeeg1 := Convert_Yes_Or_Missing_Type( Get( slices, 51 ));
            rec.edmore1 := Convert_Boolean_With_Missing( Get( slices, 52 ));
            rec.edtype2 := Convert_Edtype1_Type( Get( slices, 53 ));
            rec.edblyr2 := Convert_Boolean_With_Missing( Get( slices, 54 ));
            rec.edbgm2 := Convert_Edbgm1_Type( Get( slices, 55 ));
            rec.edbgy2 := Convert( slices, 56, ( -9, -8, -7, -2, -1 ) );
            rec.edenm2 := Convert_Edbgm1_Type( Get( slices, 57 ));
            rec.edeny2 := Convert( slices, 58, ( -9, -8, -7, -2, -1 ) );
            rec.edenne2 := Convert_Edenne2_Type( Get( slices, 59 ));
            rec.edfeea2 := Convert_Yes_Or_Missing_Type( Get( slices, 60 ));
            rec.edfeeb2 := Convert_Yes_Or_Missing_Type( Get( slices, 61 ));
            rec.edfeec2 := Convert_Yes_Or_Missing_Type( Get( slices, 62 ));
            rec.edfeed2 := Convert_Yes_Or_Missing_Type( Get( slices, 63 ));
            rec.edfeee2 := Convert_Yes_Or_Missing_Type( Get( slices, 64 ));
            rec.edfeef2 := Convert_Yes_Or_Missing_Type( Get( slices, 65 ));
            rec.edfeeg2 := Convert_Yes_Or_Missing_Type( Get( slices, 66 ));
            rec.edmore2 := Convert_Boolean_With_Missing( Get( slices, 67 ));
            rec.edtype3 := Convert_Edtype3_Type( Get( slices, 68 ));
            rec.edblyr3 := Convert_Edblyr3_Type( Get( slices, 69 ));
            rec.edbgm3 := Convert_Edbgm3_Type( Get( slices, 70 ));
            rec.edbgy3 := Convert( slices, 71, ( -9, -8, -7, -2, -1 ) );
            rec.edenm3 := Convert_Edbgm3_Type( Get( slices, 72 ));
            rec.edeny3 := Convert( slices, 73, ( -9, -8, -7, -2, -1 ) );
            rec.edenne3 := Convert_Edenne3_Type( Get( slices, 74 ));
            rec.edfeea3 := Convert_Yes_Or_Missing_Type( Get( slices, 75 ));
            rec.edfeeb3 := Convert_Yes_Or_Missing_Type( Get( slices, 76 ));
            rec.edfeec3 := Convert_Yes_Or_Missing_Type( Get( slices, 77 ));
            rec.edfeed3 := Convert_Yes_Or_Missing_Type( Get( slices, 78 ));
            rec.edfeee3 := Convert_Yes_Or_Missing_Type( Get( slices, 79 ));
            rec.edfeef3 := Convert_Yes_Or_Missing_Type( Get( slices, 80 ));
            rec.edfeeg3 := Convert_Yes_Or_Missing_Type( Get( slices, 81 ));
            rec.plbornd := Convert_Plbornd_Type( Get( slices, 82 ));
            rec.plbornc := Convert_Plbornc_Type( Get( slices, 83 ));
            rec.yr2uk4 := Convert( slices, 84, ( -9, -8, -7, -2, -1 ) );
            rec.citzn1 := Convert( slices, 85, ( -9, -8, -7, -2, -1 ) );
            rec.citzn2 := Convert_Citzn2_Type( Get( slices, 86 ));
            rec.natidb := Convert_Yes_Or_Missing_Type( Get( slices, 87 ));
            rec.natidf := Convert_Yes_Or_Missing_Type( Get( slices, 88 ));
            rec.natidg := Convert_Yes_Or_Missing_Type( Get( slices, 89 ));
            rec.natide := Convert_Yes_Or_Missing_Type( Get( slices, 90 ));
            rec.natida := Convert_Yes_Or_Missing_Type( Get( slices, 91 ));
            rec.natidh := Convert_Natidh_Type( Get( slices, 92 ));
            rec.racel := Convert_Racel_Type( Get( slices, 93 ));
            rec.paju := Convert_Paju_Type( Get( slices, 94 ));
            rec.pasoc := Convert( slices, 95, ( -9, -8, -7, -2, -1 ) );
            rec.pasoc00 := Convert( slices, 96, ( -9, -8, -7, -2, -1 ) );
            rec.pasemp := Convert_J2semp_Type( Get( slices, 97 ));
            rec.paboss := Convert_Maboss_Type( Get( slices, 98 ));
            rec.pamngr := Convert_Mamngr_Type( Get( slices, 99 ));
            rec.maju := Convert_Maju_Type( Get( slices, 100 ));
            rec.masoc := Convert( slices, 101, ( -9, -8, -7, -2, -1 ) );
            rec.masoc00 := Convert( slices, 102, ( -9, -8, -7, -2, -1 ) );
            rec.masemp := Convert_J2semp_Type( Get( slices, 103 ));
            rec.maboss := Convert_Maboss_Type( Get( slices, 104 ));
            rec.mamngr := Convert_Mamngr_Type( Get( slices, 105 ));
            rec.j1none := Convert_J1none_Type( Get( slices, 106 ));
            rec.j1soc := Convert( slices, 107, ( -9, -8, -7, -2, -1 ) );
            rec.j1soc00 := Convert( slices, 108, ( -9, -8, -7, -2, -1 ) );
            rec.j1semp := Convert_J1semp_Type( Get( slices, 109 ));
            rec.j1boss := Convert_J1boss_Type( Get( slices, 110 ));
            rec.j1mngr := Convert_J1mngr_Type( Get( slices, 111 ));
            rec.lcoh := Convert_Aidpl1_Type( Get( slices, 112 ));
            rec.coh1bm := Convert_Ch1bm_Type( Get( slices, 113 ));
            rec.coh1by := Convert( slices, 114, ( -9, -8, -7, -2, -1 ) );
            rec.coh1mr := Convert_Coh1mr_Type( Get( slices, 115 ));
            rec.coh1em := Convert_Ch1bm_Type( Get( slices, 116 ));
            rec.coh1ey := Convert( slices, 117, ( -9, -8, -7, -2, -1 ) );
            rec.nmar := Convert_Nmar_Type( Get( slices, 118 ));
            rec.lmar1m := Convert_Ch1bm_Type( Get( slices, 119 ));
            rec.lmar1y := Convert( slices, 120, ( -9, -8, -7, -2, -1 ) );
            rec.lprnt := Convert_Lprnt_Type( Get( slices, 121 ));
            rec.lnprnt := Convert( slices, 122, ( -9, -8, -7, -2, -1 ) );
            rec.ch1bm := Convert_Ch1bm_Type( Get( slices, 123 ));
            rec.ch1by := Convert( slices, 124, ( -9, -8, -7, -2, -1 ) );
            rec.school := Convert_School_Type( Get( slices, 125 ));
            rec.scend := Convert( slices, 126, ( -9, -8, -7, -2, -1 ) );
            rec.sctype := Convert_Sctype_Type( Get( slices, 127 ));
            rec.scnow := Convert_Cjsck2_Type( Get( slices, 128 ));
            rec.fetype := Convert_Fetype_Type( Get( slices, 129 ));
            rec.fenow := Convert_Fenow_Type( Get( slices, 130 ));
            rec.feend := Convert( slices, 131, ( -9, -8, -7, -2, -1 ) );
            rec.qfhas := Convert_Bscon_Type( Get( slices, 132 ));
            rec.qfa := Convert_Qfa_Type( Get( slices, 133 ));
            rec.qfb := Convert_Qfb_Type( Get( slices, 134 ));
            rec.qfc := Convert_Qfc_Type( Get( slices, 135 ));
            rec.qfd := Convert_Qfd_Type( Get( slices, 136 ));
            rec.qfe := Convert_Qfe_Type( Get( slices, 137 ));
            rec.qff := Convert_Qff_Type( Get( slices, 138 ));
            rec.qfg := Convert_Qfg_Type( Get( slices, 139 ));
            rec.qfh := Convert_Qfh_Type( Get( slices, 140 ));
            rec.qfi := Convert_Qfi_Type( Get( slices, 141 ));
            rec.qfj := Convert_Qfj_Type( Get( slices, 142 ));
            rec.qfk := Convert_Qfk_Type( Get( slices, 143 ));
            rec.qfl := Convert_Qfl_Type( Get( slices, 144 ));
            rec.qfm := Convert_Qfm_Type( Get( slices, 145 ));
            rec.qfn := Convert_Qfn_Type( Get( slices, 146 ));
            rec.qfed := Convert_Bscon_Type( Get( slices, 147 ));
            rec.qfeda := Convert_Qfeda_Type( Get( slices, 148 ));
            rec.nqfeda := Convert( slices, 149, ( -9, -8, -7, -2, -1 ) );
            rec.qfedb := Convert_Qfedb_Type( Get( slices, 150 ));
            rec.nqfedb := Convert( slices, 151, ( -9, -8, -7, -2, -1 ) );
            rec.qfedc := Convert_Qfedc_Type( Get( slices, 152 ));
            rec.nqfedc := Convert( slices, 153, ( -9, -8, -7, -2, -1 ) );
            rec.qfedd := Convert_Qfedd_Type( Get( slices, 154 ));
            rec.nqfedd := Convert( slices, 155, ( -9, -8, -7, -2, -1 ) );
            rec.qfede := Convert_Qfede_Type( Get( slices, 156 ));
            rec.nqfede := Convert( slices, 157, ( -9, -8, -7, -2, -1 ) );
            rec.qfedf := Convert_Qfedf_Type( Get( slices, 158 ));
            rec.nqfedf := Convert( slices, 159, ( -9, -8, -7, -2, -1 ) );
            rec.qfedg := Convert_Qfedg_Type( Get( slices, 160 ));
            rec.nqfedg := Convert( slices, 161, ( -9, -8, -7, -2, -1 ) );
            rec.qfedh := Convert_Qfedh_Type( Get( slices, 162 ));
            rec.nqfedh := Convert( slices, 163, ( -9, -8, -7, -2, -1 ) );
            rec.qfedi := Convert_Qfedi_Type( Get( slices, 164 ));
            rec.nqfedi := Convert( slices, 165, ( -9, -8, -7, -2, -1 ) );
            rec.qfedj := Convert_Qfedj_Type( Get( slices, 166 ));
            rec.nqfedj := Convert( slices, 167, ( -9, -8, -7, -2, -1 ) );
            rec.qfedt := Convert_Qfedt_Type( Get( slices, 168 ));
            rec.nqfedt := Convert( slices, 169, ( -9, -8, -7, -2, -1 ) );
            rec.qfedu := Convert_Qfedu_Type( Get( slices, 170 ));
            rec.nqfedu := Convert( slices, 171, ( -9, -8, -7, -2, -1 ) );
            rec.qfedk := Convert_Qfedk_Type( Get( slices, 172 ));
            rec.nqfedk := Convert( slices, 173, ( -9, -8, -7, -2, -1 ) );
            rec.qfedl := Convert_Qfedl_Type( Get( slices, 174 ));
            rec.nqfedl := Convert( slices, 175, ( -9, -8, -7, -2, -1 ) );
            rec.qfedm := Convert_Qfedm_Type( Get( slices, 176 ));
            rec.nqfedm := Convert( slices, 177, ( -9, -8, -7, -2, -1 ) );
            rec.qfedn := Convert_Qfedn_Type( Get( slices, 178 ));
            rec.nqfedn := Convert( slices, 179, ( -9, -8, -7, -2, -1 ) );
            rec.qfedo := Convert_Qfedo_Type( Get( slices, 180 ));
            rec.nqfedo := Convert( slices, 181, ( -9, -8, -7, -2, -1 ) );
            rec.qfedp := Convert( slices, 182, ( -9, -8, -7 ) );
            rec.nqfedp := Convert( slices, 183, ( -9, -8, -7, -2, -1 ) );
            rec.qfedq := Convert_Qfedq_Type( Get( slices, 184 ));
            rec.nqfedq := Convert( slices, 185, ( -9, -8, -7, -2, -1 ) );
            rec.qfedr := Convert_Qfedr_Type( Get( slices, 186 ));
            rec.nqfedr := Convert( slices, 187, ( -9, -8, -7, -2, -1 ) );
            rec.qfeds := Convert_Hlprbm_Type( Get( slices, 188 ));
            rec.nqfeds := Convert( slices, 189, ( -9, -8, -7, -2, -1 ) );
            rec.train := Convert_Boolean_With_Missing( Get( slices, 190 ));
            rec.ntrain := Convert( slices, 191, ( -9, -8, -7, -2, -1 ) );
            rec.trplce1 := Convert_Trplce1_Type( Get( slices, 192 ));
            rec.trwhya1 := Convert_Boolean_With_Missing( Get( slices, 193 ));
            rec.trwhyb1 := Convert_Boolean_With_Missing( Get( slices, 194 ));
            rec.trwhyc1 := Convert_Boolean_With_Missing( Get( slices, 195 ));
            rec.trwhyd1 := Convert_Boolean_With_Missing( Get( slices, 196 ));
            rec.trwhye1 := Convert_Boolean_With_Missing( Get( slices, 197 ));
            rec.trq1 := Convert( slices, 198, ( -9, -8, -7 ) );
            rec.tru1 := Convert_Tru1_Type( Get( slices, 199 ));
            rec.trfeea1 := Convert_Nisjsa_Type( Get( slices, 200 ));
            rec.trfeeb1 := Convert_Yes_Or_Missing_Type( Get( slices, 201 ));
            rec.trfeec1 := Convert_Yes_Or_Missing_Type( Get( slices, 202 ));
            rec.trfeee1 := Convert_Yes_Or_Missing_Type( Get( slices, 203 ));
            rec.trfeef1 := Convert_Yes_Or_Missing_Type( Get( slices, 204 ));
            rec.trfeeg1 := Convert_Yes_Or_Missing_Type( Get( slices, 205 ));
            rec.trqlxp1 := Convert_Trqlxp1_Type( Get( slices, 206 ));
            rec.trqlac1 := Convert_Trqlac1_Type( Get( slices, 207 ));
            rec.trmore1 := Convert_Boolean_With_Missing( Get( slices, 208 ));
            rec.trplce2 := Convert_Trplce1_Type( Get( slices, 209 ));
            rec.trwhya2 := Convert_Boolean_With_Missing( Get( slices, 210 ));
            rec.trwhyb2 := Convert_Boolean_With_Missing( Get( slices, 211 ));
            rec.trwhyc2 := Convert_Boolean_With_Missing( Get( slices, 212 ));
            rec.trwhyd2 := Convert_Boolean_With_Missing( Get( slices, 213 ));
            rec.trwhye2 := Convert_Boolean_With_Missing( Get( slices, 214 ));
            rec.trq2 := Convert( slices, 215, ( -9, -8, -7 ) );
            rec.tru2 := Convert_Tru1_Type( Get( slices, 216 ));
            rec.trfeea2 := Convert_Nisjsa_Type( Get( slices, 217 ));
            rec.trfeeb2 := Convert_Yes_Or_Missing_Type( Get( slices, 218 ));
            rec.trfeec2 := Convert_Yes_Or_Missing_Type( Get( slices, 219 ));
            rec.trfeee2 := Convert_Yes_Or_Missing_Type( Get( slices, 220 ));
            rec.trfeef2 := Convert_Yes_Or_Missing_Type( Get( slices, 221 ));
            rec.trfeeg2 := Convert_Yes_Or_Missing_Type( Get( slices, 222 ));
            rec.trqlxp2 := Convert_Trqlxp1_Type( Get( slices, 223 ));
            rec.trqlac2 := Convert_Trqlac1_Type( Get( slices, 224 ));
            rec.trmore2 := Convert_Boolean_With_Missing( Get( slices, 225 ));
            rec.trplce3 := Convert_Trplce1_Type( Get( slices, 226 ));
            rec.trwhya3 := Convert_Boolean_With_Missing( Get( slices, 227 ));
            rec.trwhyb3 := Convert_Boolean_With_Missing( Get( slices, 228 ));
            rec.trwhyc3 := Convert_Boolean_With_Missing( Get( slices, 229 ));
            rec.trwhyd3 := Convert_Boolean_With_Missing( Get( slices, 230 ));
            rec.trwhye3 := Convert_Boolean_With_Missing( Get( slices, 231 ));
            rec.trq3 := Convert( slices, 232, ( -9, -8, -7 ) );
            rec.tru3 := Convert_Tru1_Type( Get( slices, 233 ));
            rec.trfeea3 := Convert_Nisjsa_Type( Get( slices, 234 ));
            rec.trfeeb3 := Convert_Yes_Or_Missing_Type( Get( slices, 235 ));
            rec.trfeec3 := Convert_Yes_Or_Missing_Type( Get( slices, 236 ));
            rec.trfeee3 := Convert_Yes_Or_Missing_Type( Get( slices, 237 ));
            rec.trfeef3 := Convert_Yes_Or_Missing_Type( Get( slices, 238 ));
            rec.trfeeg3 := Convert_Yes_Or_Missing_Type( Get( slices, 239 ));
            rec.trqlxp3 := Convert_Trqlxp1_Type( Get( slices, 240 ));
            rec.trqlac3 := Convert_Trqlac1_Type( Get( slices, 241 ));
            rec.qfrec := Convert_Edblyr3_Type( Get( slices, 242 ));
            rec.qfedx := Convert_Aidpl1_Type( Get( slices, 243 ));
            rec.qfedxa := Convert_Qfedd_Type( Get( slices, 244 ));
            rec.nqfexa := Convert( slices, 245, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxb := Convert_Qfede_Type( Get( slices, 246 ));
            rec.nqfexb := Convert( slices, 247, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxl := Convert_Qfedt_Type( Get( slices, 248 ));
            rec.nqfexl := Convert( slices, 249, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxm := Convert_Qfedxm_Type( Get( slices, 250 ));
            rec.nqfexm := Convert( slices, 251, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxn := Convert_Qfedxn_Type( Get( slices, 252 ));
            rec.nqfexn := Convert( slices, 253, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxo := Convert_Qfedxo_Type( Get( slices, 254 ));
            rec.nqfexo := Convert( slices, 255, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxg := Convert_Qfedm_Type( Get( slices, 256 ));
            rec.nqfexg := Convert( slices, 257, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxh := Convert_Qfedxh_Type( Get( slices, 258 ));
            rec.nqfexh := Convert( slices, 259, ( -9, -8, -7, -2, -1 ) );
            rec.qfedxi := Convert_Qfedo_Type( Get( slices, 260 ));
            rec.nqfexi := Convert( slices, 261, ( -9, -8, -7, -2, -1 ) );
            rec.qfx := Convert_Aidpl1_Type( Get( slices, 262 ));
            rec.qfxc := Convert_Qfc_Type( Get( slices, 263 ));
            rec.qfxd := Convert_Qfd_Type( Get( slices, 264 ));
            rec.qfxe := Convert_Qfe_Type( Get( slices, 265 ));
            rec.qfxf := Convert_Qff_Type( Get( slices, 266 ));
            rec.qfxg := Convert_Qfg_Type( Get( slices, 267 ));
            rec.qfxh := Convert_Qfh_Type( Get( slices, 268 ));
            rec.qfxo := Convert_Qfxo_Type( Get( slices, 269 ));
            rec.qfxp := Convert_Qfxp_Type( Get( slices, 270 ));
            rec.qfxq := Convert_Qfxq_Type( Get( slices, 271 ));
            rec.qfxr := Convert_Qfxr_Type( Get( slices, 272 ));
            rec.qfxk := Convert_Qfk_Type( Get( slices, 273 ));
            rec.qfxl := Convert_Qfl_Type( Get( slices, 274 ));
            rec.qfxm := Convert_Qfm_Type( Get( slices, 275 ));
            rec.qfxn := Convert_Qfn_Type( Get( slices, 276 ));
            rec.ivlpar := Convert_Ivlpar_Type( Get( slices, 277 ));
            rec.nrpart := Convert_Boolean_With_Missing( Get( slices, 278 ));
            rec.nrptim := Convert_Nrptim_Type( Get( slices, 279 ));
            rec.nrpxpm1 := Convert_Nrpxpm1_Type( Get( slices, 280 ));
            rec.nrpxpm2 := Convert_Cohxpm2_Type( Get( slices, 281 ));
            rec.cohadv := Convert_Boolean_With_Missing( Get( slices, 282 ));
            rec.cohad1 := Convert_Cohad1_Type( Get( slices, 283 ));
            rec.cohad2 := Convert_Cohad2_Type( Get( slices, 284 ));
            rec.cohdis := Convert_Boolean_With_Missing( Get( slices, 285 ));
            rec.cohds1 := Convert_Cohds1_Type( Get( slices, 286 ));
            rec.cohds2 := Convert_Cohds2_Type( Get( slices, 287 ));
            rec.cohxpm1 := Convert_Cohxpm1_Type( Get( slices, 288 ));
            rec.cohxpm2 := Convert_Cohxpm2_Type( Get( slices, 289 ));
            rec.birhh := Convert_Aglt20_Type( Get( slices, 290 ));
            rec.mabwly := Convert_Aglt20_Type( Get( slices, 291 ));
            rec.mabwnly := Convert( slices, 292, ( -9, -8, -7 ) );
            rec.bwtpn1 := Convert( slices, 293, ( -9, -8, -7 ) );
            rec.bwtagm1 := Convert( slices, 294, ( -9, -8, -7 ) );
            rec.bwtxp1 := Convert_Boolean_With_Missing( Get( slices, 295 ));
            rec.bwtel1 := Convert_Bwtel_Type( Get( slices, 296 ));
            rec.bwtwk1 := Convert( slices, 297, ( -9, -8, -7, -2, -1 ) );
            rec.bwtkn1 := Convert_Bwtkn_Type( Get( slices, 298 ));
            rec.bwtlb1 := Convert( slices, 299, ( -9, -8, -7, -2, -1 ) );
            rec.bwtoz1 := Convert( slices, 300, ( -9, -8, -7, -2, -1 ) );
            rec.bwtgm1 := Convert( slices, 301, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.bwtg51 := Convert_Bwtg51_Type( Get( slices, 302 ));
            rec.bwtpn2 := Convert( slices, 303, ( -9, -8, -7 ) );
            rec.bwtagm2 := Convert( slices, 304, ( -9, -8, -7 ) );
            rec.bwtxp2 := Convert_Boolean_With_Missing( Get( slices, 305 ));
            rec.bwtel2 := Convert_Bwtel2_Type( Get( slices, 306 ));
            rec.bwtwk2 := Convert( slices, 307, ( -9, -8, -7, -2, -1 ) );
            rec.bwtkn2 := Convert_Bwtkn_Type( Get( slices, 308 ));
            rec.bwtlb2 := Convert( slices, 309, ( -9, -8, -7 ) );
            rec.bwtoz2 := Convert( slices, 310, ( -9, -8, -7, -2, -1 ) );
            rec.bwtgm2 := Convert( slices, 311, ( -9, -8, -7 ) );
            rec.bwtg52 := Convert_Bwtg5_Type( Get( slices, 312 ));
            rec.bwtpn3 := Convert( slices, 313, ( -9, -8, -7 ) );
            rec.bwtagm3 := Convert( slices, 314, ( -9, -8, -7 ) );
            rec.bwtxp3 := Convert_Boolean_With_Missing( Get( slices, 315 ));
            rec.bwtel3 := Convert_Bwtel2_Type( Get( slices, 316 ));
            rec.bwtwk3 := Convert( slices, 317, ( -9, -8, -7, -2, -1 ) );
            rec.bwtkn3 := Convert_Bwtkn_Type( Get( slices, 318 ));
            rec.bwtlb3 := Convert( slices, 319, ( -9, -8, -7 ) );
            rec.bwtoz3 := Convert( slices, 320, ( -9, -8, -7, -2, -1 ) );
            rec.bwtgm3 := Convert( slices, 321, ( -9, -8, -7 ) );
            rec.bwtg53 := Convert_Bwtg5_Type( Get( slices, 322 ));
            rec.wlsha := Convert_Yes_Or_Missing_Type( Get( slices, 323 ));
            rec.wlshb := Convert_Yes_Or_Missing_Type( Get( slices, 324 ));
            rec.wlshc := Convert_Yes_Or_Missing_Type( Get( slices, 325 ));
            rec.wlshd := Convert_Yes_Or_Missing_Type( Get( slices, 326 ));
            rec.wlshe := Convert_Jbwkhrh_Type( Get( slices, 327 ));
            rec.wlshua := Convert_Wlshua_Type( Get( slices, 328 ));
            rec.wlshub := Convert_Wlshua_Type( Get( slices, 329 ));
            rec.wlshuc := Convert_Wlshua_Type( Get( slices, 330 ));
            rec.wlshud := Convert_Wlshua_Type( Get( slices, 331 ));
            rec.wlshue := Convert_Wlshua_Type( Get( slices, 332 ));
            rec.aglt20 := Convert_Aglt20_Type( Get( slices, 333 ));
            rec.scnow2 := Convert_Cjsck2_Type( Get( slices, 334 ));
            rec.infted := Convert_Aglt20_Type( Get( slices, 335 ));
            rec.edasp := Convert_Edasp_Type( Get( slices, 336 ));
            rec.fedasp := Convert_Fedasp_Type( Get( slices, 337 ));
            rec.fedtyp := Convert_Fedtyp_Type( Get( slices, 338 ));
            rec.fedlik := Convert_Fedlik_Type( Get( slices, 339 ));
            rec.fednt1 := Convert_Fednt1_Type( Get( slices, 340 ));
            rec.fednt2 := Convert_Fednt2_Type( Get( slices, 341 ));
            rec.ocfut00 := Convert( slices, 342, ( -9, -8, -7, -2, -1 ) );
            rec.ocfut90 := Convert( slices, 343, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.pabrn := Convert( slices, 344, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.mabrn := Convert( slices, 345, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.papabrn := Convert( slices, 346, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.pamabrn := Convert( slices, 347, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.mapabrn := Convert( slices, 348, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.mamabrn := Convert( slices, 349, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.netuse := Convert_Netuse_Type( Get( slices, 350 ));
            rec.ivda := Convert_Ivda_Type( Get( slices, 351 ));
            rec.ivdb := Convert_Ivdb_Type( Get( slices, 352 ));
            rec.ivdc := Convert_Ivdc_Type( Get( slices, 353 ));
            rec.ivdd := Convert_Ivdd_Type( Get( slices, 354 ));
            rec.ivde := Convert_Yes_Or_Missing_Type( Get( slices, 355 ));
            rec.pm0h := Convert( slices, 356, ( -9, -8 ) );
            rec.pm0m := Convert( slices, 357, ( -9, -8 ) );
            rec.hldsbl1 := Convert_Hldsbl1_Type( Get( slices, 358 ));
            rec.hlstat := Convert_Hlstat_Type( Get( slices, 359 ));
            rec.hlprb := Convert( slices, 360, ( -9, -8, -7, -2, -1 ) );
            rec.hlprba := Convert_Hlprba_Type( Get( slices, 361 ));
            rec.hlprbb := Convert_Hlprbb_Type( Get( slices, 362 ));
            rec.hlprbc := Convert_Hlprbc_Type( Get( slices, 363 ));
            rec.hlprbd := Convert_Hlprbd_Type( Get( slices, 364 ));
            rec.hlprbe := Convert_Hlprbe_Type( Get( slices, 365 ));
            rec.hlprbf := Convert_Hlprbf_Type( Get( slices, 366 ));
            rec.hlprbg := Convert_Hlprbg_Type( Get( slices, 367 ));
            rec.hlprbh := Convert_Hlprbh_Type( Get( slices, 368 ));
            rec.hlprbi := Convert_Hlprbi_Type( Get( slices, 369 ));
            rec.hlprbj := Convert_Hlprbj_Type( Get( slices, 370 ));
            rec.hlprbk := Convert_Hlprbk_Type( Get( slices, 371 ));
            rec.hlprbl := Convert_Hlprbl_Type( Get( slices, 372 ));
            rec.hlprbn := Convert_Hlprbn_Type( Get( slices, 373 ));
            rec.hlprbo := Convert_Hlprbo_Type( Get( slices, 374 ));
            rec.hlprbm := Convert_Hlprbm_Type( Get( slices, 375 ));
            rec.hllt := Convert_Bscon_Type( Get( slices, 376 ));
            rec.hllta := Convert_Hllta_Type( Get( slices, 377 ));
            rec.hlltb := Convert_Hlltb_Type( Get( slices, 378 ));
            rec.hlltc := Convert_Hlltc_Type( Get( slices, 379 ));
            rec.hlltd := Convert_Hlltd_Type( Get( slices, 380 ));
            rec.hllte := Convert_Hllte_Type( Get( slices, 381 ));
            rec.hlltw := Convert_Bscon_Type( Get( slices, 382 ));
            rec.hlendw := Convert_Hlendw_Type( Get( slices, 383 ));
            rec.hlltwa := Convert_Hlltwa_Type( Get( slices, 384 ));
            rec.hliv65 := Convert_Hliv65_Type( Get( slices, 385 ));
            rec.adla := Convert_Adla_Type( Get( slices, 386 ));
            rec.adlad := Convert_Adlad_Type( Get( slices, 387 ));
            rec.adlb := Convert_Adla_Type( Get( slices, 388 ));
            rec.adlbd := Convert_Adlad_Type( Get( slices, 389 ));
            rec.adlc := Convert_Adla_Type( Get( slices, 390 ));
            rec.adlcd := Convert_Adlad_Type( Get( slices, 391 ));
            rec.adld := Convert_Adla_Type( Get( slices, 392 ));
            rec.adldd := Convert_Adlad_Type( Get( slices, 393 ));
            rec.adle := Convert_Adla_Type( Get( slices, 394 ));
            rec.adled := Convert_Adlad_Type( Get( slices, 395 ));
            rec.adlf := Convert_Adla_Type( Get( slices, 396 ));
            rec.adlfd := Convert_Adlad_Type( Get( slices, 397 ));
            rec.hl2gp := Convert_Hl2gp_Type( Get( slices, 398 ));
            rec.hl2hop := Convert( slices, 399, ( -9, -8, -7, -2, -1 ) );
            rec.xdts := Convert_Bscon_Type( Get( slices, 400 ));
            rec.nxdts := Convert_Nxdts_Type( Get( slices, 401 ));
            rec.hosp := Convert_Hlsv_Type( Get( slices, 402 ));
            rec.hospd := Convert( slices, 403, ( -9, -8, -7, -2, -1 ) );
            rec.hospch := Convert_Hospch_Type( Get( slices, 404 ));
            rec.hospnhs := Convert_Hospnhs_Type( Get( slices, 405 ));
            rec.hlcvr := Convert_Hlcvr_Type( Get( slices, 406 ));
            rec.hlcvrh := Convert_Hlcvrh_Type( Get( slices, 407 ));
            rec.hlcvrl := Convert( slices, 408, ( -9, -8, -7, -2, -1 ) );
            rec.hlsv := Convert_Hlsv_Type( Get( slices, 409 ));
            rec.hlsva := Convert_Hlsva_Type( Get( slices, 410 ));
            rec.hlsvan := Convert_Hlsvan_Type( Get( slices, 411 ));
            rec.hlsvaf := Convert_Hlsvaf_Type( Get( slices, 412 ));
            rec.hlsvb := Convert_Hlsvb_Type( Get( slices, 413 ));
            rec.hlsvbn := Convert_Hlsvan_Type( Get( slices, 414 ));
            rec.hlsvbf := Convert_Hlsvaf_Type( Get( slices, 415 ));
            rec.hlsvc := Convert_Hlsvc_Type( Get( slices, 416 ));
            rec.hlsvcn := Convert_Hlsvan_Type( Get( slices, 417 ));
            rec.hlsvcf := Convert_Hlsvaf_Type( Get( slices, 418 ));
            rec.hlsvd := Convert_Hlsvd_Type( Get( slices, 419 ));
            rec.hlsvdn := Convert_Hlsvan_Type( Get( slices, 420 ));
            rec.hlsvdf := Convert_Hlsvaf_Type( Get( slices, 421 ));
            rec.hlsve := Convert_Hlsve_Type( Get( slices, 422 ));
            rec.hlsven := Convert_Hlsvan_Type( Get( slices, 423 ));
            rec.hlsvef := Convert_Hlsvaf_Type( Get( slices, 424 ));
            rec.hlsvf := Convert_Hlsvf_Type( Get( slices, 425 ));
            rec.hlsvfn := Convert_Hlsvan_Type( Get( slices, 426 ));
            rec.hlsvff := Convert_Hlsvaf_Type( Get( slices, 427 ));
            rec.hlsvg := Convert_Hlsvg_Type( Get( slices, 428 ));
            rec.hlsvgn := Convert_Hlsvan_Type( Get( slices, 429 ));
            rec.hlsvgf := Convert_Hlsvaf_Type( Get( slices, 430 ));
            rec.hlsvh := Convert_Hlsvh_Type( Get( slices, 431 ));
            rec.hlsvhn := Convert_Hlsvan_Type( Get( slices, 432 ));
            rec.hlsvhf := Convert_Hlsvaf_Type( Get( slices, 433 ));
            rec.hlsvi := Convert_Hlsvi_Type( Get( slices, 434 ));
            rec.hlsvin := Convert_Hlsvan_Type( Get( slices, 435 ));
            rec.hlsvif := Convert_Hlsvaf_Type( Get( slices, 436 ));
            rec.hlsvl := Convert_Hlsvl_Type( Get( slices, 437 ));
            rec.hlsvln := Convert_Hlsvln_Type( Get( slices, 438 ));
            rec.hlsvlf := Convert_Hlsvlf_Type( Get( slices, 439 ));
            rec.hlsvm := Convert_Hlsvm_Type( Get( slices, 440 ));
            rec.hlsvmn := Convert_Hlsvln_Type( Get( slices, 441 ));
            rec.hlsvmf := Convert_Hlsvlf_Type( Get( slices, 442 ));
            rec.hlsvj := Convert_Hlsvj_Type( Get( slices, 443 ));
            rec.hlsvjn := Convert_Hlsvan_Type( Get( slices, 444 ));
            rec.hlsvjf := Convert_Hlsvaf_Type( Get( slices, 445 ));
            rec.hlsvk := Convert_Hlsvk_Type( Get( slices, 446 ));
            rec.hlsvkn := Convert_Hlsvan_Type( Get( slices, 447 ));
            rec.hlsvkf := Convert_Hlsvaf_Type( Get( slices, 448 ));
            rec.hlck := Convert_Aidpl1_Type( Get( slices, 449 ));
            rec.hlcka := Convert_Hlcka_Type( Get( slices, 450 ));
            rec.hlckan := Convert_Hlckan_Type( Get( slices, 451 ));
            rec.hlckb := Convert_Hlcka_Type( Get( slices, 452 ));
            rec.hlckbn := Convert_Hlckan_Type( Get( slices, 453 ));
            rec.hlckc := Convert_Hlcka_Type( Get( slices, 454 ));
            rec.hlckcn := Convert_Hlckan_Type( Get( slices, 455 ));
            rec.hlckd := Convert_Hlcka_Type( Get( slices, 456 ));
            rec.hlckdn := Convert_Hlckan_Type( Get( slices, 457 ));
            rec.hlcke := Convert_Hlcka_Type( Get( slices, 458 ));
            rec.hlcken := Convert_Hlckan_Type( Get( slices, 459 ));
            rec.hlcki := Convert_Hlcki_Type( Get( slices, 460 ));
            rec.hlckin := Convert_Hlckin_Type( Get( slices, 461 ));
            rec.hlckf := Convert_Hlcka_Type( Get( slices, 462 ));
            rec.hlckfn := Convert_Hlckan_Type( Get( slices, 463 ));
            rec.hlckg := Convert_Hlcka_Type( Get( slices, 464 ));
            rec.hlckgn := Convert_Hlckan_Type( Get( slices, 465 ));
            rec.hlckh := Convert_Hlcka_Type( Get( slices, 466 ));
            rec.hlckhn := Convert_Hlckan_Type( Get( slices, 467 ));
            rec.smoker := Convert_Bscon_Type( Get( slices, 468 ));
            rec.ncigs := Convert( slices, 469, ( -9, -8, -7, -2, -1 ) );
            rec.spinhh := Convert_Hhch12_Type( Get( slices, 470 ));
            rec.aidhh := Convert_Aidhh_Type( Get( slices, 471 ));
            rec.aidhua := Convert( slices, 472, ( -9, -8, -7, -1 ) );
            rec.aidhub := Convert( slices, 473, ( -9, -8, -7 ) );
            rec.aidhuc := Convert( slices, 474, ( -9, -8, -7 ) );
            rec.aidxhh := Convert_Aidxhh_Type( Get( slices, 475 ));
            rec.naidxhh := Convert_Naidxhh_Type( Get( slices, 476 ));
            rec.aidhu1 := Convert_Aidhu1_Type( Get( slices, 477 ));
            rec.aidhu2 := Convert_Aidhu2_Type( Get( slices, 478 ));
            rec.aidhrs := Convert_Aidhrs_Type( Get( slices, 479 ));
            rec.ivma := Convert_Ivda_Type( Get( slices, 480 ));
            rec.ivmb := Convert_Ivdb_Type( Get( slices, 481 ));
            rec.ivmc := Convert_Ivec_Type( Get( slices, 482 ));
            rec.ivmd := Convert_Ivdd_Type( Get( slices, 483 ));
            rec.ivme := Convert_Ivee_Type( Get( slices, 484 ));
            rec.pe0h := Convert( slices, 485, ( -9, -8 ) );
            rec.pe0m := Convert( slices, 486, ( -9, -8 ) );
            rec.jbhas := Convert_Frnow_Type( Get( slices, 487 ));
            rec.jboff := Convert_Jboff_Type( Get( slices, 488 ));
            rec.jboffy := Convert_Jboffy_Type( Get( slices, 489 ));
            rec.jbterm1 := Convert_Jbterm1_Type( Get( slices, 490 ));
            rec.jbterm2 := Convert_Jbterm2_Type( Get( slices, 491 ));
            rec.jbck1 := Convert_Jbck1_Type( Get( slices, 492 ));
            rec.jbsocp := Convert_Hldsbl1_Type( Get( slices, 493 ));
            rec.jbsoc := Convert( slices, 494, ( -9, -8, -2, -1 ) );
            rec.jbsoc00 := Convert( slices, 495, ( -9, -8, -2, -1 ) );
            rec.jbck2 := Convert_Jbck2_Type( Get( slices, 496 ));
            rec.jbsocr := Convert_Bscon_Type( Get( slices, 497 ));
            rec.jbck3 := Convert_Jbck3_Type( Get( slices, 498 ));
            rec.jbsicp := Convert_Bscon_Type( Get( slices, 499 ));
            rec.jbsic92 := Convert( slices, 500, ( -9, -8, -7, -2, -1 ) );
            rec.jbck4 := Convert_Jbck4_Type( Get( slices, 501 ));
            rec.jbsicr := Convert_Bscon_Type( Get( slices, 502 ));
            rec.jbck5 := Convert_Jbck5_Type( Get( slices, 503 ));
            rec.jbempp := Convert_Bscon_Type( Get( slices, 504 ));
            rec.jbck6 := Convert_Jbck6_Type( Get( slices, 505 ));
            rec.jbempr := Convert_Bscon_Type( Get( slices, 506 ));
            rec.jbck7 := Convert_Jbck7_Type( Get( slices, 507 ));
            rec.jbsempp := Convert_Jbsempp_Type( Get( slices, 508 ));
            rec.jbsempr := Convert_Jbsempp_Type( Get( slices, 509 ));
            rec.jbsemp := Convert_Jbsemp_Type( Get( slices, 510 ));
            rec.jbck8 := Convert_Jbck8_Type( Get( slices, 511 ));
            rec.jbprom := Convert_Bscon_Type( Get( slices, 512 ));
            rec.jbchgd := Convert( slices, 513, ( -9, -8, -7, -2, -1 ) );
            rec.jbchgm := Convert_Cjsem_Type( Get( slices, 514 ));
            rec.jbchgy4 := Convert( slices, 515, ( -9, -8, -7, -2, -1 ) );
            rec.jbchgly := Convert_Jbchgly_Type( Get( slices, 516 ));
            rec.jbcspl := Convert_Bscon_Type( Get( slices, 517 ));
            rec.jbck9 := Convert_Jbck9_Type( Get( slices, 518 ));
            rec.jbmngp := Convert_Bscon_Type( Get( slices, 519 ));
            rec.jbmngr := Convert_Jbmngr_Type( Get( slices, 520 ));
            rec.jbck10 := Convert_Jbck10_Type( Get( slices, 521 ));
            rec.jbsectp := Convert_Bscon_Type( Get( slices, 522 ));
            rec.jbsect := Convert_Jbsect_Type( Get( slices, 523 ));
            rec.jbck11 := Convert_Jbck11_Type( Get( slices, 524 ));
            rec.jbsizep := Convert_Bscon_Type( Get( slices, 525 ));
            rec.jbsize := Convert_Jbsize_Type( Get( slices, 526 ));
            rec.jbhrs := Convert( slices, 527, ( -9, -8, -7, -2, -1 ) );
            rec.jbot := Convert( slices, 528, ( -9, -8, -7, -2, -1 ) );
            rec.jbotpd := Convert( slices, 529, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbhrlk := Convert_Jbhrlk_Type( Get( slices, 530 ));
            rec.jbpl := Convert_Jbpl_Type( Get( slices, 531 ));
            rec.jbttwt := Convert( slices, 532, ( -9, -8, -7, -3, -2, -1 ) );
            rec.jbttwm := Convert_Jbttwm_Type( Get( slices, 533 ));
            rec.jbsat2 := Convert( slices, 534, ( -9, -8, -7, -2, -1 ) );
            rec.jbsat4 := Convert_Jbsat4_Type( Get( slices, 535 ));
            rec.jbsat6 := Convert_Jbsat4_Type( Get( slices, 536 ));
            rec.jbsat7 := Convert_Jbsat_Type( Get( slices, 537 ));
            rec.jbsat := Convert_Jbsat_Type( Get( slices, 538 ));
            rec.paygl := Convert( slices, 539, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.paygw := Convert( slices, 540, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.paynl := Convert( slices, 541, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.paynw := Convert( slices, 542, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.pytc := Convert_Pytc_Type( Get( slices, 543 ));
            rec.pywftc := Convert( slices, 544, ( -9, -8, -7, -2, -1 ) );
            rec.pywftcw := Convert( slices, 545, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.payslp := Convert_Payslp_Type( Get( slices, 546 ));
            rec.payusl := Convert_Aidpl1_Type( Get( slices, 547 ));
            rec.payu := Convert( slices, 548, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.payuw := Convert( slices, 549, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.payug := Convert_Paylyg_Type( Get( slices, 550 ));
            rec.paydf1 := Convert_Paydf1_Type( Get( slices, 551 ));
            rec.paydf2 := Convert_Paydf2_Type( Get( slices, 552 ));
            rec.paydf3 := Convert_Paydf3_Type( Get( slices, 553 ));
            rec.paydf4 := Convert_Paydf4_Type( Get( slices, 554 ));
            rec.paydf5 := Convert_Paydf5_Type( Get( slices, 555 ));
            rec.paydf6 := Convert_Paydf6_Type( Get( slices, 556 ));
            rec.paydf7 := Convert_Paydf7_Type( Get( slices, 557 ));
            rec.paydf9 := Convert_Paydf9_Type( Get( slices, 558 ));
            rec.paydf8 := Convert_Paydf8_Type( Get( slices, 559 ));
            rec.paytyp := Convert_Paytyp_Type( Get( slices, 560 ));
            rec.ovtpay := Convert_Bpar16_Type( Get( slices, 561 ));
            rec.extrate := Convert( slices, 562, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.extrest := Convert_Basrest_Type( Get( slices, 563 ));
            rec.basrate := Convert( slices, 564, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.basrest := Convert_Basrest_Type( Get( slices, 565 ));
            rec.ovtrate := Convert( slices, 566, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.ovtrest := Convert_Basrest_Type( Get( slices, 567 ));
            rec.jbperfp := Convert_Coh1mr_Type( Get( slices, 568 ));
            rec.jbonus := Convert_Aidpl1_Type( Get( slices, 569 ));
            rec.jbonam := Convert( slices, 570, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbong := Convert_Jbong_Type( Get( slices, 571 ));
            rec.jbrise := Convert_Aidpl1_Type( Get( slices, 572 ));
            rec.tujbpl := Convert_Aidpl1_Type( Get( slices, 573 ));
            rec.tuin1 := Convert_Aidpl1_Type( Get( slices, 574 ));
            rec.jbopps := Convert_Aidpl1_Type( Get( slices, 575 ));
            rec.jbpen := Convert_Aidpl1_Type( Get( slices, 576 ));
            rec.jbpenm := Convert_Aidpl1_Type( Get( slices, 577 ));
            rec.jbtime := Convert_Jbtime_Type( Get( slices, 578 ));
            rec.jbwkhra := Convert_Yes_Or_Missing_Type( Get( slices, 579 ));
            rec.jbwkhrb := Convert_Yes_Or_Missing_Type( Get( slices, 580 ));
            rec.jbwkhrc := Convert_Yes_Or_Missing_Type( Get( slices, 581 ));
            rec.jbwkhrd := Convert_Yes_Or_Missing_Type( Get( slices, 582 ));
            rec.jbwkhre := Convert_Yes_Or_Missing_Type( Get( slices, 583 ));
            rec.jbwkhrf := Convert_Yes_Or_Missing_Type( Get( slices, 584 ));
            rec.jbwkhrg := Convert_Yes_Or_Missing_Type( Get( slices, 585 ));
            rec.jbwkhrh := Convert_Jbwkhrh_Type( Get( slices, 586 ));
            rec.payck1 := Convert_Payck1_Type( Get( slices, 587 ));
            rec.pays := Convert( slices, 588, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.paysw := Convert( slices, 589, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.paysg := Convert_Paylyg_Type( Get( slices, 590 ));
            rec.jbbgd1 := Convert( slices, 591, ( -9, -8, -7, -2, -1 ) );
            rec.jbbgm1 := Convert_Jbbgm1_Type( Get( slices, 592 ));
            rec.jbbgy41 := Convert( slices, 593, ( -9, -8, -7, -2, -1 ) );
            rec.jbbgly1 := Convert_Jbbgly1_Type( Get( slices, 594 ));
            rec.payly := Convert( slices, 595, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.paylyw := Convert( slices, 596, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.paylyg := Convert_Paylyg_Type( Get( slices, 597 ));
            rec.jsboss := Convert_Jsboss_Type( Get( slices, 598 ));
            rec.jssize := Convert_Jssize_Type( Get( slices, 599 ));
            rec.jshrs := Convert( slices, 600, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jshrlk := Convert_Jbhrlk_Type( Get( slices, 601 ));
            rec.jstime := Convert_Jstime_Type( Get( slices, 602 ));
            rec.jstypeb := Convert_Jstypeb_Type( Get( slices, 603 ));
            rec.jsaccs := Convert_Jsaccs_Type( Get( slices, 604 ));
            rec.jspart := Convert_Jspart_Type( Get( slices, 605 ));
            rec.jsprbm := Convert_Cjsbgm_Type( Get( slices, 606 ));
            rec.jsprby4 := Convert( slices, 607, ( -9, -8, -7, -2, -1 ) );
            rec.jsprem := Convert_Cjsbgm_Type( Get( slices, 608 ));
            rec.jsprey4 := Convert( slices, 609, ( -9, -8, -7, -2, -1 ) );
            rec.jsprf := Convert( slices, 610, ( -9, -8, -7, -3, -2, -1 ) );
            rec.jsprls := Convert_Jsprls_Type( Get( slices, 611 ));
            rec.jsprtx := Convert_Jsprtx_Type( Get( slices, 612 ));
            rec.jsprni := Convert_Jsprni_Type( Get( slices, 613 ));
            rec.jspayu := Convert( slices, 614, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jspayw := Convert( slices, 615, ( -9.0, -8.0, -7.0, -4.0, -2.0, -1.0 ) );
            rec.jspytx := Convert_Jspytx_Type( Get( slices, 616 ));
            rec.jspyni := Convert_Jspyni_Type( Get( slices, 617 ));
            rec.jspl := Convert_Jspl_Type( Get( slices, 618 ));
            rec.jsttwt := Convert( slices, 619, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.jsttwm := Convert_Jsttwm_Type( Get( slices, 620 ));
            rec.jssat1 := Convert_Jssat1_Type( Get( slices, 621 ));
            rec.jssat2 := Convert_Jbsat_Type( Get( slices, 622 ));
            rec.jssat4 := Convert_Jbsat_Type( Get( slices, 623 ));
            rec.jssat5 := Convert_Jbsat_Type( Get( slices, 624 ));
            rec.jssat := Convert_Jbsat_Type( Get( slices, 625 ));
            rec.jsck1 := Convert_Jsck1_Type( Get( slices, 626 ));
            rec.jssame := Convert_Bscon_Type( Get( slices, 627 ));
            rec.jsbgd1 := Convert( slices, 628, ( -9, -8, -7, -2, -1 ) );
            rec.jsbgm1 := Convert_Jbbgm1_Type( Get( slices, 629 ));
            rec.jsbgy41 := Convert( slices, 630, ( -9, -8, -7, -2, -1 ) );
            rec.jsbgly1 := Convert( slices, 631, ( -9, -8, -7 ) );
            rec.jblkcha := Convert_Jblkcha_Type( Get( slices, 632 ));
            rec.jbxpcha := Convert_Jblkcha_Type( Get( slices, 633 ));
            rec.jblkchb := Convert_Boolean_With_Missing( Get( slices, 634 ));
            rec.jbxpchb := Convert_Boolean_With_Missing( Get( slices, 635 ));
            rec.jblkchc := Convert_Boolean_With_Missing( Get( slices, 636 ));
            rec.jbxpchc := Convert_Boolean_With_Missing( Get( slices, 637 ));
            rec.jblkchd := Convert_Boolean_With_Missing( Get( slices, 638 ));
            rec.jbxpchd := Convert_Boolean_With_Missing( Get( slices, 639 ));
            rec.jblkche := Convert_Boolean_With_Missing( Get( slices, 640 ));
            rec.jbxpche := Convert_Boolean_With_Missing( Get( slices, 641 ));
            rec.rach12 := Convert_Hhch12_Type( Get( slices, 642 ));
            rec.jbchc1 := Convert_Jbchc1_Type( Get( slices, 643 ));
            rec.jbchc2 := Convert_Jbchc2_Type( Get( slices, 644 ));
            rec.jbchc3 := Convert_Jbchc3_Type( Get( slices, 645 ));
            rec.xpchcf := Convert_Xpchcf_Type( Get( slices, 646 ));
            rec.xpchc := Convert( slices, 647, ( -9, -8, -7, -2, -1 ) );
            rec.huxpch := Convert_Huxpch_Type( Get( slices, 648 ));
            rec.hunurs := Convert_Hunurs_Type( Get( slices, 649 ));
            rec.julk1 := Convert_Aidpl1_Type( Get( slices, 650 ));
            rec.julk4 := Convert_Bscon_Type( Get( slices, 651 ));
            rec.julka := Convert_Boolean_With_Missing( Get( slices, 652 ));
            rec.julkb := Convert_Boolean_With_Missing( Get( slices, 653 ));
            rec.julkc := Convert_Boolean_With_Missing( Get( slices, 654 ));
            rec.julkd := Convert_Boolean_With_Missing( Get( slices, 655 ));
            rec.julke := Convert_Boolean_With_Missing( Get( slices, 656 ));
            rec.julkjb := Convert_Aidpl1_Type( Get( slices, 657 ));
            rec.jubgn := Convert_Boolean_With_Missing( Get( slices, 658 ));
            rec.juspec := Convert_Juspec_Type( Get( slices, 659 ));
            rec.jusoc := Convert( slices, 660, ( -9, -8, -7, -2, -1 ) );
            rec.jusoc00 := Convert( slices, 661, ( -9, -8, -7, -2, -1 ) );
            rec.juhrsx := Convert( slices, 662, ( -9, -8, -7, -2, -1 ) );
            rec.jupayx := Convert( slices, 663, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jupayl := Convert( slices, 664, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.juhrsl := Convert( slices, 665, ( -9, -8, -7, -2, -1 ) );
            rec.eprosh := Convert_Cohxpm2_Type( Get( slices, 666 ));
            rec.eaage := Convert_Eaage_Type( Get( slices, 667 ));
            rec.jbub := Convert_Bscon_Type( Get( slices, 668 ));
            rec.jbuby := Convert_Jbuby_Type( Get( slices, 669 ));
            rec.j2has := Convert_Aidpl1_Type( Get( slices, 670 ));
            rec.j2soc := Convert( slices, 671, ( -9, -8, -7, -2, -1 ) );
            rec.j2soc00 := Convert( slices, 672, ( -9, -8, -7, -2, -1 ) );
            rec.j2semp := Convert_J2semp_Type( Get( slices, 673 ));
            rec.j2hrs := Convert( slices, 674, ( -9, -8, -7, -2, -1 ) );
            rec.j2pay := Convert( slices, 675, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ivea := Convert_Ivda_Type( Get( slices, 676 ));
            rec.iveb := Convert_Ivdb_Type( Get( slices, 677 ));
            rec.ivec := Convert_Ivec_Type( Get( slices, 678 ));
            rec.ived := Convert_Ivdd_Type( Get( slices, 679 ));
            rec.ivee := Convert_Ivee_Type( Get( slices, 680 ));
            rec.cjsck1 := Convert_Cjsck1_Type( Get( slices, 681 ));
            rec.cjsbgd := Convert( slices, 682, ( -9, -8, -7, -2, -1 ) );
            rec.cjsbgm := Convert_Cjsbgm_Type( Get( slices, 683 ));
            rec.cjsbgy4 := Convert( slices, 684, ( -9, -8, -7, -2, -1 ) );
            rec.cjsbly := Convert_Cjsbly_Type( Get( slices, 685 ));
            rec.cjsck2 := Convert_Cjsck2_Type( Get( slices, 686 ));
            rec.cjsck3 := Convert_Bscon_Type( Get( slices, 687 ));
            rec.cjsstly := Convert_Cjsstly_Type( Get( slices, 688 ));
            rec.cjsed := Convert( slices, 689, ( -9, -8, -7, -2, -1 ) );
            rec.cjsem := Convert_Cjsem_Type( Get( slices, 690 ));
            rec.cjsey4 := Convert( slices, 691, ( -9, -8, -7, -2, -1 ) );
            rec.cjscjs := Convert_Cjscjs_Type( Get( slices, 692 ));
            rec.cjsck4 := Convert_Cjsck2_Type( Get( slices, 693 ));
            rec.jhstpy := Convert_Jhstpy_Type( Get( slices, 694 ));
            rec.jbhad := Convert_Aidpl1_Type( Get( slices, 695 ));
            rec.jlend4 := Convert( slices, 696, ( -9, -8, -7, -2, -1 ) );
            rec.jlsoc := Convert( slices, 697, ( -9, -8, -7, -2, -1 ) );
            rec.jlsoc00 := Convert( slices, 698, ( -9, -8, -7, -2, -1 ) );
            rec.jlsic92 := Convert( slices, 699, ( -9, -8, -7 ) );
            rec.jlsemp := Convert_J2semp_Type( Get( slices, 700 ));
            rec.jlboss := Convert_Aidpl1_Type( Get( slices, 701 ));
            rec.jlmngr := Convert_Jlmngr_Type( Get( slices, 702 ));
            rec.jlsize := Convert_Jlsize_Type( Get( slices, 703 ));
            rec.ivja := Convert_Ivda_Type( Get( slices, 704 ));
            rec.ivjb := Convert_Ivdb_Type( Get( slices, 705 ));
            rec.ivjc := Convert_Ivec_Type( Get( slices, 706 ));
            rec.ivjd := Convert_Ivdd_Type( Get( slices, 707 ));
            rec.ivje := Convert_Ivee_Type( Get( slices, 708 ));
            rec.pv0h := Convert( slices, 709, ( -9, -8, -7 ) );
            rec.pv0m := Convert( slices, 710, ( -9, -8, -7 ) );
            rec.opnata := Convert_Opnata_Type( Get( slices, 711 ));
            rec.opnatb := Convert_Opnata_Type( Get( slices, 712 ));
            rec.opnatc := Convert_Opnata_Type( Get( slices, 713 ));
            rec.opnatd := Convert_Opnata_Type( Get( slices, 714 ));
            rec.opnate := Convert_Opnata_Type( Get( slices, 715 ));
            rec.opnatf := Convert_Opnata_Type( Get( slices, 716 ));
            rec.vote1 := Convert_Aidpl1_Type( Get( slices, 717 ));
            rec.vote2 := Convert_Aidpl1_Type( Get( slices, 718 ));
            rec.vote3 := Convert_Vote3_Type( Get( slices, 719 ));
            rec.vote4 := Convert_Vote3_Type( Get( slices, 720 ));
            rec.vote5 := Convert_Vote5_Type( Get( slices, 721 ));
            rec.vote7 := Convert_Vote7_Type( Get( slices, 722 ));
            rec.vote8 := Convert_Vote8_Type( Get( slices, 723 ));
            rec.vote6 := Convert_Vote6_Type( Get( slices, 724 ));
            rec.nipop5 := Convert_Nipop5_Type( Get( slices, 725 ));
            rec.opdev2 := Convert_Opdev2_Type( Get( slices, 726 ));
            rec.oprlg5 := Convert_Oprlg5_Type( Get( slices, 727 ));
            rec.oprlg7 := Convert_Cbagef_Type( Get( slices, 728 ));
            rec.oprlg1 := Convert_Oprlg1_Type( Get( slices, 729 ));
            rec.oprlg2 := Convert_Oprlg2_Type( Get( slices, 730 ));
            rec.oprlg3 := Convert_Oprlg3_Type( Get( slices, 731 ));
            rec.lacta := Convert_Lacta_Type( Get( slices, 732 ));
            rec.lactb := Convert_Lacta_Type( Get( slices, 733 ));
            rec.lactc := Convert_Lacta_Type( Get( slices, 734 ));
            rec.lactd := Convert_Lacta_Type( Get( slices, 735 ));
            rec.lacte := Convert_Lacta_Type( Get( slices, 736 ));
            rec.lactf := Convert_Lacta_Type( Get( slices, 737 ));
            rec.lacth := Convert_Lacta_Type( Get( slices, 738 ));
            rec.lacti := Convert_Lacta_Type( Get( slices, 739 ));
            rec.lactj := Convert_Lacta_Type( Get( slices, 740 ));
            rec.lactk := Convert_Lacta_Type( Get( slices, 741 ));
            rec.lactl := Convert_Lacta_Type( Get( slices, 742 ));
            rec.frna := Convert_Frna_Type( Get( slices, 743 ));
            rec.frnb := Convert_Frna_Type( Get( slices, 744 ));
            rec.frnc := Convert_Coh1mr_Type( Get( slices, 745 ));
            rec.lfimpa := Convert_Lfimpa_Type( Get( slices, 746 ));
            rec.lfimpb := Convert_Lfimpa_Type( Get( slices, 747 ));
            rec.lfimpc := Convert_Lfimpa_Type( Get( slices, 748 ));
            rec.lfimpd := Convert_Lfimpa_Type( Get( slices, 749 ));
            rec.lfimpe := Convert_Lfimpa_Type( Get( slices, 750 ));
            rec.lfimpf := Convert_Lfimpa_Type( Get( slices, 751 ));
            rec.lfimpg := Convert_Lfimpa_Type( Get( slices, 752 ));
            rec.lfimph := Convert_Lfimpa_Type( Get( slices, 753 ));
            rec.locsera := Convert_Locsera_Type( Get( slices, 754 ));
            rec.locserb := Convert_Locsera_Type( Get( slices, 755 ));
            rec.locserc := Convert_Locsera_Type( Get( slices, 756 ));
            rec.locserd := Convert_Locsera_Type( Get( slices, 757 ));
            rec.locsere := Convert_Locsera_Type( Get( slices, 758 ));
            rec.locchd := Convert_Locchd_Type( Get( slices, 759 ));
            rec.opngbha := Convert_Opnata_Type( Get( slices, 760 ));
            rec.opngbhb := Convert_Opnata_Type( Get( slices, 761 ));
            rec.opngbhc := Convert_Opnata_Type( Get( slices, 762 ));
            rec.opngbhd := Convert_Opnata_Type( Get( slices, 763 ));
            rec.opngbhe := Convert_Opnata_Type( Get( slices, 764 ));
            rec.opngbhf := Convert_Opnata_Type( Get( slices, 765 ));
            rec.opngbhg := Convert_Opnata_Type( Get( slices, 766 ));
            rec.opngbhh := Convert_Opnata_Type( Get( slices, 767 ));
            rec.grnlfa := Convert_Grnlfa_Type( Get( slices, 768 ));
            rec.grnlfb := Convert_Grnlfa_Type( Get( slices, 769 ));
            rec.grnlfc := Convert_Grnlfa_Type( Get( slices, 770 ));
            rec.grnlfd := Convert_Grnlfa_Type( Get( slices, 771 ));
            rec.grnlfe := Convert_Grnlfa_Type( Get( slices, 772 ));
            rec.grnlff := Convert_Grnlfa_Type( Get( slices, 773 ));
            rec.grnlfg := Convert_Grnlfa_Type( Get( slices, 774 ));
            rec.grnlfh := Convert_Grnlfa_Type( Get( slices, 775 ));
            rec.flyes1 := Convert_Cd10new_Type( Get( slices, 776 ));
            rec.flyes2 := Convert_Cd10new_Type( Get( slices, 777 ));
            rec.flyes3 := Convert_Cd10new_Type( Get( slices, 778 ));
            rec.flyes4 := Convert_Cd10new_Type( Get( slices, 779 ));
            rec.nflyin := Convert( slices, 780, ( -9, -8, -7, -2, -1 ) );
            rec.nflyeu := Convert( slices, 781, ( -9, -8, -7, -2, -1 ) );
            rec.nflyos := Convert( slices, 782, ( -9, -8, -7, -2, -1 ) );
            rec.openv1 := Convert_Openv1_Type( Get( slices, 783 ));
            rec.openv2 := Convert_Openv1_Type( Get( slices, 784 ));
            rec.openv3 := Convert_Openv1_Type( Get( slices, 785 ));
            rec.openv4 := Convert_Openv1_Type( Get( slices, 786 ));
            rec.ivva := Convert_Ivva_Type( Get( slices, 787 ));
            rec.ivvb := Convert_Ivdb_Type( Get( slices, 788 ));
            rec.ivvc := Convert_Ivfc_Type( Get( slices, 789 ));
            rec.ivvd := Convert_Ivdd_Type( Get( slices, 790 ));
            rec.ivve := Convert_Ivee_Type( Get( slices, 791 ));
            rec.pf0h := Convert( slices, 792, ( -9, -8 ) );
            rec.pf0m := Convert( slices, 793, ( -9, -8 ) );
            rec.f101 := Convert_F101_Type( Get( slices, 794 ));
            rec.f102 := Convert_F102_Type( Get( slices, 795 ));
            rec.f103 := Convert_F103_Type( Get( slices, 796 ));
            rec.f104 := Convert( slices, 797, ( -9, -8, -7 ) );
            rec.f105 := Convert_F105_Type( Get( slices, 798 ));
            rec.f106 := Convert_F106_Type( Get( slices, 799 ));
            rec.f107 := Convert_F107_Type( Get( slices, 800 ));
            rec.f116 := Convert_F116_Type( Get( slices, 801 ));
            rec.f118 := Convert_F118_Type( Get( slices, 802 ));
            rec.f119 := Convert_F119_Type( Get( slices, 803 ));
            rec.f121 := Convert_F121_Type( Get( slices, 804 ));
            rec.f122 := Convert_F122_Type( Get( slices, 805 ));
            rec.f125 := Convert_F125_Type( Get( slices, 806 ));
            rec.f126 := Convert_F126_Type( Get( slices, 807 ));
            rec.f127 := Convert_F127_Type( Get( slices, 808 ));
            rec.f128 := Convert_F128_Type( Get( slices, 809 ));
            rec.f132 := Convert_F132_Type( Get( slices, 810 ));
            rec.f135 := Convert_F135_Type( Get( slices, 811 ));
            rec.f137 := Convert_F137_Type( Get( slices, 812 ));
            rec.f138 := Convert_F138_Type( Get( slices, 813 ));
            rec.f139 := Convert_F139_Type( Get( slices, 814 ));
            rec.f140 := Convert_F140_Type( Get( slices, 815 ));
            rec.f141 := Convert_F141_Type( Get( slices, 816 ));
            rec.f142 := Convert_F142_Type( Get( slices, 817 ));
            rec.f143 := Convert_F143_Type( Get( slices, 818 ));
            rec.f144 := Convert_F144_Type( Get( slices, 819 ));
            rec.f151 := Convert_F151_Type( Get( slices, 820 ));
            rec.f152 := Convert_F152_Type( Get( slices, 821 ));
            rec.f153 := Convert_F153_Type( Get( slices, 822 ));
            rec.f154 := Convert_F154_Type( Get( slices, 823 ));
            rec.f155 := Convert_F155_Type( Get( slices, 824 ));
            rec.f156 := Convert_F156_Type( Get( slices, 825 ));
            rec.f157 := Convert_F157_Type( Get( slices, 826 ));
            rec.f158 := Convert_F158_Type( Get( slices, 827 ));
            rec.f159 := Convert_F159_Type( Get( slices, 828 ));
            rec.rsrpen := Convert_Cbagef_Type( Get( slices, 829 ));
            rec.rpencr := Convert_Cbagef_Type( Get( slices, 830 ));
            rec.rdsben := Convert_Cbagef_Type( Get( slices, 831 ));
            rec.rdsbn16 := Convert_Yes_Or_Missing_Type( Get( slices, 832 ));
            rec.rdsbn18 := Convert_Yes_Or_Missing_Type( Get( slices, 833 ));
            rec.rdsbn19 := Convert_Yes_Or_Missing_Type( Get( slices, 834 ));
            rec.rdsbn21 := Convert_Yes_Or_Missing_Type( Get( slices, 835 ));
            rec.rdsbn22 := Convert_Yes_Or_Missing_Type( Get( slices, 836 ));
            rec.rdsbn25 := Convert_Yes_Or_Missing_Type( Get( slices, 837 ));
            rec.rdsbn26 := Convert_Yes_Or_Missing_Type( Get( slices, 838 ));
            rec.rdsbn27 := Convert_Yes_Or_Missing_Type( Get( slices, 839 ));
            rec.rdsbn28 := Convert_Yes_Or_Missing_Type( Get( slices, 840 ));
            rec.ris := Convert_Yes_Or_Missing_Type( Get( slices, 841 ));
            rec.rjsa := Convert_Yes_Or_Missing_Type( Get( slices, 842 ));
            rec.nisjsa := Convert_Nisjsa_Type( Get( slices, 843 ));
            rec.mach18 := Convert_Mach18_Type( Get( slices, 844 ));
            rec.rchben := Convert_Cbagef_Type( Get( slices, 845 ));
            rec.rhben := Convert_Cbagef_Type( Get( slices, 846 ));
            rec.nfhs1 := Convert_Nfhs1_Type( Get( slices, 847 ));
            rec.nfhs2 := Convert_Nfhs1_Type( Get( slices, 848 ));
            rec.nfhs3 := Convert_Nfhs1_Type( Get( slices, 849 ));
            rec.nfhs4 := Convert_Nfhs1_Type( Get( slices, 850 ));
            rec.nfhs5 := Convert_Nfhs1_Type( Get( slices, 851 ));
            rec.nfhs6 := Convert_Nfhs1_Type( Get( slices, 852 ));
            rec.nfhs7 := Convert_Nfhs1_Type( Get( slices, 853 ));
            rec.nfhs8 := Convert_Nfhs1_Type( Get( slices, 854 ));
            rec.nfhs9 := Convert_Nfhs1_Type( Get( slices, 855 ));
            rec.nfhs10 := Convert_Nfhs1_Type( Get( slices, 856 ));
            rec.nfhs11 := Convert_Nfhs1_Type( Get( slices, 857 ));
            rec.nfhs12 := Convert_Nfhs1_Type( Get( slices, 858 ));
            rec.nfh1 := Convert_Cbagef_Type( Get( slices, 859 ));
            rec.nfh2 := Convert_Cbagef_Type( Get( slices, 860 ));
            rec.nfh3 := Convert_Cbagef_Type( Get( slices, 861 ));
            rec.nfh4 := Convert_Cbagef_Type( Get( slices, 862 ));
            rec.nfh5 := Convert_Cbagef_Type( Get( slices, 863 ));
            rec.nfh6 := Convert_Cbagef_Type( Get( slices, 864 ));
            rec.nfh7 := Convert_Cbagef_Type( Get( slices, 865 ));
            rec.nfh8 := Convert_Cbagef_Type( Get( slices, 866 ));
            rec.nfh9 := Convert_Cbagef_Type( Get( slices, 867 ));
            rec.nfh10 := Convert_Cbagef_Type( Get( slices, 868 ));
            rec.nfh11 := Convert_Cbagef_Type( Get( slices, 869 ));
            rec.nfh12 := Convert_Cbagef_Type( Get( slices, 870 ));
            rec.nf1 := Convert( slices, 871, ( -9, -8, -7, -2, -1 ) );
            rec.nipens := Convert_Cbagef_Type( Get( slices, 872 ));
            rec.niserps := Convert_Cbagef_Type( Get( slices, 873 ));
            rec.fisit := Convert_Fisit_Type( Get( slices, 874 ));
            rec.fisitc := Convert( slices, 875, ( -9, -8, -7, -2, -1 ) );
            rec.fisity := Convert_Fisity_Type( Get( slices, 876 ));
            rec.fisitx := Convert( slices, 877, ( -9, -8, -7, -2, -1 ) );
            rec.fiyrdia := Convert( slices, 878, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.fiyrdb1 := Convert_Boolean_With_Missing( Get( slices, 879 ));
            rec.fiyrdb2 := Convert_Boolean_With_Missing( Get( slices, 880 ));
            rec.fiyrdb3 := Convert_Boolean_With_Missing( Get( slices, 881 ));
            rec.fiyrdb4 := Convert_Boolean_With_Missing( Get( slices, 882 ));
            rec.fiyrdb5 := Convert_Boolean_With_Missing( Get( slices, 883 ));
            rec.fiyrdb6 := Convert_Boolean_With_Missing( Get( slices, 884 ));
            rec.save := Convert_Aidpl1_Type( Get( slices, 885 ));
            rec.saved := Convert( slices, 886, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.savey1 := Convert_Savey1_Type( Get( slices, 887 ));
            rec.savey2 := Convert_Savey1_Type( Get( slices, 888 ));
            rec.savreg := Convert_Savreg_Type( Get( slices, 889 ));
            rec.savlt := Convert_Savlt_Type( Get( slices, 890 ));
            rec.pppen := Convert_Aidpl1_Type( Get( slices, 891 ));
            rec.pck1 := Convert( slices, 892, ( -9, -8, -7 ) );
            rec.penvrf := Convert_Hldsbl1_Type( Get( slices, 893 ));
            rec.pck2 := Convert( slices, 894, ( -9, -8, -7 ) );
            rec.penb4 := Convert_Penb4_Type( Get( slices, 895 ));
            rec.penb4y4 := Convert( slices, 896, ( -9, -8, -7, -2, -1 ) );
            rec.penb4v := Convert( slices, 897, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.penb4w := Convert( slices, 898, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.penyr4 := Convert( slices, 899, ( -9, -8, -7, -2, -1 ) );
            rec.penadd := Convert_Aidpl1_Type( Get( slices, 900 ));
            rec.penadv := Convert( slices, 901, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.penadw := Convert( slices, 902, ( -9.0, -8.0, -7.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.windf := Convert_Debt_Type( Get( slices, 903 ));
            rec.windfa := Convert_Windfa_Type( Get( slices, 904 ));
            rec.windfay := Convert( slices, 905, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windfb := Convert_Windfb_Type( Get( slices, 906 ));
            rec.windfby := Convert( slices, 907, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windfc := Convert_Windfc_Type( Get( slices, 908 ));
            rec.windfcy := Convert( slices, 909, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windfd := Convert_Windfd_Type( Get( slices, 910 ));
            rec.windfdy := Convert( slices, 911, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windff := Convert_Windff_Type( Get( slices, 912 ));
            rec.windffy := Convert( slices, 913, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windfg := Convert_Windfg_Type( Get( slices, 914 ));
            rec.windfgy := Convert( slices, 915, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.windfh := Convert_Nisjsa_Type( Get( slices, 916 ));
            rec.windfhy := Convert( slices, 917, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.xpmeal := Convert_Xpleis_Type( Get( slices, 918 ));
            rec.xpleis := Convert_Xpleis_Type( Get( slices, 919 ));
            rec.ftexhh := Convert_Aidpl1_Type( Get( slices, 920 ));
            rec.ftexa := Convert_Ftexa_Type( Get( slices, 921 ));
            rec.ftexa1 := Convert_Ftexa1_Type( Get( slices, 922 ));
            rec.ftexa2 := Convert_Ftexa2_Type( Get( slices, 923 ));
            rec.ftexa3 := Convert_Ftexa3_Type( Get( slices, 924 ));
            rec.ftexa4 := Convert_Ftexa4_Type( Get( slices, 925 ));
            rec.ftexa5 := Convert_Ftexa5_Type( Get( slices, 926 ));
            rec.ftexa6 := Convert_Ftexa6_Type( Get( slices, 927 ));
            rec.ftexav := Convert( slices, 928, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ftexaw := Convert( slices, 929, ( -9.0, -8.0, -7.0, -5.0, -3.0, -2.0, -1.0 ) );
            rec.ftexb := Convert_Ftexb_Type( Get( slices, 930 ));
            rec.ftexb1 := Convert_Ftexa1_Type( Get( slices, 931 ));
            rec.ftexb2 := Convert_Ftexa2_Type( Get( slices, 932 ));
            rec.ftexb3 := Convert_Ftexa3_Type( Get( slices, 933 ));
            rec.ftexb4 := Convert_Ftexa4_Type( Get( slices, 934 ));
            rec.ftexb5 := Convert_Ftexa5_Type( Get( slices, 935 ));
            rec.ftexb6 := Convert_Ftexa6_Type( Get( slices, 936 ));
            rec.ftexbv := Convert( slices, 937, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ftexbw := Convert( slices, 938, ( -9.0, -8.0, -7.0, -5.0, -3.0, -2.0, -1.0 ) );
            rec.ftexc := Convert_Ftexc_Type( Get( slices, 939 ));
            rec.ftexc1 := Convert_Ftexa1_Type( Get( slices, 940 ));
            rec.ftexc2 := Convert_Ftexa2_Type( Get( slices, 941 ));
            rec.ftexc3 := Convert_Ftexa3_Type( Get( slices, 942 ));
            rec.ftexc4 := Convert_Ftexa4_Type( Get( slices, 943 ));
            rec.ftexc5 := Convert_Ftexa5_Type( Get( slices, 944 ));
            rec.ftexc6 := Convert_Ftexa6_Type( Get( slices, 945 ));
            rec.ftexcv := Convert( slices, 946, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.ftexcw := Convert( slices, 947, ( -9.0, -8.0, -7.0, -5.0, -3.0, -2.0, -1.0 ) );
            rec.hubuys := Convert_Hubuys_Type( Get( slices, 948 ));
            rec.hufrys := Convert_Hubuys_Type( Get( slices, 949 ));
            rec.humops := Convert_Hubuys_Type( Get( slices, 950 ));
            rec.huiron := Convert_Hubuys_Type( Get( slices, 951 ));
            rec.hhch12 := Convert_Hhch12_Type( Get( slices, 952 ));
            rec.husits := Convert_Husits_Type( Get( slices, 953 ));
            rec.howlng := Convert( slices, 954, ( -9, -8, -7, -3, -2, -1 ) );
            rec.caruse := Convert_Caruse_Type( Get( slices, 955 ));
            rec.mobuse := Convert_Mobuse_Type( Get( slices, 956 ));
            rec.neigh := Convert_Neigh_Type( Get( slices, 957 ));
            rec.neigh1 := Convert_Neigh1_Type( Get( slices, 958 ));
            rec.neigh2 := Convert_Neigh2_Type( Get( slices, 959 ));
            rec.neigh3 := Convert_Neigh2_Type( Get( slices, 960 ));
            rec.neigh4 := Convert_Neigh2_Type( Get( slices, 961 ));
            rec.cosh := Convert_Cosb_Type( Get( slices, 962 ));
            rec.coshf := Convert_Cosb_Type( Get( slices, 963 ));
            rec.cose := Convert_Cose_Type( Get( slices, 964 ));
            rec.cosb := Convert_Cosb_Type( Get( slices, 965 ));
            rec.ivfa := Convert_Ivda_Type( Get( slices, 966 ));
            rec.ivfb := Convert_Ivdb_Type( Get( slices, 967 ));
            rec.ivfc := Convert_Ivfc_Type( Get( slices, 968 ));
            rec.ivfd := Convert_Ivdd_Type( Get( slices, 969 ));
            rec.ivfe := Convert_Ivee_Type( Get( slices, 970 ));
            rec.ivfoih := Convert( slices, 971, ( -9, -8 ) );
            rec.ivfoim := Convert( slices, 972, ( -9, -8 ) );
            rec.ivsc := Convert_Ivsc_Type( Get( slices, 973 ));
            rec.iv1 := Convert_Hhch12_Type( Get( slices, 974 ));
            rec.iv2 := Convert_Iv2_Type( Get( slices, 975 ));
            rec.iv4 := Convert_Iv4_Type( Get( slices, 976 ));
            rec.iv5 := Convert_Iv5_Type( Get( slices, 977 ));
            rec.iv5aa := Convert_Iv5aa_Type( Get( slices, 978 ));
            rec.iv5ab := Convert_Iv5ab_Type( Get( slices, 979 ));
            rec.iv5ac := Convert_Iv5ac_Type( Get( slices, 980 ));
            rec.iv6a := Convert_Hhch12_Type( Get( slices, 981 ));
            rec.iv6b := Convert_Hhch12_Type( Get( slices, 982 ));
            rec.iv6c := Convert_Hhch12_Type( Get( slices, 983 ));
            rec.iv6d := Convert_Hhch12_Type( Get( slices, 984 ));
            rec.iv6e := Convert_Hhch12_Type( Get( slices, 985 ));
            rec.iv6f := Convert_Hhch12_Type( Get( slices, 986 ));
            rec.iv7 := Convert( slices, 987, ( -9, -8, -7 ) );
            rec.iv9 := Convert_Aglt20_Type( Get( slices, 988 ));
            rec.iv10no := Convert_Iv10no_Type( Get( slices, 989 ));
            rec.iv10a := Convert_Yes_Or_Missing_Type( Get( slices, 990 ));
            rec.iv10b := Convert_Yes_Or_Missing_Type( Get( slices, 991 ));
            rec.iv10c := Convert_Yes_Or_Missing_Type( Get( slices, 992 ));
            rec.iv10d := Convert_Yes_Or_Missing_Type( Get( slices, 993 ));
            rec.iv10e := Convert_Yes_Or_Missing_Type( Get( slices, 994 ));
            rec.iv10f := Convert_Yes_Or_Missing_Type( Get( slices, 995 ));
            rec.iv10g := Convert_Yes_Or_Missing_Type( Get( slices, 996 ));
            rec.iv10h := Convert_Yes_Or_Missing_Type( Get( slices, 997 ));
            rec.iv10i := Convert_Yes_Or_Missing_Type( Get( slices, 998 ));
            rec.iv10j := Convert_Yes_Or_Missing_Type( Get( slices, 999 ));
            rec.iv10k := Convert_Yes_Or_Missing_Type( Get( slices, 1000 ));
            rec.iv10l := Convert_Yes_Or_Missing_Type( Get( slices, 1001 ));
            rec.ghqa := Convert_Ghqa_Type( Get( slices, 1002 ));
            rec.ghqb := Convert_Ghqb_Type( Get( slices, 1003 ));
            rec.ghqc := Convert_Ghqc_Type( Get( slices, 1004 ));
            rec.ghqd := Convert_Ghqc_Type( Get( slices, 1005 ));
            rec.ghqe := Convert_Ghqe_Type( Get( slices, 1006 ));
            rec.ghqf := Convert_Ghqe_Type( Get( slices, 1007 ));
            rec.ghqg := Convert_Ghqc_Type( Get( slices, 1008 ));
            rec.ghqh := Convert_Ghqc_Type( Get( slices, 1009 ));
            rec.ghqi := Convert_Ghqb_Type( Get( slices, 1010 ));
            rec.ghqj := Convert_Ghqe_Type( Get( slices, 1011 ));
            rec.ghqk := Convert_Ghqe_Type( Get( slices, 1012 ));
            rec.ghql := Convert_Ghqc_Type( Get( slices, 1013 ));
            rec.opfamo := Convert_Opfamo_Type( Get( slices, 1014 ));
            rec.opfaml := Convert_Opfamj_Type( Get( slices, 1015 ));
            rec.opfamp := Convert_Opfamo_Type( Get( slices, 1016 ));
            rec.opfamq := Convert_Opfamq_Type( Get( slices, 1017 ));
            rec.opfamk := Convert_Opfamj_Type( Get( slices, 1018 ));
            rec.opfamr := Convert_Opfamr_Type( Get( slices, 1019 ));
            rec.lfsat1 := Convert_Lfsat1_Type( Get( slices, 1020 ));
            rec.lfsat2 := Convert_Lfsat1_Type( Get( slices, 1021 ));
            rec.lfsat3 := Convert_Lfsat1_Type( Get( slices, 1022 ));
            rec.lfsat4 := Convert_Lfsat1_Type( Get( slices, 1023 ));
            rec.lfsat5 := Convert_Lfsat1_Type( Get( slices, 1024 ));
            rec.lfsat6 := Convert_Lfsat1_Type( Get( slices, 1025 ));
            rec.lfsat7 := Convert_Lfsat1_Type( Get( slices, 1026 ));
            rec.lfsat8 := Convert_Lfsat1_Type( Get( slices, 1027 ));
            rec.lfsato := Convert_Lfsat1_Type( Get( slices, 1028 ));
            rec.lfsatl := Convert( slices, 1029, ( -9, -8, -7, -2, -1 ) );
            rec.trust := Convert_Trust_Type( Get( slices, 1030 ));
            rec.riska := Convert_Riska_Type( Get( slices, 1031 ));
            rec.riskb := Convert_Riskb_Type( Get( slices, 1032 ));
            rec.openva := Convert_Openva_Type( Get( slices, 1033 ));
            rec.openvb := Convert_Openvb_Type( Get( slices, 1034 ));
            rec.openvc := Convert_Openvc_Type( Get( slices, 1035 ));
            rec.opcca := Convert_Opcca_Type( Get( slices, 1036 ));
            rec.opccb := Convert_Opcca_Type( Get( slices, 1037 ));
            rec.opccc := Convert_Opcca_Type( Get( slices, 1038 ));
            rec.opccd := Convert_Opcca_Type( Get( slices, 1039 ));
            rec.opcce := Convert( slices, 1040, ( -9, -8, -7, -2, -1 ) );
            rec.opccf := Convert( slices, 1041, ( -9, -8, -7, -2, -1 ) );
            rec.wemwba := Convert_Wemwba_Type( Get( slices, 1042 ));
            rec.wemwbb := Convert_Wemwba_Type( Get( slices, 1043 ));
            rec.wemwbc := Convert_Wemwba_Type( Get( slices, 1044 ));
            rec.wemwbd := Convert_Wemwba_Type( Get( slices, 1045 ));
            rec.wemwbe := Convert_Wemwba_Type( Get( slices, 1046 ));
            rec.wemwbf := Convert_Wemwba_Type( Get( slices, 1047 ));
            rec.wemwbg := Convert_Wemwba_Type( Get( slices, 1048 ));
            rec.netsx1 := Convert_Netsx1_Type( Get( slices, 1049 ));
            rec.netsx2 := Convert_Netsx1_Type( Get( slices, 1050 ));
            rec.netsx3 := Convert_Netsx1_Type( Get( slices, 1051 ));
            rec.net1wr := Convert_Aidpl1_Type( Get( slices, 1052 ));
            rec.net2wr := Convert_Aidpl1_Type( Get( slices, 1053 ));
            rec.net3wr := Convert_Aidpl1_Type( Get( slices, 1054 ));
            rec.net1rl := Convert_Net1rl_Type( Get( slices, 1055 ));
            rec.net2rl := Convert_Net1rl_Type( Get( slices, 1056 ));
            rec.net3rl := Convert_Net1rl_Type( Get( slices, 1057 ));
            rec.net1ag := Convert( slices, 1058, ( -9, -8, -7, -2, -1 ) );
            rec.net2ag := Convert( slices, 1059, ( -9, -8, -7, -2, -1 ) );
            rec.net3ag := Convert( slices, 1060, ( -9, -8, -7, -2, -1 ) );
            rec.net1kn := Convert_Net1kn_Type( Get( slices, 1061 ));
            rec.net2kn := Convert_Net1kn_Type( Get( slices, 1062 ));
            rec.net3kn := Convert_Net1kn_Type( Get( slices, 1063 ));
            rec.net1ph := Convert_Net1ph_Type( Get( slices, 1064 ));
            rec.net2ph := Convert_Net1ph_Type( Get( slices, 1065 ));
            rec.net3ph := Convert_Net1ph_Type( Get( slices, 1066 ));
            rec.net1lv := Convert_Net1lv_Type( Get( slices, 1067 ));
            rec.net2lv := Convert_Net1lv_Type( Get( slices, 1068 ));
            rec.net3lv := Convert_Net1lv_Type( Get( slices, 1069 ));
            rec.net1jb := Convert_Net1jb_Type( Get( slices, 1070 ));
            rec.net2jb := Convert_Net1jb_Type( Get( slices, 1071 ));
            rec.net3jb := Convert_Net1jb_Type( Get( slices, 1072 ));
            rec.net1et := Convert_Net1et_Type( Get( slices, 1073 ));
            rec.net2et := Convert_Net1et_Type( Get( slices, 1074 ));
            rec.net3et := Convert_Net1et_Type( Get( slices, 1075 ));
            rec.netsoc := Convert( slices, 1076, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.prrs2i := Convert_Prrs2i_Type( Get( slices, 1077 ));
            rec.pripn := Convert( slices, 1078, ( -9, -8 ) );
            rec.prwhy := Convert_Prwhy_Type( Get( slices, 1079 ));
            rec.pplevr := Convert_Plever_Type( Get( slices, 1080 ));
            rec.presbgm := Convert_Presbgm_Type( Get( slices, 1081 ));
            rec.presby4 := Convert( slices, 1082, ( -9, -8, -7, -2, -1 ) );
            rec.presly := Convert_Presly_Type( Get( slices, 1083 ));
            rec.prfehq := Convert_Prfehq_Type( Get( slices, 1084 ));
            rec.prsehq := Convert_Prsehq_Type( Get( slices, 1085 ));
            rec.prjbft := Convert_Prjbft_Type( Get( slices, 1086 ));
            rec.prjbbgm := Convert_Presbgm_Type( Get( slices, 1087 ));
            rec.prjbby4 := Convert( slices, 1088, ( -9, -8, -7, -2, -1 ) );
            rec.prjbly := Convert_Prjbly_Type( Get( slices, 1089 ));
            rec.prearn := Convert_Prearn_Type( Get( slices, 1090 ));
            rec.prf101 := Convert_Prf101_Type( Get( slices, 1091 ));
            rec.prf102 := Convert_Prf102_Type( Get( slices, 1092 ));
            rec.prf116 := Convert_Prf116_Type( Get( slices, 1093 ));
            rec.prf131 := Convert_Prf131_Type( Get( slices, 1094 ));
            rec.prf135 := Convert_Prf135_Type( Get( slices, 1095 ));
            rec.prf137 := Convert_Prf137_Type( Get( slices, 1096 ));
            rec.prf139 := Convert_Prf139_Type( Get( slices, 1097 ));
            rec.prf125 := Convert_Prf125_Type( Get( slices, 1098 ));
            rec.prf141 := Convert_Prf141_Type( Get( slices, 1099 ));
            rec.prf143 := Convert_Prf143_Type( Get( slices, 1100 ));
            rec.prf107 := Convert_Prf107_Type( Get( slices, 1101 ));
            rec.prfirn := Convert_Prfirn_Type( Get( slices, 1102 ));
            rec.prfitb := Convert_Prfitb_Type( Get( slices, 1103 ));
            rec.ivpa := Convert_Ivpa_Type( Get( slices, 1104 ));
            rec.ivpb := Convert_Ivpb_Type( Get( slices, 1105 ));
            rec.ivpc := Convert_Ivpc_Type( Get( slices, 1106 ));
            rec.ivpd := Convert_Ivpd_Type( Get( slices, 1107 ));
            rec.ivpe := Convert_Ivpe_Type( Get( slices, 1108 ));
            rec.thrpop := Convert_Bscon_Type( Get( slices, 1109 ));
            rec.thhrpw := Convert_Bscon_Type( Get( slices, 1110 ));
            rec.telqly := Convert_Bscon_Type( Get( slices, 1111 ));
            rec.tlhqly := Convert_Tlhqly_Type( Get( slices, 1112 ));
            rec.telqal := Convert_Bscon_Type( Get( slices, 1113 ));
            rec.telhtq := Convert_Telhtq_Type( Get( slices, 1114 ));
            rec.trpen := Convert_Bscon_Type( Get( slices, 1115 ));
            rec.trben1 := Convert_Bscon_Type( Get( slices, 1116 ));
            rec.trben2 := Convert_Bscon_Type( Get( slices, 1117 ));
            rec.tropay := Convert_Bscon_Type( Get( slices, 1118 ));
            rec.pid := Convert( slices, 1119 );
            rec.iviolw := Convert_Iviolw_Type( Get( slices, 1120 ));
            rec.hhmem := Convert_Hhmem_Type( Get( slices, 1121 ));
            rec.newhy := Convert_Newhy_Type( Get( slices, 1122 ));
            rec.nemnjn := Convert_Nemnjn_Type( Get( slices, 1123 ));
            rec.neyrjn4 := Convert( slices, 1124, ( -9, -8, -7, -2, -1 ) );
            rec.ivfio := Convert_Ivfio_Type( Get( slices, 1125 ));
            rec.iodc := Convert_Iodc_Type( Get( slices, 1126 ));
            rec.memorig := Convert_Memorig_Type( Get( slices, 1127 ));
            rec.hgr2r := Convert_Hgr2r_Type( Get( slices, 1128 ));
            rec.hgsex := Convert_Hgsex_Type( Get( slices, 1129 ));
            rec.hgbm := Convert_Hgbm_Type( Get( slices, 1130 ));
            rec.hgby := Convert( slices, 1131, ( -2, -1 ) );
            rec.mastat := Convert_Mastat_Type( Get( slices, 1132 ));
            rec.hgspn := Convert( slices, 1133, ( -9, -8, -2, -1 ) );
            rec.hgemp := Convert_Hgemp_Type( Get( slices, 1134 ));
            rec.hgfno := Convert( slices, 1135, ( -9, -8, -2, -1 ) );
            rec.hgmno := Convert( slices, 1136, ( -9, -8, -2, -1 ) );
            rec.hgra := Convert( slices, 1137, ( -9, -8, -2, -1 ) );
            rec.age := Convert( slices, 1138, ( -9, -8 ) );
            rec.age12 := Convert( slices, 1139, ( -9, -8 ) );
            rec.butype := Convert_Butype_Type( Get( slices, 1140 ));
            rec.buno := Convert( slices, 1141, ( -9, -8 ) );
            rec.nchild := Convert( slices, 1142, ( -9, -8 ) );
            rec.hoh := Convert_Hoh_Type( Get( slices, 1143 ));
            rec.rach16 := Convert_Hhch12_Type( Get( slices, 1144 ));
            rec.sampst := Convert_Sampst_Type( Get( slices, 1145 ));
            rec.movest := Convert_Movest_Type( Get( slices, 1146 ));
            rec.region := Convert_Region_Type( Get( slices, 1147 ));
            rec.hhsize := Convert( slices, 1148, ( -9, -8 ) );
            rec.hhtype := Convert_Hhtype_Type( Get( slices, 1149 ));
            rec.tenure := Convert_Tenure_Type( Get( slices, 1150 ));
            rec.qfedhi := Convert_Qfedhi_Type( Get( slices, 1151 ));
            rec.qfvoc := Convert_Qfvoc_Type( Get( slices, 1152 ));
            rec.qfachi := Convert_Qfachi_Type( Get( slices, 1153 ));
            rec.jbft := Convert_Jbft_Type( Get( slices, 1154 ));
            rec.payg := Convert( slices, 1155, ( -9.0, -8.0, -7.0 ) );
            rec.payn := Convert( slices, 1156, ( -9.0, -8.0, -7.0 ) );
            rec.paygu := Convert( slices, 1157, ( -9.0, -8.0, -7.0 ) );
            rec.paynu := Convert( slices, 1158, ( -9.0, -8.0, -7.0 ) );
            rec.paygty := Convert( slices, 1159, ( -9.0, -8.0, -7.0 ) );
            rec.paygly := Convert( slices, 1160, ( -9.0, -8.0, -7.0 ) );
            rec.paynty := Convert( slices, 1161, ( -9.0, -8.0, -7.0 ) );
            rec.paynly := Convert( slices, 1162, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jsprof := Convert( slices, 1163, ( -9.0, -8.0, -7.0 ) );
            rec.jsloss := Convert( slices, 1164, ( -9.0, -8.0, -7.0 ) );
            rec.jspayg := Convert( slices, 1165, ( -9.0, -8.0, -7.0 ) );
            rec.cjsten := Convert( slices, 1166, ( -9.0, -8.0, -7.0 ) );
            rec.cjswk9 := Convert( slices, 1167, ( -9.0, -8.0, -7.0 ) );
            rec.jlid := Convert_Jlid_Type( Get( slices, 1168 ));
            rec.jlyid := Convert_Jlyid_Type( Get( slices, 1169 ));
            rec.jtyid := Convert_Jtyid_Type( Get( slices, 1170 ));
            rec.jbseg := Convert_Jbseg_Type( Get( slices, 1171 ));
            rec.jbgold := Convert( slices, 1172, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbrgsc := Convert_Jbrgsc_Type( Get( slices, 1173 ));
            rec.jbisco := Convert( slices, 1174 );
            rec.jbcssm := Convert( slices, 1175, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbcssf := Convert( slices, 1176, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbhgs := Convert( slices, 1177, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jbsec := Convert_Jbsec_Type( Get( slices, 1178 ));
            rec.njbwks := Convert( slices, 1179, ( -9.0, -8.0, -7.0 ) );
            rec.njuwks := Convert( slices, 1180, ( -9.0, -8.0, -7.0 ) );
            rec.njiwks := Convert( slices, 1181, ( -9.0, -8.0, -7.0 ) );
            rec.njbnew := Convert( slices, 1182, ( -9, -8, -7 ) );
            rec.njbsp := Convert( slices, 1183, ( -9, -8, -7 ) );
            rec.njusp := Convert( slices, 1184, ( -9, -8, -7 ) );
            rec.njisp := Convert( slices, 1185, ( -9, -8, -7 ) );
            rec.jbstatl := Convert( slices, 1186, ( -9, -8, -7, -2, -1 ) );
            rec.jbstatt := Convert( slices, 1187, ( -9, -8, -7, -2, -1 ) );
            rec.jbsocly := Convert( slices, 1188, ( -9, -8, -7 ) );
            rec.jlseg := Convert_Jlseg_Type( Get( slices, 1189 ));
            rec.jlgold := Convert( slices, 1190, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlrgsc := Convert_Jlrgsc_Type( Get( slices, 1191 ));
            rec.jlisco := Convert( slices, 1192 );
            rec.jlcssm := Convert( slices, 1193, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlcssf := Convert( slices, 1194, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlhgs := Convert( slices, 1195, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.jlsec := Convert_Jlsec_Type( Get( slices, 1196 ));
            rec.vote := Convert_Vote_Type( Get( slices, 1197 ));
            rec.fiyrdic := Convert( slices, 1198, ( -9.0, -8.0, -7.0 ) );
            rec.fimnp := Convert( slices, 1199, ( -9.0, -8.0, -7.0 ) );
            rec.fimnb := Convert( slices, 1200, ( -9.0, -8.0, -7.0 ) );
            rec.fimni := Convert( slices, 1201, ( -9.0, -8.0, -7.0 ) );
            rec.fimnt := Convert( slices, 1202, ( -9.0, -8.0, -7.0 ) );
            rec.fimnl := Convert( slices, 1203, ( -9.0, -8.0, -7.0 ) );
            rec.fimnnl := Convert( slices, 1204, ( -9.0, -8.0, -7.0 ) );
            rec.fimn := Convert( slices, 1205, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrl := Convert( slices, 1206, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrnl := Convert( slices, 1207, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrp := Convert( slices, 1208, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrb := Convert( slices, 1209, ( -9.0, -8.0, -7.0 ) );
            rec.fiyrt := Convert( slices, 1210, ( -9.0, -8.0, -7.0 ) );
            rec.fiyri := Convert( slices, 1211, ( -9.0, -8.0, -7.0 ) );
            rec.fiyr := Convert( slices, 1212, ( -9.0, -8.0, -7.0 ) );
            rec.fihhmn := Convert( slices, 1213, ( -9.0, -8.0, -7.0 ) );
            rec.hlghq1 := Convert( slices, 1214, ( -9, -8, -7 ) );
            rec.hlghq2 := Convert( slices, 1215, ( -9, -8, -7 ) );
            rec.spjb := Convert_Spjb_Type( Get( slices, 1216 ));
            rec.spsoc := Convert( slices, 1217, ( -9.0, -8.0 ) );
            rec.spjbhr := Convert( slices, 1218, ( -9, -8, -7 ) );
            rec.spjbot := Convert( slices, 1219, ( -9, -8, -7 ) );
            rec.sppayg := Convert( slices, 1220, ( -9.0, -8.0, -7.0 ) );
            rec.spjbyr := Convert( slices, 1221, ( -9, -8, -7 ) );
            rec.lrwght := Convert( slices, 1222 );
            rec.lewght := Convert( slices, 1223 );
            rec.xrwght := Convert( slices, 1224 );
            rec.xewght := Convert( slices, 1225 );
            rec.j2payi := Convert( slices, 1226, ( -9, -8, -7, -3, -2, -1 ) );
            rec.fiyrdii := Convert_Fiyrdii_Type( Get( slices, 1227 ));
            rec.prearni := Convert( slices, 1228, ( -9, -8, -2, -1 ) );
            rec.prfitbi := Convert_Prfitbi_Type( Get( slices, 1229 ));
            rec.paygui := Convert_Fimnbi_Type( Get( slices, 1230 ));
            rec.paynui := Convert_Fimnbi_Type( Get( slices, 1231 ));
            rec.paygti := Convert_Fimnbi_Type( Get( slices, 1232 ));
            rec.paygli := Convert_Fimnbi_Type( Get( slices, 1233 ));
            rec.paynti := Convert_Fimnbi_Type( Get( slices, 1234 ));
            rec.paynli := Convert_Fimnbi_Type( Get( slices, 1235 ));
            rec.jsprofi := Convert_Fimnbi_Type( Get( slices, 1236 ));
            rec.jspaygi := Convert_Fimnbi_Type( Get( slices, 1237 ));
            rec.fimnpi := Convert_Fimnbi_Type( Get( slices, 1238 ));
            rec.fimnbi := Convert_Fimnbi_Type( Get( slices, 1239 ));
            rec.fimnii := Convert_Fimnii_Type( Get( slices, 1240 ));
            rec.fimnti := Convert_Fimnii_Type( Get( slices, 1241 ));
            rec.fimnnli := Convert_Fimnbi_Type( Get( slices, 1242 ));
            rec.fimnli := Convert_Fimnbi_Type( Get( slices, 1243 ));
            rec.fimnthi := Convert_Fimnii_Type( Get( slices, 1244 ));
            rec.fiyrli := Convert_Fimnbi_Type( Get( slices, 1245 ));
            rec.fiyrnli := Convert_Fimnbi_Type( Get( slices, 1246 ));
            rec.fiyrpi := Convert_Fimnii_Type( Get( slices, 1247 ));
            rec.fiyrbi := Convert_Fimnbi_Type( Get( slices, 1248 ));
            rec.fiyrti := Convert_Fimnbi_Type( Get( slices, 1249 ));
            rec.fiyrii := Convert_Fimnbi_Type( Get( slices, 1250 ));
            rec.fiyeari := Convert_Fimnbi_Type( Get( slices, 1251 ));
            rec.sppaygi := Convert_Prfitbi_Type( Get( slices, 1252 ));
            rec.fihhmni := Convert_Fihhmni_Type( Get( slices, 1253 ));
            rec.mrjend := Convert( slices, 1254, ( -9, -8, -7, -3, -2, -1 ) );
            rec.mrjsoc := Convert( slices, 1255, ( -9, -8, -7, -3 ) );
            rec.mrjsic := Convert( slices, 1256, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjsic9 := Convert( slices, 1257, ( -9, -8, -2, -1 ) );
            rec.mrjsemp := Convert_Mrjsemp_Type( Get( slices, 1258 ));
            rec.mrjboss := Convert_Mrjboss_Type( Get( slices, 1259 ));
            rec.mrjmngr := Convert_Mrjmngr_Type( Get( slices, 1260 ));
            rec.mrjsize := Convert_Mrjsize_Type( Get( slices, 1261 ));
            rec.mrjseg := Convert_Maseg_Type( Get( slices, 1262 ));
            rec.mrjgold := Convert( slices, 1263, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjrgsc := Convert_Margsc_Type( Get( slices, 1264 ));
            rec.mrjisco := Convert( slices, 1265 );
            rec.mrjcssm := Convert( slices, 1266, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjcssf := Convert( slices, 1267, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjhgs := Convert( slices, 1268, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mrjsec := Convert_J1sec_Type( Get( slices, 1269 ));
            rec.paseg := Convert_Maseg_Type( Get( slices, 1270 ));
            rec.pagold := Convert( slices, 1271, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.pargsc := Convert_Margsc_Type( Get( slices, 1272 ));
            rec.paisco := Convert( slices, 1273 );
            rec.pacssm := Convert( slices, 1274, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.pacssf := Convert( slices, 1275, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.pahgs := Convert( slices, 1276, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.pasec := Convert_J1sec_Type( Get( slices, 1277 ));
            rec.maseg := Convert_Maseg_Type( Get( slices, 1278 ));
            rec.magold := Convert( slices, 1279, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.margsc := Convert_Margsc_Type( Get( slices, 1280 ));
            rec.maisco := Convert( slices, 1281 );
            rec.macssm := Convert( slices, 1282, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.macssf := Convert( slices, 1283, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.mahgs := Convert( slices, 1284, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.masec := Convert_J1sec_Type( Get( slices, 1285 ));
            rec.j1seg := Convert_J1seg_Type( Get( slices, 1286 ));
            rec.j1gold := Convert( slices, 1287, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.j1rgsc := Convert_J1rgsc_Type( Get( slices, 1288 ));
            rec.j1isco := Convert( slices, 1289 );
            rec.j1cssm := Convert( slices, 1290, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.j1cssf := Convert( slices, 1291, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.j1hgs := Convert( slices, 1292, ( -9.0, -8.0, -7.0, -3.0, -2.0, -1.0 ) );
            rec.j1sec := Convert_J1sec_Type( Get( slices, 1293 ));
            rec.fimnsel := Convert_Fimnsel_Type( Get( slices, 1294 ));
            rec.xrwtuk1 := Convert( slices, 1295 );
            rec.xewtuk1 := Convert( slices, 1296 );
            rec.xrwtuk2 := Convert( slices, 1297 );
            rec.xewtuk2 := Convert( slices, 1298 );
            rec.lrwtsw1 := Convert( slices, 1299 );
            rec.lewtsw1 := Convert( slices, 1300 );
            rec.lrwtsw2 := Convert( slices, 1301 );
            rec.lewtsw2 := Convert( slices, 1302 );
            rec.lrwtuk1 := Convert( slices, 1303 );
            rec.lewtuk1 := Convert( slices, 1304 );
            rec.lrwtuk2 := Convert( slices, 1305 );
            rec.lewtuk2 := Convert( slices, 1306 );
            rec.sppid := Convert( slices, 1307 );
            rec.fpid := Convert( slices, 1308 );
            rec.mpid := Convert( slices, 1309 );
            rec.jbbgd := Convert( slices, 1310, ( -9, -8, -7, -2, -1 ) );
            rec.jbbgm := Convert_Cjsbgm_Type( Get( slices, 1311 ));
            rec.jbbgy4 := Convert( slices, 1312, ( -9, -8, -7, -2, -1 ) );
            rec.jbbgly := Convert_Jbbgly_Type( Get( slices, 1313 ));
            rec.jsbgd := Convert( slices, 1314, ( -9, -8, -7, -2, -1 ) );
            rec.jsbgm := Convert_Cjsbgm_Type( Get( slices, 1315 ));
            rec.jsbgy4 := Convert( slices, 1316, ( -9, -8, -7, -2, -1 ) );
            rec.jsbgly := Convert_Jsbgly_Type( Get( slices, 1317 ));
            rec.isced := Convert_Isced_Type( Get( slices, 1318 ));
            rec.casmin := Convert_Casmin_Type( Get( slices, 1319 ));
            rec.distmov := Convert( slices, 1320, ( -9.0, -8.0, -7.0 ) );
            rec.region2 := Convert_Region2_Type( Get( slices, 1321 ));
            rec.jbiscon := Convert( slices, 1322, ( -9, -8, -7, -2, -1 ) );
            rec.jliscon := Convert( slices, 1323, ( -9, -8, -7, -2, -1 ) );
            rec.mrjiscn := Convert( slices, 1324, ( -9, -8, -7, -2, -1 ) );
            rec.j1iscon := Convert( slices, 1325, ( -9, -8, -7, -2, -1 ) );
            rec.maiscon := Convert( slices, 1326, ( -9, -8, -7, -2, -1 ) );
            rec.paiscon := Convert( slices, 1327, ( -9, -8, -7, -2, -1 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Indresp_component ).start_pos = 0 ) then
               index.pointers( Indresp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Indresp_component ).counter := index.pointers( Indresp_component ).counter + 1;
            Put_Index( index_map, index );
            Indresp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Indresp_IO.Close( bin_file );
   end Create_Indresp_Wave_R;




   procedure Create_Indsamp_Wave_R( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Indsamp_IO.File_Type;
      rec         : Indsamp_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Indsamp_IO.Create (bin_file, Indsamp_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.pid := Convert( slices, 3 );
            rec.iviolw := Convert_Iviolw_Type( Get( slices, 4 ));
            rec.ivstat1 := Convert_Ivstat1_Type( Get( slices, 5 ));
            rec.ivelig := Convert_Ivelig_Type( Get( slices, 6 ));
            rec.hhmem := Convert_Hhmem_Type( Get( slices, 7 ));
            rec.newhy := Convert_Newhy_Type( Get( slices, 8 ));
            rec.nemnjn := Convert_Nemnjn_Type( Get( slices, 9 ));
            rec.neyrjn4 := Convert( slices, 10, ( -9, -8, -7, -2, -1 ) );
            rec.lvwhy := Convert_Lvwhy_Type( Get( slices, 11 ));
            rec.lvmn := Convert_Lvmn_Type( Get( slices, 12 ));
            rec.lvyr4 := Convert( slices, 13, ( -9, -8, -7, -2, -1 ) );
            rec.lvloc := Convert_Lvloc_Type( Get( slices, 14 ));
            rec.ivfio := Convert_Ivfio_Type( Get( slices, 15 ));
            rec.ivrref := Convert_Ivrref_Type( Get( slices, 16 ));
            rec.ivireis := Convert_Ivireis_Type( Get( slices, 17 ));
            rec.finloc := Convert_Finloc_Type( Get( slices, 18 ));
            rec.ivfho := Convert_Ivfho_Type( Get( slices, 19 ));
            rec.memorig := Convert_Memorig_Type( Get( slices, 20 ));
            rec.sampst := Convert_Sampst_Type( Get( slices, 21 ));
            rec.movest := Convert_Movest_Type( Get( slices, 22 ));
            rec.lewght := Convert( slices, 23, ( -9.0, -8.0, -1.0 ) );
            rec.lrwght := Convert( slices, 24, ( -9.0, -8.0, -1.0 ) );
            rec.lrwtsw1 := Convert( slices, 25, ( -9.0, -8.0, -1.0 ) );
            rec.lewtsw1 := Convert( slices, 26, ( -9.0, -8.0, -1.0 ) );
            rec.lrwtsw2 := Convert( slices, 27, ( -9.0, -8.0, -1.0 ) );
            rec.lewtsw2 := Convert( slices, 28, ( -9.0, -8.0, -1.0 ) );
            rec.lrwtuk1 := Convert( slices, 29, ( -9.0, -8.0, -1.0 ) );
            rec.lewtuk1 := Convert( slices, 30, ( -9.0, -8.0, -1.0 ) );
            rec.lrwtuk2 := Convert( slices, 31, ( -9.0, -8.0, -1.0 ) );
            rec.lewtuk2 := Convert( slices, 32, ( -9.0, -8.0, -1.0 ) );
            rec.distmov := Convert( slices, 33, ( -9.0, -8.0 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Indsamp_component ).start_pos = 0 ) then
               index.pointers( Indsamp_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Indsamp_component ).counter := index.pointers( Indsamp_component ).counter + 1;
            Put_Index( index_map, index );
            Indsamp_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Indsamp_IO.Close( bin_file );
   end Create_Indsamp_Wave_R;




   procedure Create_Jobhist_Wave_R( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Jobhist_IO.File_Type;
      rec         : Jobhist_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Jobhist_IO.Create (bin_file, Jobhist_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.pno := Convert( slices, 1 );
            rec.jhstat := Convert_Jhstat_Type( Get( slices, 2 ));
            rec.jhbgd := Convert( slices, 3, ( -9, -8, -7, -2, -1 ) );
            rec.jhbgm := Convert_Jbbgm1_Type( Get( slices, 4 ));
            rec.jhbgy4 := Convert( slices, 5, ( -9, -8, -7, -2, -1 ) );
            rec.jhsoc := Convert( slices, 6, ( -9, -8, -2, -1 ) );
            rec.jhsoc00 := Convert( slices, 7, ( -9, -8, -2, -1 ) );
            rec.jhsemp := Convert_Jhsemp_Type( Get( slices, 8 ));
            rec.jhboss := Convert_Bscon_Type( Get( slices, 9 ));
            rec.jhsect := Convert_Jhsect_Type( Get( slices, 10 ));
            rec.jhmngr := Convert_Jhmngr_Type( Get( slices, 11 ));
            rec.jhsic92 := Convert( slices, 12, ( -9, -8, -7 ) );
            rec.jhsize := Convert_Jhsize_Type( Get( slices, 13 ));
            rec.jhpayl := Convert( slices, 14, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhpylw := Convert( slices, 15, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.jhpylg := Convert_Jhpylg_Type( Get( slices, 16 ));
            rec.jhstpy := Convert_Jhstpy_Type( Get( slices, 17 ));
            rec.jblky := Convert_Jblky_Type( Get( slices, 18 ));
            rec.hid := Convert( slices, 19 );
            rec.jspno := Convert( slices, 20 );
            rec.jhendd := Convert( slices, 21, ( -9, -8, -7, -2, -1 ) );
            rec.jhendm := Convert_Jbbgm1_Type( Get( slices, 22 ));
            rec.jhendy4 := Convert( slices, 23, ( -9, -8, -7, -2, -1 ) );
            rec.jha9ly := Convert_Jha9ly_Type( Get( slices, 24 ));
            rec.jhlwai := Convert_Jhlwai_Type( Get( slices, 25 ));
            rec.jhseg := Convert_Jhseg_Type( Get( slices, 26 ));
            rec.jhgold := Convert( slices, 27, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhrgsc := Convert_Jhrgsc_Type( Get( slices, 28 ));
            rec.jhisco := Convert( slices, 29, ( -9, -8 ) );
            rec.jhcssm := Convert( slices, 30, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhcssf := Convert( slices, 31, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhhgs := Convert( slices, 32, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhsec := Convert_Jhsec_Type( Get( slices, 33 ));
            rec.jhspw := Convert( slices, 34, ( -9.0, -8.0 ) );
            rec.jhgpay := Convert( slices, 35, ( -9.0, -8.0, -7.0 ) );
            rec.jhnpay := Convert( slices, 36, ( -9.0, -8.0, -7.0, -1.0 ) );
            rec.jhgpayi := Convert_Jhgpayi_Type( Get( slices, 37 ));
            rec.jhnpayi := Convert_Jhgpayi_Type( Get( slices, 38 ));
            rec.pid := Convert( slices, 39 );
            rec.jhiscon := Convert( slices, 40, ( -9, -8, -7, -2, -1 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Jobhist_component ).start_pos = 0 ) then
               index.pointers( Jobhist_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Jobhist_component ).counter := index.pointers( Jobhist_component ).counter + 1;
            Put_Index( index_map, index );
            Jobhist_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Jobhist_IO.Close( bin_file );
   end Create_Jobhist_Wave_R;




   procedure Create_Jobhstd_Wave_R( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Jobhstd_IO.File_Type;
      rec         : Jobhstd_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Jobhstd_IO.Create (bin_file, Jobhstd_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.pno := Convert( slices, 1 );
            rec.jhstat := Convert_Jhstat_Type( Get( slices, 2 ));
            rec.jhcjs := Convert_Jhcjs_Type( Get( slices, 3 ));
            rec.jhendd := Convert( slices, 4, ( -9, -8, -2, -1 ) );
            rec.jhendm := Convert_Jbbgm1_Type( Get( slices, 5 ));
            rec.jhendy4 := Convert( slices, 6, ( -9, -8, -2, -1 ) );
            rec.jhck1 := Convert_Jhck1_Type( Get( slices, 7 ));
            rec.jhck2 := Convert_Jhck2_Type( Get( slices, 8 ));
            rec.jhsoc := Convert( slices, 9, ( -9, -8, -2, -1 ) );
            rec.jhsoc00 := Convert( slices, 10, ( -9, -8, -2, -1 ) );
            rec.jhsemp := Convert_Jhsemp_Type( Get( slices, 11 ));
            rec.jhboss := Convert_Bscon_Type( Get( slices, 12 ));
            rec.jhsect := Convert_Jhsect_Type( Get( slices, 13 ));
            rec.jhmngr := Convert_Jhmngr_Type( Get( slices, 14 ));
            rec.jhsic92 := Convert( slices, 15, ( -9, -8, -7 ) );
            rec.jhsize := Convert_Jhsize_Type( Get( slices, 16 ));
            rec.jhpayl := Convert( slices, 17, ( -9.0, -8.0, -7.0, -2.0, -1.0 ) );
            rec.jhpylw := Convert( slices, 18, ( -9.0, -8.0, -7.0, -5.0, -4.0, -3.0, -2.0, -1.0 ) );
            rec.jhpylg := Convert_Jhpylg_Type( Get( slices, 19 ));
            rec.jhstpy := Convert_Jhstpy_Type( Get( slices, 20 ));
            rec.jblky := Convert_Jblky_Type( Get( slices, 21 ));
            rec.hid := Convert( slices, 22 );
            rec.jspno := Convert( slices, 23 );
            rec.pid := Convert( slices, 24 );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Jobhstd_component ).start_pos = 0 ) then
               index.pointers( Jobhstd_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Jobhstd_component ).counter := index.pointers( Jobhstd_component ).counter + 1;
            Put_Index( index_map, index );
            Jobhstd_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Jobhstd_IO.Close( bin_file );
   end Create_Jobhstd_Wave_R;




   procedure Create_Youth_Wave_R( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : Index_Rec;      
      index_map   : BHPS_Index;
      bin_file    : Youth_IO.File_Type;
      rec         : Youth_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Youth_IO.Create (bin_file, Youth_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.hid := Convert( slices, 1 );
            rec.pno := Convert( slices, 2 );
            rec.ypdobm := Convert_Ypdobm_Type( Get( slices, 3 ));
            rec.ypdoby4 := Convert( slices, 4, ( -9, -8, -7, -2, -1 ) );
            rec.ypsex := Convert_Ypsex_Type( Get( slices, 5 ));
            rec.ytvhrs := Convert_Ytvhrs_Type( Get( slices, 6 ));
            rec.ytvstp := Convert_Ytvlmt_Type( Get( slices, 7 ));
            rec.ypfclub := Convert_Ypfarca_Type( Get( slices, 8 ));
            rec.ypfdisc := Convert_Ypfarca_Type( Get( slices, 9 ));
            rec.ypfspor := Convert_Ypfarca_Type( Get( slices, 10 ));
            rec.ypchor := Convert_Ypchor_Type( Get( slices, 11 ));
            rec.ypcomp := Convert_Ypcomp_Type( Get( slices, 12 ));
            rec.yppchw := Convert_Yppcg_Type( Get( slices, 13 ));
            rec.yppcg := Convert_Yppcg_Type( Get( slices, 14 ));
            rec.yppcnt := Convert_Yppcg_Type( Get( slices, 15 ));
            rec.ypmobu := Convert_Ypbeau_Type( Get( slices, 16 ));
            rec.yppals := Convert_Yppalo_Type( Get( slices, 17 ));
            rec.yppalo := Convert_Yppalo_Type( Get( slices, 18 ));
            rec.yplate := Convert_Yplate_Type( Get( slices, 19 ));
            rec.ypargm := Convert_Ypargm_Type( Get( slices, 20 ));
            rec.ypargf := Convert_Ypargf_Type( Get( slices, 21 ));
            rec.yptlkm := Convert_Ypargm_Type( Get( slices, 22 ));
            rec.yptlkf := Convert_Ypargf_Type( Get( slices, 23 ));
            rec.ypnpal := Convert( slices, 24, ( -9, -8, -2, -1 ) );
            rec.ypfght := Convert_Ypfght_Type( Get( slices, 25 ));
            rec.ypeatn := Convert_Ypeatn_Type( Get( slices, 26 ));
            rec.yphstat := Convert_Yphstat_Type( Get( slices, 27 ));
            rec.ypfrut := Convert_Ypffd_Type( Get( slices, 28 ));
            rec.ypffd := Convert_Ypffd_Type( Get( slices, 29 ));
            rec.ypjfd := Convert_Ypffd_Type( Get( slices, 30 ));
            rec.ypsmev := Convert_Ypbeau_Type( Get( slices, 31 ));
            rec.ypsmof := Convert_Ypsmof_Type( Get( slices, 32 ));
            rec.ypsmlw := Convert( slices, 33, ( -9, -8, -2, -1 ) );
            rec.ypdklm := Convert_Ypdklm_Type( Get( slices, 34 ));
            rec.ypdgfr := Convert_Ypdgfr_Type( Get( slices, 35 ));
            rec.ypesta := Convert_Ypesta_Type( Get( slices, 36 ));
            rec.ypesti := Convert_Ypesti_Type( Get( slices, 37 ));
            rec.ypestb := Convert_Ypesta_Type( Get( slices, 38 ));
            rec.ypestj := Convert_Ypesti_Type( Get( slices, 39 ));
            rec.ypestc := Convert_Ypesta_Type( Get( slices, 40 ));
            rec.ypsad := Convert_Ypsad_Type( Get( slices, 41 ));
            rec.ypbored := Convert_Ypbored_Type( Get( slices, 42 ));
            rec.ypmkfrn := Convert_Ypmkfrn_Type( Get( slices, 43 ));
            rec.ypestk := Convert_Ypesti_Type( Get( slices, 44 ));
            rec.ypeste := Convert_Ypesta_Type( Get( slices, 45 ));
            rec.ypestf := Convert_Ypesta_Type( Get( slices, 46 ));
            rec.yptcha := Convert_Ypesta_Type( Get( slices, 47 ));
            rec.yptchb := Convert_Ypesta_Type( Get( slices, 48 ));
            rec.yphsw := Convert_Yphap_Type( Get( slices, 49 ));
            rec.yphap := Convert_Yphap_Type( Get( slices, 50 ));
            rec.yphfm := Convert_Yphap_Type( Get( slices, 51 ));
            rec.yphfr := Convert_Yphap_Type( Get( slices, 52 ));
            rec.yphsc := Convert_Yphap_Type( Get( slices, 53 ));
            rec.yphlf := Convert_Yphap_Type( Get( slices, 54 ));
            rec.ypopff := Convert_Ypopfb_Type( Get( slices, 55 ));
            rec.ypopfb := Convert_Ypopfb_Type( Get( slices, 56 ));
            rec.ypopfj := Convert_Ypopfj_Type( Get( slices, 57 ));
            rec.ypopscb := Convert_Ypopfj_Type( Get( slices, 58 ));
            rec.ypopla := Convert_Ypopfb_Type( Get( slices, 59 ));
            rec.ypvte6 := Convert_Ypvte6_Type( Get( slices, 60 ));
            rec.ypvte3 := Convert_Ypvte3_Type( Get( slices, 61 ));
            rec.ypamar := Convert( slices, 62, ( -9, -8, -2, -1 ) );
            rec.ypapar := Convert( slices, 63, ( -9, -8, -2, -1 ) );
            rec.ypbeau := Convert_Ypbeau_Type( Get( slices, 64 ));
            rec.ypfbeau := Convert_Ypfbeau_Type( Get( slices, 65 ));
            rec.ypophe := Convert_Ypopfj_Type( Get( slices, 66 ));
            rec.ypophc := Convert_Ypopfj_Type( Get( slices, 67 ));
            rec.yphtf := Convert( slices, 68, ( -9, -8, -2, -1 ) );
            rec.yphti := Convert( slices, 69, ( -9, -8, -2, -1 ) );
            rec.yphtc := Convert( slices, 70, ( -9, -8, -2, -1 ) );
            rec.ypwts := Convert( slices, 71, ( -9, -8, -2, -1 ) );
            rec.ypwtp := Convert( slices, 72, ( -9, -8, -2, -1 ) );
            rec.ypwtk := Convert( slices, 73, ( -9, -8, -2, -1 ) );
            rec.ypwghr := Convert_Ypwghr_Type( Get( slices, 74 ));
            rec.ypdiet := Convert_Ypdiet_Type( Get( slices, 75 ));
            rec.yptrun := Convert_Yptrun_Type( Get( slices, 76 ));
            rec.ypbull := Convert_Ypbull_Type( Get( slices, 77 ));
            rec.ypopsc := Convert_Ypopsc_Type( Get( slices, 78 ));
            rec.yplvsc := Convert_Yplvsc_Type( Get( slices, 79 ));
            rec.ypacvs := Convert_Scach_Type( Get( slices, 80 ));
            rec.ypsoc00 := Convert( slices, 81, ( -9, -8, -3, -2, -1 ) );
            rec.ypsoc90 := Convert( slices, 82, ( -9, -8, -3, -2, -1 ) );
            rec.ypwklw := Convert_Ypbeau_Type( Get( slices, 83 ));
            rec.ypsoc10 := Convert( slices, 84, ( -9, -8, -3, -2, -1 ) );
            rec.ypsoc19 := Convert( slices, 85, ( -9, -8, -3, -2, -1 ) );
            rec.ypsoc20 := Convert( slices, 86, ( -9, -8, -3, -2, -1 ) );
            rec.ypsoc29 := Convert( slices, 87, ( -9, -8, -3, -2, -1 ) );
            rec.ypwhrs := Convert( slices, 88, ( -9, -8, -2, -1 ) );
            rec.yppay := Convert( slices, 89, ( -9, -8, -2, -1 ) );
            rec.yplvhm := Convert( slices, 90, ( -9, -8, -2, -1 ) );
            rec.yp2uni := Convert_Yp2uni_Type( Get( slices, 91 ));
            rec.ypnuna := Convert_Ypnuna_Type( Get( slices, 92 ));
            rec.ypnunb := Convert_Ypnunb_Type( Get( slices, 93 ));
            rec.ypdlfa := Convert_Ypdlfa_Type( Get( slices, 94 ));
            rec.ypdlfb := Convert_Ypdlfb_Type( Get( slices, 95 ));
            rec.ypwght := Convert( slices, 96 );
            rec.pid := Convert( slices, 97 );
            rec.fnspno := Convert( slices, 98, ( -9, -8 ) );
            rec.fnspid := Convert( slices, 99, ( -9.0, -8.0 ) );
            rec.mnspno := Convert( slices, 100, ( -9, -8 ) );
            rec.mnspid := Convert( slices, 101, ( -9.0, -8.0 ) );
            index := Get_Index( index_map, rec.hid );
            if( index.pointers( Youth_component ).start_pos = 0 ) then
               index.pointers( Youth_component ).start_pos := line_number;
               index.SERNUM := rec.hid;
            end if;
            index.pointers( Youth_component ).counter := index.pointers( Youth_component ).counter + 1;
            Put_Index( index_map, index );
            Youth_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Youth_IO.Close( bin_file );
   end Create_Youth_Wave_R;



   procedure Create_Xwavedat_Wave_X( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : X_Index_Rec;      
      index_map   : X_BHPS_Index;
      bin_file    : Xwavedat_IO.File_Type;
      rec         : Xwavedat_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Xwavedat_IO.Create (bin_file, Xwavedat_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.pid := Convert( slices, 1 );
            rec.sex := Convert_Sex_Type( Get( slices, 2 ));
            rec.dobm := Convert_Cjsem_Type( Get( slices, 3 ));
            rec.doby := Convert( slices, 4, (  1 .. 0 => -9 ) );
            rec.memorig := Convert_Memorig_Type( Get( slices, 5 ));
            rec.plbornd := Convert_Plbornd_Type( Get( slices, 6 ));
            rec.plbornc := Convert_Plbornc_Type( Get( slices, 7 ));
            rec.yr2uk4 := Convert( slices, 8, ( -9, -8, -7, -2, -1 ) );
            rec.citzn1 := Convert_Citzn1_Type( Get( slices, 9 ));
            rec.citzn2 := Convert_Citzn2_Type( Get( slices, 10 ));
            rec.race := Convert_Race_Type( Get( slices, 11 ));
            rec.racel := Convert_Racel_Type( Get( slices, 12 ));
            rec.paju := Convert_Paju_Type( Get( slices, 13 ));
            rec.pasoc := Convert( slices, 14, ( -9, -8, -7 ) );
            rec.pasemp := Convert_J2semp_Type( Get( slices, 15 ));
            rec.paboss := Convert_Maboss_Type( Get( slices, 16 ));
            rec.pamngr := Convert_Mamngr_Type( Get( slices, 17 ));
            rec.maju := Convert_Maju_Type( Get( slices, 18 ));
            rec.masoc := Convert( slices, 19, ( -9, -8, -7, -2 ) );
            rec.masemp := Convert_J2semp_Type( Get( slices, 20 ));
            rec.maboss := Convert_Maboss_Type( Get( slices, 21 ));
            rec.mamngr := Convert_Mamngr_Type( Get( slices, 22 ));
            rec.j1soc := Convert( slices, 23, ( -9, -8, -7, -2, -1 ) );
            rec.j1none := Convert_J1none_Type( Get( slices, 24 ));
            rec.j1semp := Convert_J1semp_Type( Get( slices, 25 ));
            rec.j1boss := Convert_J1boss_Type( Get( slices, 26 ));
            rec.j1mngr := Convert_J1mngr_Type( Get( slices, 27 ));
            rec.lcoh := Convert_Aidpl1_Type( Get( slices, 28 ));
            rec.coh1bm := Convert_Ch1bm_Type( Get( slices, 29 ));
            rec.coh1by := Convert( slices, 30, ( -9, -8, -7, -2, -1 ) );
            rec.coh1mr := Convert_Coh1mr_Type( Get( slices, 31 ));
            rec.nmar := Convert_Nmar_Type( Get( slices, 32 ));
            rec.lmar1m := Convert_Ch1bm_Type( Get( slices, 33 ));
            rec.lmar1y := Convert( slices, 34, ( -9, -8, -7, -2, -1 ) );
            rec.lprnt := Convert_Lprnt_Type( Get( slices, 35 ));
            rec.lnprnt := Convert( slices, 36, ( -9, -8, -7, -2, -1 ) );
            rec.ch1bm := Convert_Ch1bm_Type( Get( slices, 37 ));
            rec.ch1by := Convert( slices, 38, ( -9, -8, -7, -2, -1 ) );
            rec.school := Convert_School_Type( Get( slices, 39 ));
            rec.scend := Convert( slices, 40, ( -9, -8, -2, -1 ) );
            rec.sctype := Convert_Sctype_Type( Get( slices, 41 ));
            rec.scnow := Convert_Cjsck2_Type( Get( slices, 42 ));
            rec.fetype := Convert_Fetype_Type( Get( slices, 43 ));
            rec.fenow := Convert_Fenow_Type( Get( slices, 44 ));
            rec.feend := Convert( slices, 45, ( -9, -8, -2, -1 ) );
            rec.bwtxp := Convert_Boolean_With_Missing( Get( slices, 46 ));
            rec.bwtel := Convert_Bwtel_Type( Get( slices, 47 ));
            rec.bwtwk := Convert( slices, 48, ( -9, -8, -7, -2, -1 ) );
            rec.bwtkn := Convert_Bwtkn_Type( Get( slices, 49 ));
            rec.bwtlb := Convert( slices, 50, ( -9, -8, -7, -1 ) );
            rec.bwtoz := Convert( slices, 51, ( -9, -8, -7, -1 ) );
            rec.bwtgm := Convert( slices, 52, ( -9, -8, -7 ) );
            rec.bwtg5 := Convert_Bwtg5_Type( Get( slices, 53 ));
            rec.paseg := Convert_Maseg_Type( Get( slices, 54 ));
            rec.pagold := Convert( slices, 55, ( -9.0, -8.0, -7.0 ) );
            rec.pargsc := Convert_Margsc_Type( Get( slices, 56 ));
            rec.paisco := Convert( slices, 57 );
            rec.pacssm := Convert( slices, 58, ( -9.0, -8.0, -7.0 ) );
            rec.pacssf := Convert( slices, 59, ( -9.0, -8.0, -7.0 ) );
            rec.pahgs := Convert( slices, 60, ( -9.0, -8.0, -7.0 ) );
            rec.pasec := Convert_J1sec_Type( Get( slices, 61 ));
            rec.maseg := Convert_Maseg_Type( Get( slices, 62 ));
            rec.magold := Convert( slices, 63, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.margsc := Convert_Margsc_Type( Get( slices, 64 ));
            rec.maisco := Convert( slices, 65 );
            rec.macssm := Convert( slices, 66, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.macssf := Convert( slices, 67, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.mahgs := Convert( slices, 68, ( -9.0, -8.0, -7.0, -2.0 ) );
            rec.masec := Convert_J1sec_Type( Get( slices, 69 ));
            rec.j1seg := Convert_J1seg_Type( Get( slices, 70 ));
            rec.j1gold := Convert( slices, 71, ( -9.0, -8.0, -7.0, -3.0, -2.0 ) );
            rec.j1rgsc := Convert_J1rgsc_Type( Get( slices, 72 ));
            rec.j1isco := Convert( slices, 73 );
            rec.j1cssm := Convert( slices, 74, ( -9.0, -8.0, -7.0, -3.0, -2.0 ) );
            rec.j1cssf := Convert( slices, 75, ( -9.0, -8.0, -7.0, -3.0, -2.0 ) );
            rec.j1hgs := Convert( slices, 76, ( -9.0, -8.0, -7.0, -3.0, -2.0 ) );
            rec.j1sec := Convert_J1sec_Type( Get( slices, 77 ));
            rec.j1iscon := Convert( slices, 78, ( -9, -8, -2, -1 ) );
            rec.maiscon := Convert( slices, 79, ( -9, -8, -2, -1 ) );
            rec.paiscon := Convert( slices, 80, ( -9, -8, -2, -1 ) );
            index := Get_Index( index_map, rec.pid );
            if( index.pointers( Xwavedat_component ).start_pos = 0 ) then
               index.pointers( Xwavedat_component ).start_pos := line_number;
               index.SERNUM := rec.pid;
            end if;
            index.pointers( Xwavedat_component ).counter := index.pointers( Xwavedat_component ).counter + 1;
            Put_Index( index_map, index );
            Xwavedat_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Xwavedat_IO.Close( bin_file );
   end Create_Xwavedat_Wave_X;




   procedure Create_Xwaveid_Wave_X( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : X_Index_Rec;      
      index_map   : X_BHPS_Index;
      bin_file    : Xwaveid_IO.File_Type;
      rec         : Xwaveid_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Xwaveid_IO.Create (bin_file, Xwaveid_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.pid := Convert( slices, 1 );
            rec.sex := Convert_Sex_Type( Get( slices, 2 ));
            rec.dobm := Convert_Cjsem_Type( Get( slices, 3 ));
            rec.doby := Convert( slices, 4, ( -9, -8, -2, -1 ) );
            rec.ahid := Convert( slices, 5 );
            rec.apno := Convert( slices, 6, (  1 .. 0 => -8 ) );
            rec.aivfio := Convert_Aivfio_Type( Get( slices, 7 ));
            rec.aivfho := Convert_Aivfho_Type( Get( slices, 8 ));
            rec.bhid := Convert( slices, 9 );
            rec.bpno := Convert( slices, 10, (  1 .. 0 => -8 ) );
            rec.bivfio := Convert_Bivfio_Type( Get( slices, 11 ));
            rec.bivfho := Convert_Bivfho_Type( Get( slices, 12 ));
            rec.chid := Convert( slices, 13 );
            rec.cpno := Convert( slices, 14, (  1 .. 0 => -8 ) );
            rec.civfio := Convert_Civfio_Type( Get( slices, 15 ));
            rec.civfho := Convert_Civfho_Type( Get( slices, 16 ));
            rec.dhid := Convert( slices, 17 );
            rec.dpno := Convert( slices, 18, (  1 .. 0 => -8 ) );
            rec.divfio := Convert_Divfio_Type( Get( slices, 19 ));
            rec.divfho := Convert_Divfho_Type( Get( slices, 20 ));
            rec.ehid := Convert( slices, 21 );
            rec.epno := Convert( slices, 22, (  1 .. 0 => -8 ) );
            rec.eivfio := Convert_Divfio_Type( Get( slices, 23 ));
            rec.eivfho := Convert_Divfho_Type( Get( slices, 24 ));
            rec.fhid := Convert( slices, 25 );
            rec.fpno := Convert( slices, 26, (  1 .. 0 => -8 ) );
            rec.fivfio := Convert_Divfio_Type( Get( slices, 27 ));
            rec.fivfho := Convert_Fivfho_Type( Get( slices, 28 ));
            rec.ghid := Convert( slices, 29 );
            rec.gpno := Convert( slices, 30, (  1 .. 0 => -8 ) );
            rec.givfio := Convert_Givfio_Type( Get( slices, 31 ));
            rec.givfho := Convert_Givfho_Type( Get( slices, 32 ));
            rec.memorig := Convert_Memorig_Type( Get( slices, 33 ));
            rec.hhid := Convert( slices, 34 );
            rec.hpno := Convert( slices, 35, (  1 .. 0 => -8 ) );
            rec.hivfio := Convert_Hivfio_Type( Get( slices, 36 ));
            rec.hivfho := Convert_Hivfho_Type( Get( slices, 37 ));
            rec.ihid := Convert( slices, 38 );
            rec.ipno := Convert( slices, 39, (  1 .. 0 => -8 ) );
            rec.iivfio := Convert_Iivfio_Type( Get( slices, 40 ));
            rec.iivfho := Convert_Iivfho_Type( Get( slices, 41 ));
            rec.jhid := Convert( slices, 42 );
            rec.jpno := Convert( slices, 43, (  1 .. 0 => -8 ) );
            rec.jivfio := Convert_Iivfio_Type( Get( slices, 44 ));
            rec.jivfho := Convert_Iivfho_Type( Get( slices, 45 ));
            rec.khid := Convert( slices, 46 );
            rec.kpno := Convert( slices, 47, (  1 .. 0 => -8 ) );
            rec.kivfio := Convert_Hivfio_Type( Get( slices, 48 ));
            rec.kivfho := Convert_Kivfho_Type( Get( slices, 49 ));
            rec.lhid := Convert( slices, 50 );
            rec.lpno := Convert( slices, 51, (  1 .. 0 => -8 ) );
            rec.livfio := Convert_Livfio_Type( Get( slices, 52 ));
            rec.livfho := Convert_Livfho_Type( Get( slices, 53 ));
            rec.mhid := Convert( slices, 54 );
            rec.mpno := Convert( slices, 55, (  1 .. 0 => -8 ) );
            rec.mivfio := Convert_Mivfio_Type( Get( slices, 56 ));
            rec.mivfho := Convert_Mivfho_Type( Get( slices, 57 ));
            rec.nhid := Convert( slices, 58 );
            rec.npno := Convert( slices, 59, (  1 .. 0 => -8 ) );
            rec.nivfio := Convert_Nivfio_Type( Get( slices, 60 ));
            rec.nivfho := Convert_Nivfho_Type( Get( slices, 61 ));
            rec.ohid := Convert( slices, 62 );
            rec.opno := Convert( slices, 63, (  1 .. 0 => -8 ) );
            rec.oivfio := Convert_Oivfio_Type( Get( slices, 64 ));
            rec.oivfho := Convert_Nivfho_Type( Get( slices, 65 ));
            rec.phid := Convert( slices, 66 );
            rec.ppno := Convert( slices, 67, (  1 .. 0 => -8 ) );
            rec.pivfio := Convert_Oivfio_Type( Get( slices, 68 ));
            rec.pivfho := Convert_Mivfho_Type( Get( slices, 69 ));
            rec.qhid := Convert( slices, 70 );
            rec.qpno := Convert( slices, 71, (  1 .. 0 => -8 ) );
            rec.qivfio := Convert_Oivfio_Type( Get( slices, 72 ));
            rec.qivfho := Convert_Nivfho_Type( Get( slices, 73 ));
            rec.rhid := Convert( slices, 74 );
            rec.rpno := Convert( slices, 75, (  1 .. 0 => -8 ) );
            rec.rivfio := Convert_Oivfio_Type( Get( slices, 76 ));
            rec.rivfho := Convert_Nivfho_Type( Get( slices, 77 ));
            index := Get_Index( index_map, rec.pid );
            if( index.pointers( Xwaveid_component ).start_pos = 0 ) then
               index.pointers( Xwaveid_component ).start_pos := line_number;
               index.SERNUM := rec.pid;
            end if;
            index.pointers( Xwaveid_component ).counter := index.pointers( Xwaveid_component ).counter + 1;
            Put_Index( index_map, index );
            Xwaveid_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Xwaveid_IO.Close( bin_file );
   end Create_Xwaveid_Wave_X;




   procedure Create_Xwlsten_Wave_X( 
      tab_file_name   : String; 
      out_file_name   : String; 
      index_file_name : String ) is
      
      use GNAT.String_Split;
      use Conversions;
      use Ada.Strings.Unbounded;
      package usut renames Ada.Strings.Unbounded.Text_IO;
     
      line        : Unbounded_String;
      tab_file    : Ada.Text_IO.File_Type;
      slices      : Slice_Set;
      index       : X_Index_Rec;      
      index_map   : X_BHPS_Index;
      bin_file    : Xwlsten_IO.File_Type;
      rec         : Xwlsten_Rec;      
      line_number : Natural := 0; -- count 1st line (the header) as 0 and data lines from 1
   begin
      Restore_Complete_Index( index_file_name, index_map ); 
      Ada.Text_IO.Open( tab_file, Ada.Text_IO.In_File, tab_file_name );
      Xwlsten_IO.Create (bin_file, Xwlsten_IO.Out_File, out_file_name );
      while not( Ada.Text_IO.End_Of_File( tab_file ) ) loop
         usut.Get_Line( tab_file, line );
         if( line_number > 0 ) then
            slices := TDA_Tokenize( line );
            rec.pid := Convert( slices, 1 );
            rec.lewave := Convert_Lcastat_Type( Get( slices, 2 ));
            rec.lehid := Convert( slices, 3 );
            rec.lepno := Convert( slices, 4 );
            rec.lrio := Convert_Lrio_Type( Get( slices, 5 ));
            rec.mstat := Convert_Mstat_Type( Get( slices, 6 ));
            rec.yosm := Convert_Yosm_Type( Get( slices, 7 ));
            rec.ypsm := Convert_Ypsm_Type( Get( slices, 8 ));
            rec.lcmstat := Convert_Lcastat_Type( Get( slices, 9 ));
            rec.astat := Convert_Astat_Type( Get( slices, 10 ));
            rec.lcastat := Convert_Lcastat_Type( Get( slices, 11 ));
            rec.lksex := Convert_Lksex_Type( Get( slices, 12 ));
            rec.lkdobm := Convert_Lkdobm_Type( Get( slices, 13 ));
            rec.lkdoby := Convert( slices, 14, (  1 .. 0 => -1 ) );
            rec.eint := Convert_Eint_Type( Get( slices, 15 ));
            rec.lceint := Convert_Lcastat_Type( Get( slices, 16 ));
            rec.memorig := Convert_Memorig_Type( Get( slices, 17 ));
            index := Get_Index( index_map, rec.pid );
            if( index.pointers( Xwlsten_component ).start_pos = 0 ) then
               index.pointers( Xwlsten_component ).start_pos := line_number;
               index.SERNUM := rec.pid;
            end if;
            index.pointers( Xwlsten_component ).counter := index.pointers( Xwlsten_component ).counter + 1;
            Put_Index( index_map, index );
            Xwlsten_IO.Write( bin_file, rec );
         end if;
         line_number := line_number + 1;
      end loop;
      Ada.Text_IO.Close( tab_file );
      Store_Complete_Index( index_file_name, index_map );
      Xwlsten_IO.Close( bin_file );
   end Create_Xwlsten_Wave_X;

  
   -- end autogenerated ---
   
   
   
   procedure Create_X is
   begin

      Create_Xwavedat_Wave_x( 
         "/mnt/data/bhps/tab/xwavedat.tab", 
         "/mnt/data/bhps/bin/x/xwavedat.bin", 
         "/mnt/data/bhps/bin/x/index.bin");
   
   
      Create_Xwaveid_Wave_x( 
         "/mnt/data/bhps/tab/xwaveid.tab", 
         "/mnt/data/bhps/bin/x/xwaveid.bin", 
         "/mnt/data/bhps/bin/x/index.bin");
   
   
      Create_Xwlsten_Wave_x( 
         "/mnt/data/bhps/tab/xwlsten.tab", 
         "/mnt/data/bhps/bin/x/xwlsten.bin", 
         "/mnt/data/bhps/bin/x/index.bin");

   end Create_X;

   
   procedure Create is
   begin

      Create_Egoalt_Wave_a( 
         "/mnt/data/bhps//tab/aegoalt.tab", 
         "/mnt/data/bhps/bin/a/egoalt.bin", 
         "/mnt/data/bhps/bin/a/index.bin");
   
   
      Create_Hhresp_Wave_a( 
         "/mnt/data/bhps//tab/ahhresp.tab", 
         "/mnt/data/bhps/bin/a/hhresp.bin", 
         "/mnt/data/bhps/bin/a/index.bin");
   
   
      Create_Hhsamp_Wave_a( 
         "/mnt/data/bhps//tab/ahhsamp.tab", 
         "/mnt/data/bhps/bin/a/hhsamp.bin", 
         "/mnt/data/bhps/bin/a/index.bin");
   
   
      Create_Income_Wave_a( 
         "/mnt/data/bhps//tab/aincome.tab", 
         "/mnt/data/bhps/bin/a/income.bin", 
         "/mnt/data/bhps/bin/a/index.bin");
   
   
      Create_Indall_Wave_a( 
         "/mnt/data/bhps//tab/aindall.tab", 
         "/mnt/data/bhps/bin/a/indall.bin", 
         "/mnt/data/bhps/bin/a/index.bin");
   
   
      Create_Indresp_Wave_a( 
         "/mnt/data/bhps//tab/aindresp.tab", 
         "/mnt/data/bhps/bin/a/indresp.bin", 
         "/mnt/data/bhps/bin/a/index.bin");
   
   
      Create_Jobhist_Wave_a( 
         "/mnt/data/bhps//tab/ajobhist.tab", 
         "/mnt/data/bhps/bin/a/jobhist.bin", 
         "/mnt/data/bhps/bin/a/index.bin");
   
   
      Create_Childad_Wave_b( 
         "/mnt/data/bhps//tab/bchildad.tab", 
         "/mnt/data/bhps/bin/b/childad.bin", 
         "/mnt/data/bhps/bin/b/index.bin");
   
   
      Create_Childnt_Wave_b( 
         "/mnt/data/bhps//tab/bchildnt.tab", 
         "/mnt/data/bhps/bin/b/childnt.bin", 
         "/mnt/data/bhps/bin/b/index.bin");
   
   
      Create_Cohabit_Wave_b( 
         "/mnt/data/bhps//tab/bcohabit.tab", 
         "/mnt/data/bhps/bin/b/cohabit.bin", 
         "/mnt/data/bhps/bin/b/index.bin");
   
   
      Create_Egoalt_Wave_b( 
         "/mnt/data/bhps//tab/begoalt.tab", 
         "/mnt/data/bhps/bin/b/egoalt.bin", 
         "/mnt/data/bhps/bin/b/index.bin");
   
   
      Create_Hhresp_Wave_b( 
         "/mnt/data/bhps//tab/bhhresp.tab", 
         "/mnt/data/bhps/bin/b/hhresp.bin", 
         "/mnt/data/bhps/bin/b/index.bin");
   
   
      Create_Hhsamp_Wave_b( 
         "/mnt/data/bhps//tab/bhhsamp.tab", 
         "/mnt/data/bhps/bin/b/hhsamp.bin", 
         "/mnt/data/bhps/bin/b/index.bin");
   
   
      Create_Income_Wave_b( 
         "/mnt/data/bhps//tab/bincome.tab", 
         "/mnt/data/bhps/bin/b/income.bin", 
         "/mnt/data/bhps/bin/b/index.bin");
   
   
      Create_Indall_Wave_b( 
         "/mnt/data/bhps//tab/bindall.tab", 
         "/mnt/data/bhps/bin/b/indall.bin", 
         "/mnt/data/bhps/bin/b/index.bin");
   
   
      Create_Indresp_Wave_b( 
         "/mnt/data/bhps//tab/bindresp.tab", 
         "/mnt/data/bhps/bin/b/indresp.bin", 
         "/mnt/data/bhps/bin/b/index.bin");
   
   
      Create_Indsamp_Wave_b( 
         "/mnt/data/bhps//tab/bindsamp.tab", 
         "/mnt/data/bhps/bin/b/indsamp.bin", 
         "/mnt/data/bhps/bin/b/index.bin");
   
   
      Create_Jobhist_Wave_b( 
         "/mnt/data/bhps//tab/bjobhist.tab", 
         "/mnt/data/bhps/bin/b/jobhist.bin", 
         "/mnt/data/bhps/bin/b/index.bin");
   
   
      Create_Lifemst_Wave_b( 
         "/mnt/data/bhps//tab/blifemst.tab", 
         "/mnt/data/bhps/bin/b/lifemst.bin", 
         "/mnt/data/bhps/bin/b/index.bin");
   
   
      Create_Marriag_Wave_b( 
         "/mnt/data/bhps//tab/bmarriag.tab", 
         "/mnt/data/bhps/bin/b/marriag.bin", 
         "/mnt/data/bhps/bin/b/index.bin");
   
   
      Create_Egoalt_Wave_c( 
         "/mnt/data/bhps//tab/cegoalt.tab", 
         "/mnt/data/bhps/bin/c/egoalt.bin", 
         "/mnt/data/bhps/bin/c/index.bin");
   
   
      Create_Hhresp_Wave_c( 
         "/mnt/data/bhps//tab/chhresp.tab", 
         "/mnt/data/bhps/bin/c/hhresp.bin", 
         "/mnt/data/bhps/bin/c/index.bin");
   
   
      Create_Hhsamp_Wave_c( 
         "/mnt/data/bhps//tab/chhsamp.tab", 
         "/mnt/data/bhps/bin/c/hhsamp.bin", 
         "/mnt/data/bhps/bin/c/index.bin");
   
   
      Create_Income_Wave_c( 
         "/mnt/data/bhps//tab/cincome.tab", 
         "/mnt/data/bhps/bin/c/income.bin", 
         "/mnt/data/bhps/bin/c/index.bin");
   
   
      Create_Indall_Wave_c( 
         "/mnt/data/bhps//tab/cindall.tab", 
         "/mnt/data/bhps/bin/c/indall.bin", 
         "/mnt/data/bhps/bin/c/index.bin");
   
   
      Create_Indresp_Wave_c( 
         "/mnt/data/bhps//tab/cindresp.tab", 
         "/mnt/data/bhps/bin/c/indresp.bin", 
         "/mnt/data/bhps/bin/c/index.bin");
   
   
      Create_Indsamp_Wave_c( 
         "/mnt/data/bhps//tab/cindsamp.tab", 
         "/mnt/data/bhps/bin/c/indsamp.bin", 
         "/mnt/data/bhps/bin/c/index.bin");
   
   
      Create_Jobhist_Wave_c( 
         "/mnt/data/bhps//tab/cjobhist.tab", 
         "/mnt/data/bhps/bin/c/jobhist.bin", 
         "/mnt/data/bhps/bin/c/index.bin");
   
   
      Create_Lifejob_Wave_c( 
         "/mnt/data/bhps//tab/clifejob.tab", 
         "/mnt/data/bhps/bin/c/lifejob.bin", 
         "/mnt/data/bhps/bin/c/index.bin");
   
   
      Create_Egoalt_Wave_d( 
         "/mnt/data/bhps//tab/degoalt.tab", 
         "/mnt/data/bhps/bin/d/egoalt.bin", 
         "/mnt/data/bhps/bin/d/index.bin");
   
   
      Create_Hhresp_Wave_d( 
         "/mnt/data/bhps//tab/dhhresp.tab", 
         "/mnt/data/bhps/bin/d/hhresp.bin", 
         "/mnt/data/bhps/bin/d/index.bin");
   
   
      Create_Hhsamp_Wave_d( 
         "/mnt/data/bhps//tab/dhhsamp.tab", 
         "/mnt/data/bhps/bin/d/hhsamp.bin", 
         "/mnt/data/bhps/bin/d/index.bin");
   
   
      Create_Income_Wave_d( 
         "/mnt/data/bhps//tab/dincome.tab", 
         "/mnt/data/bhps/bin/d/income.bin", 
         "/mnt/data/bhps/bin/d/index.bin");
   
   
      Create_Indall_Wave_d( 
         "/mnt/data/bhps//tab/dindall.tab", 
         "/mnt/data/bhps/bin/d/indall.bin", 
         "/mnt/data/bhps/bin/d/index.bin");
   
   
      Create_Indresp_Wave_d( 
         "/mnt/data/bhps//tab/dindresp.tab", 
         "/mnt/data/bhps/bin/d/indresp.bin", 
         "/mnt/data/bhps/bin/d/index.bin");
   
   
      Create_Indsamp_Wave_d( 
         "/mnt/data/bhps//tab/dindsamp.tab", 
         "/mnt/data/bhps/bin/d/indsamp.bin", 
         "/mnt/data/bhps/bin/d/index.bin");
   
   
      Create_Jobhist_Wave_d( 
         "/mnt/data/bhps//tab/djobhist.tab", 
         "/mnt/data/bhps/bin/d/jobhist.bin", 
         "/mnt/data/bhps/bin/d/index.bin");
   
   
      Create_Youth_Wave_d( 
         "/mnt/data/bhps//tab/dyouth.tab", 
         "/mnt/data/bhps/bin/d/youth.bin", 
         "/mnt/data/bhps/bin/d/index.bin");
   
   
      Create_Egoalt_Wave_e( 
         "/mnt/data/bhps//tab/eegoalt.tab", 
         "/mnt/data/bhps/bin/e/egoalt.bin", 
         "/mnt/data/bhps/bin/e/index.bin");
   
   
      Create_Hhresp_Wave_e( 
         "/mnt/data/bhps//tab/ehhresp.tab", 
         "/mnt/data/bhps/bin/e/hhresp.bin", 
         "/mnt/data/bhps/bin/e/index.bin");
   
   
      Create_Hhsamp_Wave_e( 
         "/mnt/data/bhps//tab/ehhsamp.tab", 
         "/mnt/data/bhps/bin/e/hhsamp.bin", 
         "/mnt/data/bhps/bin/e/index.bin");
   
   
      Create_Income_Wave_e( 
         "/mnt/data/bhps//tab/eincome.tab", 
         "/mnt/data/bhps/bin/e/income.bin", 
         "/mnt/data/bhps/bin/e/index.bin");
   
   
      Create_Indall_Wave_e( 
         "/mnt/data/bhps//tab/eindall.tab", 
         "/mnt/data/bhps/bin/e/indall.bin", 
         "/mnt/data/bhps/bin/e/index.bin");
   
   
      Create_Indresp_Wave_e( 
         "/mnt/data/bhps//tab/eindresp.tab", 
         "/mnt/data/bhps/bin/e/indresp.bin", 
         "/mnt/data/bhps/bin/e/index.bin");
   
   
      Create_Indsamp_Wave_e( 
         "/mnt/data/bhps//tab/eindsamp.tab", 
         "/mnt/data/bhps/bin/e/indsamp.bin", 
         "/mnt/data/bhps/bin/e/index.bin");
   
   
      Create_Jobhist_Wave_e( 
         "/mnt/data/bhps//tab/ejobhist.tab", 
         "/mnt/data/bhps/bin/e/jobhist.bin", 
         "/mnt/data/bhps/bin/e/index.bin");
   
   
      Create_Youth_Wave_e( 
         "/mnt/data/bhps//tab/eyouth.tab", 
         "/mnt/data/bhps/bin/e/youth.bin", 
         "/mnt/data/bhps/bin/e/index.bin");
   
   
      Create_Egoalt_Wave_f( 
         "/mnt/data/bhps//tab/fegoalt.tab", 
         "/mnt/data/bhps/bin/f/egoalt.bin", 
         "/mnt/data/bhps/bin/f/index.bin");
   
   
      Create_Hhresp_Wave_f( 
         "/mnt/data/bhps//tab/fhhresp.tab", 
         "/mnt/data/bhps/bin/f/hhresp.bin", 
         "/mnt/data/bhps/bin/f/index.bin");
   
   
      Create_Hhsamp_Wave_f( 
         "/mnt/data/bhps//tab/fhhsamp.tab", 
         "/mnt/data/bhps/bin/f/hhsamp.bin", 
         "/mnt/data/bhps/bin/f/index.bin");
   
   
      Create_Income_Wave_f( 
         "/mnt/data/bhps//tab/fincome.tab", 
         "/mnt/data/bhps/bin/f/income.bin", 
         "/mnt/data/bhps/bin/f/index.bin");
   
   
      Create_Indall_Wave_f( 
         "/mnt/data/bhps//tab/findall.tab", 
         "/mnt/data/bhps/bin/f/indall.bin", 
         "/mnt/data/bhps/bin/f/index.bin");
   
   
      Create_Indresp_Wave_f( 
         "/mnt/data/bhps//tab/findresp.tab", 
         "/mnt/data/bhps/bin/f/indresp.bin", 
         "/mnt/data/bhps/bin/f/index.bin");
   
   
      Create_Indsamp_Wave_f( 
         "/mnt/data/bhps//tab/findsamp.tab", 
         "/mnt/data/bhps/bin/f/indsamp.bin", 
         "/mnt/data/bhps/bin/f/index.bin");
   
   
      Create_Jobhist_Wave_f( 
         "/mnt/data/bhps//tab/fjobhist.tab", 
         "/mnt/data/bhps/bin/f/jobhist.bin", 
         "/mnt/data/bhps/bin/f/index.bin");
   
   
      Create_Youth_Wave_f( 
         "/mnt/data/bhps//tab/fyouth.tab", 
         "/mnt/data/bhps/bin/f/youth.bin", 
         "/mnt/data/bhps/bin/f/index.bin");
   
   
      Create_Egoalt_Wave_g( 
         "/mnt/data/bhps//tab/gegoalt.tab", 
         "/mnt/data/bhps/bin/g/egoalt.bin", 
         "/mnt/data/bhps/bin/g/index.bin");
   
   
      Create_Hhresp_Wave_g( 
         "/mnt/data/bhps//tab/ghhresp.tab", 
         "/mnt/data/bhps/bin/g/hhresp.bin", 
         "/mnt/data/bhps/bin/g/index.bin");
   
   
      Create_Hhsamp_Wave_g( 
         "/mnt/data/bhps//tab/ghhsamp.tab", 
         "/mnt/data/bhps/bin/g/hhsamp.bin", 
         "/mnt/data/bhps/bin/g/index.bin");
   
   
      Create_Income_Wave_g( 
         "/mnt/data/bhps//tab/gincome.tab", 
         "/mnt/data/bhps/bin/g/income.bin", 
         "/mnt/data/bhps/bin/g/index.bin");
   
   
      Create_Indall_Wave_g( 
         "/mnt/data/bhps//tab/gindall.tab", 
         "/mnt/data/bhps/bin/g/indall.bin", 
         "/mnt/data/bhps/bin/g/index.bin");
   
   
      Create_Indresp_Wave_g( 
         "/mnt/data/bhps//tab/gindresp.tab", 
         "/mnt/data/bhps/bin/g/indresp.bin", 
         "/mnt/data/bhps/bin/g/index.bin");
   
   
      Create_Indsamp_Wave_g( 
         "/mnt/data/bhps//tab/gindsamp.tab", 
         "/mnt/data/bhps/bin/g/indsamp.bin", 
         "/mnt/data/bhps/bin/g/index.bin");
   
   
      Create_Jobhist_Wave_g( 
         "/mnt/data/bhps//tab/gjobhist.tab", 
         "/mnt/data/bhps/bin/g/jobhist.bin", 
         "/mnt/data/bhps/bin/g/index.bin");
   
   
      Create_Youth_Wave_g( 
         "/mnt/data/bhps//tab/gyouth.tab", 
         "/mnt/data/bhps/bin/g/youth.bin", 
         "/mnt/data/bhps/bin/g/index.bin");
   
   
      Create_Egoalt_Wave_h( 
         "/mnt/data/bhps//tab/hegoalt.tab", 
         "/mnt/data/bhps/bin/h/egoalt.bin", 
         "/mnt/data/bhps/bin/h/index.bin");
   
   
      Create_Hhresp_Wave_h( 
         "/mnt/data/bhps//tab/hhhresp.tab", 
         "/mnt/data/bhps/bin/h/hhresp.bin", 
         "/mnt/data/bhps/bin/h/index.bin");
   
   
      Create_Hhsamp_Wave_h( 
         "/mnt/data/bhps//tab/hhhsamp.tab", 
         "/mnt/data/bhps/bin/h/hhsamp.bin", 
         "/mnt/data/bhps/bin/h/index.bin");
   
   
      Create_Income_Wave_h( 
         "/mnt/data/bhps//tab/hincome.tab", 
         "/mnt/data/bhps/bin/h/income.bin", 
         "/mnt/data/bhps/bin/h/index.bin");
   
   
      Create_Indall_Wave_h( 
         "/mnt/data/bhps//tab/hindall.tab", 
         "/mnt/data/bhps/bin/h/indall.bin", 
         "/mnt/data/bhps/bin/h/index.bin");
   
   
      Create_Indresp_Wave_h( 
         "/mnt/data/bhps//tab/hindresp.tab", 
         "/mnt/data/bhps/bin/h/indresp.bin", 
         "/mnt/data/bhps/bin/h/index.bin");
   
   
      Create_Indsamp_Wave_h( 
         "/mnt/data/bhps//tab/hindsamp.tab", 
         "/mnt/data/bhps/bin/h/indsamp.bin", 
         "/mnt/data/bhps/bin/h/index.bin");
   
   
      Create_Jobhist_Wave_h( 
         "/mnt/data/bhps//tab/hjobhist.tab", 
         "/mnt/data/bhps/bin/h/jobhist.bin", 
         "/mnt/data/bhps/bin/h/index.bin");
   
   
      Create_Youth_Wave_h( 
         "/mnt/data/bhps//tab/hyouth.tab", 
         "/mnt/data/bhps/bin/h/youth.bin", 
         "/mnt/data/bhps/bin/h/index.bin");
   
   
      Create_Egoalt_Wave_i( 
         "/mnt/data/bhps//tab/iegoalt.tab", 
         "/mnt/data/bhps/bin/i/egoalt.bin", 
         "/mnt/data/bhps/bin/i/index.bin");
   
   
      Create_Hhresp_Wave_i( 
         "/mnt/data/bhps//tab/ihhresp.tab", 
         "/mnt/data/bhps/bin/i/hhresp.bin", 
         "/mnt/data/bhps/bin/i/index.bin");
   
   
      Create_Hhsamp_Wave_i( 
         "/mnt/data/bhps//tab/ihhsamp.tab", 
         "/mnt/data/bhps/bin/i/hhsamp.bin", 
         "/mnt/data/bhps/bin/i/index.bin");
   
   
      Create_Income_Wave_i( 
         "/mnt/data/bhps//tab/iincome.tab", 
         "/mnt/data/bhps/bin/i/income.bin", 
         "/mnt/data/bhps/bin/i/index.bin");
   
   
      Create_Indall_Wave_i( 
         "/mnt/data/bhps//tab/iindall.tab", 
         "/mnt/data/bhps/bin/i/indall.bin", 
         "/mnt/data/bhps/bin/i/index.bin");
   
   
      Create_Indresp_Wave_i( 
         "/mnt/data/bhps//tab/iindresp.tab", 
         "/mnt/data/bhps/bin/i/indresp.bin", 
         "/mnt/data/bhps/bin/i/index.bin");
   
   
      Create_Indsamp_Wave_i( 
         "/mnt/data/bhps//tab/iindsamp.tab", 
         "/mnt/data/bhps/bin/i/indsamp.bin", 
         "/mnt/data/bhps/bin/i/index.bin");
   
   
      Create_Jobhist_Wave_i( 
         "/mnt/data/bhps//tab/ijobhist.tab", 
         "/mnt/data/bhps/bin/i/jobhist.bin", 
         "/mnt/data/bhps/bin/i/index.bin");
   
   
      Create_Youth_Wave_i( 
         "/mnt/data/bhps//tab/iyouth.tab", 
         "/mnt/data/bhps/bin/i/youth.bin", 
         "/mnt/data/bhps/bin/i/index.bin");
   
   
      Create_Egoalt_Wave_j( 
         "/mnt/data/bhps//tab/jegoalt.tab", 
         "/mnt/data/bhps/bin/j/egoalt.bin", 
         "/mnt/data/bhps/bin/j/index.bin");
   
   
      Create_Hhresp_Wave_j( 
         "/mnt/data/bhps//tab/jhhresp.tab", 
         "/mnt/data/bhps/bin/j/hhresp.bin", 
         "/mnt/data/bhps/bin/j/index.bin");
   
   
      Create_Hhsamp_Wave_j( 
         "/mnt/data/bhps//tab/jhhsamp.tab", 
         "/mnt/data/bhps/bin/j/hhsamp.bin", 
         "/mnt/data/bhps/bin/j/index.bin");
   
   
      Create_Income_Wave_j( 
         "/mnt/data/bhps//tab/jincome.tab", 
         "/mnt/data/bhps/bin/j/income.bin", 
         "/mnt/data/bhps/bin/j/index.bin");
   
   
      Create_Indall_Wave_j( 
         "/mnt/data/bhps//tab/jindall.tab", 
         "/mnt/data/bhps/bin/j/indall.bin", 
         "/mnt/data/bhps/bin/j/index.bin");
   
   
      Create_Indresp_Wave_j( 
         "/mnt/data/bhps//tab/jindresp.tab", 
         "/mnt/data/bhps/bin/j/indresp.bin", 
         "/mnt/data/bhps/bin/j/index.bin");
   
   
      Create_Indsamp_Wave_j( 
         "/mnt/data/bhps//tab/jindsamp.tab", 
         "/mnt/data/bhps/bin/j/indsamp.bin", 
         "/mnt/data/bhps/bin/j/index.bin");
   
   
      Create_Jobhist_Wave_j( 
         "/mnt/data/bhps//tab/jjobhist.tab", 
         "/mnt/data/bhps/bin/j/jobhist.bin", 
         "/mnt/data/bhps/bin/j/index.bin");
   
   
      Create_Youth_Wave_j( 
         "/mnt/data/bhps//tab/jyouth.tab", 
         "/mnt/data/bhps/bin/j/youth.bin", 
         "/mnt/data/bhps/bin/j/index.bin");
   
   
      Create_Childad_Wave_k( 
         "/mnt/data/bhps//tab/kchildad.tab", 
         "/mnt/data/bhps/bin/k/childad.bin", 
         "/mnt/data/bhps/bin/k/index.bin");
   
   
      Create_Childnt_Wave_k( 
         "/mnt/data/bhps//tab/kchildnt.tab", 
         "/mnt/data/bhps/bin/k/childnt.bin", 
         "/mnt/data/bhps/bin/k/index.bin");
   
   
      Create_Cohabit_Wave_k( 
         "/mnt/data/bhps//tab/kcohabit.tab", 
         "/mnt/data/bhps/bin/k/cohabit.bin", 
         "/mnt/data/bhps/bin/k/index.bin");
   
   
      Create_Egoalt_Wave_k( 
         "/mnt/data/bhps//tab/kegoalt.tab", 
         "/mnt/data/bhps/bin/k/egoalt.bin", 
         "/mnt/data/bhps/bin/k/index.bin");
   
   
      Create_Hhresp_Wave_k( 
         "/mnt/data/bhps//tab/khhresp.tab", 
         "/mnt/data/bhps/bin/k/hhresp.bin", 
         "/mnt/data/bhps/bin/k/index.bin");
   
   
      Create_Hhsamp_Wave_k( 
         "/mnt/data/bhps//tab/khhsamp.tab", 
         "/mnt/data/bhps/bin/k/hhsamp.bin", 
         "/mnt/data/bhps/bin/k/index.bin");
   
   
      Create_Income_Wave_k( 
         "/mnt/data/bhps//tab/kincome.tab", 
         "/mnt/data/bhps/bin/k/income.bin", 
         "/mnt/data/bhps/bin/k/index.bin");
   
   
      Create_Indall_Wave_k( 
         "/mnt/data/bhps//tab/kindall.tab", 
         "/mnt/data/bhps/bin/k/indall.bin", 
         "/mnt/data/bhps/bin/k/index.bin");
   
   
      Create_Indresp_Wave_k( 
         "/mnt/data/bhps//tab/kindresp.tab", 
         "/mnt/data/bhps/bin/k/indresp.bin", 
         "/mnt/data/bhps/bin/k/index.bin");
   
   
      Create_Indsamp_Wave_k( 
         "/mnt/data/bhps//tab/kindsamp.tab", 
         "/mnt/data/bhps/bin/k/indsamp.bin", 
         "/mnt/data/bhps/bin/k/index.bin");
   
   
      Create_Jobhist_Wave_k( 
         "/mnt/data/bhps//tab/kjobhist.tab", 
         "/mnt/data/bhps/bin/k/jobhist.bin", 
         "/mnt/data/bhps/bin/k/index.bin");
   
   
      Create_Lifemst_Wave_k( 
         "/mnt/data/bhps//tab/klifemst.tab", 
         "/mnt/data/bhps/bin/k/lifemst.bin", 
         "/mnt/data/bhps/bin/k/index.bin");
   
   
      Create_Marriag_Wave_k( 
         "/mnt/data/bhps//tab/kmarriag.tab", 
         "/mnt/data/bhps/bin/k/marriag.bin", 
         "/mnt/data/bhps/bin/k/index.bin");
   
   
      Create_Youth_Wave_k( 
         "/mnt/data/bhps//tab/kyouth.tab", 
         "/mnt/data/bhps/bin/k/youth.bin", 
         "/mnt/data/bhps/bin/k/index.bin");
   
   
      Create_Child_Wave_l( 
         "/mnt/data/bhps//tab/lchild.tab", 
         "/mnt/data/bhps/bin/l/child.bin", 
         "/mnt/data/bhps/bin/l/index.bin");
   
   
      Create_Childad_Wave_l( 
         "/mnt/data/bhps//tab/lchildad.tab", 
         "/mnt/data/bhps/bin/l/childad.bin", 
         "/mnt/data/bhps/bin/l/index.bin");
   
   
      Create_Childnt_Wave_l( 
         "/mnt/data/bhps//tab/lchildnt.tab", 
         "/mnt/data/bhps/bin/l/childnt.bin", 
         "/mnt/data/bhps/bin/l/index.bin");
   
   
      Create_Cohabit_Wave_l( 
         "/mnt/data/bhps//tab/lcohabit.tab", 
         "/mnt/data/bhps/bin/l/cohabit.bin", 
         "/mnt/data/bhps/bin/l/index.bin");
   
   
      Create_Egoalt_Wave_l( 
         "/mnt/data/bhps//tab/legoalt.tab", 
         "/mnt/data/bhps/bin/l/egoalt.bin", 
         "/mnt/data/bhps/bin/l/index.bin");
   
   
      Create_Hhresp_Wave_l( 
         "/mnt/data/bhps//tab/lhhresp.tab", 
         "/mnt/data/bhps/bin/l/hhresp.bin", 
         "/mnt/data/bhps/bin/l/index.bin");
   
   
      Create_Hhsamp_Wave_l( 
         "/mnt/data/bhps//tab/lhhsamp.tab", 
         "/mnt/data/bhps/bin/l/hhsamp.bin", 
         "/mnt/data/bhps/bin/l/index.bin");
   
   
      Create_Income_Wave_l( 
         "/mnt/data/bhps//tab/lincome.tab", 
         "/mnt/data/bhps/bin/l/income.bin", 
         "/mnt/data/bhps/bin/l/index.bin");
   
   
      Create_Indall_Wave_l( 
         "/mnt/data/bhps//tab/lindall.tab", 
         "/mnt/data/bhps/bin/l/indall.bin", 
         "/mnt/data/bhps/bin/l/index.bin");
   
   
      Create_Indresp_Wave_l( 
         "/mnt/data/bhps//tab/lindresp.tab", 
         "/mnt/data/bhps/bin/l/indresp.bin", 
         "/mnt/data/bhps/bin/l/index.bin");
   
   
      Create_Indsamp_Wave_l( 
         "/mnt/data/bhps//tab/lindsamp.tab", 
         "/mnt/data/bhps/bin/l/indsamp.bin", 
         "/mnt/data/bhps/bin/l/index.bin");
   
   
      Create_Jobhist_Wave_l( 
         "/mnt/data/bhps//tab/ljobhist.tab", 
         "/mnt/data/bhps/bin/l/jobhist.bin", 
         "/mnt/data/bhps/bin/l/index.bin");
   
   
      Create_Lifemst_Wave_l( 
         "/mnt/data/bhps//tab/llifemst.tab", 
         "/mnt/data/bhps/bin/l/lifemst.bin", 
         "/mnt/data/bhps/bin/l/index.bin");
   
   
      Create_Marriag_Wave_l( 
         "/mnt/data/bhps//tab/lmarriag.tab", 
         "/mnt/data/bhps/bin/l/marriag.bin", 
         "/mnt/data/bhps/bin/l/index.bin");
   
   
      Create_Youth_Wave_l( 
         "/mnt/data/bhps//tab/lyouth.tab", 
         "/mnt/data/bhps/bin/l/youth.bin", 
         "/mnt/data/bhps/bin/l/index.bin");
   
   
      Create_Child_Wave_m( 
         "/mnt/data/bhps//tab/mchild.tab", 
         "/mnt/data/bhps/bin/m/child.bin", 
         "/mnt/data/bhps/bin/m/index.bin");
   
   
      Create_Egoalt_Wave_m( 
         "/mnt/data/bhps//tab/megoalt.tab", 
         "/mnt/data/bhps/bin/m/egoalt.bin", 
         "/mnt/data/bhps/bin/m/index.bin");
   
   
      Create_Hhresp_Wave_m( 
         "/mnt/data/bhps//tab/mhhresp.tab", 
         "/mnt/data/bhps/bin/m/hhresp.bin", 
         "/mnt/data/bhps/bin/m/index.bin");
   
   
      Create_Hhsamp_Wave_m( 
         "/mnt/data/bhps//tab/mhhsamp.tab", 
         "/mnt/data/bhps/bin/m/hhsamp.bin", 
         "/mnt/data/bhps/bin/m/index.bin");
   
   
      Create_Income_Wave_m( 
         "/mnt/data/bhps//tab/mincome.tab", 
         "/mnt/data/bhps/bin/m/income.bin", 
         "/mnt/data/bhps/bin/m/index.bin");
   
   
      Create_Indall_Wave_m( 
         "/mnt/data/bhps//tab/mindall.tab", 
         "/mnt/data/bhps/bin/m/indall.bin", 
         "/mnt/data/bhps/bin/m/index.bin");
   
   
      Create_Indresp_Wave_m( 
         "/mnt/data/bhps//tab/mindresp.tab", 
         "/mnt/data/bhps/bin/m/indresp.bin", 
         "/mnt/data/bhps/bin/m/index.bin");
   
   
      Create_Indsamp_Wave_m( 
         "/mnt/data/bhps//tab/mindsamp.tab", 
         "/mnt/data/bhps/bin/m/indsamp.bin", 
         "/mnt/data/bhps/bin/m/index.bin");
   
   
      Create_Jobhist_Wave_m( 
         "/mnt/data/bhps//tab/mjobhist.tab", 
         "/mnt/data/bhps/bin/m/jobhist.bin", 
         "/mnt/data/bhps/bin/m/index.bin");
   
   
      Create_Youth_Wave_m( 
         "/mnt/data/bhps//tab/myouth.tab", 
         "/mnt/data/bhps/bin/m/youth.bin", 
         "/mnt/data/bhps/bin/m/index.bin");
   
   
      Create_Egoalt_Wave_n( 
         "/mnt/data/bhps//tab/negoalt.tab", 
         "/mnt/data/bhps/bin/n/egoalt.bin", 
         "/mnt/data/bhps/bin/n/index.bin");
   
   
      Create_Hhresp_Wave_n( 
         "/mnt/data/bhps//tab/nhhresp.tab", 
         "/mnt/data/bhps/bin/n/hhresp.bin", 
         "/mnt/data/bhps/bin/n/index.bin");
   
   
      Create_Hhsamp_Wave_n( 
         "/mnt/data/bhps//tab/nhhsamp.tab", 
         "/mnt/data/bhps/bin/n/hhsamp.bin", 
         "/mnt/data/bhps/bin/n/index.bin");
   
   
      Create_Income_Wave_n( 
         "/mnt/data/bhps//tab/nincome.tab", 
         "/mnt/data/bhps/bin/n/income.bin", 
         "/mnt/data/bhps/bin/n/index.bin");
   
   
      Create_Indall_Wave_n( 
         "/mnt/data/bhps//tab/nindall.tab", 
         "/mnt/data/bhps/bin/n/indall.bin", 
         "/mnt/data/bhps/bin/n/index.bin");
   
   
      Create_Indresp_Wave_n( 
         "/mnt/data/bhps//tab/nindresp.tab", 
         "/mnt/data/bhps/bin/n/indresp.bin", 
         "/mnt/data/bhps/bin/n/index.bin");
   
   
      Create_Indsamp_Wave_n( 
         "/mnt/data/bhps//tab/nindsamp.tab", 
         "/mnt/data/bhps/bin/n/indsamp.bin", 
         "/mnt/data/bhps/bin/n/index.bin");
   
   
      Create_Jobhist_Wave_n( 
         "/mnt/data/bhps//tab/njobhist.tab", 
         "/mnt/data/bhps/bin/n/jobhist.bin", 
         "/mnt/data/bhps/bin/n/index.bin");
   
   
      Create_Youth_Wave_n( 
         "/mnt/data/bhps//tab/nyouth.tab", 
         "/mnt/data/bhps/bin/n/youth.bin", 
         "/mnt/data/bhps/bin/n/index.bin");
   
   
      Create_Egoalt_Wave_o( 
         "/mnt/data/bhps//tab/oegoalt.tab", 
         "/mnt/data/bhps/bin/o/egoalt.bin", 
         "/mnt/data/bhps/bin/o/index.bin");
   
   
      Create_Hhresp_Wave_o( 
         "/mnt/data/bhps//tab/ohhresp.tab", 
         "/mnt/data/bhps/bin/o/hhresp.bin", 
         "/mnt/data/bhps/bin/o/index.bin");
   
   
      Create_Hhsamp_Wave_o( 
         "/mnt/data/bhps//tab/ohhsamp.tab", 
         "/mnt/data/bhps/bin/o/hhsamp.bin", 
         "/mnt/data/bhps/bin/o/index.bin");
   
   
      Create_Income_Wave_o( 
         "/mnt/data/bhps//tab/oincome.tab", 
         "/mnt/data/bhps/bin/o/income.bin", 
         "/mnt/data/bhps/bin/o/index.bin");
   
   
      Create_Indall_Wave_o( 
         "/mnt/data/bhps//tab/oindall.tab", 
         "/mnt/data/bhps/bin/o/indall.bin", 
         "/mnt/data/bhps/bin/o/index.bin");
   
   
      Create_Indresp_Wave_o( 
         "/mnt/data/bhps//tab/oindresp.tab", 
         "/mnt/data/bhps/bin/o/indresp.bin", 
         "/mnt/data/bhps/bin/o/index.bin");
   
   
      Create_Indsamp_Wave_o( 
         "/mnt/data/bhps//tab/oindsamp.tab", 
         "/mnt/data/bhps/bin/o/indsamp.bin", 
         "/mnt/data/bhps/bin/o/index.bin");
   
   
      Create_Jobhist_Wave_o( 
         "/mnt/data/bhps//tab/ojobhist.tab", 
         "/mnt/data/bhps/bin/o/jobhist.bin", 
         "/mnt/data/bhps/bin/o/index.bin");
   
   
      Create_Youth_Wave_o( 
         "/mnt/data/bhps//tab/oyouth.tab", 
         "/mnt/data/bhps/bin/o/youth.bin", 
         "/mnt/data/bhps/bin/o/index.bin");
   
   
      Create_Egoalt_Wave_p( 
         "/mnt/data/bhps//tab/pegoalt.tab", 
         "/mnt/data/bhps/bin/p/egoalt.bin", 
         "/mnt/data/bhps/bin/p/index.bin");
   
   
      Create_Hhresp_Wave_p( 
         "/mnt/data/bhps//tab/phhresp.tab", 
         "/mnt/data/bhps/bin/p/hhresp.bin", 
         "/mnt/data/bhps/bin/p/index.bin");
   
   
      Create_Hhsamp_Wave_p( 
         "/mnt/data/bhps//tab/phhsamp.tab", 
         "/mnt/data/bhps/bin/p/hhsamp.bin", 
         "/mnt/data/bhps/bin/p/index.bin");
   
   
      Create_Income_Wave_p( 
         "/mnt/data/bhps//tab/pincome.tab", 
         "/mnt/data/bhps/bin/p/income.bin", 
         "/mnt/data/bhps/bin/p/index.bin");
   
   
      Create_Indall_Wave_p( 
         "/mnt/data/bhps//tab/pindall.tab", 
         "/mnt/data/bhps/bin/p/indall.bin", 
         "/mnt/data/bhps/bin/p/index.bin");
   
   
      Create_Indresp_Wave_p( 
         "/mnt/data/bhps//tab/pindresp.tab", 
         "/mnt/data/bhps/bin/p/indresp.bin", 
         "/mnt/data/bhps/bin/p/index.bin");
   
   
      Create_Indsamp_Wave_p( 
         "/mnt/data/bhps//tab/pindsamp.tab", 
         "/mnt/data/bhps/bin/p/indsamp.bin", 
         "/mnt/data/bhps/bin/p/index.bin");
   
   
      Create_Jobhist_Wave_p( 
         "/mnt/data/bhps//tab/pjobhist.tab", 
         "/mnt/data/bhps/bin/p/jobhist.bin", 
         "/mnt/data/bhps/bin/p/index.bin");
   
   
      Create_Jobhstd_Wave_p( 
         "/mnt/data/bhps//tab/pjobhstd.tab", 
         "/mnt/data/bhps/bin/p/jobhstd.bin", 
         "/mnt/data/bhps/bin/p/index.bin");
   
   
      Create_Youth_Wave_p( 
         "/mnt/data/bhps//tab/pyouth.tab", 
         "/mnt/data/bhps/bin/p/youth.bin", 
         "/mnt/data/bhps/bin/p/index.bin");
   
   
      Create_Child_Wave_q( 
         "/mnt/data/bhps//tab/qchild.tab", 
         "/mnt/data/bhps/bin/q/child.bin", 
         "/mnt/data/bhps/bin/q/index.bin");
   
   
      Create_Egoalt_Wave_q( 
         "/mnt/data/bhps//tab/qegoalt.tab", 
         "/mnt/data/bhps/bin/q/egoalt.bin", 
         "/mnt/data/bhps/bin/q/index.bin");
   
   
      Create_Hhresp_Wave_q( 
         "/mnt/data/bhps//tab/qhhresp.tab", 
         "/mnt/data/bhps/bin/q/hhresp.bin", 
         "/mnt/data/bhps/bin/q/index.bin");
   
   
      Create_Hhsamp_Wave_q( 
         "/mnt/data/bhps//tab/qhhsamp.tab", 
         "/mnt/data/bhps/bin/q/hhsamp.bin", 
         "/mnt/data/bhps/bin/q/index.bin");
   
   
      Create_Income_Wave_q( 
         "/mnt/data/bhps//tab/qincome.tab", 
         "/mnt/data/bhps/bin/q/income.bin", 
         "/mnt/data/bhps/bin/q/index.bin");
   
   
      Create_Indall_Wave_q( 
         "/mnt/data/bhps//tab/qindall.tab", 
         "/mnt/data/bhps/bin/q/indall.bin", 
         "/mnt/data/bhps/bin/q/index.bin");
   
   
      Create_Indresp_Wave_q( 
         "/mnt/data/bhps//tab/qindresp.tab", 
         "/mnt/data/bhps/bin/q/indresp.bin", 
         "/mnt/data/bhps/bin/q/index.bin");
   
   
      Create_Indsamp_Wave_q( 
         "/mnt/data/bhps//tab/qindsamp.tab", 
         "/mnt/data/bhps/bin/q/indsamp.bin", 
         "/mnt/data/bhps/bin/q/index.bin");
   
   
      Create_Jobhist_Wave_q( 
         "/mnt/data/bhps//tab/qjobhist.tab", 
         "/mnt/data/bhps/bin/q/jobhist.bin", 
         "/mnt/data/bhps/bin/q/index.bin");
   
   
      Create_Jobhstd_Wave_q( 
         "/mnt/data/bhps//tab/qjobhstd.tab", 
         "/mnt/data/bhps/bin/q/jobhstd.bin", 
         "/mnt/data/bhps/bin/q/index.bin");
   
   
      Create_Youth_Wave_q( 
         "/mnt/data/bhps//tab/qyouth.tab", 
         "/mnt/data/bhps/bin/q/youth.bin", 
         "/mnt/data/bhps/bin/q/index.bin");
   
   
      Create_Egoalt_Wave_r( 
         "/mnt/data/bhps//tab/regoalt.tab", 
         "/mnt/data/bhps/bin/r/egoalt.bin", 
         "/mnt/data/bhps/bin/r/index.bin");
   
   
      Create_Hhresp_Wave_r( 
         "/mnt/data/bhps//tab/rhhresp.tab", 
         "/mnt/data/bhps/bin/r/hhresp.bin", 
         "/mnt/data/bhps/bin/r/index.bin");
   
   
      Create_Hhsamp_Wave_r( 
         "/mnt/data/bhps//tab/rhhsamp.tab", 
         "/mnt/data/bhps/bin/r/hhsamp.bin", 
         "/mnt/data/bhps/bin/r/index.bin");
   
   
      Create_Income_Wave_r( 
         "/mnt/data/bhps//tab/rincome.tab", 
         "/mnt/data/bhps/bin/r/income.bin", 
         "/mnt/data/bhps/bin/r/index.bin");
   
   
      Create_Indall_Wave_r( 
         "/mnt/data/bhps//tab/rindall.tab", 
         "/mnt/data/bhps/bin/r/indall.bin", 
         "/mnt/data/bhps/bin/r/index.bin");
   
   
      Create_Indresp_Wave_r( 
         "/mnt/data/bhps//tab/rindresp.tab", 
         "/mnt/data/bhps/bin/r/indresp.bin", 
         "/mnt/data/bhps/bin/r/index.bin");
   
   
      Create_Indsamp_Wave_r( 
         "/mnt/data/bhps//tab/rindsamp.tab", 
         "/mnt/data/bhps/bin/r/indsamp.bin", 
         "/mnt/data/bhps/bin/r/index.bin");
   
   
      Create_Jobhist_Wave_r( 
         "/mnt/data/bhps//tab/rjobhist.tab", 
         "/mnt/data/bhps/bin/r/jobhist.bin", 
         "/mnt/data/bhps/bin/r/index.bin");
   
   
      Create_Jobhstd_Wave_r( 
         "/mnt/data/bhps//tab/rjobhstd.tab", 
         "/mnt/data/bhps/bin/r/jobhstd.bin", 
         "/mnt/data/bhps/bin/r/index.bin");
   
   
      Create_Youth_Wave_r( 
         "/mnt/data/bhps//tab/ryouth.tab", 
         "/mnt/data/bhps/bin/r/youth.bin", 
         "/mnt/data/bhps/bin/r/index.bin");
   
   end Create;
   
end  BHPS.Binary_IO.Conversion_To_Binary;
