with Ada.Assertions;
with Ada.Text_IO;

package body BHPS_Enums is

    use Ada.Assertions;                      
    use Ada.Text_IO;

    function Pretty_Print( i : Adla_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when by_self => return "By self";
             when with_help_from_someone_else => return "With help from someone else";
             when not_at_all => return "Not at all";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Adla_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Adla_Type( i : String ) return Adla_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return by_self;
         elsif i = "2" then
            return with_help_from_someone_else;
         elsif i = "3" then
            return not_at_all;
        end if;
        Put_Line("Convert_Adla_Type: Unmatched string |" & i & "|" );
        return Adla_Type'First; -- never actually gets here; for compiler only
    end Convert_Adla_Type;



    function Pretty_Print( i : Adlad_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when very_easy => return "Very easy";
             when fairly_easy => return "Fairly easy";
             when fairly_difficult => return "Fairly difficult";
             when very_difficult => return "Very difficult";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Adlad_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Adlad_Type( i : String ) return Adlad_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return very_easy;
         elsif i = "2" then
            return fairly_easy;
         elsif i = "3" then
            return fairly_difficult;
         elsif i = "4" then
            return very_difficult;
        end if;
        Put_Line("Convert_Adlad_Type: Unmatched string |" & i & "|" );
        return Adlad_Type'First; -- never actually gets here; for compiler only
    end Convert_Adlad_Type;



    function Pretty_Print( i : Age_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Age_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Age_Type( i : String ) return Age_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
        end if;
        Put_Line("Convert_Age_Type: Unmatched string |" & i & "|" );
        return Age_Type'First; -- never actually gets here; for compiler only
    end Convert_Age_Type;



    function Pretty_Print( i : Agead1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when not_mentioned => return "Not mentioned";
             when happy_with_work => return "Happy with work";
             when secure_financially => return "Secure financially";
             when insecure_financially => return "Insecure financially";
             when financial_concession => return "Financial concession";
             when financial_penalties => return "Financial penalties";
             when more_finan_respons => return "More finan respons";
             when less_finan_respons => return "Less finan respons";
             when cost_of_education => return "Cost of education";
             when other_money_mention => return "Other money mention";
             when unhappy_with_work => return "Unhappy with work";
             when happy_with_partner => return "Happy with partner";
             when problems_w_partner => return "Problems w partner";
             when mention_of_children => return "Mention of children";
             when mention_gchildren => return "Mention g'children";
             when happy_with_family => return "Happy with family";
             when family_problems => return "Family problems";
             when living_alone => return "Living alone";
             when happy_with_friends => return "Happy with friends";
             when lack_friends_or_social => return "Lack friends/social";
             when other_family_or_friend => return "Other family/friend";
             when ageism_re_work => return "Ageism re work";
             when more_leisure_time => return "More leisure time";
             when pressures_on_time => return "Pressures on time";
             when legal_drinking_age => return "legal drinking age";
             when other_leisure_or_time => return "Other leisure/time";
             when more_job_opps => return "More job opps";
             when good_phys_health => return "Good (phys) health";
             when bad_phys_health => return "Bad (phys) health";
             when good_psych_health => return "Good psych health";
             when memory_or_depression => return "Memory/depression";
             when other_health_reason => return "Other health reason";
             when adv_semiretired => return "Adv. (semi)retired";
             when mature_or_experienced => return "Mature/experienced";
             when life_slipping_by => return "Life slipping by";
             when stability_or_establish => return "Stability/establish";
             when greater_freedom => return "Greater freedom";
             when constraint_curr_age => return "Constraint curr age";
             when look_fwd_to_future => return "Look fwd to future";
             when uncertain_future => return "Uncertain future";
             when few_responsibility => return "Few responsibility";
             when more_responsibilit => return "More responsibilit";
             when concern_aging_body => return "Concern aging body";
             when dissatis_w_retirement => return "Dissatis w retirement";
             when positive_re_fitness => return "Positive re fitness";
             when towards_end_of_life => return "Towards end of life";
             when other_issues_aging => return "Other issues aging";
             when mention_of_education => return "Mention of education";
             when age_not_important => return "Age not important";
             when other_ages_undesire => return "Other ages undesire";
             when other_age_desirable => return "Other age desirable";
             when likes_current_age => return "Likes current age";
             when dislike_current_age => return "Dislike current age";
             when more_respect_shown => return "More respect shown";
             when less_respect_shown => return "Less respect shown";
             when gen_happy_w_life => return "Gen. happy w life";
             when other_work_mentions => return "Other work  mentions";
             when no_disadvantages => return "No disadvantages";
             when no_advantages => return "No advantages";
             when other_reason_nes => return "Other reason (nes)";
             when nothing_or_blank => return "Nothing/blank";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Agead1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Agead1_Type( i : String ) return Agead1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return happy_with_work;
         elsif i = "10" then
            return secure_financially;
         elsif i = "11" then
            return insecure_financially;
         elsif i = "12" then
            return financial_concession;
         elsif i = "13" then
            return financial_penalties;
         elsif i = "14" then
            return more_finan_respons;
         elsif i = "15" then
            return less_finan_respons;
         elsif i = "16" then
            return cost_of_education;
         elsif i = "19" then
            return other_money_mention;
         elsif i = "2" then
            return unhappy_with_work;
         elsif i = "20" then
            return happy_with_partner;
         elsif i = "21" then
            return problems_w_partner;
         elsif i = "22" then
            return mention_of_children;
         elsif i = "23" then
            return mention_gchildren;
         elsif i = "24" then
            return happy_with_family;
         elsif i = "25" then
            return family_problems;
         elsif i = "26" then
            return living_alone;
         elsif i = "27" then
            return happy_with_friends;
         elsif i = "28" then
            return lack_friends_or_social;
         elsif i = "29" then
            return other_family_or_friend;
         elsif i = "3" then
            return ageism_re_work;
         elsif i = "30" then
            return more_leisure_time;
         elsif i = "31" then
            return pressures_on_time;
         elsif i = "32" then
            return legal_drinking_age;
         elsif i = "39" then
            return other_leisure_or_time;
         elsif i = "4" then
            return more_job_opps;
         elsif i = "40" then
            return good_phys_health;
         elsif i = "41" then
            return bad_phys_health;
         elsif i = "42" then
            return good_psych_health;
         elsif i = "43" then
            return memory_or_depression;
         elsif i = "49" then
            return other_health_reason;
         elsif i = "5" then
            return adv_semiretired;
         elsif i = "50" then
            return mature_or_experienced;
         elsif i = "51" then
            return life_slipping_by;
         elsif i = "52" then
            return stability_or_establish;
         elsif i = "53" then
            return greater_freedom;
         elsif i = "54" then
            return constraint_curr_age;
         elsif i = "55" then
            return look_fwd_to_future;
         elsif i = "56" then
            return uncertain_future;
         elsif i = "57" then
            return few_responsibility;
         elsif i = "58" then
            return more_responsibilit;
         elsif i = "59" then
            return concern_aging_body;
         elsif i = "6" then
            return dissatis_w_retirement;
         elsif i = "60" then
            return positive_re_fitness;
         elsif i = "61" then
            return towards_end_of_life;
         elsif i = "69" then
            return other_issues_aging;
         elsif i = "7" then
            return mention_of_education;
         elsif i = "70" then
            return age_not_important;
         elsif i = "71" then
            return other_ages_undesire;
         elsif i = "72" then
            return other_age_desirable;
         elsif i = "73" then
            return likes_current_age;
         elsif i = "74" then
            return dislike_current_age;
         elsif i = "75" then
            return more_respect_shown;
         elsif i = "76" then
            return less_respect_shown;
         elsif i = "77" then
            return gen_happy_w_life;
         elsif i = "9" then
            return other_work_mentions;
         elsif i = "90" then
            return no_disadvantages;
         elsif i = "91" then
            return no_advantages;
         elsif i = "96" then
            return other_reason_nes;
         elsif i = "97" then
            return nothing_or_blank;
        end if;
        Put_Line("Convert_Agead1_Type: Unmatched string |" & i & "|" );
        return Agead1_Type'First; -- never actually gets here; for compiler only
    end Convert_Agead1_Type;



    function Pretty_Print( i : Ageadv_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when mostly_advantages => return "Mostly advantages";
             when mostly_disadvantages => return "Mostly disadvantages";
             when bothvolunteered => return "Both(volunteered)";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ageadv_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ageadv_Type( i : String ) return Ageadv_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return mostly_advantages;
         elsif i = "2" then
            return mostly_disadvantages;
         elsif i = "3" then
            return bothvolunteered;
        end if;
        Put_Line("Convert_Ageadv_Type: Unmatched string |" & i & "|" );
        return Ageadv_Type'First; -- never actually gets here; for compiler only
    end Convert_Ageadv_Type;



    function Pretty_Print( i : Agechy_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Agechy_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Agechy_Type( i : String ) return Agechy_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
        end if;
        Put_Line("Convert_Agechy_Type: Unmatched string |" & i & "|" );
        return Agechy_Type'First; -- never actually gets here; for compiler only
    end Convert_Agechy_Type;



    function Pretty_Print( i : Agei_Type ) return String is
    begin
         case i is
             when not_imputed => return "Not Imputed";
             when imputed => return "Imputed";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Agei_Type ) return Boolean is
    begin
         case i is
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Agei_Type( i : String ) return Agei_Type is
    begin
         if i = "0" then
            return not_imputed;
         elsif i = "1" then
            return imputed;
        end if;
        Put_Line("Convert_Agei_Type: Unmatched string |" & i & "|" );
        return Agei_Type'First; -- never actually gets here; for compiler only
    end Convert_Agei_Type;



    function Pretty_Print( i : Agelh_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't Know";
             when refused => return "Refused";
             when not_live_w_both_pars => return "Not live w both pars";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing => return "Missing";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Agelh_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_live_w_both_pars => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Agelh_Type( i : String ) return Agelh_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-3" then
            return not_live_w_both_pars;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing;
        end if;
        Put_Line("Convert_Agelh_Type: Unmatched string |" & i & "|" );
        return Agelh_Type'First; -- never actually gets here; for compiler only
    end Convert_Agelh_Type;



    function Pretty_Print( i : Ageret_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ageret_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ageret_Type( i : String ) return Ageret_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
        end if;
        Put_Line("Convert_Ageret_Type: Unmatched string |" & i & "|" );
        return Ageret_Type'First; -- never actually gets here; for compiler only
    end Convert_Ageret_Type;



    function Pretty_Print( i : Aglqut_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Aglqut_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Aglqut_Type( i : String ) return Aglqut_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
        end if;
        Put_Line("Convert_Aglqut_Type: Unmatched string |" & i & "|" );
        return Aglqut_Type'First; -- never actually gets here; for compiler only
    end Convert_Aglqut_Type;



    function Pretty_Print( i : Aglt20_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when yes => return "Yes";
             when no => return "No";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Aglt20_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Aglt20_Type( i : String ) return Aglt20_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
        end if;
        Put_Line("Convert_Aglt20_Type: Unmatched string |" & i & "|" );
        return Aglt20_Type'First; -- never actually gets here; for compiler only
    end Convert_Aglt20_Type;



    function Pretty_Print( i : Aidhh_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when yes => return "Yes";
             when no => return "No";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Aidhh_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Aidhh_Type( i : String ) return Aidhh_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
         elsif i = "3" then
            return other;
        end if;
        Put_Line("Convert_Aidhh_Type: Unmatched string |" & i & "|" );
        return Aidhh_Type'First; -- never actually gets here; for compiler only
    end Convert_Aidhh_Type;



    function Pretty_Print( i : Aidhrs_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when s_0_4_hrs_per_week => return "0-4 hrs per week";
             when some_other_times => return "Some other times";
             when s_5_9_hrs_per_week => return "5-9 hrs per week";
             when s_10_19_hrs_per_wk => return "10-19 hrs per wk";
             when s_20_34_hrs_per_wk => return "20-34 hrs per wk";
             when s_35_49_hrs_per_wk => return "35-49 hrs per wk";
             when s_50_99_hrs_per_wk => return "50-99 hrs per wk";
             when s_100_plus_hrs_per_wk => return "100 + hrs per wk";
             when varies_under_20 => return "Varies under 20";
             when varies_20_hrs_plus => return "Varies 20 hrs +";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Aidhrs_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Aidhrs_Type( i : String ) return Aidhrs_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return s_0_4_hrs_per_week;
         elsif i = "10" then
            return some_other_times;
         elsif i = "2" then
            return s_5_9_hrs_per_week;
         elsif i = "3" then
            return s_10_19_hrs_per_wk;
         elsif i = "4" then
            return s_20_34_hrs_per_wk;
         elsif i = "5" then
            return s_35_49_hrs_per_wk;
         elsif i = "6" then
            return s_50_99_hrs_per_wk;
         elsif i = "7" then
            return s_100_plus_hrs_per_wk;
         elsif i = "8" then
            return varies_under_20;
         elsif i = "9" then
            return varies_20_hrs_plus;
        end if;
        Put_Line("Convert_Aidhrs_Type: Unmatched string |" & i & "|" );
        return Aidhrs_Type'First; -- never actually gets here; for compiler only
    end Convert_Aidhrs_Type;



    function Pretty_Print( i : Aidhu1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when parent_or_parent_in_law => return "Parent/parent in law";
             when other_relative => return "Other relative";
             when friend_or_neighbour => return "Friend or neighbour";
             when clients_of_vol_orgs => return "Clients of vol orgs.";
             when other_specified => return "Other specified";
             when grandparents => return "Grandparent(s)";
             when aunt_or_uncle => return "Aunt or Uncle";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Aidhu1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Aidhu1_Type( i : String ) return Aidhu1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return parent_or_parent_in_law;
         elsif i = "2" then
            return other_relative;
         elsif i = "3" then
            return friend_or_neighbour;
         elsif i = "4" then
            return clients_of_vol_orgs;
         elsif i = "5" then
            return other_specified;
         elsif i = "6" then
            return grandparents;
         elsif i = "7" then
            return aunt_or_uncle;
        end if;
        Put_Line("Convert_Aidhu1_Type: Unmatched string |" & i & "|" );
        return Aidhu1_Type'First; -- never actually gets here; for compiler only
    end Convert_Aidhu1_Type;



    function Pretty_Print( i : Aidhu2_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when parent_or_in_law => return "Parent/in law";
             when other_relative => return "Other relative";
             when friend_or_neighbour => return "Friend/neighbour";
             when clients_vol_orgs => return "Clients vol orgs.";
             when other_specified => return "Other specified";
             when grandparents => return "Grandparent(s)";
             when aunt_or_uncle => return "Aunt or Uncle";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Aidhu2_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Aidhu2_Type( i : String ) return Aidhu2_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return parent_or_in_law;
         elsif i = "2" then
            return other_relative;
         elsif i = "3" then
            return friend_or_neighbour;
         elsif i = "4" then
            return clients_vol_orgs;
         elsif i = "5" then
            return other_specified;
         elsif i = "6" then
            return grandparents;
         elsif i = "7" then
            return aunt_or_uncle;
        end if;
        Put_Line("Convert_Aidhu2_Type: Unmatched string |" & i & "|" );
        return Aidhu2_Type'First; -- never actually gets here; for compiler only
    end Convert_Aidhu2_Type;



    function Pretty_Print( i : Aidhua_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Aidhua_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Aidhua_Type( i : String ) return Aidhua_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
        end if;
        Put_Line("Convert_Aidhua_Type: Unmatched string |" & i & "|" );
        return Aidhua_Type'First; -- never actually gets here; for compiler only
    end Convert_Aidhua_Type;



    function Pretty_Print( i : Aidhub_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Aidhub_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Aidhub_Type( i : String ) return Aidhub_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
        end if;
        Put_Line("Convert_Aidhub_Type: Unmatched string |" & i & "|" );
        return Aidhub_Type'First; -- never actually gets here; for compiler only
    end Convert_Aidhub_Type;



    function Pretty_Print( i : Aidpl1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when yes => return "Yes";
             when no => return "No";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Aidpl1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Aidpl1_Type( i : String ) return Aidpl1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
        end if;
        Put_Line("Convert_Aidpl1_Type: Unmatched string |" & i & "|" );
        return Aidpl1_Type'First; -- never actually gets here; for compiler only
    end Convert_Aidpl1_Type;



    function Pretty_Print( i : Aidxhh_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when yes => return "Yes";
             when no => return "No";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Aidxhh_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Aidxhh_Type( i : String ) return Aidxhh_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
        end if;
        Put_Line("Convert_Aidxhh_Type: Unmatched string |" & i & "|" );
        return Aidxhh_Type'First; -- never actually gets here; for compiler only
    end Convert_Aidxhh_Type;



    function Pretty_Print( i : Aivfho_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when demolished_or_derelict => return "Demolished/derelict";
             when all_eligible_hh_intervd => return "All eligible HH intervd";
             when interviews_plus_proxies => return "Interviews + proxies";
             when interviews_plus_refusals => return "Interviews + refusals";
             when hh_comp_plus_ques_only => return "HH comp + ques only";
             when hh_composition_only => return "HH composition only";
             when docs_missing_or_unusable => return "Docs missing or unusable";
             when business_use_only => return "Business use only";
             when refusal_to_hq => return "Refusal to HQ";
             when all_refus_to_inter => return "All refus to int'er";
             when lang_probs_no_interp => return "Lang probs no interp";
             when too_old_or_infirm => return "Too old or infirm";
             when no_hh_member_contact => return "No HH member contact";
             when temp_accomm_only => return "Temp accomm only";
             when empty_at_first_call => return "Empty at first call";
             when building_not_complete => return "Building not complete";
             when institut_no_privt_hh => return "Institut no privt HH";
             when address_not_found => return "Address not found";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Aivfho_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Aivfho_Type( i : String ) return Aivfho_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return demolished_or_derelict;
         elsif i = "10" then
            return all_eligible_hh_intervd;
         elsif i = "11" then
            return interviews_plus_proxies;
         elsif i = "12" then
            return interviews_plus_refusals;
         elsif i = "13" then
            return hh_comp_plus_ques_only;
         elsif i = "14" then
            return hh_composition_only;
         elsif i = "19" then
            return docs_missing_or_unusable;
         elsif i = "2" then
            return business_use_only;
         elsif i = "20" then
            return refusal_to_hq;
         elsif i = "21" then
            return all_refus_to_inter;
         elsif i = "22" then
            return lang_probs_no_interp;
         elsif i = "23" then
            return too_old_or_infirm;
         elsif i = "24" then
            return no_hh_member_contact;
         elsif i = "3" then
            return temp_accomm_only;
         elsif i = "4" then
            return empty_at_first_call;
         elsif i = "5" then
            return building_not_complete;
         elsif i = "6" then
            return institut_no_privt_hh;
         elsif i = "7" then
            return address_not_found;
        end if;
        Put_Line("Convert_Aivfho_Type: Unmatched string |" & i & "|" );
        return Aivfho_Type'First; -- never actually gets here; for compiler only
    end Convert_Aivfho_Type;



    function Pretty_Print( i : Aivfio_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when full_interview => return "Full interview";
             when proxy => return "Proxy";
             when refusal => return "Refusal";
             when absent_no_proxy => return "Absent, no proxy";
             when oth_non_cont_or_no_proxy => return "Oth non-cont/no proxy";
             when pres_or_no_intv_or_no_proxy => return "Pres/no intv/no proxy";
             when child_under_16 => return "Child under 16";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Aivfio_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Aivfio_Type( i : String ) return Aivfio_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return full_interview;
         elsif i = "2" then
            return proxy;
         elsif i = "3" then
            return refusal;
         elsif i = "4" then
            return absent_no_proxy;
         elsif i = "5" then
            return oth_non_cont_or_no_proxy;
         elsif i = "6" then
            return pres_or_no_intv_or_no_proxy;
         elsif i = "7" then
            return child_under_16;
         elsif i = "8" then
            return other;
        end if;
        Put_Line("Convert_Aivfio_Type: Unmatched string |" & i & "|" );
        return Aivfio_Type'First; -- never actually gets here; for compiler only
    end Convert_Aivfio_Type;



    function Pretty_Print( i : Apno_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Apno_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Apno_Type( i : String ) return Apno_Type is
    begin
         if i = "-8" then
            return inapplicable;
        end if;
        Put_Line("Convert_Apno_Type: Unmatched string |" & i & "|" );
        return Apno_Type'First; -- never actually gets here; for compiler only
    end Convert_Apno_Type;



    function Pretty_Print( i : Astat_Type ) return String is
    begin
         case i is
             when active => return "Active";
             when retd_isolated_tsm => return "Ret'd: isolated TSM";
             when retd_adamant_refusal => return "Ret'd: adamant refusal";
             when retd_lt_untraced => return "Ret'd: LT untraced";
             when retd_wdrawn_before_field => return "Ret'd: wdrawn before field";
             when retd_other_reasons => return "Ret'd: other reasons";
             when retd_death => return "Ret'd: death";
             when reting_isolated_tsm => return "Ret'ing: isolated TSM";
             when reting_adamant_refusal => return "Ret'ing: adamant refusal";
             when l_t_untraced_wdrawn => return "l-t untraced, wdrawn";
             when reting_wdrawn_before_field => return "Ret'ing: wdrawn before field";
             when reting_other_reasons => return "Ret'ing: other reasons";
             when reting_death => return "Ret'ing: death";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Astat_Type ) return Boolean is
    begin
         case i is
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Astat_Type( i : String ) return Astat_Type is
    begin
         if i = "0" then
            return active;
         elsif i = "180" then
            return retd_isolated_tsm;
         elsif i = "181" then
            return retd_adamant_refusal;
         elsif i = "182" then
            return retd_lt_untraced;
         elsif i = "183" then
            return retd_wdrawn_before_field;
         elsif i = "198" then
            return retd_other_reasons;
         elsif i = "199" then
            return retd_death;
         elsif i = "80" then
            return reting_isolated_tsm;
         elsif i = "81" then
            return reting_adamant_refusal;
         elsif i = "82" then
            return l_t_untraced_wdrawn;
         elsif i = "83" then
            return reting_wdrawn_before_field;
         elsif i = "98" then
            return reting_other_reasons;
         elsif i = "99" then
            return reting_death;
        end if;
        Put_Line("Convert_Astat_Type: Unmatched string |" & i & "|" );
        return Astat_Type'First; -- never actually gets here; for compiler only
    end Convert_Astat_Type;



    function Pretty_Print( i : Boolean_With_Missing ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when yes => return "Yes";
             when no => return "No";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Boolean_With_Missing ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Boolean_With_Missing( i : String ) return Boolean_With_Missing is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
        end if;
        Put_Line("Convert_Boolean_With_Missing: Unmatched string |" & i & "|" );
        return Boolean_With_Missing'First; -- never actually gets here; for compiler only
    end Convert_Boolean_With_Missing;



    function Pretty_Print( i : Bankj_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when sole_only => return "Sole only";
             when joint_only => return "Joint only";
             when both_sole_and_joint => return "Both sole and joint";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Bankj_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Bankj_Type( i : String ) return Bankj_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return sole_only;
         elsif i = "2" then
            return joint_only;
         elsif i = "3" then
            return both_sole_and_joint;
        end if;
        Put_Line("Convert_Bankj_Type: Unmatched string |" & i & "|" );
        return Bankj_Type'First; -- never actually gets here; for compiler only
    end Convert_Bankj_Type;



    function Pretty_Print( i : Bankj1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Bankj1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Bankj1_Type( i : String ) return Bankj1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
        end if;
        Put_Line("Convert_Bankj1_Type: Unmatched string |" & i & "|" );
        return Bankj1_Type'First; -- never actually gets here; for compiler only
    end Convert_Bankj1_Type;



    function Pretty_Print( i : Bankj2_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Bankj2_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Bankj2_Type( i : String ) return Bankj2_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
        end if;
        Put_Line("Convert_Bankj2_Type: Unmatched string |" & i & "|" );
        return Bankj2_Type'First; -- never actually gets here; for compiler only
    end Convert_Bankj2_Type;



    function Pretty_Print( i : Basrate_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when no_set_amount => return "No set amount";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Basrate_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when no_set_amount => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Basrate_Type( i : String ) return Basrate_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-3" then
            return no_set_amount;
         elsif i = "1" then
            return no_set_amount;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
        end if;
        Put_Line("Convert_Basrate_Type: Unmatched string |" & i & "|" );
        return Basrate_Type'First; -- never actually gets here; for compiler only
    end Convert_Basrate_Type;



    function Pretty_Print( i : Basrest_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when exact_amount_given => return "Exact amount given";
             when estimated_amount_given => return "Estimated amount given";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Basrest_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Basrest_Type( i : String ) return Basrest_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return exact_amount_given;
         elsif i = "2" then
            return estimated_amount_given;
        end if;
        Put_Line("Convert_Basrest_Type: Unmatched string |" & i & "|" );
        return Basrest_Type'First; -- never actually gets here; for compiler only
    end Convert_Basrest_Type;



    function Pretty_Print( i : Bivfho_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when all_eligible_hh_intv => return "All eligible HH intv";
             when interviews_plus_proxies => return "Interviews + proxies";
             when interviews_plus_refusal => return "Interviews + refusal";
             when hh_comp_plus_qaire_only => return "HH comp + qaire only";
             when hh_composition_only => return "HH composition only";
             when pxy_at_original_addr => return "Pxy at original addr";
             when phone_pxy_intvw_only => return "Phone pxy intvw only";
             when youth_interview_only => return "Youth Interview only";
             when docs_missing_or_unusable => return "Docs missing or unusable";
             when demolished_or_derelict => return "Demolished/derelict";
             when only_business_prem => return "Only business prem";
             when address_not_found => return "Address not found";
             when no_hh_member_contact => return "No HH member contact";
             when refus_to_rsrch_cntre => return "Refus to Rsrch Cntre";
             when refusal_to_intviewer => return "Refusal to intviewer";
             when language_problems => return "Language problems";
             when no_intv_age_or_health => return "No intv.: Age/health";
             when moved_prev_wave_add => return "Moved prev wave add";
             when out_scope_institutn => return "Out scope-institut'n";
             when moved_out_of_scope => return "Moved out of scope";
             when whole_hh_deceased => return "Whole HH deceased";
             when no_psms_resident => return "No PSM's resident";
             when adamant_refusal => return "Adamant refusal";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Bivfho_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Bivfho_Type( i : String ) return Bivfho_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "10" then
            return all_eligible_hh_intv;
         elsif i = "11" then
            return interviews_plus_proxies;
         elsif i = "12" then
            return interviews_plus_refusal;
         elsif i = "13" then
            return hh_comp_plus_qaire_only;
         elsif i = "14" then
            return hh_composition_only;
         elsif i = "15" then
            return pxy_at_original_addr;
         elsif i = "16" then
            return phone_pxy_intvw_only;
         elsif i = "17" then
            return youth_interview_only;
         elsif i = "39" then
            return docs_missing_or_unusable;
         elsif i = "40" then
            return demolished_or_derelict;
         elsif i = "41" then
            return only_business_prem;
         elsif i = "50" then
            return address_not_found;
         elsif i = "51" then
            return no_hh_member_contact;
         elsif i = "60" then
            return refus_to_rsrch_cntre;
         elsif i = "61" then
            return refusal_to_intviewer;
         elsif i = "62" then
            return language_problems;
         elsif i = "63" then
            return no_intv_age_or_health;
         elsif i = "70" then
            return moved_prev_wave_add;
         elsif i = "80" then
            return out_scope_institutn;
         elsif i = "81" then
            return moved_out_of_scope;
         elsif i = "90" then
            return whole_hh_deceased;
         elsif i = "91" then
            return no_psms_resident;
         elsif i = "92" then
            return adamant_refusal;
        end if;
        Put_Line("Convert_Bivfho_Type: Unmatched string |" & i & "|" );
        return Bivfho_Type'First; -- never actually gets here; for compiler only
    end Convert_Bivfho_Type;



    function Pretty_Print( i : Bivfio_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when full_interview => return "Full interview";
             when refusal => return "Refusal";
             when other_non_intvw => return "Other non-intvw";
             when moved => return "Moved";
             when proxy_interview => return "Proxy interview";
             when child_under_16 => return "Child under 16";
             when telephone_intvw => return "Telephone intvw";
             when refusal_or_non_int_hh => return "Refusal/non-int HH";
             when non_int_or_non_int_hh => return "Non-int/non-int HH";
             when moved_or_non_int_hh => return "Moved/non-int HH";
             when child_in_non_int_hh => return "Child in non-int HH";
             when refusal_or_non_cont_hh => return "Refusal/non-cont HH";
             when lang_prob_or_nc_hh => return "Lang prob/NC HH";
             when age_infirm_or_nc_hh => return "Age, infirm/NC HH";
             when non_cont_or_nc_hh => return "Non-cont/NC HH";
             when out_of_scope_or_nc_hh => return "Out of scope/NC HH";
             when institutnsd_or_nc_hh => return "Institutnsd/NC HH";
             when untraced_mover => return "Untraced mover";
             when child_ref_or_nc_hh => return "Child ref/NC HH";
             when chd_lang_prob_or_nc_hh => return "Chd lang prob/NC HH";
             when chd_infirm_or_nc_hh => return "Chd infirm/NC HH";
             when chd_non_cont_or_nc_hh => return "Chd non-cont/NC HH";
             when chd_o_o_scope_or_nc_hh => return "Chd o-o-scope/NC HH";
             when chd_instit_or_nc_hh => return "Chd instit/NC HH";
             when chd_untraced_mover => return "Chd untraced mover";
             when no_one_elig_in_hh => return "No one elig in HH";
             when prev_wave_adamant_refusl => return "Prev wave adamant refusl";
             when other_retiring => return "Other retiring";
             when dead => return "Dead";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Bivfio_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Bivfio_Type( i : String ) return Bivfio_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return full_interview;
         elsif i = "10" then
            return refusal;
         elsif i = "11" then
            return other_non_intvw;
         elsif i = "12" then
            return moved;
         elsif i = "2" then
            return proxy_interview;
         elsif i = "20" then
            return child_under_16;
         elsif i = "3" then
            return telephone_intvw;
         elsif i = "30" then
            return refusal_or_non_int_hh;
         elsif i = "31" then
            return non_int_or_non_int_hh;
         elsif i = "32" then
            return moved_or_non_int_hh;
         elsif i = "40" then
            return child_in_non_int_hh;
         elsif i = "50" then
            return refusal_or_non_cont_hh;
         elsif i = "51" then
            return lang_prob_or_nc_hh;
         elsif i = "52" then
            return age_infirm_or_nc_hh;
         elsif i = "53" then
            return non_cont_or_nc_hh;
         elsif i = "54" then
            return out_of_scope_or_nc_hh;
         elsif i = "55" then
            return institutnsd_or_nc_hh;
         elsif i = "56" then
            return untraced_mover;
         elsif i = "60" then
            return child_ref_or_nc_hh;
         elsif i = "61" then
            return chd_lang_prob_or_nc_hh;
         elsif i = "62" then
            return chd_infirm_or_nc_hh;
         elsif i = "63" then
            return chd_non_cont_or_nc_hh;
         elsif i = "64" then
            return chd_o_o_scope_or_nc_hh;
         elsif i = "65" then
            return chd_instit_or_nc_hh;
         elsif i = "66" then
            return chd_untraced_mover;
         elsif i = "80" then
            return no_one_elig_in_hh;
         elsif i = "81" then
            return prev_wave_adamant_refusl;
         elsif i = "98" then
            return other_retiring;
         elsif i = "99" then
            return dead;
        end if;
        Put_Line("Convert_Bivfio_Type: Unmatched string |" & i & "|" );
        return Bivfio_Type'First; -- never actually gets here; for compiler only
    end Convert_Bivfio_Type;



    function Pretty_Print( i : Bpar16_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when yes => return "Yes";
             when no => return "No";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Bpar16_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Bpar16_Type( i : String ) return Bpar16_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
         elsif i = "3" then
            return other;
        end if;
        Put_Line("Convert_Bpar16_Type: Unmatched string |" & i & "|" );
        return Bpar16_Type'First; -- never actually gets here; for compiler only
    end Convert_Bpar16_Type;



    function Pretty_Print( i : Bscnsp_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when spend_it_all => return "Spend it all";
             when spend_some_and_save_some => return "Spend some and save some";
             when save_it_all => return "Save it all";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Bscnsp_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Bscnsp_Type( i : String ) return Bscnsp_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return spend_it_all;
         elsif i = "2" then
            return spend_some_and_save_some;
         elsif i = "3" then
            return save_it_all;
         elsif i = "4" then
            return other;
        end if;
        Put_Line("Convert_Bscnsp_Type: Unmatched string |" & i & "|" );
        return Bscnsp_Type'First; -- never actually gets here; for compiler only
    end Convert_Bscnsp_Type;



    function Pretty_Print( i : Bscnsp1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when nothing_written_in => return "Nothing written in";
             when holiday_or_holiday_booking => return "Holiday/holiday booking";
             when gifts_for_family_members => return "Gifts for family member(s)";
             when gifts_for_friends => return "Gifts for friend(s)";
             when clothing => return "Clothing";
             when other_everyday_or_hhold_items => return "Other everyday/hhold items";
             when payment_of_bills_or_debts => return "Payment of bills/debts";
             when home_improvements_or_repairs_etc => return "Home improvements/repairs etc";
             when hhold_consumer_durables => return "Hhold consumer durables";
             when carpets_or_furniture_or_garden_sheds => return "Carpets/furniture/garden sheds";
             when computer_or_computer_accessories => return "Computer/computer accessories";
             when car_purchase_or_maintenance => return "Car purchase/maintenance";
             when house_purchase_or_mortgage_repayment => return "House purchase/mortgage repayment";
             when hobbies_or_leisure_activities => return "Hobbies/leisure activities";
             when family_events => return "Family events";
             when other => return "Other";
             when no_reason_given_written_in => return "No reason given - written in";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Bscnsp1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Bscnsp1_Type( i : String ) return Bscnsp1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return nothing_written_in;
         elsif i = "1" then
            return holiday_or_holiday_booking;
         elsif i = "10" then
            return gifts_for_family_members;
         elsif i = "11" then
            return gifts_for_friends;
         elsif i = "12" then
            return clothing;
         elsif i = "13" then
            return other_everyday_or_hhold_items;
         elsif i = "14" then
            return payment_of_bills_or_debts;
         elsif i = "2" then
            return home_improvements_or_repairs_etc;
         elsif i = "3" then
            return hhold_consumer_durables;
         elsif i = "4" then
            return carpets_or_furniture_or_garden_sheds;
         elsif i = "5" then
            return computer_or_computer_accessories;
         elsif i = "6" then
            return car_purchase_or_maintenance;
         elsif i = "7" then
            return house_purchase_or_mortgage_repayment;
         elsif i = "8" then
            return hobbies_or_leisure_activities;
         elsif i = "9" then
            return family_events;
         elsif i = "96" then
            return other;
         elsif i = "97" then
            return no_reason_given_written_in;
        end if;
        Put_Line("Convert_Bscnsp1_Type: Unmatched string |" & i & "|" );
        return Bscnsp1_Type'First; -- never actually gets here; for compiler only
    end Convert_Bscnsp1_Type;



    function Pretty_Print( i : Bscnsp2_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when holiday_or_holiday_booking => return "Holiday/holiday booking";
             when gifts_for_family_members => return "Gifts for family member(s)";
             when gifts_for_friends => return "Gifts for friend(s)";
             when clothing => return "Clothing";
             when other_everyday_or_hhold_items => return "Other everyday/hhold items";
             when payment_of_bills_or_debts => return "Payment of bills/debts";
             when home_improvements_or_repairs_etc => return "Home improvements/repairs etc";
             when hhold_consumer_durables => return "Hhold consumer durables";
             when carpets_or_furniture_or_garden_sheds => return "Carpets/furniture/garden sheds";
             when computer_or_computer_accessories => return "Computer/computer accessories";
             when car_purchase_or_maintenance => return "Car purchase/maintenance";
             when house_purchase_or_mortgage_repayment => return "House purchase/mortgage repayment";
             when hobbies_or_leisure_activities => return "Hobbies/leisure activities";
             when family_events => return "Family events";
             when other => return "Other";
             when no_reason_given_written_in => return "No reason given - written in";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Bscnsp2_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Bscnsp2_Type( i : String ) return Bscnsp2_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return holiday_or_holiday_booking;
         elsif i = "10" then
            return gifts_for_family_members;
         elsif i = "11" then
            return gifts_for_friends;
         elsif i = "12" then
            return clothing;
         elsif i = "13" then
            return other_everyday_or_hhold_items;
         elsif i = "14" then
            return payment_of_bills_or_debts;
         elsif i = "2" then
            return home_improvements_or_repairs_etc;
         elsif i = "3" then
            return hhold_consumer_durables;
         elsif i = "4" then
            return carpets_or_furniture_or_garden_sheds;
         elsif i = "5" then
            return computer_or_computer_accessories;
         elsif i = "6" then
            return car_purchase_or_maintenance;
         elsif i = "7" then
            return house_purchase_or_mortgage_repayment;
         elsif i = "8" then
            return hobbies_or_leisure_activities;
         elsif i = "9" then
            return family_events;
         elsif i = "96" then
            return other;
         elsif i = "97" then
            return no_reason_given_written_in;
        end if;
        Put_Line("Convert_Bscnsp2_Type: Unmatched string |" & i & "|" );
        return Bscnsp2_Type'First; -- never actually gets here; for compiler only
    end Convert_Bscnsp2_Type;



    function Pretty_Print( i : Bscon_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when yes => return "Yes";
             when no => return "No";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Bscon_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Bscon_Type( i : String ) return Bscon_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
        end if;
        Put_Line("Convert_Bscon_Type: Unmatched string |" & i & "|" );
        return Bscon_Type'First; -- never actually gets here; for compiler only
    end Convert_Bscon_Type;



    function Pretty_Print( i : Butype_Type ) return String is
    begin
         case i is
             when dependent_child => return "Dependent child";
             when missing_or_wild => return "Missing or wild";
             when couple_no_ch_m_lt_65 => return "Couple,no ch,M lt 65";
             when single_woman_20_39 => return "Single woman,20-39";
             when single_woman_40_59 => return "Single woman,40-59";
             when single_woman_60_74 => return "Single woman,60-74";
             when single_woman_75_plus => return "Single woman,75+";
             when single_man_lt_30 => return "Single man,lt 30";
             when single_man_30_54 => return "Single man,30-54";
             when single_man_55_64 => return "Single man,55-64";
             when single_man_65_plus => return "Single man,65+";
             when couple_1_ch_m_lt_65 => return "Couple,1 ch,M lt 65";
             when couple_2_ch_m_lt_65 => return "Couple,2 ch,M lt 65";
             when couple_3_plus_ch_m_lt_65 => return "Couple,3+ ch,M lt 65";
             when couple_man_65_to_74 => return "Couple,man 65 to 74";
             when couple_man_75_plus => return "Couple,man 75+";
             when f_lone_parent_lt_60 => return "F lone parent,lt 60";
             when m_lone_parent_lt_65 => return "M lone parent,lt 65";
             when single_woman_lt_20 => return "Single woman,lt 20";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Butype_Type ) return Boolean is
    begin
         case i is
             when dependent_child => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Butype_Type( i : String ) return Butype_Type is
    begin
         if i = "-8" then
            return dependent_child;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return couple_no_ch_m_lt_65;
         elsif i = "10" then
            return single_woman_20_39;
         elsif i = "11" then
            return single_woman_40_59;
         elsif i = "12" then
            return single_woman_60_74;
         elsif i = "13" then
            return single_woman_75_plus;
         elsif i = "14" then
            return single_man_lt_30;
         elsif i = "15" then
            return single_man_30_54;
         elsif i = "16" then
            return single_man_55_64;
         elsif i = "17" then
            return single_man_65_plus;
         elsif i = "2" then
            return couple_1_ch_m_lt_65;
         elsif i = "3" then
            return couple_2_ch_m_lt_65;
         elsif i = "4" then
            return couple_3_plus_ch_m_lt_65;
         elsif i = "5" then
            return couple_man_65_to_74;
         elsif i = "6" then
            return couple_man_75_plus;
         elsif i = "7" then
            return f_lone_parent_lt_60;
         elsif i = "8" then
            return m_lone_parent_lt_65;
         elsif i = "9" then
            return single_woman_lt_20;
        end if;
        Put_Line("Convert_Butype_Type: Unmatched string |" & i & "|" );
        return Butype_Type'First; -- never actually gets here; for compiler only
    end Convert_Butype_Type;



    function Pretty_Print( i : Bwtag1_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Bwtag1_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Bwtag1_Type( i : String ) return Bwtag1_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
        end if;
        Put_Line("Convert_Bwtag1_Type: Unmatched string |" & i & "|" );
        return Bwtag1_Type'First; -- never actually gets here; for compiler only
    end Convert_Bwtag1_Type;



    function Pretty_Print( i : Bwtel_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when early => return "Early";
             when late => return "Late";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Bwtel_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Bwtel_Type( i : String ) return Bwtel_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return early;
         elsif i = "2" then
            return late;
        end if;
        Put_Line("Convert_Bwtel_Type: Unmatched string |" & i & "|" );
        return Bwtel_Type'First; -- never actually gets here; for compiler only
    end Convert_Bwtel_Type;



    function Pretty_Print( i : Bwtel2_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when early => return "Early";
             when late => return "Late";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Bwtel2_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Bwtel2_Type( i : String ) return Bwtel2_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return early;
         elsif i = "2" then
            return late;
        end if;
        Put_Line("Convert_Bwtel2_Type: Unmatched string |" & i & "|" );
        return Bwtel2_Type'First; -- never actually gets here; for compiler only
    end Convert_Bwtel2_Type;



    function Pretty_Print( i : Bwtg5_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when more => return "More";
             when less => return "Less";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Bwtg5_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Bwtg5_Type( i : String ) return Bwtg5_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return more;
         elsif i = "2" then
            return less;
        end if;
        Put_Line("Convert_Bwtg5_Type: Unmatched string |" & i & "|" );
        return Bwtg5_Type'First; -- never actually gets here; for compiler only
    end Convert_Bwtg5_Type;



    function Pretty_Print( i : Bwtg51_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when more => return "More";
             when less => return "Less";
             when no_dont_know => return "No, don't know";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Bwtg51_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Bwtg51_Type( i : String ) return Bwtg51_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return more;
         elsif i = "2" then
            return less;
         elsif i = "8" then
            return no_dont_know;
        end if;
        Put_Line("Convert_Bwtg51_Type: Unmatched string |" & i & "|" );
        return Bwtg51_Type'First; -- never actually gets here; for compiler only
    end Convert_Bwtg51_Type;



    function Pretty_Print( i : Bwtkn_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when yes_in_lbs_oz => return "Yes, in lbs oz";
             when yes_in_kilos => return "Yes, in kilos";
             when no_dont_know => return "No, don't know";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Bwtkn_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Bwtkn_Type( i : String ) return Bwtkn_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return yes_in_lbs_oz;
         elsif i = "2" then
            return yes_in_kilos;
         elsif i = "8" then
            return no_dont_know;
        end if;
        Put_Line("Convert_Bwtkn_Type: Unmatched string |" & i & "|" );
        return Bwtkn_Type'First; -- never actually gets here; for compiler only
    end Convert_Bwtkn_Type;



    function Pretty_Print( i : Bwtkn4_Type ) return String is
    begin
         case i is
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when yes_in_lbs_oz => return "Yes, in lbs oz";
             when yes_in_kilos => return "Yes, in kilos";
             when no_dont_know => return "No, don't know";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Bwtkn4_Type ) return Boolean is
    begin
         case i is
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Bwtkn4_Type( i : String ) return Bwtkn4_Type is
    begin
         if i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return yes_in_lbs_oz;
         elsif i = "2" then
            return yes_in_kilos;
         elsif i = "8" then
            return no_dont_know;
        end if;
        Put_Line("Convert_Bwtkn4_Type: Unmatched string |" & i & "|" );
        return Bwtkn4_Type'First; -- never actually gets here; for compiler only
    end Convert_Bwtkn4_Type;



    function Pretty_Print( i : Bwtlb_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Bwtlb_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Bwtlb_Type( i : String ) return Bwtlb_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
        end if;
        Put_Line("Convert_Bwtlb_Type: Unmatched string |" & i & "|" );
        return Bwtlb_Type'First; -- never actually gets here; for compiler only
    end Convert_Bwtlb_Type;



    function Pretty_Print( i : Caidua_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when get_lifts_in_car => return "Get lifts in car";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Caidua_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Caidua_Type( i : String ) return Caidua_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return get_lifts_in_car;
        end if;
        Put_Line("Convert_Caidua_Type: Unmatched string |" & i & "|" );
        return Caidua_Type'First; -- never actually gets here; for compiler only
    end Convert_Caidua_Type;



    function Pretty_Print( i : Caidub_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when shopping_for_you => return "Shopping for you";
             when be_shopped_for => return "Be shopped for";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Caidub_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Caidub_Type( i : String ) return Caidub_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return shopping_for_you;
         elsif i = "2" then
            return be_shopped_for;
        end if;
        Put_Line("Convert_Caidub_Type: Unmatched string |" & i & "|" );
        return Caidub_Type'First; -- never actually gets here; for compiler only
    end Convert_Caidub_Type;



    function Pretty_Print( i : Caiduc_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when providing_or_cooking_meals => return "Providing or cooking meals";
             when be_cooked_for => return "Be cooked for";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Caiduc_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Caiduc_Type( i : String ) return Caiduc_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return providing_or_cooking_meals;
         elsif i = "3" then
            return be_cooked_for;
        end if;
        Put_Line("Convert_Caiduc_Type: Unmatched string |" & i & "|" );
        return Caiduc_Type'First; -- never actually gets here; for compiler only
    end Convert_Caiduc_Type;



    function Pretty_Print( i : Caidud_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when help_with_basic_personal_needs => return "Help with basic personal needs";
             when helped_with_needs => return "Helped with needs";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Caidud_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Caidud_Type( i : String ) return Caidud_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return help_with_basic_personal_needs;
         elsif i = "4" then
            return helped_with_needs;
        end if;
        Put_Line("Convert_Caidud_Type: Unmatched string |" & i & "|" );
        return Caidud_Type'First; -- never actually gets here; for compiler only
    end Convert_Caidud_Type;



    function Pretty_Print( i : Caidue_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when washing_ironing_or_cleaning => return "Washing, ironing or cleaning";
             when washed_ironed_for => return "Washed, ironed for";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Caidue_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Caidue_Type( i : String ) return Caidue_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return washing_ironing_or_cleaning;
         elsif i = "5" then
            return washed_ironed_for;
        end if;
        Put_Line("Convert_Caidue_Type: Unmatched string |" & i & "|" );
        return Caidue_Type'First; -- never actually gets here; for compiler only
    end Convert_Caidue_Type;



    function Pretty_Print( i : Caiduf_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when dealing_with_personal_affairs => return "Dealing with personal affairs";
             when affairs_dealt_with => return "Affairs dealt with";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Caiduf_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Caiduf_Type( i : String ) return Caiduf_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return dealing_with_personal_affairs;
         elsif i = "6" then
            return affairs_dealt_with;
        end if;
        Put_Line("Convert_Caiduf_Type: Unmatched string |" & i & "|" );
        return Caiduf_Type'First; -- never actually gets here; for compiler only
    end Convert_Caiduf_Type;



    function Pretty_Print( i : Caidug_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when decorating_gardening_or_house_repairs => return "Decorating, gardening or house repairs";
             when decorated_etc_for => return "Decorated etc. for";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Caidug_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Caidug_Type( i : String ) return Caidug_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return decorating_gardening_or_house_repairs;
         elsif i = "7" then
            return decorated_etc_for;
        end if;
        Put_Line("Convert_Caidug_Type: Unmatched string |" & i & "|" );
        return Caidug_Type'First; -- never actually gets here; for compiler only
    end Convert_Caidug_Type;



    function Pretty_Print( i : Caiduh_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when financial_help => return "Financial help";
             when financial_assist => return "Financial assist";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Caiduh_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Caiduh_Type( i : String ) return Caiduh_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return financial_help;
         elsif i = "8" then
            return financial_assist;
        end if;
        Put_Line("Convert_Caiduh_Type: Unmatched string |" & i & "|" );
        return Caiduh_Type'First; -- never actually gets here; for compiler only
    end Convert_Caiduh_Type;



    function Pretty_Print( i : Caidui_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when anything_else => return "Anything else";
             when something_else => return "Something else";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Caidui_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Caidui_Type( i : String ) return Caidui_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return anything_else;
         elsif i = "9" then
            return something_else;
        end if;
        Put_Line("Convert_Caidui_Type: Unmatched string |" & i & "|" );
        return Caidui_Type'First; -- never actually gets here; for compiler only
    end Convert_Caidui_Type;



    function Pretty_Print( i : Carjob_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when own_employer => return "Own employer";
             when empl_other_person => return "Empl other person";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Carjob_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Carjob_Type( i : String ) return Carjob_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return own_employer;
         elsif i = "2" then
            return empl_other_person;
        end if;
        Put_Line("Convert_Carjob_Type: Unmatched string |" & i & "|" );
        return Carjob_Type'First; -- never actually gets here; for compiler only
    end Convert_Carjob_Type;



    function Pretty_Print( i : Carown_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when owned_by_household => return "Owned by household";
             when company_vehicles => return "Company vehicle(s)";
             when both_owned_and_company => return "Both owned and company";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Carown_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Carown_Type( i : String ) return Carown_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return owned_by_household;
         elsif i = "2" then
            return company_vehicles;
         elsif i = "3" then
            return both_owned_and_company;
        end if;
        Put_Line("Convert_Carown_Type: Unmatched string |" & i & "|" );
        return Carown_Type'First; -- never actually gets here; for compiler only
    end Convert_Carown_Type;



    function Pretty_Print( i : Carowr_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when rs_car => return "Rs car";
             when other_in_hh => return "Other in HH";
             when company_car => return "Company car";
             when other_outside_hh => return "Other outside HH";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Carowr_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Carowr_Type( i : String ) return Carowr_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return rs_car;
         elsif i = "2" then
            return other_in_hh;
         elsif i = "3" then
            return company_car;
         elsif i = "4" then
            return other_outside_hh;
        end if;
        Put_Line("Convert_Carowr_Type: Unmatched string |" & i & "|" );
        return Carowr_Type'First; -- never actually gets here; for compiler only
    end Convert_Carowr_Type;



    function Pretty_Print( i : Caruse_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when yes => return "Yes";
             when no => return "No";
             when dont_drive => return "Don't drive";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Caruse_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Caruse_Type( i : String ) return Caruse_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
         elsif i = "3" then
            return dont_drive;
        end if;
        Put_Line("Convert_Caruse_Type: Unmatched string |" & i & "|" );
        return Caruse_Type'First; -- never actually gets here; for compiler only
    end Convert_Caruse_Type;



    function Pretty_Print( i : Carval_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when s_99997_or_above => return "99997 or above";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Carval_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Carval_Type( i : String ) return Carval_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "99997" then
            return s_99997_or_above;
        end if;
        Put_Line("Convert_Carval_Type: Unmatched string |" & i & "|" );
        return Carval_Type'First; -- never actually gets here; for compiler only
    end Convert_Carval_Type;



    function Pretty_Print( i : Casmin_Type ) return String is
    begin
         case i is
             when undefined => return "Undefined";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing => return "Missing";
             when s_1anone => return "1a:none";
             when s_1belementary => return "1b:elementary";
             when s_1cbasic_voc => return "1c:basic voc";
             when s_2bmiddle_gen => return "2b:middle gen";
             when s_2amiddle_voc => return "2a:middle voc";
             when s_2c_genhi_gen => return "2c_gen:hi gen";
             when s_2c_vochi_voc => return "2c_voc:hi voc";
             when s_3alow_tert => return "3a:low tert";
             when s_3bhigh_tert => return "3b:high tert";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Casmin_Type ) return Boolean is
    begin
         case i is
             when undefined => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Casmin_Type( i : String ) return Casmin_Type is
    begin
         if i = "-1" then
            return undefined;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return s_1anone;
         elsif i = "2" then
            return s_1belementary;
         elsif i = "3" then
            return s_1cbasic_voc;
         elsif i = "4" then
            return s_2bmiddle_gen;
         elsif i = "5" then
            return s_2amiddle_voc;
         elsif i = "6" then
            return s_2c_genhi_gen;
         elsif i = "7" then
            return s_2c_vochi_voc;
         elsif i = "8" then
            return s_3alow_tert;
         elsif i = "9" then
            return s_3bhigh_tert;
        end if;
        Put_Line("Convert_Casmin_Type: Unmatched string |" & i & "|" );
        return Casmin_Type'First; -- never actually gets here; for compiler only
    end Convert_Casmin_Type;



    function Pretty_Print( i : Cbage_Type ) return String is
    begin
         case i is
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when male_16_64 => return "Male 16-64";
             when female_16_45 => return "Female 16-45";
             when other => return "Others";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Cbage_Type ) return Boolean is
    begin
         case i is
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Cbage_Type( i : String ) return Cbage_Type is
    begin
         if i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return male_16_64;
         elsif i = "2" then
            return female_16_45;
         elsif i = "3" then
            return other;
        end if;
        Put_Line("Convert_Cbage_Type: Unmatched string |" & i & "|" );
        return Cbage_Type'First; -- never actually gets here; for compiler only
    end Convert_Cbage_Type;



    function Pretty_Print( i : Cbagef_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing => return "Missing";
             when yes => return "Yes";
             when no => return "No";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Cbagef_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Cbagef_Type( i : String ) return Cbagef_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
        end if;
        Put_Line("Convert_Cbagef_Type: Unmatched string |" & i & "|" );
        return Cbagef_Type'First; -- never actually gets here; for compiler only
    end Convert_Cbagef_Type;



    function Pretty_Print( i : Ccbill_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when nothing_to_pay => return "Nothing to pay";
             when pay_the_full_amount => return "Pay the full amount";
             when more_than_the_min => return "More than the min";
             when pay_the_minimum => return "Pay the minimum";
             when usually_pay_the_min => return "Usually pay the min";
             when sometimes_cant_pay => return "Sometimes can't pay";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ccbill_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ccbill_Type( i : String ) return Ccbill_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return nothing_to_pay;
         elsif i = "2" then
            return pay_the_full_amount;
         elsif i = "3" then
            return more_than_the_min;
         elsif i = "4" then
            return pay_the_minimum;
         elsif i = "5" then
            return usually_pay_the_min;
         elsif i = "6" then
            return sometimes_cant_pay;
         elsif i = "7" then
            return other;
        end if;
        Put_Line("Convert_Ccbill_Type: Unmatched string |" & i & "|" );
        return Ccbill_Type'First; -- never actually gets here; for compiler only
    end Convert_Ccbill_Type;



    function Pretty_Print( i : Cd10cst_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when cost_inc_elsewhere => return "Cost inc elsewhere";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Cd10cst_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when cost_inc_elsewhere => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Cd10cst_Type( i : String ) return Cd10cst_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-3" then
            return cost_inc_elsewhere;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
        end if;
        Put_Line("Convert_Cd10cst_Type: Unmatched string |" & i & "|" );
        return Cd10cst_Type'First; -- never actually gets here; for compiler only
    end Convert_Cd10cst_Type;



    function Pretty_Print( i : Cd10new_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when yes => return "Yes";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Cd10new_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Cd10new_Type( i : String ) return Cd10new_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return yes;
        end if;
        Put_Line("Convert_Cd10new_Type: Unmatched string |" & i & "|" );
        return Cd10new_Type'First; -- never actually gets here; for compiler only
    end Convert_Cd10new_Type;



    function Pretty_Print( i : Cd13new_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when yes => return "Yes";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Cd13new_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Cd13new_Type( i : String ) return Cd13new_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return yes;
        end if;
        Put_Line("Convert_Cd13new_Type: Unmatched string |" & i & "|" );
        return Cd13new_Type'First; -- never actually gets here; for compiler only
    end Convert_Cd13new_Type;



    function Pretty_Print( i : Cd1new_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when no => return "No";
             when yes => return "Yes";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Cd1new_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Cd1new_Type( i : String ) return Cd1new_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return no;
         elsif i = "1" then
            return yes;
        end if;
        Put_Line("Convert_Cd1new_Type: Unmatched string |" & i & "|" );
        return Cd1new_Type'First; -- never actually gets here; for compiler only
    end Convert_Cd1new_Type;



    function Pretty_Print( i : Cd1own_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when no => return "No";
             when yes => return "Yes";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Cd1own_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Cd1own_Type( i : String ) return Cd1own_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return no;
         elsif i = "1" then
            return yes;
        end if;
        Put_Line("Convert_Cd1own_Type: Unmatched string |" & i & "|" );
        return Cd1own_Type'First; -- never actually gets here; for compiler only
    end Convert_Cd1own_Type;



    function Pretty_Print( i : Cdnuxp_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Cdnuxp_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Cdnuxp_Type( i : String ) return Cdnuxp_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
        end if;
        Put_Line("Convert_Cdnuxp_Type: Unmatched string |" & i & "|" );
        return Cdnuxp_Type'First; -- never actually gets here; for compiler only
    end Convert_Cdnuxp_Type;



    function Pretty_Print( i : Ch1bm_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when january => return "January";
             when october => return "October";
             when november => return "November";
             when december => return "December";
             when february => return "February";
             when march => return "March";
             when april => return "April";
             when may => return "May";
             when june => return "June";
             when july => return "July";
             when august => return "August";
             when september => return "September";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ch1bm_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ch1bm_Type( i : String ) return Ch1bm_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return january;
         elsif i = "10" then
            return october;
         elsif i = "11" then
            return november;
         elsif i = "12" then
            return december;
         elsif i = "2" then
            return february;
         elsif i = "3" then
            return march;
         elsif i = "4" then
            return april;
         elsif i = "5" then
            return may;
         elsif i = "6" then
            return june;
         elsif i = "7" then
            return july;
         elsif i = "8" then
            return august;
         elsif i = "9" then
            return september;
        end if;
        Put_Line("Convert_Ch1bm_Type: Unmatched string |" & i & "|" );
        return Ch1bm_Type'First; -- never actually gets here; for compiler only
    end Convert_Ch1bm_Type;



    function Pretty_Print( i : Chaida_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when give_lifts_in_car => return "Give lifts in car";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Chaida_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Chaida_Type( i : String ) return Chaida_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return give_lifts_in_car;
        end if;
        Put_Line("Convert_Chaida_Type: Unmatched string |" & i & "|" );
        return Chaida_Type'First; -- never actually gets here; for compiler only
    end Convert_Chaida_Type;



    function Pretty_Print( i : Chaidb_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when shopping_for_them => return "Shopping for them";
             when shop_for_them => return "Shop for them";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Chaidb_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Chaidb_Type( i : String ) return Chaidb_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return shopping_for_them;
         elsif i = "2" then
            return shop_for_them;
        end if;
        Put_Line("Convert_Chaidb_Type: Unmatched string |" & i & "|" );
        return Chaidb_Type'First; -- never actually gets here; for compiler only
    end Convert_Chaidb_Type;



    function Pretty_Print( i : Chaidc_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when providing_or_cooking_meals => return "Providing or cooking meals";
             when provide_or_cook_meals => return "Provide/Cook meals";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Chaidc_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Chaidc_Type( i : String ) return Chaidc_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return providing_or_cooking_meals;
         elsif i = "3" then
            return provide_or_cook_meals;
        end if;
        Put_Line("Convert_Chaidc_Type: Unmatched string |" & i & "|" );
        return Chaidc_Type'First; -- never actually gets here; for compiler only
    end Convert_Chaidc_Type;



    function Pretty_Print( i : Chaidd_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when looking_after_their_children => return "Looking after their children";
             when give_lifts_in_car => return "Give lifts in car";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Chaidd_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Chaidd_Type( i : String ) return Chaidd_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return looking_after_their_children;
         elsif i = "4" then
            return give_lifts_in_car;
        end if;
        Put_Line("Convert_Chaidd_Type: Unmatched string |" & i & "|" );
        return Chaidd_Type'First; -- never actually gets here; for compiler only
    end Convert_Chaidd_Type;



    function Pretty_Print( i : Chaide_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when washing_ironing_or_cleaning => return "Washing, ironing or cleaning";
             when wash_iron_clean => return "Wash, iron, clean";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Chaide_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Chaide_Type( i : String ) return Chaide_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return washing_ironing_or_cleaning;
         elsif i = "5" then
            return wash_iron_clean;
        end if;
        Put_Line("Convert_Chaide_Type: Unmatched string |" & i & "|" );
        return Chaide_Type'First; -- never actually gets here; for compiler only
    end Convert_Chaide_Type;



    function Pretty_Print( i : Chaidf_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when dealing_with_personal_affairs => return "Dealing with personal affairs";
             when handle_affairs => return "Handle affairs";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Chaidf_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Chaidf_Type( i : String ) return Chaidf_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return dealing_with_personal_affairs;
         elsif i = "6" then
            return handle_affairs;
        end if;
        Put_Line("Convert_Chaidf_Type: Unmatched string |" & i & "|" );
        return Chaidf_Type'First; -- never actually gets here; for compiler only
    end Convert_Chaidf_Type;



    function Pretty_Print( i : Chaidg_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when decorating_gardening_or_house_repairs => return "Decorating, gardening or house repairs";
             when decorate_garden => return "Decorate, garden";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Chaidg_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Chaidg_Type( i : String ) return Chaidg_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return decorating_gardening_or_house_repairs;
         elsif i = "7" then
            return decorate_garden;
        end if;
        Put_Line("Convert_Chaidg_Type: Unmatched string |" & i & "|" );
        return Chaidg_Type'First; -- never actually gets here; for compiler only
    end Convert_Chaidg_Type;



    function Pretty_Print( i : Cheseq_Type ) return String is
    begin
         case i is
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Cheseq_Type ) return Boolean is
    begin
         case i is
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Cheseq_Type( i : String ) return Cheseq_Type is
    begin
         if i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
        end if;
        Put_Line("Convert_Cheseq_Type: Unmatched string |" & i & "|" );
        return Cheseq_Type'First; -- never actually gets here; for compiler only
    end Convert_Cheseq_Type;



    function Pretty_Print( i : Chfar_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when less_than_15_minutes => return "Less than 15 minutes";
             when between_15_and_30_minutes => return "Between 15 and 30 minutes";
             when between_30_minutes_and_one_hour => return "Between 30 minutes and one hour";
             when between_one_and_two_hours => return "Between one and two hours";
             when more_than_two_hours => return "More than two hours";
             when lives_abroadvolunteered => return "Lives abroad(volunteered)";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Chfar_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Chfar_Type( i : String ) return Chfar_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return less_than_15_minutes;
         elsif i = "2" then
            return between_15_and_30_minutes;
         elsif i = "3" then
            return between_30_minutes_and_one_hour;
         elsif i = "4" then
            return between_one_and_two_hours;
         elsif i = "5" then
            return more_than_two_hours;
         elsif i = "6" then
            return lives_abroadvolunteered;
        end if;
        Put_Line("Convert_Chfar_Type: Unmatched string |" & i & "|" );
        return Chfar_Type'First; -- never actually gets here; for compiler only
    end Convert_Chfar_Type;



    function Pretty_Print( i : Chmail_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when daily => return "Daily";
             when at_least_once_a_week => return "At least once a week";
             when at_least_once_a_month => return "At least once a month";
             when several_times_a_year => return "Several times a year";
             when less_often => return "Less often";
             when never => return "Never";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Chmail_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Chmail_Type( i : String ) return Chmail_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return daily;
         elsif i = "2" then
            return at_least_once_a_week;
         elsif i = "3" then
            return at_least_once_a_month;
         elsif i = "4" then
            return several_times_a_year;
         elsif i = "5" then
            return less_often;
         elsif i = "6" then
            return never;
        end if;
        Put_Line("Convert_Chmail_Type: Unmatched string |" & i & "|" );
        return Chmail_Type'First; -- never actually gets here; for compiler only
    end Convert_Chmail_Type;



    function Pretty_Print( i : Citzn1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when france => return "France";
             when portugal => return "Portugal";
             when spain => return "Spain";
             when luxembourg => return "Luxembourg";
             when monaco => return "Monaco";
             when san_marino => return "San Marino";
             when belgium => return "Belgium";
             when morocco => return "Morocco";
             when algeria => return "Algeria";
             when tunesia => return "Tunesia";
             when libya => return "Libya";
             when egypt => return "Egypt";
             when sudan => return "Sudan";
             when mauritania => return "Mauritania";
             when mali => return "Mali";
             when burkina_faso => return "Burkina Faso";
             when iceland => return "Iceland";
             when niger => return "Niger";
             when chad => return "Chad";
             when cape_verde => return "Cape Verde";
             when senegal => return "Senegal";
             when gambia => return "Gambia";
             when guinea_bissau => return "Guinea-Bissau";
             when guinea => return "Guinea";
             when sierra_leone => return "Sierra Leone";
             when liberia => return "Liberia";
             when ivory_coast => return "Ivory Coast";
             when ghana => return "Ghana";
             when norway => return "Norway";
             when togo => return "Togo";
             when benin => return "Benin";
             when nigeria => return "Nigeria";
             when netherland => return "Netherland";
             when sweden => return "Sweden";
             when cameroon => return "Cameroon";
             when central_african_republic => return "Central African Republic";
             when equatorial_guinea => return "Equatorial Guinea";
             when sao_tome_and_principe => return "Sao Tome and Principe";
             when gabon => return "Gabon";
             when congo => return "Congo";
             when finland => return "Finland";
             when zaire => return "Zaire";
             when rwanda => return "Rwanda";
             when burundi => return "Burundi";
             when sthelena => return "St.Helena";
             when angola => return "Angola";
             when ethiopia => return "Ethiopia";
             when djibouti => return "Djibouti";
             when somalia => return "Somalia";
             when kenya => return "Kenya";
             when uganda => return "Uganda";
             when tanzania => return "Tanzania";
             when seychelles => return "Seychelles";
             when british_indian_ocean_territory => return "British Indian Ocean Territory";
             when switzerland => return "Switzerland";
             when mozambigue => return "Mozambigue";
             when liechtenstein => return "Liechtenstein";
             when madagascar => return "Madagascar";
             when reunion => return "Reunion";
             when mauritius => return "Mauritius";
             when comoros => return "Comoros";
             when mayotte => return "Mayotte";
             when zambia => return "Zambia";
             when austria => return "Austria";
             when zimbabwe => return "Zimbabwe";
             when malawi => return "Malawi";
             when south_africa => return "South Africa";
             when namibia => return "Namibia";
             when botswana => return "Botswana";
             when swaziland => return "Swaziland";
             when lesotho => return "Lesotho";
             when germany => return "Germany";
             when united_states => return "United States";
             when puerto_rico => return "Puerto Rico";
             when canada => return "Canada";
             when greenland => return "Greenland";
             when stpierre_and_miguelon => return "St.Pierre and Miguelon";
             when faroe_islands => return "Faroe Islands";
             when mexico => return "Mexico";
             when bermuda => return "Bermuda";
             when guatemala => return "Guatemala";
             when belize => return "Belize";
             when honduras => return "Honduras";
             when el_salvador => return "El Salvador";
             when andorra => return "Andorra";
             when nicaragua => return "Nicaragua";
             when costa_rica => return "Costa Rica";
             when gibraltar => return "Gibraltar";
             when panama => return "Panama";
             when anguilla => return "Anguilla";
             when cuba => return "Cuba";
             when stchristopher_and_nevis => return "St.Christopher and Nevis";
             when vatican_city_state => return "Vatican City State";
             when haiti => return "Haiti";
             when bahamas => return "Bahamas";
             when turks_and_caicos_island => return "Turks and Caicos Island";
             when dominican_republic => return "Dominican Republic";
             when virgin_islands_of_the_us => return "Virgin Islands of the US";
             when guadeloupe => return "Guadeloupe";
             when antigua_and_barbuda => return "Antigua and Barbuda";
             when malta => return "Malta";
             when dominica => return "Dominica";
             when british_virgin_islands_and_montserrat => return "British Virgin Islands and Montserrat";
             when martinique => return "Martinique";
             when cayman_island => return "Cayman Island";
             when jamaica => return "Jamaica";
             when st_lucia => return "St Lucia";
             when st_vincent => return "St Vincent";
             when barbados => return "Barbados";
             when trinidad_and_tobago => return "Trinidad and Tobago";
             when grenada => return "Grenada";
             when aruba => return "Aruba";
             when netherlands_antilles => return "Netherlands Antilles";
             when colombia => return "Colombia";
             when venezuela => return "Venezuela";
             when guyana => return "Guyana";
             when surinam => return "Surinam";
             when french_guiana => return "French Guiana";
             when italy => return "Italy";
             when ecuador => return "Ecuador";
             when peru => return "Peru";
             when brazil => return "Brazil";
             when chile => return "Chile";
             when bolivia => return "Bolivia";
             when turkey => return "Turkey";
             when paraguay => return "Paraguay";
             when uruguay => return "Uruguay";
             when argentina => return "Argentina";
             when falkland_islands => return "Falkland Islands";
             when estonia => return "Estonia";
             when latvia => return "Latvia";
             when lithuania => return "Lithuania";
             when united_kingdom => return "United Kingdom";
             when poland => return "Poland";
             when cyprus => return "Cyprus";
             when lebanon => return "Lebanon";
             when syria => return "Syria";
             when czech_republic => return "Czech Republic";
             when iraq => return "Iraq";
             when iran => return "Iran";
             when israel => return "Israel";
             when jordan => return "Jordan";
             when slovakia => return "Slovakia";
             when saudi_arabia => return "Saudi Arabia";
             when kuwait => return "Kuwait";
             when hungary => return "Hungary";
             when bahrain => return "Bahrain";
             when qatar => return "Qatar";
             when united_arab_emirates => return "United Arab Emirates";
             when oman => return "Oman";
             when yemen => return "Yemen";
             when romania => return "Romania";
             when afghanistan => return "Afghanistan";
             when pakistan => return "Pakistan";
             when india => return "India";
             when bangladesh => return "Bangladesh";
             when maldives => return "Maldives";
             when sri_lanka => return "Sri Lanka";
             when nepal => return "Nepal";
             when bhutan => return "Bhutan";
             when myanmar => return "Myanmar";
             when bulgaria => return "Bulgaria";
             when thailand => return "Thailand";
             when laos => return "Laos";
             when vietnam => return "Vietnam";
             when cambodia_kampuchea => return "Cambodia (Kampuchea)";
             when ireland => return "Ireland";
             when albania => return "Albania";
             when indonesia => return "Indonesia";
             when malaysia => return "Malaysia";
             when brunei => return "Brunei";
             when singapore => return "Singapore";
             when philippine => return "Philippine";
             when mongolia => return "Mongolia";
             when ukraine => return "Ukraine";
             when china => return "China";
             when north_korea => return "North Korea";
             when south_korea => return "South Korea";
             when belarus => return "Belarus";
             when japan => return "Japan";
             when taiwan => return "Taiwan";
             when moldavia => return "Moldavia";
             when hong_kong => return "Hong Kong";
             when macao => return "Macao";
             when russia => return "Russia";
             when georgia => return "Georgia";
             when armenia => return "Armenia";
             when azerbaijan => return "Azerbaijan";
             when kazakhstan => return "Kazakhstan";
             when denmark => return "Denmark";
             when turkmenistan => return "Turkmenistan";
             when australia => return "Australia";
             when papua_new_guinea => return "Papua New Guinea";
             when australian_oceania => return "Australian Oceania";
             when nauru => return "Nauru";
             when new_zealand => return "New Zealand";
             when solomon_island => return "Solomon Island";
             when tuvalu => return "Tuvalu";
             when new_caledonia => return "New Caledonia";
             when uzbekistan => return "Uzbekistan";
             when american_oceania => return "American Oceania";
             when wallis_and_futuna => return "Wallis and Futuna";
             when kiribati => return "Kiribati";
             when pitcairn => return "Pitcairn";
             when new_zealand_oceania => return "New Zealand Oceania";
             when fiji => return "Fiji";
             when vanuatu => return "Vanuatu";
             when tonga => return "Tonga";
             when western_samoa => return "Western Samoa";
             when tadjikistan => return "Tadjikistan";
             when french_polynesia => return "French Polynesia";
             when states_of_micronesia => return "States of Micronesia";
             when marshall_island => return "Marshall Island";
             when kyrghystan => return "Kyrghystan";
             when polar_region => return "Polar region";
             when greece => return "Greece";
             when europe => return "Europe";
             when european_community => return "European Community";
             when other_european_countries => return "Other European countries";
             when slovenia => return "Slovenia";
             when africa => return "Africa";
             when north_africa => return "North Africa";
             when west_africa => return "West Africa";
             when central_east_and_south_africa => return "Central. East and South Africa";
             when croatia => return "Croatia";
             when north_america => return "North America";
             when central_and_south_america => return "Central and South America";
             when bosnia_herzegovina => return "Bosnia-Herzegovina";
             when asia => return "Asia";
             when near_and_middle_east => return "Near and Middle East";
             when other_asian_countries => return "Other Asian countries";
             when serbia_and_montenegro => return "Serbia and Montenegro";
             when australia_oceania => return "Australia,Oceania";
             when macedonia => return "Macedonia";
             when any_other_country => return "Any other country";
             when nothing_written_in => return "Nothing written in";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Citzn1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Citzn1_Type( i : String ) return Citzn1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return france;
         elsif i = "10" then
            return portugal;
         elsif i = "11" then
            return spain;
         elsif i = "12" then
            return luxembourg;
         elsif i = "14" then
            return monaco;
         elsif i = "15" then
            return san_marino;
         elsif i = "2" then
            return belgium;
         elsif i = "204" then
            return morocco;
         elsif i = "208" then
            return algeria;
         elsif i = "212" then
            return tunesia;
         elsif i = "216" then
            return libya;
         elsif i = "220" then
            return egypt;
         elsif i = "224" then
            return sudan;
         elsif i = "228" then
            return mauritania;
         elsif i = "232" then
            return mali;
         elsif i = "236" then
            return burkina_faso;
         elsif i = "24" then
            return iceland;
         elsif i = "240" then
            return niger;
         elsif i = "244" then
            return chad;
         elsif i = "247" then
            return cape_verde;
         elsif i = "248" then
            return senegal;
         elsif i = "252" then
            return gambia;
         elsif i = "257" then
            return guinea_bissau;
         elsif i = "260" then
            return guinea;
         elsif i = "264" then
            return sierra_leone;
         elsif i = "268" then
            return liberia;
         elsif i = "272" then
            return ivory_coast;
         elsif i = "276" then
            return ghana;
         elsif i = "28" then
            return norway;
         elsif i = "280" then
            return togo;
         elsif i = "284" then
            return benin;
         elsif i = "288" then
            return nigeria;
         elsif i = "3" then
            return netherland;
         elsif i = "30" then
            return sweden;
         elsif i = "302" then
            return cameroon;
         elsif i = "306" then
            return central_african_republic;
         elsif i = "310" then
            return equatorial_guinea;
         elsif i = "311" then
            return sao_tome_and_principe;
         elsif i = "314" then
            return gabon;
         elsif i = "318" then
            return congo;
         elsif i = "32" then
            return finland;
         elsif i = "322" then
            return zaire;
         elsif i = "324" then
            return rwanda;
         elsif i = "328" then
            return burundi;
         elsif i = "329" then
            return sthelena;
         elsif i = "330" then
            return angola;
         elsif i = "334" then
            return ethiopia;
         elsif i = "338" then
            return djibouti;
         elsif i = "342" then
            return somalia;
         elsif i = "346" then
            return kenya;
         elsif i = "350" then
            return uganda;
         elsif i = "352" then
            return tanzania;
         elsif i = "355" then
            return seychelles;
         elsif i = "357" then
            return british_indian_ocean_territory;
         elsif i = "36" then
            return switzerland;
         elsif i = "366" then
            return mozambigue;
         elsif i = "37" then
            return liechtenstein;
         elsif i = "370" then
            return madagascar;
         elsif i = "372" then
            return reunion;
         elsif i = "373" then
            return mauritius;
         elsif i = "375" then
            return comoros;
         elsif i = "377" then
            return mayotte;
         elsif i = "378" then
            return zambia;
         elsif i = "38" then
            return austria;
         elsif i = "382" then
            return zimbabwe;
         elsif i = "386" then
            return malawi;
         elsif i = "388" then
            return south_africa;
         elsif i = "389" then
            return namibia;
         elsif i = "391" then
            return botswana;
         elsif i = "393" then
            return swaziland;
         elsif i = "395" then
            return lesotho;
         elsif i = "4" then
            return germany;
         elsif i = "400" then
            return united_states;
         elsif i = "401" then
            return puerto_rico;
         elsif i = "404" then
            return canada;
         elsif i = "406" then
            return greenland;
         elsif i = "408" then
            return stpierre_and_miguelon;
         elsif i = "41" then
            return faroe_islands;
         elsif i = "412" then
            return mexico;
         elsif i = "413" then
            return bermuda;
         elsif i = "416" then
            return guatemala;
         elsif i = "421" then
            return belize;
         elsif i = "424" then
            return honduras;
         elsif i = "428" then
            return el_salvador;
         elsif i = "43" then
            return andorra;
         elsif i = "432" then
            return nicaragua;
         elsif i = "436" then
            return costa_rica;
         elsif i = "44" then
            return gibraltar;
         elsif i = "442" then
            return panama;
         elsif i = "446" then
            return anguilla;
         elsif i = "448" then
            return cuba;
         elsif i = "449" then
            return stchristopher_and_nevis;
         elsif i = "45" then
            return vatican_city_state;
         elsif i = "452" then
            return haiti;
         elsif i = "453" then
            return bahamas;
         elsif i = "454" then
            return turks_and_caicos_island;
         elsif i = "456" then
            return dominican_republic;
         elsif i = "457" then
            return virgin_islands_of_the_us;
         elsif i = "458" then
            return guadeloupe;
         elsif i = "459" then
            return antigua_and_barbuda;
         elsif i = "46" then
            return malta;
         elsif i = "460" then
            return dominica;
         elsif i = "461" then
            return british_virgin_islands_and_montserrat;
         elsif i = "462" then
            return martinique;
         elsif i = "463" then
            return cayman_island;
         elsif i = "464" then
            return jamaica;
         elsif i = "465" then
            return st_lucia;
         elsif i = "467" then
            return st_vincent;
         elsif i = "469" then
            return barbados;
         elsif i = "472" then
            return trinidad_and_tobago;
         elsif i = "473" then
            return grenada;
         elsif i = "474" then
            return aruba;
         elsif i = "478" then
            return netherlands_antilles;
         elsif i = "480" then
            return colombia;
         elsif i = "484" then
            return venezuela;
         elsif i = "488" then
            return guyana;
         elsif i = "492" then
            return surinam;
         elsif i = "496" then
            return french_guiana;
         elsif i = "5" then
            return italy;
         elsif i = "500" then
            return ecuador;
         elsif i = "504" then
            return peru;
         elsif i = "508" then
            return brazil;
         elsif i = "512" then
            return chile;
         elsif i = "516" then
            return bolivia;
         elsif i = "52" then
            return turkey;
         elsif i = "520" then
            return paraguay;
         elsif i = "524" then
            return uruguay;
         elsif i = "528" then
            return argentina;
         elsif i = "529" then
            return falkland_islands;
         elsif i = "53" then
            return estonia;
         elsif i = "54" then
            return latvia;
         elsif i = "55" then
            return lithuania;
         elsif i = "6" then
            return united_kingdom;
         elsif i = "60" then
            return poland;
         elsif i = "600" then
            return cyprus;
         elsif i = "604" then
            return lebanon;
         elsif i = "608" then
            return syria;
         elsif i = "61" then
            return czech_republic;
         elsif i = "612" then
            return iraq;
         elsif i = "616" then
            return iran;
         elsif i = "624" then
            return israel;
         elsif i = "628" then
            return jordan;
         elsif i = "63" then
            return slovakia;
         elsif i = "632" then
            return saudi_arabia;
         elsif i = "636" then
            return kuwait;
         elsif i = "64" then
            return hungary;
         elsif i = "640" then
            return bahrain;
         elsif i = "644" then
            return qatar;
         elsif i = "647" then
            return united_arab_emirates;
         elsif i = "649" then
            return oman;
         elsif i = "653" then
            return yemen;
         elsif i = "66" then
            return romania;
         elsif i = "660" then
            return afghanistan;
         elsif i = "662" then
            return pakistan;
         elsif i = "664" then
            return india;
         elsif i = "666" then
            return bangladesh;
         elsif i = "667" then
            return maldives;
         elsif i = "669" then
            return sri_lanka;
         elsif i = "672" then
            return nepal;
         elsif i = "675" then
            return bhutan;
         elsif i = "676" then
            return myanmar;
         elsif i = "68" then
            return bulgaria;
         elsif i = "680" then
            return thailand;
         elsif i = "684" then
            return laos;
         elsif i = "690" then
            return vietnam;
         elsif i = "696" then
            return cambodia_kampuchea;
         elsif i = "7" then
            return ireland;
         elsif i = "70" then
            return albania;
         elsif i = "700" then
            return indonesia;
         elsif i = "701" then
            return malaysia;
         elsif i = "703" then
            return brunei;
         elsif i = "706" then
            return singapore;
         elsif i = "708" then
            return philippine;
         elsif i = "716" then
            return mongolia;
         elsif i = "72" then
            return ukraine;
         elsif i = "720" then
            return china;
         elsif i = "724" then
            return north_korea;
         elsif i = "728" then
            return south_korea;
         elsif i = "73" then
            return belarus;
         elsif i = "732" then
            return japan;
         elsif i = "736" then
            return taiwan;
         elsif i = "74" then
            return moldavia;
         elsif i = "740" then
            return hong_kong;
         elsif i = "743" then
            return macao;
         elsif i = "75" then
            return russia;
         elsif i = "76" then
            return georgia;
         elsif i = "77" then
            return armenia;
         elsif i = "78" then
            return azerbaijan;
         elsif i = "79" then
            return kazakhstan;
         elsif i = "8" then
            return denmark;
         elsif i = "80" then
            return turkmenistan;
         elsif i = "800" then
            return australia;
         elsif i = "801" then
            return papua_new_guinea;
         elsif i = "802" then
            return australian_oceania;
         elsif i = "803" then
            return nauru;
         elsif i = "804" then
            return new_zealand;
         elsif i = "806" then
            return solomon_island;
         elsif i = "807" then
            return tuvalu;
         elsif i = "809" then
            return new_caledonia;
         elsif i = "81" then
            return uzbekistan;
         elsif i = "810" then
            return american_oceania;
         elsif i = "811" then
            return wallis_and_futuna;
         elsif i = "812" then
            return kiribati;
         elsif i = "813" then
            return pitcairn;
         elsif i = "814" then
            return new_zealand_oceania;
         elsif i = "815" then
            return fiji;
         elsif i = "816" then
            return vanuatu;
         elsif i = "817" then
            return tonga;
         elsif i = "819" then
            return western_samoa;
         elsif i = "82" then
            return tadjikistan;
         elsif i = "822" then
            return french_polynesia;
         elsif i = "823" then
            return states_of_micronesia;
         elsif i = "824" then
            return marshall_island;
         elsif i = "83" then
            return kyrghystan;
         elsif i = "890" then
            return polar_region;
         elsif i = "9" then
            return greece;
         elsif i = "900" then
            return europe;
         elsif i = "901" then
            return european_community;
         elsif i = "902" then
            return other_european_countries;
         elsif i = "91" then
            return slovenia;
         elsif i = "910" then
            return africa;
         elsif i = "911" then
            return north_africa;
         elsif i = "912" then
            return west_africa;
         elsif i = "913" then
            return central_east_and_south_africa;
         elsif i = "92" then
            return croatia;
         elsif i = "921" then
            return north_america;
         elsif i = "922" then
            return central_and_south_america;
         elsif i = "93" then
            return bosnia_herzegovina;
         elsif i = "930" then
            return asia;
         elsif i = "931" then
            return near_and_middle_east;
         elsif i = "932" then
            return other_asian_countries;
         elsif i = "94" then
            return serbia_and_montenegro;
         elsif i = "940" then
            return australia_oceania;
         elsif i = "96" then
            return macedonia;
         elsif i = "990" then
            return any_other_country;
         elsif i = "997" then
            return nothing_written_in;
        end if;
        Put_Line("Convert_Citzn1_Type: Unmatched string |" & i & "|" );
        return Citzn1_Type'First; -- never actually gets here; for compiler only
    end Convert_Citzn1_Type;



    function Pretty_Print( i : Citzn2_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when france => return "France";
             when portugal => return "Portugal";
             when spain => return "Spain";
             when luxembourg => return "Luxembourg";
             when monaco => return "Monaco";
             when san_marino => return "San Marino";
             when belgium => return "Belgium";
             when morocco => return "Morocco";
             when algeria => return "Algeria";
             when tunesia => return "Tunesia";
             when libya => return "Libya";
             when egypt => return "Egypt";
             when sudan => return "Sudan";
             when mauritania => return "Mauritania";
             when mali => return "Mali";
             when burkina_faso => return "Burkina Faso";
             when iceland => return "Iceland";
             when niger => return "Niger";
             when chad => return "Chad";
             when cape_verde => return "Cape Verde";
             when senegal => return "Senegal";
             when gambia => return "Gambia";
             when guinea_bissau => return "Guinea-Bissau";
             when guinea => return "Guinea";
             when sierra_leone => return "Sierra Leone";
             when liberia => return "Liberia";
             when ivory_coast => return "Ivory Coast";
             when ghana => return "Ghana";
             when norway => return "Norway";
             when togo => return "Togo";
             when benin => return "Benin";
             when nigeria => return "Nigeria";
             when netherland => return "Netherland";
             when sweden => return "Sweden";
             when cameroon => return "Cameroon";
             when central_african_republic => return "Central African Republic";
             when equatorial_guinea => return "Equatorial Guinea";
             when sao_tome_and_principe => return "Sao Tome and Principe";
             when gabon => return "Gabon";
             when congo => return "Congo";
             when finland => return "Finland";
             when zaire => return "Zaire";
             when rwanda => return "Rwanda";
             when burundi => return "Burundi";
             when sthelena => return "St.Helena";
             when angola => return "Angola";
             when ethiopia => return "Ethiopia";
             when djibouti => return "Djibouti";
             when somalia => return "Somalia";
             when kenya => return "Kenya";
             when uganda => return "Uganda";
             when tanzania => return "Tanzania";
             when seychelles => return "Seychelles";
             when british_indian_ocean_territory => return "British Indian Ocean Territory";
             when switzerland => return "Switzerland";
             when mozambigue => return "Mozambigue";
             when liechtenstein => return "Liechtenstein";
             when madagascar => return "Madagascar";
             when reunion => return "Reunion";
             when mauritius => return "Mauritius";
             when comoros => return "Comoros";
             when mayotte => return "Mayotte";
             when zambia => return "Zambia";
             when austria => return "Austria";
             when zimbabwe => return "Zimbabwe";
             when malawi => return "Malawi";
             when south_africa => return "South Africa";
             when namibia => return "Namibia";
             when botswana => return "Botswana";
             when swaziland => return "Swaziland";
             when lesotho => return "Lesotho";
             when germany => return "Germany";
             when united_states => return "United States";
             when puerto_rico => return "Puerto Rico";
             when canada => return "Canada";
             when greenland => return "Greenland";
             when stpierre_and_miguelon => return "St.Pierre and Miguelon";
             when faroe_islands => return "Faroe Islands";
             when mexico => return "Mexico";
             when bermuda => return "Bermuda";
             when guatemala => return "Guatemala";
             when belize => return "Belize";
             when honduras => return "Honduras";
             when el_salvador => return "El Salvador";
             when andorra => return "Andorra";
             when nicaragua => return "Nicaragua";
             when costa_rica => return "Costa Rica";
             when gibraltar => return "Gibraltar";
             when panama => return "Panama";
             when anguilla => return "Anguilla";
             when cuba => return "Cuba";
             when stchristopher_and_nevis => return "St.Christopher and Nevis";
             when vatican_city_state => return "Vatican City State";
             when haiti => return "Haiti";
             when bahamas => return "Bahamas";
             when turks_and_caicos_island => return "Turks and Caicos Island";
             when dominican_republic => return "Dominican Republic";
             when virgin_islands_of_the_us => return "Virgin Islands of the US";
             when guadeloupe => return "Guadeloupe";
             when antigua_and_barbuda => return "Antigua and Barbuda";
             when malta => return "Malta";
             when dominica => return "Dominica";
             when british_virgin_islands_and_montserrat => return "British Virgin Islands and Montserrat";
             when martinique => return "Martinique";
             when cayman_island => return "Cayman Island";
             when jamaica => return "Jamaica";
             when st_lucia => return "St Lucia";
             when st_vincent => return "St Vincent";
             when barbados => return "Barbados";
             when trinidad_and_tobago => return "Trinidad and Tobago";
             when grenada => return "Grenada";
             when aruba => return "Aruba";
             when netherlands_antilles => return "Netherlands Antilles";
             when colombia => return "Colombia";
             when venezuela => return "Venezuela";
             when guyana => return "Guyana";
             when surinam => return "Surinam";
             when french_guiana => return "French Guiana";
             when italy => return "Italy";
             when ecuador => return "Ecuador";
             when peru => return "Peru";
             when brazil => return "Brazil";
             when chile => return "Chile";
             when bolivia => return "Bolivia";
             when turkey => return "Turkey";
             when paraguay => return "Paraguay";
             when uruguay => return "Uruguay";
             when argentina => return "Argentina";
             when falkland_islands => return "Falkland Islands";
             when estonia => return "Estonia";
             when latvia => return "Latvia";
             when lithuania => return "Lithuania";
             when united_kingdom => return "United Kingdom";
             when poland => return "Poland";
             when cyprus => return "Cyprus";
             when lebanon => return "Lebanon";
             when syria => return "Syria";
             when czech_republic => return "Czech Republic";
             when iraq => return "Iraq";
             when iran => return "Iran";
             when israel => return "Israel";
             when jordan => return "Jordan";
             when slovakia => return "Slovakia";
             when saudi_arabia => return "Saudi Arabia";
             when kuwait => return "Kuwait";
             when hungary => return "Hungary";
             when bahrain => return "Bahrain";
             when qatar => return "Qatar";
             when united_arab_emirates => return "United Arab Emirates";
             when oman => return "Oman";
             when yemen => return "Yemen";
             when romania => return "Romania";
             when afghanistan => return "Afghanistan";
             when pakistan => return "Pakistan";
             when india => return "India";
             when bangladesh => return "Bangladesh";
             when maldives => return "Maldives";
             when sri_lanka => return "Sri Lanka";
             when nepal => return "Nepal";
             when bhutan => return "Bhutan";
             when myanmar => return "Myanmar";
             when bulgaria => return "Bulgaria";
             when thailand => return "Thailand";
             when laos => return "Laos";
             when vietnam => return "Vietnam";
             when cambodia_kampuchea => return "Cambodia (Kampuchea)";
             when ireland => return "Ireland";
             when albania => return "Albania";
             when indonesia => return "Indonesia";
             when malaysia => return "Malaysia";
             when brunei => return "Brunei";
             when singapore => return "Singapore";
             when philippine => return "Philippine";
             when mongolia => return "Mongolia";
             when ukraine => return "Ukraine";
             when china => return "China";
             when north_korea => return "North Korea";
             when south_korea => return "South Korea";
             when belarus => return "Belarus";
             when japan => return "Japan";
             when taiwan => return "Taiwan";
             when moldavia => return "Moldavia";
             when hong_kong => return "Hong Kong";
             when macao => return "Macao";
             when russia => return "Russia";
             when georgia => return "Georgia";
             when armenia => return "Armenia";
             when azerbaijan => return "Azerbaijan";
             when kazakhstan => return "Kazakhstan";
             when denmark => return "Denmark";
             when turkmenistan => return "Turkmenistan";
             when australia => return "Australia";
             when papua_new_guinea => return "Papua New Guinea";
             when australian_oceania => return "Australian Oceania";
             when nauru => return "Nauru";
             when new_zealand => return "New Zealand";
             when solomon_island => return "Solomon Island";
             when tuvalu => return "Tuvalu";
             when new_caledonia => return "New Caledonia";
             when uzbekistan => return "Uzbekistan";
             when american_oceania => return "American Oceania";
             when wallis_and_futuna => return "Wallis and Futuna";
             when kiribati => return "Kiribati";
             when pitcairn => return "Pitcairn";
             when new_zealand_oceania => return "New Zealand Oceania";
             when fiji => return "Fiji";
             when vanuatu => return "Vanuatu";
             when tonga => return "Tonga";
             when western_samoa => return "Western Samoa";
             when tadjikistan => return "Tadjikistan";
             when french_polynesia => return "French Polynesia";
             when states_of_micronesia => return "States of Micronesia";
             when marshall_island => return "Marshall Island";
             when kyrghystan => return "Kyrghystan";
             when polar_region => return "Polar region";
             when greece => return "Greece";
             when europe => return "Europe";
             when european_community => return "European Community";
             when other_european_countries => return "Other European countries";
             when slovenia => return "Slovenia";
             when africa => return "Africa";
             when north_africa => return "North Africa";
             when west_africa => return "West Africa";
             when central_east_and_south_africa => return "Central. East and South Africa";
             when croatia => return "Croatia";
             when north_america => return "North America";
             when central_and_south_america => return "Central and South America";
             when bosnia_herzegovina => return "Bosnia-Herzegovina";
             when asia => return "Asia";
             when near_and_middle_east => return "Near and Middle East";
             when other_asian_countries => return "Other Asian countries";
             when serbia_and_montenegro => return "Serbia and Montenegro";
             when australia_oceania => return "Australia,Oceania";
             when macedonia => return "Macedonia";
             when any_other_country => return "Any other country";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Citzn2_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Citzn2_Type( i : String ) return Citzn2_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return france;
         elsif i = "10" then
            return portugal;
         elsif i = "11" then
            return spain;
         elsif i = "12" then
            return luxembourg;
         elsif i = "14" then
            return monaco;
         elsif i = "15" then
            return san_marino;
         elsif i = "2" then
            return belgium;
         elsif i = "204" then
            return morocco;
         elsif i = "208" then
            return algeria;
         elsif i = "212" then
            return tunesia;
         elsif i = "216" then
            return libya;
         elsif i = "220" then
            return egypt;
         elsif i = "224" then
            return sudan;
         elsif i = "228" then
            return mauritania;
         elsif i = "232" then
            return mali;
         elsif i = "236" then
            return burkina_faso;
         elsif i = "24" then
            return iceland;
         elsif i = "240" then
            return niger;
         elsif i = "244" then
            return chad;
         elsif i = "247" then
            return cape_verde;
         elsif i = "248" then
            return senegal;
         elsif i = "252" then
            return gambia;
         elsif i = "257" then
            return guinea_bissau;
         elsif i = "260" then
            return guinea;
         elsif i = "264" then
            return sierra_leone;
         elsif i = "268" then
            return liberia;
         elsif i = "272" then
            return ivory_coast;
         elsif i = "276" then
            return ghana;
         elsif i = "28" then
            return norway;
         elsif i = "280" then
            return togo;
         elsif i = "284" then
            return benin;
         elsif i = "288" then
            return nigeria;
         elsif i = "3" then
            return netherland;
         elsif i = "30" then
            return sweden;
         elsif i = "302" then
            return cameroon;
         elsif i = "306" then
            return central_african_republic;
         elsif i = "310" then
            return equatorial_guinea;
         elsif i = "311" then
            return sao_tome_and_principe;
         elsif i = "314" then
            return gabon;
         elsif i = "318" then
            return congo;
         elsif i = "32" then
            return finland;
         elsif i = "322" then
            return zaire;
         elsif i = "324" then
            return rwanda;
         elsif i = "328" then
            return burundi;
         elsif i = "329" then
            return sthelena;
         elsif i = "330" then
            return angola;
         elsif i = "334" then
            return ethiopia;
         elsif i = "338" then
            return djibouti;
         elsif i = "342" then
            return somalia;
         elsif i = "346" then
            return kenya;
         elsif i = "350" then
            return uganda;
         elsif i = "352" then
            return tanzania;
         elsif i = "355" then
            return seychelles;
         elsif i = "357" then
            return british_indian_ocean_territory;
         elsif i = "36" then
            return switzerland;
         elsif i = "366" then
            return mozambigue;
         elsif i = "37" then
            return liechtenstein;
         elsif i = "370" then
            return madagascar;
         elsif i = "372" then
            return reunion;
         elsif i = "373" then
            return mauritius;
         elsif i = "375" then
            return comoros;
         elsif i = "377" then
            return mayotte;
         elsif i = "378" then
            return zambia;
         elsif i = "38" then
            return austria;
         elsif i = "382" then
            return zimbabwe;
         elsif i = "386" then
            return malawi;
         elsif i = "388" then
            return south_africa;
         elsif i = "389" then
            return namibia;
         elsif i = "391" then
            return botswana;
         elsif i = "393" then
            return swaziland;
         elsif i = "395" then
            return lesotho;
         elsif i = "4" then
            return germany;
         elsif i = "400" then
            return united_states;
         elsif i = "401" then
            return puerto_rico;
         elsif i = "404" then
            return canada;
         elsif i = "406" then
            return greenland;
         elsif i = "408" then
            return stpierre_and_miguelon;
         elsif i = "41" then
            return faroe_islands;
         elsif i = "412" then
            return mexico;
         elsif i = "413" then
            return bermuda;
         elsif i = "416" then
            return guatemala;
         elsif i = "421" then
            return belize;
         elsif i = "424" then
            return honduras;
         elsif i = "428" then
            return el_salvador;
         elsif i = "43" then
            return andorra;
         elsif i = "432" then
            return nicaragua;
         elsif i = "436" then
            return costa_rica;
         elsif i = "44" then
            return gibraltar;
         elsif i = "442" then
            return panama;
         elsif i = "446" then
            return anguilla;
         elsif i = "448" then
            return cuba;
         elsif i = "449" then
            return stchristopher_and_nevis;
         elsif i = "45" then
            return vatican_city_state;
         elsif i = "452" then
            return haiti;
         elsif i = "453" then
            return bahamas;
         elsif i = "454" then
            return turks_and_caicos_island;
         elsif i = "456" then
            return dominican_republic;
         elsif i = "457" then
            return virgin_islands_of_the_us;
         elsif i = "458" then
            return guadeloupe;
         elsif i = "459" then
            return antigua_and_barbuda;
         elsif i = "46" then
            return malta;
         elsif i = "460" then
            return dominica;
         elsif i = "461" then
            return british_virgin_islands_and_montserrat;
         elsif i = "462" then
            return martinique;
         elsif i = "463" then
            return cayman_island;
         elsif i = "464" then
            return jamaica;
         elsif i = "465" then
            return st_lucia;
         elsif i = "467" then
            return st_vincent;
         elsif i = "469" then
            return barbados;
         elsif i = "472" then
            return trinidad_and_tobago;
         elsif i = "473" then
            return grenada;
         elsif i = "474" then
            return aruba;
         elsif i = "478" then
            return netherlands_antilles;
         elsif i = "480" then
            return colombia;
         elsif i = "484" then
            return venezuela;
         elsif i = "488" then
            return guyana;
         elsif i = "492" then
            return surinam;
         elsif i = "496" then
            return french_guiana;
         elsif i = "5" then
            return italy;
         elsif i = "500" then
            return ecuador;
         elsif i = "504" then
            return peru;
         elsif i = "508" then
            return brazil;
         elsif i = "512" then
            return chile;
         elsif i = "516" then
            return bolivia;
         elsif i = "52" then
            return turkey;
         elsif i = "520" then
            return paraguay;
         elsif i = "524" then
            return uruguay;
         elsif i = "528" then
            return argentina;
         elsif i = "529" then
            return falkland_islands;
         elsif i = "53" then
            return estonia;
         elsif i = "54" then
            return latvia;
         elsif i = "55" then
            return lithuania;
         elsif i = "6" then
            return united_kingdom;
         elsif i = "60" then
            return poland;
         elsif i = "600" then
            return cyprus;
         elsif i = "604" then
            return lebanon;
         elsif i = "608" then
            return syria;
         elsif i = "61" then
            return czech_republic;
         elsif i = "612" then
            return iraq;
         elsif i = "616" then
            return iran;
         elsif i = "624" then
            return israel;
         elsif i = "628" then
            return jordan;
         elsif i = "63" then
            return slovakia;
         elsif i = "632" then
            return saudi_arabia;
         elsif i = "636" then
            return kuwait;
         elsif i = "64" then
            return hungary;
         elsif i = "640" then
            return bahrain;
         elsif i = "644" then
            return qatar;
         elsif i = "647" then
            return united_arab_emirates;
         elsif i = "649" then
            return oman;
         elsif i = "653" then
            return yemen;
         elsif i = "66" then
            return romania;
         elsif i = "660" then
            return afghanistan;
         elsif i = "662" then
            return pakistan;
         elsif i = "664" then
            return india;
         elsif i = "666" then
            return bangladesh;
         elsif i = "667" then
            return maldives;
         elsif i = "669" then
            return sri_lanka;
         elsif i = "672" then
            return nepal;
         elsif i = "675" then
            return bhutan;
         elsif i = "676" then
            return myanmar;
         elsif i = "68" then
            return bulgaria;
         elsif i = "680" then
            return thailand;
         elsif i = "684" then
            return laos;
         elsif i = "690" then
            return vietnam;
         elsif i = "696" then
            return cambodia_kampuchea;
         elsif i = "7" then
            return ireland;
         elsif i = "70" then
            return albania;
         elsif i = "700" then
            return indonesia;
         elsif i = "701" then
            return malaysia;
         elsif i = "703" then
            return brunei;
         elsif i = "706" then
            return singapore;
         elsif i = "708" then
            return philippine;
         elsif i = "716" then
            return mongolia;
         elsif i = "72" then
            return ukraine;
         elsif i = "720" then
            return china;
         elsif i = "724" then
            return north_korea;
         elsif i = "728" then
            return south_korea;
         elsif i = "73" then
            return belarus;
         elsif i = "732" then
            return japan;
         elsif i = "736" then
            return taiwan;
         elsif i = "74" then
            return moldavia;
         elsif i = "740" then
            return hong_kong;
         elsif i = "743" then
            return macao;
         elsif i = "75" then
            return russia;
         elsif i = "76" then
            return georgia;
         elsif i = "77" then
            return armenia;
         elsif i = "78" then
            return azerbaijan;
         elsif i = "79" then
            return kazakhstan;
         elsif i = "8" then
            return denmark;
         elsif i = "80" then
            return turkmenistan;
         elsif i = "800" then
            return australia;
         elsif i = "801" then
            return papua_new_guinea;
         elsif i = "802" then
            return australian_oceania;
         elsif i = "803" then
            return nauru;
         elsif i = "804" then
            return new_zealand;
         elsif i = "806" then
            return solomon_island;
         elsif i = "807" then
            return tuvalu;
         elsif i = "809" then
            return new_caledonia;
         elsif i = "81" then
            return uzbekistan;
         elsif i = "810" then
            return american_oceania;
         elsif i = "811" then
            return wallis_and_futuna;
         elsif i = "812" then
            return kiribati;
         elsif i = "813" then
            return pitcairn;
         elsif i = "814" then
            return new_zealand_oceania;
         elsif i = "815" then
            return fiji;
         elsif i = "816" then
            return vanuatu;
         elsif i = "817" then
            return tonga;
         elsif i = "819" then
            return western_samoa;
         elsif i = "82" then
            return tadjikistan;
         elsif i = "822" then
            return french_polynesia;
         elsif i = "823" then
            return states_of_micronesia;
         elsif i = "824" then
            return marshall_island;
         elsif i = "83" then
            return kyrghystan;
         elsif i = "890" then
            return polar_region;
         elsif i = "9" then
            return greece;
         elsif i = "900" then
            return europe;
         elsif i = "901" then
            return european_community;
         elsif i = "902" then
            return other_european_countries;
         elsif i = "91" then
            return slovenia;
         elsif i = "910" then
            return africa;
         elsif i = "911" then
            return north_africa;
         elsif i = "912" then
            return west_africa;
         elsif i = "913" then
            return central_east_and_south_africa;
         elsif i = "92" then
            return croatia;
         elsif i = "921" then
            return north_america;
         elsif i = "922" then
            return central_and_south_america;
         elsif i = "93" then
            return bosnia_herzegovina;
         elsif i = "930" then
            return asia;
         elsif i = "931" then
            return near_and_middle_east;
         elsif i = "932" then
            return other_asian_countries;
         elsif i = "94" then
            return serbia_and_montenegro;
         elsif i = "940" then
            return australia_oceania;
         elsif i = "96" then
            return macedonia;
         elsif i = "990" then
            return any_other_country;
        end if;
        Put_Line("Convert_Citzn2_Type: Unmatched string |" & i & "|" );
        return Citzn2_Type'First; -- never actually gets here; for compiler only
    end Convert_Citzn2_Type;



    function Pretty_Print( i : Civfho_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when all_eligible_hh_intv => return "All eligible HH intv";
             when interviews_plus_proxies => return "Interviews + proxies";
             when interviews_plus_refusal => return "Interviews + refusal";
             when hh_comp_plus_qaire_only => return "HH comp + qaire only";
             when hh_composition_only => return "HH composition only";
             when pxy_at_original_addr => return "Pxy at original addr";
             when phone_pxy_intvw_only => return "Phone pxy intvw only";
             when youth_interview_only => return "Youth Interview only";
             when docs_missing_or_unus => return "Docs missing or unus";
             when address_not_found => return "Address not found";
             when no_hh_member_contact => return "No HH member contact";
             when refus_to_rsrch_cntre => return "Refus to Rsrch Cntre";
             when refusal_to_intviewer => return "Refusal to intviewer";
             when language_problems => return "Language problems";
             when no_intv_age_or_health => return "No intv.: Age/health";
             when moved_prev_wave_add => return "Moved prev wave add";
             when out_scope_institutn => return "Out scope-institut'n";
             when moved_out_of_scope => return "Moved out of scope";
             when whole_hh_deceased => return "Whole HH deceased";
             when no_psms_resident => return "No PSM's resident";
             when adamant_refusal => return "Adamant refusal";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Civfho_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Civfho_Type( i : String ) return Civfho_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "10" then
            return all_eligible_hh_intv;
         elsif i = "11" then
            return interviews_plus_proxies;
         elsif i = "12" then
            return interviews_plus_refusal;
         elsif i = "13" then
            return hh_comp_plus_qaire_only;
         elsif i = "14" then
            return hh_composition_only;
         elsif i = "15" then
            return pxy_at_original_addr;
         elsif i = "16" then
            return phone_pxy_intvw_only;
         elsif i = "17" then
            return youth_interview_only;
         elsif i = "39" then
            return docs_missing_or_unus;
         elsif i = "50" then
            return address_not_found;
         elsif i = "51" then
            return no_hh_member_contact;
         elsif i = "60" then
            return refus_to_rsrch_cntre;
         elsif i = "61" then
            return refusal_to_intviewer;
         elsif i = "62" then
            return language_problems;
         elsif i = "63" then
            return no_intv_age_or_health;
         elsif i = "70" then
            return moved_prev_wave_add;
         elsif i = "80" then
            return out_scope_institutn;
         elsif i = "81" then
            return moved_out_of_scope;
         elsif i = "90" then
            return whole_hh_deceased;
         elsif i = "91" then
            return no_psms_resident;
         elsif i = "92" then
            return adamant_refusal;
        end if;
        Put_Line("Convert_Civfho_Type: Unmatched string |" & i & "|" );
        return Civfho_Type'First; -- never actually gets here; for compiler only
    end Convert_Civfho_Type;



    function Pretty_Print( i : Civfio_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when full_interview => return "Full interview";
             when refusal => return "Refusal";
             when other_non_intvw => return "Other non-intvw";
             when moved => return "Moved";
             when proxy_interview => return "Proxy interview";
             when child_under_16 => return "Child under 16";
             when telephone_intvw => return "Telephone intvw";
             when refusal_or_non_int_hh => return "Refusal/non-int HH";
             when non_int_or_non_int_hh => return "Non-int/non-int HH";
             when moved_or_non_int_hh => return "Moved/non-int HH";
             when child_in_non_int_hh => return "Child in non-int HH";
             when refusal_or_non_cont_hh => return "Refusal/non-cont HH";
             when lang_prob_or_nc_hh => return "Lang prob/NC HH";
             when age_infirm_or_nc_hh => return "Age, infirm/NC HH";
             when non_cont_or_nc_hh => return "Non-cont/NC HH";
             when out_of_scope_or_nc_hh => return "Out of scope/NC HH";
             when institutnsd_or_nc_hh => return "Institutnsd/NC HH";
             when untraced_mover => return "Untraced mover";
             when child_ref_or_nc_hh => return "Child ref/NC HH";
             when chd_lang_prob_or_nc_hh => return "Chd lang prob/NC HH";
             when chd_infirm_or_nc_hh => return "Chd infirm/NC HH";
             when chd_non_cont_or_nc_hh => return "Chd non-cont/NC HH";
             when chd_o_o_scope_or_nc_hh => return "Chd o-o-scope/NC HH";
             when chd_instit_or_nc_hh => return "Chd instit/NC HH";
             when chd_untraced_mover => return "Chd untraced mover";
             when no_one_elig_in_hh => return "No one elig in HH";
             when prev_wave_adamant_refusl => return "Prev wave adamant refusl";
             when dead => return "Dead";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Civfio_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Civfio_Type( i : String ) return Civfio_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return full_interview;
         elsif i = "10" then
            return refusal;
         elsif i = "11" then
            return other_non_intvw;
         elsif i = "12" then
            return moved;
         elsif i = "2" then
            return proxy_interview;
         elsif i = "20" then
            return child_under_16;
         elsif i = "3" then
            return telephone_intvw;
         elsif i = "30" then
            return refusal_or_non_int_hh;
         elsif i = "31" then
            return non_int_or_non_int_hh;
         elsif i = "32" then
            return moved_or_non_int_hh;
         elsif i = "40" then
            return child_in_non_int_hh;
         elsif i = "50" then
            return refusal_or_non_cont_hh;
         elsif i = "51" then
            return lang_prob_or_nc_hh;
         elsif i = "52" then
            return age_infirm_or_nc_hh;
         elsif i = "53" then
            return non_cont_or_nc_hh;
         elsif i = "54" then
            return out_of_scope_or_nc_hh;
         elsif i = "55" then
            return institutnsd_or_nc_hh;
         elsif i = "56" then
            return untraced_mover;
         elsif i = "60" then
            return child_ref_or_nc_hh;
         elsif i = "61" then
            return chd_lang_prob_or_nc_hh;
         elsif i = "62" then
            return chd_infirm_or_nc_hh;
         elsif i = "63" then
            return chd_non_cont_or_nc_hh;
         elsif i = "64" then
            return chd_o_o_scope_or_nc_hh;
         elsif i = "65" then
            return chd_instit_or_nc_hh;
         elsif i = "66" then
            return chd_untraced_mover;
         elsif i = "80" then
            return no_one_elig_in_hh;
         elsif i = "81" then
            return prev_wave_adamant_refusl;
         elsif i = "99" then
            return dead;
        end if;
        Put_Line("Convert_Civfio_Type: Unmatched string |" & i & "|" );
        return Civfio_Type'First; -- never actually gets here; for compiler only
    end Convert_Civfio_Type;



    function Pretty_Print( i : Cjsbgm_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when january => return "January";
             when october => return "October";
             when november => return "November";
             when december => return "December";
             when winter => return "Winter";
             when spring => return "Spring";
             when summer => return "Summer";
             when autumn => return "Autumn";
             when february => return "February";
             when march => return "March";
             when april => return "April";
             when may => return "May";
             when june => return "June";
             when july => return "July";
             when august => return "August";
             when september => return "September";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Cjsbgm_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Cjsbgm_Type( i : String ) return Cjsbgm_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return january;
         elsif i = "10" then
            return october;
         elsif i = "11" then
            return november;
         elsif i = "12" then
            return december;
         elsif i = "13" then
            return winter;
         elsif i = "14" then
            return spring;
         elsif i = "15" then
            return summer;
         elsif i = "16" then
            return autumn;
         elsif i = "2" then
            return february;
         elsif i = "3" then
            return march;
         elsif i = "4" then
            return april;
         elsif i = "5" then
            return may;
         elsif i = "6" then
            return june;
         elsif i = "7" then
            return july;
         elsif i = "8" then
            return august;
         elsif i = "9" then
            return september;
        end if;
        Put_Line("Convert_Cjsbgm_Type: Unmatched string |" & i & "|" );
        return Cjsbgm_Type'First; -- never actually gets here; for compiler only
    end Convert_Cjsbgm_Type;



    function Pretty_Print( i : Cjsbly_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when yes_on_or_before_1990 => return "Yes on/before 1.9.90";
             when no_after_1990 => return "No after 1.9.90";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Cjsbly_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Cjsbly_Type( i : String ) return Cjsbly_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return yes_on_or_before_1990;
         elsif i = "2" then
            return no_after_1990;
        end if;
        Put_Line("Convert_Cjsbly_Type: Unmatched string |" & i & "|" );
        return Cjsbly_Type'First; -- never actually gets here; for compiler only
    end Convert_Cjsbly_Type;



    function Pretty_Print( i : Cjsblye_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when s_010196_or_before => return "01.01.96 or before";
             when after_010196 => return "After 01.01.96";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Cjsblye_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Cjsblye_Type( i : String ) return Cjsblye_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "1" then
            return s_010196_or_before;
         elsif i = "2" then
            return after_010196;
        end if;
        Put_Line("Convert_Cjsblye_Type: Unmatched string |" & i & "|" );
        return Cjsblye_Type'First; -- never actually gets here; for compiler only
    end Convert_Cjsblye_Type;



    function Pretty_Print( i : Cjscjs_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_ended => return "Not ended";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Cjscjs_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Cjscjs_Type( i : String ) return Cjscjs_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return not_ended;
        end if;
        Put_Line("Convert_Cjscjs_Type: Unmatched string |" & i & "|" );
        return Cjscjs_Type'First; -- never actually gets here; for compiler only
    end Convert_Cjscjs_Type;



    function Pretty_Print( i : Cjsck1_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when employed_no_changes => return "Employed, no changes";
             when not_int_last_year_old_employment => return "Not int last year, old employment";
             when in_current_employment => return "In current employment";
             when have_ff_retirement_activity_and_have_dat => return "Have FF retirement activity and have dat";
             when not_employed_and_activity_is_sth_else => return "Not employed and activity is sth else";
             when not_currently_employed => return "Not currently employed";
             when other => return "Others";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Cjsck1_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Cjsck1_Type( i : String ) return Cjsck1_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return employed_no_changes;
         elsif i = "2" then
            return not_int_last_year_old_employment;
         elsif i = "3" then
            return in_current_employment;
         elsif i = "4" then
            return have_ff_retirement_activity_and_have_dat;
         elsif i = "5" then
            return not_employed_and_activity_is_sth_else;
         elsif i = "6" then
            return not_currently_employed;
         elsif i = "7" then
            return other;
        end if;
        Put_Line("Convert_Cjsck1_Type: Unmatched string |" & i & "|" );
        return Cjsck1_Type'First; -- never actually gets here; for compiler only
    end Convert_Cjsck1_Type;



    function Pretty_Print( i : Cjsck2_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when yes => return "Yes";
             when no => return "No";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Cjsck2_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Cjsck2_Type( i : String ) return Cjsck2_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
        end if;
        Put_Line("Convert_Cjsck2_Type: Unmatched string |" & i & "|" );
        return Cjsck2_Type'First; -- never actually gets here; for compiler only
    end Convert_Cjsck2_Type;



    function Pretty_Print( i : Cjsem_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when january => return "January";
             when october => return "October";
             when november => return "November";
             when december => return "December";
             when february => return "February";
             when march => return "March";
             when april => return "April";
             when may => return "May";
             when june => return "June";
             when july => return "July";
             when august => return "August";
             when september => return "September";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Cjsem_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Cjsem_Type( i : String ) return Cjsem_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return january;
         elsif i = "10" then
            return october;
         elsif i = "11" then
            return november;
         elsif i = "12" then
            return december;
         elsif i = "2" then
            return february;
         elsif i = "3" then
            return march;
         elsif i = "4" then
            return april;
         elsif i = "5" then
            return may;
         elsif i = "6" then
            return june;
         elsif i = "7" then
            return july;
         elsif i = "8" then
            return august;
         elsif i = "9" then
            return september;
        end if;
        Put_Line("Convert_Cjsem_Type: Unmatched string |" & i & "|" );
        return Cjsem_Type'First; -- never actually gets here; for compiler only
    end Convert_Cjsem_Type;



    function Pretty_Print( i : Cjsstly_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when self_employed => return "Self employed";
             when something_else => return "Something else";
             when in_paid_employment => return "In paid employment";
             when unemployed => return "Unemployed";
             when retired_from_paid_work_altogether => return "Retired from paid work altogether";
             when on_maternity_leave => return "On maternity leave";
             when looking_after_family_or_home => return "Looking after family or home";
             when full_time_student_or_at_school => return "Full-time student or at school";
             when long_term_sick_or_disabled => return "Long term sick or disabled";
             when on_a_govt_training_scheme => return "On a govt training scheme";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Cjsstly_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Cjsstly_Type( i : String ) return Cjsstly_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return self_employed;
         elsif i = "10" then
            return something_else;
         elsif i = "2" then
            return in_paid_employment;
         elsif i = "3" then
            return unemployed;
         elsif i = "4" then
            return retired_from_paid_work_altogether;
         elsif i = "5" then
            return on_maternity_leave;
         elsif i = "6" then
            return looking_after_family_or_home;
         elsif i = "7" then
            return full_time_student_or_at_school;
         elsif i = "8" then
            return long_term_sick_or_disabled;
         elsif i = "9" then
            return on_a_govt_training_scheme;
        end if;
        Put_Line("Convert_Cjsstly_Type: Unmatched string |" & i & "|" );
        return Cjsstly_Type'First; -- never actually gets here; for compiler only
    end Convert_Cjsstly_Type;



    function Pretty_Print( i : Cjsten_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Cjsten_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Cjsten_Type( i : String ) return Cjsten_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
        end if;
        Put_Line("Convert_Cjsten_Type: Unmatched string |" & i & "|" );
        return Cjsten_Type'First; -- never actually gets here; for compiler only
    end Convert_Cjsten_Type;



    function Pretty_Print( i : Cjswk9_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when proxy => return "Proxy";
             when missing_or_wild => return "Missing or wild";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Cjswk9_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when proxy => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Cjswk9_Type( i : String ) return Cjswk9_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return proxy;
         elsif i = "-9" then
            return missing_or_wild;
        end if;
        Put_Line("Convert_Cjswk9_Type: Unmatched string |" & i & "|" );
        return Cjswk9_Type'First; -- never actually gets here; for compiler only
    end Convert_Cjswk9_Type;



    function Pretty_Print( i : Coh1mr_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when yes => return "Yes";
             when no => return "No";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Coh1mr_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Coh1mr_Type( i : String ) return Coh1mr_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
        end if;
        Put_Line("Convert_Coh1mr_Type: Unmatched string |" & i & "|" );
        return Coh1mr_Type'First; -- never actually gets here; for compiler only
    end Convert_Coh1mr_Type;



    function Pretty_Print( i : Cohad1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when nothing_written_in => return "Nothing written in";
             when trial_marriage => return "Trial marriage";
             when no_legal_ties => return "No legal ties";
             when improves_relationship => return "Improves relationship";
             when prev_bad_marriage => return "Prev. bad marriage";
             when personal_independence => return "Personal independence";
             when financial_advantages => return "Financial advantages";
             when companionship => return "Companionship";
             when prefer_cohab_nes => return "Prefer cohab (nes)";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Cohad1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Cohad1_Type( i : String ) return Cohad1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return nothing_written_in;
         elsif i = "1" then
            return trial_marriage;
         elsif i = "2" then
            return no_legal_ties;
         elsif i = "3" then
            return improves_relationship;
         elsif i = "4" then
            return prev_bad_marriage;
         elsif i = "5" then
            return personal_independence;
         elsif i = "6" then
            return financial_advantages;
         elsif i = "7" then
            return companionship;
         elsif i = "8" then
            return prefer_cohab_nes;
         elsif i = "96" then
            return other;
        end if;
        Put_Line("Convert_Cohad1_Type: Unmatched string |" & i & "|" );
        return Cohad1_Type'First; -- never actually gets here; for compiler only
    end Convert_Cohad1_Type;



    function Pretty_Print( i : Cohad2_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when not_mentioned => return "Not mentioned";
             when trial_marriage => return "Trial marriage";
             when no_legal_ties => return "No legal ties";
             when improves_relationship => return "Improves relationship";
             when prev_bad_marriage => return "Prev. bad marriage";
             when personal_independence => return "Personal independence";
             when financial_advantages => return "Financial advantages";
             when companionship => return "Companionship";
             when prefer_cohab_nes => return "Prefer cohab (nes)";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Cohad2_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Cohad2_Type( i : String ) return Cohad2_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return trial_marriage;
         elsif i = "2" then
            return no_legal_ties;
         elsif i = "3" then
            return improves_relationship;
         elsif i = "4" then
            return prev_bad_marriage;
         elsif i = "5" then
            return personal_independence;
         elsif i = "6" then
            return financial_advantages;
         elsif i = "7" then
            return companionship;
         elsif i = "8" then
            return prefer_cohab_nes;
         elsif i = "96" then
            return other;
        end if;
        Put_Line("Convert_Cohad2_Type: Unmatched string |" & i & "|" );
        return Cohad2_Type'First; -- never actually gets here; for compiler only
    end Convert_Cohad2_Type;



    function Pretty_Print( i : Cohds1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when nothing_written_in => return "Nothing written in";
             when financial_insecurity => return "Financial insecurity";
             when no_legal_status => return "No legal status";
             when affects_on_children => return "Affects on children";
             when lack_of_commitment => return "Lack of commitment";
             when social_stigma => return "Social stigma";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Cohds1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Cohds1_Type( i : String ) return Cohds1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return nothing_written_in;
         elsif i = "1" then
            return financial_insecurity;
         elsif i = "2" then
            return no_legal_status;
         elsif i = "3" then
            return affects_on_children;
         elsif i = "4" then
            return lack_of_commitment;
         elsif i = "5" then
            return social_stigma;
         elsif i = "96" then
            return other;
        end if;
        Put_Line("Convert_Cohds1_Type: Unmatched string |" & i & "|" );
        return Cohds1_Type'First; -- never actually gets here; for compiler only
    end Convert_Cohds1_Type;



    function Pretty_Print( i : Cohds2_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when not_mentioned => return "Not mentioned";
             when financial_insecurity => return "Financial insecurity";
             when no_legal_status => return "No legal status";
             when affects_on_children => return "Affects on children";
             when lack_of_commitment => return "Lack of commitment";
             when social_stigma => return "Social stigma";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Cohds2_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Cohds2_Type( i : String ) return Cohds2_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return financial_insecurity;
         elsif i = "2" then
            return no_legal_status;
         elsif i = "3" then
            return affects_on_children;
         elsif i = "4" then
            return lack_of_commitment;
         elsif i = "5" then
            return social_stigma;
         elsif i = "96" then
            return other;
        end if;
        Put_Line("Convert_Cohds2_Type: Unmatched string |" & i & "|" );
        return Cohds2_Type'First; -- never actually gets here; for compiler only
    end Convert_Cohds2_Type;



    function Pretty_Print( i : Cohxpm1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when planning_to_marry => return "Planning to marry";
             when probably_get_married => return "Probably get married";
             when just_live_together => return "Just live together";
             when no_thought_to_future => return "No thought to future";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Cohxpm1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Cohxpm1_Type( i : String ) return Cohxpm1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return planning_to_marry;
         elsif i = "2" then
            return probably_get_married;
         elsif i = "3" then
            return just_live_together;
         elsif i = "4" then
            return no_thought_to_future;
         elsif i = "5" then
            return other;
        end if;
        Put_Line("Convert_Cohxpm1_Type: Unmatched string |" & i & "|" );
        return Cohxpm1_Type'First; -- never actually gets here; for compiler only
    end Convert_Cohxpm1_Type;



    function Pretty_Print( i : Cohxpm2_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when very_likely => return "Very likely";
             when likely => return "Likely";
             when unlikely => return "Unlikely";
             when very_unlikely => return "Very unlikely";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Cohxpm2_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Cohxpm2_Type( i : String ) return Cohxpm2_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return very_likely;
         elsif i = "2" then
            return likely;
         elsif i = "3" then
            return unlikely;
         elsif i = "4" then
            return very_unlikely;
        end if;
        Put_Line("Convert_Cohxpm2_Type: Unmatched string |" & i & "|" );
        return Cohxpm2_Type'First; -- never actually gets here; for compiler only
    end Convert_Cohxpm2_Type;



    function Pretty_Print( i : Cosb_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when yes => return "Yes";
             when no => return "No";
             when yes_but_no_form => return "Yes, but no form";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Cosb_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Cosb_Type( i : String ) return Cosb_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
         elsif i = "3" then
            return yes_but_no_form;
        end if;
        Put_Line("Convert_Cosb_Type: Unmatched string |" & i & "|" );
        return Cosb_Type'First; -- never actually gets here; for compiler only
    end Convert_Cosb_Type;



    function Pretty_Print( i : Cose_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when yes => return "Yes";
             when no => return "No";
             when child_not_at_school => return "Child not at school";
             when not_applicable => return "Not applicable";
             when yes_but_no_form => return "Yes, but no form";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Cose_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Cose_Type( i : String ) return Cose_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
         elsif i = "3" then
            return child_not_at_school;
         elsif i = "4" then
            return not_applicable;
         elsif i = "5" then
            return yes_but_no_form;
        end if;
        Put_Line("Convert_Cose_Type: Unmatched string |" & i & "|" );
        return Cose_Type'First; -- never actually gets here; for compiler only
    end Convert_Cose_Type;



    function Pretty_Print( i : Crburg_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when very_common => return "Very common";
             when fairly_common => return "Fairly common";
             when not_very_common => return "Not very common";
             when not_at_all_common => return "Not at all common";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Crburg_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Crburg_Type( i : String ) return Crburg_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return very_common;
         elsif i = "2" then
            return fairly_common;
         elsif i = "3" then
            return not_very_common;
         elsif i = "4" then
            return not_at_all_common;
        end if;
        Put_Line("Convert_Crburg_Type: Unmatched string |" & i & "|" );
        return Crburg_Type'First; -- never actually gets here; for compiler only
    end Convert_Crburg_Type;



    function Pretty_Print( i : Crdark_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when very_safe => return "Very safe";
             when fairly_safe => return "Fairly safe";
             when a_bit_unsafe => return "A bit unsafe";
             when very_unsafe => return "Very unsafe";
             when never_go_out_after_dark => return "Never go out after dark";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Crdark_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Crdark_Type( i : String ) return Crdark_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return very_safe;
         elsif i = "2" then
            return fairly_safe;
         elsif i = "3" then
            return a_bit_unsafe;
         elsif i = "4" then
            return very_unsafe;
         elsif i = "5" then
            return never_go_out_after_dark;
        end if;
        Put_Line("Convert_Crdark_Type: Unmatched string |" & i & "|" );
        return Crdark_Type'First; -- never actually gets here; for compiler only
    end Convert_Crdark_Type;



    function Pretty_Print( i : Crworb_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when big_worry => return "Big worry";
             when bit_of_a_worry => return "Bit of a worry";
             when occassional_doubt => return "Occassional doubt";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Crworb_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Crworb_Type( i : String ) return Crworb_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return big_worry;
         elsif i = "2" then
            return bit_of_a_worry;
         elsif i = "3" then
            return occassional_doubt;
        end if;
        Put_Line("Convert_Crworb_Type: Unmatched string |" & i & "|" );
        return Crworb_Type'First; -- never actually gets here; for compiler only
    end Convert_Crworb_Type;



    function Pretty_Print( i : Debt_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when yes_but_refused_or_dk => return "Yes, but refused/DK";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when yes => return "Yes";
             when no => return "No";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Debt_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when yes_but_refused_or_dk => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Debt_Type( i : String ) return Debt_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-3" then
            return yes_but_refused_or_dk;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
        end if;
        Put_Line("Convert_Debt_Type: Unmatched string |" & i & "|" );
        return Debt_Type'First; -- never actually gets here; for compiler only
    end Convert_Debt_Type;



    function Pretty_Print( i : Debta_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when not_mentioned => return "Not mentioned";
             when hire_purchase => return "Hire Purchase";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Debta_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Debta_Type( i : String ) return Debta_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return hire_purchase;
        end if;
        Put_Line("Convert_Debta_Type: Unmatched string |" & i & "|" );
        return Debta_Type'First; -- never actually gets here; for compiler only
    end Convert_Debta_Type;



    function Pretty_Print( i : Debtb_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when not_mentioned => return "Not mentioned";
             when personal_loan => return "Personal loan";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Debtb_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Debtb_Type( i : String ) return Debtb_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return personal_loan;
         elsif i = "2" then
            return personal_loan;
        end if;
        Put_Line("Convert_Debtb_Type: Unmatched string |" & i & "|" );
        return Debtb_Type'First; -- never actually gets here; for compiler only
    end Convert_Debtb_Type;



    function Pretty_Print( i : Debtc_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when not_mentioned => return "Not mentioned";
             when credit_cards => return "Credit card(s)";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Debtc_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Debtc_Type( i : String ) return Debtc_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return credit_cards;
         elsif i = "3" then
            return credit_cards;
        end if;
        Put_Line("Convert_Debtc_Type: Unmatched string |" & i & "|" );
        return Debtc_Type'First; -- never actually gets here; for compiler only
    end Convert_Debtc_Type;



    function Pretty_Print( i : Debtd_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when not_mentioned => return "Not mentioned";
             when mail_order_pchase => return "Mail order p'chase";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Debtd_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Debtd_Type( i : String ) return Debtd_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return mail_order_pchase;
         elsif i = "4" then
            return mail_order_pchase;
        end if;
        Put_Line("Convert_Debtd_Type: Unmatched string |" & i & "|" );
        return Debtd_Type'First; -- never actually gets here; for compiler only
    end Convert_Debtd_Type;



    function Pretty_Print( i : Debte_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when not_mentioned => return "Not mentioned";
             when dss_social_fund => return "DSS social fund";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Debte_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Debte_Type( i : String ) return Debte_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return dss_social_fund;
         elsif i = "5" then
            return dss_social_fund;
        end if;
        Put_Line("Convert_Debte_Type: Unmatched string |" & i & "|" );
        return Debte_Type'First; -- never actually gets here; for compiler only
    end Convert_Debte_Type;



    function Pretty_Print( i : Debtf_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when not_mentioned => return "Not mentioned";
             when loan_from_indivdl => return "Loan from indivdl";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Debtf_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Debtf_Type( i : String ) return Debtf_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return loan_from_indivdl;
         elsif i = "6" then
            return loan_from_indivdl;
        end if;
        Put_Line("Convert_Debtf_Type: Unmatched string |" & i & "|" );
        return Debtf_Type'First; -- never actually gets here; for compiler only
    end Convert_Debtf_Type;



    function Pretty_Print( i : Debtg_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when not_mentioned => return "Not mentioned";
             when something_else => return "Something else";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Debtg_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Debtg_Type( i : String ) return Debtg_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return something_else;
         elsif i = "7" then
            return something_else;
        end if;
        Put_Line("Convert_Debtg_Type: Unmatched string |" & i & "|" );
        return Debtg_Type'First; -- never actually gets here; for compiler only
    end Convert_Debtg_Type;



    function Pretty_Print( i : Debth_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when overdrafts => return "Overdraft(s)";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Debth_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Debth_Type( i : String ) return Debth_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return overdrafts;
        end if;
        Put_Line("Convert_Debth_Type: Unmatched string |" & i & "|" );
        return Debth_Type'First; -- never actually gets here; for compiler only
    end Convert_Debth_Type;



    function Pretty_Print( i : Debti_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when student_loan => return "Student loan";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Debti_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Debti_Type( i : String ) return Debti_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return student_loan;
        end if;
        Put_Line("Convert_Debti_Type: Unmatched string |" & i & "|" );
        return Debti_Type'First; -- never actually gets here; for compiler only
    end Convert_Debti_Type;



    function Pretty_Print( i : Debtpn1_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Debtpn1_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Debtpn1_Type( i : String ) return Debtpn1_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
        end if;
        Put_Line("Convert_Debtpn1_Type: Unmatched string |" & i & "|" );
        return Debtpn1_Type'First; -- never actually gets here; for compiler only
    end Convert_Debtpn1_Type;



    function Pretty_Print( i : Debtpn2_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not Mentioned";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Debtpn2_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Debtpn2_Type( i : String ) return Debtpn2_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
        end if;
        Put_Line("Convert_Debtpn2_Type: Unmatched string |" & i & "|" );
        return Debtpn2_Type'First; -- never actually gets here; for compiler only
    end Convert_Debtpn2_Type;



    function Pretty_Print( i : Debtsj_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when sole_only => return "Sole only";
             when joint_only => return "Joint only";
             when both_sole_and_joint => return "Both sole and joint";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Debtsj_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Debtsj_Type( i : String ) return Debtsj_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return sole_only;
         elsif i = "2" then
            return joint_only;
         elsif i = "3" then
            return both_sole_and_joint;
        end if;
        Put_Line("Convert_Debtsj_Type: Unmatched string |" & i & "|" );
        return Debtsj_Type'First; -- never actually gets here; for compiler only
    end Convert_Debtsj_Type;



    function Pretty_Print( i : Depchl_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when yes => return "Yes";
             when no => return "No";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Depchl_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Depchl_Type( i : String ) return Depchl_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
        end if;
        Put_Line("Convert_Depchl_Type: Unmatched string |" & i & "|" );
        return Depchl_Type'First; -- never actually gets here; for compiler only
    end Convert_Depchl_Type;



    function Pretty_Print( i : Dfwld1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when more_leisure => return "More leisure";
             when technological_improvements_beyond_hhold => return "Technological improvements beyond hhold";
             when tech_improvements_life_easier_or_better => return "Tech. improvements: life easier/better";
             when medical_or_health_improvements => return "Medical/health improvements";
             when improvement_in_education => return "Improvement in education";
             when more_jobs_or_working_conditions_easier => return "More jobs/working conditions easier";
             when more_economic_opportunities => return "More economic opportunities";
             when political_improvements => return "Political improvements";
             when increased_freedom => return "Increased freedom";
             when peace_or_absence_of_war => return "Peace/absence of war";
             when improved_environmental_awareness => return "Improved environmental awareness";
             when other_positve_reasons => return "Other positve reasons";
             when more_opportunities => return "More opportunities";
             when fewer_opportunities => return "Fewer opportunities";
             when kids_grow_up_too_fast => return "Kids grow up too fast";
             when lack_of_discipline_or_respect => return "Lack of discipline/respect";
             when too_individualistic => return "Too individualistic";
             when too_materialistic => return "Too materialistic";
             when life_too_easy => return "Life too easy";
             when more_pressure => return "More pressure";
             when children_less_active => return "Children less active";
             when more_family_breakdown => return "More family breakdown";
             when parents_working_or_absent_from_home => return "Parent's working/absent from home";
             when negative_media_influence => return "Negative media influence";
             when society_less_safe => return "Society less safe";
             when increased_crime_or_fear_of_crime => return "Increased crime/fear of crime";
             when increased_use_of_drugs_or_alcohol => return "Increased use of drugs/alcohol";
             when increased_sex_or_promiscuity_or_pornography => return "Increased sex/promiscuity/pornography";
             when loss_of_religion_or_moral_breakdown => return "Loss of religion/moral breakdown";
             when loss_of_community => return "Loss of community";
             when increased_unemployment => return "Increased unemployment";
             when other_negative_economic_effects => return "Other negative economic effects";
             when decline_in_welfare_state => return "Decline in welfare state";
             when decline_in_education => return "Decline in education";
             when increased_health_risks => return "Increased health risks";
             when negative_effects_of_technological_change => return "Negative effects of technological change";
             when political_problems => return "Political problems";
             when ethnic_diversity => return "Ethnic diversity";
             when urbanisation_or_loss_of_countryside => return "Urbanisation/loss of countryside";
             when environmental_problems => return "Environmental problems";
             when war_or_conflicts => return "War/conflicts";
             when terrorism => return "Terrorism";
             when life_harder_nes => return "Life harder - n.e.s.";
             when other_negative_effects => return "Other negative effects";
             when neutral_technological_change => return "Neutral: technological change";
             when neutral_life_has_faster_pace => return "Neutral: life has faster pace";
             when neutral_individual_level => return "Neutral: individual level";
             when neutral_family_or_hhold_level => return "Neutral: family/hhold level";
             when neutral_societal_level => return "Neutral: societal level";
             when neutral_global_level => return "Neutral: global level";
             when neutral_other => return "Neutral: other";
             when not_codable_or_missing => return "Not codable/missing";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Dfwld1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Dfwld1_Type( i : String ) return Dfwld1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "98" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return more_leisure;
         elsif i = "11" then
            return technological_improvements_beyond_hhold;
         elsif i = "12" then
            return tech_improvements_life_easier_or_better;
         elsif i = "13" then
            return medical_or_health_improvements;
         elsif i = "14" then
            return improvement_in_education;
         elsif i = "15" then
            return more_jobs_or_working_conditions_easier;
         elsif i = "16" then
            return more_economic_opportunities;
         elsif i = "17" then
            return political_improvements;
         elsif i = "2" then
            return increased_freedom;
         elsif i = "21" then
            return peace_or_absence_of_war;
         elsif i = "22" then
            return improved_environmental_awareness;
         elsif i = "29" then
            return other_positve_reasons;
         elsif i = "3" then
            return more_opportunities;
         elsif i = "30" then
            return fewer_opportunities;
         elsif i = "31" then
            return kids_grow_up_too_fast;
         elsif i = "32" then
            return lack_of_discipline_or_respect;
         elsif i = "33" then
            return too_individualistic;
         elsif i = "34" then
            return too_materialistic;
         elsif i = "35" then
            return life_too_easy;
         elsif i = "36" then
            return more_pressure;
         elsif i = "37" then
            return children_less_active;
         elsif i = "38" then
            return more_family_breakdown;
         elsif i = "39" then
            return parents_working_or_absent_from_home;
         elsif i = "40" then
            return negative_media_influence;
         elsif i = "41" then
            return society_less_safe;
         elsif i = "42" then
            return increased_crime_or_fear_of_crime;
         elsif i = "43" then
            return increased_use_of_drugs_or_alcohol;
         elsif i = "44" then
            return increased_sex_or_promiscuity_or_pornography;
         elsif i = "45" then
            return loss_of_religion_or_moral_breakdown;
         elsif i = "46" then
            return loss_of_community;
         elsif i = "47" then
            return increased_unemployment;
         elsif i = "48" then
            return other_negative_economic_effects;
         elsif i = "49" then
            return decline_in_welfare_state;
         elsif i = "50" then
            return decline_in_education;
         elsif i = "51" then
            return increased_health_risks;
         elsif i = "52" then
            return negative_effects_of_technological_change;
         elsif i = "53" then
            return political_problems;
         elsif i = "54" then
            return ethnic_diversity;
         elsif i = "60" then
            return urbanisation_or_loss_of_countryside;
         elsif i = "61" then
            return environmental_problems;
         elsif i = "62" then
            return war_or_conflicts;
         elsif i = "63" then
            return terrorism;
         elsif i = "77" then
            return life_harder_nes;
         elsif i = "79" then
            return other_negative_effects;
         elsif i = "81" then
            return neutral_technological_change;
         elsif i = "82" then
            return neutral_life_has_faster_pace;
         elsif i = "83" then
            return neutral_individual_level;
         elsif i = "84" then
            return neutral_family_or_hhold_level;
         elsif i = "85" then
            return neutral_societal_level;
         elsif i = "86" then
            return neutral_global_level;
         elsif i = "89" then
            return neutral_other;
         elsif i = "99" then
            return not_codable_or_missing;
        end if;
        Put_Line("Convert_Dfwld1_Type: Unmatched string |" & i & "|" );
        return Dfwld1_Type'First; -- never actually gets here; for compiler only
    end Convert_Dfwld1_Type;



    function Pretty_Print( i : Dfwld2_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when not_mentioned => return "Not mentioned";
             when more_leisure => return "More leisure";
             when technological_improvements_beyond_hhold => return "Technological improvements beyond hhold";
             when tech_improvements_life_easier_or_better => return "Tech. improvements: life easier/better";
             when medical_or_health_improvements => return "Medical/health improvements";
             when improvement_in_education => return "Improvement in education";
             when more_jobs_or_working_conditions_easier => return "More jobs/working conditions easier";
             when more_economic_opportunities => return "More economic opportunities";
             when political_improvements => return "Political improvements";
             when increased_freedom => return "Increased freedom";
             when peace_or_absence_of_war => return "Peace/absence of war";
             when improved_environmental_awareness => return "Improved environmental awareness";
             when other_positve_reasons => return "Other positve reasons";
             when more_opportunities => return "More opportunities";
             when fewer_opportunities => return "Fewer opportunities";
             when kids_grow_up_too_fast => return "Kids grow up too fast";
             when lack_of_discipline_or_respect => return "Lack of discipline/respect";
             when too_individualistic => return "Too individualistic";
             when too_materialistic => return "Too materialistic";
             when life_too_easy => return "Life too easy";
             when more_pressure => return "More pressure";
             when children_less_active => return "Children less active";
             when more_family_breakdown => return "More family breakdown";
             when parents_working_or_absent_from_home => return "Parent's working/absent from home";
             when negative_media_influence => return "Negative media influence";
             when society_less_safe => return "Society less safe";
             when increased_crime_or_fear_of_crime => return "Increased crime/fear of crime";
             when increased_use_of_drugs_or_alcohol => return "Increased use of drugs/alcohol";
             when increased_sex_or_promiscuity_or_pornography => return "Increased sex/promiscuity/pornography";
             when loss_of_religion_or_moral_breakdown => return "Loss of religion/moral breakdown";
             when loss_of_community => return "Loss of community";
             when increased_unemployment => return "Increased unemployment";
             when other_negative_economic_effects => return "Other negative economic effects";
             when decline_in_welfare_state => return "Decline in welfare state";
             when decline_in_education => return "Decline in education";
             when increased_health_risks => return "Increased health risks";
             when negative_effects_of_technological_change => return "Negative effects of technological change";
             when political_problems => return "Political problems";
             when ethnic_diversity => return "Ethnic diversity";
             when urbanisation_or_loss_of_countryside => return "Urbanisation/loss of countryside";
             when environmental_problems => return "Environmental problems";
             when war_or_conflicts => return "War/conflicts";
             when terrorism => return "Terrorism";
             when life_harder_nes => return "Life harder - n.e.s.";
             when other_negative_effects => return "Other negative effects";
             when neutral_technological_change => return "Neutral: technological change";
             when neutral_life_has_faster_pace => return "Neutral: life has faster pace";
             when neutral_individual_level => return "Neutral: individual level";
             when neutral_family_or_hhold_level => return "Neutral: family/hhold level";
             when neutral_societal_level => return "Neutral: societal level";
             when neutral_global_level => return "Neutral: global level";
             when neutral_other => return "Neutral: other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Dfwld2_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Dfwld2_Type( i : String ) return Dfwld2_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return more_leisure;
         elsif i = "11" then
            return technological_improvements_beyond_hhold;
         elsif i = "12" then
            return tech_improvements_life_easier_or_better;
         elsif i = "13" then
            return medical_or_health_improvements;
         elsif i = "14" then
            return improvement_in_education;
         elsif i = "15" then
            return more_jobs_or_working_conditions_easier;
         elsif i = "16" then
            return more_economic_opportunities;
         elsif i = "17" then
            return political_improvements;
         elsif i = "2" then
            return increased_freedom;
         elsif i = "21" then
            return peace_or_absence_of_war;
         elsif i = "22" then
            return improved_environmental_awareness;
         elsif i = "29" then
            return other_positve_reasons;
         elsif i = "3" then
            return more_opportunities;
         elsif i = "30" then
            return fewer_opportunities;
         elsif i = "31" then
            return kids_grow_up_too_fast;
         elsif i = "32" then
            return lack_of_discipline_or_respect;
         elsif i = "33" then
            return too_individualistic;
         elsif i = "34" then
            return too_materialistic;
         elsif i = "35" then
            return life_too_easy;
         elsif i = "36" then
            return more_pressure;
         elsif i = "37" then
            return children_less_active;
         elsif i = "38" then
            return more_family_breakdown;
         elsif i = "39" then
            return parents_working_or_absent_from_home;
         elsif i = "40" then
            return negative_media_influence;
         elsif i = "41" then
            return society_less_safe;
         elsif i = "42" then
            return increased_crime_or_fear_of_crime;
         elsif i = "43" then
            return increased_use_of_drugs_or_alcohol;
         elsif i = "44" then
            return increased_sex_or_promiscuity_or_pornography;
         elsif i = "45" then
            return loss_of_religion_or_moral_breakdown;
         elsif i = "46" then
            return loss_of_community;
         elsif i = "47" then
            return increased_unemployment;
         elsif i = "48" then
            return other_negative_economic_effects;
         elsif i = "49" then
            return decline_in_welfare_state;
         elsif i = "50" then
            return decline_in_education;
         elsif i = "51" then
            return increased_health_risks;
         elsif i = "52" then
            return negative_effects_of_technological_change;
         elsif i = "53" then
            return political_problems;
         elsif i = "54" then
            return ethnic_diversity;
         elsif i = "60" then
            return urbanisation_or_loss_of_countryside;
         elsif i = "61" then
            return environmental_problems;
         elsif i = "62" then
            return war_or_conflicts;
         elsif i = "63" then
            return terrorism;
         elsif i = "77" then
            return life_harder_nes;
         elsif i = "79" then
            return other_negative_effects;
         elsif i = "81" then
            return neutral_technological_change;
         elsif i = "82" then
            return neutral_life_has_faster_pace;
         elsif i = "83" then
            return neutral_individual_level;
         elsif i = "84" then
            return neutral_family_or_hhold_level;
         elsif i = "85" then
            return neutral_societal_level;
         elsif i = "86" then
            return neutral_global_level;
         elsif i = "89" then
            return neutral_other;
        end if;
        Put_Line("Convert_Dfwld2_Type: Unmatched string |" & i & "|" );
        return Dfwld2_Type'First; -- never actually gets here; for compiler only
    end Convert_Dfwld2_Type;



    function Pretty_Print( i : Distmov_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing => return "Missing";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Distmov_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Distmov_Type( i : String ) return Distmov_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing;
        end if;
        Put_Line("Convert_Distmov_Type: Unmatched string |" & i & "|" );
        return Distmov_Type'First; -- never actually gets here; for compiler only
    end Convert_Distmov_Type;



    function Pretty_Print( i : Divfho_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when all_eligible_hh_intv => return "All eligible HH intv";
             when interviews_plus_proxies => return "Interviews + proxies";
             when interviews_plus_refusal => return "Interviews + refusal";
             when pxy_at_original_addr => return "Pxy at original addr";
             when phone_pxy_intvw_only => return "Phone pxy intvw only";
             when youth_interview_only => return "Youth Interview only";
             when docs_missing_or_unus => return "Docs missing or unus";
             when address_not_found => return "Address not found";
             when no_hh_member_contact => return "No HH member contact";
             when refus_to_rsrch_cntre => return "Refus to Rsrch Cntre";
             when refusal_to_intviewer => return "Refusal to intviewer";
             when language_problems => return "Language problems";
             when no_intv_age_or_health => return "No intv.: Age/health";
             when moved_prev_wave_add => return "Moved prev wave add";
             when out_scope_institutn => return "Out scope-institut'n";
             when moved_out_of_scope => return "Moved out of scope";
             when whole_hh_deceased => return "Whole HH deceased";
             when no_psms_resident => return "No PSM's resident";
             when adamant_refusal => return "Adamant refusal";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Divfho_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Divfho_Type( i : String ) return Divfho_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "10" then
            return all_eligible_hh_intv;
         elsif i = "11" then
            return interviews_plus_proxies;
         elsif i = "12" then
            return interviews_plus_refusal;
         elsif i = "15" then
            return pxy_at_original_addr;
         elsif i = "16" then
            return phone_pxy_intvw_only;
         elsif i = "17" then
            return youth_interview_only;
         elsif i = "39" then
            return docs_missing_or_unus;
         elsif i = "50" then
            return address_not_found;
         elsif i = "51" then
            return no_hh_member_contact;
         elsif i = "60" then
            return refus_to_rsrch_cntre;
         elsif i = "61" then
            return refusal_to_intviewer;
         elsif i = "62" then
            return language_problems;
         elsif i = "63" then
            return no_intv_age_or_health;
         elsif i = "70" then
            return moved_prev_wave_add;
         elsif i = "80" then
            return out_scope_institutn;
         elsif i = "81" then
            return moved_out_of_scope;
         elsif i = "90" then
            return whole_hh_deceased;
         elsif i = "91" then
            return no_psms_resident;
         elsif i = "92" then
            return adamant_refusal;
        end if;
        Put_Line("Convert_Divfho_Type: Unmatched string |" & i & "|" );
        return Divfho_Type'First; -- never actually gets here; for compiler only
    end Convert_Divfho_Type;



    function Pretty_Print( i : Divfio_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when full_interview => return "Full interview";
             when refusal => return "Refusal";
             when other_non_intvw => return "Other non-intvw";
             when moved => return "Moved";
             when proxy_interview => return "Proxy interview";
             when child_under_16 => return "Child under 16";
             when youth_interview => return "Youth Interview";
             when youth_refusal => return "Youth: Refusal";
             when youth_oth_non_int => return "Youth: Oth non-int";
             when child_under_11 => return "Child under 11";
             when telephone_intvw => return "Telephone intvw";
             when refusal_or_non_int_hh => return "Refusal/non-int HH";
             when non_int_or_non_int_hh => return "Non-int/non-int HH";
             when moved_or_non_int_hh => return "Moved/non-int HH";
             when child_in_non_int_hh => return "Child in non-int HH";
             when youth_ref_or_no_int_hh => return "Youth: Ref/no-int HH";
             when youth_oth_or_no_int_hh => return "Youth: Oth/no-int HH";
             when child_u_11_no_int_hh => return "Child u 11 no-int HH";
             when refusal_or_non_cont_hh => return "Refusal/non-cont HH";
             when lang_prob_or_nc_hh => return "Lang prob/NC HH";
             when age_infirm_or_nc_hh => return "Age, infirm/NC HH";
             when non_cont_or_nc_hh => return "Non-cont/NC HH";
             when out_of_scope_or_nc_hh => return "Out of scope/NC HH";
             when institutnsd_or_nc_hh => return "Institutnsd/NC HH";
             when untraced_mover => return "Untraced mover";
             when child_ref_or_nc_hh => return "Child ref/NC HH";
             when chd_lang_prob_or_nc_hh => return "Chd lang prob/NC HH";
             when chd_infirm_or_nc_hh => return "Chd infirm/NC HH";
             when chd_non_cont_or_nc_hh => return "Chd non-cont/NC HH";
             when chd_o_o_scope_or_nc_hh => return "Chd o-o-scope/NC HH";
             when chd_instit_or_nc_hh => return "Chd instit/NC HH";
             when chd_untraced_mover => return "Chd untraced mover";
             when no_one_elig_in_hh => return "No one elig in HH";
             when prev_wave_adamant_refusl => return "Prev wave adamant refusl";
             when dead => return "Dead";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Divfio_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Divfio_Type( i : String ) return Divfio_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return full_interview;
         elsif i = "10" then
            return refusal;
         elsif i = "11" then
            return other_non_intvw;
         elsif i = "12" then
            return moved;
         elsif i = "2" then
            return proxy_interview;
         elsif i = "20" then
            return child_under_16;
         elsif i = "21" then
            return youth_interview;
         elsif i = "22" then
            return youth_refusal;
         elsif i = "23" then
            return youth_oth_non_int;
         elsif i = "24" then
            return child_under_11;
         elsif i = "3" then
            return telephone_intvw;
         elsif i = "30" then
            return refusal_or_non_int_hh;
         elsif i = "31" then
            return non_int_or_non_int_hh;
         elsif i = "32" then
            return moved_or_non_int_hh;
         elsif i = "40" then
            return child_in_non_int_hh;
         elsif i = "41" then
            return youth_ref_or_no_int_hh;
         elsif i = "42" then
            return youth_oth_or_no_int_hh;
         elsif i = "43" then
            return child_u_11_no_int_hh;
         elsif i = "50" then
            return refusal_or_non_cont_hh;
         elsif i = "51" then
            return lang_prob_or_nc_hh;
         elsif i = "52" then
            return age_infirm_or_nc_hh;
         elsif i = "53" then
            return non_cont_or_nc_hh;
         elsif i = "54" then
            return out_of_scope_or_nc_hh;
         elsif i = "55" then
            return institutnsd_or_nc_hh;
         elsif i = "56" then
            return untraced_mover;
         elsif i = "60" then
            return child_ref_or_nc_hh;
         elsif i = "61" then
            return chd_lang_prob_or_nc_hh;
         elsif i = "62" then
            return chd_infirm_or_nc_hh;
         elsif i = "63" then
            return chd_non_cont_or_nc_hh;
         elsif i = "64" then
            return chd_o_o_scope_or_nc_hh;
         elsif i = "65" then
            return chd_instit_or_nc_hh;
         elsif i = "66" then
            return chd_untraced_mover;
         elsif i = "80" then
            return no_one_elig_in_hh;
         elsif i = "81" then
            return prev_wave_adamant_refusl;
         elsif i = "99" then
            return dead;
        end if;
        Put_Line("Convert_Divfio_Type: Unmatched string |" & i & "|" );
        return Divfio_Type'First; -- never actually gets here; for compiler only
    end Convert_Divfio_Type;



    function Pretty_Print( i : Doid_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when missing_or_wild => return "Missing or wild";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Doid_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Doid_Type( i : String ) return Doid_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-9" then
            return missing_or_wild;
        end if;
        Put_Line("Convert_Doid_Type: Unmatched string |" & i & "|" );
        return Doid_Type'First; -- never actually gets here; for compiler only
    end Convert_Doid_Type;



    function Pretty_Print( i : Doim_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when january => return "January";
             when october => return "October";
             when november => return "November";
             when december => return "December";
             when february => return "February";
             when march => return "March";
             when april => return "April";
             when may => return "May";
             when june => return "June";
             when july => return "July";
             when august => return "August";
             when september => return "September";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Doim_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Doim_Type( i : String ) return Doim_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return january;
         elsif i = "10" then
            return october;
         elsif i = "11" then
            return november;
         elsif i = "12" then
            return december;
         elsif i = "2" then
            return february;
         elsif i = "3" then
            return march;
         elsif i = "4" then
            return april;
         elsif i = "5" then
            return may;
         elsif i = "6" then
            return june;
         elsif i = "7" then
            return july;
         elsif i = "8" then
            return august;
         elsif i = "9" then
            return september;
        end if;
        Put_Line("Convert_Doim_Type: Unmatched string |" & i & "|" );
        return Doim_Type'First; -- never actually gets here; for compiler only
    end Convert_Doim_Type;



    function Pretty_Print( i : Doiy_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when s_1992 => return "1992";
             when s_1993 => return "1993";
             when s_1994 => return "1994";
             when s_1995 => return "1995";
             when s_1996 => return "1996";
             when s_1997 => return "1997";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Doiy_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Doiy_Type( i : String ) return Doiy_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "92" then
            return s_1992;
         elsif i = "93" then
            return s_1993;
         elsif i = "94" then
            return s_1994;
         elsif i = "95" then
            return s_1995;
         elsif i = "96" then
            return s_1996;
         elsif i = "97" then
            return s_1997;
        end if;
        Put_Line("Convert_Doiy_Type: Unmatched string |" & i & "|" );
        return Doiy_Type'First; -- never actually gets here; for compiler only
    end Convert_Doiy_Type;



    function Pretty_Print( i : Doiy4_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when s_1994 => return "1994";
             when s_1995 => return "1995";
             when s_1996 => return "1996";
             when s_1997 => return "1997";
             when s_1998 => return "1998";
             when s_1999 => return "1999";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Doiy4_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Doiy4_Type( i : String ) return Doiy4_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "93" then
            return s_1994;
         elsif i = "94" then
            return s_1994;
         elsif i = "95" then
            return s_1995;
         elsif i = "96" then
            return s_1996;
         elsif i = "97" then
            return s_1997;
         elsif i = "98" then
            return s_1998;
         elsif i = "99" then
            return s_1999;
        end if;
        Put_Line("Convert_Doiy4_Type: Unmatched string |" & i & "|" );
        return Doiy4_Type'First; -- never actually gets here; for compiler only
    end Convert_Doiy4_Type;



    function Pretty_Print( i : Eaage_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when male_16_64 => return "Male 16-64";
             when female_16_59 => return "Female 16-59";
             when other => return "Others";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Eaage_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Eaage_Type( i : String ) return Eaage_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return male_16_64;
         elsif i = "2" then
            return female_16_59;
         elsif i = "3" then
            return other;
        end if;
        Put_Line("Convert_Eaage_Type: Unmatched string |" & i & "|" );
        return Eaage_Type'First; -- never actually gets here; for compiler only
    end Convert_Eaage_Type;



    function Pretty_Print( i : Edasp_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when gcses => return "GCSEs";
             when as_levels => return "AS levels";
             when a_levels => return "A levels";
             when nvq_or_gnvq => return "NVQ/GNVQ";
             when standard_grades => return "Standard Grades";
             when highers => return "Highers";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Edasp_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Edasp_Type( i : String ) return Edasp_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return gcses;
         elsif i = "2" then
            return as_levels;
         elsif i = "3" then
            return a_levels;
         elsif i = "4" then
            return nvq_or_gnvq;
         elsif i = "5" then
            return standard_grades;
         elsif i = "6" then
            return highers;
         elsif i = "7" then
            return other;
        end if;
        Put_Line("Convert_Edasp_Type: Unmatched string |" & i & "|" );
        return Edasp_Type'First; -- never actually gets here; for compiler only
    end Convert_Edasp_Type;



    function Pretty_Print( i : Edbgm1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when january => return "January";
             when october => return "October";
             when november => return "November";
             when december => return "December";
             when february => return "February";
             when march => return "March";
             when april => return "April";
             when may => return "May";
             when june => return "June";
             when july => return "July";
             when august => return "August";
             when september => return "September";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Edbgm1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Edbgm1_Type( i : String ) return Edbgm1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return january;
         elsif i = "10" then
            return october;
         elsif i = "11" then
            return november;
         elsif i = "12" then
            return december;
         elsif i = "2" then
            return february;
         elsif i = "3" then
            return march;
         elsif i = "4" then
            return april;
         elsif i = "5" then
            return may;
         elsif i = "6" then
            return june;
         elsif i = "7" then
            return july;
         elsif i = "8" then
            return august;
         elsif i = "9" then
            return september;
        end if;
        Put_Line("Convert_Edbgm1_Type: Unmatched string |" & i & "|" );
        return Edbgm1_Type'First; -- never actually gets here; for compiler only
    end Convert_Edbgm1_Type;



    function Pretty_Print( i : Edbgm3_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when january => return "January";
             when october => return "October";
             when november => return "November";
             when december => return "December";
             when february => return "February";
             when march => return "March";
             when april => return "April";
             when may => return "May";
             when june => return "June";
             when july => return "July";
             when august => return "August";
             when september => return "September";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Edbgm3_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Edbgm3_Type( i : String ) return Edbgm3_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return january;
         elsif i = "10" then
            return october;
         elsif i = "11" then
            return november;
         elsif i = "12" then
            return december;
         elsif i = "2" then
            return february;
         elsif i = "3" then
            return march;
         elsif i = "4" then
            return april;
         elsif i = "5" then
            return may;
         elsif i = "6" then
            return june;
         elsif i = "7" then
            return july;
         elsif i = "8" then
            return august;
         elsif i = "9" then
            return september;
        end if;
        Put_Line("Convert_Edbgm3_Type: Unmatched string |" & i & "|" );
        return Edbgm3_Type'First; -- never actually gets here; for compiler only
    end Convert_Edbgm3_Type;



    function Pretty_Print( i : Edbgy3_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Edbgy3_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Edbgy3_Type( i : String ) return Edbgy3_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
        end if;
        Put_Line("Convert_Edbgy3_Type: Unmatched string |" & i & "|" );
        return Edbgy3_Type'First; -- never actually gets here; for compiler only
    end Convert_Edbgy3_Type;



    function Pretty_Print( i : Edblyr3_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when yes => return "Yes";
             when no => return "No";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Edblyr3_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Edblyr3_Type( i : String ) return Edblyr3_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
        end if;
        Put_Line("Convert_Edblyr3_Type: Unmatched string |" & i & "|" );
        return Edblyr3_Type'First; -- never actually gets here; for compiler only
    end Convert_Edblyr3_Type;



    function Pretty_Print( i : Edendm_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_left => return "Not Left";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when january => return "January";
             when october => return "October";
             when november => return "November";
             when december => return "December";
             when february => return "February";
             when march => return "March";
             when april => return "April";
             when may => return "May";
             when june => return "June";
             when july => return "July";
             when august => return "August";
             when september => return "September";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Edendm_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_left => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Edendm_Type( i : String ) return Edendm_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-3" then
            return not_left;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return january;
         elsif i = "10" then
            return october;
         elsif i = "11" then
            return november;
         elsif i = "12" then
            return december;
         elsif i = "2" then
            return february;
         elsif i = "3" then
            return march;
         elsif i = "4" then
            return april;
         elsif i = "5" then
            return may;
         elsif i = "6" then
            return june;
         elsif i = "7" then
            return july;
         elsif i = "8" then
            return august;
         elsif i = "9" then
            return september;
        end if;
        Put_Line("Convert_Edendm_Type: Unmatched string |" & i & "|" );
        return Edendm_Type'First; -- never actually gets here; for compiler only
    end Convert_Edendm_Type;



    function Pretty_Print( i : Edendy_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_left => return "Not Left";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when s_1991 => return "1991";
             when s_1992 => return "1992";
             when s_1993 => return "1993";
             when s_1994 => return "1994";
             when s_1995 => return "1995";
             when s_1996 => return "1996";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Edendy_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_left => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Edendy_Type( i : String ) return Edendy_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-3" then
            return not_left;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "91" then
            return s_1991;
         elsif i = "92" then
            return s_1992;
         elsif i = "93" then
            return s_1993;
         elsif i = "94" then
            return s_1994;
         elsif i = "95" then
            return s_1995;
         elsif i = "96" then
            return s_1996;
        end if;
        Put_Line("Convert_Edendy_Type: Unmatched string |" & i & "|" );
        return Edendy_Type'First; -- never actually gets here; for compiler only
    end Convert_Edendy_Type;



    function Pretty_Print( i : Edendy4_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_left => return "Not left";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Edendy4_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_left => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Edendy4_Type( i : String ) return Edendy4_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-3" then
            return not_left;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
        end if;
        Put_Line("Convert_Edendy4_Type: Unmatched string |" & i & "|" );
        return Edendy4_Type'First; -- never actually gets here; for compiler only
    end Convert_Edendy4_Type;



    function Pretty_Print( i : Edenne1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when yes => return "Yes";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Edenne1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Edenne1_Type( i : String ) return Edenne1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return yes;
        end if;
        Put_Line("Convert_Edenne1_Type: Unmatched string |" & i & "|" );
        return Edenne1_Type'First; -- never actually gets here; for compiler only
    end Convert_Edenne1_Type;



    function Pretty_Print( i : Edenne2_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when not_ended => return "Not ended";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Edenne2_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Edenne2_Type( i : String ) return Edenne2_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return not_ended;
        end if;
        Put_Line("Convert_Edenne2_Type: Unmatched string |" & i & "|" );
        return Edenne2_Type'First; -- never actually gets here; for compiler only
    end Convert_Edenne2_Type;



    function Pretty_Print( i : Edenne3_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when not_ended => return "Not ended";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Edenne3_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Edenne3_Type( i : String ) return Edenne3_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return not_ended;
        end if;
        Put_Line("Convert_Edenne3_Type: Unmatched string |" & i & "|" );
        return Edenne3_Type'First; -- never actually gets here; for compiler only
    end Convert_Edenne3_Type;



    function Pretty_Print( i : Yes_Or_Missing_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when not_mentioned => return "Not mentioned";
             when yes => return "Yes";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Yes_Or_Missing_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Yes_Or_Missing_Type( i : String ) return Yes_Or_Missing_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return yes;
        end if;
        Put_Line("Convert_Yes_Or_Missing_Type: Unmatched string |" & i & "|" );
        return Yes_Or_Missing_Type'First; -- never actually gets here; for compiler only
    end Convert_Yes_Or_Missing_Type;



    function Pretty_Print( i : Ednewp1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when hours => return "Hours";
             when days => return "Days";
             when weeks => return "Weeks";
             when other => return "Other";
             when months => return "Months";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ednewp1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ednewp1_Type( i : String ) return Ednewp1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return hours;
         elsif i = "2" then
            return days;
         elsif i = "3" then
            return weeks;
         elsif i = "4" then
            return other;
         elsif i = "5" then
            return months;
        end if;
        Put_Line("Convert_Ednewp1_Type: Unmatched string |" & i & "|" );
        return Ednewp1_Type'First; -- never actually gets here; for compiler only
    end Convert_Ednewp1_Type;



    function Pretty_Print( i : Ednewp2_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ednewp2_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ednewp2_Type( i : String ) return Ednewp2_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
        end if;
        Put_Line("Convert_Ednewp2_Type: Unmatched string |" & i & "|" );
        return Ednewp2_Type'First; -- never actually gets here; for compiler only
    end Convert_Ednewp2_Type;



    function Pretty_Print( i : Edoql1_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when clerical_or_commercial => return "Clerical/commercial";
             when nvq_or_svq_level_4 => return "NVQ/SVQ level 4";
             when university_diploma => return "University diploma";
             when uni_or_cnaa_degree => return "Uni/CNAA degree";
             when univ_higher_degree => return "Univ Higher degree";
             when other_qualifications => return "Other qualifications";
             when city_and_guilds_pti => return "City & Guilds Pt.I";
             when city_and_guilds_ptii => return "City & Guilds Pt.II";
             when city_and_guilds_ptiii => return "City & Guilds Pt.III";
             when ond_or_btec_national => return "OND/BTEC national";
             when hnd_or_btec_higher => return "HND/BTEC higher";
             when nvq_or_svq_level_1 => return "NVQ/SVQ level 1";
             when nvq_or_svq_level_2 => return "NVQ/SVQ level 2";
             when nvq_or_svq_level_3 => return "NVQ/SVQ level 3";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Edoql1_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Edoql1_Type( i : String ) return Edoql1_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return clerical_or_commercial;
         elsif i = "10" then
            return nvq_or_svq_level_4;
         elsif i = "11" then
            return university_diploma;
         elsif i = "12" then
            return uni_or_cnaa_degree;
         elsif i = "13" then
            return univ_higher_degree;
         elsif i = "14" then
            return other_qualifications;
         elsif i = "2" then
            return city_and_guilds_pti;
         elsif i = "3" then
            return city_and_guilds_ptii;
         elsif i = "4" then
            return city_and_guilds_ptiii;
         elsif i = "5" then
            return ond_or_btec_national;
         elsif i = "6" then
            return hnd_or_btec_higher;
         elsif i = "7" then
            return nvq_or_svq_level_1;
         elsif i = "8" then
            return nvq_or_svq_level_2;
         elsif i = "9" then
            return nvq_or_svq_level_3;
        end if;
        Put_Line("Convert_Edoql1_Type: Unmatched string |" & i & "|" );
        return Edoql1_Type'First; -- never actually gets here; for compiler only
    end Convert_Edoql1_Type;



    function Pretty_Print( i : Edoqln1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when none => return "None";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Edoqln1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Edoqln1_Type( i : String ) return Edoqln1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return none;
        end if;
        Put_Line("Convert_Edoqln1_Type: Unmatched string |" & i & "|" );
        return Edoqln1_Type'First; -- never actually gets here; for compiler only
    end Convert_Edoqln1_Type;



    function Pretty_Print( i : Edoqln3_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when none => return "None";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Edoqln3_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Edoqln3_Type( i : String ) return Edoqln3_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return none;
        end if;
        Put_Line("Convert_Edoqln3_Type: Unmatched string |" & i & "|" );
        return Edoqln3_Type'First; -- never actually gets here; for compiler only
    end Convert_Edoqln3_Type;



    function Pretty_Print( i : Edqual1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when yes => return "Yes";
             when no_or_not_yet_or_waiting => return "No/not yet/waiting";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Edqual1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Edqual1_Type( i : String ) return Edqual1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no_or_not_yet_or_waiting;
        end if;
        Put_Line("Convert_Edqual1_Type: Unmatched string |" & i & "|" );
        return Edqual1_Type'First; -- never actually gets here; for compiler only
    end Convert_Edqual1_Type;



    function Pretty_Print( i : Edqual3_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when yes => return "Yes";
             when no_or_not_yet_or_waiting => return "No/not yet/waiting";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Edqual3_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Edqual3_Type( i : String ) return Edqual3_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no_or_not_yet_or_waiting;
        end if;
        Put_Line("Convert_Edqual3_Type: Unmatched string |" & i & "|" );
        return Edqual3_Type'First; -- never actually gets here; for compiler only
    end Convert_Edqual3_Type;



    function Pretty_Print( i : Edtype_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when comprehensive => return "Comprehensive";
             when polytechnic => return "Polytechnic";
             when university => return "University";
             when grammar_not_fee_paying => return "Grammar, not fee-paying";
             when fee_paying_grammar => return "Fee paying Grammar";
             when sixth_form_college => return "Sixth form college";
             when public_or_other_privt => return "Public or other privt";
             when other_type_of_school => return "Other type of school";
             when nursing_school_etc => return "Nursing school etc";
             when college_of_f_educ => return "College of f educ";
             when other_trng_establmnt => return "Other trng establmnt";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Edtype_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Edtype_Type( i : String ) return Edtype_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return comprehensive;
         elsif i = "10" then
            return polytechnic;
         elsif i = "11" then
            return university;
         elsif i = "2" then
            return grammar_not_fee_paying;
         elsif i = "3" then
            return fee_paying_grammar;
         elsif i = "4" then
            return sixth_form_college;
         elsif i = "5" then
            return public_or_other_privt;
         elsif i = "6" then
            return other_type_of_school;
         elsif i = "7" then
            return nursing_school_etc;
         elsif i = "8" then
            return college_of_f_educ;
         elsif i = "9" then
            return other_trng_establmnt;
        end if;
        Put_Line("Convert_Edtype_Type: Unmatched string |" & i & "|" );
        return Edtype_Type'First; -- never actually gets here; for compiler only
    end Convert_Edtype_Type;



    function Pretty_Print( i : Edtype1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when comprehensive_school => return "Comprehensive school";
             when scot_central_inst => return "Scot. central inst";
             when university => return "University";
             when grammar_no_fees => return "Grammar: no fees";
             when fee_paying_grammar => return "Fee paying grammar";
             when sixth_form_college => return "Sixth form college";
             when public_or_other_private => return "Public/other private";
             when other_type_of_school => return "Other type of school";
             when nursing_or_teachhospit => return "Nursing/teach.hospit";
             when college_fe_or_higher_ed => return "College fe/higher ed";
             when other_college => return "Other college";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Edtype1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Edtype1_Type( i : String ) return Edtype1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return comprehensive_school;
         elsif i = "10" then
            return scot_central_inst;
         elsif i = "11" then
            return university;
         elsif i = "2" then
            return grammar_no_fees;
         elsif i = "3" then
            return fee_paying_grammar;
         elsif i = "4" then
            return sixth_form_college;
         elsif i = "5" then
            return public_or_other_private;
         elsif i = "6" then
            return other_type_of_school;
         elsif i = "7" then
            return nursing_or_teachhospit;
         elsif i = "8" then
            return college_fe_or_higher_ed;
         elsif i = "9" then
            return other_college;
        end if;
        Put_Line("Convert_Edtype1_Type: Unmatched string |" & i & "|" );
        return Edtype1_Type'First; -- never actually gets here; for compiler only
    end Convert_Edtype1_Type;



    function Pretty_Print( i : Edtype3_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when comprehensive_school => return "Comprehensive school";
             when scot_central_inst => return "Scot. central inst";
             when university => return "University";
             when grammar_no_fees => return "Grammar: no fees";
             when fee_paying_grammar => return "Fee paying grammar";
             when sixth_form_college => return "Sixth form college";
             when public_or_other_private => return "Public/other private";
             when other_type_of_school => return "Other type of school";
             when nursing_or_teachhospit => return "Nursing/teach.hospit";
             when college_fe_or_higher_ed => return "College fe/higher ed";
             when other_college => return "Other college";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Edtype3_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Edtype3_Type( i : String ) return Edtype3_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return comprehensive_school;
         elsif i = "10" then
            return scot_central_inst;
         elsif i = "11" then
            return university;
         elsif i = "2" then
            return grammar_no_fees;
         elsif i = "3" then
            return fee_paying_grammar;
         elsif i = "4" then
            return sixth_form_college;
         elsif i = "5" then
            return public_or_other_private;
         elsif i = "6" then
            return other_type_of_school;
         elsif i = "7" then
            return nursing_or_teachhospit;
         elsif i = "8" then
            return college_fe_or_higher_ed;
         elsif i = "9" then
            return other_college;
        end if;
        Put_Line("Convert_Edtype3_Type: Unmatched string |" & i & "|" );
        return Edtype3_Type'First; -- never actually gets here; for compiler only
    end Convert_Edtype3_Type;



    function Pretty_Print( i : Eint_Type ) return String is
    begin
         case i is
             when no => return "No";
             when yes => return "Yes";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Eint_Type ) return Boolean is
    begin
         case i is
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Eint_Type( i : String ) return Eint_Type is
    begin
         if i = "0" then
            return no;
         elsif i = "1" then
            return yes;
        end if;
        Put_Line("Convert_Eint_Type: Unmatched string |" & i & "|" );
        return Eint_Type'First; -- never actually gets here; for compiler only
    end Convert_Eint_Type;



    function Pretty_Print( i : Eprosa_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when very_likely => return "Very likely";
             when likely => return "Likely";
             when unlikely => return "Unlikely";
             when very_unlikely => return "Very unlikely";
             when doesnt_apply => return "Doesn't apply";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Eprosa_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Eprosa_Type( i : String ) return Eprosa_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return very_likely;
         elsif i = "2" then
            return likely;
         elsif i = "3" then
            return unlikely;
         elsif i = "4" then
            return very_unlikely;
         elsif i = "5" then
            return doesnt_apply;
        end if;
        Put_Line("Convert_Eprosa_Type: Unmatched string |" & i & "|" );
        return Eprosa_Type'First; -- never actually gets here; for compiler only
    end Convert_Eprosa_Type;



    function Pretty_Print( i : Event1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't Know";
             when proxy_respondent => return "Proxy Respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when illhealth_or_concern => return "Illhealth/concern";
             when caring_duties => return "Caring duties";
             when babysitting => return "Babysitting";
             when start_or_in_school => return "Start/in school";
             when leaving_school => return "Leaving school";
             when start_or_in_fe => return "Start/in FE";
             when birth_frnd => return "Birth (frnd)";
             when wedding_frnd => return "Wedding (frnd)";
             when divorce_frnd => return "Divorce (frnd)";
             when death_frnd => return "Death (frnd)";
             when wedd_anniv_frnd => return "Wedd anniv (frnd)";
             when godparent_frnd => return "Godparent (frnd)";
             when leaving_fe => return "Leaving FE";
             when study_course_or_skills_nec => return "Study course/skills nec";
             when travel_re_study => return "Travel re study";
             when education_nec => return "Education nec";
             when in_hospital => return "In hospital";
             when change_job_or_status_or_hrs => return "Change job/status/hrs";
             when plan_job_change => return "Plan job change";
             when get_job_after_none => return "Get job after none";
             when work_reltd_traing => return "Work-reltd traing";
             when lost_job_or_risk => return "Lost job (or risk)";
             when retirement => return "Retirement";
             when travel_re_work => return "Travel re work";
             when work_rltd_probs => return "Work rltd probs";
             when jobs_nec => return "Jobs nec";
             when accident => return "Accident";
             when vacation_or_travel_nec => return "Vacation/travel nec";
             when leisure_actvties => return "Leisure actvties";
             when learning_to_drive => return "Learning to drive";
             when politcl_or_vol_work => return "Politcl/vol work";
             when nat_or_world_events => return "Nat/world events";
             when begin_friendship => return "Begin friendship";
             when end_friendship => return "End friendship";
             when time_with_friends => return "Time with friends";
             when neighbour_probs => return "Neighbour probs";
             when non_fam_relatns_nec => return "Non-fam relatns nec";
             when health_tests => return "Health tests";
             when birth_fam => return "Birth (fam)";
             when cohabitn_fam => return "Cohabitn (fam)";
             when wedding_fam => return "Wedding (fam)";
             when divorce_fam => return "Divorce (fam)";
             when leave_parentl_home => return "Leave parentl home";
             when death_fam => return "Death (fam)";
             when wedd_anniv_fam => return "Wedd anniv (fam)";
             when bday_celebs_fam => return "Bday celebs (fam)";
             when godparent_fam => return "Godparent (fam)";
             when less_mobility => return "Less mobility";
             when visit_with_relatvs => return "Visit with relatvs";
             when family_life => return "Family life";
             when family_probs => return "Family probs";
             when domestic_accident => return "Domestic accident";
             when pet_or_animal_ref => return "Pet/animal ref";
             when family_ref_nec => return "Family ref nec";
             when recovery_or_good_health => return "Recovery/good health";
             when money_problems => return "Money problems";
             when forced_move => return "Forced move";
             when improved_finances => return "Improved finances";
             when received_money => return "Received money";
             when financial_nec => return "Financial nec";
             when bought_vehicle => return "Bought vehicle";
             when bought_or_built_house => return "Bought/built house";
             when home_repairs_or_appliances => return "Home repairs/appliances";
             when won_prize_or_award => return "Won prize/award";
             when received_present => return "Received present";
             when other_purchases => return "Other purchases";
             when moved_home => return "Moved home";
             when intending_move => return "Intending move";
             when move_to_resid_home => return "Move to resid. home";
             when move_in_rs_home => return "Move in R's home";
             when health_nec => return "Health nec";
             when victim_crime => return "Victim crime";
             when trouble_with_police => return "Trouble with police";
             when joined_religion => return "Joined religion";
             when othr_religious_ref => return "Othr religious ref";
             when plan_not_fulfilled => return "Plan not fulfilled";
             when cvl_court_or_bureaucrcy => return "Cvl court/Bureaucrcy";
             when other_occurence_nec => return "Other occurence nec";
             when nothing_happened => return "Nothing happened";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Event1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Event1_Type( i : String ) return Event1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return illhealth_or_concern;
         elsif i = "10" then
            return caring_duties;
         elsif i = "11" then
            return babysitting;
         elsif i = "12" then
            return start_or_in_school;
         elsif i = "13" then
            return leaving_school;
         elsif i = "14" then
            return start_or_in_fe;
         elsif i = "140" then
            return birth_frnd;
         elsif i = "142" then
            return wedding_frnd;
         elsif i = "143" then
            return divorce_frnd;
         elsif i = "145" then
            return death_frnd;
         elsif i = "146" then
            return wedd_anniv_frnd;
         elsif i = "148" then
            return godparent_frnd;
         elsif i = "15" then
            return leaving_fe;
         elsif i = "16" then
            return study_course_or_skills_nec;
         elsif i = "17" then
            return travel_re_study;
         elsif i = "19" then
            return education_nec;
         elsif i = "2" then
            return in_hospital;
         elsif i = "20" then
            return change_job_or_status_or_hrs;
         elsif i = "21" then
            return plan_job_change;
         elsif i = "22" then
            return get_job_after_none;
         elsif i = "23" then
            return work_reltd_traing;
         elsif i = "24" then
            return lost_job_or_risk;
         elsif i = "25" then
            return retirement;
         elsif i = "26" then
            return travel_re_work;
         elsif i = "27" then
            return work_rltd_probs;
         elsif i = "29" then
            return jobs_nec;
         elsif i = "3" then
            return accident;
         elsif i = "30" then
            return vacation_or_travel_nec;
         elsif i = "31" then
            return leisure_actvties;
         elsif i = "32" then
            return learning_to_drive;
         elsif i = "33" then
            return politcl_or_vol_work;
         elsif i = "34" then
            return nat_or_world_events;
         elsif i = "35" then
            return begin_friendship;
         elsif i = "36" then
            return end_friendship;
         elsif i = "37" then
            return time_with_friends;
         elsif i = "38" then
            return neighbour_probs;
         elsif i = "39" then
            return non_fam_relatns_nec;
         elsif i = "4" then
            return health_tests;
         elsif i = "40" then
            return birth_fam;
         elsif i = "41" then
            return cohabitn_fam;
         elsif i = "42" then
            return wedding_fam;
         elsif i = "43" then
            return divorce_fam;
         elsif i = "44" then
            return leave_parentl_home;
         elsif i = "45" then
            return death_fam;
         elsif i = "46" then
            return wedd_anniv_fam;
         elsif i = "47" then
            return bday_celebs_fam;
         elsif i = "48" then
            return godparent_fam;
         elsif i = "5" then
            return less_mobility;
         elsif i = "50" then
            return visit_with_relatvs;
         elsif i = "51" then
            return family_life;
         elsif i = "52" then
            return family_probs;
         elsif i = "53" then
            return domestic_accident;
         elsif i = "54" then
            return pet_or_animal_ref;
         elsif i = "59" then
            return family_ref_nec;
         elsif i = "6" then
            return recovery_or_good_health;
         elsif i = "60" then
            return money_problems;
         elsif i = "61" then
            return forced_move;
         elsif i = "62" then
            return improved_finances;
         elsif i = "63" then
            return received_money;
         elsif i = "69" then
            return financial_nec;
         elsif i = "70" then
            return bought_vehicle;
         elsif i = "71" then
            return bought_or_built_house;
         elsif i = "72" then
            return home_repairs_or_appliances;
         elsif i = "73" then
            return won_prize_or_award;
         elsif i = "74" then
            return received_present;
         elsif i = "79" then
            return other_purchases;
         elsif i = "80" then
            return moved_home;
         elsif i = "81" then
            return intending_move;
         elsif i = "82" then
            return move_to_resid_home;
         elsif i = "83" then
            return move_in_rs_home;
         elsif i = "9" then
            return health_nec;
         elsif i = "90" then
            return victim_crime;
         elsif i = "91" then
            return trouble_with_police;
         elsif i = "92" then
            return joined_religion;
         elsif i = "93" then
            return othr_religious_ref;
         elsif i = "94" then
            return plan_not_fulfilled;
         elsif i = "95" then
            return cvl_court_or_bureaucrcy;
         elsif i = "96" then
            return other_occurence_nec;
         elsif i = "97" then
            return nothing_happened;
        end if;
        Put_Line("Convert_Event1_Type: Unmatched string |" & i & "|" );
        return Event1_Type'First; -- never actually gets here; for compiler only
    end Convert_Event1_Type;



    function Pretty_Print( i : Event1s_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy Respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when household_or_we => return "Household/'we'";
             when parents_nec => return "Parent(s) nec";
             when parents_in_law => return "Parent(s)-in-law";
             when siblings => return "Sibling(s)";
             when sis_or_bro_in_law => return "Sis/bro-in-law";
             when grandparents => return "Grandparent(s)";
             when grandchildren => return "Grandchild(ren)";
             when othr_family_mem => return "Othr family mem";
             when friend_or_colleague => return "Friend/colleague";
             when other => return "Other";
             when pet => return "Pet";
             when self => return "Self";
             when not_specified => return "Not specified";
             when partner => return "Partner";
             when daughters => return "Daughter(s)";
             when sons => return "Son(s)";
             when children_nec => return "Child(ren) nec";
             when son_or_dtr_in_law => return "Son/dtr-in-law";
             when mother => return "Mother";
             when father => return "Father";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Event1s_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Event1s_Type( i : String ) return Event1s_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return household_or_we;
         elsif i = "10" then
            return parents_nec;
         elsif i = "11" then
            return parents_in_law;
         elsif i = "12" then
            return siblings;
         elsif i = "13" then
            return sis_or_bro_in_law;
         elsif i = "14" then
            return grandparents;
         elsif i = "15" then
            return grandchildren;
         elsif i = "16" then
            return othr_family_mem;
         elsif i = "17" then
            return friend_or_colleague;
         elsif i = "18" then
            return other;
         elsif i = "19" then
            return pet;
         elsif i = "2" then
            return self;
         elsif i = "20" then
            return not_specified;
         elsif i = "3" then
            return partner;
         elsif i = "4" then
            return daughters;
         elsif i = "5" then
            return sons;
         elsif i = "6" then
            return children_nec;
         elsif i = "7" then
            return son_or_dtr_in_law;
         elsif i = "8" then
            return mother;
         elsif i = "9" then
            return father;
        end if;
        Put_Line("Convert_Event1s_Type: Unmatched string |" & i & "|" );
        return Event1s_Type'First; -- never actually gets here; for compiler only
    end Convert_Event1s_Type;



    function Pretty_Print( i : Exp2mov_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when very_likely => return "Very likely";
             when quite_likely => return "Quite likely";
             when quite_unlikely => return "Quite unlikely";
             when very_unlikely => return "Very unlikely";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Exp2mov_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Exp2mov_Type( i : String ) return Exp2mov_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return very_likely;
         elsif i = "2" then
            return quite_likely;
         elsif i = "3" then
            return quite_unlikely;
         elsif i = "4" then
            return very_unlikely;
        end if;
        Put_Line("Convert_Exp2mov_Type: Unmatched string |" & i & "|" );
        return Exp2mov_Type'First; -- never actually gets here; for compiler only
    end Convert_Exp2mov_Type;



    function Pretty_Print( i : F101_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when ni_retir_pension => return "NI retir pension";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : F101_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_F101_Type( i : String ) return F101_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return ni_retir_pension;
        end if;
        Put_Line("Convert_F101_Type: Unmatched string |" & i & "|" );
        return F101_Type'First; -- never actually gets here; for compiler only
    end Convert_F101_Type;



    function Pretty_Print( i : F102_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when pension_prev_emp => return "Pension prev emp";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : F102_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_F102_Type( i : String ) return F102_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "2" then
            return pension_prev_emp;
        end if;
        Put_Line("Convert_F102_Type: Unmatched string |" & i & "|" );
        return F102_Type'First; -- never actually gets here; for compiler only
    end Convert_F102_Type;



    function Pretty_Print( i : F103_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when pens_spse_prev_emp => return "Pens spse prev emp";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : F103_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_F103_Type( i : String ) return F103_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "3" then
            return pens_spse_prev_emp;
        end if;
        Put_Line("Convert_F103_Type: Unmatched string |" & i & "|" );
        return F103_Type'First; -- never actually gets here; for compiler only
    end Convert_F103_Type;



    function Pretty_Print( i : F104_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when annuity_or_priv_pens => return "Annuity/priv pens";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : F104_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_F104_Type( i : String ) return F104_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "4" then
            return annuity_or_priv_pens;
        end if;
        Put_Line("Convert_F104_Type: Unmatched string |" & i & "|" );
        return F104_Type'First; -- never actually gets here; for compiler only
    end Convert_F104_Type;



    function Pretty_Print( i : F105_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when widow_or_war_pens => return "Widow/war pens";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : F105_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_F105_Type( i : String ) return F105_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "5" then
            return widow_or_war_pens;
        end if;
        Put_Line("Convert_F105_Type: Unmatched string |" & i & "|" );
        return F105_Type'First; -- never actually gets here; for compiler only
    end Convert_F105_Type;



    function Pretty_Print( i : F106_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when wid_mothr_allow => return "Wid mothr allow";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : F106_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_F106_Type( i : String ) return F106_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "6" then
            return wid_mothr_allow;
        end if;
        Put_Line("Convert_F106_Type: Unmatched string |" & i & "|" );
        return F106_Type'First; -- never actually gets here; for compiler only
    end Convert_F106_Type;



    function Pretty_Print( i : F107_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when pension_credit => return "Pension credit";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : F107_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_F107_Type( i : String ) return F107_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "7" then
            return pension_credit;
        end if;
        Put_Line("Convert_F107_Type: Unmatched string |" & i & "|" );
        return F107_Type'First; -- never actually gets here; for compiler only
    end Convert_F107_Type;



    function Pretty_Print( i : F116_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when sev_disabl_allow => return "Sev disabl allow";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : F116_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_F116_Type( i : String ) return F116_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "16" then
            return sev_disabl_allow;
        end if;
        Put_Line("Convert_F116_Type: Unmatched string |" & i & "|" );
        return F116_Type'First; -- never actually gets here; for compiler only
    end Convert_F116_Type;



    function Pretty_Print( i : F117_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when invalidity_pens => return "Invalidity pens";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : F117_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_F117_Type( i : String ) return F117_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "17" then
            return invalidity_pens;
        end if;
        Put_Line("Convert_F117_Type: Unmatched string |" & i & "|" );
        return F117_Type'First; -- never actually gets here; for compiler only
    end Convert_F117_Type;



    function Pretty_Print( i : F118_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when ind_injury_allow => return "Ind injury allow";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : F118_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_F118_Type( i : String ) return F118_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "18" then
            return ind_injury_allow;
        end if;
        Put_Line("Convert_F118_Type: Unmatched string |" & i & "|" );
        return F118_Type'First; -- never actually gets here; for compiler only
    end Convert_F118_Type;



    function Pretty_Print( i : F119_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when attendance_allow => return "Attendance allow";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : F119_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_F119_Type( i : String ) return F119_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "19" then
            return attendance_allow;
        end if;
        Put_Line("Convert_F119_Type: Unmatched string |" & i & "|" );
        return F119_Type'First; -- never actually gets here; for compiler only
    end Convert_F119_Type;



    function Pretty_Print( i : F120_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when mobility_allow => return "Mobility allow";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : F120_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_F120_Type( i : String ) return F120_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "20" then
            return mobility_allow;
        end if;
        Put_Line("Convert_F120_Type: Unmatched string |" & i & "|" );
        return F120_Type'First; -- never actually gets here; for compiler only
    end Convert_F120_Type;



    function Pretty_Print( i : F121_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when inv_care_allow => return "Inv care allow";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : F121_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_F121_Type( i : String ) return F121_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "21" then
            return inv_care_allow;
        end if;
        Put_Line("Convert_F121_Type: Unmatched string |" & i & "|" );
        return F121_Type'First; -- never actually gets here; for compiler only
    end Convert_F121_Type;



    function Pretty_Print( i : F122_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when war_disabl_pens => return "War disabl pens";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : F122_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_F122_Type( i : String ) return F122_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "22" then
            return war_disabl_pens;
        end if;
        Put_Line("Convert_F122_Type: Unmatched string |" & i & "|" );
        return F122_Type'First; -- never actually gets here; for compiler only
    end Convert_F122_Type;



    function Pretty_Print( i : F123_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when disab_livng_allwnce => return "Disab livng allwnce";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : F123_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_F123_Type( i : String ) return F123_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "23" then
            return disab_livng_allwnce;
        end if;
        Put_Line("Convert_F123_Type: Unmatched string |" & i & "|" );
        return F123_Type'First; -- never actually gets here; for compiler only
    end Convert_F123_Type;



    function Pretty_Print( i : F124_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when disab_wrkng_allwnce => return "Disab wrkng allwnce";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : F124_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_F124_Type( i : String ) return F124_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "24" then
            return disab_wrkng_allwnce;
        end if;
        Put_Line("Convert_F124_Type: Unmatched string |" & i & "|" );
        return F124_Type'First; -- never actually gets here; for compiler only
    end Convert_F124_Type;



    function Pretty_Print( i : F125_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when incapacity_benefit => return "Incapacity benefit";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : F125_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_F125_Type( i : String ) return F125_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "25" then
            return incapacity_benefit;
        end if;
        Put_Line("Convert_F125_Type: Unmatched string |" & i & "|" );
        return F125_Type'First; -- never actually gets here; for compiler only
    end Convert_F125_Type;



    function Pretty_Print( i : F126_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when disab_liv_allw_care => return "Disab liv allw -care";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : F126_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_F126_Type( i : String ) return F126_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "26" then
            return disab_liv_allw_care;
        end if;
        Put_Line("Convert_F126_Type: Unmatched string |" & i & "|" );
        return F126_Type'First; -- never actually gets here; for compiler only
    end Convert_F126_Type;



    function Pretty_Print( i : F127_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when disab_liv_allw_mob => return "Disab liv allw -mob";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : F127_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_F127_Type( i : String ) return F127_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "27" then
            return disab_liv_allw_mob;
        end if;
        Put_Line("Convert_F127_Type: Unmatched string |" & i & "|" );
        return F127_Type'First; -- never actually gets here; for compiler only
    end Convert_F127_Type;



    function Pretty_Print( i : F128_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when disab_liv_allw_dk => return "Disab liv allw -dk";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : F128_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_F128_Type( i : String ) return F128_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "28" then
            return disab_liv_allw_dk;
        end if;
        Put_Line("Convert_F128_Type: Unmatched string |" & i & "|" );
        return F128_Type'First; -- never actually gets here; for compiler only
    end Convert_F128_Type;



    function Pretty_Print( i : F131_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when unempl_or_incme_supt => return "Unempl/incme supt";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : F131_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_F131_Type( i : String ) return F131_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "31" then
            return unempl_or_incme_supt;
        end if;
        Put_Line("Convert_F131_Type: Unmatched string |" & i & "|" );
        return F131_Type'First; -- never actually gets here; for compiler only
    end Convert_F131_Type;



    function Pretty_Print( i : F132_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when income_support => return "Income support";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : F132_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_F132_Type( i : String ) return F132_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "32" then
            return income_support;
        end if;
        Put_Line("Convert_F132_Type: Unmatched string |" & i & "|" );
        return F132_Type'First; -- never actually gets here; for compiler only
    end Convert_F132_Type;



    function Pretty_Print( i : F133_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when unempl_benefit => return "Unempl benefit";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : F133_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_F133_Type( i : String ) return F133_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "33" then
            return unempl_benefit;
        end if;
        Put_Line("Convert_F133_Type: Unmatched string |" & i & "|" );
        return F133_Type'First; -- never actually gets here; for compiler only
    end Convert_F133_Type;



    function Pretty_Print( i : F134_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when ni_sick_benefit => return "NI sick benefit";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : F134_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_F134_Type( i : String ) return F134_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "34" then
            return ni_sick_benefit;
        end if;
        Put_Line("Convert_F134_Type: Unmatched string |" & i & "|" );
        return F134_Type'First; -- never actually gets here; for compiler only
    end Convert_F134_Type;



    function Pretty_Print( i : F135_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when child_benefit => return "Child benefit";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : F135_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_F135_Type( i : String ) return F135_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "35" then
            return child_benefit;
        end if;
        Put_Line("Convert_F135_Type: Unmatched string |" & i & "|" );
        return F135_Type'First; -- never actually gets here; for compiler only
    end Convert_F135_Type;



    function Pretty_Print( i : F136_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when one_parent_benefit => return "One parent benefit";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : F136_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_F136_Type( i : String ) return F136_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "36" then
            return one_parent_benefit;
        end if;
        Put_Line("Convert_F136_Type: Unmatched string |" & i & "|" );
        return F136_Type'First; -- never actually gets here; for compiler only
    end Convert_F136_Type;



    function Pretty_Print( i : F137_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when family_credit => return "Family credit";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : F137_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_F137_Type( i : String ) return F137_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "37" then
            return family_credit;
        end if;
        Put_Line("Convert_F137_Type: Unmatched string |" & i & "|" );
        return F137_Type'First; -- never actually gets here; for compiler only
    end Convert_F137_Type;



    function Pretty_Print( i : F138_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when maternity_allow => return "Maternity allow";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : F138_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_F138_Type( i : String ) return F138_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "38" then
            return maternity_allow;
        end if;
        Put_Line("Convert_F138_Type: Unmatched string |" & i & "|" );
        return F138_Type'First; -- never actually gets here; for compiler only
    end Convert_F138_Type;



    function Pretty_Print( i : F139_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when housing_benefit => return "Housing benefit";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : F139_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_F139_Type( i : String ) return F139_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "39" then
            return housing_benefit;
        end if;
        Put_Line("Convert_F139_Type: Unmatched string |" & i & "|" );
        return F139_Type'First; -- never actually gets here; for compiler only
    end Convert_F139_Type;



    function Pretty_Print( i : F140_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when comm_charge_bene => return "Comm charge bene";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : F140_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_F140_Type( i : String ) return F140_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "40" then
            return comm_charge_bene;
        end if;
        Put_Line("Convert_F140_Type: Unmatched string |" & i & "|" );
        return F140_Type'First; -- never actually gets here; for compiler only
    end Convert_F140_Type;



    function Pretty_Print( i : F141_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when other_state_bene => return "Other state bene";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : F141_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_F141_Type( i : String ) return F141_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "41" then
            return other_state_bene;
        end if;
        Put_Line("Convert_F141_Type: Unmatched string |" & i & "|" );
        return F141_Type'First; -- never actually gets here; for compiler only
    end Convert_F141_Type;



    function Pretty_Print( i : F142_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when job_seekers_allowance => return "Job Seeker's Allowance";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : F142_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_F142_Type( i : String ) return F142_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "42" then
            return job_seekers_allowance;
        end if;
        Put_Line("Convert_F142_Type: Unmatched string |" & i & "|" );
        return F142_Type'First; -- never actually gets here; for compiler only
    end Convert_F142_Type;



    function Pretty_Print( i : F143_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when not_mentioned => return "Not mentioned";
             when child_tax_credit => return "Child Tax Credit";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : F143_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_F143_Type( i : String ) return F143_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "43" then
            return child_tax_credit;
        end if;
        Put_Line("Convert_F143_Type: Unmatched string |" & i & "|" );
        return F143_Type'First; -- never actually gets here; for compiler only
    end Convert_F143_Type;



    function Pretty_Print( i : F144_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when not_mentioned => return "Not mentioned";
             when return_to_work_credit => return "Return to Work Credit";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : F144_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_F144_Type( i : String ) return F144_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "44" then
            return return_to_work_credit;
        end if;
        Put_Line("Convert_F144_Type: Unmatched string |" & i & "|" );
        return F144_Type'First; -- never actually gets here; for compiler only
    end Convert_F144_Type;



    function Pretty_Print( i : F151_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when educa_grant => return "Educa grant";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : F151_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_F151_Type( i : String ) return F151_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "51" then
            return educa_grant;
        end if;
        Put_Line("Convert_F151_Type: Unmatched string |" & i & "|" );
        return F151_Type'First; -- never actually gets here; for compiler only
    end Convert_F151_Type;



    function Pretty_Print( i : F152_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when t_u_or_friendly_soc_payt => return "T U/friendly soc payt";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : F152_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_F152_Type( i : String ) return F152_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "52" then
            return t_u_or_friendly_soc_payt;
        end if;
        Put_Line("Convert_F152_Type: Unmatched string |" & i & "|" );
        return F152_Type'First; -- never actually gets here; for compiler only
    end Convert_F152_Type;



    function Pretty_Print( i : F153_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when maint_or_alimony => return "Maint or alimony";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : F153_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_F153_Type( i : String ) return F153_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "53" then
            return maint_or_alimony;
        end if;
        Put_Line("Convert_F153_Type: Unmatched string |" & i & "|" );
        return F153_Type'First; -- never actually gets here; for compiler only
    end Convert_F153_Type;



    function Pretty_Print( i : F154_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when payment_abs_relative => return "Payment abs relative";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : F154_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_F154_Type( i : String ) return F154_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "54" then
            return payment_abs_relative;
        end if;
        Put_Line("Convert_F154_Type: Unmatched string |" & i & "|" );
        return F154_Type'First; -- never actually gets here; for compiler only
    end Convert_F154_Type;



    function Pretty_Print( i : F155_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when rent_or_boarders_or_lodgers => return "Rent/boarders/lodgers";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : F155_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_F155_Type( i : String ) return F155_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "55" then
            return rent_or_boarders_or_lodgers;
        end if;
        Put_Line("Convert_F155_Type: Unmatched string |" & i & "|" );
        return F155_Type'First; -- never actually gets here; for compiler only
    end Convert_F155_Type;



    function Pretty_Print( i : F156_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when rent_other_prop => return "Rent other prop";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : F156_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_F156_Type( i : String ) return F156_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "56" then
            return rent_other_prop;
        end if;
        Put_Line("Convert_F156_Type: Unmatched string |" & i & "|" );
        return F156_Type'First; -- never actually gets here; for compiler only
    end Convert_F156_Type;



    function Pretty_Print( i : F157_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when foster_allowance => return "Foster allowance";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : F157_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_F157_Type( i : String ) return F157_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "57" then
            return foster_allowance;
        end if;
        Put_Line("Convert_F157_Type: Unmatched string |" & i & "|" );
        return F157_Type'First; -- never actually gets here; for compiler only
    end Convert_F157_Type;



    function Pretty_Print( i : F158_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when sick_or_acci_insurance => return "Sick/acci insurance";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : F158_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_F158_Type( i : String ) return F158_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "58" then
            return sick_or_acci_insurance;
        end if;
        Put_Line("Convert_F158_Type: Unmatched string |" & i & "|" );
        return F158_Type'First; -- never actually gets here; for compiler only
    end Convert_F158_Type;



    function Pretty_Print( i : F159_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when any_other_payment => return "Any other payment";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : F159_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_F159_Type( i : String ) return F159_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "59" then
            return any_other_payment;
        end if;
        Put_Line("Convert_F159_Type: Unmatched string |" & i & "|" );
        return F159_Type'First; -- never actually gets here; for compiler only
    end Convert_F159_Type;



    function Pretty_Print( i : Fair1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when v_fair => return "V fair";
             when somewhat_fair => return "Somewhat fair";
             when somewhat_unfair => return "Somewhat unfair";
             when v_unfair => return "V unfair";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Fair1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Fair1_Type( i : String ) return Fair1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return v_fair;
         elsif i = "2" then
            return somewhat_fair;
         elsif i = "3" then
            return somewhat_unfair;
         elsif i = "4" then
            return v_unfair;
        end if;
        Put_Line("Convert_Fair1_Type: Unmatched string |" & i & "|" );
        return Fair1_Type'First; -- never actually gets here; for compiler only
    end Convert_Fair1_Type;



    function Pretty_Print( i : Fampos_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't Know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing => return "Missing";
             when eldest_1st_born => return "Eldest, 1st born";
             when tenth => return "Tenth";
             when second_born => return "Second born";
             when third => return "Third";
             when fourth => return "Fourth";
             when fifth => return "Fifth";
             when sixth => return "Sixth";
             when seventh => return "Seventh";
             when eighth => return "Eighth";
             when nineth => return "Nineth";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Fampos_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Fampos_Type( i : String ) return Fampos_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return eldest_1st_born;
         elsif i = "10" then
            return tenth;
         elsif i = "2" then
            return second_born;
         elsif i = "3" then
            return third;
         elsif i = "4" then
            return fourth;
         elsif i = "5" then
            return fifth;
         elsif i = "6" then
            return sixth;
         elsif i = "7" then
            return seventh;
         elsif i = "8" then
            return eighth;
         elsif i = "9" then
            return nineth;
        end if;
        Put_Line("Convert_Fampos_Type: Unmatched string |" & i & "|" );
        return Fampos_Type'First; -- never actually gets here; for compiler only
    end Convert_Fampos_Type;



    function Pretty_Print( i : Famsiz_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't Know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing => return "Missing";
             when yes_correct => return "Yes, correct";
             when no_incorrect => return "No, incorrect";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Famsiz_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Famsiz_Type( i : String ) return Famsiz_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return yes_correct;
         elsif i = "2" then
            return no_incorrect;
        end if;
        Put_Line("Convert_Famsiz_Type: Unmatched string |" & i & "|" );
        return Famsiz_Type'First; -- never actually gets here; for compiler only
    end Convert_Famsiz_Type;



    function Pretty_Print( i : Farkid_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when less_than_15_minutes => return "Less than 15 minutes";
             when between_15_and_30_mins => return "Between 15 & 30 mins";
             when between_30_min_and_1hr => return "Between 30 min & 1hr";
             when between_one_and_two_hr => return "Between one & two hr";
             when more_than_two_hours => return "More than two hours";
             when lives_abroadvolunte => return "Lives abroad(volunte";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Farkid_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Farkid_Type( i : String ) return Farkid_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return less_than_15_minutes;
         elsif i = "2" then
            return between_15_and_30_mins;
         elsif i = "3" then
            return between_30_min_and_1hr;
         elsif i = "4" then
            return between_one_and_two_hr;
         elsif i = "5" then
            return more_than_two_hours;
         elsif i = "6" then
            return lives_abroadvolunte;
        end if;
        Put_Line("Convert_Farkid_Type: Unmatched string |" & i & "|" );
        return Farkid_Type'First; -- never actually gets here; for compiler only
    end Convert_Farkid_Type;



    function Pretty_Print( i : Fedasp_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when yes => return "Yes";
             when no => return "No";
             when maybe_or_undecided => return "Maybe/undecided";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Fedasp_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Fedasp_Type( i : String ) return Fedasp_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
         elsif i = "3" then
            return maybe_or_undecided;
        end if;
        Put_Line("Convert_Fedasp_Type: Unmatched string |" & i & "|" );
        return Fedasp_Type'First; -- never actually gets here; for compiler only
    end Convert_Fedasp_Type;



    function Pretty_Print( i : Fedlik_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when very_likely => return "Very likely";
             when likely => return "Likely";
             when not_very_likely => return "Not very likely";
             when not_at_all_likely => return "Not at all likely";
             when dependsvolunteered => return "Depends(volunteered)";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Fedlik_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Fedlik_Type( i : String ) return Fedlik_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return very_likely;
         elsif i = "2" then
            return likely;
         elsif i = "3" then
            return not_very_likely;
         elsif i = "4" then
            return not_at_all_likely;
         elsif i = "5" then
            return dependsvolunteered;
        end if;
        Put_Line("Convert_Fedlik_Type: Unmatched string |" & i & "|" );
        return Fedlik_Type'First; -- never actually gets here; for compiler only
    end Convert_Fedlik_Type;



    function Pretty_Print( i : Fednt1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when school_qualif_enough => return "School qualif enough";
             when other => return "Other";
             when decided_on_career => return "Decided on career";
             when want_to_earn_money => return "Want to earn money";
             when cost_of_education => return "Cost of education";
             when depends_on_grades => return "Depends on grades";
             when not_academic_enough => return "Not academic enough.";
             when dont_want_to => return "Don't want to";
             when want_to_travel => return "Want to travel";
             when undecided => return "Undecided";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Fednt1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Fednt1_Type( i : String ) return Fednt1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return school_qualif_enough;
         elsif i = "10" then
            return other;
         elsif i = "2" then
            return decided_on_career;
         elsif i = "3" then
            return want_to_earn_money;
         elsif i = "4" then
            return cost_of_education;
         elsif i = "5" then
            return depends_on_grades;
         elsif i = "6" then
            return not_academic_enough;
         elsif i = "7" then
            return dont_want_to;
         elsif i = "8" then
            return want_to_travel;
         elsif i = "9" then
            return undecided;
        end if;
        Put_Line("Convert_Fednt1_Type: Unmatched string |" & i & "|" );
        return Fednt1_Type'First; -- never actually gets here; for compiler only
    end Convert_Fednt1_Type;



    function Pretty_Print( i : Fednt2_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when school_qualif_enough => return "School qualif enough";
             when other => return "Other";
             when decided_on_career => return "Decided on career";
             when want_to_earn_money => return "Want to earn money";
             when cost_of_education => return "Cost of education";
             when depends_on_grades => return "Depends on grades";
             when not_academic_enough => return "Not academic enough.";
             when dont_want_to => return "Don't want to";
             when want_to_travel => return "Want to travel";
             when undecided => return "Undecided";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Fednt2_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Fednt2_Type( i : String ) return Fednt2_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return school_qualif_enough;
         elsif i = "10" then
            return other;
         elsif i = "2" then
            return decided_on_career;
         elsif i = "3" then
            return want_to_earn_money;
         elsif i = "4" then
            return cost_of_education;
         elsif i = "5" then
            return depends_on_grades;
         elsif i = "6" then
            return not_academic_enough;
         elsif i = "7" then
            return dont_want_to;
         elsif i = "8" then
            return want_to_travel;
         elsif i = "9" then
            return undecided;
        end if;
        Put_Line("Convert_Fednt2_Type: Unmatched string |" & i & "|" );
        return Fednt2_Type'First; -- never actually gets here; for compiler only
    end Convert_Fednt2_Type;



    function Pretty_Print( i : Fedtyp_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when nurs_sch_or_t_hosp => return "Nurs sch./T. Hosp";
             when fe_or_he_college => return "FE or HE college";
             when other_college => return "Other college";
             when university => return "University";
             when none_of_above => return "None of above";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Fedtyp_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Fedtyp_Type( i : String ) return Fedtyp_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return nurs_sch_or_t_hosp;
         elsif i = "2" then
            return fe_or_he_college;
         elsif i = "3" then
            return other_college;
         elsif i = "4" then
            return university;
         elsif i = "5" then
            return none_of_above;
        end if;
        Put_Line("Convert_Fedtyp_Type: Unmatched string |" & i & "|" );
        return Fedtyp_Type'First; -- never actually gets here; for compiler only
    end Convert_Fedtyp_Type;



    function Pretty_Print( i : Fenow_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when still_in_f_educ => return "Still in f educ";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Fenow_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Fenow_Type( i : String ) return Fenow_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return still_in_f_educ;
        end if;
        Put_Line("Convert_Fenow_Type: Unmatched string |" & i & "|" );
        return Fenow_Type'First; -- never actually gets here; for compiler only
    end Convert_Fenow_Type;



    function Pretty_Print( i : Fetype_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when nursing_school_etc => return "Nursing school etc";
             when college_of_f_educ => return "College of f educ";
             when other_trng_establmnt => return "Other trng establmnt";
             when polytechnic => return "Polytechnic";
             when university => return "University";
             when none_of_the_above => return "None of the above";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Fetype_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Fetype_Type( i : String ) return Fetype_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return nursing_school_etc;
         elsif i = "2" then
            return college_of_f_educ;
         elsif i = "3" then
            return other_trng_establmnt;
         elsif i = "4" then
            return polytechnic;
         elsif i = "5" then
            return university;
         elsif i = "7" then
            return none_of_the_above;
        end if;
        Put_Line("Convert_Fetype_Type: Unmatched string |" & i & "|" );
        return Fetype_Type'First; -- never actually gets here; for compiler only
    end Convert_Fetype_Type;



    function Pretty_Print( i : Ficode_Type ) return String is
    begin
         case i is
             when ni_retir_pension => return "NI retir pension";
             when sev_disabl_allow => return "Sev disabl allow";
             when invalidity_pens => return "Invalidity pens";
             when ind_injury_allow => return "Ind injury allow";
             when attendance_allow => return "Attendance allow";
             when pension_prev_emp => return "Pension prev emp";
             when mobility_allow => return "Mobility allow";
             when inv_care_allow => return "Inv care allow";
             when war_disabl_pens => return "War disabl pens";
             when disab_livng_allwnce => return "Disab livng allwnce";
             when disab_wrkng_allwnce => return "Disab wrkng allwnce";
             when incapacity_benefit => return "Incapacity benefit";
             when disab_liv_allowcare => return "Disab liv allow(Care)";
             when disab_liv_allowmob => return "Disab liv allow(Mob)";
             when disab_liv_allow_dk => return "Disab liv allow (DK)";
             when pens_spse_prev_emp => return "Pens spse prev emp";
             when unempl_or_incme_supt => return "Unempl/incme supt";
             when income_support => return "Income support";
             when unempl_benefit => return "Unempl benefit";
             when ni_sick_benefit => return "NI sick benefit";
             when child_benefit => return "Child benefit";
             when one_parent_benefit => return "One parent benefit";
             when family_credit => return "Family credit";
             when maternity_allow => return "Maternity allow";
             when housing_benefit => return "Housing benefit";
             when annuity_or_priv_pens => return "Annuity/priv pens";
             when comm_charge_bene => return "Comm charge bene";
             when other_state_bene => return "Other state bene";
             when job_seekers_allow => return "Job seekers Allow";
             when child_tax_credit => return "Child tax credit";
             when return_to_work_credit => return "Return to work credit";
             when widow_or_war_pens => return "Widow/war pens";
             when educa_grant => return "Educa grant";
             when t_u_or_friendly_soc_payt => return "T U/friendly soc payt";
             when maint_or_alimony => return "Maint or alimony";
             when payment_abs_relative => return "Payment abs relative";
             when rent_or_boarders_or_lodgers => return "Rent/boarders/lodgers";
             when rent_other_prop => return "Rent other prop";
             when foster_allowance => return "Foster allowance";
             when sick_or_acci_insurance => return "Sick/acci insurance";
             when any_other_payment => return "Any other payment";
             when wid_mothr_allow => return "Wid mothr allow";
             when pension_credit => return "Pension credit";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ficode_Type ) return Boolean is
    begin
         case i is
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ficode_Type( i : String ) return Ficode_Type is
    begin
         if i = "1" then
            return ni_retir_pension;
         elsif i = "16" then
            return sev_disabl_allow;
         elsif i = "17" then
            return invalidity_pens;
         elsif i = "18" then
            return ind_injury_allow;
         elsif i = "19" then
            return attendance_allow;
         elsif i = "2" then
            return pension_prev_emp;
         elsif i = "20" then
            return mobility_allow;
         elsif i = "21" then
            return inv_care_allow;
         elsif i = "22" then
            return war_disabl_pens;
         elsif i = "23" then
            return disab_livng_allwnce;
         elsif i = "24" then
            return disab_wrkng_allwnce;
         elsif i = "25" then
            return incapacity_benefit;
         elsif i = "26" then
            return disab_liv_allowcare;
         elsif i = "27" then
            return disab_liv_allowmob;
         elsif i = "28" then
            return disab_liv_allow_dk;
         elsif i = "3" then
            return pens_spse_prev_emp;
         elsif i = "31" then
            return unempl_or_incme_supt;
         elsif i = "32" then
            return income_support;
         elsif i = "33" then
            return unempl_benefit;
         elsif i = "34" then
            return ni_sick_benefit;
         elsif i = "35" then
            return child_benefit;
         elsif i = "36" then
            return one_parent_benefit;
         elsif i = "37" then
            return family_credit;
         elsif i = "38" then
            return maternity_allow;
         elsif i = "39" then
            return housing_benefit;
         elsif i = "4" then
            return annuity_or_priv_pens;
         elsif i = "40" then
            return comm_charge_bene;
         elsif i = "41" then
            return other_state_bene;
         elsif i = "42" then
            return job_seekers_allow;
         elsif i = "43" then
            return child_tax_credit;
         elsif i = "44" then
            return return_to_work_credit;
         elsif i = "5" then
            return widow_or_war_pens;
         elsif i = "51" then
            return educa_grant;
         elsif i = "52" then
            return t_u_or_friendly_soc_payt;
         elsif i = "53" then
            return maint_or_alimony;
         elsif i = "54" then
            return payment_abs_relative;
         elsif i = "55" then
            return rent_or_boarders_or_lodgers;
         elsif i = "56" then
            return rent_other_prop;
         elsif i = "57" then
            return foster_allowance;
         elsif i = "58" then
            return sick_or_acci_insurance;
         elsif i = "59" then
            return any_other_payment;
         elsif i = "6" then
            return wid_mothr_allow;
         elsif i = "7" then
            return pension_credit;
        end if;
        Put_Line("Convert_Ficode_Type: Unmatched string |" & i & "|" );
        return Ficode_Type'First; -- never actually gets here; for compiler only
    end Convert_Ficode_Type;



    function Pretty_Print( i : Fihhmb_Type ) return String is
    begin
         case i is
             when not_imputed => return "Not Imputed";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Fihhmb_Type ) return Boolean is
    begin
         case i is
             when not_imputed => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Fihhmb_Type( i : String ) return Fihhmb_Type is
    begin
         if i = "-9" then
            return not_imputed;
        end if;
        Put_Line("Convert_Fihhmb_Type: Unmatched string |" & i & "|" );
        return Fihhmb_Type'First; -- never actually gets here; for compiler only
    end Convert_Fihhmb_Type;



    function Pretty_Print( i : Fihhmbi_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_imputed => return "Not Imputed";
             when imp_part_indiv_incm => return "Imp. part indiv Incm";
             when imp_full_indiv_incm => return "Imp. full indiv Incm";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Fihhmbi_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Fihhmbi_Type( i : String ) return Fihhmbi_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "0" then
            return not_imputed;
         elsif i = "1" then
            return imp_part_indiv_incm;
         elsif i = "2" then
            return imp_full_indiv_incm;
        end if;
        Put_Line("Convert_Fihhmbi_Type: Unmatched string |" & i & "|" );
        return Fihhmbi_Type'First; -- never actually gets here; for compiler only
    end Convert_Fihhmbi_Type;



    function Pretty_Print( i : Fihhmni_Type ) return String is
    begin
         case i is
             when var_dont_know => return "Var Don't Know";
             when var_refused => return "Var Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when var_inapplicable => return "Var Inapplicable";
             when var_missing_or_wild => return "Var Missing or wild";
             when not_imputed => return "Not Imputed";
             when imp_part_indiv_incm => return "Imp. part indiv Incm";
             when imp_full_indiv_incm => return "Imp. full indiv Incm";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Fihhmni_Type ) return Boolean is
    begin
         case i is
             when var_dont_know => return True;
             when var_refused => return True;
             when proxy_and_or_phone => return True;
             when var_inapplicable => return True;
             when var_missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Fihhmni_Type( i : String ) return Fihhmni_Type is
    begin
         if i = "-1" then
            return var_dont_know;
         elsif i = "-2" then
            return var_refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return var_inapplicable;
         elsif i = "-9" then
            return var_missing_or_wild;
         elsif i = "0" then
            return not_imputed;
         elsif i = "1" then
            return imp_part_indiv_incm;
         elsif i = "2" then
            return imp_full_indiv_incm;
        end if;
        Put_Line("Convert_Fihhmni_Type: Unmatched string |" & i & "|" );
        return Fihhmni_Type'First; -- never actually gets here; for compiler only
    end Convert_Fihhmni_Type;



    function Pretty_Print( i : Fihhsel_Type ) return String is
    begin
         case i is
             when no_loss => return "No loss";
             when loss_recorded => return "Loss recorded";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Fihhsel_Type ) return Boolean is
    begin
         case i is
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Fihhsel_Type( i : String ) return Fihhsel_Type is
    begin
         if i = "0" then
            return no_loss;
         elsif i = "1" then
            return loss_recorded;
        end if;
        Put_Line("Convert_Fihhsel_Type: Unmatched string |" & i & "|" );
        return Fihhsel_Type'First; -- never actually gets here; for compiler only
    end Convert_Fihhsel_Type;



    function Pretty_Print( i : Fim01l_Type ) return String is
    begin
         case i is
             when included_elsewhere => return "Included elsewhere";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Fim01l_Type ) return Boolean is
    begin
         case i is
             when included_elsewhere => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Fim01l_Type( i : String ) return Fim01l_Type is
    begin
         if i = "-3" then
            return included_elsewhere;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
        end if;
        Put_Line("Convert_Fim01l_Type: Unmatched string |" & i & "|" );
        return Fim01l_Type'First; -- never actually gets here; for compiler only
    end Convert_Fim01l_Type;



    function Pretty_Print( i : Fim01n_Type ) return String is
    begin
         case i is
             when included_elsewhere => return "Included Elsewhere";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Fim01n_Type ) return Boolean is
    begin
         case i is
             when included_elsewhere => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Fim01n_Type( i : String ) return Fim01n_Type is
    begin
         if i = "-3" then
            return included_elsewhere;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
        end if;
        Put_Line("Convert_Fim01n_Type: Unmatched string |" & i & "|" );
        return Fim01n_Type'First; -- never actually gets here; for compiler only
    end Convert_Fim01n_Type;



    function Pretty_Print( i : Fim02n_Type ) return String is
    begin
         case i is
             when included_elsewhere => return "Included Elsewhere";
             when missing_or_wild => return "Missing or wild";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Fim02n_Type ) return Boolean is
    begin
         case i is
             when included_elsewhere => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Fim02n_Type( i : String ) return Fim02n_Type is
    begin
         if i = "-3" then
            return included_elsewhere;
         elsif i = "-9" then
            return missing_or_wild;
        end if;
        Put_Line("Convert_Fim02n_Type: Unmatched string |" & i & "|" );
        return Fim02n_Type'First; -- never actually gets here; for compiler only
    end Convert_Fim02n_Type;



    function Pretty_Print( i : Fimnbi_Type ) return String is
    begin
         case i is
             when var_dont_know => return "Var Don't Know";
             when var_refused => return "Var Refused";
             when var_proxy_resp => return "Var Proxy resp";
             when var_inapplicable => return "Var Inapplicable";
             when var_missing_or_wild => return "Var Missing or wild";
             when not_imputed => return "Not Imputed";
             when imputed => return "Imputed";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Fimnbi_Type ) return Boolean is
    begin
         case i is
             when var_dont_know => return True;
             when var_refused => return True;
             when var_proxy_resp => return True;
             when var_inapplicable => return True;
             when var_missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Fimnbi_Type( i : String ) return Fimnbi_Type is
    begin
         if i = "-1" then
            return var_dont_know;
         elsif i = "-2" then
            return var_refused;
         elsif i = "-7" then
            return var_proxy_resp;
         elsif i = "-8" then
            return var_inapplicable;
         elsif i = "-9" then
            return var_missing_or_wild;
         elsif i = "0" then
            return not_imputed;
         elsif i = "1" then
            return imputed;
        end if;
        Put_Line("Convert_Fimnbi_Type: Unmatched string |" & i & "|" );
        return Fimnbi_Type'First; -- never actually gets here; for compiler only
    end Convert_Fimnbi_Type;



    function Pretty_Print( i : Fimnii_Type ) return String is
    begin
         case i is
             when var_dont_know => return "Var Don't Know";
             when var_refused => return "Var Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when var_inapplicable => return "Var Inapplicable";
             when var_missing_or_wild => return "Var Missing or wild";
             when not_imputed => return "Not Imputed";
             when imputed => return "Imputed";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Fimnii_Type ) return Boolean is
    begin
         case i is
             when var_dont_know => return True;
             when var_refused => return True;
             when proxy_and_or_phone => return True;
             when var_inapplicable => return True;
             when var_missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Fimnii_Type( i : String ) return Fimnii_Type is
    begin
         if i = "-1" then
            return var_dont_know;
         elsif i = "-2" then
            return var_refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return var_inapplicable;
         elsif i = "-9" then
            return var_missing_or_wild;
         elsif i = "0" then
            return not_imputed;
         elsif i = "1" then
            return imputed;
        end if;
        Put_Line("Convert_Fimnii_Type: Unmatched string |" & i & "|" );
        return Fimnii_Type'First; -- never actually gets here; for compiler only
    end Convert_Fimnii_Type;



    function Pretty_Print( i : Fimnsel_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when no_loss => return "No loss";
             when loss_recorded => return "Loss recorded";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Fimnsel_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Fimnsel_Type( i : String ) return Fimnsel_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return no_loss;
         elsif i = "1" then
            return loss_recorded;
        end if;
        Put_Line("Convert_Fimnsel_Type: Unmatched string |" & i & "|" );
        return Fimnsel_Type'First; -- never actually gets here; for compiler only
    end Convert_Fimnsel_Type;



    function Pretty_Print( i : Finloc_Type ) return String is
    begin
         case i is
             when missing_or_wild => return "Missing or wild";
             when duplicate => return "Duplicate";
             when final_record => return "Final record";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Finloc_Type ) return Boolean is
    begin
         case i is
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Finloc_Type( i : String ) return Finloc_Type is
    begin
         if i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return duplicate;
         elsif i = "1" then
            return final_record;
        end if;
        Put_Line("Convert_Finloc_Type: Unmatched string |" & i & "|" );
        return Finloc_Type'First; -- never actually gets here; for compiler only
    end Convert_Finloc_Type;



    function Pretty_Print( i : Fisbm_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when january => return "January";
             when october => return "October";
             when november => return "November";
             when december => return "December";
             when february => return "February";
             when march => return "March";
             when april => return "April";
             when may => return "May";
             when june => return "June";
             when july => return "July";
             when august => return "August";
             when september => return "September";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Fisbm_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Fisbm_Type( i : String ) return Fisbm_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return january;
         elsif i = "10" then
            return october;
         elsif i = "11" then
            return november;
         elsif i = "12" then
            return december;
         elsif i = "2" then
            return february;
         elsif i = "3" then
            return march;
         elsif i = "4" then
            return april;
         elsif i = "5" then
            return may;
         elsif i = "6" then
            return june;
         elsif i = "7" then
            return july;
         elsif i = "8" then
            return august;
         elsif i = "9" then
            return september;
        end if;
        Put_Line("Convert_Fisbm_Type: Unmatched string |" & i & "|" );
        return Fisbm_Type'First; -- never actually gets here; for compiler only
    end Convert_Fisbm_Type;



    function Pretty_Print( i : Fisit_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when living_comfortably => return "Living comfortably";
             when doing_alright => return "Doing alright";
             when just_abt_getting_by => return "Just abt getting by";
             when finding_it_quite_difficult => return "Finding it quite difficult";
             when finding_it_very_difficult => return "Finding it very difficult";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Fisit_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Fisit_Type( i : String ) return Fisit_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return living_comfortably;
         elsif i = "2" then
            return doing_alright;
         elsif i = "3" then
            return just_abt_getting_by;
         elsif i = "4" then
            return finding_it_quite_difficult;
         elsif i = "5" then
            return finding_it_very_difficult;
        end if;
        Put_Line("Convert_Fisit_Type: Unmatched string |" & i & "|" );
        return Fisit_Type'First; -- never actually gets here; for compiler only
    end Convert_Fisit_Type;



    function Pretty_Print( i : Fisitc_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when better_off => return "Better off";
             when worse_off => return "Worse off";
             when about_same => return "About same";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Fisitc_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Fisitc_Type( i : String ) return Fisitc_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return better_off;
         elsif i = "2" then
            return worse_off;
         elsif i = "3" then
            return about_same;
        end if;
        Put_Line("Convert_Fisitc_Type: Unmatched string |" & i & "|" );
        return Fisitc_Type'First; -- never actually gets here; for compiler only
    end Convert_Fisitc_Type;



    function Pretty_Print( i : Fisitx_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when better_than_now => return "Better than now";
             when worse_than_now => return "Worse than now";
             when about_the_same => return "About the same";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Fisitx_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Fisitx_Type( i : String ) return Fisitx_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return better_than_now;
         elsif i = "2" then
            return worse_than_now;
         elsif i = "3" then
            return about_the_same;
        end if;
        Put_Line("Convert_Fisitx_Type: Unmatched string |" & i & "|" );
        return Fisitx_Type'First; -- never actually gets here; for compiler only
    end Convert_Fisitx_Type;



    function Pretty_Print( i : Fisity_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when earnings_increased => return "Earnings increased";
             when earnings_decreased => return "Earnings decreased";
             when benefits_reduced => return "Benefits reduced";
             when investt_income_dec => return "Invest't income dec";
             when more_expenses => return "More expenses";
             when one_off_expenditure => return "One off expenditure";
             when benefits_increased => return "Benefits increased";
             when earn_lessless_expens => return "Earn less:less expens";
             when earn_moremore_expens => return "Earn more:more expens";
             when earn_moreless_benft => return "Earn more:less benft";
             when more_benftmore_expens => return "More benft:more expens";
             when less_svgssame_std_livg => return "Less svgs:same std livg";
             when good_management => return "Good management";
             when no_change_income_or_expens => return "No change income/expens";
             when investt_income_inc => return "Invest't income inc";
             when better_offother_reason => return "Better off:other reason";
             when worse_offother_reason => return "Worse off:other reason";
             when nthr_better_or_worsereason => return "Nthr better/worse:reason";
             when less_expenses => return "Less expenses";
             when windfall_payment => return "Windfall payment";
             when other => return "Other";
             when no_reason => return "No reason";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Fisity_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Fisity_Type( i : String ) return Fisity_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return earnings_increased;
         elsif i = "11" then
            return earnings_decreased;
         elsif i = "12" then
            return benefits_reduced;
         elsif i = "13" then
            return investt_income_dec;
         elsif i = "14" then
            return more_expenses;
         elsif i = "15" then
            return one_off_expenditure;
         elsif i = "2" then
            return benefits_increased;
         elsif i = "21" then
            return earn_lessless_expens;
         elsif i = "22" then
            return earn_moremore_expens;
         elsif i = "23" then
            return earn_moreless_benft;
         elsif i = "24" then
            return more_benftmore_expens;
         elsif i = "25" then
            return less_svgssame_std_livg;
         elsif i = "26" then
            return good_management;
         elsif i = "27" then
            return no_change_income_or_expens;
         elsif i = "3" then
            return investt_income_inc;
         elsif i = "31" then
            return better_offother_reason;
         elsif i = "32" then
            return worse_offother_reason;
         elsif i = "33" then
            return nthr_better_or_worsereason;
         elsif i = "4" then
            return less_expenses;
         elsif i = "5" then
            return windfall_payment;
         elsif i = "96" then
            return other;
         elsif i = "97" then
            return no_reason;
        end if;
        Put_Line("Convert_Fisity_Type: Unmatched string |" & i & "|" );
        return Fisity_Type'First; -- never actually gets here; for compiler only
    end Convert_Fisity_Type;



    function Pretty_Print( i : Fivfho_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when all_eligible_hh_intv => return "All eligible HH intv";
             when interviews_plus_proxies => return "Interviews + proxies";
             when interviews_plus_refusal => return "Interviews + refusal";
             when pxy_at_original_addr => return "Pxy at original addr";
             when phone_pxy_intvw_only => return "Phone pxy intvw only";
             when youth_interview_only => return "Youth Interview only";
             when docs_missing_or_unus => return "Docs missing or unus";
             when address_not_found => return "Address not found";
             when no_hh_member_contact => return "No HH member contact";
             when refus_to_rsrch_cntre => return "Refus to Rsrch Cntre";
             when refusal_to_intviewer => return "Refusal to intviewer";
             when language_problems => return "Language problems";
             when no_intv_age_or_health => return "No intv.: Age/health";
             when missing_person_refusal => return "Missing person refusal";
             when moved_prev_wave_add => return "Moved prev wave add";
             when out_scope_institutn => return "Out scope-institut'n";
             when moved_out_of_scope => return "Moved out of scope";
             when whole_hh_deceased => return "Whole HH deceased";
             when no_psms_resident => return "No PSM's resident";
             when adamant_refusal => return "Adamant refusal";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Fivfho_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Fivfho_Type( i : String ) return Fivfho_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "10" then
            return all_eligible_hh_intv;
         elsif i = "11" then
            return interviews_plus_proxies;
         elsif i = "12" then
            return interviews_plus_refusal;
         elsif i = "15" then
            return pxy_at_original_addr;
         elsif i = "16" then
            return phone_pxy_intvw_only;
         elsif i = "17" then
            return youth_interview_only;
         elsif i = "39" then
            return docs_missing_or_unus;
         elsif i = "50" then
            return address_not_found;
         elsif i = "51" then
            return no_hh_member_contact;
         elsif i = "60" then
            return refus_to_rsrch_cntre;
         elsif i = "61" then
            return refusal_to_intviewer;
         elsif i = "62" then
            return language_problems;
         elsif i = "63" then
            return no_intv_age_or_health;
         elsif i = "64" then
            return missing_person_refusal;
         elsif i = "70" then
            return moved_prev_wave_add;
         elsif i = "80" then
            return out_scope_institutn;
         elsif i = "81" then
            return moved_out_of_scope;
         elsif i = "90" then
            return whole_hh_deceased;
         elsif i = "91" then
            return no_psms_resident;
         elsif i = "92" then
            return adamant_refusal;
        end if;
        Put_Line("Convert_Fivfho_Type: Unmatched string |" & i & "|" );
        return Fivfho_Type'First; -- never actually gets here; for compiler only
    end Convert_Fivfho_Type;



    function Pretty_Print( i : Fiyrdi_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when var_proxy_resp => return "Var Proxy resp";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when nothing => return "Nothing";
             when under_100_pounds => return "Under 100 pounds";
             when s_100_1000_pounds => return "100-1000 pounds";
             when s_1000_plus_pounds => return "1000+ pounds";
             when gbp_1000_plus => return "£ 1000 +";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Fiyrdi_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when var_proxy_resp => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Fiyrdi_Type( i : String ) return Fiyrdi_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return var_proxy_resp;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return nothing;
         elsif i = "2" then
            return under_100_pounds;
         elsif i = "3" then
            return s_100_1000_pounds;
         elsif i = "4" then
            return s_1000_plus_pounds;
         elsif i = "5" then
            return gbp_1000_plus;
        end if;
        Put_Line("Convert_Fiyrdi_Type: Unmatched string |" & i & "|" );
        return Fiyrdi_Type'First; -- never actually gets here; for compiler only
    end Convert_Fiyrdi_Type;



    function Pretty_Print( i : Fiyrdia_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when nothing => return "Nothing";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Fiyrdia_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Fiyrdia_Type( i : String ) return Fiyrdia_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return nothing;
        end if;
        Put_Line("Convert_Fiyrdia_Type: Unmatched string |" & i & "|" );
        return Fiyrdia_Type'First; -- never actually gets here; for compiler only
    end Convert_Fiyrdia_Type;



    function Pretty_Print( i : Fiyrdii_Type ) return String is
    begin
         case i is
             when var_dont_know => return "Var Don't Know";
             when var_refused => return "Var Refused";
             when blank => return "";
             when var_proxy_resp => return "Var Proxy resp";
             when var_inapplicable => return "Var Inapplicable";
             when var_missing_or_wild => return "Var Missing or wild";
             when not_imputed => return "Not Imputed";
             when imputed => return "Imputed";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Fiyrdii_Type ) return Boolean is
    begin
         case i is
             when var_dont_know => return True;
             when var_refused => return True;
             when blank => return True;
             when var_proxy_resp => return True;
             when var_inapplicable => return True;
             when var_missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Fiyrdii_Type( i : String ) return Fiyrdii_Type is
    begin
         if i = "-1" then
            return var_dont_know;
         elsif i = "-2" then
            return var_refused;
         elsif i = "-3" then
            return blank;
         elsif i = "-7" then
            return var_proxy_resp;
         elsif i = "-8" then
            return var_inapplicable;
         elsif i = "-9" then
            return var_missing_or_wild;
         elsif i = "0" then
            return not_imputed;
         elsif i = "1" then
            return imputed;
        end if;
        Put_Line("Convert_Fiyrdii_Type: Unmatched string |" & i & "|" );
        return Fiyrdii_Type'First; -- never actually gets here; for compiler only
    end Convert_Fiyrdii_Type;



    function Pretty_Print( i : Fiyrdiu_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when gbp_1000_gbp_2500 => return "£ 1000 - £ 2500";
             when gbp_2501_gbp_4999 => return "£ 2501 - £ 4999";
             when gbp_5000_gbp_10000 => return "£ 5000 - £ 10000";
             when gt_gbp_10000 => return "> £ 10000";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Fiyrdiu_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Fiyrdiu_Type( i : String ) return Fiyrdiu_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return gbp_1000_gbp_2500;
         elsif i = "2" then
            return gbp_2501_gbp_4999;
         elsif i = "3" then
            return gbp_5000_gbp_10000;
         elsif i = "4" then
            return gt_gbp_10000;
        end if;
        Put_Line("Convert_Fiyrdiu_Type: Unmatched string |" & i & "|" );
        return Fiyrdiu_Type'First; -- never actually gets here; for compiler only
    end Convert_Fiyrdiu_Type;



    function Pretty_Print( i : Fpid_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when father_not_in_hh => return "Father not in hh";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Fpid_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Fpid_Type( i : String ) return Fpid_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return father_not_in_hh;
        end if;
        Put_Line("Convert_Fpid_Type: Unmatched string |" & i & "|" );
        return Fpid_Type'First; -- never actually gets here; for compiler only
    end Convert_Fpid_Type;



    function Pretty_Print( i : Fr18_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when no => return "No";
             when yes => return "Yes";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Fr18_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Fr18_Type( i : String ) return Fr18_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return no;
         elsif i = "2" then
            return no;
         elsif i = "1" then
            return yes;
        end if;
        Put_Line("Convert_Fr18_Type: Unmatched string |" & i & "|" );
        return Fr18_Type'First; -- never actually gets here; for compiler only
    end Convert_Fr18_Type;



    function Pretty_Print( i : Frall_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when every_month => return "Every month";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Frall_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Frall_Type( i : String ) return Frall_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return every_month;
        end if;
        Put_Line("Convert_Frall_Type: Unmatched string |" & i & "|" );
        return Frall_Type'First; -- never actually gets here; for compiler only
    end Convert_Frall_Type;



    function Pretty_Print( i : Frec01_Type ) return String is
    begin
         case i is
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when no => return "No";
             when yes => return "Yes";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Frec01_Type ) return Boolean is
    begin
         case i is
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Frec01_Type( i : String ) return Frec01_Type is
    begin
         if i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return no;
         elsif i = "1" then
            return yes;
        end if;
        Put_Line("Convert_Frec01_Type: Unmatched string |" & i & "|" );
        return Frec01_Type'First; -- never actually gets here; for compiler only
    end Convert_Frec01_Type;



    function Pretty_Print( i : Frjt_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when sole => return "Sole";
             when joint => return "Joint";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Frjt_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Frjt_Type( i : String ) return Frjt_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return sole;
         elsif i = "2" then
            return joint;
        end if;
        Put_Line("Convert_Frjt_Type: Unmatched string |" & i & "|" );
        return Frjt_Type'First; -- never actually gets here; for compiler only
    end Convert_Frjt_Type;



    function Pretty_Print( i : Frjtvf_Type ) return String is
    begin
         case i is
             when missing_or_wild => return "Missing or wild";
             when sole_edited => return "Sole (edited)";
             when joint_edited => return "Joint (edited)";
             when joint_missing_data => return "Joint - missing data";
             when jnt_rcpnt_rep_sole => return "Jnt Rcpnt rep sole";
             when close_match => return "Close match";
             when diff_months => return "Diff months";
             when diff_amounts => return "Diff amounts";
             when mismatch => return "Mismatch?";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Frjtvf_Type ) return Boolean is
    begin
         case i is
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Frjtvf_Type( i : String ) return Frjtvf_Type is
    begin
         if i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return sole_edited;
         elsif i = "2" then
            return joint_edited;
         elsif i = "3" then
            return joint_missing_data;
         elsif i = "4" then
            return jnt_rcpnt_rep_sole;
         elsif i = "5" then
            return close_match;
         elsif i = "6" then
            return diff_months;
         elsif i = "7" then
            return diff_amounts;
         elsif i = "8" then
            return mismatch;
        end if;
        Put_Line("Convert_Frjtvf_Type: Unmatched string |" & i & "|" );
        return Frjtvf_Type'First; -- never actually gets here; for compiler only
    end Convert_Frjtvf_Type;



    function Pretty_Print( i : Frna_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when on_most_days => return "On most days";
             when once_or_twice_a_week => return "Once or twice a week";
             when once_or_twice_a_month => return "Once or twice a month";
             when less_than_once_a_month => return "Less than once a month";
             when never => return "Never";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Frna_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Frna_Type( i : String ) return Frna_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return on_most_days;
         elsif i = "2" then
            return once_or_twice_a_week;
         elsif i = "3" then
            return once_or_twice_a_month;
         elsif i = "4" then
            return less_than_once_a_month;
         elsif i = "5" then
            return never;
        end if;
        Put_Line("Convert_Frna_Type: Unmatched string |" & i & "|" );
        return Frna_Type'First; -- never actually gets here; for compiler only
    end Convert_Frna_Type;



    function Pretty_Print( i : Frnd_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when every => return "All";
             when the_majority => return "The majority";
             when about_half => return "About half";
             when a_minority => return "A minority";
             when none => return "None";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Frnd_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Frnd_Type( i : String ) return Frnd_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return every;
         elsif i = "2" then
            return the_majority;
         elsif i = "3" then
            return about_half;
         elsif i = "4" then
            return a_minority;
         elsif i = "5" then
            return none;
        end if;
        Put_Line("Convert_Frnd_Type: Unmatched string |" & i & "|" );
        return Frnd_Type'First; -- never actually gets here; for compiler only
    end Convert_Frnd_Type;



    function Pretty_Print( i : Frnow_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when yes => return "Yes";
             when no => return "No";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Frnow_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Frnow_Type( i : String ) return Frnow_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
        end if;
        Put_Line("Convert_Frnow_Type: Unmatched string |" & i & "|" );
        return Frnow_Type'First; -- never actually gets here; for compiler only
    end Convert_Frnow_Type;



    function Pretty_Print( i : Frval_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when incl_tot_elswhre => return "Incl tot elswhre";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when s_9997_or_above => return "9997 or above";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Frval_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when incl_tot_elswhre => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Frval_Type( i : String ) return Frval_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-3" then
            return incl_tot_elswhre;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "9997" then
            return s_9997_or_above;
        end if;
        Put_Line("Convert_Frval_Type: Unmatched string |" & i & "|" );
        return Frval_Type'First; -- never actually gets here; for compiler only
    end Convert_Frval_Type;



    function Pretty_Print( i : Frvali_Type ) return String is
    begin
         case i is
             when var_dont_know => return "Var Don't Know";
             when var_refused => return "Var Refused";
             when var_inc_tot_elsw => return "Var inc tot elsw";
             when var_inapplicable => return "Var Inapplicable";
             when var_missing_or_wild => return "Var Missing or wild";
             when not_imputed => return "Not Imputed";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Frvali_Type ) return Boolean is
    begin
         case i is
             when var_dont_know => return True;
             when var_refused => return True;
             when var_inc_tot_elsw => return True;
             when var_inapplicable => return True;
             when var_missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Frvali_Type( i : String ) return Frvali_Type is
    begin
         if i = "-1" then
            return var_dont_know;
         elsif i = "-2" then
            return var_refused;
         elsif i = "-3" then
            return var_inc_tot_elsw;
         elsif i = "-8" then
            return var_inapplicable;
         elsif i = "-9" then
            return var_missing_or_wild;
         elsif i = "0" then
            return not_imputed;
        end if;
        Put_Line("Convert_Frvali_Type: Unmatched string |" & i & "|" );
        return Frvali_Type'First; -- never actually gets here; for compiler only
    end Convert_Frvali_Type;



    function Pretty_Print( i : Frw_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when period_uncodeable => return "Period uncodeable";
             when one_off_payment => return "One-off payment";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Frw_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when period_uncodeable => return True;
             when one_off_payment => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Frw_Type( i : String ) return Frw_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-3" then
            return period_uncodeable;
         elsif i = "-4" then
            return one_off_payment;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
        end if;
        Put_Line("Convert_Frw_Type: Unmatched string |" & i & "|" );
        return Frw_Type'First; -- never actually gets here; for compiler only
    end Convert_Frw_Type;



    function Pretty_Print( i : Ftexa_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when parents => return "Parent(s)";
             when child => return "Child";
             when curr_sep_spse => return "Curr (sep) spse";
             when ex_spouse => return "Ex-spouse";
             when pars_in_law => return "Par(s)-in-law";
             when other_relative => return "Other relative";
             when other_individual => return "Other individual";
             when organization => return "Organization";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ftexa_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ftexa_Type( i : String ) return Ftexa_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return parents;
         elsif i = "2" then
            return child;
         elsif i = "3" then
            return curr_sep_spse;
         elsif i = "4" then
            return ex_spouse;
         elsif i = "5" then
            return pars_in_law;
         elsif i = "6" then
            return other_relative;
         elsif i = "7" then
            return other_individual;
         elsif i = "8" then
            return organization;
         elsif i = "96" then
            return other;
        end if;
        Put_Line("Convert_Ftexa_Type: Unmatched string |" & i & "|" );
        return Ftexa_Type'First; -- never actually gets here; for compiler only
    end Convert_Ftexa_Type;



    function Pretty_Print( i : Ftexa1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when maintenance => return "Maintenance";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ftexa1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ftexa1_Type( i : String ) return Ftexa1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return maintenance;
        end if;
        Put_Line("Convert_Ftexa1_Type: Unmatched string |" & i & "|" );
        return Ftexa1_Type'First; -- never actually gets here; for compiler only
    end Convert_Ftexa1_Type;



    function Pretty_Print( i : Ftexa2_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when hh_bills => return "HH bills";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ftexa2_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ftexa2_Type( i : String ) return Ftexa2_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return hh_bills;
        end if;
        Put_Line("Convert_Ftexa2_Type: Unmatched string |" & i & "|" );
        return Ftexa2_Type'First; -- never actually gets here; for compiler only
    end Convert_Ftexa2_Type;



    function Pretty_Print( i : Ftexa3_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when educ_or_grant => return "Educ/grant";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ftexa3_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ftexa3_Type( i : String ) return Ftexa3_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return educ_or_grant;
        end if;
        Put_Line("Convert_Ftexa3_Type: Unmatched string |" & i & "|" );
        return Ftexa3_Type'First; -- never actually gets here; for compiler only
    end Convert_Ftexa3_Type;



    function Pretty_Print( i : Ftexa4_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when spend_money_or_allow => return "Spend money/allow";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ftexa4_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ftexa4_Type( i : String ) return Ftexa4_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return spend_money_or_allow;
        end if;
        Put_Line("Convert_Ftexa4_Type: Unmatched string |" & i & "|" );
        return Ftexa4_Type'First; -- never actually gets here; for compiler only
    end Convert_Ftexa4_Type;



    function Pretty_Print( i : Ftexa5_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when repay_loan => return "Repay loan";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ftexa5_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ftexa5_Type( i : String ) return Ftexa5_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return repay_loan;
        end if;
        Put_Line("Convert_Ftexa5_Type: Unmatched string |" & i & "|" );
        return Ftexa5_Type'First; -- never actually gets here; for compiler only
    end Convert_Ftexa5_Type;



    function Pretty_Print( i : Ftexa6_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ftexa6_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ftexa6_Type( i : String ) return Ftexa6_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return other;
        end if;
        Put_Line("Convert_Ftexa6_Type: Unmatched string |" & i & "|" );
        return Ftexa6_Type'First; -- never actually gets here; for compiler only
    end Convert_Ftexa6_Type;



    function Pretty_Print( i : Ftexaw_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when period_uncodeable => return "Period uncodeable";
             when one_off_payment => return "One-off payment";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when weekly => return "Weekly";
             when fortnightly => return "Fortnightly";
             when monthly => return "Monthly";
             when yearly => return "Yearly";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ftexaw_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when period_uncodeable => return True;
             when one_off_payment => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ftexaw_Type( i : String ) return Ftexaw_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-3" then
            return period_uncodeable;
         elsif i = "-5" then
            return one_off_payment;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return weekly;
         elsif i = "2" then
            return fortnightly;
         elsif i = "3" then
            return monthly;
         elsif i = "4" then
            return yearly;
        end if;
        Put_Line("Convert_Ftexaw_Type: Unmatched string |" & i & "|" );
        return Ftexaw_Type'First; -- never actually gets here; for compiler only
    end Convert_Ftexaw_Type;



    function Pretty_Print( i : Ftexb_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when no_2nd_recipient => return "No 2nd recipient";
             when parents => return "Parent(s)";
             when child => return "Child";
             when curr_sep_spse => return "Curr (sep) spse";
             when ex_spouse => return "Ex-spouse";
             when pars_in_law => return "Par(s)-in-law";
             when other_relative => return "Other relative";
             when other_individual => return "Other individual";
             when organization => return "Organization";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ftexb_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ftexb_Type( i : String ) return Ftexb_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return no_2nd_recipient;
         elsif i = "1" then
            return parents;
         elsif i = "2" then
            return child;
         elsif i = "3" then
            return curr_sep_spse;
         elsif i = "4" then
            return ex_spouse;
         elsif i = "5" then
            return pars_in_law;
         elsif i = "6" then
            return other_relative;
         elsif i = "7" then
            return other_individual;
         elsif i = "8" then
            return organization;
         elsif i = "96" then
            return other;
        end if;
        Put_Line("Convert_Ftexb_Type: Unmatched string |" & i & "|" );
        return Ftexb_Type'First; -- never actually gets here; for compiler only
    end Convert_Ftexb_Type;



    function Pretty_Print( i : Ftexc_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when no_3rd_recipient => return "No 3rd recipient";
             when parents => return "Parent(s)";
             when child => return "Child";
             when curr_sep_spse => return "Curr (sep) spse";
             when ex_spouse => return "Ex-spouse";
             when pars_in_law => return "Par(s)-in-law";
             when other_relative => return "Other relative";
             when other_individual => return "Other individual";
             when organization => return "Organization";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ftexc_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ftexc_Type( i : String ) return Ftexc_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return no_3rd_recipient;
         elsif i = "1" then
            return parents;
         elsif i = "2" then
            return child;
         elsif i = "3" then
            return curr_sep_spse;
         elsif i = "4" then
            return ex_spouse;
         elsif i = "5" then
            return pars_in_law;
         elsif i = "6" then
            return other_relative;
         elsif i = "7" then
            return other_individual;
         elsif i = "8" then
            return organization;
         elsif i = "96" then
            return other;
        end if;
        Put_Line("Convert_Ftexc_Type: Unmatched string |" & i & "|" );
        return Ftexc_Type'First; -- never actually gets here; for compiler only
    end Convert_Ftexc_Type;



    function Pretty_Print( i : Fthh11_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when rent => return "Rent";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Fthh11_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Fthh11_Type( i : String ) return Fthh11_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return rent;
        end if;
        Put_Line("Convert_Fthh11_Type: Unmatched string |" & i & "|" );
        return Fthh11_Type'First; -- never actually gets here; for compiler only
    end Convert_Fthh11_Type;



    function Pretty_Print( i : Fthh12_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when housekeeping => return "Housekeeping";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Fthh12_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Fthh12_Type( i : String ) return Fthh12_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return housekeeping;
        end if;
        Put_Line("Convert_Fthh12_Type: Unmatched string |" & i & "|" );
        return Fthh12_Type'First; -- never actually gets here; for compiler only
    end Convert_Fthh12_Type;



    function Pretty_Print( i : Fthh13_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when board_and_keep => return "Board and keep";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Fthh13_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Fthh13_Type( i : String ) return Fthh13_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return board_and_keep;
        end if;
        Put_Line("Convert_Fthh13_Type: Unmatched string |" & i & "|" );
        return Fthh13_Type'First; -- never actually gets here; for compiler only
    end Convert_Fthh13_Type;



    function Pretty_Print( i : Fthh14_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when pers_spending_or_allow => return "Pers spending/allow";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Fthh14_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Fthh14_Type( i : String ) return Fthh14_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return pers_spending_or_allow;
        end if;
        Put_Line("Convert_Fthh14_Type: Unmatched string |" & i & "|" );
        return Fthh14_Type'First; -- never actually gets here; for compiler only
    end Convert_Fthh14_Type;



    function Pretty_Print( i : Fthh15_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when hh_bills_or_food => return "HH bills/food";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Fthh15_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Fthh15_Type( i : String ) return Fthh15_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return hh_bills_or_food;
        end if;
        Put_Line("Convert_Fthh15_Type: Unmatched string |" & i & "|" );
        return Fthh15_Type'First; -- never actually gets here; for compiler only
    end Convert_Fthh15_Type;



    function Pretty_Print( i : Fthh1v_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when s_9997_or_above => return "9997 or above";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Fthh1v_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Fthh1v_Type( i : String ) return Fthh1v_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "9997" then
            return s_9997_or_above;
        end if;
        Put_Line("Convert_Fthh1v_Type: Unmatched string |" & i & "|" );
        return Fthh1v_Type'First; -- never actually gets here; for compiler only
    end Convert_Fthh1v_Type;



    function Pretty_Print( i : Fthh1w_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when period_uncodeable => return "Period uncodeable";
             when one_off_payment => return "One-off payment";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Fthh1w_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when period_uncodeable => return True;
             when one_off_payment => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Fthh1w_Type( i : String ) return Fthh1w_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-3" then
            return period_uncodeable;
         elsif i = "-5" then
            return one_off_payment;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
        end if;
        Put_Line("Convert_Fthh1w_Type: Unmatched string |" & i & "|" );
        return Fthh1w_Type'First; -- never actually gets here; for compiler only
    end Convert_Fthh1w_Type;



    function Pretty_Print( i : Fthh2_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when none => return "None";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Fthh2_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Fthh2_Type( i : String ) return Fthh2_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return none;
        end if;
        Put_Line("Convert_Fthh2_Type: Unmatched string |" & i & "|" );
        return Fthh2_Type'First; -- never actually gets here; for compiler only
    end Convert_Fthh2_Type;



    function Pretty_Print( i : Fthh24_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when personal_spending => return "Personal spending";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Fthh24_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Fthh24_Type( i : String ) return Fthh24_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return personal_spending;
        end if;
        Put_Line("Convert_Fthh24_Type: Unmatched string |" & i & "|" );
        return Fthh24_Type'First; -- never actually gets here; for compiler only
    end Convert_Fthh24_Type;



    function Pretty_Print( i : Fthh2w_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when period_uncodeable => return "Period uncodeable";
             when one_off_paymnt => return "One off pay'mnt";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Fthh2w_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when period_uncodeable => return True;
             when one_off_paymnt => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Fthh2w_Type( i : String ) return Fthh2w_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-3" then
            return period_uncodeable;
         elsif i = "-5" then
            return one_off_paymnt;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
        end if;
        Put_Line("Convert_Fthh2w_Type: Unmatched string |" & i & "|" );
        return Fthh2w_Type'First; -- never actually gets here; for compiler only
    end Convert_Fthh2w_Type;



    function Pretty_Print( i : Fthh3w_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when period_uncodeable => return "Period uncodeable";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Fthh3w_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when period_uncodeable => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Fthh3w_Type( i : String ) return Fthh3w_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-3" then
            return period_uncodeable;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
        end if;
        Put_Line("Convert_Fthh3w_Type: Unmatched string |" & i & "|" );
        return Fthh3w_Type'First; -- never actually gets here; for compiler only
    end Convert_Fthh3w_Type;



    function Pretty_Print( i : Futra_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when doesnt_apply => return "Doesn't apply";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Futra_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when doesnt_apply => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Futra_Type( i : String ) return Futra_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-3" then
            return doesnt_apply;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
        end if;
        Put_Line("Convert_Futra_Type: Unmatched string |" & i & "|" );
        return Futra_Type'First; -- never actually gets here; for compiler only
    end Convert_Futra_Type;



    function Pretty_Print( i : Gasway_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when slot_or_key_meter => return "Slot/key meter";
             when account => return "Account";
             when board_budgeting_scheme => return "Board budgeting scheme";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Gasway_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Gasway_Type( i : String ) return Gasway_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return slot_or_key_meter;
         elsif i = "2" then
            return account;
         elsif i = "3" then
            return board_budgeting_scheme;
         elsif i = "4" then
            return other;
         elsif i = "5" then
            return other;
        end if;
        Put_Line("Convert_Gasway_Type: Unmatched string |" & i & "|" );
        return Gasway_Type'First; -- never actually gets here; for compiler only
    end Convert_Gasway_Type;



    function Pretty_Print( i : Gelec_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when yes_already_buy => return "Yes, already buy";
             when yes_considering => return "Yes, considering";
             when no_neither => return "No, neither";
             when considered_and_rejected => return "Considered and rejected";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Gelec_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Gelec_Type( i : String ) return Gelec_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return yes_already_buy;
         elsif i = "2" then
            return yes_considering;
         elsif i = "3" then
            return no_neither;
         elsif i = "4" then
            return considered_and_rejected;
        end if;
        Put_Line("Convert_Gelec_Type: Unmatched string |" & i & "|" );
        return Gelec_Type'First; -- never actually gets here; for compiler only
    end Convert_Gelec_Type;



    function Pretty_Print( i : Gfuela_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when yes_fitted => return "Yes, fitted";
             when yes_considering => return "Yes, considering";
             when no => return "No";
             when considered_and_rejected => return "Considered and rejected";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Gfuela_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Gfuela_Type( i : String ) return Gfuela_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return yes_fitted;
         elsif i = "2" then
            return yes_considering;
         elsif i = "3" then
            return no;
         elsif i = "4" then
            return considered_and_rejected;
        end if;
        Put_Line("Convert_Gfuela_Type: Unmatched string |" & i & "|" );
        return Gfuela_Type'First; -- never actually gets here; for compiler only
    end Convert_Gfuela_Type;



    function Pretty_Print( i : Ghqa_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when better_thn_usual => return "Better thn usual";
             when same_as_usual => return "Same as usual";
             when less_than_usual => return "Less than usual";
             when much_less_thn_usual => return "Much less thn usual";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ghqa_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ghqa_Type( i : String ) return Ghqa_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return better_thn_usual;
         elsif i = "2" then
            return same_as_usual;
         elsif i = "3" then
            return less_than_usual;
         elsif i = "4" then
            return much_less_thn_usual;
        end if;
        Put_Line("Convert_Ghqa_Type: Unmatched string |" & i & "|" );
        return Ghqa_Type'First; -- never actually gets here; for compiler only
    end Convert_Ghqa_Type;



    function Pretty_Print( i : Ghqb_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_at_all => return "Not at all";
             when no_more_thn_usual => return "No more thn usual";
             when rather_more => return "Rather more";
             when much_more => return "Much more";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ghqb_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ghqb_Type( i : String ) return Ghqb_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return not_at_all;
         elsif i = "2" then
            return no_more_thn_usual;
         elsif i = "3" then
            return rather_more;
         elsif i = "4" then
            return much_more;
        end if;
        Put_Line("Convert_Ghqb_Type: Unmatched string |" & i & "|" );
        return Ghqb_Type'First; -- never actually gets here; for compiler only
    end Convert_Ghqb_Type;



    function Pretty_Print( i : Ghqc_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when more_than_usual => return "More than usual";
             when same_as_usual => return "Same as usual";
             when less_so => return "Less so";
             when much_less => return "Much less";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ghqc_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ghqc_Type( i : String ) return Ghqc_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return more_than_usual;
         elsif i = "2" then
            return same_as_usual;
         elsif i = "3" then
            return less_so;
         elsif i = "4" then
            return much_less;
        end if;
        Put_Line("Convert_Ghqc_Type: Unmatched string |" & i & "|" );
        return Ghqc_Type'First; -- never actually gets here; for compiler only
    end Convert_Ghqc_Type;



    function Pretty_Print( i : Ghqe_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_at_all => return "Not at all";
             when no_more_than_usual => return "No more than usual";
             when rather_more => return "Rather more";
             when much_more => return "Much more";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ghqe_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ghqe_Type( i : String ) return Ghqe_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return not_at_all;
         elsif i = "2" then
            return no_more_than_usual;
         elsif i = "3" then
            return rather_more;
         elsif i = "4" then
            return much_more;
        end if;
        Put_Line("Convert_Ghqe_Type: Unmatched string |" & i & "|" );
        return Ghqe_Type'First; -- never actually gets here; for compiler only
    end Convert_Ghqe_Type;



    function Pretty_Print( i : Givfho_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when all_eligible_hh_intv => return "All eligible HH intv";
             when interviews_plus_proxies => return "Interviews + proxies";
             when interviews_plus_refusal => return "Interviews + refusal";
             when pxy_at_original_addr => return "Pxy at original addr";
             when phone_pxy_intvw_only => return "Phone pxy intvw only";
             when youth_interview_only => return "Youth Interview only";
             when docs_missing_or_unus => return "Docs missing or unus";
             when address_not_found => return "Address not found";
             when no_hh_member_contact => return "No HH member contact";
             when refus_to_rsrch_cntre => return "Refus to Rsrch Cntre";
             when refusal_to_intviewer => return "Refusal to intviewer";
             when language_problems => return "Language problems";
             when no_intv_age_or_health => return "No intv.: Age/health";
             when missing_person_refusal => return "Missing person refusal";
             when moved_prev_wave_add => return "Moved prev wave add";
             when out_scope_institutn => return "Out scope-institut'n";
             when moved_out_of_scope => return "Moved out of scope";
             when whole_hh_deceased => return "Whole HH deceased";
             when no_psms_resident => return "No PSM's resident";
             when adamant_refusal => return "Adamant refusal";
             when l_t_untraced_wdrawn => return "L-t untraced, wdrawn";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Givfho_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Givfho_Type( i : String ) return Givfho_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "10" then
            return all_eligible_hh_intv;
         elsif i = "11" then
            return interviews_plus_proxies;
         elsif i = "12" then
            return interviews_plus_refusal;
         elsif i = "15" then
            return pxy_at_original_addr;
         elsif i = "16" then
            return phone_pxy_intvw_only;
         elsif i = "17" then
            return youth_interview_only;
         elsif i = "39" then
            return docs_missing_or_unus;
         elsif i = "50" then
            return address_not_found;
         elsif i = "51" then
            return no_hh_member_contact;
         elsif i = "60" then
            return refus_to_rsrch_cntre;
         elsif i = "61" then
            return refusal_to_intviewer;
         elsif i = "62" then
            return language_problems;
         elsif i = "63" then
            return no_intv_age_or_health;
         elsif i = "64" then
            return missing_person_refusal;
         elsif i = "70" then
            return moved_prev_wave_add;
         elsif i = "80" then
            return out_scope_institutn;
         elsif i = "81" then
            return moved_out_of_scope;
         elsif i = "90" then
            return whole_hh_deceased;
         elsif i = "91" then
            return no_psms_resident;
         elsif i = "92" then
            return adamant_refusal;
         elsif i = "93" then
            return l_t_untraced_wdrawn;
        end if;
        Put_Line("Convert_Givfho_Type: Unmatched string |" & i & "|" );
        return Givfho_Type'First; -- never actually gets here; for compiler only
    end Convert_Givfho_Type;



    function Pretty_Print( i : Givfio_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when full_interview => return "Full interview";
             when refusal => return "Refusal";
             when other_non_intvw => return "Other non-intvw";
             when moved => return "Moved";
             when proxy_interview => return "Proxy interview";
             when child_under_16 => return "Child under 16";
             when youth_interview => return "Youth Interview";
             when youth_refusal => return "Youth: Refusal";
             when youth_oth_non_int => return "Youth: Oth non-int";
             when child_under_11 => return "Child under 11";
             when telephone_intvw => return "Telephone intvw";
             when refusal_or_non_int_hh => return "Refusal/non-int HH";
             when non_int_or_non_int_hh => return "Non-int/non-int HH";
             when moved_or_non_int_hh => return "Moved/non-int HH";
             when child_in_non_int_hh => return "Child in non-int HH";
             when youth_ref_or_no_int_hh => return "Youth: Ref/no-int HH";
             when youth_oth_or_no_int_hh => return "Youth: Oth/no-int HH";
             when child_u_11_no_int_hh => return "Child u 11 no-int HH";
             when refusal_or_non_cont_hh => return "Refusal/non-cont HH";
             when lang_prob_or_nc_hh => return "Lang prob/NC HH";
             when age_infirm_or_nc_hh => return "Age, infirm/NC HH";
             when non_cont_or_nc_hh => return "Non-cont/NC HH";
             when out_of_scope_or_nc_hh => return "Out of scope/NC HH";
             when institutnsd_or_nc_hh => return "Institutnsd/NC HH";
             when untraced_mover => return "Untraced mover";
             when child_ref_or_nc_hh => return "Child ref/NC HH";
             when chd_lang_prob_or_nc_hh => return "Chd lang prob/NC HH";
             when chd_infirm_or_nc_hh => return "Chd infirm/NC HH";
             when chd_non_cont_or_nc_hh => return "Chd non-cont/NC HH";
             when chd_o_o_scope_or_nc_hh => return "Chd o-o-scope/NC HH";
             when chd_instit_or_nc_hh => return "Chd instit/NC HH";
             when chd_untraced_mover => return "Chd untraced mover";
             when no_one_elig_in_hh => return "No one elig in HH";
             when prev_wave_adamant_refusl => return "Prev wave adamant refusl";
             when l_t_untraced_wdrawn => return "L-t untraced, wdrawn";
             when dead => return "Dead";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Givfio_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Givfio_Type( i : String ) return Givfio_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return full_interview;
         elsif i = "10" then
            return refusal;
         elsif i = "11" then
            return other_non_intvw;
         elsif i = "12" then
            return moved;
         elsif i = "2" then
            return proxy_interview;
         elsif i = "20" then
            return child_under_16;
         elsif i = "21" then
            return youth_interview;
         elsif i = "22" then
            return youth_refusal;
         elsif i = "23" then
            return youth_oth_non_int;
         elsif i = "24" then
            return child_under_11;
         elsif i = "3" then
            return telephone_intvw;
         elsif i = "30" then
            return refusal_or_non_int_hh;
         elsif i = "31" then
            return non_int_or_non_int_hh;
         elsif i = "32" then
            return moved_or_non_int_hh;
         elsif i = "40" then
            return child_in_non_int_hh;
         elsif i = "41" then
            return youth_ref_or_no_int_hh;
         elsif i = "42" then
            return youth_oth_or_no_int_hh;
         elsif i = "43" then
            return child_u_11_no_int_hh;
         elsif i = "50" then
            return refusal_or_non_cont_hh;
         elsif i = "51" then
            return lang_prob_or_nc_hh;
         elsif i = "52" then
            return age_infirm_or_nc_hh;
         elsif i = "53" then
            return non_cont_or_nc_hh;
         elsif i = "54" then
            return out_of_scope_or_nc_hh;
         elsif i = "55" then
            return institutnsd_or_nc_hh;
         elsif i = "56" then
            return untraced_mover;
         elsif i = "60" then
            return child_ref_or_nc_hh;
         elsif i = "61" then
            return chd_lang_prob_or_nc_hh;
         elsif i = "62" then
            return chd_infirm_or_nc_hh;
         elsif i = "63" then
            return chd_non_cont_or_nc_hh;
         elsif i = "64" then
            return chd_o_o_scope_or_nc_hh;
         elsif i = "65" then
            return chd_instit_or_nc_hh;
         elsif i = "66" then
            return chd_untraced_mover;
         elsif i = "80" then
            return no_one_elig_in_hh;
         elsif i = "81" then
            return prev_wave_adamant_refusl;
         elsif i = "82" then
            return l_t_untraced_wdrawn;
         elsif i = "99" then
            return dead;
        end if;
        Put_Line("Convert_Givfio_Type: Unmatched string |" & i & "|" );
        return Givfio_Type'First; -- never actually gets here; for compiler only
    end Convert_Givfio_Type;



    function Pretty_Print( i : Grnlfa_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when always => return "Always";
             when very_often => return "Very often";
             when quite_often => return "Quite often";
             when not_very_often => return "Not very often";
             when never => return "Never";
             when cannot_do_this => return "Cannot do this";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Grnlfa_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Grnlfa_Type( i : String ) return Grnlfa_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return always;
         elsif i = "2" then
            return very_often;
         elsif i = "3" then
            return quite_often;
         elsif i = "4" then
            return not_very_often;
         elsif i = "5" then
            return never;
         elsif i = "6" then
            return cannot_do_this;
        end if;
        Put_Line("Convert_Grnlfa_Type: Unmatched string |" & i & "|" );
        return Grnlfa_Type'First; -- never actually gets here; for compiler only
    end Convert_Grnlfa_Type;



    function Pretty_Print( i : Heatyp_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when mains_gas => return "Mains gas";
             when electricity => return "Electricity";
             when solid_fuel => return "Solid fuel";
             when oil => return "Oil";
             when something_else => return "Something else";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Heatyp_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Heatyp_Type( i : String ) return Heatyp_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return mains_gas;
         elsif i = "2" then
            return electricity;
         elsif i = "3" then
            return solid_fuel;
         elsif i = "4" then
            return oil;
         elsif i = "5" then
            return something_else;
        end if;
        Put_Line("Convert_Heatyp_Type: Unmatched string |" & i & "|" );
        return Heatyp_Type'First; -- never actually gets here; for compiler only
    end Convert_Heatyp_Type;



    function Pretty_Print( i : Hgbm_Type ) return String is
    begin
         case i is
             when dont_know => return "Dont know";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when january => return "January";
             when october => return "October";
             when november => return "November";
             when december => return "December";
             when february => return "February";
             when march => return "March";
             when april => return "April";
             when may => return "May";
             when june => return "June";
             when july => return "July";
             when august => return "August";
             when september => return "September";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hgbm_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hgbm_Type( i : String ) return Hgbm_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return january;
         elsif i = "10" then
            return october;
         elsif i = "11" then
            return november;
         elsif i = "12" then
            return december;
         elsif i = "2" then
            return february;
         elsif i = "3" then
            return march;
         elsif i = "4" then
            return april;
         elsif i = "5" then
            return may;
         elsif i = "6" then
            return june;
         elsif i = "7" then
            return july;
         elsif i = "8" then
            return august;
         elsif i = "9" then
            return september;
        end if;
        Put_Line("Convert_Hgbm_Type: Unmatched string |" & i & "|" );
        return Hgbm_Type'First; -- never actually gets here; for compiler only
    end Convert_Hgbm_Type;



    function Pretty_Print( i : Hgcia_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_absent => return "Not Absent";
             when absent_from_hh => return "Absent from HH";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hgcia_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hgcia_Type( i : String ) return Hgcia_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_absent;
         elsif i = "1" then
            return absent_from_hh;
        end if;
        Put_Line("Convert_Hgcia_Type: Unmatched string |" & i & "|" );
        return Hgcia_Type'First; -- never actually gets here; for compiler only
    end Convert_Hgcia_Type;



    function Pretty_Print( i : Hgemp_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when under_16_years => return "Under 16 years";
             when yes => return "Yes";
             when no => return "No";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hgemp_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hgemp_Type( i : String ) return Hgemp_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return under_16_years;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
        end if;
        Put_Line("Convert_Hgemp_Type: Unmatched string |" & i & "|" );
        return Hgemp_Type'First; -- never actually gets here; for compiler only
    end Convert_Hgemp_Type;



    function Pretty_Print( i : Hgest_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when under_16_years => return "Under 16 years";
             when working => return "Working";
             when unemployed => return "Unemployed";
             when retired => return "Retired";
             when family_care => return "Family care";
             when full_time_educat => return "Full-time educat";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hgest_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hgest_Type( i : String ) return Hgest_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return under_16_years;
         elsif i = "1" then
            return working;
         elsif i = "2" then
            return unemployed;
         elsif i = "3" then
            return retired;
         elsif i = "4" then
            return family_care;
         elsif i = "5" then
            return full_time_educat;
         elsif i = "6" then
            return other;
        end if;
        Put_Line("Convert_Hgest_Type: Unmatched string |" & i & "|" );
        return Hgest_Type'First; -- never actually gets here; for compiler only
    end Convert_Hgest_Type;



    function Pretty_Print( i : Hgfno_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when father_not_in_hh => return "Father not in hh";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hgfno_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hgfno_Type( i : String ) return Hgfno_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return father_not_in_hh;
        end if;
        Put_Line("Convert_Hgfno_Type: Unmatched string |" & i & "|" );
        return Hgfno_Type'First; -- never actually gets here; for compiler only
    end Convert_Hgfno_Type;



    function Pretty_Print( i : Hgjnly_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when no => return "No";
             when yes => return "Yes";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hgjnly_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hgjnly_Type( i : String ) return Hgjnly_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return no;
         elsif i = "1" then
            return yes;
        end if;
        Put_Line("Convert_Hgjnly_Type: Unmatched string |" & i & "|" );
        return Hgjnly_Type'First; -- never actually gets here; for compiler only
    end Convert_Hgjnly_Type;



    function Pretty_Print( i : Hgmno_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when mother_not_in_hh => return "Mother not in hh";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hgmno_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hgmno_Type( i : String ) return Hgmno_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return mother_not_in_hh;
        end if;
        Put_Line("Convert_Hgmno_Type: Unmatched string |" & i & "|" );
        return Hgmno_Type'First; -- never actually gets here; for compiler only
    end Convert_Hgmno_Type;



    function Pretty_Print( i : Hgr2r_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when reference_person => return "Reference person";
             when natural_bro_or_sis => return "Natural bro or sis";
             when other_bro_or_sis => return "Other bro or sis";
             when bro_or_sis_in_law => return "Bro or sis-in-law";
             when natural_parent => return "Natural parent";
             when other_parent => return "Other parent";
             when mother_or_father_in_law => return "Mother/father-in-law";
             when any_grand_parent => return "Any grand parent";
             when any_grand_child => return "Any grand child";
             when any_cousin => return "Any cousin";
             when any_aunt_or_uncle => return "Any aunt or uncle";
             when lawful_spouse => return "Lawful spouse";
             when any_nephew => return "Any nephew";
             when any_other_relative => return "Any other relative";
             when employee => return "Employee";
             when lodger_or_boarder => return "Lodger or boarder";
             when unrelated_sharer => return "Unrelated sharer";
             when live_in_partner => return "Live-in partner";
             when other => return "Other";
             when natural_child => return "Natural child";
             when adopted_child => return "Adopted child";
             when foster_child => return "Foster child";
             when step_child => return "Step-child";
             when partners_child => return "Partner's child";
             when dghter_or_son_in_law => return "Dghter or son-in-law";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hgr2r_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hgr2r_Type( i : String ) return Hgr2r_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return reference_person;
         elsif i = "10" then
            return natural_bro_or_sis;
         elsif i = "11" then
            return other_bro_or_sis;
         elsif i = "12" then
            return bro_or_sis_in_law;
         elsif i = "13" then
            return natural_parent;
         elsif i = "14" then
            return other_parent;
         elsif i = "15" then
            return mother_or_father_in_law;
         elsif i = "16" then
            return any_grand_parent;
         elsif i = "17" then
            return any_grand_child;
         elsif i = "18" then
            return any_cousin;
         elsif i = "19" then
            return any_aunt_or_uncle;
         elsif i = "2" then
            return lawful_spouse;
         elsif i = "20" then
            return any_nephew;
         elsif i = "21" then
            return any_other_relative;
         elsif i = "22" then
            return employee;
         elsif i = "23" then
            return lodger_or_boarder;
         elsif i = "24" then
            return unrelated_sharer;
         elsif i = "3" then
            return live_in_partner;
         elsif i = "30" then
            return other;
         elsif i = "4" then
            return natural_child;
         elsif i = "5" then
            return adopted_child;
         elsif i = "6" then
            return foster_child;
         elsif i = "7" then
            return step_child;
         elsif i = "8" then
            return partners_child;
         elsif i = "9" then
            return dghter_or_son_in_law;
        end if;
        Put_Line("Convert_Hgr2r_Type: Unmatched string |" & i & "|" );
        return Hgr2r_Type'First; -- never actually gets here; for compiler only
    end Convert_Hgr2r_Type;



    function Pretty_Print( i : Hgra_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when s_16_years_or_over => return "16 years or over";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hgra_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hgra_Type( i : String ) return Hgra_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return s_16_years_or_over;
        end if;
        Put_Line("Convert_Hgra_Type: Unmatched string |" & i & "|" );
        return Hgra_Type'First; -- never actually gets here; for compiler only
    end Convert_Hgra_Type;



    function Pretty_Print( i : Hgrab_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when college => return "College";
             when boarding_school => return "Boarding school";
             when work_away => return "Work away";
             when hospital => return "Hospital";
             when holiday => return "Holiday";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hgrab_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hgrab_Type( i : String ) return Hgrab_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return college;
         elsif i = "2" then
            return boarding_school;
         elsif i = "3" then
            return work_away;
         elsif i = "4" then
            return hospital;
         elsif i = "5" then
            return holiday;
         elsif i = "6" then
            return other;
        end if;
        Put_Line("Convert_Hgrab_Type: Unmatched string |" & i & "|" );
        return Hgrab_Type'First; -- never actually gets here; for compiler only
    end Convert_Hgrab_Type;



    function Pretty_Print( i : Hgsex_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when male => return "Male";
             when female => return "Female";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hgsex_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hgsex_Type( i : String ) return Hgsex_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return male;
         elsif i = "2" then
            return female;
        end if;
        Put_Line("Convert_Hgsex_Type: Unmatched string |" & i & "|" );
        return Hgsex_Type'First; -- never actually gets here; for compiler only
    end Convert_Hgsex_Type;



    function Pretty_Print( i : Hgspn_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when no_spouse_in_hh => return "No Spouse in HH";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hgspn_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hgspn_Type( i : String ) return Hgspn_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return no_spouse_in_hh;
        end if;
        Put_Line("Convert_Hgspn_Type: Unmatched string |" & i & "|" );
        return Hgspn_Type'First; -- never actually gets here; for compiler only
    end Convert_Hgspn_Type;



    function Pretty_Print( i : Hgyjn_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when s_1990 => return "1990";
             when s_1991 => return "1991";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hgyjn_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hgyjn_Type( i : String ) return Hgyjn_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return s_1990;
         elsif i = "1" then
            return s_1991;
        end if;
        Put_Line("Convert_Hgyjn_Type: Unmatched string |" & i & "|" );
        return Hgyjn_Type'First; -- never actually gets here; for compiler only
    end Convert_Hgyjn_Type;



    function Pretty_Print( i : Hhbb_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when very_often => return "Very often";
             when fairly_often => return "Fairly often";
             when not_very_often => return "Not very often";
             when never => return "Never";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hhbb_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hhbb_Type( i : String ) return Hhbb_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return very_often;
         elsif i = "2" then
            return fairly_often;
         elsif i = "3" then
            return not_very_often;
         elsif i = "4" then
            return never;
        end if;
        Put_Line("Convert_Hhbb_Type: Unmatched string |" & i & "|" );
        return Hhbb_Type'First; -- never actually gets here; for compiler only
    end Convert_Hhbb_Type;



    function Pretty_Print( i : Hhch12_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when yes => return "Yes";
             when no => return "No";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hhch12_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hhch12_Type( i : String ) return Hhch12_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
        end if;
        Put_Line("Convert_Hhch12_Type: Unmatched string |" & i & "|" );
        return Hhch12_Type'First; -- never actually gets here; for compiler only
    end Convert_Hhch12_Type;



    function Pretty_Print( i : Hhch16_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when none => return "None";
             when one => return "One";
             when two => return "Two";
             when three => return "Three";
             when four => return "Four";
             when five => return "Five";
             when six_or_more => return "Six or more";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hhch16_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hhch16_Type( i : String ) return Hhch16_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return none;
         elsif i = "1" then
            return one;
         elsif i = "2" then
            return two;
         elsif i = "3" then
            return three;
         elsif i = "4" then
            return four;
         elsif i = "5" then
            return five;
         elsif i = "6" then
            return six_or_more;
        end if;
        Put_Line("Convert_Hhch16_Type: Unmatched string |" & i & "|" );
        return Hhch16_Type'First; -- never actually gets here; for compiler only
    end Convert_Hhch16_Type;



    function Pretty_Print( i : Hhdc_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when non_int_household => return "Non-int household";
             when full_household_docs => return "Full Household Docs";
             when household_q_missing => return "Household Q Missing";
             when no_hh_q_telephone_int => return "No HH Q: Telephone int";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hhdc_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hhdc_Type( i : String ) return Hhdc_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return non_int_household;
         elsif i = "1" then
            return full_household_docs;
         elsif i = "2" then
            return household_q_missing;
         elsif i = "3" then
            return no_hh_q_telephone_int;
        end if;
        Put_Line("Convert_Hhdc_Type: Unmatched string |" & i & "|" );
        return Hhdc_Type'First; -- never actually gets here; for compiler only
    end Convert_Hhdc_Type;



    function Pretty_Print( i : Hhmem_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when wave_2_non_contact => return "Wave 2 non-contact";
             when orig_member_resident => return "Orig member resident";
             when echp_rejoiner_tsm => return "ECHP rejoiner TSM";
             when lisw_non_con_at_w9 => return "LISW non-con at W9";
             when orig_member_absent => return "Orig member absent";
             when orig_member_moved => return "Orig member moved";
             when orig_member_deceased => return "Orig member deceased";
             when new_entrant_resident => return "New entrant -resident";
             when new_entrant_absent => return "New entrant - absent";
             when orig_membr_missed_wv1 => return "Orig membr -missed wv1";
             when retired_rejoiner => return "Retired rejoiner";
             when echp_rejoiner_psm => return "ECHP rejoiner PSM";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hhmem_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hhmem_Type( i : String ) return Hhmem_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return wave_2_non_contact;
         elsif i = "1" then
            return orig_member_resident;
         elsif i = "10" then
            return echp_rejoiner_tsm;
         elsif i = "11" then
            return lisw_non_con_at_w9;
         elsif i = "2" then
            return orig_member_absent;
         elsif i = "3" then
            return orig_member_moved;
         elsif i = "4" then
            return orig_member_deceased;
         elsif i = "5" then
            return new_entrant_resident;
         elsif i = "6" then
            return new_entrant_absent;
         elsif i = "7" then
            return orig_membr_missed_wv1;
         elsif i = "8" then
            return retired_rejoiner;
         elsif i = "9" then
            return echp_rejoiner_psm;
        end if;
        Put_Line("Convert_Hhmem_Type: Unmatched string |" & i & "|" );
        return Hhmem_Type'First; -- never actually gets here; for compiler only
    end Convert_Hhmem_Type;



    function Pretty_Print( i : Hhmove_Type ) return String is
    begin
         case i is
             when w_1_non_contact_hh => return "W 1 non-contact HH";
             when inapplicable_echp => return "Inapplicable ECHP";
             when misisng => return "Misisng";
             when non_mover_hh => return "Non mover HH";
             when mover_household => return "Mover household";
             when part_mover_hh => return "Part Mover HH";
             when whole_hh_deceased => return "Whole HH deceased";
             when hh_out_of_scope => return "HH out of scope";
             when no_elig_hh_members => return "No elig. HH members";
             when unknown_status => return "Unknown status";
             when all_finloc0 => return "All FINLOC=0";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hhmove_Type ) return Boolean is
    begin
         case i is
             when w_1_non_contact_hh => return True;
             when inapplicable_echp => return True;
             when misisng => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hhmove_Type( i : String ) return Hhmove_Type is
    begin
         if i = "-3" then
            return w_1_non_contact_hh;
         elsif i = "-8" then
            return inapplicable_echp;
         elsif i = "-9" then
            return misisng;
         elsif i = "1" then
            return non_mover_hh;
         elsif i = "2" then
            return mover_household;
         elsif i = "3" then
            return part_mover_hh;
         elsif i = "4" then
            return whole_hh_deceased;
         elsif i = "5" then
            return hh_out_of_scope;
         elsif i = "6" then
            return no_elig_hh_members;
         elsif i = "8" then
            return unknown_status;
         elsif i = "9" then
            return all_finloc0;
        end if;
        Put_Line("Convert_Hhmove_Type: Unmatched string |" & i & "|" );
        return Hhmove_Type'First; -- never actually gets here; for compiler only
    end Convert_Hhmove_Type;



    function Pretty_Print( i : Hhorig_Type ) return String is
    begin
         case i is
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when original_sample => return "Original sample";
             when echp_scpr => return "ECHP - SCPR";
             when echp_ons => return "ECHP - ONS";
             when echp_ni => return "ECHP - NI";
             when wales_new_sample => return "Wales new sample";
             when scotland_new_sample => return "Scotland new sample";
             when ni_new_sample => return "N.I. new sample";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hhorig_Type ) return Boolean is
    begin
         case i is
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hhorig_Type( i : String ) return Hhorig_Type is
    begin
         if i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return original_sample;
         elsif i = "2" then
            return echp_scpr;
         elsif i = "3" then
            return echp_ons;
         elsif i = "4" then
            return echp_ni;
         elsif i = "5" then
            return wales_new_sample;
         elsif i = "6" then
            return scotland_new_sample;
         elsif i = "7" then
            return ni_new_sample;
        end if;
        Put_Line("Convert_Hhorig_Type: Unmatched string |" & i & "|" );
        return Hhorig_Type'First; -- never actually gets here; for compiler only
    end Convert_Hhorig_Type;



    function Pretty_Print( i : Hhrcyc_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when always => return "Always";
             when usually => return "Usually";
             when sometimes => return "Sometimes";
             when never => return "Never";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hhrcyc_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hhrcyc_Type( i : String ) return Hhrcyc_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return always;
         elsif i = "2" then
            return usually;
         elsif i = "3" then
            return sometimes;
         elsif i = "4" then
            return never;
        end if;
        Put_Line("Convert_Hhrcyc_Type: Unmatched string |" & i & "|" );
        return Hhrcyc_Type'First; -- never actually gets here; for compiler only
    end Convert_Hhrcyc_Type;



    function Pretty_Print( i : Hhtype_Type ) return String is
    begin
         case i is
             when missing => return "Missing";
             when single_non_elderly => return "Single Non-Elderly";
             when single_elderly => return "Single Elderly";
             when couple_no_children => return "Couple No Children";
             when couple_dep_children => return "Couple: dep children";
             when couple_non_dep_children => return "Couple: non-dep children";
             when lone_par_dep_children => return "Lone par: dep children";
             when lone_par_non_dep_children => return "Lone par: non-dep children";
             when s_2_plus_unrelated_adults => return "2+ Unrelated adults";
             when other_households => return "Other Households";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hhtype_Type ) return Boolean is
    begin
         case i is
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hhtype_Type( i : String ) return Hhtype_Type is
    begin
         if i = "-9" then
            return missing;
         elsif i = "1" then
            return single_non_elderly;
         elsif i = "2" then
            return single_elderly;
         elsif i = "3" then
            return couple_no_children;
         elsif i = "4" then
            return couple_dep_children;
         elsif i = "5" then
            return couple_non_dep_children;
         elsif i = "6" then
            return lone_par_dep_children;
         elsif i = "7" then
            return lone_par_non_dep_children;
         elsif i = "8" then
            return s_2_plus_unrelated_adults;
         elsif i = "9" then
            return other_households;
        end if;
        Put_Line("Convert_Hhtype_Type: Unmatched string |" & i & "|" );
        return Hhtype_Type'First; -- never actually gets here; for compiler only
    end Convert_Hhtype_Type;



    function Pretty_Print( i : Hhyoi_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when s_1992 => return "1992";
             when s_1993 => return "1993";
             when s_1994 => return "1994";
             when s_1995 => return "1995";
             when s_1996 => return "1996";
             when s_1997 => return "1997";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hhyoi_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hhyoi_Type( i : String ) return Hhyoi_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "92" then
            return s_1992;
         elsif i = "93" then
            return s_1993;
         elsif i = "94" then
            return s_1994;
         elsif i = "95" then
            return s_1995;
         elsif i = "96" then
            return s_1996;
         elsif i = "97" then
            return s_1997;
        end if;
        Put_Line("Convert_Hhyoi_Type: Unmatched string |" & i & "|" );
        return Hhyoi_Type'First; -- never actually gets here; for compiler only
    end Convert_Hhyoi_Type;



    function Pretty_Print( i : Hhyoi4_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when s_1994 => return "1994";
             when s_1995 => return "1995";
             when s_1996 => return "1996";
             when s_1997 => return "1997";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hhyoi4_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hhyoi4_Type( i : String ) return Hhyoi4_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "93" then
            return s_1994;
         elsif i = "94" then
            return s_1994;
         elsif i = "95" then
            return s_1995;
         elsif i = "96" then
            return s_1996;
         elsif i = "97" then
            return s_1997;
        end if;
        Put_Line("Convert_Hhyoi4_Type: Unmatched string |" & i & "|" );
        return Hhyoi4_Type'First; -- never actually gets here; for compiler only
    end Convert_Hhyoi4_Type;



    function Pretty_Print( i : Hifued_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when higher_education => return "Higher education";
             when at_school_or_college => return "At school/college";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hifued_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hifued_Type( i : String ) return Hifued_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return higher_education;
         elsif i = "2" then
            return at_school_or_college;
        end if;
        Put_Line("Convert_Hifued_Type: Unmatched string |" & i & "|" );
        return Hifued_Type'First; -- never actually gets here; for compiler only
    end Convert_Hifued_Type;



    function Pretty_Print( i : Hivfho_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when all_eligible_hh_intv => return "All eligible HH intv";
             when interviews_plus_proxies => return "Interviews + proxies";
             when interviews_plus_refusal => return "Interviews + refusal";
             when pxy_at_original_addr => return "Pxy at original addr";
             when phone_interview_only => return "Phone interview only";
             when youth_interview_only => return "Youth Interview only";
             when docs_missing_or_unus => return "Docs missing or unus";
             when address_not_found => return "Address not found";
             when no_hh_member_contact => return "No HH member contact";
             when refus_to_rsrch_cntre => return "Refus to Rsrch Cntre";
             when refusal_to_intviewer => return "Refusal to intviewer";
             when language_problems => return "Language problems";
             when no_intv_age_or_health => return "No intv.: Age/health";
             when moved_prev_wave_add => return "Moved prev wave add";
             when out_scope_institutn => return "Out scope-institut'n";
             when moved_out_of_scope => return "Moved out of scope";
             when whole_hh_deceased => return "Whole HH deceased";
             when no_psms_resident => return "No PSM's resident";
             when adamant_refusal => return "Adamant refusal";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hivfho_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hivfho_Type( i : String ) return Hivfho_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "10" then
            return all_eligible_hh_intv;
         elsif i = "11" then
            return interviews_plus_proxies;
         elsif i = "12" then
            return interviews_plus_refusal;
         elsif i = "15" then
            return pxy_at_original_addr;
         elsif i = "16" then
            return phone_interview_only;
         elsif i = "17" then
            return youth_interview_only;
         elsif i = "39" then
            return docs_missing_or_unus;
         elsif i = "50" then
            return address_not_found;
         elsif i = "51" then
            return no_hh_member_contact;
         elsif i = "60" then
            return refus_to_rsrch_cntre;
         elsif i = "61" then
            return refusal_to_intviewer;
         elsif i = "62" then
            return language_problems;
         elsif i = "63" then
            return no_intv_age_or_health;
         elsif i = "70" then
            return moved_prev_wave_add;
         elsif i = "80" then
            return out_scope_institutn;
         elsif i = "81" then
            return moved_out_of_scope;
         elsif i = "90" then
            return whole_hh_deceased;
         elsif i = "91" then
            return no_psms_resident;
         elsif i = "92" then
            return adamant_refusal;
        end if;
        Put_Line("Convert_Hivfho_Type: Unmatched string |" & i & "|" );
        return Hivfho_Type'First; -- never actually gets here; for compiler only
    end Convert_Hivfho_Type;



    function Pretty_Print( i : Hivfio_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when full_interview => return "Full interview";
             when refusal => return "Refusal";
             when other_non_intvw => return "Other non-intvw";
             when moved => return "Moved";
             when proxy_interview => return "Proxy interview";
             when child_under_16 => return "Child under 16";
             when youth_interview => return "Youth Interview";
             when youth_refusal => return "Youth: Refusal";
             when youth_oth_non_int => return "Youth: Oth non-int";
             when child_under_11 => return "Child under 11";
             when telephone_intvw => return "Telephone intvw";
             when refusal_or_non_int_hh => return "Refusal/non-int HH";
             when non_int_or_non_int_hh => return "Non-int/non-int HH";
             when moved_or_non_int_hh => return "Moved/non-int HH";
             when child_in_non_int_hh => return "Child in non-int HH";
             when youth_ref_or_no_int_hh => return "Youth: Ref/no-int HH";
             when youth_oth_or_no_int_hh => return "Youth: Oth/no-int HH";
             when child_u_11_no_int_hh => return "Child u 11 no-int HH";
             when refusal_or_non_cont_hh => return "Refusal/non-cont HH";
             when lang_prob_or_nc_hh => return "Lang prob/NC HH";
             when age_infirm_or_nc_hh => return "Age, infirm/NC HH";
             when non_cont_or_nc_hh => return "Non-cont/NC HH";
             when out_of_scope_or_nc_hh => return "Out of scope/NC HH";
             when institutnsd_or_nc_hh => return "Institutnsd/NC HH";
             when untraced_mover => return "Untraced mover";
             when child_ref_or_nc_hh => return "Child ref/NC HH";
             when chd_lang_prob_or_nc_hh => return "Chd lang prob/NC HH";
             when chd_infirm_or_nc_hh => return "Chd infirm/NC HH";
             when chd_non_cont_or_nc_hh => return "Chd non-cont/NC HH";
             when chd_o_o_scope_or_nc_hh => return "Chd o-o-scope/NC HH";
             when chd_instit_or_nc_hh => return "Chd instit/NC HH";
             when chd_untraced_mover => return "Chd untraced mover";
             when no_one_elig_in_hh => return "No one elig in HH";
             when prev_wave_adamant_re => return "Prev wave adamant re";
             when dead => return "Dead";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hivfio_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hivfio_Type( i : String ) return Hivfio_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "1" then
            return full_interview;
         elsif i = "10" then
            return refusal;
         elsif i = "11" then
            return other_non_intvw;
         elsif i = "12" then
            return moved;
         elsif i = "2" then
            return proxy_interview;
         elsif i = "20" then
            return child_under_16;
         elsif i = "21" then
            return youth_interview;
         elsif i = "22" then
            return youth_refusal;
         elsif i = "23" then
            return youth_oth_non_int;
         elsif i = "24" then
            return child_under_11;
         elsif i = "3" then
            return telephone_intvw;
         elsif i = "30" then
            return refusal_or_non_int_hh;
         elsif i = "31" then
            return non_int_or_non_int_hh;
         elsif i = "32" then
            return moved_or_non_int_hh;
         elsif i = "40" then
            return child_in_non_int_hh;
         elsif i = "41" then
            return youth_ref_or_no_int_hh;
         elsif i = "42" then
            return youth_oth_or_no_int_hh;
         elsif i = "43" then
            return child_u_11_no_int_hh;
         elsif i = "50" then
            return refusal_or_non_cont_hh;
         elsif i = "51" then
            return lang_prob_or_nc_hh;
         elsif i = "52" then
            return age_infirm_or_nc_hh;
         elsif i = "53" then
            return non_cont_or_nc_hh;
         elsif i = "54" then
            return out_of_scope_or_nc_hh;
         elsif i = "55" then
            return institutnsd_or_nc_hh;
         elsif i = "56" then
            return untraced_mover;
         elsif i = "60" then
            return child_ref_or_nc_hh;
         elsif i = "61" then
            return chd_lang_prob_or_nc_hh;
         elsif i = "62" then
            return chd_infirm_or_nc_hh;
         elsif i = "63" then
            return chd_non_cont_or_nc_hh;
         elsif i = "64" then
            return chd_o_o_scope_or_nc_hh;
         elsif i = "65" then
            return chd_instit_or_nc_hh;
         elsif i = "66" then
            return chd_untraced_mover;
         elsif i = "80" then
            return no_one_elig_in_hh;
         elsif i = "81" then
            return prev_wave_adamant_re;
         elsif i = "99" then
            return dead;
        end if;
        Put_Line("Convert_Hivfio_Type: Unmatched string |" & i & "|" );
        return Hivfio_Type'First; -- never actually gets here; for compiler only
    end Convert_Hivfio_Type;



    function Pretty_Print( i : Hl2gp_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when none => return "None";
             when one_or_two => return "One or two";
             when three_to_five => return "Three to five";
             when six_to_ten => return "Six to ten";
             when more_than_ten => return "More than ten";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hl2gp_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hl2gp_Type( i : String ) return Hl2gp_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return none;
         elsif i = "2" then
            return one_or_two;
         elsif i = "3" then
            return three_to_five;
         elsif i = "4" then
            return six_to_ten;
         elsif i = "5" then
            return more_than_ten;
        end if;
        Put_Line("Convert_Hl2gp_Type: Unmatched string |" & i & "|" );
        return Hl2gp_Type'First; -- never actually gets here; for compiler only
    end Convert_Hl2gp_Type;



    function Pretty_Print( i : Hl2hop_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when none => return "None";
             when one_or_two => return "One or two";
             when three_to_five => return "Three to five";
             when six_to_ten => return "Six to ten";
             when more_than_ten => return "More than ten";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hl2hop_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hl2hop_Type( i : String ) return Hl2hop_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return none;
         elsif i = "1" then
            return one_or_two;
         elsif i = "2" then
            return three_to_five;
         elsif i = "3" then
            return six_to_ten;
         elsif i = "4" then
            return more_than_ten;
        end if;
        Put_Line("Convert_Hl2hop_Type: Unmatched string |" & i & "|" );
        return Hl2hop_Type'First; -- never actually gets here; for compiler only
    end Convert_Hl2hop_Type;



    function Pretty_Print( i : Hlavpn_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when mild => return "Mild";
             when moderate => return "Moderate";
             when severe => return "Severe";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlavpn_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlavpn_Type( i : String ) return Hlavpn_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return mild;
         elsif i = "2" then
            return moderate;
         elsif i = "3" then
            return severe;
        end if;
        Put_Line("Convert_Hlavpn_Type: Unmatched string |" & i & "|" );
        return Hlavpn_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlavpn_Type;



    function Pretty_Print( i : Hlch_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when yes_any_child => return "Yes-any child";
             when no_all_children => return "No-all children";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlch_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlch_Type( i : String ) return Hlch_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return yes_any_child;
         elsif i = "2" then
            return no_all_children;
        end if;
        Put_Line("Convert_Hlch_Type: Unmatched string |" & i & "|" );
        return Hlch_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlch_Type;



    function Pretty_Print( i : Hlch2_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlch2_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlch2_Type( i : String ) return Hlch2_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
        end if;
        Put_Line("Convert_Hlch2_Type: Unmatched string |" & i & "|" );
        return Hlch2_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlch2_Type;



    function Pretty_Print( i : Hlcka_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when no => return "No";
             when yes => return "Yes";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlcka_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlcka_Type( i : String ) return Hlcka_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return no;
         elsif i = "1" then
            return yes;
        end if;
        Put_Line("Convert_Hlcka_Type: Unmatched string |" & i & "|" );
        return Hlcka_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlcka_Type;



    function Pretty_Print( i : Hlckan_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when nhs => return "NHS";
             when x_private => return "Private";
             when both => return "Both";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlckan_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlckan_Type( i : String ) return Hlckan_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return nhs;
         elsif i = "2" then
            return x_private;
         elsif i = "3" then
            return both;
        end if;
        Put_Line("Convert_Hlckan_Type: Unmatched string |" & i & "|" );
        return Hlckan_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlckan_Type;



    function Pretty_Print( i : Hlcki_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when yes => return "Yes";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlcki_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlcki_Type( i : String ) return Hlcki_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return yes;
        end if;
        Put_Line("Convert_Hlcki_Type: Unmatched string |" & i & "|" );
        return Hlcki_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlcki_Type;



    function Pretty_Print( i : Hlckin_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when nhs => return "NHS";
             when x_private => return "Private";
             when both => return "Both";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlckin_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlckin_Type( i : String ) return Hlckin_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return nhs;
         elsif i = "2" then
            return x_private;
         elsif i = "3" then
            return both;
        end if;
        Put_Line("Convert_Hlckin_Type: Unmatched string |" & i & "|" );
        return Hlckin_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlckin_Type;



    function Pretty_Print( i : Hlcvr_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when yes_in_own_name => return "Yes, in own name";
             when yes_via_othr_fam_mem => return "Yes,via othr fam mem";
             when no_not_insured => return "No, not insured";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlcvr_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlcvr_Type( i : String ) return Hlcvr_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return yes_in_own_name;
         elsif i = "2" then
            return yes_via_othr_fam_mem;
         elsif i = "3" then
            return no_not_insured;
        end if;
        Put_Line("Convert_Hlcvr_Type: Unmatched string |" & i & "|" );
        return Hlcvr_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlcvr_Type;



    function Pretty_Print( i : Hlcvrh_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when paid_directly => return "Paid directly";
             when deducted_from_wages => return "Deducted from wages";
             when paid_for_by_employer => return "Paid for by employer";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlcvrh_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlcvrh_Type( i : String ) return Hlcvrh_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return paid_directly;
         elsif i = "2" then
            return deducted_from_wages;
         elsif i = "3" then
            return paid_for_by_employer;
         elsif i = "4" then
            return other;
        end if;
        Put_Line("Convert_Hlcvrh_Type: Unmatched string |" & i & "|" );
        return Hlcvrh_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlcvrh_Type;



    function Pretty_Print( i : Hldsbl1_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when yes => return "Yes";
             when no => return "No";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hldsbl1_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hldsbl1_Type( i : String ) return Hldsbl1_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
        end if;
        Put_Line("Convert_Hldsbl1_Type: Unmatched string |" & i & "|" );
        return Hldsbl1_Type'First; -- never actually gets here; for compiler only
    end Convert_Hldsbl1_Type;



    function Pretty_Print( i : Hlendw_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when yes => return "Yes";
             when no => return "No";
             when can_do_nothing => return "Can do nothing";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlendw_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlendw_Type( i : String ) return Hlendw_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
         elsif i = "3" then
            return can_do_nothing;
        end if;
        Put_Line("Convert_Hlendw_Type: Unmatched string |" & i & "|" );
        return Hlendw_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlendw_Type;



    function Pretty_Print( i : Hlhtc_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing => return "Missing";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlhtc_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlhtc_Type( i : String ) return Hlhtc_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing;
        end if;
        Put_Line("Convert_Hlhtc_Type: Unmatched string |" & i & "|" );
        return Hlhtc_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlhtc_Type;



    function Pretty_Print( i : Hlhtm_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing => return "Missing";
             when feet_and_inches => return "Feet and inches";
             when metres_and_centimetres => return "Metres & centimetres";
             when cant_give_estimate => return "Can't give estimate";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlhtm_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlhtm_Type( i : String ) return Hlhtm_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return feet_and_inches;
         elsif i = "2" then
            return metres_and_centimetres;
         elsif i = "3" then
            return cant_give_estimate;
        end if;
        Put_Line("Convert_Hlhtm_Type: Unmatched string |" & i & "|" );
        return Hlhtm_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlhtm_Type;



    function Pretty_Print( i : Hliv65_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when yes => return "Yes";
             when no => return "No";
             when can_do_nothing => return "Can do nothing";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hliv65_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hliv65_Type( i : String ) return Hliv65_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
         elsif i = "3" then
            return can_do_nothing;
        end if;
        Put_Line("Convert_Hliv65_Type: Unmatched string |" & i & "|" );
        return Hliv65_Type'First; -- never actually gets here; for compiler only
    end Convert_Hliv65_Type;



    function Pretty_Print( i : Hllta_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when doing_housework => return "Doing housework";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hllta_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hllta_Type( i : String ) return Hllta_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return doing_housework;
        end if;
        Put_Line("Convert_Hllta_Type: Unmatched string |" & i & "|" );
        return Hllta_Type'First; -- never actually gets here; for compiler only
    end Convert_Hllta_Type;



    function Pretty_Print( i : Hlltb_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when climbing_stairs => return "Climbing stairs";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlltb_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlltb_Type( i : String ) return Hlltb_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return climbing_stairs;
         elsif i = "2" then
            return climbing_stairs;
        end if;
        Put_Line("Convert_Hlltb_Type: Unmatched string |" & i & "|" );
        return Hlltb_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlltb_Type;



    function Pretty_Print( i : Hlltc_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when dressing => return "Dressing";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlltc_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlltc_Type( i : String ) return Hlltc_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return dressing;
         elsif i = "3" then
            return dressing;
        end if;
        Put_Line("Convert_Hlltc_Type: Unmatched string |" & i & "|" );
        return Hlltc_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlltc_Type;



    function Pretty_Print( i : Hlltd_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when walking_10_mins => return "Walking 10 mins";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlltd_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlltd_Type( i : String ) return Hlltd_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return walking_10_mins;
         elsif i = "4" then
            return walking_10_mins;
        end if;
        Put_Line("Convert_Hlltd_Type: Unmatched string |" & i & "|" );
        return Hlltd_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlltd_Type;



    function Pretty_Print( i : Hllte_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when no => return "No";
             when something_else => return "Something else";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hllte_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hllte_Type( i : String ) return Hllte_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return no;
         elsif i = "1" then
            return something_else;
         elsif i = "5" then
            return something_else;
        end if;
        Put_Line("Convert_Hllte_Type: Unmatched string |" & i & "|" );
        return Hllte_Type'First; -- never actually gets here; for compiler only
    end Convert_Hllte_Type;



    function Pretty_Print( i : Hlltwa_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when a_lot => return "A lot";
             when somewhat => return "Somewhat";
             when just_a_little => return "Just a little";
             when not_at_all => return "Not at all";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlltwa_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlltwa_Type( i : String ) return Hlltwa_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return a_lot;
         elsif i = "2" then
            return somewhat;
         elsif i = "3" then
            return just_a_little;
         elsif i = "4" then
            return not_at_all;
        end if;
        Put_Line("Convert_Hlltwa_Type: Unmatched string |" & i & "|" );
        return Hlltwa_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlltwa_Type;



    function Pretty_Print( i : Hlprb_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when no_health_probs => return "No health probs";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlprb_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlprb_Type( i : String ) return Hlprb_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return no_health_probs;
        end if;
        Put_Line("Convert_Hlprb_Type: Unmatched string |" & i & "|" );
        return Hlprb_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlprb_Type;



    function Pretty_Print( i : Hlprb1_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when probs_wth_arms_or_legs => return "Probs wth arms/legs";
             when alcohol_or_drugs => return "Alcohol/drugs";
             when epilepsy => return "Epilepsy";
             when migrain_or_chrn_headach => return "Migrain/chrn headach";
             when other => return "Other";
             when difficulty_seeing => return "Difficulty seeing";
             when difficulty_hearing => return "Difficulty hearing";
             when skin_conds_or_allergies => return "Skin conds/allergies";
             when chest_or_breathing_probs => return "Chest/breathing probs";
             when heart_and_blood => return "Heart and blood";
             when stomach_or_liver_or_kidneys => return "Stomach/liver/kidneys";
             when diabetes => return "Diabetes";
             when nerves_or_anxiety_or_depre => return "Nerves/anxiety/depre";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlprb1_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlprb1_Type( i : String ) return Hlprb1_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return probs_wth_arms_or_legs;
         elsif i = "10" then
            return alcohol_or_drugs;
         elsif i = "11" then
            return epilepsy;
         elsif i = "12" then
            return migrain_or_chrn_headach;
         elsif i = "13" then
            return other;
         elsif i = "2" then
            return difficulty_seeing;
         elsif i = "3" then
            return difficulty_hearing;
         elsif i = "4" then
            return skin_conds_or_allergies;
         elsif i = "5" then
            return chest_or_breathing_probs;
         elsif i = "6" then
            return heart_and_blood;
         elsif i = "7" then
            return stomach_or_liver_or_kidneys;
         elsif i = "8" then
            return diabetes;
         elsif i = "9" then
            return nerves_or_anxiety_or_depre;
        end if;
        Put_Line("Convert_Hlprb1_Type: Unmatched string |" & i & "|" );
        return Hlprb1_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlprb1_Type;



    function Pretty_Print( i : Hlprb2_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when probs_wth_arms_or_legs => return "Probs wth arms/legs";
             when alcohol_or_drugs => return "Alcohol/drugs";
             when epilepsy => return "Epilepsy";
             when migrain_or_chrn_headach => return "Migrain/chrn headach";
             when other => return "Other";
             when difficulty_seeing => return "Difficulty seeing";
             when difficulty_hearing => return "Difficulty hearing";
             when skin_conds_or_allergies => return "Skin conds/allergies";
             when chest_or_breathing_probs => return "Chest/breathing probs";
             when heart_and_blood => return "Heart and blood";
             when stomach_or_liver_or_kidneys => return "Stomach/liver/kidneys";
             when diabetes => return "Diabetes";
             when nerves_or_anxiety_or_depre => return "Nerves/anxiety/depre";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlprb2_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlprb2_Type( i : String ) return Hlprb2_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return probs_wth_arms_or_legs;
         elsif i = "10" then
            return alcohol_or_drugs;
         elsif i = "11" then
            return epilepsy;
         elsif i = "12" then
            return migrain_or_chrn_headach;
         elsif i = "13" then
            return other;
         elsif i = "2" then
            return difficulty_seeing;
         elsif i = "3" then
            return difficulty_hearing;
         elsif i = "4" then
            return skin_conds_or_allergies;
         elsif i = "5" then
            return chest_or_breathing_probs;
         elsif i = "6" then
            return heart_and_blood;
         elsif i = "7" then
            return stomach_or_liver_or_kidneys;
         elsif i = "8" then
            return diabetes;
         elsif i = "9" then
            return nerves_or_anxiety_or_depre;
        end if;
        Put_Line("Convert_Hlprb2_Type: Unmatched string |" & i & "|" );
        return Hlprb2_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlprb2_Type;



    function Pretty_Print( i : Hlprba_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when probs_arms_or_legs => return "Probs arms or legs";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlprba_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlprba_Type( i : String ) return Hlprba_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return probs_arms_or_legs;
        end if;
        Put_Line("Convert_Hlprba_Type: Unmatched string |" & i & "|" );
        return Hlprba_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlprba_Type;



    function Pretty_Print( i : Hlprbb_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when difficulty_seeing => return "Difficulty seeing";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlprbb_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlprbb_Type( i : String ) return Hlprbb_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return difficulty_seeing;
         elsif i = "2" then
            return difficulty_seeing;
        end if;
        Put_Line("Convert_Hlprbb_Type: Unmatched string |" & i & "|" );
        return Hlprbb_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlprbb_Type;



    function Pretty_Print( i : Hlprbc_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when difficulty_hearing => return "Difficulty hearing";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlprbc_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlprbc_Type( i : String ) return Hlprbc_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return difficulty_hearing;
         elsif i = "3" then
            return difficulty_hearing;
        end if;
        Put_Line("Convert_Hlprbc_Type: Unmatched string |" & i & "|" );
        return Hlprbc_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlprbc_Type;



    function Pretty_Print( i : Hlprbd_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when skin_conds_allergies => return "Skin conds, allergies";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlprbd_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlprbd_Type( i : String ) return Hlprbd_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return skin_conds_allergies;
         elsif i = "4" then
            return skin_conds_allergies;
        end if;
        Put_Line("Convert_Hlprbd_Type: Unmatched string |" & i & "|" );
        return Hlprbd_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlprbd_Type;



    function Pretty_Print( i : Hlprbe_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when chest_breathing_prob => return "Chest, breathing prob";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlprbe_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlprbe_Type( i : String ) return Hlprbe_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return chest_breathing_prob;
         elsif i = "5" then
            return chest_breathing_prob;
        end if;
        Put_Line("Convert_Hlprbe_Type: Unmatched string |" & i & "|" );
        return Hlprbe_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlprbe_Type;



    function Pretty_Print( i : Hlprbf_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when heart_and_blood => return "Heart and blood";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlprbf_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlprbf_Type( i : String ) return Hlprbf_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return heart_and_blood;
         elsif i = "6" then
            return heart_and_blood;
        end if;
        Put_Line("Convert_Hlprbf_Type: Unmatched string |" & i & "|" );
        return Hlprbf_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlprbf_Type;



    function Pretty_Print( i : Hlprbg_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when stomach_liver_kidney => return "Stomach, liver, kidney";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlprbg_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlprbg_Type( i : String ) return Hlprbg_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return stomach_liver_kidney;
         elsif i = "7" then
            return stomach_liver_kidney;
        end if;
        Put_Line("Convert_Hlprbg_Type: Unmatched string |" & i & "|" );
        return Hlprbg_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlprbg_Type;



    function Pretty_Print( i : Hlprbh_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when diabetes => return "Diabetes";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlprbh_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlprbh_Type( i : String ) return Hlprbh_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return diabetes;
         elsif i = "8" then
            return diabetes;
        end if;
        Put_Line("Convert_Hlprbh_Type: Unmatched string |" & i & "|" );
        return Hlprbh_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlprbh_Type;



    function Pretty_Print( i : Hlprbi_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when anxiety_depression => return "Anxiety, depression";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlprbi_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlprbi_Type( i : String ) return Hlprbi_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return anxiety_depression;
         elsif i = "9" then
            return anxiety_depression;
        end if;
        Put_Line("Convert_Hlprbi_Type: Unmatched string |" & i & "|" );
        return Hlprbi_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlprbi_Type;



    function Pretty_Print( i : Hlprbj_Type ) return String is
    begin
         case i is
             when refused => return "Refused'";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when alcohol_drugs => return "Alcohol, drugs";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlprbj_Type ) return Boolean is
    begin
         case i is
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlprbj_Type( i : String ) return Hlprbj_Type is
    begin
         if i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return alcohol_drugs;
         elsif i = "10" then
            return alcohol_drugs;
        end if;
        Put_Line("Convert_Hlprbj_Type: Unmatched string |" & i & "|" );
        return Hlprbj_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlprbj_Type;



    function Pretty_Print( i : Hlprbk_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when epilepsy => return "Epilepsy";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlprbk_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlprbk_Type( i : String ) return Hlprbk_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return epilepsy;
         elsif i = "11" then
            return epilepsy;
        end if;
        Put_Line("Convert_Hlprbk_Type: Unmatched string |" & i & "|" );
        return Hlprbk_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlprbk_Type;



    function Pretty_Print( i : Hlprbl_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when migraine_freq_hdache => return "Migraine freq hdache";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlprbl_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlprbl_Type( i : String ) return Hlprbl_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return migraine_freq_hdache;
         elsif i = "12" then
            return migraine_freq_hdache;
        end if;
        Put_Line("Convert_Hlprbl_Type: Unmatched string |" & i & "|" );
        return Hlprbl_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlprbl_Type;



    function Pretty_Print( i : Hlprbm_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlprbm_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlprbm_Type( i : String ) return Hlprbm_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return other;
         elsif i = "13" then
            return other;
        end if;
        Put_Line("Convert_Hlprbm_Type: Unmatched string |" & i & "|" );
        return Hlprbm_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlprbm_Type;



    function Pretty_Print( i : Hlprbn_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when cancer => return "Cancer";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlprbn_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlprbn_Type( i : String ) return Hlprbn_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return cancer;
        end if;
        Put_Line("Convert_Hlprbn_Type: Unmatched string |" & i & "|" );
        return Hlprbn_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlprbn_Type;



    function Pretty_Print( i : Hlprbo_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when stroke => return "Stroke";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlprbo_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlprbo_Type( i : String ) return Hlprbo_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return stroke;
        end if;
        Put_Line("Convert_Hlprbo_Type: Unmatched string |" & i & "|" );
        return Hlprbo_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlprbo_Type;



    function Pretty_Print( i : Hlsf1_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when excellent => return "Excellent";
             when very_good => return "Very good";
             when good => return "Good";
             when fair => return "Fair";
             when poor => return "Poor";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlsf1_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlsf1_Type( i : String ) return Hlsf1_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return excellent;
         elsif i = "2" then
            return very_good;
         elsif i = "3" then
            return good;
         elsif i = "4" then
            return fair;
         elsif i = "5" then
            return poor;
        end if;
        Put_Line("Convert_Hlsf1_Type: Unmatched string |" & i & "|" );
        return Hlsf1_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlsf1_Type;



    function Pretty_Print( i : Hlsf10a_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when definitely_true => return "Definitely true";
             when mostly_true => return "Mostly true";
             when not_sure => return "Not sure";
             when mostly_false => return "Mostly false";
             when definitely_false => return "Definitely false";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlsf10a_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlsf10a_Type( i : String ) return Hlsf10a_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return definitely_true;
         elsif i = "2" then
            return mostly_true;
         elsif i = "3" then
            return not_sure;
         elsif i = "4" then
            return mostly_false;
         elsif i = "5" then
            return definitely_false;
        end if;
        Put_Line("Convert_Hlsf10a_Type: Unmatched string |" & i & "|" );
        return Hlsf10a_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlsf10a_Type;



    function Pretty_Print( i : Hlsf2_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when much_better_than_year_ago => return "Much better than year ago";
             when better_than_year_ago => return "Better than year ago";
             when about_the_same => return "About the same";
             when worse_than_year_ago => return "Worse than year ago";
             when much_worse_than_year_ago => return "Much worse than year ago";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlsf2_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlsf2_Type( i : String ) return Hlsf2_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return much_better_than_year_ago;
         elsif i = "2" then
            return better_than_year_ago;
         elsif i = "3" then
            return about_the_same;
         elsif i = "4" then
            return worse_than_year_ago;
         elsif i = "5" then
            return much_worse_than_year_ago;
        end if;
        Put_Line("Convert_Hlsf2_Type: Unmatched string |" & i & "|" );
        return Hlsf2_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlsf2_Type;



    function Pretty_Print( i : Hlsf3a_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when yes_limited_a_lot => return "Yes, limited a lot";
             when yes_ltd_a_little => return "Yes, ltd. a little";
             when no_not_ltd_at_all => return "No, not ltd. at all";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlsf3a_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlsf3a_Type( i : String ) return Hlsf3a_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return yes_limited_a_lot;
         elsif i = "2" then
            return yes_ltd_a_little;
         elsif i = "3" then
            return no_not_ltd_at_all;
        end if;
        Put_Line("Convert_Hlsf3a_Type: Unmatched string |" & i & "|" );
        return Hlsf3a_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlsf3a_Type;



    function Pretty_Print( i : Hlsf6_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when not_at_all => return "Not at all";
             when slightly => return "Slightly";
             when moderately => return "Moderately";
             when quite_a_bit => return "Quite a bit";
             when extremely => return "Extremely";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlsf6_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlsf6_Type( i : String ) return Hlsf6_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return not_at_all;
         elsif i = "2" then
            return slightly;
         elsif i = "3" then
            return moderately;
         elsif i = "4" then
            return quite_a_bit;
         elsif i = "5" then
            return extremely;
        end if;
        Put_Line("Convert_Hlsf6_Type: Unmatched string |" & i & "|" );
        return Hlsf6_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlsf6_Type;



    function Pretty_Print( i : Hlsf7_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when none => return "None";
             when very_mild => return "Very mild";
             when mild => return "Mild";
             when moderate => return "Moderate";
             when severe => return "Severe";
             when very_severe => return "Very severe";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlsf7_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlsf7_Type( i : String ) return Hlsf7_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return none;
         elsif i = "2" then
            return very_mild;
         elsif i = "3" then
            return mild;
         elsif i = "4" then
            return moderate;
         elsif i = "5" then
            return severe;
         elsif i = "6" then
            return very_severe;
        end if;
        Put_Line("Convert_Hlsf7_Type: Unmatched string |" & i & "|" );
        return Hlsf7_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlsf7_Type;



    function Pretty_Print( i : Hlsf9a_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when all_of_the_time => return "All of the time";
             when most_of_the_time => return "Most of the time";
             when a_good_bit_of_the_time => return "A good bit of the time";
             when some_of_the_time => return "Some of the time";
             when a_little_of_the_time => return "A little of the time";
             when none_of_the_time => return "None of the time";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlsf9a_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlsf9a_Type( i : String ) return Hlsf9a_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return all_of_the_time;
         elsif i = "2" then
            return most_of_the_time;
         elsif i = "3" then
            return a_good_bit_of_the_time;
         elsif i = "4" then
            return some_of_the_time;
         elsif i = "5" then
            return a_little_of_the_time;
         elsif i = "6" then
            return none_of_the_time;
        end if;
        Put_Line("Convert_Hlsf9a_Type: Unmatched string |" & i & "|" );
        return Hlsf9a_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlsf9a_Type;



    function Pretty_Print( i : Hlstat_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when excellent => return "Excellent";
             when good => return "Good";
             when fair => return "Fair";
             when poor => return "Poor";
             when very_poor => return "Very poor";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlstat_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlstat_Type( i : String ) return Hlstat_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return excellent;
         elsif i = "2" then
            return good;
         elsif i = "3" then
            return fair;
         elsif i = "4" then
            return poor;
         elsif i = "5" then
            return very_poor;
        end if;
        Put_Line("Convert_Hlstat_Type: Unmatched string |" & i & "|" );
        return Hlstat_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlstat_Type;



    function Pretty_Print( i : Hlsv_Type ) return String is
    begin
         case i is
             when cant_remember => return "Can't remember";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when yes => return "Yes";
             when no => return "No";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlsv_Type ) return Boolean is
    begin
         case i is
             when cant_remember => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlsv_Type( i : String ) return Hlsv_Type is
    begin
         if i = "-1" then
            return cant_remember;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
        end if;
        Put_Line("Convert_Hlsv_Type: Unmatched string |" & i & "|" );
        return Hlsv_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlsv_Type;



    function Pretty_Print( i : Hlsva_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when used_health_visitor => return "Used health visitor";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlsva_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlsva_Type( i : String ) return Hlsva_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return used_health_visitor;
        end if;
        Put_Line("Convert_Hlsva_Type: Unmatched string |" & i & "|" );
        return Hlsva_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlsva_Type;



    function Pretty_Print( i : Hlsvaf_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when free => return "Free";
             when paid => return "Paid";
             when both => return "Both";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlsvaf_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlsvaf_Type( i : String ) return Hlsvaf_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return free;
         elsif i = "2" then
            return paid;
         elsif i = "3" then
            return both;
        end if;
        Put_Line("Convert_Hlsvaf_Type: Unmatched string |" & i & "|" );
        return Hlsvaf_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlsvaf_Type;



    function Pretty_Print( i : Hlsvan_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when nhs_or_ssd => return "NHS or SSD";
             when private_or_voluntary => return "Private/voluntary";
             when both_nhs_and_private => return "Both NHS & private";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlsvan_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlsvan_Type( i : String ) return Hlsvan_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return nhs_or_ssd;
         elsif i = "2" then
            return private_or_voluntary;
         elsif i = "3" then
            return both_nhs_and_private;
        end if;
        Put_Line("Convert_Hlsvan_Type: Unmatched string |" & i & "|" );
        return Hlsvan_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlsvan_Type;



    function Pretty_Print( i : Hlsvb_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when has_used_home_help => return "Has used home help";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlsvb_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlsvb_Type( i : String ) return Hlsvb_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return has_used_home_help;
        end if;
        Put_Line("Convert_Hlsvb_Type: Unmatched string |" & i & "|" );
        return Hlsvb_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlsvb_Type;



    function Pretty_Print( i : Hlsvc_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when used_meals_on_wheels => return "Used meals on wheels";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlsvc_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlsvc_Type( i : String ) return Hlsvc_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return used_meals_on_wheels;
        end if;
        Put_Line("Convert_Hlsvc_Type: Unmatched string |" & i & "|" );
        return Hlsvc_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlsvc_Type;



    function Pretty_Print( i : Hlsvd_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when used_socl_wrker_etc => return "Used socl wrker etc";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlsvd_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlsvd_Type( i : String ) return Hlsvd_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return used_socl_wrker_etc;
        end if;
        Put_Line("Convert_Hlsvd_Type: Unmatched string |" & i & "|" );
        return Hlsvd_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlsvd_Type;



    function Pretty_Print( i : Hlsve_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when used_chiropodist => return "Used chiropodist";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlsve_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlsve_Type( i : String ) return Hlsve_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return used_chiropodist;
        end if;
        Put_Line("Convert_Hlsve_Type: Unmatched string |" & i & "|" );
        return Hlsve_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlsve_Type;



    function Pretty_Print( i : Hlsvf_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when used_altern_medicine => return "Used altern medicine";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlsvf_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlsvf_Type( i : String ) return Hlsvf_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return used_altern_medicine;
        end if;
        Put_Line("Convert_Hlsvf_Type: Unmatched string |" & i & "|" );
        return Hlsvf_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlsvf_Type;



    function Pretty_Print( i : Hlsvg_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when used_psychotherapist => return "Used psychotherapist";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlsvg_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlsvg_Type( i : String ) return Hlsvg_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return used_psychotherapist;
        end if;
        Put_Line("Convert_Hlsvg_Type: Unmatched string |" & i & "|" );
        return Hlsvg_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlsvg_Type;



    function Pretty_Print( i : Hlsvh_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when used_spch_therapist => return "Used spch therapist";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlsvh_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlsvh_Type( i : String ) return Hlsvh_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return used_spch_therapist;
        end if;
        Put_Line("Convert_Hlsvh_Type: Unmatched string |" & i & "|" );
        return Hlsvh_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlsvh_Type;



    function Pretty_Print( i : Hlsvi_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when used_physiotherapist => return "Used physiotherapist";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlsvi_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlsvi_Type( i : String ) return Hlsvi_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return used_physiotherapist;
        end if;
        Put_Line("Convert_Hlsvi_Type: Unmatched string |" & i & "|" );
        return Hlsvi_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlsvi_Type;



    function Pretty_Print( i : Hlsvj_Type ) return String is
    begin
         case i is
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when one_other_service => return "One other service";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlsvj_Type ) return Boolean is
    begin
         case i is
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlsvj_Type( i : String ) return Hlsvj_Type is
    begin
         if i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return one_other_service;
        end if;
        Put_Line("Convert_Hlsvj_Type: Unmatched string |" & i & "|" );
        return Hlsvj_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlsvj_Type;



    function Pretty_Print( i : Hlsvk_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when second_welfr_service => return "Second welfr service";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlsvk_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlsvk_Type( i : String ) return Hlsvk_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return second_welfr_service;
        end if;
        Put_Line("Convert_Hlsvk_Type: Unmatched string |" & i & "|" );
        return Hlsvk_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlsvk_Type;



    function Pretty_Print( i : Hlsvl_Type ) return String is
    begin
         case i is
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when used_consultant => return "Used consultant";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlsvl_Type ) return Boolean is
    begin
         case i is
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlsvl_Type( i : String ) return Hlsvl_Type is
    begin
         if i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return used_consultant;
        end if;
        Put_Line("Convert_Hlsvl_Type: Unmatched string |" & i & "|" );
        return Hlsvl_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlsvl_Type;



    function Pretty_Print( i : Hlsvlf_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when free => return "Free";
             when paid => return "Paid";
             when both => return "Both";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlsvlf_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlsvlf_Type( i : String ) return Hlsvlf_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return free;
         elsif i = "2" then
            return paid;
         elsif i = "3" then
            return both;
        end if;
        Put_Line("Convert_Hlsvlf_Type: Unmatched string |" & i & "|" );
        return Hlsvlf_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlsvlf_Type;



    function Pretty_Print( i : Hlsvln_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when nhs_or_ssd => return "NHS or SSD";
             when private_or_voluntary => return "Private/voluntary";
             when both_nhs_and_private => return "Both NHS & private";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlsvln_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlsvln_Type( i : String ) return Hlsvln_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return nhs_or_ssd;
         elsif i = "2" then
            return private_or_voluntary;
         elsif i = "3" then
            return both_nhs_and_private;
        end if;
        Put_Line("Convert_Hlsvln_Type: Unmatched string |" & i & "|" );
        return Hlsvln_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlsvln_Type;



    function Pretty_Print( i : Hlsvm_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when used_consultant => return "Used consultant";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlsvm_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlsvm_Type( i : String ) return Hlsvm_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return used_consultant;
        end if;
        Put_Line("Convert_Hlsvm_Type: Unmatched string |" & i & "|" );
        return Hlsvm_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlsvm_Type;



    function Pretty_Print( i : Hltrpn_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when every_day => return "Every day";
             when once_a_week => return "Once a week";
             when once_a_month => return "Once a month";
             when less_often => return "Less often";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hltrpn_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hltrpn_Type( i : String ) return Hltrpn_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return every_day;
         elsif i = "2" then
            return once_a_week;
         elsif i = "3" then
            return once_a_month;
         elsif i = "4" then
            return less_often;
        end if;
        Put_Line("Convert_Hltrpn_Type: Unmatched string |" & i & "|" );
        return Hltrpn_Type'First; -- never actually gets here; for compiler only
    end Convert_Hltrpn_Type;



    function Pretty_Print( i : Hlwte_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing => return "Missing";
             when fairly_sure => return "Fairly sure";
             when estimate => return "Estimate";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlwte_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlwte_Type( i : String ) return Hlwte_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return fairly_sure;
         elsif i = "2" then
            return estimate;
        end if;
        Put_Line("Convert_Hlwte_Type: Unmatched string |" & i & "|" );
        return Hlwte_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlwte_Type;



    function Pretty_Print( i : Hlwtl_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing => return "Missing";
             when within_last_week => return "Within last week";
             when s_1_4_weeks_ago => return "1-4 weeks ago";
             when s_1_3_months_ago => return "1-3 months ago";
             when s_3_6_months_ago => return "3-6 months ago";
             when s_6mths_to_a_year_ago => return "6mths to a year ago";
             when more_than_a_year => return "More than a year";
             when more_than_5_years => return "More than 5 years";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlwtl_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlwtl_Type( i : String ) return Hlwtl_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return within_last_week;
         elsif i = "2" then
            return s_1_4_weeks_ago;
         elsif i = "3" then
            return s_1_3_months_ago;
         elsif i = "4" then
            return s_3_6_months_ago;
         elsif i = "5" then
            return s_6mths_to_a_year_ago;
         elsif i = "6" then
            return more_than_a_year;
         elsif i = "7" then
            return more_than_5_years;
        end if;
        Put_Line("Convert_Hlwtl_Type: Unmatched string |" & i & "|" );
        return Hlwtl_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlwtl_Type;



    function Pretty_Print( i : Hlwtm_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing => return "Missing";
             when stones_and_pounds => return "Stones and pounds";
             when kilos_and_grams => return "Kilos and grams";
             when cant_give_estimate => return "Can't give estimate";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlwtm_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlwtm_Type( i : String ) return Hlwtm_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return stones_and_pounds;
         elsif i = "2" then
            return kilos_and_grams;
         elsif i = "3" then
            return cant_give_estimate;
        end if;
        Put_Line("Convert_Hlwtm_Type: Unmatched string |" & i & "|" );
        return Hlwtm_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlwtm_Type;



    function Pretty_Print( i : Hlwtr_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing => return "Missing";
             when about_right_weight => return "About right weight";
             when underweight => return "Underweight";
             when slightly_overweight => return "Slightly overweight";
             when very_overweight => return "Very overweight";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlwtr_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlwtr_Type( i : String ) return Hlwtr_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return about_right_weight;
         elsif i = "2" then
            return underweight;
         elsif i = "3" then
            return slightly_overweight;
         elsif i = "4" then
            return very_overweight;
        end if;
        Put_Line("Convert_Hlwtr_Type: Unmatched string |" & i & "|" );
        return Hlwtr_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlwtr_Type;



    function Pretty_Print( i : Hlzest_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when more_energetic => return "More energetic";
             when about_the_same => return "About the same";
             when less_energetic => return "Less energetic";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hlzest_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hlzest_Type( i : String ) return Hlzest_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return more_energetic;
         elsif i = "2" then
            return about_the_same;
         elsif i = "3" then
            return less_energetic;
        end if;
        Put_Line("Convert_Hlzest_Type: Unmatched string |" & i & "|" );
        return Hlzest_Type'First; -- never actually gets here; for compiler only
    end Convert_Hlzest_Type;



    function Pretty_Print( i : Hoh_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when head_of_household => return "Head of household";
             when not_head => return "Not head";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hoh_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hoh_Type( i : String ) return Hoh_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return head_of_household;
         elsif i = "2" then
            return not_head;
        end if;
        Put_Line("Convert_Hoh_Type: Unmatched string |" & i & "|" );
        return Hoh_Type'First; -- never actually gets here; for compiler only
    end Convert_Hoh_Type;



    function Pretty_Print( i : Holkid_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when regular_basis => return "Regular basis";
             when irregular_basis => return "Irregular basis";
             when not_at_all => return "Not at all";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Holkid_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Holkid_Type( i : String ) return Holkid_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return regular_basis;
         elsif i = "2" then
            return irregular_basis;
         elsif i = "3" then
            return not_at_all;
        end if;
        Put_Line("Convert_Holkid_Type: Unmatched string |" & i & "|" );
        return Holkid_Type'First; -- never actually gets here; for compiler only
    end Convert_Holkid_Type;



    function Pretty_Print( i : Hood15_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing => return "Missing";
             when an_inner_city_area => return "An inner city area";
             when a_suburban_area => return "A suburban area";
             when a_town => return "A town";
             when a_village => return "A village";
             when rural_or_countryside => return "Rural or countryside";
             when mixture_or_moved_around => return "Mixture/moved around";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hood15_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hood15_Type( i : String ) return Hood15_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return an_inner_city_area;
         elsif i = "2" then
            return a_suburban_area;
         elsif i = "3" then
            return a_town;
         elsif i = "4" then
            return a_village;
         elsif i = "5" then
            return rural_or_countryside;
         elsif i = "6" then
            return mixture_or_moved_around;
        end if;
        Put_Line("Convert_Hood15_Type: Unmatched string |" & i & "|" );
        return Hood15_Type'First; -- never actually gets here; for compiler only
    end Convert_Hood15_Type;



    function Pretty_Print( i : Hospch_Type ) return String is
    begin
         case i is
             when cant_remember => return "Can't remember";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when yes_all => return "Yes - all";
             when yes_some => return "Yes - some";
             when no => return "No";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hospch_Type ) return Boolean is
    begin
         case i is
             when cant_remember => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hospch_Type( i : String ) return Hospch_Type is
    begin
         if i = "-1" then
            return cant_remember;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return yes_all;
         elsif i = "2" then
            return yes_some;
         elsif i = "3" then
            return no;
        end if;
        Put_Line("Convert_Hospch_Type: Unmatched string |" & i & "|" );
        return Hospch_Type'First; -- never actually gets here; for compiler only
    end Convert_Hospch_Type;



    function Pretty_Print( i : Hospnhs_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when all_free_under_nhs => return "All free under NHS";
             when all_paid_privately => return "All paid privately";
             when some_nhs_or_private => return "Some NHS/private";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hospnhs_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hospnhs_Type( i : String ) return Hospnhs_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return all_free_under_nhs;
         elsif i = "2" then
            return all_paid_privately;
         elsif i = "3" then
            return some_nhs_or_private;
        end if;
        Put_Line("Convert_Hospnhs_Type: Unmatched string |" & i & "|" );
        return Hospnhs_Type'First; -- never actually gets here; for compiler only
    end Convert_Hospnhs_Type;



    function Pretty_Print( i : Howlng_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when none => return "None";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Howlng_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when none => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Howlng_Type( i : String ) return Howlng_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-3" then
            return none;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
        end if;
        Put_Line("Convert_Howlng_Type: Unmatched string |" & i & "|" );
        return Howlng_Type'First; -- never actually gets here; for compiler only
    end Convert_Howlng_Type;



    function Pretty_Print( i : Hs2val_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when under_5000 => return "Under 5000";
             when s_5000_to_10_000 => return "5000 to 10,000";
             when s_10_000_to_50_000 => return "10,000 to 50,000";
             when s_50_000_to_100_000 => return "50,000 to 100,000";
             when s_100_000_or_more => return "100,000 or more";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hs2val_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hs2val_Type( i : String ) return Hs2val_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return under_5000;
         elsif i = "2" then
            return s_5000_to_10_000;
         elsif i = "3" then
            return s_10_000_to_50_000;
         elsif i = "4" then
            return s_50_000_to_100_000;
         elsif i = "5" then
            return s_100_000_or_more;
        end if;
        Put_Line("Convert_Hs2val_Type: Unmatched string |" & i & "|" );
        return Hs2val_Type'First; -- never actually gets here; for compiler only
    end Convert_Hs2val_Type;



    function Pretty_Print( i : Hsbeds_Type ) return String is
    begin
         case i is
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hsbeds_Type ) return Boolean is
    begin
         case i is
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hsbeds_Type( i : String ) return Hsbeds_Type is
    begin
         if i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
        end if;
        Put_Line("Convert_Hsbeds_Type: Unmatched string |" & i & "|" );
        return Hsbeds_Type'First; -- never actually gets here; for compiler only
    end Convert_Hsbeds_Type;



    function Pretty_Print( i : Hscimp_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when very_important => return "Very important";
             when somewhat_important => return "Somewhat important";
             when not_very_important => return "Not very important";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hscimp_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hscimp_Type( i : String ) return Hscimp_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return very_important;
         elsif i = "2" then
            return somewhat_important;
         elsif i = "3" then
            return not_very_important;
        end if;
        Put_Line("Convert_Hscimp_Type: Unmatched string |" & i & "|" );
        return Hscimp_Type'First; -- never actually gets here; for compiler only
    end Convert_Hscimp_Type;



    function Pretty_Print( i : Hscost_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when s_999997_or_above => return "999997 or above";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hscost_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hscost_Type( i : String ) return Hscost_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "999997" then
            return s_999997_or_above;
        end if;
        Put_Line("Convert_Hscost_Type: Unmatched string |" & i & "|" );
        return Hscost_Type'First; -- never actually gets here; for compiler only
    end Convert_Hscost_Type;



    function Pretty_Print( i : Hsctax_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when band_a_up_to_40_000 => return "Band A : up to 40,000";
             when band_b_40_001_52_000 => return "Band B : 40,001 - 52,000";
             when band_c_52_001_68_000 => return "Band C : 52,001 - 68,000";
             when band_d_68_001_88_000 => return "Band D : 68,001 - 88,000";
             when band_e_88_001_120_000 => return "Band E : 88,001 - 120,000";
             when band_f_120_001_160_000 => return "Band F : 120,001 - 160,000";
             when band_g_160_001_320_000 => return "Band G : 160,001 - 320,000";
             when band_h_320_001_plus => return "Band H : 320,001+";
             when hhold_accom_not_valued_separately => return "Hhold accom not valued separately";
             when na_northern_ireland => return "NA: Northern Ireland";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hsctax_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hsctax_Type( i : String ) return Hsctax_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return band_a_up_to_40_000;
         elsif i = "2" then
            return band_b_40_001_52_000;
         elsif i = "3" then
            return band_c_52_001_68_000;
         elsif i = "4" then
            return band_d_68_001_88_000;
         elsif i = "5" then
            return band_e_88_001_120_000;
         elsif i = "6" then
            return band_f_120_001_160_000;
         elsif i = "7" then
            return band_g_160_001_320_000;
         elsif i = "8" then
            return band_h_320_001_plus;
         elsif i = "9" then
            return hhold_accom_not_valued_separately;
         elsif i = "97" then
            return na_northern_ireland;
        end if;
        Put_Line("Convert_Hsctax_Type: Unmatched string |" & i & "|" );
        return Hsctax_Type'First; -- never actually gets here; for compiler only
    end Convert_Hsctax_Type;



    function Pretty_Print( i : Hsfloor_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when basement_or_semi_basement => return "Basement or semi basement";
             when grd_flr_or_str_level => return "Grd flr/str level";
             when s_1st_floor => return "1st floor";
             when s_2nd_floor => return "2nd floor";
             when s_3rd_floor => return "3rd floor";
             when s_4th_9th_floor => return "4th-9th floor";
             when s_10th_19th_floor => return "10th-19th floor";
             when s_20th_flr_and_up => return "20th flr & up";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hsfloor_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hsfloor_Type( i : String ) return Hsfloor_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return basement_or_semi_basement;
         elsif i = "2" then
            return grd_flr_or_str_level;
         elsif i = "3" then
            return s_1st_floor;
         elsif i = "4" then
            return s_2nd_floor;
         elsif i = "5" then
            return s_3rd_floor;
         elsif i = "6" then
            return s_4th_9th_floor;
         elsif i = "7" then
            return s_10th_19th_floor;
         elsif i = "8" then
            return s_20th_flr_and_up;
        end if;
        Put_Line("Convert_Hsfloor_Type: Unmatched string |" & i & "|" );
        return Hsfloor_Type'First; -- never actually gets here; for compiler only
    end Convert_Hsfloor_Type;



    function Pretty_Print( i : Hsownd_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when owned_or_on_mortgage => return "Owned or on mortgage";
             when shared_ownership => return "Shared ownership";
             when rented => return "Rented";
             when rent_free => return "Rent free";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hsownd_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hsownd_Type( i : String ) return Hsownd_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return owned_or_on_mortgage;
         elsif i = "2" then
            return shared_ownership;
         elsif i = "3" then
            return rented;
         elsif i = "4" then
            return rent_free;
         elsif i = "5" then
            return other;
        end if;
        Put_Line("Convert_Hsownd_Type: Unmatched string |" & i & "|" );
        return Hsownd_Type'First; -- never actually gets here; for compiler only
    end Convert_Hsownd_Type;



    function Pretty_Print( i : Hsowr1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_in_houseshold => return "Not in houseshold";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hsowr1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hsowr1_Type( i : String ) return Hsowr1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_in_houseshold;
        end if;
        Put_Line("Convert_Hsowr1_Type: Unmatched string |" & i & "|" );
        return Hsowr1_Type'First; -- never actually gets here; for compiler only
    end Convert_Hsowr1_Type;



    function Pretty_Print( i : Hsprba_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when big_problem => return "Big problem";
             when small_problem => return "Small problem";
             when not_a_problem => return "Not a problem";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hsprba_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hsprba_Type( i : String ) return Hsprba_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return big_problem;
         elsif i = "2" then
            return small_problem;
         elsif i = "3" then
            return not_a_problem;
        end if;
        Put_Line("Convert_Hsprba_Type: Unmatched string |" & i & "|" );
        return Hsprba_Type'First; -- never actually gets here; for compiler only
    end Convert_Hsprba_Type;



    function Pretty_Print( i : Hstype_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when other => return "Other";
             when detd_house_or_bungalow => return "Det'd house/bungalow";
             when institutional => return "Institutional";
             when tphone_q_not_asked => return "T'phone q-not asked";
             when semi_detd_house_or_bungalow => return "Semi-det'd house/bungalow";
             when end_terraced_house => return "End terraced house";
             when terraced_house => return "Terraced house";
             when purpose_built_flat_or_maisonette => return "Purpose built flat   or maisonette";
             when converted_flat_or_maisonette => return "Converted flat      or maisonette";
             when incl_business_premises => return "Incl business premises";
             when bedsit_multi_occup => return "Bedsit multi occup";
             when bedsitter_other => return "Bedsitter other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hstype_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hstype_Type( i : String ) return Hstype_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return other;
         elsif i = "11" then
            return other;
         elsif i = "12" then
            return other;
         elsif i = "15" then
            return other;
         elsif i = "1" then
            return detd_house_or_bungalow;
         elsif i = "10" then
            return institutional;
         elsif i = "14" then
            return institutional;
         elsif i = "13" then
            return tphone_q_not_asked;
         elsif i = "2" then
            return semi_detd_house_or_bungalow;
         elsif i = "3" then
            return end_terraced_house;
         elsif i = "4" then
            return terraced_house;
         elsif i = "5" then
            return purpose_built_flat_or_maisonette;
         elsif i = "6" then
            return converted_flat_or_maisonette;
         elsif i = "7" then
            return incl_business_premises;
         elsif i = "8" then
            return bedsit_multi_occup;
         elsif i = "9" then
            return bedsitter_other;
        end if;
        Put_Line("Convert_Hstype_Type: Unmatched string |" & i & "|" );
        return Hstype_Type'First; -- never actually gets here; for compiler only
    end Convert_Hstype_Type;



    function Pretty_Print( i : Hsvali_Type ) return String is
    begin
         case i is
             when var_dont_know => return "Var Don't know";
             when var_refused => return "Var Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when var_inapplicable => return "Var Inapplicable";
             when var_missing_or_wild => return "Var Missing or wild";
             when not_imputed => return "Not Imputed";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hsvali_Type ) return Boolean is
    begin
         case i is
             when var_dont_know => return True;
             when var_refused => return True;
             when proxy_and_or_phone => return True;
             when var_inapplicable => return True;
             when var_missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hsvali_Type( i : String ) return Hsvali_Type is
    begin
         if i = "-1" then
            return var_dont_know;
         elsif i = "-2" then
            return var_refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return var_inapplicable;
         elsif i = "-9" then
            return var_missing_or_wild;
         elsif i = "0" then
            return not_imputed;
        end if;
        Put_Line("Convert_Hsvali_Type: Unmatched string |" & i & "|" );
        return Hsvali_Type'First; -- never actually gets here; for compiler only
    end Convert_Hsvali_Type;



    function Pretty_Print( i : Hsvndr_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when local_auth_or_council => return "Local auth/council";
             when new_town_corp_or_dev_agy => return "New Town Corp/dev agy";
             when housing_association => return "Housing association";
             when someone_else => return "Someone else";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hsvndr_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hsvndr_Type( i : String ) return Hsvndr_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return local_auth_or_council;
         elsif i = "2" then
            return new_town_corp_or_dev_agy;
         elsif i = "3" then
            return housing_association;
         elsif i = "4" then
            return someone_else;
        end if;
        Put_Line("Convert_Hsvndr_Type: Unmatched string |" & i & "|" );
        return Hsvndr_Type'First; -- never actually gets here; for compiler only
    end Convert_Hsvndr_Type;



    function Pretty_Print( i : Hswpc_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when pre_1983_computer => return "Pre 1983 computer";
             when apple_macintosh => return "Apple Macintosh";
             when ibm_compat_286_or_386 => return "IBM compat 286/386";
             when ibm_compatible_486 => return "IBM compatible 486";
             when ibm_compat_pentium => return "IBM compat Pentium";
             when other_not_specified => return "Other not specified";
             when ibm_comp_nes => return "IBM comp. n.e.s.";
             when other_non_ibm_nes => return "Other non-IBM n.e.s.";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hswpc_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hswpc_Type( i : String ) return Hswpc_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return pre_1983_computer;
         elsif i = "1" then
            return apple_macintosh;
         elsif i = "2" then
            return ibm_compat_286_or_386;
         elsif i = "3" then
            return ibm_compatible_486;
         elsif i = "4" then
            return ibm_compat_pentium;
         elsif i = "5" then
            return other_not_specified;
         elsif i = "6" then
            return ibm_comp_nes;
         elsif i = "7" then
            return other_non_ibm_nes;
        end if;
        Put_Line("Convert_Hswpc_Type: Unmatched string |" & i & "|" );
        return Hswpc_Type'First; -- never actually gets here; for compiler only
    end Convert_Hswpc_Type;



    function Pretty_Print( i : Hsyr0_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when s_1993 => return "1993";
             when s_1994 => return "1994";
             when s_1995 => return "1995";
             when s_1996 => return "1996";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hsyr0_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hsyr0_Type( i : String ) return Hsyr0_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "93" then
            return s_1993;
         elsif i = "94" then
            return s_1994;
         elsif i = "95" then
            return s_1995;
         elsif i = "96" then
            return s_1996;
        end if;
        Put_Line("Convert_Hsyr0_Type: Unmatched string |" & i & "|" );
        return Hsyr0_Type'First; -- never actually gets here; for compiler only
    end Convert_Hsyr0_Type;



    function Pretty_Print( i : Hsyr04_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when s_1993 => return "1993";
             when s_1994 => return "1994";
             when s_1995 => return "1995";
             when s_1996 => return "1996";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hsyr04_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hsyr04_Type( i : String ) return Hsyr04_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "93" then
            return s_1993;
         elsif i = "94" then
            return s_1994;
         elsif i = "95" then
            return s_1995;
         elsif i = "96" then
            return s_1996;
        end if;
        Put_Line("Convert_Hsyr04_Type: Unmatched string |" & i & "|" );
        return Hsyr04_Type'First; -- never actually gets here; for compiler only
    end Convert_Hsyr04_Type;



    function Pretty_Print( i : Huasks_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when asks_spouse_or_part => return "Asks spouse/part";
             when tells_spouse_or_part => return "Tells spouse/part";
             when does_not_mention => return "Does not mention";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Huasks_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Huasks_Type( i : String ) return Huasks_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return asks_spouse_or_part;
         elsif i = "2" then
            return tells_spouse_or_part;
         elsif i = "3" then
            return does_not_mention;
         elsif i = "4" then
            return other;
        end if;
        Put_Line("Convert_Huasks_Type: Unmatched string |" & i & "|" );
        return Huasks_Type'First; -- never actually gets here; for compiler only
    end Convert_Huasks_Type;



    function Pretty_Print( i : Huboss_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when respondent => return "Respondent";
             when partner => return "Partner";
             when equal_say => return "Equal say";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Huboss_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Huboss_Type( i : String ) return Huboss_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return respondent;
         elsif i = "2" then
            return partner;
         elsif i = "3" then
            return equal_say;
         elsif i = "4" then
            return other;
        end if;
        Put_Line("Convert_Huboss_Type: Unmatched string |" & i & "|" );
        return Huboss_Type'First; -- never actually gets here; for compiler only
    end Convert_Huboss_Type;



    function Pretty_Print( i : Hubuys_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when mostly_self => return "Mostly self";
             when mostly_partner => return "Mostly partner";
             when shared => return "Shared";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hubuys_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hubuys_Type( i : String ) return Hubuys_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return mostly_self;
         elsif i = "2" then
            return mostly_partner;
         elsif i = "3" then
            return shared;
         elsif i = "4" then
            return other;
         elsif i = "5" then
            return other;
        end if;
        Put_Line("Convert_Hubuys_Type: Unmatched string |" & i & "|" );
        return Hubuys_Type'First; -- never actually gets here; for compiler only
    end Convert_Hubuys_Type;



    function Pretty_Print( i : Hucook_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when mostly_self => return "Mostly self";
             when mostly_other_pers => return "Mostly other pers";
             when shared => return "Shared";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hucook_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hucook_Type( i : String ) return Hucook_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return mostly_self;
         elsif i = "2" then
            return mostly_other_pers;
         elsif i = "3" then
            return shared;
        end if;
        Put_Line("Convert_Hucook_Type: Unmatched string |" & i & "|" );
        return Hucook_Type'First; -- never actually gets here; for compiler only
    end Convert_Hucook_Type;



    function Pretty_Print( i : Hudoes_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when always_self => return "Always self";
             when usu_self => return "Usu self";
             when self_partnr_equal => return "Self, partnr equal";
             when usu_partner => return "Usu partner";
             when always_partner => return "Always partner";
             when someone_else => return "Someone else";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hudoes_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hudoes_Type( i : String ) return Hudoes_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return always_self;
         elsif i = "2" then
            return usu_self;
         elsif i = "3" then
            return self_partnr_equal;
         elsif i = "4" then
            return usu_partner;
         elsif i = "5" then
            return always_partner;
         elsif i = "7" then
            return someone_else;
        end if;
        Put_Line("Convert_Hudoes_Type: Unmatched string |" & i & "|" );
        return Hudoes_Type'First; -- never actually gets here; for compiler only
    end Convert_Hudoes_Type;



    function Pretty_Print( i : Hudraw_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when only_or_mainly_r => return "Only/mainly R";
             when only_or_mainly_others => return "Only/mainly others";
             when both_equally => return "Both equally";
             when does_not_apply => return "Does not apply";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hudraw_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hudraw_Type( i : String ) return Hudraw_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return only_or_mainly_r;
         elsif i = "2" then
            return only_or_mainly_others;
         elsif i = "3" then
            return both_equally;
         elsif i = "7" then
            return does_not_apply;
        end if;
        Put_Line("Convert_Hudraw_Type: Unmatched string |" & i & "|" );
        return Hudraw_Type'First; -- never actually gets here; for compiler only
    end Convert_Hudraw_Type;



    function Pretty_Print( i : Hukeep_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when mainly_resp => return "Mainly resp";
             when mainly_spouse_or_part => return "Mainly spouse/part";
             when joint_w_spouse_or_part => return "Joint w spouse/part";
             when some_one_else => return "Some one else";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hukeep_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hukeep_Type( i : String ) return Hukeep_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return mainly_resp;
         elsif i = "2" then
            return mainly_spouse_or_part;
         elsif i = "3" then
            return joint_w_spouse_or_part;
         elsif i = "4" then
            return some_one_else;
        end if;
        Put_Line("Convert_Hukeep_Type: Unmatched string |" & i & "|" );
        return Hukeep_Type'First; -- never actually gets here; for compiler only
    end Convert_Hukeep_Type;



    function Pretty_Print( i : Hunurs_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when respondent => return "Respondent";
             when spouse_or_partner => return "Spouse/partner";
             when mothers_help_or_nanny => return "Mothers help/nanny";
             when relative => return "Relative";
             when friend_or_neighbour => return "Friend/neighbour";
             when other => return "Other";
             when varies => return "Varies";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Hunurs_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Hunurs_Type( i : String ) return Hunurs_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return respondent;
         elsif i = "2" then
            return spouse_or_partner;
         elsif i = "3" then
            return mothers_help_or_nanny;
         elsif i = "4" then
            return relative;
         elsif i = "5" then
            return friend_or_neighbour;
         elsif i = "6" then
            return other;
         elsif i = "7" then
            return varies;
        end if;
        Put_Line("Convert_Hunurs_Type: Unmatched string |" & i & "|" );
        return Hunurs_Type'First; -- never actually gets here; for compiler only
    end Convert_Hunurs_Type;



    function Pretty_Print( i : Huruns_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when r_looks_after_hh_mon => return "R looks after HH mon";
             when partner_looks_after => return "Partner looks after";
             when r_given_hh_allowance => return "R given HH allowance";
             when part_has_hh_allwnce => return "Part has HH allwnce";
             when share_hh_fin_equally => return "Share HH fin equally";
             when maintain_separately => return "Maintain separately";
             when other_arrangement => return "Other arrangement";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Huruns_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Huruns_Type( i : String ) return Huruns_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return r_looks_after_hh_mon;
         elsif i = "2" then
            return partner_looks_after;
         elsif i = "3" then
            return r_given_hh_allowance;
         elsif i = "4" then
            return part_has_hh_allwnce;
         elsif i = "5" then
            return share_hh_fin_equally;
         elsif i = "6" then
            return maintain_separately;
         elsif i = "7" then
            return other_arrangement;
         elsif i = "8" then
            return other;
        end if;
        Put_Line("Convert_Huruns_Type: Unmatched string |" & i & "|" );
        return Huruns_Type'First; -- never actually gets here; for compiler only
    end Convert_Huruns_Type;



    function Pretty_Print( i : Husits_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when mainly_resp => return "Mainly resp";
             when mainly_partner => return "Mainly partner";
             when joint_w_partner => return "Joint w partner";
             when some_one_else => return "Some one else";
             when always_partner => return "Always partner";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Husits_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Husits_Type( i : String ) return Husits_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return mainly_resp;
         elsif i = "2" then
            return mainly_partner;
         elsif i = "3" then
            return joint_w_partner;
         elsif i = "4" then
            return some_one_else;
         elsif i = "7" then
            return some_one_else;
         elsif i = "5" then
            return always_partner;
        end if;
        Put_Line("Convert_Husits_Type: Unmatched string |" & i & "|" );
        return Husits_Type'First; -- never actually gets here; for compiler only
    end Convert_Husits_Type;



    function Pretty_Print( i : Huxpch_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when all_from_r_wages => return "All from R wages";
             when most_from_r_wages => return "Most from R wages";
             when share_costs_w_partnr => return "Share costs w partnr";
             when most_by_spouse_or_part => return "Most by spouse/part";
             when all_by_spouse_or_partnr => return "All by spouse/partnr";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Huxpch_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Huxpch_Type( i : String ) return Huxpch_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return all_from_r_wages;
         elsif i = "2" then
            return most_from_r_wages;
         elsif i = "3" then
            return share_costs_w_partnr;
         elsif i = "4" then
            return most_by_spouse_or_part;
         elsif i = "5" then
            return all_by_spouse_or_partnr;
         elsif i = "6" then
            return other;
        end if;
        Put_Line("Convert_Huxpch_Type: Unmatched string |" & i & "|" );
        return Huxpch_Type'First; -- never actually gets here; for compiler only
    end Convert_Huxpch_Type;



    function Pretty_Print( i : Iivfho_Type ) return String is
    begin
         case i is
             when not_applicable => return "Not applicable";
             when all_eligible_hh_intv => return "All eligible HH intv";
             when interviews_plus_proxies => return "Interviews + proxies";
             when interviews_plus_refusal => return "Interviews + refusal";
             when pxy_at_original_addr => return "Pxy at original addr";
             when phone_interview_only => return "Phone interview only";
             when youth_interview_only => return "Youth Interview only";
             when docs_missing_or_unus => return "Docs missing or unus";
             when address_not_found => return "Address not found";
             when no_hh_member_contact => return "No HH member contact";
             when refus_to_rsrch_cntre => return "Refus to Rsrch Cntre";
             when refusal_to_intviewer => return "Refusal to intviewer";
             when language_problems => return "Language problems";
             when no_intv_age_or_health => return "No intv.: Age/health";
             when moved_prev_wave_add => return "Moved prev wave add";
             when out_scope_institutn => return "Out scope-institut'n";
             when moved_out_of_scope => return "Moved out of scope";
             when whole_hh_deceased => return "Whole HH deceased";
             when no_psms_resident => return "No PSM's resident";
             when adamant_refusal => return "Adamant refusal";
             when lt_untraced_withdrawn => return "LT untraced, withdrawn";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Iivfho_Type ) return Boolean is
    begin
         case i is
             when not_applicable => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Iivfho_Type( i : String ) return Iivfho_Type is
    begin
         if i = "-8" then
            return not_applicable;
         elsif i = "10" then
            return all_eligible_hh_intv;
         elsif i = "11" then
            return interviews_plus_proxies;
         elsif i = "12" then
            return interviews_plus_refusal;
         elsif i = "15" then
            return pxy_at_original_addr;
         elsif i = "16" then
            return phone_interview_only;
         elsif i = "17" then
            return youth_interview_only;
         elsif i = "39" then
            return docs_missing_or_unus;
         elsif i = "50" then
            return address_not_found;
         elsif i = "51" then
            return no_hh_member_contact;
         elsif i = "60" then
            return refus_to_rsrch_cntre;
         elsif i = "61" then
            return refusal_to_intviewer;
         elsif i = "62" then
            return language_problems;
         elsif i = "63" then
            return no_intv_age_or_health;
         elsif i = "70" then
            return moved_prev_wave_add;
         elsif i = "80" then
            return out_scope_institutn;
         elsif i = "81" then
            return moved_out_of_scope;
         elsif i = "90" then
            return whole_hh_deceased;
         elsif i = "91" then
            return no_psms_resident;
         elsif i = "92" then
            return adamant_refusal;
         elsif i = "93" then
            return lt_untraced_withdrawn;
        end if;
        Put_Line("Convert_Iivfho_Type: Unmatched string |" & i & "|" );
        return Iivfho_Type'First; -- never actually gets here; for compiler only
    end Convert_Iivfho_Type;



    function Pretty_Print( i : Iivfio_Type ) return String is
    begin
         case i is
             when not_applicable => return "Not applicable";
             when full_interview => return "Full interview";
             when refusal => return "Refusal";
             when other_non_intvw => return "Other non-intvw";
             when moved => return "Moved";
             when proxy_interview => return "Proxy interview";
             when child_under_16 => return "Child under 16";
             when youth_interview => return "Youth Interview";
             when youth_refusal => return "Youth: Refusal";
             when youth_oth_non_int => return "Youth: Oth non-int";
             when child_under_11 => return "Child under 11";
             when telephone_intvw => return "Telephone intvw";
             when refusal_or_non_int_hh => return "Refusal/non-int HH";
             when non_int_or_non_int_hh => return "Non-int/non-int HH";
             when moved_or_non_int_hh => return "Moved/non-int HH";
             when child_in_non_int_hh => return "Child in non-int HH";
             when youth_ref_or_no_int_hh => return "Youth: Ref/no-int HH";
             when youth_oth_or_no_int_hh => return "Youth: Oth/no-int HH";
             when child_u_11_no_int_hh => return "Child u 11 no-int HH";
             when refusal_or_non_cont_hh => return "Refusal/non-cont HH";
             when lang_prob_or_nc_hh => return "Lang prob/NC HH";
             when age_infirm_or_nc_hh => return "Age, infirm/NC HH";
             when non_cont_or_nc_hh => return "Non-cont/NC HH";
             when out_of_scope_or_nc_hh => return "Out of scope/NC HH";
             when institutnsd_or_nc_hh => return "Institutnsd/NC HH";
             when untraced_mover => return "Untraced mover";
             when child_ref_or_nc_hh => return "Child ref/NC HH";
             when chd_lang_prob_or_nc_hh => return "Chd lang prob/NC HH";
             when chd_infirm_or_nc_hh => return "Chd infirm/NC HH";
             when chd_non_cont_or_nc_hh => return "Chd non-cont/NC HH";
             when chd_o_o_scope_or_nc_hh => return "Chd o-o-scope/NC HH";
             when chd_instit_or_nc_hh => return "Chd instit/NC HH";
             when chd_untraced_mover => return "Chd untraced mover";
             when no_one_elig_in_hh => return "No one elig in HH";
             when prev_wave_adamant_re => return "Prev wave adamant re";
             when dead => return "Dead";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Iivfio_Type ) return Boolean is
    begin
         case i is
             when not_applicable => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Iivfio_Type( i : String ) return Iivfio_Type is
    begin
         if i = "-8" then
            return not_applicable;
         elsif i = "1" then
            return full_interview;
         elsif i = "10" then
            return refusal;
         elsif i = "11" then
            return other_non_intvw;
         elsif i = "12" then
            return moved;
         elsif i = "2" then
            return proxy_interview;
         elsif i = "20" then
            return child_under_16;
         elsif i = "21" then
            return youth_interview;
         elsif i = "22" then
            return youth_refusal;
         elsif i = "23" then
            return youth_oth_non_int;
         elsif i = "24" then
            return child_under_11;
         elsif i = "3" then
            return telephone_intvw;
         elsif i = "30" then
            return refusal_or_non_int_hh;
         elsif i = "31" then
            return non_int_or_non_int_hh;
         elsif i = "32" then
            return moved_or_non_int_hh;
         elsif i = "40" then
            return child_in_non_int_hh;
         elsif i = "41" then
            return youth_ref_or_no_int_hh;
         elsif i = "42" then
            return youth_oth_or_no_int_hh;
         elsif i = "43" then
            return child_u_11_no_int_hh;
         elsif i = "50" then
            return refusal_or_non_cont_hh;
         elsif i = "51" then
            return lang_prob_or_nc_hh;
         elsif i = "52" then
            return age_infirm_or_nc_hh;
         elsif i = "53" then
            return non_cont_or_nc_hh;
         elsif i = "54" then
            return out_of_scope_or_nc_hh;
         elsif i = "55" then
            return institutnsd_or_nc_hh;
         elsif i = "56" then
            return untraced_mover;
         elsif i = "60" then
            return child_ref_or_nc_hh;
         elsif i = "61" then
            return chd_lang_prob_or_nc_hh;
         elsif i = "62" then
            return chd_infirm_or_nc_hh;
         elsif i = "63" then
            return chd_non_cont_or_nc_hh;
         elsif i = "64" then
            return chd_o_o_scope_or_nc_hh;
         elsif i = "65" then
            return chd_instit_or_nc_hh;
         elsif i = "66" then
            return chd_untraced_mover;
         elsif i = "80" then
            return no_one_elig_in_hh;
         elsif i = "81" then
            return prev_wave_adamant_re;
         elsif i = "99" then
            return dead;
        end if;
        Put_Line("Convert_Iivfio_Type: Unmatched string |" & i & "|" );
        return Iivfio_Type'First; -- never actually gets here; for compiler only
    end Convert_Iivfio_Type;



    function Pretty_Print( i : Iodc_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when no_interview => return "No Interview";
             when individual_only => return "Individual only";
             when proxy_questaire => return "Proxy questaire";
             when proxy => return "Proxy";
             when indl_and_self_comp => return "Indl and self comp";
             when sc_expected_but_not_yet_here => return "SC expected but not yet here";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Iodc_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Iodc_Type( i : String ) return Iodc_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return no_interview;
         elsif i = "1" then
            return individual_only;
         elsif i = "2" then
            return proxy_questaire;
         elsif i = "3" then
            return proxy;
         elsif i = "4" then
            return indl_and_self_comp;
         elsif i = "5" then
            return sc_expected_but_not_yet_here;
        end if;
        Put_Line("Convert_Iodc_Type: Unmatched string |" & i & "|" );
        return Iodc_Type'First; -- never actually gets here; for compiler only
    end Convert_Iodc_Type;



    function Pretty_Print( i : Isced_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing => return "Missing";
             when not_defined => return "Not defined";
             when primary => return "Primary";
             when low_secondary => return "low secondary";
             when s_3clow_sec_voc => return "3c:low sec-voc";
             when s_3ahisec_mivoc => return "3a:hisec-mivoc";
             when s_5bhigher_voc => return "5b:higher voc";
             when s_5afirst_degree => return "5a:first degree";
             when s_6higher_degree => return "6:higher degree";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Isced_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Isced_Type( i : String ) return Isced_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return not_defined;
         elsif i = "1" then
            return primary;
         elsif i = "2" then
            return low_secondary;
         elsif i = "3" then
            return s_3clow_sec_voc;
         elsif i = "4" then
            return s_3ahisec_mivoc;
         elsif i = "5" then
            return s_5bhigher_voc;
         elsif i = "6" then
            return s_5afirst_degree;
         elsif i = "7" then
            return s_6higher_degree;
        end if;
        Put_Line("Convert_Isced_Type: Unmatched string |" & i & "|" );
        return Isced_Type'First; -- never actually gets here; for compiler only
    end Convert_Isced_Type;



    function Pretty_Print( i : Iv10no_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when not_mentioned => return "Not mentioned";
             when no_fed_forward_info => return "No fed forward info";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Iv10no_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Iv10no_Type( i : String ) return Iv10no_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return no_fed_forward_info;
        end if;
        Put_Line("Convert_Iv10no_Type: Unmatched string |" & i & "|" );
        return Iv10no_Type'First; -- never actually gets here; for compiler only
    end Convert_Iv10no_Type;



    function Pretty_Print( i : Iv2_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when a_great_deal => return "A great deal";
             when a_fair_amount => return "A fair amount";
             when a_little => return "A little";
             when not_at_all => return "Not at all";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Iv2_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Iv2_Type( i : String ) return Iv2_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return a_great_deal;
         elsif i = "2" then
            return a_fair_amount;
         elsif i = "3" then
            return a_little;
         elsif i = "4" then
            return not_at_all;
        end if;
        Put_Line("Convert_Iv2_Type: Unmatched string |" & i & "|" );
        return Iv2_Type'First; -- never actually gets here; for compiler only
    end Convert_Iv2_Type;



    function Pretty_Print( i : Iv4_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when very_good => return "Very good";
             when good => return "Good";
             when fair => return "Fair";
             when poor => return "Poor";
             when very_poor => return "Very poor";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Iv4_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Iv4_Type( i : String ) return Iv4_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return very_good;
         elsif i = "2" then
            return good;
         elsif i = "3" then
            return fair;
         elsif i = "4" then
            return poor;
         elsif i = "5" then
            return very_poor;
        end if;
        Put_Line("Convert_Iv4_Type: Unmatched string |" & i & "|" );
        return Iv4_Type'First; -- never actually gets here; for compiler only
    end Convert_Iv4_Type;



    function Pretty_Print( i : Iv5_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when yes_completed => return "Yes, completed";
             when no_refused => return "No, refused";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Iv5_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Iv5_Type( i : String ) return Iv5_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return yes_completed;
         elsif i = "2" then
            return no_refused;
         elsif i = "3" then
            return other;
        end if;
        Put_Line("Convert_Iv5_Type: Unmatched string |" & i & "|" );
        return Iv5_Type'First; -- never actually gets here; for compiler only
    end Convert_Iv5_Type;



    function Pretty_Print( i : Iv5aa_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when mobile_number_given => return "mobile number given";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Iv5aa_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Iv5aa_Type( i : String ) return Iv5aa_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return mobile_number_given;
        end if;
        Put_Line("Convert_Iv5aa_Type: Unmatched string |" & i & "|" );
        return Iv5aa_Type'First; -- never actually gets here; for compiler only
    end Convert_Iv5aa_Type;



    function Pretty_Print( i : Iv5ab_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when email_given => return "Email given";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Iv5ab_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Iv5ab_Type( i : String ) return Iv5ab_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return email_given;
         elsif i = "2" then
            return email_given;
        end if;
        Put_Line("Convert_Iv5ab_Type: Unmatched string |" & i & "|" );
        return Iv5ab_Type'First; -- never actually gets here; for compiler only
    end Convert_Iv5ab_Type;



    function Pretty_Print( i : Iv5ac_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when neither_given => return "Neither given";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Iv5ac_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Iv5ac_Type( i : String ) return Iv5ac_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return neither_given;
         elsif i = "3" then
            return neither_given;
        end if;
        Put_Line("Convert_Iv5ac_Type: Unmatched string |" & i & "|" );
        return Iv5ac_Type'First; -- never actually gets here; for compiler only
    end Convert_Iv5ac_Type;



    function Pretty_Print( i : Iv7_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when no_interpreter_hh => return "No interpreter HH";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Iv7_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Iv7_Type( i : String ) return Iv7_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return no_interpreter_hh;
        end if;
        Put_Line("Convert_Iv7_Type: Unmatched string |" & i & "|" );
        return Iv7_Type'First; -- never actually gets here; for compiler only
    end Convert_Iv7_Type;



    function Pretty_Print( i : Ivavt_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when ten_pound_voucher => return "Ten pound voucher";
             when seven_pound_voucher => return "Seven pound voucher";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ivavt_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ivavt_Type( i : String ) return Ivavt_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "10" then
            return ten_pound_voucher;
         elsif i = "7" then
            return seven_pound_voucher;
        end if;
        Put_Line("Convert_Ivavt_Type: Unmatched string |" & i & "|" );
        return Ivavt_Type'First; -- never actually gets here; for compiler only
    end Convert_Ivavt_Type;



    function Pretty_Print( i : Ivcbage_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when male_16_64 => return "Male 16 - 64";
             when female_16_45 => return "Female 16 - 45";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ivcbage_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ivcbage_Type( i : String ) return Ivcbage_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return male_16_64;
         elsif i = "2" then
            return female_16_45;
         elsif i = "3" then
            return other;
        end if;
        Put_Line("Convert_Ivcbage_Type: Unmatched string |" & i & "|" );
        return Ivcbage_Type'First; -- never actually gets here; for compiler only
    end Convert_Ivcbage_Type;



    function Pretty_Print( i : Ivconv_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when conversion_attempted => return "Conversion attempted";
             when no_convrsion_attempt => return "No convrsion attempt";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ivconv_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ivconv_Type( i : String ) return Ivconv_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return conversion_attempted;
         elsif i = "2" then
            return no_convrsion_attempt;
        end if;
        Put_Line("Convert_Ivconv_Type: Unmatched string |" & i & "|" );
        return Ivconv_Type'First; -- never actually gets here; for compiler only
    end Convert_Ivconv_Type;



    function Pretty_Print( i : Ivcoop_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when cooperative => return "Cooperative";
             when some_persuasion_needed => return "Some persuasion needed";
             when very_reluctant => return "Very reluctant";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ivcoop_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ivcoop_Type( i : String ) return Ivcoop_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return cooperative;
         elsif i = "2" then
            return some_persuasion_needed;
         elsif i = "3" then
            return very_reluctant;
        end if;
        Put_Line("Convert_Ivcoop_Type: Unmatched string |" & i & "|" );
        return Ivcoop_Type'First; -- never actually gets here; for compiler only
    end Convert_Ivcoop_Type;



    function Pretty_Print( i : Ivda_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when respondent_alone => return "Respondent alone";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ivda_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ivda_Type( i : String ) return Ivda_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return respondent_alone;
        end if;
        Put_Line("Convert_Ivda_Type: Unmatched string |" & i & "|" );
        return Ivda_Type'First; -- never actually gets here; for compiler only
    end Convert_Ivda_Type;



    function Pretty_Print( i : Ivdb_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when partner_present => return "Partner present";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ivdb_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ivdb_Type( i : String ) return Ivdb_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return partner_present;
         elsif i = "2" then
            return partner_present;
        end if;
        Put_Line("Convert_Ivdb_Type: Unmatched string |" & i & "|" );
        return Ivdb_Type'First; -- never actually gets here; for compiler only
    end Convert_Ivdb_Type;



    function Pretty_Print( i : Ivdc_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when other_adts_pres => return "Other adts pres";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ivdc_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ivdc_Type( i : String ) return Ivdc_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return other_adts_pres;
         elsif i = "3" then
            return other_adts_pres;
        end if;
        Put_Line("Convert_Ivdc_Type: Unmatched string |" & i & "|" );
        return Ivdc_Type'First; -- never actually gets here; for compiler only
    end Convert_Ivdc_Type;



    function Pretty_Print( i : Ivdd_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when children_present => return "Children present";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ivdd_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ivdd_Type( i : String ) return Ivdd_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return children_present;
         elsif i = "4" then
            return children_present;
        end if;
        Put_Line("Convert_Ivdd_Type: Unmatched string |" & i & "|" );
        return Ivdd_Type'First; -- never actually gets here; for compiler only
    end Convert_Ivdd_Type;



    function Pretty_Print( i : Ivec_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when other_adults_pres => return "Other adults pres";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ivec_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ivec_Type( i : String ) return Ivec_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return other_adults_pres;
         elsif i = "3" then
            return other_adults_pres;
        end if;
        Put_Line("Convert_Ivec_Type: Unmatched string |" & i & "|" );
        return Ivec_Type'First; -- never actually gets here; for compiler only
    end Convert_Ivec_Type;



    function Pretty_Print( i : Ivee_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when supervisor_present => return "Supervisor present";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ivee_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ivee_Type( i : String ) return Ivee_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return supervisor_present;
         elsif i = "5" then
            return supervisor_present;
        end if;
        Put_Line("Convert_Ivee_Type: Unmatched string |" & i & "|" );
        return Ivee_Type'First; -- never actually gets here; for compiler only
    end Convert_Ivee_Type;



    function Pretty_Print( i : Ivelig_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when continuing => return "Continuing";
             when new_entrants => return "New entrants";
             when not_eligible_this_yr => return "Not eligible this yr";
             when check_if_eligible => return "Check if eligible";
             when deceased => return "Deceased";
             when wave_1_non_contact => return "Wave 1 non-contact";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ivelig_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ivelig_Type( i : String ) return Ivelig_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return continuing;
         elsif i = "2" then
            return new_entrants;
         elsif i = "3" then
            return not_eligible_this_yr;
         elsif i = "4" then
            return check_if_eligible;
         elsif i = "5" then
            return deceased;
         elsif i = "6" then
            return wave_1_non_contact;
        end if;
        Put_Line("Convert_Ivelig_Type: Unmatched string |" & i & "|" );
        return Ivelig_Type'First; -- never actually gets here; for compiler only
    end Convert_Ivelig_Type;



    function Pretty_Print( i : Ivfc_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when other_adlts_pres => return "Other adlts pres";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ivfc_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ivfc_Type( i : String ) return Ivfc_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return other_adlts_pres;
         elsif i = "3" then
            return other_adlts_pres;
        end if;
        Put_Line("Convert_Ivfc_Type: Unmatched string |" & i & "|" );
        return Ivfc_Type'First; -- never actually gets here; for compiler only
    end Convert_Ivfc_Type;



    function Pretty_Print( i : Ivfho_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when demolished_or_derelict => return "Demolished/derelict";
             when all_eligible_hh_intervd => return "All eligible HH intervd";
             when interviews_plus_proxies => return "Interviews + proxies";
             when interviews_plus_refusals => return "Interviews + refusals";
             when hh_comp_plus_ques_only => return "HH comp + ques only";
             when hh_composition_only => return "HH composition only";
             when pxy_at_original_addr => return "Pxy at original addr";
             when phone_pxy_intvw_only => return "Phone pxy intvw only";
             when youth_interview_only => return "Youth Interview only";
             when docs_missing_or_unusable => return "Docs missing or unusable";
             when business_use_only => return "Business use only";
             when refusal_to_hq => return "Refusal to HQ";
             when all_refus_to_inter => return "All refus to int'er";
             when lang_probs_no_interp => return "Lang probs no interp";
             when too_old_or_infirm => return "Too old or infirm";
             when no_hh_member_contact => return "No HH member contact";
             when temp_accomm_only => return "Temp accomm only";
             when coversheet_only => return "Coversheet only";
             when intervw_refusl_to_hq => return "Intervw refusl to HQ";
             when intvw_refusl_to_intr => return "Intvw refusl to int'r";
             when lang_probs_no_enumn => return "Lang probs-no enum'n";
             when age_or_health_no_enumn => return "Age/health-no enum'n";
             when docs_missing_or_unus => return "Docs missing or unus";
             when empty_at_first_call => return "Empty at first call";
             when only_business_prem => return "Only business prem";
             when out_scope_institn => return "Out scope-instit'n";
             when pxy_w1_or_2_mem_add_sme => return "Pxy W1/2 mem add sme";
             when movd_back_to_w1_hh_or_add => return "Movd back to W1 HH/add";
             when no_psms_resident => return "No PSMs resident";
             when adamant_refusal => return "Adamant refusal";
             when building_not_complete => return "Building not complete";
             when address_not_found => return "Address not found";
             when institut_no_privt_hh => return "Institut no privt HH";
             when refus_to_rsrch_cntre => return "Refus to Rsrch Cntre";
             when refusal_to_intviewer => return "Refusal to intviewer";
             when language_problems => return "Language problems";
             when no_intv_age_or_health => return "No intv.: Age/health";
             when missing_person_ref => return "Missing person ref.";
             when moved_prev_wave_add => return "Moved prev wave add";
             when out_scope_institutn => return "Out scope-institut'n";
             when moved_out_of_scope => return "Moved out of scope";
             when whole_hh_deceased => return "Whole HH deceased";
             when lt_untraced_withdrawn => return "Lt untraced, withdrawn";
             when new_sample_withdrawn => return "New sample-withdrawn";
             when withdrawn_before_field => return "Withdrawn before field";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ivfho_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ivfho_Type( i : String ) return Ivfho_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return demolished_or_derelict;
         elsif i = "40" then
            return demolished_or_derelict;
         elsif i = "10" then
            return all_eligible_hh_intervd;
         elsif i = "11" then
            return interviews_plus_proxies;
         elsif i = "12" then
            return interviews_plus_refusals;
         elsif i = "13" then
            return hh_comp_plus_ques_only;
         elsif i = "14" then
            return hh_composition_only;
         elsif i = "15" then
            return pxy_at_original_addr;
         elsif i = "16" then
            return phone_pxy_intvw_only;
         elsif i = "17" then
            return youth_interview_only;
         elsif i = "19" then
            return docs_missing_or_unusable;
         elsif i = "2" then
            return business_use_only;
         elsif i = "20" then
            return refusal_to_hq;
         elsif i = "21" then
            return all_refus_to_inter;
         elsif i = "22" then
            return lang_probs_no_interp;
         elsif i = "23" then
            return too_old_or_infirm;
         elsif i = "24" then
            return no_hh_member_contact;
         elsif i = "51" then
            return no_hh_member_contact;
         elsif i = "3" then
            return temp_accomm_only;
         elsif i = "30" then
            return coversheet_only;
         elsif i = "31" then
            return intervw_refusl_to_hq;
         elsif i = "32" then
            return intvw_refusl_to_intr;
         elsif i = "33" then
            return lang_probs_no_enumn;
         elsif i = "34" then
            return age_or_health_no_enumn;
         elsif i = "39" then
            return docs_missing_or_unus;
         elsif i = "4" then
            return empty_at_first_call;
         elsif i = "41" then
            return only_business_prem;
         elsif i = "42" then
            return out_scope_institn;
         elsif i = "43" then
            return pxy_w1_or_2_mem_add_sme;
         elsif i = "44" then
            return movd_back_to_w1_hh_or_add;
         elsif i = "45" then
            return no_psms_resident;
         elsif i = "91" then
            return no_psms_resident;
         elsif i = "46" then
            return adamant_refusal;
         elsif i = "92" then
            return adamant_refusal;
         elsif i = "5" then
            return building_not_complete;
         elsif i = "50" then
            return address_not_found;
         elsif i = "7" then
            return address_not_found;
         elsif i = "6" then
            return institut_no_privt_hh;
         elsif i = "60" then
            return refus_to_rsrch_cntre;
         elsif i = "61" then
            return refusal_to_intviewer;
         elsif i = "62" then
            return language_problems;
         elsif i = "63" then
            return no_intv_age_or_health;
         elsif i = "64" then
            return missing_person_ref;
         elsif i = "70" then
            return moved_prev_wave_add;
         elsif i = "80" then
            return out_scope_institutn;
         elsif i = "81" then
            return moved_out_of_scope;
         elsif i = "90" then
            return whole_hh_deceased;
         elsif i = "93" then
            return lt_untraced_withdrawn;
         elsif i = "94" then
            return new_sample_withdrawn;
         elsif i = "96" then
            return withdrawn_before_field;
        end if;
        Put_Line("Convert_Ivfho_Type: Unmatched string |" & i & "|" );
        return Ivfho_Type'First; -- never actually gets here; for compiler only
    end Convert_Ivfho_Type;



    function Pretty_Print( i : Ivfio_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when full_interview => return "Full interview";
             when refusal => return "Refusal";
             when other_non_intvw => return "Other non-intvw";
             when moved => return "Moved";
             when proxy => return "Proxy";
             when child_under_16 => return "Child under 16";
             when youth_interview => return "Youth Interview";
             when youth_refusal => return "Youth: Refusal";
             when youth_oth_non_int => return "Youth: Oth non-int";
             when child_under_11 => return "Child under 11";
             when refusal_or_non_int_hh => return "Refusal/non-int HH";
             when non_int_or_non_int_hh => return "Non-int/non-int HH";
             when moved_or_non_int_hh => return "Moved/non-int HH";
             when absent_no_proxy => return "Absent, no proxy";
             when child_in_non_int_hh => return "Child in non-int HH";
             when youth_ref_or_no_int_hh => return "Youth: Ref/no-int HH";
             when youth_oth_or_no_int_hh => return "Youth: Oth/no-int HH";
             when child_u_11_no_int_hh => return "Child u 11 no-int HH";
             when oth_non_cont_or_no_proxy => return "Oth non-cont/no proxy";
             when refusal_or_non_cont_hh => return "Refusal/non-cont HH";
             when lang_prob_or_nc_hh => return "Lang prob/NC HH";
             when age_infirm_or_nc_hh => return "Age, infirm/NC HH";
             when non_cont_or_nc_hh => return "Non-cont/NC HH";
             when out_of_scope_or_nc_hh => return "Out of scope/NC HH";
             when institutnsd_or_nc_hh => return "Institutnsd/NC HH";
             when untraced_mover => return "Untraced mover";
             when pres_or_no_intv_or_no_proxy => return "Pres/no intv/no proxy";
             when child_ref_or_nc_hh => return "Child ref/NC HH";
             when chd_lang_prob_or_nc_hh => return "Chd lang prob/NC HH";
             when chd_infirm_or_nc_hh => return "Chd infirm/NC HH";
             when chd_non_cont_or_nc_hh => return "Chd non-cont/NC HH";
             when chd_o_o_scope_or_nc_hh => return "Chd o-o-scope/NC HH";
             when chd_instit_or_nc_hh => return "Chd instit/NC HH";
             when chd_untraced_mover => return "Chd untraced mover";
             when other => return "Other";
             when no_one_elig_in_hh => return "No one elig in HH";
             when prev_wave_adamant_refusl => return "Prev wave adamant refusl";
             when l_t_untraced_wdrawn => return "L-t untraced, wdrawn";
             when withdrawn_before_field => return "Withdrawn before field";
             when lost_capi_intvw => return "Lost CAPI intvw";
             when other_retiring => return "Other Retiring";
             when dead => return "Dead";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ivfio_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ivfio_Type( i : String ) return Ivfio_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return full_interview;
         elsif i = "10" then
            return refusal;
         elsif i = "3" then
            return refusal;
         elsif i = "11" then
            return other_non_intvw;
         elsif i = "12" then
            return moved;
         elsif i = "2" then
            return proxy;
         elsif i = "20" then
            return child_under_16;
         elsif i = "7" then
            return child_under_16;
         elsif i = "21" then
            return youth_interview;
         elsif i = "22" then
            return youth_refusal;
         elsif i = "23" then
            return youth_oth_non_int;
         elsif i = "24" then
            return child_under_11;
         elsif i = "30" then
            return refusal_or_non_int_hh;
         elsif i = "31" then
            return non_int_or_non_int_hh;
         elsif i = "32" then
            return moved_or_non_int_hh;
         elsif i = "4" then
            return absent_no_proxy;
         elsif i = "40" then
            return child_in_non_int_hh;
         elsif i = "41" then
            return youth_ref_or_no_int_hh;
         elsif i = "42" then
            return youth_oth_or_no_int_hh;
         elsif i = "43" then
            return child_u_11_no_int_hh;
         elsif i = "5" then
            return oth_non_cont_or_no_proxy;
         elsif i = "50" then
            return refusal_or_non_cont_hh;
         elsif i = "51" then
            return lang_prob_or_nc_hh;
         elsif i = "52" then
            return age_infirm_or_nc_hh;
         elsif i = "53" then
            return non_cont_or_nc_hh;
         elsif i = "54" then
            return out_of_scope_or_nc_hh;
         elsif i = "55" then
            return institutnsd_or_nc_hh;
         elsif i = "56" then
            return untraced_mover;
         elsif i = "6" then
            return pres_or_no_intv_or_no_proxy;
         elsif i = "60" then
            return child_ref_or_nc_hh;
         elsif i = "61" then
            return chd_lang_prob_or_nc_hh;
         elsif i = "62" then
            return chd_infirm_or_nc_hh;
         elsif i = "63" then
            return chd_non_cont_or_nc_hh;
         elsif i = "64" then
            return chd_o_o_scope_or_nc_hh;
         elsif i = "65" then
            return chd_instit_or_nc_hh;
         elsif i = "66" then
            return chd_untraced_mover;
         elsif i = "8" then
            return other;
         elsif i = "80" then
            return no_one_elig_in_hh;
         elsif i = "81" then
            return prev_wave_adamant_refusl;
         elsif i = "82" then
            return l_t_untraced_wdrawn;
         elsif i = "83" then
            return withdrawn_before_field;
         elsif i = "9" then
            return lost_capi_intvw;
         elsif i = "98" then
            return other_retiring;
         elsif i = "99" then
            return dead;
        end if;
        Put_Line("Convert_Ivfio_Type: Unmatched string |" & i & "|" );
        return Ivfio_Type'First; -- never actually gets here; for compiler only
    end Convert_Ivfio_Type;



    function Pretty_Print( i : Ivh1_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ivh1_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ivh1_Type( i : String ) return Ivh1_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
        end if;
        Put_Line("Convert_Ivh1_Type: Unmatched string |" & i & "|" );
        return Ivh1_Type'First; -- never actually gets here; for compiler only
    end Convert_Ivh1_Type;



    function Pretty_Print( i : Ivhsize_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ivhsize_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ivhsize_Type( i : String ) return Ivhsize_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
        end if;
        Put_Line("Convert_Ivhsize_Type: Unmatched string |" & i & "|" );
        return Ivhsize_Type'First; -- never actually gets here; for compiler only
    end Convert_Ivhsize_Type;



    function Pretty_Print( i : Ivhzif_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when yes => return "Yes";
             when no => return "No";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ivhzif_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ivhzif_Type( i : String ) return Ivhzif_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
        end if;
        Put_Line("Convert_Ivhzif_Type: Unmatched string |" & i & "|" );
        return Ivhzif_Type'First; -- never actually gets here; for compiler only
    end Convert_Ivhzif_Type;



    function Pretty_Print( i : Ivia_Type ) return String is
    begin
         case i is
             when movers_known_bfr_field => return "Movers-known bfr field";
             when not_issued_to_field => return "Not issued to field";
             when telephone_area_1 => return "Telephone Area 1";
             when telephone_area_2 => return "Telephone Area 2";
             when telephone_only => return "Telephone only";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ivia_Type ) return Boolean is
    begin
         case i is
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ivia_Type( i : String ) return Ivia_Type is
    begin
         if i = "0" then
            return movers_known_bfr_field;
         elsif i = "300" then
            return not_issued_to_field;
         elsif i = "391" then
            return telephone_area_1;
         elsif i = "392" then
            return telephone_area_2;
         elsif i = "398" then
            return telephone_only;
        end if;
        Put_Line("Convert_Ivia_Type: Unmatched string |" & i & "|" );
        return Ivia_Type'First; -- never actually gets here; for compiler only
    end Convert_Ivia_Type;



    function Pretty_Print( i : Iviam_Type ) return String is
    begin
         case i is
             when missing_or_wild => return "Missing or wild";
             when no_nonlocal_move => return "No nonlocal move";
             when tel_int_hh_moved => return "Tel. Int. HH Moved";
             when not_issued_or_alloc => return "Not issued/alloc";
             when telephone_area_1 => return "Telephone Area 1";
             when telephone_area_2 => return "Telephone Area 2";
             when telephone_only => return "Telephone only";
             when mvd_ni_gb_no_attempt => return "Mvd NI-GB no attempt";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Iviam_Type ) return Boolean is
    begin
         case i is
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Iviam_Type( i : String ) return Iviam_Type is
    begin
         if i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return no_nonlocal_move;
         elsif i = "299" then
            return tel_int_hh_moved;
         elsif i = "300" then
            return not_issued_or_alloc;
         elsif i = "391" then
            return telephone_area_1;
         elsif i = "392" then
            return telephone_area_2;
         elsif i = "398" then
            return telephone_only;
         elsif i = "999" then
            return mvd_ni_gb_no_attempt;
        end if;
        Put_Line("Convert_Iviam_Type: Unmatched string |" & i & "|" );
        return Iviam_Type'First; -- never actually gets here; for compiler only
    end Convert_Iviam_Type;



    function Pretty_Print( i : Ivid_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing => return "Missing";
             when intvw_not_attempted => return "Intvw not attempted";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ivid_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ivid_Type( i : String ) return Ivid_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return intvw_not_attempted;
        end if;
        Put_Line("Convert_Ivid_Type: Unmatched string |" & i & "|" );
        return Ivid_Type'First; -- never actually gets here; for compiler only
    end Convert_Ivid_Type;



    function Pretty_Print( i : Ivievr_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when yes => return "Yes";
             when no_new => return "No: new";
             when no_never => return "No: never";
             when no_check => return "No: check";
             when deceased => return "Deceased";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ivievr_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ivievr_Type( i : String ) return Ivievr_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no_new;
         elsif i = "3" then
            return no_never;
         elsif i = "4" then
            return no_check;
         elsif i = "5" then
            return deceased;
         elsif i = "6" then
            return deceased;
        end if;
        Put_Line("Convert_Ivievr_Type: Unmatched string |" & i & "|" );
        return Ivievr_Type'First; -- never actually gets here; for compiler only
    end Convert_Ivievr_Type;



    function Pretty_Print( i : Iviolw_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when full_interview => return "Full interview";
             when eligible_but_not_interviewed => return "Eligible but not interviewed";
             when youth_int => return "Youth int";
             when child_gt_11 => return "Child < 11";
             when adult_in_non_int_hhold => return "Adult in non-int hhold";
             when retired_rejoiner => return "Retired rejoiner";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Iviolw_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Iviolw_Type( i : String ) return Iviolw_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return full_interview;
         elsif i = "2" then
            return eligible_but_not_interviewed;
         elsif i = "3" then
            return youth_int;
         elsif i = "4" then
            return child_gt_11;
         elsif i = "5" then
            return adult_in_non_int_hhold;
         elsif i = "6" then
            return retired_rejoiner;
        end if;
        Put_Line("Convert_Iviolw_Type: Unmatched string |" & i & "|" );
        return Iviolw_Type'First; -- never actually gets here; for compiler only
    end Convert_Iviolw_Type;



    function Pretty_Print( i : Iviow1_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when full_interview => return "Full interview";
             when proxy => return "Proxy";
             when refusal => return "Refusal";
             when absent_no_proxy => return "Absent, no proxy";
             when oth_non_cont_or_no_prox => return "Oth non-cont/no prox";
             when pres_or_no_intv_or_no_prox => return "Pres/no intv/no prox";
             when child_under_16 => return "Child under 16";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Iviow1_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Iviow1_Type( i : String ) return Iviow1_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return full_interview;
         elsif i = "2" then
            return proxy;
         elsif i = "3" then
            return refusal;
         elsif i = "4" then
            return absent_no_proxy;
         elsif i = "5" then
            return oth_non_cont_or_no_prox;
         elsif i = "6" then
            return pres_or_no_intv_or_no_prox;
         elsif i = "7" then
            return child_under_16;
         elsif i = "8" then
            return other;
        end if;
        Put_Line("Convert_Iviow1_Type: Unmatched string |" & i & "|" );
        return Iviow1_Type'First; -- never actually gets here; for compiler only
    end Convert_Iviow1_Type;



    function Pretty_Print( i : Iviow2_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when full_interview => return "Full interview";
             when elig_in_refusal_hh => return "Elig - in refusal HH";
             when out_of_scope_or_institd => return "Out of scope/institd";
             when chld_in_nonresp_hh => return "Chld - in nonresp HH";
             when proxy => return "Proxy";
             when refusal => return "Refusal";
             when absent => return "Absent";
             when non_contact => return "Non contact";
             when child_under_16 => return "Child under 16";
             when moved => return "Moved";
             when other => return "Other";
             when elig_in_non_cont_h => return "Elig - in non-cont H";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Iviow2_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Iviow2_Type( i : String ) return Iviow2_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return full_interview;
         elsif i = "10" then
            return elig_in_refusal_hh;
         elsif i = "11" then
            return out_of_scope_or_institd;
         elsif i = "12" then
            return chld_in_nonresp_hh;
         elsif i = "2" then
            return proxy;
         elsif i = "3" then
            return refusal;
         elsif i = "4" then
            return absent;
         elsif i = "5" then
            return non_contact;
         elsif i = "6" then
            return child_under_16;
         elsif i = "7" then
            return moved;
         elsif i = "8" then
            return other;
         elsif i = "9" then
            return elig_in_non_cont_h;
        end if;
        Put_Line("Convert_Iviow2_Type: Unmatched string |" & i & "|" );
        return Iviow2_Type'First; -- never actually gets here; for compiler only
    end Convert_Iviow2_Type;



    function Pretty_Print( i : Iviow3_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when full_interview => return "Full interview";
             when child_in_non_cont_h => return "Child- in non-cont H";
             when other => return "Other";
             when chld_in_nonresp_hh => return "Chld - in nonresp HH";
             when proxy => return "Proxy";
             when telephone => return "Telephone";
             when refusal => return "Refusal";
             when elig_in_non_cont_h => return "Elig - in non-cont H";
             when child_under_16 => return "Child under 16";
             when elig_in_refusal_hh => return "Elig - in refusal HH";
             when moved => return "Moved";
             when out_of_scope_or_institd => return "Out of scope/institd";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Iviow3_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Iviow3_Type( i : String ) return Iviow3_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return full_interview;
         elsif i = "10" then
            return child_in_non_cont_h;
         elsif i = "11" then
            return other;
         elsif i = "12" then
            return chld_in_nonresp_hh;
         elsif i = "2" then
            return proxy;
         elsif i = "3" then
            return telephone;
         elsif i = "4" then
            return refusal;
         elsif i = "5" then
            return elig_in_non_cont_h;
         elsif i = "6" then
            return child_under_16;
         elsif i = "7" then
            return elig_in_refusal_hh;
         elsif i = "8" then
            return moved;
         elsif i = "9" then
            return out_of_scope_or_institd;
        end if;
        Put_Line("Convert_Iviow3_Type: Unmatched string |" & i & "|" );
        return Iviow3_Type'First; -- never actually gets here; for compiler only
    end Convert_Iviow3_Type;



    function Pretty_Print( i : Iviow4_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when full_interview => return "Full interview";
             when child_in_non_cont_h => return "Child- in non-cont H";
             when other => return "Other";
             when chld_in_nonresp_hh => return "Chld - in nonresp HH";
             when retired_rejoiner => return "Retired rejoiner";
             when proxy => return "Proxy";
             when telephone => return "Telephone";
             when refusal => return "Refusal";
             when elig_in_non_cont_h => return "Elig - in non-cont H";
             when child_under_16 => return "Child under 16";
             when elig_in_refusal_hh => return "Elig - in refusal HH";
             when moved => return "Moved";
             when out_of_scope_or_institd => return "Out of scope/institd";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Iviow4_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Iviow4_Type( i : String ) return Iviow4_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return full_interview;
         elsif i = "10" then
            return child_in_non_cont_h;
         elsif i = "11" then
            return other;
         elsif i = "12" then
            return chld_in_nonresp_hh;
         elsif i = "13" then
            return retired_rejoiner;
         elsif i = "2" then
            return proxy;
         elsif i = "3" then
            return telephone;
         elsif i = "4" then
            return refusal;
         elsif i = "5" then
            return elig_in_non_cont_h;
         elsif i = "6" then
            return child_under_16;
         elsif i = "7" then
            return elig_in_refusal_hh;
         elsif i = "8" then
            return moved;
         elsif i = "9" then
            return out_of_scope_or_institd;
        end if;
        Put_Line("Convert_Iviow4_Type: Unmatched string |" & i & "|" );
        return Iviow4_Type'First; -- never actually gets here; for compiler only
    end Convert_Iviow4_Type;



    function Pretty_Print( i : Ivips_Type ) return String is
    begin
         case i is
             when missing => return "Missing";
             when in_ips_sample => return "In IPS Sample";
             when not_in_ips_sample => return "Not in IPS Sample";
             when orig_ips_but_moved => return "Orig. IPS but moved";
             when w_1_non_contact_hh => return "W 1 non-contact HH";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ivips_Type ) return Boolean is
    begin
         case i is
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ivips_Type( i : String ) return Ivips_Type is
    begin
         if i = "-9" then
            return missing;
         elsif i = "1" then
            return in_ips_sample;
         elsif i = "2" then
            return not_in_ips_sample;
         elsif i = "3" then
            return orig_ips_but_moved;
         elsif i = "4" then
            return w_1_non_contact_hh;
        end if;
        Put_Line("Convert_Ivips_Type: Unmatched string |" & i & "|" );
        return Ivips_Type'First; -- never actually gets here; for compiler only
    end Convert_Ivips_Type;



    function Pretty_Print( i : Ivireis_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when re_issued_to_field => return "Re-issued to field";
             when no_re_issue_to_field => return "No re-issue to field";
             when other_action => return "Other action";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ivireis_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ivireis_Type( i : String ) return Ivireis_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return re_issued_to_field;
         elsif i = "2" then
            return no_re_issue_to_field;
         elsif i = "3" then
            return other_action;
        end if;
        Put_Line("Convert_Ivireis_Type: Unmatched string |" & i & "|" );
        return Ivireis_Type'First; -- never actually gets here; for compiler only
    end Convert_Ivireis_Type;



    function Pretty_Print( i : Ivisst_Type ) return String is
    begin
         case i is
             when yes => return "Yes";
             when no_or_inacsble_hhold_0 => return "No/inac'sble hhold 0";
             when no_or_retiring_hhold_0 => return "No/retiring hhold 0";
             when no_or_inlgble_splt_off => return "No/inlgble splt-off";
             when no_or_other_split_off => return "No/other split-off";
             when issued_to_field_in_error => return "Issued to field in error";
             when not_fed_forward_but_issued => return "Not fed forward but issued";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ivisst_Type ) return Boolean is
    begin
         case i is
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ivisst_Type( i : String ) return Ivisst_Type is
    begin
         if i = "1" then
            return yes;
         elsif i = "2" then
            return no_or_inacsble_hhold_0;
         elsif i = "3" then
            return no_or_retiring_hhold_0;
         elsif i = "4" then
            return no_or_inlgble_splt_off;
         elsif i = "5" then
            return no_or_other_split_off;
         elsif i = "6" then
            return issued_to_field_in_error;
         elsif i = "7" then
            return not_fed_forward_but_issued;
        end if;
        Put_Line("Convert_Ivisst_Type: Unmatched string |" & i & "|" );
        return Ivisst_Type'First; -- never actually gets here; for compiler only
    end Convert_Ivisst_Type;



    function Pretty_Print( i : Ivla_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when resp_alone => return "Resp alone";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ivla_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ivla_Type( i : String ) return Ivla_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return resp_alone;
        end if;
        Put_Line("Convert_Ivla_Type: Unmatched string |" & i & "|" );
        return Ivla_Type'First; -- never actually gets here; for compiler only
    end Convert_Ivla_Type;



    function Pretty_Print( i : Ivlb_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when partn_present => return "Partn present";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ivlb_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ivlb_Type( i : String ) return Ivlb_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "2" then
            return partn_present;
        end if;
        Put_Line("Convert_Ivlb_Type: Unmatched string |" & i & "|" );
        return Ivlb_Type'First; -- never actually gets here; for compiler only
    end Convert_Ivlb_Type;



    function Pretty_Print( i : Ivlc_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when other_adult_present => return "Other adult present";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ivlc_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ivlc_Type( i : String ) return Ivlc_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "3" then
            return other_adult_present;
        end if;
        Put_Line("Convert_Ivlc_Type: Unmatched string |" & i & "|" );
        return Ivlc_Type'First; -- never actually gets here; for compiler only
    end Convert_Ivlc_Type;



    function Pretty_Print( i : Ivlnc_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when missing_or_wild => return "Missing or wild";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ivlnc_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ivlnc_Type( i : String ) return Ivlnc_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-9" then
            return missing_or_wild;
        end if;
        Put_Line("Convert_Ivlnc_Type: Unmatched string |" & i & "|" );
        return Ivlnc_Type'First; -- never actually gets here; for compiler only
    end Convert_Ivlnc_Type;



    function Pretty_Print( i : Ivlpar_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when married_and_with_spouse => return "Married and with spouse";
             when cohabiting => return "Cohabiting";
             when neither => return "Neither";
             when in_civil_partnership => return "In civil partnership";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ivlpar_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ivlpar_Type( i : String ) return Ivlpar_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return married_and_with_spouse;
         elsif i = "2" then
            return cohabiting;
         elsif i = "3" then
            return neither;
         elsif i = "4" then
            return in_civil_partnership;
        end if;
        Put_Line("Convert_Ivlpar_Type: Unmatched string |" & i & "|" );
        return Ivlpar_Type'First; -- never actually gets here; for compiler only
    end Convert_Ivlpar_Type;



    function Pretty_Print( i : Ivlyr_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when new_entrant => return "New entrant";
             when yes => return "Yes";
             when no => return "No";
             when youth_int => return "Youth int";
             when child_gt_11 => return "Child < 11";
             when adult_in_non_int_hh => return "Adult in non-int hh";
             when unlisted_retired => return "Unlisted - retired";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ivlyr_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ivlyr_Type( i : String ) return Ivlyr_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return new_entrant;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
         elsif i = "3" then
            return youth_int;
         elsif i = "4" then
            return child_gt_11;
         elsif i = "5" then
            return adult_in_non_int_hh;
         elsif i = "6" then
            return unlisted_retired;
        end if;
        Put_Line("Convert_Ivlyr_Type: Unmatched string |" & i & "|" );
        return Ivlyr_Type'First; -- never actually gets here; for compiler only
    end Convert_Ivlyr_Type;



    function Pretty_Print( i : Ivmvst_Type ) return String is
    begin
         case i is
             when missing_or_wild => return "Missing or wild";
             when deceased => return "Deceased";
             when resident_at_last_addr => return "Resident at last addr";
             when resid_new_local_addr => return "Resid new local addr";
             when resid_new_nonloc_addr => return "Resid new nonloc addr";
             when incomplete_info => return "Incomplete info";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ivmvst_Type ) return Boolean is
    begin
         case i is
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ivmvst_Type( i : String ) return Ivmvst_Type is
    begin
         if i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return deceased;
         elsif i = "1" then
            return resident_at_last_addr;
         elsif i = "2" then
            return resid_new_local_addr;
         elsif i = "3" then
            return resid_new_nonloc_addr;
         elsif i = "4" then
            return incomplete_info;
        end if;
        Put_Line("Convert_Ivmvst_Type: Unmatched string |" & i & "|" );
        return Ivmvst_Type'First; -- never actually gets here; for compiler only
    end Convert_Ivmvst_Type;



    function Pretty_Print( i : Ivnadd_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when hh_at_new_address => return "HH at new address";
             when address_corrections => return "Address corrections";
             when no_corrections_reqd => return "No corrections reqd.";
             when new_addr_unkwn_or_o_o_s => return "New addr unkwn/o-o-s";
             when mvd_ni_gb_add_known => return "Mvd NI-GB Add known";
             when mvd_ni_gb_ad_unknwn => return "Mvd NI-GB Ad unknwn";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ivnadd_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ivnadd_Type( i : String ) return Ivnadd_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return hh_at_new_address;
         elsif i = "2" then
            return address_corrections;
         elsif i = "3" then
            return no_corrections_reqd;
         elsif i = "4" then
            return new_addr_unkwn_or_o_o_s;
         elsif i = "5" then
            return mvd_ni_gb_add_known;
         elsif i = "6" then
            return mvd_ni_gb_ad_unknwn;
        end if;
        Put_Line("Convert_Ivnadd_Type: Unmatched string |" & i & "|" );
        return Ivnadd_Type'First; -- never actually gets here; for compiler only
    end Convert_Ivnadd_Type;



    function Pretty_Print( i : Ivno_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing => return "Missing";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ivno_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ivno_Type( i : String ) return Ivno_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing;
        end if;
        Put_Line("Convert_Ivno_Type: Unmatched string |" & i & "|" );
        return Ivno_Type'First; -- never actually gets here; for compiler only
    end Convert_Ivno_Type;



    function Pretty_Print( i : Ivpa_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when informant_alone => return "Informant alone";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ivpa_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ivpa_Type( i : String ) return Ivpa_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return informant_alone;
        end if;
        Put_Line("Convert_Ivpa_Type: Unmatched string |" & i & "|" );
        return Ivpa_Type'First; -- never actually gets here; for compiler only
    end Convert_Ivpa_Type;



    function Pretty_Print( i : Ivpb_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when partner_present => return "Partner present";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ivpb_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ivpb_Type( i : String ) return Ivpb_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return partner_present;
         elsif i = "2" then
            return partner_present;
        end if;
        Put_Line("Convert_Ivpb_Type: Unmatched string |" & i & "|" );
        return Ivpb_Type'First; -- never actually gets here; for compiler only
    end Convert_Ivpb_Type;



    function Pretty_Print( i : Ivpc_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when other_adlts_pres => return "Other adlts pres";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ivpc_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ivpc_Type( i : String ) return Ivpc_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return other_adlts_pres;
         elsif i = "3" then
            return other_adlts_pres;
        end if;
        Put_Line("Convert_Ivpc_Type: Unmatched string |" & i & "|" );
        return Ivpc_Type'First; -- never actually gets here; for compiler only
    end Convert_Ivpc_Type;



    function Pretty_Print( i : Ivpd_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when children_present => return "Children present";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ivpd_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ivpd_Type( i : String ) return Ivpd_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return children_present;
         elsif i = "4" then
            return children_present;
        end if;
        Put_Line("Convert_Ivpd_Type: Unmatched string |" & i & "|" );
        return Ivpd_Type'First; -- never actually gets here; for compiler only
    end Convert_Ivpd_Type;



    function Pretty_Print( i : Ivpe_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when supervisor_present => return "Supervisor present";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ivpe_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ivpe_Type( i : String ) return Ivpe_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return supervisor_present;
         elsif i = "5" then
            return supervisor_present;
        end if;
        Put_Line("Convert_Ivpe_Type: Unmatched string |" & i & "|" );
        return Ivpe_Type'First; -- never actually gets here; for compiler only
    end Convert_Ivpe_Type;



    function Pretty_Print( i : Ivreis_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when re_issued_to_field => return "Re-issued to field";
             when no_re_issue_to_field => return "No re-issue to field";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ivreis_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ivreis_Type( i : String ) return Ivreis_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return re_issued_to_field;
         elsif i = "2" then
            return no_re_issue_to_field;
        end if;
        Put_Line("Convert_Ivreis_Type: Unmatched string |" & i & "|" );
        return Ivreis_Type'First; -- never actually gets here; for compiler only
    end Convert_Ivreis_Type;



    function Pretty_Print( i : Ivrref_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when too_busy => return "Too busy";
             when care_of_ill_or_old => return "Care of ill/old";
             when childcare => return "Childcare";
             when r_rarely_home => return "R. rarely home";
             when r_temp_absent => return "R. temp. absent";
             when elderly_or_sick => return "Elderly/sick";
             when no_confidentlty => return "No confidentlty";
             when qs_too_personal => return "Q's too personal";
             when uninterested => return "Uninterested";
             when wont_bother => return "Won't bother";
             when nothing_changed => return "Nothing changed";
             when survey_too_long => return "Survey too long";
             when waste_of_time => return "Waste of time";
             when prev_bad_exprnce => return "Prev bad exprnce";
             when probs_gift_voucher => return "Probs gift voucher";
             when probs_with_consents => return "Probs with consents";
             when other => return "Other";
             when hh_mem_says_refuse => return "HH mem says refuse";
             when othr_says_refuse => return "Othr says refuse";
             when hh_mem_refs_for_r => return "HH mem refs for R";
             when risk_other_response => return "Risk other response";
             when stressful_fam_sit => return "Stressful fam sit";
             when no_reason_given => return "No reason given";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ivrref_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ivrref_Type( i : String ) return Ivrref_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return too_busy;
         elsif i = "14" then
            return too_busy;
         elsif i = "10" then
            return care_of_ill_or_old;
         elsif i = "11" then
            return childcare;
         elsif i = "12" then
            return r_rarely_home;
         elsif i = "13" then
            return r_temp_absent;
         elsif i = "2" then
            return elderly_or_sick;
         elsif i = "20" then
            return no_confidentlty;
         elsif i = "21" then
            return qs_too_personal;
         elsif i = "3" then
            return uninterested;
         elsif i = "30" then
            return wont_bother;
         elsif i = "31" then
            return nothing_changed;
         elsif i = "32" then
            return survey_too_long;
         elsif i = "33" then
            return waste_of_time;
         elsif i = "34" then
            return prev_bad_exprnce;
         elsif i = "35" then
            return probs_gift_voucher;
         elsif i = "36" then
            return probs_with_consents;
         elsif i = "4" then
            return other;
         elsif i = "96" then
            return other;
         elsif i = "40" then
            return hh_mem_says_refuse;
         elsif i = "41" then
            return othr_says_refuse;
         elsif i = "42" then
            return hh_mem_refs_for_r;
         elsif i = "43" then
            return risk_other_response;
         elsif i = "5" then
            return stressful_fam_sit;
         elsif i = "99" then
            return no_reason_given;
        end if;
        Put_Line("Convert_Ivrref_Type: Unmatched string |" & i & "|" );
        return Ivrref_Type'First; -- never actually gets here; for compiler only
    end Convert_Ivrref_Type;



    function Pretty_Print( i : Ivrrefh_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when too_ill => return "Too ill";
             when care_of_ill_or_old => return "Care of ill/old";
             when childcare => return "Childcare";
             when r_rarely_home => return "R. rarely home";
             when r_temp_absent => return "R. temp. absent";
             when too_busy => return "Too busy";
             when too_elderly => return "Too elderly";
             when no_confidentiality => return "No confidentiality";
             when qs_too_personal => return "Q's too personal";
             when senile => return "Senile";
             when wont_bother => return "Won't bother";
             when nothing_changed => return "Nothing changed";
             when survey_too_long => return "Survey too long";
             when waste_of_time => return "Waste of time";
             when prev_bad_exprnce => return "Prev bad exprnce";
             when probs_gift_voucher => return "Probs gift voucher";
             when probs_with_consents => return "Probs with consents";
             when speaks_no_english => return "Speaks no English";
             when hh_mem_says_refuse => return "HH mem says refuse";
             when othr_says_refuse => return "Othr says refuse";
             when hh_mem_refs_for_r => return "HH mem refs for R";
             when stressful_fam_sit => return "Stressful fam sit";
             when no_hh_member_contact => return "No HH member contact";
             when out_scope_institn => return "Out scope-instit'n";
             when other => return "Other";
             when no_reason_given => return "No reason given";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ivrrefh_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ivrrefh_Type( i : String ) return Ivrrefh_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return too_ill;
         elsif i = "10" then
            return care_of_ill_or_old;
         elsif i = "11" then
            return childcare;
         elsif i = "12" then
            return r_rarely_home;
         elsif i = "13" then
            return r_temp_absent;
         elsif i = "14" then
            return too_busy;
         elsif i = "2" then
            return too_elderly;
         elsif i = "20" then
            return no_confidentiality;
         elsif i = "21" then
            return qs_too_personal;
         elsif i = "3" then
            return senile;
         elsif i = "30" then
            return wont_bother;
         elsif i = "31" then
            return nothing_changed;
         elsif i = "32" then
            return survey_too_long;
         elsif i = "33" then
            return waste_of_time;
         elsif i = "34" then
            return prev_bad_exprnce;
         elsif i = "35" then
            return probs_gift_voucher;
         elsif i = "36" then
            return probs_with_consents;
         elsif i = "4" then
            return speaks_no_english;
         elsif i = "40" then
            return hh_mem_says_refuse;
         elsif i = "41" then
            return othr_says_refuse;
         elsif i = "42" then
            return hh_mem_refs_for_r;
         elsif i = "5" then
            return stressful_fam_sit;
         elsif i = "94" then
            return no_hh_member_contact;
         elsif i = "95" then
            return out_scope_institn;
         elsif i = "96" then
            return other;
         elsif i = "99" then
            return no_reason_given;
        end if;
        Put_Line("Convert_Ivrrefh_Type: Unmatched string |" & i & "|" );
        return Ivrrefh_Type'First; -- never actually gets here; for compiler only
    end Convert_Ivrrefh_Type;



    function Pretty_Print( i : Ivsc_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when r_compl_or_returned => return "R compl/returned";
             when r_requi_assistance => return "R requi assistance";
             when r_refused => return "R refused";
             when other => return "Other";
             when other_completed => return "Other : completed";
             when other_not_completed => return "Other: not completed";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ivsc_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ivsc_Type( i : String ) return Ivsc_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return r_compl_or_returned;
         elsif i = "2" then
            return r_requi_assistance;
         elsif i = "3" then
            return r_refused;
         elsif i = "4" then
            return other;
         elsif i = "5" then
            return other_completed;
         elsif i = "6" then
            return other_not_completed;
        end if;
        Put_Line("Convert_Ivsc_Type: Unmatched string |" & i & "|" );
        return Ivsc_Type'First; -- never actually gets here; for compiler only
    end Convert_Ivsc_Type;



    function Pretty_Print( i : Ivsex_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing => return "Missing";
             when male => return "Male";
             when female => return "Female";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ivsex_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ivsex_Type( i : String ) return Ivsex_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return male;
         elsif i = "2" then
            return female;
        end if;
        Put_Line("Convert_Ivsex_Type: Unmatched string |" & i & "|" );
        return Ivsex_Type'First; -- never actually gets here; for compiler only
    end Convert_Ivsex_Type;



    function Pretty_Print( i : Ivstat1_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when intvwd_at_w1_and_w2 => return "Intvwd at W1 & W2";
             when joined_at_or_after_w3 => return "Joined at/after W3";
             when new_entrant_16yrs => return "New entrant 16yrs";
             when new_entrant_adult => return "New entrant adult";
             when youth => return "Youth";
             when child => return "Child";
             when check => return "Check";
             when deceased => return "Deceased";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ivstat1_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ivstat1_Type( i : String ) return Ivstat1_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return intvwd_at_w1_and_w2;
         elsif i = "1" then
            return joined_at_or_after_w3;
         elsif i = "2" then
            return new_entrant_16yrs;
         elsif i = "3" then
            return new_entrant_adult;
         elsif i = "4" then
            return youth;
         elsif i = "5" then
            return child;
         elsif i = "6" then
            return check;
         elsif i = "7" then
            return deceased;
        end if;
        Put_Line("Convert_Ivstat1_Type: Unmatched string |" & i & "|" );
        return Ivstat1_Type'First; -- never actually gets here; for compiler only
    end Convert_Ivstat1_Type;



    function Pretty_Print( i : Ivstat2_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when intvwd_at_w1_and_w2 => return "Intvwd at W1 & W2";
             when joined_at_or_after_w3 => return "Joined at/after W3";
             when new_entrant_16yrs => return "New entrant 16yrs";
             when never_interviewed => return "Never interviewed";
             when new_entrant_adult => return "New entrant adult";
             when child => return "Child";
             when check => return "Check";
             when proxy_respondent => return "Proxy respondent";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ivstat2_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ivstat2_Type( i : String ) return Ivstat2_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return intvwd_at_w1_and_w2;
         elsif i = "1" then
            return joined_at_or_after_w3;
         elsif i = "2" then
            return new_entrant_16yrs;
         elsif i = "3" then
            return never_interviewed;
         elsif i = "4" then
            return new_entrant_adult;
         elsif i = "5" then
            return child;
         elsif i = "6" then
            return check;
         elsif i = "7" then
            return proxy_respondent;
        end if;
        Put_Line("Convert_Ivstat2_Type: Unmatched string |" & i & "|" );
        return Ivstat2_Type'First; -- never actually gets here; for compiler only
    end Convert_Ivstat2_Type;



    function Pretty_Print( i : Ivva_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when respndent_alone => return "Respndent alone";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ivva_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ivva_Type( i : String ) return Ivva_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return respndent_alone;
        end if;
        Put_Line("Convert_Ivva_Type: Unmatched string |" & i & "|" );
        return Ivva_Type'First; -- never actually gets here; for compiler only
    end Convert_Ivva_Type;



    function Pretty_Print( i : J1boss_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when worked_on_own => return "Worked on own";
             when had_employees => return "Had employees";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : J1boss_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_J1boss_Type( i : String ) return J1boss_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return worked_on_own;
         elsif i = "2" then
            return had_employees;
        end if;
        Put_Line("Convert_J1boss_Type: Unmatched string |" & i & "|" );
        return J1boss_Type'First; -- never actually gets here; for compiler only
    end Convert_J1boss_Type;



    function Pretty_Print( i : J1cssf_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when never_had_a_job => return "Never had a job";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : J1cssf_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when never_had_a_job => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_J1cssf_Type( i : String ) return J1cssf_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-3" then
            return never_had_a_job;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
        end if;
        Put_Line("Convert_J1cssf_Type: Unmatched string |" & i & "|" );
        return J1cssf_Type'First; -- never actually gets here; for compiler only
    end Convert_J1cssf_Type;



    function Pretty_Print( i : J1gold_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when never_had_a_job => return "Never had a job";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when service_class_higher => return "Service class,higher";
             when semi_unskilled_manua => return "Semi,unskilled manua";
             when agricultural_workers => return "Agricultural workers";
             when service_class_lower => return "Service class,lower";
             when routine_non_manual_e => return "Routine non-manual e";
             when personal_service_wor => return "Personal service wor";
             when sml_props_w_employee => return "Sml props w employee";
             when sml_props_w_or_o_employ => return "Sml props w/o employ";
             when farmers_smallholders => return "Farmers,Smallholders";
             when foreman_technicians => return "Foreman,Technicians";
             when skilled_manual_worke => return "Skilled manual worke";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : J1gold_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when never_had_a_job => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_J1gold_Type( i : String ) return J1gold_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-3" then
            return never_had_a_job;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return service_class_higher;
         elsif i = "10" then
            return semi_unskilled_manua;
         elsif i = "11" then
            return agricultural_workers;
         elsif i = "2" then
            return service_class_lower;
         elsif i = "3" then
            return routine_non_manual_e;
         elsif i = "4" then
            return personal_service_wor;
         elsif i = "5" then
            return sml_props_w_employee;
         elsif i = "6" then
            return sml_props_w_or_o_employ;
         elsif i = "7" then
            return farmers_smallholders;
         elsif i = "8" then
            return foreman_technicians;
         elsif i = "9" then
            return skilled_manual_worke;
        end if;
        Put_Line("Convert_J1gold_Type: Unmatched string |" & i & "|" );
        return J1gold_Type'First; -- never actually gets here; for compiler only
    end Convert_J1gold_Type;



    function Pretty_Print( i : J1mngr_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when manager => return "Manager";
             when foreman_or_supervis => return "Foreman/supervis";
             when not_mnger_or_superv => return "Not mnger/superv";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : J1mngr_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_J1mngr_Type( i : String ) return J1mngr_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return manager;
         elsif i = "2" then
            return foreman_or_supervis;
         elsif i = "3" then
            return not_mnger_or_superv;
        end if;
        Put_Line("Convert_J1mngr_Type: Unmatched string |" & i & "|" );
        return J1mngr_Type'First; -- never actually gets here; for compiler only
    end Convert_J1mngr_Type;



    function Pretty_Print( i : J1none_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when still_in_ft_edn => return "Still in ft edn";
             when never_had_job => return "Never had job";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : J1none_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_J1none_Type( i : String ) return J1none_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return still_in_ft_edn;
         elsif i = "2" then
            return never_had_job;
        end if;
        Put_Line("Convert_J1none_Type: Unmatched string |" & i & "|" );
        return J1none_Type'First; -- never actually gets here; for compiler only
    end Convert_J1none_Type;



    function Pretty_Print( i : J1rgsc_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when never_had_a_job => return "Never had a job";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when professional_occ => return "Professional occ";
             when managerial_and_technic => return "Managerial & technic";
             when skilled_non_manual => return "Skilled non-manual";
             when skilled_manual => return "Skilled manual";
             when partly_skilled_occ => return "Partly skilled occ";
             when unskilled_occ => return "Unskilled occ";
             when armed_forces => return "Armed forces";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : J1rgsc_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when never_had_a_job => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_J1rgsc_Type( i : String ) return J1rgsc_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-3" then
            return never_had_a_job;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return professional_occ;
         elsif i = "2" then
            return managerial_and_technic;
         elsif i = "3" then
            return skilled_non_manual;
         elsif i = "4" then
            return skilled_manual;
         elsif i = "5" then
            return partly_skilled_occ;
         elsif i = "6" then
            return unskilled_occ;
         elsif i = "7" then
            return armed_forces;
        end if;
        Put_Line("Convert_J1rgsc_Type: Unmatched string |" & i & "|" );
        return J1rgsc_Type'First; -- never actually gets here; for compiler only
    end Convert_J1rgsc_Type;



    function Pretty_Print( i : J1sec_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when never_had_a_job => return "Never had a job";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing => return "Missing";
             when employers_large_org => return "Employers large org";
             when lwr_supervis_occups => return "Lwr supervis occups";
             when lwr_technical_craft => return "Lwr technical craft";
             when lwr_tech_process_op => return "Lwr tech process op";
             when semi_routine_sales => return "Semi-routine sales";
             when semi_routine_service => return "Semi-routine service";
             when semi_routine_tech => return "Semi-routine tech";
             when semi_routine_op => return "Semi-routine op";
             when semi_routine_agric => return "Semi-routine agric";
             when semi_routine_cleri => return "Semi-routine cleri";
             when semi_rtne_childcare => return "Semi-rtne childcare";
             when routine_sales_and_serv => return "Routine sales&serv";
             when routine_production => return "Routine production";
             when routine_technical => return "Routine technical";
             when routine_operative => return "Routine operative";
             when routine_agricultrl => return "Routine agricultrl";
             when higher_managerial => return "Higher managerial";
             when higher_prof_tradnl => return "Higher prof tradn'l";
             when higher_prof_new_emp => return "Higher prof new emp";
             when high_prof_trad_semp => return "High prof trad s.emp";
             when high_prof_new_semp => return "High prof new s.emp";
             when lower_prof_trad_emps => return "Lower Prof trad emps";
             when lower_prof_new_emps => return "Lower Prof new emps";
             when lwr_prof_trad_semp => return "Lwr Prof trad s.emp";
             when lower_prof_new_semp => return "Lower Prof new s.emp";
             when lower_manag_occupns => return "Lower manag occupns";
             when hgher_supervis_occup => return "Hgher supervis occup";
             when intrmd_cleri_and_admin => return "Intrmd cleri & admin";
             when intermd_sales_and_serv => return "Intermd sales & serv";
             when intermed_techn_and_aux => return "Intermed techn & aux";
             when intermed_engineering => return "Intermed engineering";
             when emp_small_non_prof => return "Emp,small (non-prof)";
             when emp_small_agricult => return "Emp,small (agricult)";
             when own_acct_wkrsnpro => return "Own acct wkrs(n.pro)";
             when own_acct_wkrsagric => return "Own acct wkrs(agric)";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : J1sec_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when never_had_a_job => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_J1sec_Type( i : String ) return J1sec_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-3" then
            return never_had_a_job;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing;
         elsif i = "10" then
            return employers_large_org;
         elsif i = "100" then
            return lwr_supervis_occups;
         elsif i = "111" then
            return lwr_technical_craft;
         elsif i = "112" then
            return lwr_tech_process_op;
         elsif i = "121" then
            return semi_routine_sales;
         elsif i = "122" then
            return semi_routine_service;
         elsif i = "123" then
            return semi_routine_tech;
         elsif i = "124" then
            return semi_routine_op;
         elsif i = "125" then
            return semi_routine_agric;
         elsif i = "126" then
            return semi_routine_cleri;
         elsif i = "127" then
            return semi_rtne_childcare;
         elsif i = "131" then
            return routine_sales_and_serv;
         elsif i = "132" then
            return routine_production;
         elsif i = "133" then
            return routine_technical;
         elsif i = "134" then
            return routine_operative;
         elsif i = "135" then
            return routine_agricultrl;
         elsif i = "20" then
            return higher_managerial;
         elsif i = "31" then
            return higher_prof_tradnl;
         elsif i = "32" then
            return higher_prof_new_emp;
         elsif i = "33" then
            return high_prof_trad_semp;
         elsif i = "34" then
            return high_prof_new_semp;
         elsif i = "41" then
            return lower_prof_trad_emps;
         elsif i = "42" then
            return lower_prof_new_emps;
         elsif i = "43" then
            return lwr_prof_trad_semp;
         elsif i = "44" then
            return lower_prof_new_semp;
         elsif i = "50" then
            return lower_manag_occupns;
         elsif i = "60" then
            return hgher_supervis_occup;
         elsif i = "71" then
            return intrmd_cleri_and_admin;
         elsif i = "72" then
            return intermd_sales_and_serv;
         elsif i = "73" then
            return intermed_techn_and_aux;
         elsif i = "74" then
            return intermed_engineering;
         elsif i = "81" then
            return emp_small_non_prof;
         elsif i = "82" then
            return emp_small_agricult;
         elsif i = "91" then
            return own_acct_wkrsnpro;
         elsif i = "92" then
            return own_acct_wkrsagric;
        end if;
        Put_Line("Convert_J1sec_Type: Unmatched string |" & i & "|" );
        return J1sec_Type'First; -- never actually gets here; for compiler only
    end Convert_J1sec_Type;



    function Pretty_Print( i : J1seg_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when never_had_a_job => return "Never had a job";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when employers_large => return "Employers,large";
             when personal_service_wrk => return "Personal service wrk";
             when foreman_manual => return "Foreman manual";
             when skilled_manual_wkrs => return "Skilled manual wkrs";
             when semi_skilled_manual => return "Semi-skilled manual";
             when unskilled_manual_wkr => return "Unskilled manual wkr";
             when own_account_wkrs => return "Own account wkrs";
             when farmers_employers => return "Farmers - employers";
             when farmers_own_accoun => return "Farmers - own accoun";
             when agricultural_workers => return "Agricultural workers";
             when members_of_armed_for => return "Members of armed for";
             when managers_large => return "Managers,large";
             when employers_small => return "Employers,small";
             when managers_small => return "Managers,small";
             when professional_self_em => return "Professional Self-em";
             when professional_employe => return "Professional employe";
             when int_non_manual_work => return "Int. non-manual,work";
             when int_non_man_foreman => return "Int. non-man,foreman";
             when junior_non_manual => return "Junior non-manual";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : J1seg_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when never_had_a_job => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_J1seg_Type( i : String ) return J1seg_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-3" then
            return never_had_a_job;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return employers_large;
         elsif i = "10" then
            return personal_service_wrk;
         elsif i = "11" then
            return foreman_manual;
         elsif i = "12" then
            return skilled_manual_wkrs;
         elsif i = "13" then
            return semi_skilled_manual;
         elsif i = "14" then
            return unskilled_manual_wkr;
         elsif i = "15" then
            return own_account_wkrs;
         elsif i = "16" then
            return farmers_employers;
         elsif i = "17" then
            return farmers_own_accoun;
         elsif i = "18" then
            return agricultural_workers;
         elsif i = "19" then
            return members_of_armed_for;
         elsif i = "2" then
            return managers_large;
         elsif i = "3" then
            return employers_small;
         elsif i = "4" then
            return managers_small;
         elsif i = "5" then
            return professional_self_em;
         elsif i = "6" then
            return professional_employe;
         elsif i = "7" then
            return int_non_manual_work;
         elsif i = "8" then
            return int_non_man_foreman;
         elsif i = "9" then
            return junior_non_manual;
        end if;
        Put_Line("Convert_J1seg_Type: Unmatched string |" & i & "|" );
        return J1seg_Type'First; -- never actually gets here; for compiler only
    end Convert_J1seg_Type;



    function Pretty_Print( i : J1semp_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when employee => return "Employee";
             when self_employed => return "Self-employed";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : J1semp_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_J1semp_Type( i : String ) return J1semp_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return employee;
         elsif i = "2" then
            return self_employed;
        end if;
        Put_Line("Convert_J1semp_Type: Unmatched string |" & i & "|" );
        return J1semp_Type'First; -- never actually gets here; for compiler only
    end Convert_J1semp_Type;



    function Pretty_Print( i : J1soc00_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : J1soc00_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_J1soc00_Type( i : String ) return J1soc00_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
        end if;
        Put_Line("Convert_J1soc00_Type: Unmatched string |" & i & "|" );
        return J1soc00_Type'First; -- never actually gets here; for compiler only
    end Convert_J1soc00_Type;



    function Pretty_Print( i : J2hrs_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when s_97_hours_or_more => return "97 hours or more";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : J2hrs_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_J2hrs_Type( i : String ) return J2hrs_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "97" then
            return s_97_hours_or_more;
        end if;
        Put_Line("Convert_J2hrs_Type: Unmatched string |" & i & "|" );
        return J2hrs_Type'First; -- never actually gets here; for compiler only
    end Convert_J2hrs_Type;



    function Pretty_Print( i : J2payi_Type ) return String is
    begin
         case i is
             when var_dont_know => return "Var Don't Know";
             when var_refused => return "Var Refused";
             when blank => return "";
             when var_proxy_resp => return "Var Proxy resp";
             when var_inapplicable => return "Var Inapplicable";
             when var_missing_or_wild => return "Var Missing or wild";
             when not_imputed => return "Not Imputed";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : J2payi_Type ) return Boolean is
    begin
         case i is
             when var_dont_know => return True;
             when var_refused => return True;
             when blank => return True;
             when var_proxy_resp => return True;
             when var_inapplicable => return True;
             when var_missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_J2payi_Type( i : String ) return J2payi_Type is
    begin
         if i = "-1" then
            return var_dont_know;
         elsif i = "-2" then
            return var_refused;
         elsif i = "-3" then
            return blank;
         elsif i = "-7" then
            return var_proxy_resp;
         elsif i = "-8" then
            return var_inapplicable;
         elsif i = "-9" then
            return var_missing_or_wild;
         elsif i = "0" then
            return not_imputed;
        end if;
        Put_Line("Convert_J2payi_Type: Unmatched string |" & i & "|" );
        return J2payi_Type'First; -- never actually gets here; for compiler only
    end Convert_J2payi_Type;



    function Pretty_Print( i : J2semp_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when employee => return "Employee";
             when self_employed => return "Self employed";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : J2semp_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_J2semp_Type( i : String ) return J2semp_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return employee;
         elsif i = "2" then
            return self_employed;
        end if;
        Put_Line("Convert_J2semp_Type: Unmatched string |" & i & "|" );
        return J2semp_Type'First; -- never actually gets here; for compiler only
    end Convert_J2semp_Type;



    function Pretty_Print( i : J2soc_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : J2soc_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_J2soc_Type( i : String ) return J2soc_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
        end if;
        Put_Line("Convert_J2soc_Type: Unmatched string |" & i & "|" );
        return J2soc_Type'First; -- never actually gets here; for compiler only
    end Convert_J2soc_Type;



    function Pretty_Print( i : Jbasp1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when promotion_prospects => return "Promotion prospects";
             when total_pay => return "Total pay";
             when good_relas_w_manager => return "Good relas w manager";
             when job_security => return "Job security";
             when using_initiative => return "Using initiative";
             when actual_work => return "Actual work";
             when hours_worked => return "Hours worked";
             when something_else => return "Something else";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jbasp1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jbasp1_Type( i : String ) return Jbasp1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return promotion_prospects;
         elsif i = "2" then
            return total_pay;
         elsif i = "3" then
            return good_relas_w_manager;
         elsif i = "4" then
            return job_security;
         elsif i = "5" then
            return using_initiative;
         elsif i = "6" then
            return actual_work;
         elsif i = "7" then
            return hours_worked;
         elsif i = "8" then
            return something_else;
        end if;
        Put_Line("Convert_Jbasp1_Type: Unmatched string |" & i & "|" );
        return Jbasp1_Type'First; -- never actually gets here; for compiler only
    end Convert_Jbasp1_Type;



    function Pretty_Print( i : Jbbgly_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when s_010990_or_before => return "01.09.90 or before";
             when after_010990 => return "After 01.09.90";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jbbgly_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jbbgly_Type( i : String ) return Jbbgly_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return s_010990_or_before;
         elsif i = "2" then
            return after_010990;
        end if;
        Put_Line("Convert_Jbbgly_Type: Unmatched string |" & i & "|" );
        return Jbbgly_Type'First; -- never actually gets here; for compiler only
    end Convert_Jbbgly_Type;



    function Pretty_Print( i : Jbbgly1_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when s_01092005_or_before => return "01.09.2005 or before";
             when after_01092005 => return "After 01.09.2005";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jbbgly1_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jbbgly1_Type( i : String ) return Jbbgly1_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return s_01092005_or_before;
         elsif i = "2" then
            return after_01092005;
        end if;
        Put_Line("Convert_Jbbgly1_Type: Unmatched string |" & i & "|" );
        return Jbbgly1_Type'First; -- never actually gets here; for compiler only
    end Convert_Jbbgly1_Type;



    function Pretty_Print( i : Jbbgm1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when january => return "January";
             when october => return "October";
             when november => return "November";
             when december => return "December";
             when winter => return "Winter";
             when spring => return "Spring";
             when summer => return "Summer";
             when autumn => return "Autumn";
             when february => return "February";
             when march => return "March";
             when april => return "April";
             when may => return "May";
             when june => return "June";
             when july => return "July";
             when august => return "August";
             when september => return "September";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jbbgm1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jbbgm1_Type( i : String ) return Jbbgm1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return january;
         elsif i = "10" then
            return october;
         elsif i = "11" then
            return november;
         elsif i = "12" then
            return december;
         elsif i = "13" then
            return winter;
         elsif i = "14" then
            return spring;
         elsif i = "15" then
            return summer;
         elsif i = "16" then
            return autumn;
         elsif i = "2" then
            return february;
         elsif i = "3" then
            return march;
         elsif i = "4" then
            return april;
         elsif i = "5" then
            return may;
         elsif i = "6" then
            return june;
         elsif i = "7" then
            return july;
         elsif i = "8" then
            return august;
         elsif i = "9" then
            return september;
        end if;
        Put_Line("Convert_Jbbgm1_Type: Unmatched string |" & i & "|" );
        return Jbbgm1_Type'First; -- never actually gets here; for compiler only
    end Convert_Jbbgm1_Type;



    function Pretty_Print( i : Jbchc1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when when_chldrn_at_schl => return "When chldrn at schl";
             when friend_or_neighbour => return "Friend/neighbour";
             when other => return "Other";
             when after_school_club => return "After school club";
             when look_after_themselves => return "Look after themselves";
             when i_work_from_home => return "I work from home";
             when spouse_or_partner => return "Spouse or partner";
             when nanny_or_mother_help => return "Nanny/mother help";
             when workplace_nursry => return "Workplace nursry";
             when day_nursery => return "Day nursery";
             when child_minder => return "Child minder";
             when a_relative => return "A relative";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jbchc1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jbchc1_Type( i : String ) return Jbchc1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return when_chldrn_at_schl;
         elsif i = "10" then
            return friend_or_neighbour;
         elsif i = "11" then
            return other;
         elsif i = "12" then
            return after_school_club;
         elsif i = "2" then
            return look_after_themselves;
         elsif i = "3" then
            return i_work_from_home;
         elsif i = "4" then
            return spouse_or_partner;
         elsif i = "5" then
            return nanny_or_mother_help;
         elsif i = "6" then
            return workplace_nursry;
         elsif i = "7" then
            return day_nursery;
         elsif i = "8" then
            return child_minder;
         elsif i = "9" then
            return a_relative;
        end if;
        Put_Line("Convert_Jbchc1_Type: Unmatched string |" & i & "|" );
        return Jbchc1_Type'First; -- never actually gets here; for compiler only
    end Convert_Jbchc1_Type;



    function Pretty_Print( i : Jbchc2_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when when_chldrn_at_schl => return "When chldrn at schl";
             when friend_or_neighbour => return "Friend/neighbour";
             when other => return "Other";
             when after_school_club => return "After school club";
             when look_after_themselves => return "Look after themselves";
             when i_work_from_home => return "I work from home";
             when spouse_or_partner => return "Spouse or partner";
             when nanny_or_mothers_help => return "Nanny/mothers help";
             when workplace_nursry => return "Workplace nursry";
             when day_nursery => return "Day nursery";
             when child_minder => return "Child minder";
             when a_relative => return "A relative";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jbchc2_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jbchc2_Type( i : String ) return Jbchc2_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return when_chldrn_at_schl;
         elsif i = "10" then
            return friend_or_neighbour;
         elsif i = "11" then
            return other;
         elsif i = "12" then
            return after_school_club;
         elsif i = "2" then
            return look_after_themselves;
         elsif i = "3" then
            return i_work_from_home;
         elsif i = "4" then
            return spouse_or_partner;
         elsif i = "5" then
            return nanny_or_mothers_help;
         elsif i = "6" then
            return workplace_nursry;
         elsif i = "7" then
            return day_nursery;
         elsif i = "8" then
            return child_minder;
         elsif i = "9" then
            return a_relative;
        end if;
        Put_Line("Convert_Jbchc2_Type: Unmatched string |" & i & "|" );
        return Jbchc2_Type'First; -- never actually gets here; for compiler only
    end Convert_Jbchc2_Type;



    function Pretty_Print( i : Jbchc3_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when when_chldrn_at_schl => return "When chldrn at schl";
             when friend_or_neighbour => return "Friend/neighbour";
             when other => return "Other";
             when after_school_club => return "After school club";
             when look_after_themselves => return "Look after themselves";
             when i_work_from_home => return "I work from home";
             when spouse_or_partner => return "Spouse or partner";
             when nanny_or_mothers_help => return "Nanny/mothers help";
             when workplace_nursery => return "Workplace nursery";
             when day_nursery => return "Day nursery";
             when child_minder => return "Child minder";
             when a_relative => return "A relative";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jbchc3_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jbchc3_Type( i : String ) return Jbchc3_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return when_chldrn_at_schl;
         elsif i = "10" then
            return friend_or_neighbour;
         elsif i = "11" then
            return other;
         elsif i = "12" then
            return after_school_club;
         elsif i = "2" then
            return look_after_themselves;
         elsif i = "3" then
            return i_work_from_home;
         elsif i = "4" then
            return spouse_or_partner;
         elsif i = "5" then
            return nanny_or_mothers_help;
         elsif i = "6" then
            return workplace_nursery;
         elsif i = "7" then
            return day_nursery;
         elsif i = "8" then
            return child_minder;
         elsif i = "9" then
            return a_relative;
        end if;
        Put_Line("Convert_Jbchc3_Type: Unmatched string |" & i & "|" );
        return Jbchc3_Type'First; -- never actually gets here; for compiler only
    end Convert_Jbchc3_Type;



    function Pretty_Print( i : Jbchgly_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when before_reference_date => return "Before reference date";
             when after_reference_date => return "After reference date";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jbchgly_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jbchgly_Type( i : String ) return Jbchgly_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return before_reference_date;
         elsif i = "2" then
            return after_reference_date;
        end if;
        Put_Line("Convert_Jbchgly_Type: Unmatched string |" & i & "|" );
        return Jbchgly_Type'First; -- never actually gets here; for compiler only
    end Convert_Jbchgly_Type;



    function Pretty_Print( i : Jbck1_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when valid_soc_data => return "Valid SOC data";
             when no_valid_soc_data => return "No valid SOC data";
             when not_emp_or_not_int_at_prev_wave => return "Not emp or not int at prev wave";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jbck1_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jbck1_Type( i : String ) return Jbck1_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return valid_soc_data;
         elsif i = "2" then
            return no_valid_soc_data;
         elsif i = "3" then
            return not_emp_or_not_int_at_prev_wave;
        end if;
        Put_Line("Convert_Jbck1_Type: Unmatched string |" & i & "|" );
        return Jbck1_Type'First; -- never actually gets here; for compiler only
    end Convert_Jbck1_Type;



    function Pretty_Print( i : Jbck10_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when valid_sector => return "Valid sector";
             when no_valid_sector => return "No valid sector";
             when not_int_or_empld_previous_wave => return "Not int/empl'd previous wave";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jbck10_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jbck10_Type( i : String ) return Jbck10_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return valid_sector;
         elsif i = "2" then
            return no_valid_sector;
         elsif i = "3" then
            return not_int_or_empld_previous_wave;
        end if;
        Put_Line("Convert_Jbck10_Type: Unmatched string |" & i & "|" );
        return Jbck10_Type'First; -- never actually gets here; for compiler only
    end Convert_Jbck10_Type;



    function Pretty_Print( i : Jbck11_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when valid_workplace_size => return "Valid workplace size";
             when no_valid_workplace_size => return "No valid workplace size";
             when not_int_or_empld_previous_wave => return "Not int/empl'd previous wave";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jbck11_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jbck11_Type( i : String ) return Jbck11_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return valid_workplace_size;
         elsif i = "2" then
            return no_valid_workplace_size;
         elsif i = "3" then
            return not_int_or_empld_previous_wave;
        end if;
        Put_Line("Convert_Jbck11_Type: Unmatched string |" & i & "|" );
        return Jbck11_Type'First; -- never actually gets here; for compiler only
    end Convert_Jbck11_Type;



    function Pretty_Print( i : Jbck2_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when no_valid_soc_data => return "No valid SOC data";
             when valid_soc_data => return "Valid SOC data";
             when not_int_or_empld_previous_wave => return "Not int/empl'd previous wave";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jbck2_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jbck2_Type( i : String ) return Jbck2_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return no_valid_soc_data;
         elsif i = "2" then
            return valid_soc_data;
         elsif i = "3" then
            return not_int_or_empld_previous_wave;
        end if;
        Put_Line("Convert_Jbck2_Type: Unmatched string |" & i & "|" );
        return Jbck2_Type'First; -- never actually gets here; for compiler only
    end Convert_Jbck2_Type;



    function Pretty_Print( i : Jbck3_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when valid_sic_data => return "Valid SIC data";
             when no_valid_sic_data => return "No valid SIC data";
             when not_int_or_empld_previous_wave => return "Not int/empl'd previous wave";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jbck3_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jbck3_Type( i : String ) return Jbck3_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return valid_sic_data;
         elsif i = "2" then
            return no_valid_sic_data;
         elsif i = "3" then
            return not_int_or_empld_previous_wave;
        end if;
        Put_Line("Convert_Jbck3_Type: Unmatched string |" & i & "|" );
        return Jbck3_Type'First; -- never actually gets here; for compiler only
    end Convert_Jbck3_Type;



    function Pretty_Print( i : Jbck4_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when no_valid_sic_data => return "No valid SIC data";
             when valid_sic_data => return "Valid SIC data";
             when not_int_or_empld_previous_wave => return "Not int/empl'd previous wave";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jbck4_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jbck4_Type( i : String ) return Jbck4_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return no_valid_sic_data;
         elsif i = "2" then
            return valid_sic_data;
         elsif i = "3" then
            return not_int_or_empld_previous_wave;
        end if;
        Put_Line("Convert_Jbck4_Type: Unmatched string |" & i & "|" );
        return Jbck4_Type'First; -- never actually gets here; for compiler only
    end Convert_Jbck4_Type;



    function Pretty_Print( i : Jbck5_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when ni_in_employment => return "NI in employment";
             when valid_employer_name => return "Valid employer name";
             when no_valid_employer_name => return "No valid employer name";
             when not_int_or_empld_previous_wave => return "Not int/empl'd previous wave";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jbck5_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jbck5_Type( i : String ) return Jbck5_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return ni_in_employment;
         elsif i = "2" then
            return valid_employer_name;
         elsif i = "3" then
            return no_valid_employer_name;
         elsif i = "4" then
            return not_int_or_empld_previous_wave;
        end if;
        Put_Line("Convert_Jbck5_Type: Unmatched string |" & i & "|" );
        return Jbck5_Type'First; -- never actually gets here; for compiler only
    end Convert_Jbck5_Type;



    function Pretty_Print( i : Jbck6_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when no_valid_employer_name => return "No valid employer name";
             when valid_employer_name => return "Valid employer name";
             when not_int_or_empld_previous_wave => return "Not int/empl'd previous wave";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jbck6_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jbck6_Type( i : String ) return Jbck6_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return no_valid_employer_name;
         elsif i = "2" then
            return valid_employer_name;
         elsif i = "3" then
            return not_int_or_empld_previous_wave;
        end if;
        Put_Line("Convert_Jbck6_Type: Unmatched string |" & i & "|" );
        return Jbck6_Type'First; -- never actually gets here; for compiler only
    end Convert_Jbck6_Type;



    function Pretty_Print( i : Jbck7_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when valid_emp_status => return "Valid emp status";
             when no_valid_emp_status => return "No valid emp status";
             when not_int_or_empld_previous_wave => return "Not int/empl'd previous wave";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jbck7_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jbck7_Type( i : String ) return Jbck7_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return valid_emp_status;
         elsif i = "2" then
            return no_valid_emp_status;
         elsif i = "3" then
            return not_int_or_empld_previous_wave;
        end if;
        Put_Line("Convert_Jbck7_Type: Unmatched string |" & i & "|" );
        return Jbck7_Type'First; -- never actually gets here; for compiler only
    end Convert_Jbck7_Type;



    function Pretty_Print( i : Jbck8_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when same_occ_and_employer => return "Same occ and employer";
             when different_occ_or_employer => return "Different occ or employer";
             when not_int_or_empld_previous_wave => return "Not int/empl'd previous wave";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jbck8_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jbck8_Type( i : String ) return Jbck8_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return same_occ_and_employer;
         elsif i = "2" then
            return different_occ_or_employer;
         elsif i = "3" then
            return not_int_or_empld_previous_wave;
        end if;
        Put_Line("Convert_Jbck8_Type: Unmatched string |" & i & "|" );
        return Jbck8_Type'First; -- never actually gets here; for compiler only
    end Convert_Jbck8_Type;



    function Pretty_Print( i : Jbck9_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when valid_managerial_duties => return "Valid managerial duties";
             when no_valid_managerial_duties => return "No valid managerial duties";
             when not_int_or_empld_previous_wave => return "Not int/empl'd previous wave";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jbck9_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jbck9_Type( i : String ) return Jbck9_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return valid_managerial_duties;
         elsif i = "2" then
            return no_valid_managerial_duties;
         elsif i = "3" then
            return not_int_or_empld_previous_wave;
        end if;
        Put_Line("Convert_Jbck9_Type: Unmatched string |" & i & "|" );
        return Jbck9_Type'First; -- never actually gets here; for compiler only
    end Convert_Jbck9_Type;



    function Pretty_Print( i : Jbedp2_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jbedp2_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jbedp2_Type( i : String ) return Jbedp2_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
        end if;
        Put_Line("Convert_Jbedp2_Type: Unmatched string |" & i & "|" );
        return Jbedp2_Type'First; -- never actually gets here; for compiler only
    end Convert_Jbedp2_Type;



    function Pretty_Print( i : Jbft_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when full_time_30_hrs_plus => return "Full time: 30 hrs +";
             when part_time_lt_30_hrs => return "Part time: lt 30 hrs";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jbft_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jbft_Type( i : String ) return Jbft_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return full_time_30_hrs_plus;
         elsif i = "2" then
            return part_time_lt_30_hrs;
        end if;
        Put_Line("Convert_Jbft_Type: Unmatched string |" & i & "|" );
        return Jbft_Type'First; -- never actually gets here; for compiler only
    end Convert_Jbft_Type;



    function Pretty_Print( i : Jbgold_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not Applicable";
             when missing => return "Missing";
             when service_class_higher_grade => return "Service class,higher grade";
             when semi_unskilled_manual_workers => return "Semi,unskilled manual workers";
             when agricultural_workers => return "Agricultural workers";
             when inadequately_described_non_stated => return "Inadequately described,non stated";
             when service_class_lower_grade => return "Service class,lower grade";
             when routine_non_manual_employees => return "Routine non-manual employees";
             when personal_service_workers => return "Personal service workers";
             when sml_props_w_employees => return "Sml props w employees";
             when sml_props_w_or_o_employees => return "Sml props w/o employees";
             when farmers_smallholders => return "Farmers,Smallholders";
             when foreman_technicians => return "Foreman,Technicians";
             when skilled_manual_workers => return "Skilled manual workers";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jbgold_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jbgold_Type( i : String ) return Jbgold_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return service_class_higher_grade;
         elsif i = "10" then
            return semi_unskilled_manual_workers;
         elsif i = "11" then
            return agricultural_workers;
         elsif i = "12" then
            return inadequately_described_non_stated;
         elsif i = "2" then
            return service_class_lower_grade;
         elsif i = "3" then
            return routine_non_manual_employees;
         elsif i = "4" then
            return personal_service_workers;
         elsif i = "5" then
            return sml_props_w_employees;
         elsif i = "6" then
            return sml_props_w_or_o_employees;
         elsif i = "7" then
            return farmers_smallholders;
         elsif i = "8" then
            return foreman_technicians;
         elsif i = "9" then
            return skilled_manual_workers;
        end if;
        Put_Line("Convert_Jbgold_Type: Unmatched string |" & i & "|" );
        return Jbgold_Type'First; -- never actually gets here; for compiler only
    end Convert_Jbgold_Type;



    function Pretty_Print( i : Jbhh_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when young_children => return "Young children";
             when family_obligs => return "Family obligs";
             when older_children => return "Older children";
             when divorce_or_separ => return "Divorce/separ";
             when ill_health => return "Ill health";
             when child_caring => return "Child Caring";
             when financial => return "Financial";
             when family_business => return "Family business";
             when spouse_or_partner => return "Spouse/partner";
             when parents => return "Parents";
             when other_relatives => return "Other relatives";
             when genl_family_care => return "Genl family care";
             when non_relatives => return "Non-relatives";
             when pregnancy => return "Pregnancy";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jbhh_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jbhh_Type( i : String ) return Jbhh_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return young_children;
         elsif i = "10" then
            return family_obligs;
         elsif i = "2" then
            return older_children;
         elsif i = "21" then
            return divorce_or_separ;
         elsif i = "22" then
            return ill_health;
         elsif i = "3" then
            return child_caring;
         elsif i = "31" then
            return financial;
         elsif i = "32" then
            return family_business;
         elsif i = "4" then
            return spouse_or_partner;
         elsif i = "5" then
            return parents;
         elsif i = "6" then
            return other_relatives;
         elsif i = "7" then
            return genl_family_care;
         elsif i = "8" then
            return non_relatives;
         elsif i = "9" then
            return pregnancy;
         elsif i = "96" then
            return other;
        end if;
        Put_Line("Convert_Jbhh_Type: Unmatched string |" & i & "|" );
        return Jbhh_Type'First; -- never actually gets here; for compiler only
    end Convert_Jbhh_Type;



    function Pretty_Print( i : Jbhrbg_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when s_97_or_more => return "97 or more";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jbhrbg_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jbhrbg_Type( i : String ) return Jbhrbg_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "97" then
            return s_97_or_more;
        end if;
        Put_Line("Convert_Jbhrbg_Type: Unmatched string |" & i & "|" );
        return Jbhrbg_Type'First; -- never actually gets here; for compiler only
    end Convert_Jbhrbg_Type;



    function Pretty_Print( i : Jbhrlk_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when work_fewer_hours => return "Work fewer hours";
             when work_more_hours => return "Work more hours";
             when contin_same_hrs => return "Contin same hrs";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jbhrlk_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jbhrlk_Type( i : String ) return Jbhrlk_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return work_fewer_hours;
         elsif i = "2" then
            return work_more_hours;
         elsif i = "3" then
            return contin_same_hrs;
        end if;
        Put_Line("Convert_Jbhrlk_Type: Unmatched string |" & i & "|" );
        return Jbhrlk_Type'First; -- never actually gets here; for compiler only
    end Convert_Jbhrlk_Type;



    function Pretty_Print( i : Jbhrly_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when s_97_or_above => return "97 or above";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jbhrly_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jbhrly_Type( i : String ) return Jbhrly_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "97" then
            return s_97_or_above;
        end if;
        Put_Line("Convert_Jbhrly_Type: Unmatched string |" & i & "|" );
        return Jbhrly_Type'First; -- never actually gets here; for compiler only
    end Convert_Jbhrly_Type;



    function Pretty_Print( i : Jbhrs_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_applicable => return "Not applicable";
             when s_97_or_above => return "97 or above";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jbhrs_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jbhrs_Type( i : String ) return Jbhrs_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_applicable;
         elsif i = "97" then
            return s_97_or_above;
        end if;
        Put_Line("Convert_Jbhrs_Type: Unmatched string |" & i & "|" );
        return Jbhrs_Type'First; -- never actually gets here; for compiler only
    end Convert_Jbhrs_Type;



    function Pretty_Print( i : Jblkcha_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when yes => return "Yes";
             when no => return "No";
             when doesnt_apply => return "Doesn't apply";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jblkcha_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jblkcha_Type( i : String ) return Jblkcha_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
         elsif i = "3" then
            return doesnt_apply;
        end if;
        Put_Line("Convert_Jblkcha_Type: Unmatched string |" & i & "|" );
        return Jblkcha_Type'First; -- never actually gets here; for compiler only
    end Convert_Jblkcha_Type;



    function Pretty_Print( i : Jblky_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when more_or_bettr_money => return "More/bettr money";
             when more_flex_hrs => return "More flex hrs";
             when health_reasons => return "Health reasons";
             when to_use_skills => return "To use skills";
             when less_dmandng_wrk => return "Less dmandng wrk";
             when prefer_this_job => return "Prefer this job";
             when new_job_better => return "New job better";
             when promot_prospects => return "Promot prospects";
             when more_responsibl => return "More responsibl";
             when job_security => return "Job security";
             when more_interes_job => return "More interes job";
             when to_be_own_boss => return "To be own boss";
             when grter_initiative => return "Grter initiative";
             when less_commuting => return "Less commuting";
             when less_hours => return "Less hours";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jblky_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jblky_Type( i : String ) return Jblky_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return more_or_bettr_money;
         elsif i = "10" then
            return more_flex_hrs;
         elsif i = "11" then
            return health_reasons;
         elsif i = "12" then
            return to_use_skills;
         elsif i = "13" then
            return less_dmandng_wrk;
         elsif i = "14" then
            return prefer_this_job;
         elsif i = "15" then
            return prefer_this_job;
         elsif i = "16" then
            return new_job_better;
         elsif i = "2" then
            return promot_prospects;
         elsif i = "3" then
            return more_responsibl;
         elsif i = "4" then
            return job_security;
         elsif i = "5" then
            return more_interes_job;
         elsif i = "6" then
            return to_be_own_boss;
         elsif i = "7" then
            return grter_initiative;
         elsif i = "8" then
            return less_commuting;
         elsif i = "9" then
            return less_hours;
         elsif i = "96" then
            return other;
        end if;
        Put_Line("Convert_Jblky_Type: Unmatched string |" & i & "|" );
        return Jblky_Type'First; -- never actually gets here; for compiler only
    end Convert_Jblky_Type;



    function Pretty_Print( i : Jblky1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when working_is_normal => return "Working is normal";
             when essential_foods_etc => return "Essential foods etc";
             when money_for_extras => return "Money for extras";
             when earn_money_for_self => return "Earn money for self";
             when peoples_company => return "Peoples company";
             when enjoy_working => return "Enjoy working";
             when follow_my_career => return "Follow my career";
             when other_reason => return "Other reason";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jblky1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jblky1_Type( i : String ) return Jblky1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return working_is_normal;
         elsif i = "2" then
            return essential_foods_etc;
         elsif i = "3" then
            return money_for_extras;
         elsif i = "4" then
            return earn_money_for_self;
         elsif i = "5" then
            return peoples_company;
         elsif i = "6" then
            return enjoy_working;
         elsif i = "7" then
            return follow_my_career;
         elsif i = "8" then
            return other_reason;
        end if;
        Put_Line("Convert_Jblky1_Type: Unmatched string |" & i & "|" );
        return Jblky1_Type'First; -- never actually gets here; for compiler only
    end Convert_Jblky1_Type;



    function Pretty_Print( i : Jbmix_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when almost_excl_men => return "Almost excl men";
             when mainly_by_men => return "Mainly by men";
             when equal_men_or_women => return "Equal men/women";
             when mainly_by_women => return "Mainly by women";
             when almost_excl_women => return "Almost excl women";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jbmix_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jbmix_Type( i : String ) return Jbmix_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return almost_excl_men;
         elsif i = "2" then
            return mainly_by_men;
         elsif i = "3" then
            return equal_men_or_women;
         elsif i = "4" then
            return mainly_by_women;
         elsif i = "5" then
            return almost_excl_women;
        end if;
        Put_Line("Convert_Jbmix_Type: Unmatched string |" & i & "|" );
        return Jbmix_Type'First; -- never actually gets here; for compiler only
    end Convert_Jbmix_Type;



    function Pretty_Print( i : Jbmngr_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when manager => return "Manager";
             when foreman_or_supervisor => return "Foreman/supervisor";
             when not_mnger_or_supervisor => return "Not mnger/supervisor";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jbmngr_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jbmngr_Type( i : String ) return Jbmngr_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return manager;
         elsif i = "2" then
            return foreman_or_supervisor;
         elsif i = "3" then
            return not_mnger_or_supervisor;
        end if;
        Put_Line("Convert_Jbmngr_Type: Unmatched string |" & i & "|" );
        return Jbmngr_Type'First; -- never actually gets here; for compiler only
    end Convert_Jbmngr_Type;



    function Pretty_Print( i : Jbmrs_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when ab => return "AB";
             when c1 => return "C1";
             when c2 => return "C2";
             when blank => return "";
             when ni_not_applicable => return "NI: not applicable";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jbmrs_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jbmrs_Type( i : String ) return Jbmrs_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return ab;
         elsif i = "2" then
            return c1;
         elsif i = "3" then
            return c2;
         elsif i = "4" then
            return blank;
         elsif i = "5" then
            return blank;
         elsif i = "7" then
            return ni_not_applicable;
        end if;
        Put_Line("Convert_Jbmrs_Type: Unmatched string |" & i & "|" );
        return Jbmrs_Type'First; -- never actually gets here; for compiler only
    end Convert_Jbmrs_Type;



    function Pretty_Print( i : Jboff_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when yes => return "Yes";
             when no => return "No";
             when waiting_for_job => return "Waiting for job";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jboff_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jboff_Type( i : String ) return Jboff_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
         elsif i = "3" then
            return waiting_for_job;
        end if;
        Put_Line("Convert_Jboff_Type: Unmatched string |" & i & "|" );
        return Jboff_Type'First; -- never actually gets here; for compiler only
    end Convert_Jboff_Type;



    function Pretty_Print( i : Jboffy_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when maternity_leave => return "Maternity leave";
             when other_leave_or_holiday => return "Other leave/holiday";
             when sick_or_injured => return "Sick or injured";
             when training_course => return "Training course";
             when laid_off_or_short_time => return "Laid off/short time";
             when on_strike => return "On strike";
             when pers_or_family_reasons => return "Pers/family reasons";
             when other_reasons => return "Other reasons";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jboffy_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jboffy_Type( i : String ) return Jboffy_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return maternity_leave;
         elsif i = "2" then
            return other_leave_or_holiday;
         elsif i = "3" then
            return sick_or_injured;
         elsif i = "4" then
            return training_course;
         elsif i = "5" then
            return laid_off_or_short_time;
         elsif i = "6" then
            return on_strike;
         elsif i = "7" then
            return pers_or_family_reasons;
         elsif i = "8" then
            return other_reasons;
        end if;
        Put_Line("Convert_Jboffy_Type: Unmatched string |" & i & "|" );
        return Jboffy_Type'First; -- never actually gets here; for compiler only
    end Convert_Jboffy_Type;



    function Pretty_Print( i : Jbong_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when before_tax => return "Before tax";
             when after_tax => return "After tax";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jbong_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jbong_Type( i : String ) return Jbong_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return before_tax;
         elsif i = "2" then
            return after_tax;
        end if;
        Put_Line("Convert_Jbong_Type: Unmatched string |" & i & "|" );
        return Jbong_Type'First; -- never actually gets here; for compiler only
    end Convert_Jbong_Type;



    function Pretty_Print( i : Jbot_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when none => return "None";
             when s_97_or_above => return "97 or above";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jbot_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jbot_Type( i : String ) return Jbot_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return none;
         elsif i = "97" then
            return s_97_or_above;
        end if;
        Put_Line("Convert_Jbot_Type: Unmatched string |" & i & "|" );
        return Jbot_Type'First; -- never actually gets here; for compiler only
    end Convert_Jbot_Type;



    function Pretty_Print( i : Jbotbg_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when no_paid_overtime => return "No paid overtime";
             when s_97_or_more => return "97 or more";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jbotbg_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jbotbg_Type( i : String ) return Jbotbg_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return no_paid_overtime;
         elsif i = "97" then
            return s_97_or_more;
        end if;
        Put_Line("Convert_Jbotbg_Type: Unmatched string |" & i & "|" );
        return Jbotbg_Type'First; -- never actually gets here; for compiler only
    end Convert_Jbotbg_Type;



    function Pretty_Print( i : Jbotly_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when no_paid_overtime => return "No paid overtime";
             when s_97_or_above => return "97 or above";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jbotly_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jbotly_Type( i : String ) return Jbotly_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return no_paid_overtime;
         elsif i = "97" then
            return s_97_or_above;
        end if;
        Put_Line("Convert_Jbotly_Type: Unmatched string |" & i & "|" );
        return Jbotly_Type'First; -- never actually gets here; for compiler only
    end Convert_Jbotly_Type;



    function Pretty_Print( i : Jbpatw_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing => return "Missing";
             when employer_fixes_hours => return "Employer fixes hours";
             when some_flexibility => return "Some flexibility";
             when jointly_decide_hours => return "Jointly decide hours";
             when decide_hours_self => return "Decide hours self";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jbpatw_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jbpatw_Type( i : String ) return Jbpatw_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return employer_fixes_hours;
         elsif i = "2" then
            return some_flexibility;
         elsif i = "3" then
            return jointly_decide_hours;
         elsif i = "4" then
            return decide_hours_self;
        end if;
        Put_Line("Convert_Jbpatw_Type: Unmatched string |" & i & "|" );
        return Jbpatw_Type'First; -- never actually gets here; for compiler only
    end Convert_Jbpatw_Type;



    function Pretty_Print( i : Jbpl_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when at_home => return "At home";
             when employers_prems => return "Employers prems";
             when driving_or_travel => return "Driving/travel";
             when s_1_plus_other_places => return "1 + other places";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jbpl_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jbpl_Type( i : String ) return Jbpl_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return at_home;
         elsif i = "2" then
            return employers_prems;
         elsif i = "3" then
            return driving_or_travel;
         elsif i = "4" then
            return s_1_plus_other_places;
         elsif i = "5" then
            return other;
        end if;
        Put_Line("Convert_Jbpl_Type: Unmatched string |" & i & "|" );
        return Jbpl_Type'First; -- never actually gets here; for compiler only
    end Convert_Jbpl_Type;



    function Pretty_Print( i : Jbrgsc_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when professional_occ => return "Professional occ";
             when managerial_and_technical_occ => return "Managerial & technical occ";
             when skilled_non_manual => return "Skilled non-manual";
             when skilled_manual => return "Skilled manual";
             when partly_skilled_occ => return "Partly skilled occ";
             when unskilled_occ => return "Unskilled occ";
             when armed_forces => return "Armed forces";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jbrgsc_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jbrgsc_Type( i : String ) return Jbrgsc_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return professional_occ;
         elsif i = "2" then
            return managerial_and_technical_occ;
         elsif i = "3" then
            return skilled_non_manual;
         elsif i = "4" then
            return skilled_manual;
         elsif i = "5" then
            return partly_skilled_occ;
         elsif i = "6" then
            return unskilled_occ;
         elsif i = "7" then
            return armed_forces;
        end if;
        Put_Line("Convert_Jbrgsc_Type: Unmatched string |" & i & "|" );
        return Jbrgsc_Type'First; -- never actually gets here; for compiler only
    end Convert_Jbrgsc_Type;



    function Pretty_Print( i : Jbsat_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when doesnt_apply => return "Doesn't apply";
             when not_satis_at_all => return "Not satis at all";
             when not_satis_or_dissatis => return "Not satis/dissatis";
             when completely_satis => return "Completely satis";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jbsat_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jbsat_Type( i : String ) return Jbsat_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return doesnt_apply;
         elsif i = "1" then
            return not_satis_at_all;
         elsif i = "4" then
            return not_satis_or_dissatis;
         elsif i = "7" then
            return completely_satis;
        end if;
        Put_Line("Convert_Jbsat_Type: Unmatched string |" & i & "|" );
        return Jbsat_Type'First; -- never actually gets here; for compiler only
    end Convert_Jbsat_Type;



    function Pretty_Print( i : Jbsat1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when doesnt_apply => return "Doesn't apply";
             when not_satisfied => return "Not satisfied";
             when not_satis_or_dissat => return "Not satis/dissat";
             when completely_satis => return "Completely satis";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jbsat1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jbsat1_Type( i : String ) return Jbsat1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return doesnt_apply;
         elsif i = "1" then
            return not_satisfied;
         elsif i = "4" then
            return not_satis_or_dissat;
         elsif i = "7" then
            return completely_satis;
        end if;
        Put_Line("Convert_Jbsat1_Type: Unmatched string |" & i & "|" );
        return Jbsat1_Type'First; -- never actually gets here; for compiler only
    end Convert_Jbsat1_Type;



    function Pretty_Print( i : Jbsat2_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when doesnt_apply_to_resp => return "Doesn't apply to resp";
             when not_satis_at_all => return "Not satis at all";
             when not_satis_or_dissat => return "Not satis/dissat";
             when completely_satis => return "Completely satis";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jbsat2_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jbsat2_Type( i : String ) return Jbsat2_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return doesnt_apply_to_resp;
         elsif i = "1" then
            return not_satis_at_all;
         elsif i = "4" then
            return not_satis_or_dissat;
         elsif i = "7" then
            return completely_satis;
        end if;
        Put_Line("Convert_Jbsat2_Type: Unmatched string |" & i & "|" );
        return Jbsat2_Type'First; -- never actually gets here; for compiler only
    end Convert_Jbsat2_Type;



    function Pretty_Print( i : Jbsat4_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when doesnt_apply => return "Doesn't apply";
             when not_satis_at_all => return "Not satis at all";
             when not_satis_or_dissat => return "Not satis/dissat";
             when completely_satis => return "Completely satis";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jbsat4_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jbsat4_Type( i : String ) return Jbsat4_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return doesnt_apply;
         elsif i = "1" then
            return not_satis_at_all;
         elsif i = "4" then
            return not_satis_or_dissat;
         elsif i = "7" then
            return completely_satis;
        end if;
        Put_Line("Convert_Jbsat4_Type: Unmatched string |" & i & "|" );
        return Jbsat4_Type'First; -- never actually gets here; for compiler only
    end Convert_Jbsat4_Type;



    function Pretty_Print( i : Jbsec_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing => return "Missing";
             when employers_large_org => return "Employers large org";
             when lwr_supervis_occups => return "Lwr supervis occups";
             when lwr_technical_craft => return "Lwr technical craft";
             when lwr_tech_process_op => return "Lwr tech process op";
             when semi_routine_sales => return "Semi-routine sales";
             when semi_routine_service => return "Semi-routine service";
             when semi_routine_tech => return "Semi-routine tech";
             when semi_routine_op => return "Semi-routine op";
             when semi_routine_agric => return "Semi-routine agric";
             when semi_routine_cleri => return "Semi-routine cleri";
             when semi_rtne_childcare => return "Semi-rtne childcare";
             when routine_sales_and_serv => return "Routine sales&serv";
             when routine_production => return "Routine production";
             when routine_technical => return "Routine technical";
             when routine_operative => return "Routine operative";
             when routine_agricultrl => return "Routine agricultrl";
             when higher_managerial => return "Higher managerial";
             when higher_prof_tradnl => return "Higher prof tradn'l";
             when higher_prof_new_emp => return "Higher prof new emp";
             when high_prof_trad_semp => return "High prof trad s.emp";
             when high_prof_new_semp => return "High prof new s.emp";
             when lower_prof_trad_emps => return "Lower Prof trad emps";
             when lower_prof_new_emps => return "Lower Prof new emps";
             when lwr_prof_trad_semp => return "Lwr Prof trad s.emp";
             when lower_prof_new_semp => return "Lower Prof new s.emp";
             when lower_manag_occupns => return "Lower manag occupns";
             when hgher_supervis_occup => return "Hgher supervis occup";
             when intrmd_cleri_and_admin => return "Intrmd cleri & admin";
             when intermd_sales_and_serv => return "Intermd sales & serv";
             when intermed_techn_and_aux => return "Intermed techn & aux";
             when intermed_engineering => return "Intermed engineering";
             when emp_small_non_prof => return "Emp,small (non-prof)";
             when emp_small_agricult => return "Emp,small (agricult)";
             when own_acct_wkrsnpro => return "Own acct wkrs(n.pro)";
             when own_acct_wkrsagric => return "Own acct wkrs(agric)";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jbsec_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jbsec_Type( i : String ) return Jbsec_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing;
         elsif i = "10" then
            return employers_large_org;
         elsif i = "100" then
            return lwr_supervis_occups;
         elsif i = "111" then
            return lwr_technical_craft;
         elsif i = "112" then
            return lwr_tech_process_op;
         elsif i = "121" then
            return semi_routine_sales;
         elsif i = "122" then
            return semi_routine_service;
         elsif i = "123" then
            return semi_routine_tech;
         elsif i = "124" then
            return semi_routine_op;
         elsif i = "125" then
            return semi_routine_agric;
         elsif i = "126" then
            return semi_routine_cleri;
         elsif i = "127" then
            return semi_rtne_childcare;
         elsif i = "131" then
            return routine_sales_and_serv;
         elsif i = "132" then
            return routine_production;
         elsif i = "133" then
            return routine_technical;
         elsif i = "134" then
            return routine_operative;
         elsif i = "135" then
            return routine_agricultrl;
         elsif i = "20" then
            return higher_managerial;
         elsif i = "31" then
            return higher_prof_tradnl;
         elsif i = "32" then
            return higher_prof_new_emp;
         elsif i = "33" then
            return high_prof_trad_semp;
         elsif i = "34" then
            return high_prof_new_semp;
         elsif i = "41" then
            return lower_prof_trad_emps;
         elsif i = "42" then
            return lower_prof_new_emps;
         elsif i = "43" then
            return lwr_prof_trad_semp;
         elsif i = "44" then
            return lower_prof_new_semp;
         elsif i = "50" then
            return lower_manag_occupns;
         elsif i = "60" then
            return hgher_supervis_occup;
         elsif i = "71" then
            return intrmd_cleri_and_admin;
         elsif i = "72" then
            return intermd_sales_and_serv;
         elsif i = "73" then
            return intermed_techn_and_aux;
         elsif i = "74" then
            return intermed_engineering;
         elsif i = "81" then
            return emp_small_non_prof;
         elsif i = "82" then
            return emp_small_agricult;
         elsif i = "91" then
            return own_acct_wkrsnpro;
         elsif i = "92" then
            return own_acct_wkrsagric;
        end if;
        Put_Line("Convert_Jbsec_Type: Unmatched string |" & i & "|" );
        return Jbsec_Type'First; -- never actually gets here; for compiler only
    end Convert_Jbsec_Type;



    function Pretty_Print( i : Jbsect_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when private_firm_or_company => return "Private firm/company";
             when civil_srv_or_cntrl_govt => return "Civil Srv/Cntrl Govt";
             when local_govt_or_town_hall => return "Local Govt/town hall";
             when nhs_or_higher_educ => return "NHS or higher educ";
             when natnalised_industry => return "Natnalised industry";
             when non_profit_orgs => return "Non-profit orgs.";
             when armed_forces => return "Armed forces";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jbsect_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jbsect_Type( i : String ) return Jbsect_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return private_firm_or_company;
         elsif i = "2" then
            return civil_srv_or_cntrl_govt;
         elsif i = "3" then
            return local_govt_or_town_hall;
         elsif i = "4" then
            return nhs_or_higher_educ;
         elsif i = "5" then
            return natnalised_industry;
         elsif i = "6" then
            return non_profit_orgs;
         elsif i = "7" then
            return armed_forces;
         elsif i = "8" then
            return other;
        end if;
        Put_Line("Convert_Jbsect_Type: Unmatched string |" & i & "|" );
        return Jbsect_Type'First; -- never actually gets here; for compiler only
    end Convert_Jbsect_Type;



    function Pretty_Print( i : Jbseg_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not Applicable";
             when missing => return "Missing";
             when employers_large => return "Employers,large";
             when personal_service_wrkrs => return "Personal service wrkrs";
             when foreman_manual => return "Foreman manual";
             when skilled_manual_wkrs => return "Skilled manual wkrs";
             when semi_skilled_manual_wkrs => return "Semi-skilled manual wkrs";
             when unskilled_manual_wkrs => return "Unskilled manual wkrs";
             when own_account_wkrs => return "Own account wkrs";
             when farmers_employers_managers => return "Farmers - employers,managers";
             when farmers_own_account => return "Farmers - own account";
             when agricultural_workers => return "Agricultural workers";
             when members_of_armed_forces => return "Members of armed forces";
             when managers_large => return "Managers,large";
             when inadequately_described_non_stated => return "Inadequately described,non stated";
             when employers_small => return "Employers,small";
             when managers_small => return "Managers,small";
             when professional_self_employed => return "Professional Self-employed";
             when professional_employees => return "Professional employees";
             when int_non_manual_workers => return "Int. non-manual,workers";
             when int_non_man_foreman => return "Int. non-man,foreman";
             when junior_non_manual => return "Junior non-manual";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jbseg_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jbseg_Type( i : String ) return Jbseg_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return employers_large;
         elsif i = "10" then
            return personal_service_wrkrs;
         elsif i = "11" then
            return foreman_manual;
         elsif i = "12" then
            return skilled_manual_wkrs;
         elsif i = "13" then
            return semi_skilled_manual_wkrs;
         elsif i = "14" then
            return unskilled_manual_wkrs;
         elsif i = "15" then
            return own_account_wkrs;
         elsif i = "16" then
            return farmers_employers_managers;
         elsif i = "17" then
            return farmers_own_account;
         elsif i = "18" then
            return agricultural_workers;
         elsif i = "19" then
            return members_of_armed_forces;
         elsif i = "2" then
            return managers_large;
         elsif i = "20" then
            return inadequately_described_non_stated;
         elsif i = "3" then
            return employers_small;
         elsif i = "4" then
            return managers_small;
         elsif i = "5" then
            return professional_self_employed;
         elsif i = "6" then
            return professional_employees;
         elsif i = "7" then
            return int_non_manual_workers;
         elsif i = "8" then
            return int_non_man_foreman;
         elsif i = "9" then
            return junior_non_manual;
        end if;
        Put_Line("Convert_Jbseg_Type: Unmatched string |" & i & "|" );
        return Jbseg_Type'First; -- never actually gets here; for compiler only
    end Convert_Jbseg_Type;



    function Pretty_Print( i : Jbsemp_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when employee => return "Employee";
             when self_employed => return "Self-employed";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jbsemp_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jbsemp_Type( i : String ) return Jbsemp_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return employee;
         elsif i = "2" then
            return self_employed;
        end if;
        Put_Line("Convert_Jbsemp_Type: Unmatched string |" & i & "|" );
        return Jbsemp_Type'First; -- never actually gets here; for compiler only
    end Convert_Jbsemp_Type;



    function Pretty_Print( i : Jbsempp_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when yes_employee => return "Yes, Employee";
             when yes_self_employed => return "Yes, Self-employed";
             when no => return "No";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jbsempp_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jbsempp_Type( i : String ) return Jbsempp_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return yes_employee;
         elsif i = "2" then
            return yes_self_employed;
         elsif i = "3" then
            return no;
        end if;
        Put_Line("Convert_Jbsempp_Type: Unmatched string |" & i & "|" );
        return Jbsempp_Type'First; -- never actually gets here; for compiler only
    end Convert_Jbsempp_Type;



    function Pretty_Print( i : Jbsize_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when s_1_2 => return "1 - 2";
             when dk_or_less_than_25 => return "DK/less than 25";
             when dk_or_25_or_more => return "DK/25 or more";
             when s_3_9 => return "3 - 9";
             when s_10_24 => return "10 - 24";
             when s_25_49 => return "25 - 49";
             when s_50_99 => return "50 - 99";
             when s_100_199 => return "100 - 199";
             when s_200_499 => return "200 - 499";
             when s_500_999 => return "500 - 999";
             when s_1000_or_more => return "1000 or more";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jbsize_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jbsize_Type( i : String ) return Jbsize_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return s_1_2;
         elsif i = "10" then
            return dk_or_less_than_25;
         elsif i = "11" then
            return dk_or_25_or_more;
         elsif i = "2" then
            return s_3_9;
         elsif i = "3" then
            return s_10_24;
         elsif i = "4" then
            return s_25_49;
         elsif i = "5" then
            return s_50_99;
         elsif i = "6" then
            return s_100_199;
         elsif i = "7" then
            return s_200_499;
         elsif i = "8" then
            return s_500_999;
         elsif i = "9" then
            return s_1000_or_more;
        end if;
        Put_Line("Convert_Jbsize_Type: Unmatched string |" & i & "|" );
        return Jbsize_Type'First; -- never actually gets here; for compiler only
    end Convert_Jbsize_Type;



    function Pretty_Print( i : Jbsoc_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jbsoc_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jbsoc_Type( i : String ) return Jbsoc_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
        end if;
        Put_Line("Convert_Jbsoc_Type: Unmatched string |" & i & "|" );
        return Jbsoc_Type'First; -- never actually gets here; for compiler only
    end Convert_Jbsoc_Type;



    function Pretty_Print( i : Jbstat_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when self_employed => return "Self employed";
             when something_else => return "Something else";
             when in_paid_employ => return "In paid employ";
             when unemployed => return "Unemployed";
             when retired => return "Retired";
             when family_care => return "Family care";
             when ft_student => return "FT student";
             when long_term_sick_or_disabled => return "Long term sick/disabled";
             when on_matern_leave => return "On matern leave";
             when govt_trng_scheme => return "Govt trng scheme";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jbstat_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jbstat_Type( i : String ) return Jbstat_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return self_employed;
         elsif i = "10" then
            return something_else;
         elsif i = "2" then
            return in_paid_employ;
         elsif i = "3" then
            return unemployed;
         elsif i = "4" then
            return retired;
         elsif i = "5" then
            return family_care;
         elsif i = "6" then
            return ft_student;
         elsif i = "7" then
            return long_term_sick_or_disabled;
         elsif i = "8" then
            return on_matern_leave;
         elsif i = "9" then
            return govt_trng_scheme;
        end if;
        Put_Line("Convert_Jbstat_Type: Unmatched string |" & i & "|" );
        return Jbstat_Type'First; -- never actually gets here; for compiler only
    end Convert_Jbstat_Type;



    function Pretty_Print( i : Jbstrna_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when never => return "Never";
             when occasionally => return "Occasionally";
             when some_of_the_time => return "Some of the time";
             when much_of_the_time => return "Much of the time";
             when most_of_the_time => return "Most of the time";
             when all_of_the_time => return "All of the time";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jbstrna_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jbstrna_Type( i : String ) return Jbstrna_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return never;
         elsif i = "2" then
            return occasionally;
         elsif i = "3" then
            return some_of_the_time;
         elsif i = "4" then
            return much_of_the_time;
         elsif i = "5" then
            return most_of_the_time;
         elsif i = "6" then
            return all_of_the_time;
        end if;
        Put_Line("Convert_Jbstrna_Type: Unmatched string |" & i & "|" );
        return Jbstrna_Type'First; -- never actually gets here; for compiler only
    end Convert_Jbstrna_Type;



    function Pretty_Print( i : Jbterm_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when permanent_job => return "Permanent job";
             when seasonal_or_tmp_job => return "Seasonal/tmp job";
             when contract_or_fixed_time => return "Contract/fixed time";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jbterm_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jbterm_Type( i : String ) return Jbterm_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return permanent_job;
         elsif i = "2" then
            return seasonal_or_tmp_job;
         elsif i = "3" then
            return contract_or_fixed_time;
        end if;
        Put_Line("Convert_Jbterm_Type: Unmatched string |" & i & "|" );
        return Jbterm_Type'First; -- never actually gets here; for compiler only
    end Convert_Jbterm_Type;



    function Pretty_Print( i : Jbterm1_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when permanent_job => return "Permanent job";
             when not_permanent_job => return "Not permanent job";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jbterm1_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jbterm1_Type( i : String ) return Jbterm1_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return permanent_job;
         elsif i = "2" then
            return not_permanent_job;
        end if;
        Put_Line("Convert_Jbterm1_Type: Unmatched string |" & i & "|" );
        return Jbterm1_Type'First; -- never actually gets here; for compiler only
    end Convert_Jbterm1_Type;



    function Pretty_Print( i : Jbterm2_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when seasonal_work => return "Seasonal work";
             when fixed_term_contract => return "Fixed term contract";
             when agency_temping => return "Agency temping";
             when casual => return "Casual";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jbterm2_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jbterm2_Type( i : String ) return Jbterm2_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return seasonal_work;
         elsif i = "2" then
            return fixed_term_contract;
         elsif i = "3" then
            return agency_temping;
         elsif i = "4" then
            return casual;
         elsif i = "5" then
            return other;
        end if;
        Put_Line("Convert_Jbterm2_Type: Unmatched string |" & i & "|" );
        return Jbterm2_Type'First; -- never actually gets here; for compiler only
    end Convert_Jbterm2_Type;



    function Pretty_Print( i : Jbtime_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when mornings_only => return "Mornings only";
             when other => return "Other";
             when daytime_and_evenings => return "Daytime and evenings";
             when afternoons_only => return "Afternoons only";
             when during_the_day => return "During the day";
             when evenings_only => return "Evenings only";
             when at_night => return "At night";
             when both_lunch_or_eves => return "Both lunch/eves";
             when other_times_or_day => return "Other times/day";
             when rotating_shifts => return "Rotating shifts";
             when varies_or_no_pattern => return "Varies/no pattern";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jbtime_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jbtime_Type( i : String ) return Jbtime_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return mornings_only;
         elsif i = "10" then
            return other;
         elsif i = "11" then
            return daytime_and_evenings;
         elsif i = "2" then
            return afternoons_only;
         elsif i = "3" then
            return during_the_day;
         elsif i = "4" then
            return evenings_only;
         elsif i = "5" then
            return at_night;
         elsif i = "6" then
            return both_lunch_or_eves;
         elsif i = "7" then
            return other_times_or_day;
         elsif i = "8" then
            return rotating_shifts;
         elsif i = "9" then
            return varies_or_no_pattern;
        end if;
        Put_Line("Convert_Jbtime_Type: Unmatched string |" & i & "|" );
        return Jbtime_Type'First; -- never actually gets here; for compiler only
    end Convert_Jbtime_Type;



    function Pretty_Print( i : Jbttwm_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when brit_rail_or_train => return "Brit Rail/train";
             when underground_or_tube => return "Underground/tube";
             when bus_or_coach => return "Bus or coach";
             when moto_cycle_or_moped => return "Moto cycle/moped";
             when car_or_van => return "Car or van";
             when car_or_van_passenger => return "Car/van passenger";
             when pedal_cycle => return "Pedal cycle";
             when walks_all_way => return "Walks all way";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jbttwm_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jbttwm_Type( i : String ) return Jbttwm_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return brit_rail_or_train;
         elsif i = "2" then
            return underground_or_tube;
         elsif i = "3" then
            return bus_or_coach;
         elsif i = "4" then
            return moto_cycle_or_moped;
         elsif i = "5" then
            return car_or_van;
         elsif i = "6" then
            return car_or_van_passenger;
         elsif i = "7" then
            return pedal_cycle;
         elsif i = "8" then
            return walks_all_way;
         elsif i = "9" then
            return other;
        end if;
        Put_Line("Convert_Jbttwm_Type: Unmatched string |" & i & "|" );
        return Jbttwm_Type'First; -- never actually gets here; for compiler only
    end Convert_Jbttwm_Type;



    function Pretty_Print( i : Jbttwt_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when period_uncodeable => return "Period uncodeable";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when s_997_or_more => return "997 or more";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jbttwt_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when period_uncodeable => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jbttwt_Type( i : String ) return Jbttwt_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-3" then
            return period_uncodeable;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "997" then
            return s_997_or_more;
        end if;
        Put_Line("Convert_Jbttwt_Type: Unmatched string |" & i & "|" );
        return Jbttwt_Type'First; -- never actually gets here; for compiler only
    end Convert_Jbttwt_Type;



    function Pretty_Print( i : Jbuby_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when claim_unemploym => return "Claim unemploym";
             when claim_income_supp => return "Claim income supp";
             when obtain_ni_contrib => return "Obtain NI contrib";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jbuby_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jbuby_Type( i : String ) return Jbuby_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return claim_unemploym;
         elsif i = "2" then
            return claim_income_supp;
         elsif i = "3" then
            return obtain_ni_contrib;
        end if;
        Put_Line("Convert_Jbuby_Type: Unmatched string |" & i & "|" );
        return Jbuby_Type'First; -- never actually gets here; for compiler only
    end Convert_Jbuby_Type;



    function Pretty_Print( i : Jbwkhrh_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when not_mentioned => return "Not mentioned";
             when yes => return "Yes";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jbwkhrh_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jbwkhrh_Type( i : String ) return Jbwkhrh_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return yes;
         elsif i = "8" then
            return yes;
        end if;
        Put_Line("Convert_Jbwkhrh_Type: Unmatched string |" & i & "|" );
        return Jbwkhrh_Type'First; -- never actually gets here; for compiler only
    end Convert_Jbwkhrh_Type;



    function Pretty_Print( i : Jbwkpat_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing => return "Missing";
             when same_hours_each_day => return "Same hours each day";
             when rotating_shifts => return "Rotating shifts";
             when no_fixed_pattern => return "No fixed pattern";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jbwkpat_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jbwkpat_Type( i : String ) return Jbwkpat_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return same_hours_each_day;
         elsif i = "2" then
            return rotating_shifts;
         elsif i = "3" then
            return no_fixed_pattern;
        end if;
        Put_Line("Convert_Jbwkpat_Type: Unmatched string |" & i & "|" );
        return Jbwkpat_Type'First; -- never actually gets here; for compiler only
    end Convert_Jbwkpat_Type;



    function Pretty_Print( i : Jcegold_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not Applicable";
             when missing_or_wild => return "Missing or wild";
             when service_class_higher => return "Service class,higher";
             when semi_unskilled_manua => return "Semi,unskilled manua";
             when agricultural_workers => return "Agricultural workers";
             when service_class_lower => return "Service class,lower";
             when routine_non_manual_e => return "Routine non-manual e";
             when personal_service_wor => return "Personal service wor";
             when sml_props_w_employee => return "Sml props w employee";
             when sml_props_w_or_o_employ => return "Sml props w/o employ";
             when farmers_smallholders => return "Farmers,Smallholders";
             when foreman_technicians => return "Foreman,Technicians";
             when skilled_manual_worke => return "Skilled manual worke";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jcegold_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jcegold_Type( i : String ) return Jcegold_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return service_class_higher;
         elsif i = "10" then
            return semi_unskilled_manua;
         elsif i = "11" then
            return agricultural_workers;
         elsif i = "2" then
            return service_class_lower;
         elsif i = "3" then
            return routine_non_manual_e;
         elsif i = "4" then
            return personal_service_wor;
         elsif i = "5" then
            return sml_props_w_employee;
         elsif i = "6" then
            return sml_props_w_or_o_employ;
         elsif i = "7" then
            return farmers_smallholders;
         elsif i = "8" then
            return foreman_technicians;
         elsif i = "9" then
            return skilled_manual_worke;
        end if;
        Put_Line("Convert_Jcegold_Type: Unmatched string |" & i & "|" );
        return Jcegold_Type'First; -- never actually gets here; for compiler only
    end Convert_Jcegold_Type;



    function Pretty_Print( i : Jcergsc_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not Applicable";
             when missing_or_wild => return "Missing or wild";
             when professional_occ => return "Professional occ";
             when managerial_and_technic => return "Managerial & technic";
             when skilled_non_manual => return "Skilled non-manual";
             when skilled_manual => return "Skilled manual";
             when partly_skilled_occ => return "Partly skilled occ";
             when unskilled_occ => return "Unskilled occ";
             when armed_forces => return "Armed forces";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jcergsc_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jcergsc_Type( i : String ) return Jcergsc_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return professional_occ;
         elsif i = "2" then
            return managerial_and_technic;
         elsif i = "3" then
            return skilled_non_manual;
         elsif i = "4" then
            return skilled_manual;
         elsif i = "5" then
            return partly_skilled_occ;
         elsif i = "6" then
            return unskilled_occ;
         elsif i = "7" then
            return armed_forces;
        end if;
        Put_Line("Convert_Jcergsc_Type: Unmatched string |" & i & "|" );
        return Jcergsc_Type'First; -- never actually gets here; for compiler only
    end Convert_Jcergsc_Type;



    function Pretty_Print( i : Jcesec_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing => return "Missing";
             when employers_large_org => return "Employers large org";
             when lwr_supervis_occups => return "Lwr supervis occups";
             when lwr_technical_craft => return "Lwr technical craft";
             when lwr_tech_process_op => return "Lwr tech process op";
             when semi_routine_sales => return "Semi-routine sales";
             when semi_routine_service => return "Semi-routine service";
             when semi_routine_tech => return "Semi-routine tech";
             when semi_routine_op => return "Semi-routine op";
             when semi_routine_agric => return "Semi-routine agric";
             when semi_routine_cleri => return "Semi-routine cleri";
             when semi_rtne_childcare => return "Semi-rtne childcare";
             when routine_sales_and_serv => return "Routine sales&serv";
             when routine_production => return "Routine production";
             when routine_technical => return "Routine technical";
             when routine_operative => return "Routine operative";
             when routine_agricultrl => return "Routine agricultrl";
             when higher_managerial => return "Higher managerial";
             when higher_prof_tradnl => return "Higher prof tradn'l";
             when higher_prof_new_emp => return "Higher prof new emp";
             when high_prof_trad_semp => return "High prof trad s.emp";
             when high_prof_new_semp => return "High prof new s.emp";
             when lower_prof_trad_emps => return "Lower Prof trad emps";
             when lower_prof_new_emps => return "Lower Prof new emps";
             when lwr_prof_trad_semp => return "Lwr Prof trad s.emp";
             when lower_prof_new_semp => return "Lower Prof new s.emp";
             when lower_manag_occupns => return "Lower manag occupns";
             when hgher_supervis_occup => return "Hgher supervis occup";
             when intrmd_cleri_and_admin => return "Intrmd cleri & admin";
             when intermd_sales_and_serv => return "Intermd sales & serv";
             when intermed_techn_and_aux => return "Intermed techn & aux";
             when intermed_engineering => return "Intermed engineering";
             when emp_small_non_prof => return "Emp,small (non-prof)";
             when emp_small_agricult => return "Emp,small (agricult)";
             when own_acct_wkrsnpro => return "Own acct wkrs(n.pro)";
             when own_acct_wkrsagric => return "Own acct wkrs(agric)";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jcesec_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jcesec_Type( i : String ) return Jcesec_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing;
         elsif i = "10" then
            return employers_large_org;
         elsif i = "100" then
            return lwr_supervis_occups;
         elsif i = "111" then
            return lwr_technical_craft;
         elsif i = "112" then
            return lwr_tech_process_op;
         elsif i = "121" then
            return semi_routine_sales;
         elsif i = "122" then
            return semi_routine_service;
         elsif i = "123" then
            return semi_routine_tech;
         elsif i = "124" then
            return semi_routine_op;
         elsif i = "125" then
            return semi_routine_agric;
         elsif i = "126" then
            return semi_routine_cleri;
         elsif i = "127" then
            return semi_rtne_childcare;
         elsif i = "131" then
            return routine_sales_and_serv;
         elsif i = "132" then
            return routine_production;
         elsif i = "133" then
            return routine_technical;
         elsif i = "134" then
            return routine_operative;
         elsif i = "135" then
            return routine_agricultrl;
         elsif i = "20" then
            return higher_managerial;
         elsif i = "31" then
            return higher_prof_tradnl;
         elsif i = "32" then
            return higher_prof_new_emp;
         elsif i = "33" then
            return high_prof_trad_semp;
         elsif i = "34" then
            return high_prof_new_semp;
         elsif i = "41" then
            return lower_prof_trad_emps;
         elsif i = "42" then
            return lower_prof_new_emps;
         elsif i = "43" then
            return lwr_prof_trad_semp;
         elsif i = "44" then
            return lower_prof_new_semp;
         elsif i = "50" then
            return lower_manag_occupns;
         elsif i = "60" then
            return hgher_supervis_occup;
         elsif i = "71" then
            return intrmd_cleri_and_admin;
         elsif i = "72" then
            return intermd_sales_and_serv;
         elsif i = "73" then
            return intermed_techn_and_aux;
         elsif i = "74" then
            return intermed_engineering;
         elsif i = "81" then
            return emp_small_non_prof;
         elsif i = "82" then
            return emp_small_agricult;
         elsif i = "91" then
            return own_acct_wkrsnpro;
         elsif i = "92" then
            return own_acct_wkrsagric;
        end if;
        Put_Line("Convert_Jcesec_Type: Unmatched string |" & i & "|" );
        return Jcesec_Type'First; -- never actually gets here; for compiler only
    end Convert_Jcesec_Type;



    function Pretty_Print( i : Jceseg_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not Applicable";
             when missing_or_wild => return "Missing or wild";
             when personal_service_wrk => return "Personal service wrk";
             when foreman_manual => return "Foreman manual";
             when skilled_manual_wkrs => return "Skilled manual wkrs";
             when semi_skilled_manual => return "Semi-skilled manual";
             when unskilled_manual_wkr => return "Unskilled manual wkr";
             when own_account_wkrs => return "Own account wkrs";
             when farmers_employers => return "Farmers - employers";
             when farmers_own_accoun => return "Farmers - own accoun";
             when agricultural_workers => return "Agricultural workers";
             when members_of_armed_for => return "Members of armed for";
             when managers_large => return "Managers,large";
             when employers_small => return "Employers,small";
             when managers_small => return "Managers,small";
             when professional_self_em => return "Professional Self-em";
             when professional_employe => return "Professional employe";
             when int_non_manual_work => return "Int. non-manual,work";
             when int_non_man_foreman => return "Int. non-man,foreman";
             when junior_non_manual => return "Junior non-manual";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jceseg_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jceseg_Type( i : String ) return Jceseg_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "10" then
            return personal_service_wrk;
         elsif i = "11" then
            return foreman_manual;
         elsif i = "12" then
            return skilled_manual_wkrs;
         elsif i = "13" then
            return semi_skilled_manual;
         elsif i = "14" then
            return unskilled_manual_wkr;
         elsif i = "15" then
            return own_account_wkrs;
         elsif i = "16" then
            return farmers_employers;
         elsif i = "17" then
            return farmers_own_accoun;
         elsif i = "18" then
            return agricultural_workers;
         elsif i = "19" then
            return members_of_armed_for;
         elsif i = "2" then
            return managers_large;
         elsif i = "3" then
            return employers_small;
         elsif i = "4" then
            return managers_small;
         elsif i = "5" then
            return professional_self_em;
         elsif i = "6" then
            return professional_employe;
         elsif i = "7" then
            return int_non_manual_work;
         elsif i = "8" then
            return int_non_man_foreman;
         elsif i = "9" then
            return junior_non_manual;
        end if;
        Put_Line("Convert_Jceseg_Type: Unmatched string |" & i & "|" );
        return Jceseg_Type'First; -- never actually gets here; for compiler only
    end Convert_Jceseg_Type;



    function Pretty_Print( i : Jcesemp_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when self_employed => return "Self-employed";
             when ft_employee => return "FT employee";
             when pt_employee => return "PT employee";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jcesemp_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jcesemp_Type( i : String ) return Jcesemp_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return self_employed;
         elsif i = "2" then
            return ft_employee;
         elsif i = "3" then
            return pt_employee;
        end if;
        Put_Line("Convert_Jcesemp_Type: Unmatched string |" & i & "|" );
        return Jcesemp_Type'First; -- never actually gets here; for compiler only
    end Convert_Jcesemp_Type;



    function Pretty_Print( i : Jha9ly_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when sept_1990_or_before => return "Sept 1990 or Before";
             when after_sept_1990 => return "After Sept 1990";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jha9ly_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jha9ly_Type( i : String ) return Jha9ly_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return sept_1990_or_before;
         elsif i = "2" then
            return after_sept_1990;
        end if;
        Put_Line("Convert_Jha9ly_Type: Unmatched string |" & i & "|" );
        return Jha9ly_Type'First; -- never actually gets here; for compiler only
    end Convert_Jha9ly_Type;



    function Pretty_Print( i : Jhbgy4_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when s_1990 => return "1990";
             when s_1991 => return "1991";
             when s_1992 => return "1992";
             when s_1993 => return "1993";
             when s_1994 => return "1994";
             when s_1995 => return "1995";
             when s_1996 => return "1996";
             when s_1997 => return "1997";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jhbgy4_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jhbgy4_Type( i : String ) return Jhbgy4_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "90" then
            return s_1990;
         elsif i = "91" then
            return s_1991;
         elsif i = "92" then
            return s_1992;
         elsif i = "93" then
            return s_1993;
         elsif i = "94" then
            return s_1994;
         elsif i = "95" then
            return s_1995;
         elsif i = "96" then
            return s_1996;
         elsif i = "97" then
            return s_1997;
        end if;
        Put_Line("Convert_Jhbgy4_Type: Unmatched string |" & i & "|" );
        return Jhbgy4_Type'First; -- never actually gets here; for compiler only
    end Convert_Jhbgy4_Type;



    function Pretty_Print( i : Jhcjs_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_ended => return "Not ended";
             when no => return "No";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jhcjs_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jhcjs_Type( i : String ) return Jhcjs_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return not_ended;
         elsif i = "2" then
            return no;
        end if;
        Put_Line("Convert_Jhcjs_Type: Unmatched string |" & i & "|" );
        return Jhcjs_Type'First; -- never actually gets here; for compiler only
    end Convert_Jhcjs_Type;



    function Pretty_Print( i : Jhck1_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when prev_employment => return "Prev employment";
             when prev_non_employment => return "Prev non-employment";
             when current_status => return "Current status";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jhck1_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jhck1_Type( i : String ) return Jhck1_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return prev_employment;
         elsif i = "2" then
            return prev_non_employment;
         elsif i = "3" then
            return current_status;
        end if;
        Put_Line("Convert_Jhck1_Type: Unmatched string |" & i & "|" );
        return Jhck1_Type'First; -- never actually gets here; for compiler only
    end Convert_Jhck1_Type;



    function Pretty_Print( i : Jhck2_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when j28_required => return "J28 required";
             when end_job_history => return "End job history";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jhck2_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jhck2_Type( i : String ) return Jhck2_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return j28_required;
         elsif i = "2" then
            return end_job_history;
        end if;
        Put_Line("Convert_Jhck2_Type: Unmatched string |" & i & "|" );
        return Jhck2_Type'First; -- never actually gets here; for compiler only
    end Convert_Jhck2_Type;



    function Pretty_Print( i : Jhendy_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when s_1990 => return "1990";
             when s_1991 => return "1991";
             when s_1992 => return "1992";
             when s_1993 => return "1993";
             when s_1994 => return "1994";
             when s_1995 => return "1995";
             when s_1996 => return "1996";
             when s_1997 => return "1997";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jhendy_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jhendy_Type( i : String ) return Jhendy_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "90" then
            return s_1990;
         elsif i = "91" then
            return s_1991;
         elsif i = "92" then
            return s_1992;
         elsif i = "93" then
            return s_1993;
         elsif i = "94" then
            return s_1994;
         elsif i = "95" then
            return s_1995;
         elsif i = "96" then
            return s_1996;
         elsif i = "97" then
            return s_1997;
        end if;
        Put_Line("Convert_Jhendy_Type: Unmatched string |" & i & "|" );
        return Jhendy_Type'First; -- never actually gets here; for compiler only
    end Convert_Jhendy_Type;



    function Pretty_Print( i : Jhepflg_Type ) return String is
    begin
         case i is
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when end_after_1996 => return "End after 1.9.96";
             when end_on_or_bef_1996 => return "End on/bef 1.9.96";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jhepflg_Type ) return Boolean is
    begin
         case i is
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jhepflg_Type( i : String ) return Jhepflg_Type is
    begin
         if i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return end_after_1996;
         elsif i = "2" then
            return end_on_or_bef_1996;
        end if;
        Put_Line("Convert_Jhepflg_Type: Unmatched string |" & i & "|" );
        return Jhepflg_Type'First; -- never actually gets here; for compiler only
    end Convert_Jhepflg_Type;



    function Pretty_Print( i : Jhgold_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when service_class_higher_grade => return "Service class,higher grade";
             when semi_unskilled_manual_workers => return "Semi,unskilled manual workers";
             when agricultural_workers => return "Agricultural workers";
             when inadequately_described_non_stated => return "Inadequately described,non stated";
             when service_class_lower_grade => return "Service class,lower grade";
             when routine_non_manual_employees => return "Routine non-manual employees";
             when personal_service_workers => return "Personal service workers";
             when sml_props_w_employees => return "Sml props w employees";
             when sml_props_w_or_o_employees => return "Sml props w/o employees";
             when farmers_smallholders => return "Farmers,Smallholders";
             when foreman_technicians => return "Foreman,Technicians";
             when skilled_manual_workers => return "Skilled manual workers";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jhgold_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jhgold_Type( i : String ) return Jhgold_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return service_class_higher_grade;
         elsif i = "10" then
            return semi_unskilled_manual_workers;
         elsif i = "11" then
            return agricultural_workers;
         elsif i = "12" then
            return inadequately_described_non_stated;
         elsif i = "2" then
            return service_class_lower_grade;
         elsif i = "3" then
            return routine_non_manual_employees;
         elsif i = "4" then
            return personal_service_workers;
         elsif i = "5" then
            return sml_props_w_employees;
         elsif i = "6" then
            return sml_props_w_or_o_employees;
         elsif i = "7" then
            return farmers_smallholders;
         elsif i = "8" then
            return foreman_technicians;
         elsif i = "9" then
            return skilled_manual_workers;
        end if;
        Put_Line("Convert_Jhgold_Type: Unmatched string |" & i & "|" );
        return Jhgold_Type'First; -- never actually gets here; for compiler only
    end Convert_Jhgold_Type;



    function Pretty_Print( i : Jhgpayi_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when var_inapplicable => return "Var Inapplicable";
             when not_imputed => return "Not Imputed";
             when imputed => return "Imputed";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jhgpayi_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when var_inapplicable => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jhgpayi_Type( i : String ) return Jhgpayi_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return var_inapplicable;
         elsif i = "0" then
            return not_imputed;
         elsif i = "1" then
            return imputed;
        end if;
        Put_Line("Convert_Jhgpayi_Type: Unmatched string |" & i & "|" );
        return Jhgpayi_Type'First; -- never actually gets here; for compiler only
    end Convert_Jhgpayi_Type;



    function Pretty_Print( i : Jhlwai_Type ) return String is
    begin
         case i is
             when missing_or_wild => return "Missing or wild";
             when derived_from_last_wave => return "Derived from last wave";
             when no_response_last_wave => return "No response last wave";
             when new_spell => return "New spell";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jhlwai_Type ) return Boolean is
    begin
         case i is
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jhlwai_Type( i : String ) return Jhlwai_Type is
    begin
         if i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return derived_from_last_wave;
         elsif i = "2" then
            return no_response_last_wave;
         elsif i = "3" then
            return new_spell;
        end if;
        Put_Line("Convert_Jhlwai_Type: Unmatched string |" & i & "|" );
        return Jhlwai_Type'First; -- never actually gets here; for compiler only
    end Convert_Jhlwai_Type;



    function Pretty_Print( i : Jhmngr_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when manager => return "Manager";
             when foreman_or_superv => return "Foreman/superv";
             when not_mngr_or_superv => return "Not mngr/superv";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jhmngr_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jhmngr_Type( i : String ) return Jhmngr_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return manager;
         elsif i = "2" then
            return foreman_or_superv;
         elsif i = "3" then
            return not_mngr_or_superv;
        end if;
        Put_Line("Convert_Jhmngr_Type: Unmatched string |" & i & "|" );
        return Jhmngr_Type'First; -- never actually gets here; for compiler only
    end Convert_Jhmngr_Type;



    function Pretty_Print( i : Jhpayl_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when s_9997_or_above => return "9997 or above";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jhpayl_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jhpayl_Type( i : String ) return Jhpayl_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "9997" then
            return s_9997_or_above;
        end if;
        Put_Line("Convert_Jhpayl_Type: Unmatched string |" & i & "|" );
        return Jhpayl_Type'First; -- never actually gets here; for compiler only
    end Convert_Jhpayl_Type;



    function Pretty_Print( i : Jhpays_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when s_99997_or_above => return "99997 or above";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jhpays_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jhpays_Type( i : String ) return Jhpays_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "99997" then
            return s_99997_or_above;
        end if;
        Put_Line("Convert_Jhpays_Type: Unmatched string |" & i & "|" );
        return Jhpays_Type'First; -- never actually gets here; for compiler only
    end Convert_Jhpays_Type;



    function Pretty_Print( i : Jhpldf_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when same_workplace => return "Same workplace";
             when diff_workplace => return "Diff workplace";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jhpldf_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jhpldf_Type( i : String ) return Jhpldf_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return same_workplace;
         elsif i = "2" then
            return diff_workplace;
        end if;
        Put_Line("Convert_Jhpldf_Type: Unmatched string |" & i & "|" );
        return Jhpldf_Type'First; -- never actually gets here; for compiler only
    end Convert_Jhpldf_Type;



    function Pretty_Print( i : Jhpylg_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when before_deductions => return "Before deductions";
             when after_deductions => return "After deductions";
             when no_deductions => return "No deductions";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jhpylg_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jhpylg_Type( i : String ) return Jhpylg_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return before_deductions;
         elsif i = "2" then
            return after_deductions;
         elsif i = "3" then
            return no_deductions;
        end if;
        Put_Line("Convert_Jhpylg_Type: Unmatched string |" & i & "|" );
        return Jhpylg_Type'First; -- never actually gets here; for compiler only
    end Convert_Jhpylg_Type;



    function Pretty_Print( i : Jhpylw_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when period_uncodeable => return "Period uncodeable";
             when per_hour => return "Per hour";
             when one_off_payment => return "One-off payment";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jhpylw_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when period_uncodeable => return True;
             when per_hour => return True;
             when one_off_payment => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jhpylw_Type( i : String ) return Jhpylw_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-3" then
            return period_uncodeable;
         elsif i = "-4" then
            return per_hour;
         elsif i = "-5" then
            return one_off_payment;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
        end if;
        Put_Line("Convert_Jhpylw_Type: Unmatched string |" & i & "|" );
        return Jhpylw_Type'First; -- never actually gets here; for compiler only
    end Convert_Jhpylw_Type;



    function Pretty_Print( i : Jhpysg_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when before_deductions => return "Before deductions";
             when after_deductions => return "After deductions";
             when no_deductions => return "No deductions";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jhpysg_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jhpysg_Type( i : String ) return Jhpysg_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return before_deductions;
         elsif i = "2" then
            return after_deductions;
         elsif i = "3" then
            return no_deductions;
        end if;
        Put_Line("Convert_Jhpysg_Type: Unmatched string |" & i & "|" );
        return Jhpysg_Type'First; -- never actually gets here; for compiler only
    end Convert_Jhpysg_Type;



    function Pretty_Print( i : Jhpysw_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when period_uncodeable => return "Period uncodeable";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jhpysw_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when period_uncodeable => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jhpysw_Type( i : String ) return Jhpysw_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-3" then
            return period_uncodeable;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
        end if;
        Put_Line("Convert_Jhpysw_Type: Unmatched string |" & i & "|" );
        return Jhpysw_Type'First; -- never actually gets here; for compiler only
    end Convert_Jhpysw_Type;



    function Pretty_Print( i : Jhrgsc_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when professional_occ => return "Professional occ";
             when managerial_and_technical_occ => return "Managerial & technical occ";
             when skilled_non_manual => return "Skilled non-manual";
             when skilled_manual => return "Skilled manual";
             when partly_skilled_occ => return "Partly skilled occ";
             when unskilled_occ => return "Unskilled occ";
             when armed_forces => return "Armed forces";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jhrgsc_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jhrgsc_Type( i : String ) return Jhrgsc_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return professional_occ;
         elsif i = "2" then
            return managerial_and_technical_occ;
         elsif i = "3" then
            return skilled_non_manual;
         elsif i = "4" then
            return skilled_manual;
         elsif i = "5" then
            return partly_skilled_occ;
         elsif i = "6" then
            return unskilled_occ;
         elsif i = "7" then
            return armed_forces;
        end if;
        Put_Line("Convert_Jhrgsc_Type: Unmatched string |" & i & "|" );
        return Jhrgsc_Type'First; -- never actually gets here; for compiler only
    end Convert_Jhrgsc_Type;



    function Pretty_Print( i : Jhsec_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing => return "Missing";
             when employers_large_org => return "Employers large org";
             when lwr_supervis_occups => return "Lwr supervis occups";
             when lwr_technical_craft => return "Lwr technical craft";
             when lwr_tech_process_op => return "Lwr tech process op";
             when semi_routine_sales => return "Semi-routine sales";
             when semi_routine_service => return "Semi-routine service";
             when semi_routine_tech => return "Semi-routine tech";
             when semi_routine_op => return "Semi-routine op";
             when semi_routine_agric => return "Semi-routine agric";
             when semi_routine_cleri => return "Semi-routine cleri";
             when semi_rtne_childcare => return "Semi-rtne childcare";
             when routine_sales_and_serv => return "Routine sales&serv";
             when routine_production => return "Routine production";
             when routine_technical => return "Routine technical";
             when routine_operative => return "Routine operative";
             when routine_agricultrl => return "Routine agricultrl";
             when higher_managerial => return "Higher managerial";
             when higher_prof_tradnl => return "Higher prof tradn'l";
             when higher_prof_new_emp => return "Higher prof new emp";
             when high_prof_trad_semp => return "High prof trad s.emp";
             when high_prof_new_semp => return "High prof new s.emp";
             when lower_prof_trad_emps => return "Lower Prof trad emps";
             when lower_prof_new_emps => return "Lower Prof new emps";
             when lwr_prof_trad_semp => return "Lwr Prof trad s.emp";
             when lower_prof_new_semp => return "Lower Prof new s.emp";
             when lower_manag_occupns => return "Lower manag occupns";
             when hgher_supervis_occup => return "Hgher supervis occup";
             when intrmd_cleri_and_admin => return "Intrmd cleri & admin";
             when intermd_sales_and_serv => return "Intermd sales & serv";
             when intermed_techn_and_aux => return "Intermed techn & aux";
             when intermed_engineering => return "Intermed engineering";
             when emp_small_non_prof => return "Emp,small (non-prof)";
             when emp_small_agricult => return "Emp,small (agricult)";
             when own_acct_wkrsnpro => return "Own acct wkrs(n.pro)";
             when own_acct_wkrsagric => return "Own acct wkrs(agric)";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jhsec_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jhsec_Type( i : String ) return Jhsec_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing;
         elsif i = "10" then
            return employers_large_org;
         elsif i = "100" then
            return lwr_supervis_occups;
         elsif i = "111" then
            return lwr_technical_craft;
         elsif i = "112" then
            return lwr_tech_process_op;
         elsif i = "121" then
            return semi_routine_sales;
         elsif i = "122" then
            return semi_routine_service;
         elsif i = "123" then
            return semi_routine_tech;
         elsif i = "124" then
            return semi_routine_op;
         elsif i = "125" then
            return semi_routine_agric;
         elsif i = "126" then
            return semi_routine_cleri;
         elsif i = "127" then
            return semi_rtne_childcare;
         elsif i = "131" then
            return routine_sales_and_serv;
         elsif i = "132" then
            return routine_production;
         elsif i = "133" then
            return routine_technical;
         elsif i = "134" then
            return routine_operative;
         elsif i = "135" then
            return routine_agricultrl;
         elsif i = "20" then
            return higher_managerial;
         elsif i = "31" then
            return higher_prof_tradnl;
         elsif i = "32" then
            return higher_prof_new_emp;
         elsif i = "33" then
            return high_prof_trad_semp;
         elsif i = "34" then
            return high_prof_new_semp;
         elsif i = "41" then
            return lower_prof_trad_emps;
         elsif i = "42" then
            return lower_prof_new_emps;
         elsif i = "43" then
            return lwr_prof_trad_semp;
         elsif i = "44" then
            return lower_prof_new_semp;
         elsif i = "50" then
            return lower_manag_occupns;
         elsif i = "60" then
            return hgher_supervis_occup;
         elsif i = "71" then
            return intrmd_cleri_and_admin;
         elsif i = "72" then
            return intermd_sales_and_serv;
         elsif i = "73" then
            return intermed_techn_and_aux;
         elsif i = "74" then
            return intermed_engineering;
         elsif i = "81" then
            return emp_small_non_prof;
         elsif i = "82" then
            return emp_small_agricult;
         elsif i = "91" then
            return own_acct_wkrsnpro;
         elsif i = "92" then
            return own_acct_wkrsagric;
        end if;
        Put_Line("Convert_Jhsec_Type: Unmatched string |" & i & "|" );
        return Jhsec_Type'First; -- never actually gets here; for compiler only
    end Convert_Jhsec_Type;



    function Pretty_Print( i : Jhsect_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when priv_firm_or_compy => return "Priv firm/compy";
             when civ_serv_or_cnt_gvt => return "Civ Serv/Cnt Gvt";
             when loc_gvt_or_twn_hall => return "Loc Gvt/twn hall";
             when nhs_or_higher_educ => return "NHS/higher educ";
             when natlised_indtry => return "Natlised indtry";
             when non_profit_orgs => return "Non-profit orgs.";
             when armed_forces => return "Armed forces";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jhsect_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jhsect_Type( i : String ) return Jhsect_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return priv_firm_or_compy;
         elsif i = "2" then
            return civ_serv_or_cnt_gvt;
         elsif i = "3" then
            return loc_gvt_or_twn_hall;
         elsif i = "4" then
            return nhs_or_higher_educ;
         elsif i = "5" then
            return natlised_indtry;
         elsif i = "6" then
            return non_profit_orgs;
         elsif i = "7" then
            return armed_forces;
         elsif i = "8" then
            return other;
        end if;
        Put_Line("Convert_Jhsect_Type: Unmatched string |" & i & "|" );
        return Jhsect_Type'First; -- never actually gets here; for compiler only
    end Convert_Jhsect_Type;



    function Pretty_Print( i : Jhseg_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when employers_large => return "Employers,large";
             when personal_service_wrkrs => return "Personal service wrkrs";
             when foreman_manual => return "Foreman manual";
             when skilled_manual_wkrs => return "Skilled manual wkrs";
             when semi_skilled_manual_wkrs => return "Semi-skilled manual wkrs";
             when unskilled_manual_wkrs => return "Unskilled manual wkrs";
             when own_account_wkrs => return "Own account wkrs";
             when farmers_employers_managers => return "Farmers - employers,managers";
             when farmers_own_account => return "Farmers - own account";
             when agricultural_workers => return "Agricultural workers";
             when members_of_armed_forces => return "Members of armed forces";
             when managers_large => return "Managers,large";
             when inadequately_described_non_stated => return "Inadequately described,non stated";
             when employers_small => return "Employers,small";
             when managers_small => return "Managers,small";
             when professional_self_employed => return "Professional Self-employed";
             when professional_employees => return "Professional employees";
             when int_non_manual_workers => return "Int. non-manual,workers";
             when int_non_man_foreman => return "Int. non-man,foreman";
             when junior_non_manual => return "Junior non-manual";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jhseg_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jhseg_Type( i : String ) return Jhseg_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return employers_large;
         elsif i = "10" then
            return personal_service_wrkrs;
         elsif i = "11" then
            return foreman_manual;
         elsif i = "12" then
            return skilled_manual_wkrs;
         elsif i = "13" then
            return semi_skilled_manual_wkrs;
         elsif i = "14" then
            return unskilled_manual_wkrs;
         elsif i = "15" then
            return own_account_wkrs;
         elsif i = "16" then
            return farmers_employers_managers;
         elsif i = "17" then
            return farmers_own_account;
         elsif i = "18" then
            return agricultural_workers;
         elsif i = "19" then
            return members_of_armed_forces;
         elsif i = "2" then
            return managers_large;
         elsif i = "20" then
            return inadequately_described_non_stated;
         elsif i = "3" then
            return employers_small;
         elsif i = "4" then
            return managers_small;
         elsif i = "5" then
            return professional_self_employed;
         elsif i = "6" then
            return professional_employees;
         elsif i = "7" then
            return int_non_manual_workers;
         elsif i = "8" then
            return int_non_man_foreman;
         elsif i = "9" then
            return junior_non_manual;
        end if;
        Put_Line("Convert_Jhseg_Type: Unmatched string |" & i & "|" );
        return Jhseg_Type'First; -- never actually gets here; for compiler only
    end Convert_Jhseg_Type;



    function Pretty_Print( i : Jhsemp_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when employee => return "Employee";
             when self_employed => return "Self-employed";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jhsemp_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jhsemp_Type( i : String ) return Jhsemp_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return employee;
         elsif i = "2" then
            return self_employed;
         elsif i = "3" then
            return self_employed;
        end if;
        Put_Line("Convert_Jhsemp_Type: Unmatched string |" & i & "|" );
        return Jhsemp_Type'First; -- never actually gets here; for compiler only
    end Convert_Jhsemp_Type;



    function Pretty_Print( i : Jhsize_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when s_1_2 => return "1 - 2";
             when dk_or_under_25 => return "DK/under 25";
             when dk_or_25_plus => return "DK/25+";
             when s_3_9 => return "3 - 9";
             when s_10_24 => return "10 - 24";
             when s_25_49 => return "25 - 49";
             when s_50_99 => return "50 - 99";
             when s_100_199 => return "100 - 199";
             when s_200_499 => return "200 - 499";
             when s_500_999 => return "500 - 999";
             when s_1000_or_more => return "1000 or more";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jhsize_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jhsize_Type( i : String ) return Jhsize_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return s_1_2;
         elsif i = "10" then
            return dk_or_under_25;
         elsif i = "11" then
            return dk_or_25_plus;
         elsif i = "2" then
            return s_3_9;
         elsif i = "3" then
            return s_10_24;
         elsif i = "4" then
            return s_25_49;
         elsif i = "5" then
            return s_50_99;
         elsif i = "6" then
            return s_100_199;
         elsif i = "7" then
            return s_200_499;
         elsif i = "8" then
            return s_500_999;
         elsif i = "9" then
            return s_1000_or_more;
        end if;
        Put_Line("Convert_Jhsize_Type: Unmatched string |" & i & "|" );
        return Jhsize_Type'First; -- never actually gets here; for compiler only
    end Convert_Jhsize_Type;



    function Pretty_Print( i : Jhstat_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when diff_job_same_emplyer => return "Diff job same emplyer";
             when something_else => return "Something else";
             when empl_self_or_diff_emply => return "Empl self/diff emply";
             when unemp_or_job_seeking => return "Unemp/job seeking";
             when retd_from_pd_emplymt => return "Retd from pd emplymt";
             when looking_after_family => return "Looking after family";
             when f_t_education => return "F-t education";
             when lng_trm_sick_or_disabld => return "Lng trm sick/disabld";
             when on_maternity_leave => return "On maternity leave";
             when on_govt_trng_scheme => return "On govt trng scheme";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jhstat_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jhstat_Type( i : String ) return Jhstat_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return diff_job_same_emplyer;
         elsif i = "10" then
            return something_else;
         elsif i = "2" then
            return empl_self_or_diff_emply;
         elsif i = "3" then
            return unemp_or_job_seeking;
         elsif i = "4" then
            return retd_from_pd_emplymt;
         elsif i = "5" then
            return looking_after_family;
         elsif i = "6" then
            return f_t_education;
         elsif i = "7" then
            return lng_trm_sick_or_disabld;
         elsif i = "8" then
            return on_maternity_leave;
         elsif i = "9" then
            return on_govt_trng_scheme;
        end if;
        Put_Line("Convert_Jhstat_Type: Unmatched string |" & i & "|" );
        return Jhstat_Type'First; -- never actually gets here; for compiler only
    end Convert_Jhstat_Type;



    function Pretty_Print( i : Jhstpy_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when promoted => return "Promoted";
             when care_of_other_person => return "Care of other person";
             when other_reason => return "Other reason";
             when moved_away => return "Moved away";
             when start_college_or_uni => return "Start college or uni";
             when left_for_better_job => return "Left for better job";
             when made_redundant => return "Made redundant";
             when dismissed_or_sacked => return "Dismissed or sacked";
             when temporary_job_ended => return "Temporary job ended";
             when took_retirement => return "Took retirement";
             when stopped_health_reas => return "Stopped health reas";
             when left_to_have_baby => return "Left to have baby";
             when children_or_home_care => return "Children/home care";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jhstpy_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jhstpy_Type( i : String ) return Jhstpy_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return promoted;
         elsif i = "10" then
            return care_of_other_person;
         elsif i = "11" then
            return other_reason;
         elsif i = "12" then
            return moved_away;
         elsif i = "13" then
            return start_college_or_uni;
         elsif i = "2" then
            return left_for_better_job;
         elsif i = "3" then
            return made_redundant;
         elsif i = "4" then
            return dismissed_or_sacked;
         elsif i = "5" then
            return temporary_job_ended;
         elsif i = "6" then
            return took_retirement;
         elsif i = "7" then
            return stopped_health_reas;
         elsif i = "8" then
            return left_to_have_baby;
         elsif i = "9" then
            return children_or_home_care;
        end if;
        Put_Line("Convert_Jhstpy_Type: Unmatched string |" & i & "|" );
        return Jhstpy_Type'First; -- never actually gets here; for compiler only
    end Convert_Jhstpy_Type;



    function Pretty_Print( i : Jlcssf_Type ) return String is
    begin
         case i is
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jlcssf_Type ) return Boolean is
    begin
         case i is
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jlcssf_Type( i : String ) return Jlcssf_Type is
    begin
         if i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
        end if;
        Put_Line("Convert_Jlcssf_Type: Unmatched string |" & i & "|" );
        return Jlcssf_Type'First; -- never actually gets here; for compiler only
    end Convert_Jlcssf_Type;



    function Pretty_Print( i : Jlgold_Type ) return String is
    begin
         case i is
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when not_applicable => return "Not Applicable";
             when missing => return "Missing";
             when service_class_higher_grade => return "Service class,higher grade";
             when semi_unskilled_manual_workers => return "Semi,unskilled manual workers";
             when agricultural_workers => return "Agricultural workers";
             when inadequately_described_non_stated => return "Inadequately described,non stated";
             when service_class_lower_grade => return "Service class,lower grade";
             when routine_non_manual_employees => return "Routine non-manual employees";
             when personal_service_workers => return "Personal service workers";
             when sml_props_w_employees => return "Sml props w employees";
             when sml_props_w_or_o_employees => return "Sml props w/o employees";
             when farmers_smallholders => return "Farmers,Smallholders";
             when foreman_technicians => return "Foreman,Technicians";
             when skilled_manual_workers => return "Skilled manual workers";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jlgold_Type ) return Boolean is
    begin
         case i is
             when refused => return True;
             when proxy_respondent => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jlgold_Type( i : String ) return Jlgold_Type is
    begin
         if i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return service_class_higher_grade;
         elsif i = "10" then
            return semi_unskilled_manual_workers;
         elsif i = "11" then
            return agricultural_workers;
         elsif i = "12" then
            return inadequately_described_non_stated;
         elsif i = "2" then
            return service_class_lower_grade;
         elsif i = "3" then
            return routine_non_manual_employees;
         elsif i = "4" then
            return personal_service_workers;
         elsif i = "5" then
            return sml_props_w_employees;
         elsif i = "6" then
            return sml_props_w_or_o_employees;
         elsif i = "7" then
            return farmers_smallholders;
         elsif i = "8" then
            return foreman_technicians;
         elsif i = "9" then
            return skilled_manual_workers;
        end if;
        Put_Line("Convert_Jlgold_Type: Unmatched string |" & i & "|" );
        return Jlgold_Type'First; -- never actually gets here; for compiler only
    end Convert_Jlgold_Type;



    function Pretty_Print( i : Jlid_Type ) return String is
    begin
         case i is
             when never_had_a_job => return "Never had a job";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing => return "Missing";
             when current_job => return "Current job";
             when job_spell_1 => return "Job spell 1";
             when last_job_j93 => return "Last job - J93";
             when see_ajlid => return "See AJLID";
             when see_bjlid => return "See BJLID";
             when see_cjlid => return "See CJLID";
             when see_djlid => return "See DJLID";
             when see_ejlid => return "See EJLID";
             when see_fjlid => return "See FJLID";
             when see_gjlid => return "See GJLID";
             when job_spell_2 => return "Job spell 2";
             when see_hjlid => return "See HJLID";
             when see_ijlid => return "See IJLID";
             when see_jjlid => return "See JJLID";
             when see_kjlid => return "See KJLID";
             when see_ljlid => return "See LJLID";
             when see_mjlid => return "See MJLID";
             when see_njlid => return "See NJLID";
             when see_ojlid => return "See OJLID";
             when see_pjlid => return "See PJLID";
             when see_qjlid => return "See QJLID";
             when job_spell_3 => return "Job spell 3";
             when job_spell_4 => return "Job spell 4";
             when job_spell_5 => return "Job spell 5";
             when job_spell_6 => return "Job spell 6";
             when job_spell_7 => return "Job spell 7";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jlid_Type ) return Boolean is
    begin
         case i is
             when never_had_a_job => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jlid_Type( i : String ) return Jlid_Type is
    begin
         if i = "-3" then
            return never_had_a_job;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return current_job;
         elsif i = "1" then
            return job_spell_1;
         elsif i = "12" then
            return last_job_j93;
         elsif i = "13" then
            return see_ajlid;
         elsif i = "14" then
            return see_bjlid;
         elsif i = "15" then
            return see_cjlid;
         elsif i = "16" then
            return see_djlid;
         elsif i = "17" then
            return see_ejlid;
         elsif i = "18" then
            return see_fjlid;
         elsif i = "19" then
            return see_gjlid;
         elsif i = "2" then
            return job_spell_2;
         elsif i = "20" then
            return see_hjlid;
         elsif i = "21" then
            return see_ijlid;
         elsif i = "22" then
            return see_jjlid;
         elsif i = "23" then
            return see_kjlid;
         elsif i = "24" then
            return see_ljlid;
         elsif i = "25" then
            return see_mjlid;
         elsif i = "26" then
            return see_njlid;
         elsif i = "27" then
            return see_ojlid;
         elsif i = "28" then
            return see_pjlid;
         elsif i = "29" then
            return see_qjlid;
         elsif i = "3" then
            return job_spell_3;
         elsif i = "4" then
            return job_spell_4;
         elsif i = "5" then
            return job_spell_5;
         elsif i = "6" then
            return job_spell_6;
         elsif i = "7" then
            return job_spell_7;
        end if;
        Put_Line("Convert_Jlid_Type: Unmatched string |" & i & "|" );
        return Jlid_Type'First; -- never actually gets here; for compiler only
    end Convert_Jlid_Type;



    function Pretty_Print( i : Jlmngr_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when manager => return "Manager";
             when foreman_or_supervisor => return "Foreman/supervisor";
             when not_mngr_or_supervisor => return "Not mngr/supervisor";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jlmngr_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jlmngr_Type( i : String ) return Jlmngr_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return manager;
         elsif i = "2" then
            return foreman_or_supervisor;
         elsif i = "3" then
            return not_mngr_or_supervisor;
        end if;
        Put_Line("Convert_Jlmngr_Type: Unmatched string |" & i & "|" );
        return Jlmngr_Type'First; -- never actually gets here; for compiler only
    end Convert_Jlmngr_Type;



    function Pretty_Print( i : Jlrgsc_Type ) return String is
    begin
         case i is
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when professional_occ => return "Professional occ";
             when managerial_and_technical_occ => return "Managerial & technical occ";
             when skilled_non_manual => return "Skilled non-manual";
             when skilled_manual => return "Skilled manual";
             when partly_skilled_occ => return "Partly skilled occ";
             when unskilled_occ => return "Unskilled occ";
             when armed_forces => return "Armed forces";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jlrgsc_Type ) return Boolean is
    begin
         case i is
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jlrgsc_Type( i : String ) return Jlrgsc_Type is
    begin
         if i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return professional_occ;
         elsif i = "2" then
            return managerial_and_technical_occ;
         elsif i = "3" then
            return skilled_non_manual;
         elsif i = "4" then
            return skilled_manual;
         elsif i = "5" then
            return partly_skilled_occ;
         elsif i = "6" then
            return unskilled_occ;
         elsif i = "7" then
            return armed_forces;
        end if;
        Put_Line("Convert_Jlrgsc_Type: Unmatched string |" & i & "|" );
        return Jlrgsc_Type'First; -- never actually gets here; for compiler only
    end Convert_Jlrgsc_Type;



    function Pretty_Print( i : Jlsec_Type ) return String is
    begin
         case i is
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing => return "Missing";
             when employers_large_org => return "Employers large org";
             when lwr_supervis_occups => return "Lwr supervis occups";
             when lwr_technical_craft => return "Lwr technical craft";
             when lwr_tech_process_op => return "Lwr tech process op";
             when semi_routine_sales => return "Semi-routine sales";
             when semi_routine_service => return "Semi-routine service";
             when semi_routine_tech => return "Semi-routine tech";
             when semi_routine_op => return "Semi-routine op";
             when semi_routine_agric => return "Semi-routine agric";
             when semi_routine_cleri => return "Semi-routine cleri";
             when semi_rtne_childcare => return "Semi-rtne childcare";
             when routine_sales_and_serv => return "Routine sales&serv";
             when routine_production => return "Routine production";
             when routine_technical => return "Routine technical";
             when routine_operative => return "Routine operative";
             when routine_agricultrl => return "Routine agricultrl";
             when higher_managerial => return "Higher managerial";
             when higher_prof_tradnl => return "Higher prof tradn'l";
             when higher_prof_new_emp => return "Higher prof new emp";
             when high_prof_trad_semp => return "High prof trad s.emp";
             when high_prof_new_semp => return "High prof new s.emp";
             when lower_prof_trad_emps => return "Lower Prof trad emps";
             when lower_prof_new_emps => return "Lower Prof new emps";
             when lwr_prof_trad_semp => return "Lwr Prof trad s.emp";
             when lower_prof_new_semp => return "Lower Prof new s.emp";
             when lower_manag_occupns => return "Lower manag occupns";
             when hgher_supervis_occup => return "Hgher supervis occup";
             when intrmd_cleri_and_admin => return "Intrmd cleri & admin";
             when intermd_sales_and_serv => return "Intermd sales & serv";
             when intermed_techn_and_aux => return "Intermed techn & aux";
             when intermed_engineering => return "Intermed engineering";
             when emp_small_non_prof => return "Emp,small (non-prof)";
             when emp_small_agricult => return "Emp,small (agricult)";
             when own_acct_wkrsnpro => return "Own acct wkrs(n.pro)";
             when own_acct_wkrsagric => return "Own acct wkrs(agric)";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jlsec_Type ) return Boolean is
    begin
         case i is
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jlsec_Type( i : String ) return Jlsec_Type is
    begin
         if i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing;
         elsif i = "10" then
            return employers_large_org;
         elsif i = "100" then
            return lwr_supervis_occups;
         elsif i = "111" then
            return lwr_technical_craft;
         elsif i = "112" then
            return lwr_tech_process_op;
         elsif i = "121" then
            return semi_routine_sales;
         elsif i = "122" then
            return semi_routine_service;
         elsif i = "123" then
            return semi_routine_tech;
         elsif i = "124" then
            return semi_routine_op;
         elsif i = "125" then
            return semi_routine_agric;
         elsif i = "126" then
            return semi_routine_cleri;
         elsif i = "127" then
            return semi_rtne_childcare;
         elsif i = "131" then
            return routine_sales_and_serv;
         elsif i = "132" then
            return routine_production;
         elsif i = "133" then
            return routine_technical;
         elsif i = "134" then
            return routine_operative;
         elsif i = "135" then
            return routine_agricultrl;
         elsif i = "20" then
            return higher_managerial;
         elsif i = "31" then
            return higher_prof_tradnl;
         elsif i = "32" then
            return higher_prof_new_emp;
         elsif i = "33" then
            return high_prof_trad_semp;
         elsif i = "34" then
            return high_prof_new_semp;
         elsif i = "41" then
            return lower_prof_trad_emps;
         elsif i = "42" then
            return lower_prof_new_emps;
         elsif i = "43" then
            return lwr_prof_trad_semp;
         elsif i = "44" then
            return lower_prof_new_semp;
         elsif i = "50" then
            return lower_manag_occupns;
         elsif i = "60" then
            return hgher_supervis_occup;
         elsif i = "71" then
            return intrmd_cleri_and_admin;
         elsif i = "72" then
            return intermd_sales_and_serv;
         elsif i = "73" then
            return intermed_techn_and_aux;
         elsif i = "74" then
            return intermed_engineering;
         elsif i = "81" then
            return emp_small_non_prof;
         elsif i = "82" then
            return emp_small_agricult;
         elsif i = "91" then
            return own_acct_wkrsnpro;
         elsif i = "92" then
            return own_acct_wkrsagric;
        end if;
        Put_Line("Convert_Jlsec_Type: Unmatched string |" & i & "|" );
        return Jlsec_Type'First; -- never actually gets here; for compiler only
    end Convert_Jlsec_Type;



    function Pretty_Print( i : Jlseg_Type ) return String is
    begin
         case i is
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when not_applicable => return "Not Applicable";
             when missing => return "Missing";
             when employers_large => return "Employers,large";
             when personal_service_wrkrs => return "Personal service wrkrs";
             when foreman_manual => return "Foreman manual";
             when skilled_manual_wkrs => return "Skilled manual wkrs";
             when semi_skilled_manual_wkrs => return "Semi-skilled manual wkrs";
             when unskilled_manual_wkrs => return "Unskilled manual wkrs";
             when own_account_wkrs => return "Own account wkrs";
             when farmers_employers_managers => return "Farmers - employers,managers";
             when farmers_own_account => return "Farmers - own account";
             when agricultural_workers => return "Agricultural workers";
             when members_of_armed_forces => return "Members of armed forces";
             when managers_large => return "Managers,large";
             when inadequately_described_non_stated => return "Inadequately described,non stated";
             when employers_small => return "Employers,small";
             when managers_small => return "Managers,small";
             when professional_self_employed => return "Professional Self-employed";
             when professional_employees => return "Professional employees";
             when int_non_manual_workers => return "Int. non-manual,workers";
             when int_non_man_foreman => return "Int. non-man,foreman";
             when junior_non_manual => return "Junior non-manual";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jlseg_Type ) return Boolean is
    begin
         case i is
             when refused => return True;
             when proxy_respondent => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jlseg_Type( i : String ) return Jlseg_Type is
    begin
         if i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return employers_large;
         elsif i = "10" then
            return personal_service_wrkrs;
         elsif i = "11" then
            return foreman_manual;
         elsif i = "12" then
            return skilled_manual_wkrs;
         elsif i = "13" then
            return semi_skilled_manual_wkrs;
         elsif i = "14" then
            return unskilled_manual_wkrs;
         elsif i = "15" then
            return own_account_wkrs;
         elsif i = "16" then
            return farmers_employers_managers;
         elsif i = "17" then
            return farmers_own_account;
         elsif i = "18" then
            return agricultural_workers;
         elsif i = "19" then
            return members_of_armed_forces;
         elsif i = "2" then
            return managers_large;
         elsif i = "20" then
            return inadequately_described_non_stated;
         elsif i = "3" then
            return employers_small;
         elsif i = "4" then
            return managers_small;
         elsif i = "5" then
            return professional_self_employed;
         elsif i = "6" then
            return professional_employees;
         elsif i = "7" then
            return int_non_manual_workers;
         elsif i = "8" then
            return int_non_man_foreman;
         elsif i = "9" then
            return junior_non_manual;
        end if;
        Put_Line("Convert_Jlseg_Type: Unmatched string |" & i & "|" );
        return Jlseg_Type'First; -- never actually gets here; for compiler only
    end Convert_Jlseg_Type;



    function Pretty_Print( i : Jlsize_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when s_1_2 => return "1 - 2";
             when dk_but_under_25 => return "DK but Under 25";
             when dk_but_25_plus => return "DK but 25+";
             when s_3_9 => return "3 - 9";
             when s_10_24 => return "10 - 24";
             when s_25_49 => return "25 - 49";
             when s_50_99 => return "50 - 99";
             when s_100_199 => return "100 - 199";
             when s_200_499 => return "200 - 499";
             when s_500_999 => return "500 - 999";
             when s_1000_or_more => return "1000 or more";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jlsize_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jlsize_Type( i : String ) return Jlsize_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return s_1_2;
         elsif i = "10" then
            return dk_but_under_25;
         elsif i = "11" then
            return dk_but_25_plus;
         elsif i = "2" then
            return s_3_9;
         elsif i = "3" then
            return s_10_24;
         elsif i = "4" then
            return s_25_49;
         elsif i = "5" then
            return s_50_99;
         elsif i = "6" then
            return s_100_199;
         elsif i = "7" then
            return s_200_499;
         elsif i = "8" then
            return s_500_999;
         elsif i = "9" then
            return s_1000_or_more;
        end if;
        Put_Line("Convert_Jlsize_Type: Unmatched string |" & i & "|" );
        return Jlsize_Type'First; -- never actually gets here; for compiler only
    end Convert_Jlsize_Type;



    function Pretty_Print( i : Jlyid_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when proxy => return "Proxy";
             when missing => return "Missing";
             when current_job => return "Current job";
             when job_spell_1 => return "Job spell 1";
             when job_spell_9 => return "Job spell 9";
             when job_spell_2 => return "Job spell 2";
             when job_spell_3 => return "Job spell 3";
             when job_spell_4 => return "Job spell 4";
             when job_spell_5 => return "Job spell 5";
             when job_spell_6 => return "Job spell 6";
             when job_spell_7 => return "Job spell 7";
             when job_spell_8 => return "Job spell 8";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jlyid_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when proxy => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jlyid_Type( i : String ) return Jlyid_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return proxy;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return current_job;
         elsif i = "1" then
            return job_spell_1;
         elsif i = "14" then
            return job_spell_9;
         elsif i = "9" then
            return job_spell_9;
         elsif i = "2" then
            return job_spell_2;
         elsif i = "3" then
            return job_spell_3;
         elsif i = "4" then
            return job_spell_4;
         elsif i = "5" then
            return job_spell_5;
         elsif i = "6" then
            return job_spell_6;
         elsif i = "7" then
            return job_spell_7;
         elsif i = "8" then
            return job_spell_8;
        end if;
        Put_Line("Convert_Jlyid_Type: Unmatched string |" & i & "|" );
        return Jlyid_Type'First; -- never actually gets here; for compiler only
    end Convert_Jlyid_Type;



    function Pretty_Print( i : Jsaccs_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when yes => return "Yes";
             when no => return "No";
             when not_yet_but_will_be => return "Not yet but will be";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jsaccs_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jsaccs_Type( i : String ) return Jsaccs_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
         elsif i = "3" then
            return not_yet_but_will_be;
        end if;
        Put_Line("Convert_Jsaccs_Type: Unmatched string |" & i & "|" );
        return Jsaccs_Type'First; -- never actually gets here; for compiler only
    end Convert_Jsaccs_Type;



    function Pretty_Print( i : Jsbgly_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when before_reference_date => return "Before reference date";
             when on_or_after_reference_date => return "On or after reference date";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jsbgly_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jsbgly_Type( i : String ) return Jsbgly_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return before_reference_date;
         elsif i = "2" then
            return on_or_after_reference_date;
        end if;
        Put_Line("Convert_Jsbgly_Type: Unmatched string |" & i & "|" );
        return Jsbgly_Type'First; -- never actually gets here; for compiler only
    end Convert_Jsbgly_Type;



    function Pretty_Print( i : Jsbgly1_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when before_reference_date => return "Before reference date";
             when on_or_after_reference_date => return "On or after reference date";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jsbgly1_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jsbgly1_Type( i : String ) return Jsbgly1_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return before_reference_date;
         elsif i = "2" then
            return on_or_after_reference_date;
        end if;
        Put_Line("Convert_Jsbgly1_Type: Unmatched string |" & i & "|" );
        return Jsbgly1_Type'First; -- never actually gets here; for compiler only
    end Convert_Jsbgly1_Type;



    function Pretty_Print( i : Jsboss_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when yes_has_employees => return "Yes, has employees";
             when no_no_employees => return "No, no employees";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jsboss_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jsboss_Type( i : String ) return Jsboss_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return yes_has_employees;
         elsif i = "2" then
            return no_no_employees;
        end if;
        Put_Line("Convert_Jsboss_Type: Unmatched string |" & i & "|" );
        return Jsboss_Type'First; -- never actually gets here; for compiler only
    end Convert_Jsboss_Type;



    function Pretty_Print( i : Jsck1_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when same_occupation => return "Same occupation";
             when not_same_occupation => return "Not same occupation";
             when not_int_or_empld_previous_wave => return "Not int/empl'd previous wave";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jsck1_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jsck1_Type( i : String ) return Jsck1_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return same_occupation;
         elsif i = "2" then
            return not_same_occupation;
         elsif i = "3" then
            return not_int_or_empld_previous_wave;
        end if;
        Put_Line("Convert_Jsck1_Type: Unmatched string |" & i & "|" );
        return Jsck1_Type'First; -- never actually gets here; for compiler only
    end Convert_Jsck1_Type;



    function Pretty_Print( i : Jsloss_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jsloss_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jsloss_Type( i : String ) return Jsloss_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
        end if;
        Put_Line("Convert_Jsloss_Type: Unmatched string |" & i & "|" );
        return Jsloss_Type'First; -- never actually gets here; for compiler only
    end Convert_Jsloss_Type;



    function Pretty_Print( i : Jspart_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when own_account_sole_owner => return "Own account (sole owner)";
             when in_partnership => return "In partnership";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jspart_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jspart_Type( i : String ) return Jspart_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return own_account_sole_owner;
         elsif i = "2" then
            return in_partnership;
        end if;
        Put_Line("Convert_Jspart_Type: Unmatched string |" & i & "|" );
        return Jspart_Type'First; -- never actually gets here; for compiler only
    end Convert_Jspart_Type;



    function Pretty_Print( i : Jspayw_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when hourly => return "Hourly";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when weekly_income => return "Weekly income";
             when monthly_income => return "Monthly income";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jspayw_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when hourly => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jspayw_Type( i : String ) return Jspayw_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-4" then
            return hourly;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return weekly_income;
         elsif i = "2" then
            return monthly_income;
        end if;
        Put_Line("Convert_Jspayw_Type: Unmatched string |" & i & "|" );
        return Jspayw_Type'First; -- never actually gets here; for compiler only
    end Convert_Jspayw_Type;



    function Pretty_Print( i : Jspl_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when at_home => return "At home";
             when from_own_home => return "From own home";
             when sep_business_prems => return "Sep business prems";
             when from_van_or_stall => return "From van or stall";
             when client_or_custmrs_prems => return "Client/custmrs prems";
             when some_other_place => return "Some other place";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jspl_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jspl_Type( i : String ) return Jspl_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return at_home;
         elsif i = "2" then
            return from_own_home;
         elsif i = "3" then
            return sep_business_prems;
         elsif i = "4" then
            return from_van_or_stall;
         elsif i = "5" then
            return client_or_custmrs_prems;
         elsif i = "6" then
            return some_other_place;
        end if;
        Put_Line("Convert_Jspl_Type: Unmatched string |" & i & "|" );
        return Jspl_Type'First; -- never actually gets here; for compiler only
    end Convert_Jspl_Type;



    function Pretty_Print( i : Jsprby_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when s_1986 => return "1986";
             when s_1987 => return "1987";
             when s_1988 => return "1988";
             when s_1989 => return "1989";
             when s_1990 => return "1990";
             when s_1991 => return "1991";
             when s_1992 => return "1992";
             when s_1993 => return "1993";
             when s_1994 => return "1994";
             when s_1995 => return "1995";
             when s_1996 => return "1996";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jsprby_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jsprby_Type( i : String ) return Jsprby_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "86" then
            return s_1986;
         elsif i = "87" then
            return s_1987;
         elsif i = "88" then
            return s_1988;
         elsif i = "89" then
            return s_1989;
         elsif i = "90" then
            return s_1990;
         elsif i = "91" then
            return s_1991;
         elsif i = "92" then
            return s_1992;
         elsif i = "93" then
            return s_1993;
         elsif i = "94" then
            return s_1994;
         elsif i = "95" then
            return s_1995;
         elsif i = "96" then
            return s_1996;
        end if;
        Put_Line("Convert_Jsprby_Type: Unmatched string |" & i & "|" );
        return Jsprby_Type'First; -- never actually gets here; for compiler only
    end Convert_Jsprby_Type;



    function Pretty_Print( i : Jsprey_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when s_1986 => return "1986";
             when s_1987 => return "1987";
             when s_1988 => return "1988";
             when s_1989 => return "1989";
             when s_1990 => return "1990";
             when s_1991 => return "1991";
             when s_1992 => return "1992";
             when s_1993 => return "1993";
             when s_1994 => return "1994";
             when s_1995 => return "1995";
             when s_1996 => return "1996";
             when s_1997 => return "1997";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jsprey_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jsprey_Type( i : String ) return Jsprey_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "86" then
            return s_1986;
         elsif i = "87" then
            return s_1987;
         elsif i = "88" then
            return s_1988;
         elsif i = "89" then
            return s_1989;
         elsif i = "90" then
            return s_1990;
         elsif i = "91" then
            return s_1991;
         elsif i = "92" then
            return s_1992;
         elsif i = "93" then
            return s_1993;
         elsif i = "94" then
            return s_1994;
         elsif i = "95" then
            return s_1995;
         elsif i = "96" then
            return s_1996;
         elsif i = "97" then
            return s_1997;
        end if;
        Put_Line("Convert_Jsprey_Type: Unmatched string |" & i & "|" );
        return Jsprey_Type'First; -- never actually gets here; for compiler only
    end Convert_Jsprey_Type;



    function Pretty_Print( i : Jsprey4_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when s_1989 => return "1989";
             when s_1990 => return "1990";
             when s_1991 => return "1991";
             when s_1992 => return "1992";
             when s_1993 => return "1993";
             when s_1994 => return "1994";
             when s_1995 => return "1995";
             when s_1996 => return "1996";
             when s_1997 => return "1997";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jsprey4_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jsprey4_Type( i : String ) return Jsprey4_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "89" then
            return s_1989;
         elsif i = "90" then
            return s_1990;
         elsif i = "91" then
            return s_1991;
         elsif i = "92" then
            return s_1992;
         elsif i = "93" then
            return s_1993;
         elsif i = "94" then
            return s_1994;
         elsif i = "95" then
            return s_1995;
         elsif i = "96" then
            return s_1996;
         elsif i = "97" then
            return s_1997;
        end if;
        Put_Line("Convert_Jsprey4_Type: Unmatched string |" & i & "|" );
        return Jsprey4_Type'First; -- never actually gets here; for compiler only
    end Convert_Jsprey4_Type;



    function Pretty_Print( i : Jsprf_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when no_profit_or_loss => return "No profit/loss";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when nothing_or_loss => return "Nothing or loss";
             when s_99997_or_above => return "99997 or above";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jsprf_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when no_profit_or_loss => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jsprf_Type( i : String ) return Jsprf_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-3" then
            return no_profit_or_loss;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return nothing_or_loss;
         elsif i = "99997" then
            return s_99997_or_above;
        end if;
        Put_Line("Convert_Jsprf_Type: Unmatched string |" & i & "|" );
        return Jsprf_Type'First; -- never actually gets here; for compiler only
    end Convert_Jsprf_Type;



    function Pretty_Print( i : Jsprls_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't Know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when profit_or_earnings => return "Profit/earnings";
             when loss => return "Loss";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jsprls_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jsprls_Type( i : String ) return Jsprls_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return profit_or_earnings;
         elsif i = "2" then
            return loss;
        end if;
        Put_Line("Convert_Jsprls_Type: Unmatched string |" & i & "|" );
        return Jsprls_Type'First; -- never actually gets here; for compiler only
    end Convert_Jsprls_Type;



    function Pretty_Print( i : Jsprni_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't Know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when yes_before_ni => return "Yes (before NI)";
             when no_after_ni => return "No (after NI)";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jsprni_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jsprni_Type( i : String ) return Jsprni_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return yes_before_ni;
         elsif i = "2" then
            return no_after_ni;
        end if;
        Put_Line("Convert_Jsprni_Type: Unmatched string |" & i & "|" );
        return Jsprni_Type'First; -- never actually gets here; for compiler only
    end Convert_Jsprni_Type;



    function Pretty_Print( i : Jsprtx_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't Know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when yes_before_tax => return "Yes (before tax)";
             when no_after_tax => return "No (after tax)";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jsprtx_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jsprtx_Type( i : String ) return Jsprtx_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return yes_before_tax;
         elsif i = "2" then
            return no_after_tax;
        end if;
        Put_Line("Convert_Jsprtx_Type: Unmatched string |" & i & "|" );
        return Jsprtx_Type'First; -- never actually gets here; for compiler only
    end Convert_Jsprtx_Type;



    function Pretty_Print( i : Jspyni_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when yes_before_ni => return "Yes (before NI)";
             when no_after_ni => return "No (after NI)";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jspyni_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jspyni_Type( i : String ) return Jspyni_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return yes_before_ni;
         elsif i = "2" then
            return no_after_ni;
        end if;
        Put_Line("Convert_Jspyni_Type: Unmatched string |" & i & "|" );
        return Jspyni_Type'First; -- never actually gets here; for compiler only
    end Convert_Jspyni_Type;



    function Pretty_Print( i : Jspytx_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when yes_before_tax => return "Yes (before tax)";
             when no_after_tax => return "No (after tax)";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jspytx_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jspytx_Type( i : String ) return Jspytx_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return yes_before_tax;
         elsif i = "2" then
            return no_after_tax;
        end if;
        Put_Line("Convert_Jspytx_Type: Unmatched string |" & i & "|" );
        return Jspytx_Type'First; -- never actually gets here; for compiler only
    end Convert_Jspytx_Type;



    function Pretty_Print( i : Jssat1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when doesnt_apply => return "Doesn't apply";
             when not_satisf_at_all => return "Not satisf at all";
             when not_satis_or_dissatis => return "Not satis/dissatis";
             when completely_satis => return "Completely satis";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jssat1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jssat1_Type( i : String ) return Jssat1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return doesnt_apply;
         elsif i = "1" then
            return not_satisf_at_all;
         elsif i = "4" then
            return not_satis_or_dissatis;
         elsif i = "7" then
            return completely_satis;
        end if;
        Put_Line("Convert_Jssat1_Type: Unmatched string |" & i & "|" );
        return Jssat1_Type'First; -- never actually gets here; for compiler only
    end Convert_Jssat1_Type;



    function Pretty_Print( i : Jssize_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when s_1_2 => return "1 - 2";
             when dk_or_under_25 => return "DK/under 25";
             when dk_but_25_plus => return "DK but 25+";
             when s_3_9 => return "3 - 9";
             when s_10_24 => return "10 - 24";
             when s_25_49 => return "25 - 49";
             when s_50_99 => return "50 - 99";
             when s_100_199 => return "100 - 199";
             when s_200_499 => return "200 - 499";
             when s_500_999 => return "500 - 999";
             when s_1000_or_more => return "1000 or more";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jssize_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jssize_Type( i : String ) return Jssize_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return s_1_2;
         elsif i = "10" then
            return dk_or_under_25;
         elsif i = "11" then
            return dk_but_25_plus;
         elsif i = "2" then
            return s_3_9;
         elsif i = "3" then
            return s_10_24;
         elsif i = "4" then
            return s_25_49;
         elsif i = "5" then
            return s_50_99;
         elsif i = "6" then
            return s_100_199;
         elsif i = "7" then
            return s_200_499;
         elsif i = "8" then
            return s_500_999;
         elsif i = "9" then
            return s_1000_or_more;
        end if;
        Put_Line("Convert_Jssize_Type: Unmatched string |" & i & "|" );
        return Jssize_Type'First; -- never actually gets here; for compiler only
    end Convert_Jssize_Type;



    function Pretty_Print( i : Jstime_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when mornings_only => return "Mornings only";
             when other => return "Other";
             when daytime_and_evenings => return "Daytime and evenings";
             when afternoons_only => return "Afternoons only";
             when during_the_day => return "During the day";
             when evenings_only => return "Evenings only";
             when at_night => return "At night";
             when both_lunch_or_eves => return "Both lunch/eves";
             when other_times_day => return "Other times day";
             when rotating_shifts => return "Rotating shifts";
             when varies_or_no_pattern => return "Varies/no pattern";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jstime_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jstime_Type( i : String ) return Jstime_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return mornings_only;
         elsif i = "10" then
            return other;
         elsif i = "11" then
            return daytime_and_evenings;
         elsif i = "2" then
            return afternoons_only;
         elsif i = "3" then
            return during_the_day;
         elsif i = "4" then
            return evenings_only;
         elsif i = "5" then
            return at_night;
         elsif i = "6" then
            return both_lunch_or_eves;
         elsif i = "7" then
            return other_times_day;
         elsif i = "8" then
            return rotating_shifts;
         elsif i = "9" then
            return varies_or_no_pattern;
        end if;
        Put_Line("Convert_Jstime_Type: Unmatched string |" & i & "|" );
        return Jstime_Type'First; -- never actually gets here; for compiler only
    end Convert_Jstime_Type;



    function Pretty_Print( i : Jsttwm_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when brit_rail_or_train => return "Brit Rail/train";
             when underground_or_tube => return "Underground/tube";
             when bus_or_coach => return "Bus or coach";
             when moto_cycle_or_moped => return "Moto cycle/moped";
             when car_or_van => return "Car or van";
             when car_or_van_passenger => return "Car/van passenger";
             when pedal_cycle => return "Pedal cycle";
             when walks_all_way => return "Walks all way";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jsttwm_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jsttwm_Type( i : String ) return Jsttwm_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return brit_rail_or_train;
         elsif i = "2" then
            return underground_or_tube;
         elsif i = "3" then
            return bus_or_coach;
         elsif i = "4" then
            return moto_cycle_or_moped;
         elsif i = "5" then
            return car_or_van;
         elsif i = "6" then
            return car_or_van_passenger;
         elsif i = "7" then
            return pedal_cycle;
         elsif i = "8" then
            return walks_all_way;
         elsif i = "9" then
            return other;
        end if;
        Put_Line("Convert_Jsttwm_Type: Unmatched string |" & i & "|" );
        return Jsttwm_Type'First; -- never actually gets here; for compiler only
    end Convert_Jsttwm_Type;



    function Pretty_Print( i : Jsttwt_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when period_uncodeable => return "Period uncodeable";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when s_997_or_above => return "997 or above";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jsttwt_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when period_uncodeable => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jsttwt_Type( i : String ) return Jsttwt_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-3" then
            return period_uncodeable;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "997" then
            return s_997_or_above;
        end if;
        Put_Line("Convert_Jsttwt_Type: Unmatched string |" & i & "|" );
        return Jsttwt_Type'First; -- never actually gets here; for compiler only
    end Convert_Jsttwt_Type;



    function Pretty_Print( i : Jstype_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when own_busin_or_pract => return "Own busin/pract";
             when work_for_others => return "Work for others";
             when both => return "Both";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jstype_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jstype_Type( i : String ) return Jstype_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return own_busin_or_pract;
         elsif i = "2" then
            return work_for_others;
         elsif i = "3" then
            return both;
         elsif i = "4" then
            return other;
        end if;
        Put_Line("Convert_Jstype_Type: Unmatched string |" & i & "|" );
        return Jstype_Type'First; -- never actually gets here; for compiler only
    end Convert_Jstype_Type;



    function Pretty_Print( i : Jstypeb_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when own_business_or_practise => return "Own business/practise";
             when partner_in_business_or_practice => return "Partner in business/practice";
             when working_for_self => return "Working for self";
             when sub_contractor => return "Sub-contractor";
             when freelance => return "Freelance";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jstypeb_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jstypeb_Type( i : String ) return Jstypeb_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return own_business_or_practise;
         elsif i = "2" then
            return partner_in_business_or_practice;
         elsif i = "3" then
            return working_for_self;
         elsif i = "4" then
            return sub_contractor;
         elsif i = "5" then
            return freelance;
         elsif i = "6" then
            return other;
        end if;
        Put_Line("Convert_Jstypeb_Type: Unmatched string |" & i & "|" );
        return Jstypeb_Type'First; -- never actually gets here; for compiler only
    end Convert_Jstypeb_Type;



    function Pretty_Print( i : Jtyid_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when proxy => return "Proxy";
             when missing => return "Missing";
             when current_job => return "Current job";
             when job_spell_1 => return "Job spell 1";
             when job_spell_2 => return "Job spell 2";
             when job_spell_3 => return "Job spell 3";
             when job_spell_4 => return "Job spell 4";
             when job_spell_5 => return "Job spell 5";
             when job_spell_6 => return "Job spell 6";
             when job_spell_7 => return "Job spell 7";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jtyid_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when proxy => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jtyid_Type( i : String ) return Jtyid_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return proxy;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return current_job;
         elsif i = "1" then
            return job_spell_1;
         elsif i = "2" then
            return job_spell_2;
         elsif i = "3" then
            return job_spell_3;
         elsif i = "4" then
            return job_spell_4;
         elsif i = "5" then
            return job_spell_5;
         elsif i = "6" then
            return job_spell_6;
         elsif i = "7" then
            return job_spell_7;
        end if;
        Put_Line("Convert_Jtyid_Type: Unmatched string |" & i & "|" );
        return Jtyid_Type'First; -- never actually gets here; for compiler only
    end Convert_Jtyid_Type;



    function Pretty_Print( i : Jupayl_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when s_9997_or_more => return "9997 or more";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Jupayl_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Jupayl_Type( i : String ) return Jupayl_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "9997" then
            return s_9997_or_more;
        end if;
        Put_Line("Convert_Jupayl_Type: Unmatched string |" & i & "|" );
        return Jupayl_Type'First; -- never actually gets here; for compiler only
    end Convert_Jupayl_Type;



    function Pretty_Print( i : Juspec_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when particular => return "Particular";
             when any_sort_or_both => return "Any sort or both";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Juspec_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Juspec_Type( i : String ) return Juspec_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return particular;
         elsif i = "2" then
            return any_sort_or_both;
        end if;
        Put_Line("Convert_Juspec_Type: Unmatched string |" & i & "|" );
        return Juspec_Type'First; -- never actually gets here; for compiler only
    end Convert_Juspec_Type;



    function Pretty_Print( i : Kidrel_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when very_close => return "Very close";
             when quite_close => return "Quite close";
             when not_very_close => return "Not very close";
             when not_close_at_all => return "Not close at all";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Kidrel_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Kidrel_Type( i : String ) return Kidrel_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return very_close;
         elsif i = "2" then
            return quite_close;
         elsif i = "3" then
            return not_very_close;
         elsif i = "4" then
            return not_close_at_all;
        end if;
        Put_Line("Convert_Kidrel_Type: Unmatched string |" & i & "|" );
        return Kidrel_Type'First; -- never actually gets here; for compiler only
    end Convert_Kidrel_Type;



    function Pretty_Print( i : Kidsee_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when other_or_both_par_dead => return "Other/both par dead";
             when never => return "Never";
             when a_few_times_a_year => return "A few times a year";
             when once_or_month_or_less => return "Once/month or less";
             when several_times_or_month => return "Several times/month";
             when about_once_a_week => return "About once a week";
             when several_times_or_week => return "Several times/week";
             when almost_every_day => return "Almost every day";
             when shared_care_50_or_50 => return "Shared care 50/50";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Kidsee_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Kidsee_Type( i : String ) return Kidsee_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return other_or_both_par_dead;
         elsif i = "1" then
            return never;
         elsif i = "2" then
            return a_few_times_a_year;
         elsif i = "3" then
            return once_or_month_or_less;
         elsif i = "4" then
            return several_times_or_month;
         elsif i = "5" then
            return about_once_a_week;
         elsif i = "6" then
            return several_times_or_week;
         elsif i = "7" then
            return almost_every_day;
         elsif i = "8" then
            return shared_care_50_or_50;
        end if;
        Put_Line("Convert_Kidsee_Type: Unmatched string |" & i & "|" );
        return Kidsee_Type'First; -- never actually gets here; for compiler only
    end Convert_Kidsee_Type;



    function Pretty_Print( i : Kivfho_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when all_eligible_hh_intv => return "All eligible HH intv";
             when interviews_plus_proxies => return "Interviews + proxies";
             when interviews_plus_refusal => return "Interviews + refusal";
             when hh_comp_and_ques_only => return "HH comp & ques only";
             when pxy_at_original_addr => return "Pxy at original addr";
             when phone_interview_only => return "Phone interview only";
             when youth_interview_only => return "Youth Interview only";
             when docs_missing_or_unus => return "Docs missing or unus";
             when address_not_found => return "Address not found";
             when no_hh_member_contact => return "No HH member contact";
             when refus_to_rsrch_cntre => return "Refus to Rsrch Cntre";
             when refusal_to_intviewer => return "Refusal to intviewer";
             when language_problems => return "Language problems";
             when no_intv_age_or_health => return "No intv.: Age/health";
             when moved_prev_wave_add => return "Moved prev wave add";
             when out_scope_institutn => return "Out scope-institut'n";
             when moved_out_of_scope => return "Moved out of scope";
             when whole_hh_deceased => return "Whole HH deceased";
             when no_psms_resident => return "No PSM's resident";
             when adamant_refusal => return "Adamant refusal";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Kivfho_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Kivfho_Type( i : String ) return Kivfho_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "10" then
            return all_eligible_hh_intv;
         elsif i = "11" then
            return interviews_plus_proxies;
         elsif i = "12" then
            return interviews_plus_refusal;
         elsif i = "13" then
            return hh_comp_and_ques_only;
         elsif i = "15" then
            return pxy_at_original_addr;
         elsif i = "16" then
            return phone_interview_only;
         elsif i = "17" then
            return youth_interview_only;
         elsif i = "39" then
            return docs_missing_or_unus;
         elsif i = "50" then
            return address_not_found;
         elsif i = "51" then
            return no_hh_member_contact;
         elsif i = "60" then
            return refus_to_rsrch_cntre;
         elsif i = "61" then
            return refusal_to_intviewer;
         elsif i = "62" then
            return language_problems;
         elsif i = "63" then
            return no_intv_age_or_health;
         elsif i = "70" then
            return moved_prev_wave_add;
         elsif i = "80" then
            return out_scope_institutn;
         elsif i = "81" then
            return moved_out_of_scope;
         elsif i = "90" then
            return whole_hh_deceased;
         elsif i = "91" then
            return no_psms_resident;
         elsif i = "92" then
            return adamant_refusal;
        end if;
        Put_Line("Convert_Kivfho_Type: Unmatched string |" & i & "|" );
        return Kivfho_Type'First; -- never actually gets here; for compiler only
    end Convert_Kivfho_Type;



    function Pretty_Print( i : Lacbm_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when january => return "January";
             when october => return "October";
             when november => return "November";
             when december => return "December";
             when winter => return "Winter";
             when spring => return "Spring";
             when summer => return "Summer";
             when autumn => return "Autumn";
             when february => return "February";
             when march => return "March";
             when april => return "April";
             when may => return "May";
             when june => return "June";
             when july => return "July";
             when august => return "August";
             when september => return "September";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Lacbm_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Lacbm_Type( i : String ) return Lacbm_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return january;
         elsif i = "10" then
            return october;
         elsif i = "11" then
            return november;
         elsif i = "12" then
            return december;
         elsif i = "13" then
            return winter;
         elsif i = "14" then
            return spring;
         elsif i = "15" then
            return summer;
         elsif i = "16" then
            return autumn;
         elsif i = "2" then
            return february;
         elsif i = "3" then
            return march;
         elsif i = "4" then
            return april;
         elsif i = "5" then
            return may;
         elsif i = "6" then
            return june;
         elsif i = "7" then
            return july;
         elsif i = "8" then
            return august;
         elsif i = "9" then
            return september;
        end if;
        Put_Line("Convert_Lacbm_Type: Unmatched string |" & i & "|" );
        return Lacbm_Type'First; -- never actually gets here; for compiler only
    end Convert_Lacbm_Type;



    function Pretty_Print( i : Laclv_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when yes => return "Yes";
             when no => return "No";
             when died => return "Died";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Laclv_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Laclv_Type( i : String ) return Laclv_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
         elsif i = "3" then
            return died;
        end if;
        Put_Line("Convert_Laclv_Type: Unmatched string |" & i & "|" );
        return Laclv_Type'First; -- never actually gets here; for compiler only
    end Convert_Laclv_Type;



    function Pretty_Print( i : Lacst_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when stepchild => return "Stepchild";
             when adopted => return "Adopted";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Lacst_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Lacst_Type( i : String ) return Lacst_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return stepchild;
         elsif i = "2" then
            return adopted;
        end if;
        Put_Line("Convert_Lacst_Type: Unmatched string |" & i & "|" );
        return Lacst_Type'First; -- never actually gets here; for compiler only
    end Convert_Lacst_Type;



    function Pretty_Print( i : Lacsx_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when boy => return "Boy";
             when girl => return "Girl";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Lacsx_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Lacsx_Type( i : String ) return Lacsx_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return boy;
         elsif i = "2" then
            return girl;
        end if;
        Put_Line("Convert_Lacsx_Type: Unmatched string |" & i & "|" );
        return Lacsx_Type'First; -- never actually gets here; for compiler only
    end Convert_Lacsx_Type;



    function Pretty_Print( i : Lacta_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when at_least_once_a_week => return "At least once a week";
             when at_least_once_a_month => return "At least once a month";
             when several_times_a_year => return "Several times a year";
             when once_a_year_or_less => return "Once a year or less";
             when never_or_almost_never => return "Never/almost never";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Lacta_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Lacta_Type( i : String ) return Lacta_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return at_least_once_a_week;
         elsif i = "2" then
            return at_least_once_a_month;
         elsif i = "3" then
            return several_times_a_year;
         elsif i = "4" then
            return once_a_year_or_less;
         elsif i = "5" then
            return never_or_almost_never;
        end if;
        Put_Line("Convert_Lacta_Type: Unmatched string |" & i & "|" );
        return Lacta_Type'First; -- never actually gets here; for compiler only
    end Convert_Lacta_Type;



    function Pretty_Print( i : Lcastat_Type ) return String is
    begin
         case i is
             when wave_one => return "Wave One";
             when wave_ten => return "Wave Ten";
             when wave_eleven => return "Wave Eleven";
             when wave_twelve => return "Wave Twelve";
             when wave_thirteen => return "Wave Thirteen";
             when wave_fourteen => return "Wave Fourteen";
             when wave_fifteen => return "Wave Fifteen";
             when wave_sixteen => return "Wave Sixteen";
             when wave_seventeen => return "Wave Seventeen";
             when wave_eighteen => return "Wave Eighteen";
             when wave_two => return "Wave Two";
             when wave_three => return "Wave Three";
             when wave_four => return "Wave Four";
             when wave_five => return "Wave Five";
             when wave_six => return "Wave Six";
             when wave_seven => return "Wave Seven";
             when wave_eight => return "Wave Eight";
             when wave_nine => return "Wave Nine";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Lcastat_Type ) return Boolean is
    begin
         case i is
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Lcastat_Type( i : String ) return Lcastat_Type is
    begin
         if i = "1" then
            return wave_one;
         elsif i = "10" then
            return wave_ten;
         elsif i = "11" then
            return wave_eleven;
         elsif i = "12" then
            return wave_twelve;
         elsif i = "13" then
            return wave_thirteen;
         elsif i = "14" then
            return wave_fourteen;
         elsif i = "15" then
            return wave_fifteen;
         elsif i = "16" then
            return wave_sixteen;
         elsif i = "17" then
            return wave_seventeen;
         elsif i = "18" then
            return wave_eighteen;
         elsif i = "2" then
            return wave_two;
         elsif i = "3" then
            return wave_three;
         elsif i = "4" then
            return wave_four;
         elsif i = "5" then
            return wave_five;
         elsif i = "6" then
            return wave_six;
         elsif i = "7" then
            return wave_seven;
         elsif i = "8" then
            return wave_eight;
         elsif i = "9" then
            return wave_nine;
        end if;
        Put_Line("Convert_Lcastat_Type: Unmatched string |" & i & "|" );
        return Lcastat_Type'First; -- never actually gets here; for compiler only
    end Convert_Lcastat_Type;



    function Pretty_Print( i : Lchlv_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when yes => return "Yes";
             when no => return "No";
             when died => return "Died";
             when stillborn => return "Stillborn";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Lchlv_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Lchlv_Type( i : String ) return Lchlv_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
         elsif i = "3" then
            return died;
         elsif i = "4" then
            return stillborn;
        end if;
        Put_Line("Convert_Lchlv_Type: Unmatched string |" & i & "|" );
        return Lchlv_Type'First; -- never actually gets here; for compiler only
    end Convert_Lchlv_Type;



    function Pretty_Print( i : Lchmor_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when yes => return "Yes";
             when self_partnr_pregnant => return "Self, partnr pregnant";
             when no => return "No";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Lchmor_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Lchmor_Type( i : String ) return Lchmor_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return self_partnr_pregnant;
         elsif i = "3" then
            return no;
        end if;
        Put_Line("Convert_Lchmor_Type: Unmatched string |" & i & "|" );
        return Lchmor_Type'First; -- never actually gets here; for compiler only
    end Convert_Lchmor_Type;



    function Pretty_Print( i : Lcmarm_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when january => return "January";
             when october => return "October";
             when november => return "November";
             when december => return "December";
             when winter => return "Winter";
             when spring => return "Spring";
             when summer => return "Summer";
             when autumn => return "Autumn";
             when february => return "February";
             when march => return "March";
             when april => return "April";
             when may => return "May";
             when june => return "June";
             when july => return "July";
             when august => return "August";
             when september => return "September";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Lcmarm_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Lcmarm_Type( i : String ) return Lcmarm_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "1" then
            return january;
         elsif i = "10" then
            return october;
         elsif i = "11" then
            return november;
         elsif i = "12" then
            return december;
         elsif i = "13" then
            return winter;
         elsif i = "14" then
            return spring;
         elsif i = "15" then
            return summer;
         elsif i = "16" then
            return autumn;
         elsif i = "2" then
            return february;
         elsif i = "3" then
            return march;
         elsif i = "4" then
            return april;
         elsif i = "5" then
            return may;
         elsif i = "6" then
            return june;
         elsif i = "7" then
            return july;
         elsif i = "8" then
            return august;
         elsif i = "9" then
            return september;
        end if;
        Put_Line("Convert_Lcmarm_Type: Unmatched string |" & i & "|" );
        return Lcmarm_Type'First; -- never actually gets here; for compiler only
    end Convert_Lcmarm_Type;



    function Pretty_Print( i : Lcmary4_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Lcmary4_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Lcmary4_Type( i : String ) return Lcmary4_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
        end if;
        Put_Line("Convert_Lcmary4_Type: Unmatched string |" & i & "|" );
        return Lcmary4_Type'First; -- never actually gets here; for compiler only
    end Convert_Lcmary4_Type;



    function Pretty_Print( i : Lcmcbm_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when january => return "January";
             when october => return "October";
             when november => return "November";
             when december => return "December";
             when february => return "February";
             when march => return "March";
             when april => return "April";
             when may => return "May";
             when june => return "June";
             when july => return "July";
             when august => return "August";
             when september => return "September";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Lcmcbm_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Lcmcbm_Type( i : String ) return Lcmcbm_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "1" then
            return january;
         elsif i = "10" then
            return october;
         elsif i = "11" then
            return november;
         elsif i = "12" then
            return december;
         elsif i = "2" then
            return february;
         elsif i = "3" then
            return march;
         elsif i = "4" then
            return april;
         elsif i = "5" then
            return may;
         elsif i = "6" then
            return june;
         elsif i = "7" then
            return july;
         elsif i = "8" then
            return august;
         elsif i = "9" then
            return september;
        end if;
        Put_Line("Convert_Lcmcbm_Type: Unmatched string |" & i & "|" );
        return Lcmcbm_Type'First; -- never actually gets here; for compiler only
    end Convert_Lcmcbm_Type;



    function Pretty_Print( i : Lcmcoh_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when yes => return "Yes";
             when no => return "No";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Lcmcoh_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Lcmcoh_Type( i : String ) return Lcmcoh_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
        end if;
        Put_Line("Convert_Lcmcoh_Type: Unmatched string |" & i & "|" );
        return Lcmcoh_Type'First; -- never actually gets here; for compiler only
    end Convert_Lcmcoh_Type;



    function Pretty_Print( i : Lcmspm_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when january => return "January";
             when october => return "October";
             when november => return "November";
             when december => return "December";
             when february => return "February";
             when march => return "March";
             when april => return "April";
             when may => return "May";
             when june => return "June";
             when july => return "July";
             when august => return "August";
             when september => return "September";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Lcmspm_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Lcmspm_Type( i : String ) return Lcmspm_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return january;
         elsif i = "10" then
            return october;
         elsif i = "11" then
            return november;
         elsif i = "12" then
            return december;
         elsif i = "2" then
            return february;
         elsif i = "3" then
            return march;
         elsif i = "4" then
            return april;
         elsif i = "5" then
            return may;
         elsif i = "6" then
            return june;
         elsif i = "7" then
            return july;
         elsif i = "8" then
            return august;
         elsif i = "9" then
            return september;
        end if;
        Put_Line("Convert_Lcmspm_Type: Unmatched string |" & i & "|" );
        return Lcmspm_Type'First; -- never actually gets here; for compiler only
    end Convert_Lcmspm_Type;



    function Pretty_Print( i : Lcsne_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_ended => return "Not ended";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Lcsne_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Lcsne_Type( i : String ) return Lcsne_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return not_ended;
        end if;
        Put_Line("Convert_Lcsne_Type: Unmatched string |" & i & "|" );
        return Lcsne_Type'First; -- never actually gets here; for compiler only
    end Convert_Lcsne_Type;



    function Pretty_Print( i : Leaver_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when missing_or_wild => return "Missing or wild";
             when yes => return "Yes";
             when no => return "No";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Leaver_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Leaver_Type( i : String ) return Leaver_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
        end if;
        Put_Line("Convert_Leaver_Type: Unmatched string |" & i & "|" );
        return Leaver_Type'First; -- never actually gets here; for compiler only
    end Convert_Leaver_Type;



    function Pretty_Print( i : Lednow_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when never_left => return "Never left";
             when never_went_to_school => return "Never went to school";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Lednow_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Lednow_Type( i : String ) return Lednow_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return never_left;
         elsif i = "1" then
            return never_went_to_school;
        end if;
        Put_Line("Convert_Lednow_Type: Unmatched string |" & i & "|" );
        return Lednow_Type'First; -- never actually gets here; for compiler only
    end Convert_Lednow_Type;



    function Pretty_Print( i : Leikid_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when never_or_rarely => return "Never or rarely";
             when once_or_month_or_less => return "Once/month or less";
             when several_times_or_month => return "Several times/month";
             when about_once_a_week => return "About once a week";
             when several_times_or_week => return "Several times/week";
             when almost_every_day => return "Almost every day";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Leikid_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Leikid_Type( i : String ) return Leikid_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return never_or_rarely;
         elsif i = "2" then
            return once_or_month_or_less;
         elsif i = "3" then
            return several_times_or_month;
         elsif i = "4" then
            return about_once_a_week;
         elsif i = "5" then
            return several_times_or_week;
         elsif i = "6" then
            return almost_every_day;
        end if;
        Put_Line("Convert_Leikid_Type: Unmatched string |" & i & "|" );
        return Leikid_Type'First; -- never actually gets here; for compiler only
    end Convert_Leikid_Type;



    function Pretty_Print( i : Leshem_Type ) return String is
    begin
         case i is
             when cant_remember => return "Can't remember";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when january => return "January";
             when october => return "October";
             when november => return "November";
             when december => return "December";
             when winter => return "Winter";
             when spring => return "Spring";
             when summer => return "Summer";
             when autumn => return "Autumn";
             when winter_nov_dec => return "Winter (Nov,Dec)";
             when february => return "February";
             when march => return "March";
             when april => return "April";
             when may => return "May";
             when june => return "June";
             when july => return "July";
             when august => return "August";
             when september => return "September";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Leshem_Type ) return Boolean is
    begin
         case i is
             when cant_remember => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Leshem_Type( i : String ) return Leshem_Type is
    begin
         if i = "-1" then
            return cant_remember;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return january;
         elsif i = "10" then
            return october;
         elsif i = "11" then
            return november;
         elsif i = "12" then
            return december;
         elsif i = "13" then
            return winter;
         elsif i = "14" then
            return spring;
         elsif i = "15" then
            return summer;
         elsif i = "16" then
            return autumn;
         elsif i = "17" then
            return winter_nov_dec;
         elsif i = "2" then
            return february;
         elsif i = "3" then
            return march;
         elsif i = "4" then
            return april;
         elsif i = "5" then
            return may;
         elsif i = "6" then
            return june;
         elsif i = "7" then
            return july;
         elsif i = "8" then
            return august;
         elsif i = "9" then
            return september;
        end if;
        Put_Line("Convert_Leshem_Type: Unmatched string |" & i & "|" );
        return Leshem_Type'First; -- never actually gets here; for compiler only
    end Convert_Leshem_Type;



    function Pretty_Print( i : Leshey_Type ) return String is
    begin
         case i is
             when cant_remember => return "Can't remember";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Leshey_Type ) return Boolean is
    begin
         case i is
             when cant_remember => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Leshey_Type( i : String ) return Leshey_Type is
    begin
         if i = "-1" then
            return cant_remember;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
        end if;
        Put_Line("Convert_Leshey_Type: Unmatched string |" & i & "|" );
        return Leshey_Type'First; -- never actually gets here; for compiler only
    end Convert_Leshey_Type;



    function Pretty_Print( i : Leshst_Type ) return String is
    begin
         case i is
             when cant_remember => return "Can't remember";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when self_employed => return "Self-employed";
             when gvt_trng_scheme => return "Gvt trng scheme";
             when national_or_war_service => return "National/War Service";
             when something_else => return "Something else";
             when f_or_t_paid_employment => return "F/t paid employment";
             when p_or_t_paid_employment => return "P/t paid employment";
             when unemployed => return "Unemployed";
             when retired => return "Retired";
             when maternity_leave => return "Maternity leave";
             when family_care => return "Family care";
             when ft_studt_school => return "FT studt, school";
             when lt_sick_disabld => return "LT sick, disabld";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Leshst_Type ) return Boolean is
    begin
         case i is
             when cant_remember => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Leshst_Type( i : String ) return Leshst_Type is
    begin
         if i = "-1" then
            return cant_remember;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return self_employed;
         elsif i = "10" then
            return gvt_trng_scheme;
         elsif i = "11" then
            return national_or_war_service;
         elsif i = "12" then
            return something_else;
         elsif i = "2" then
            return f_or_t_paid_employment;
         elsif i = "3" then
            return p_or_t_paid_employment;
         elsif i = "4" then
            return unemployed;
         elsif i = "5" then
            return retired;
         elsif i = "6" then
            return maternity_leave;
         elsif i = "7" then
            return family_care;
         elsif i = "8" then
            return ft_studt_school;
         elsif i = "9" then
            return lt_sick_disabld;
        end if;
        Put_Line("Convert_Leshst_Type: Unmatched string |" & i & "|" );
        return Leshst_Type'First; -- never actually gets here; for compiler only
    end Convert_Leshst_Type;



    function Pretty_Print( i : Leslen_Type ) return String is
    begin
         case i is
             when missing_lt_1_year => return "Missing lt 1 Year";
             when missing_or_wild => return "Missing or wild";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Leslen_Type ) return Boolean is
    begin
         case i is
             when missing_lt_1_year => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Leslen_Type( i : String ) return Leslen_Type is
    begin
         if i = "-3" then
            return missing_lt_1_year;
         elsif i = "-9" then
            return missing_or_wild;
        end if;
        Put_Line("Convert_Leslen_Type: Unmatched string |" & i & "|" );
        return Leslen_Type'First; -- never actually gets here; for compiler only
    end Convert_Leslen_Type;



    function Pretty_Print( i : Lewght_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Lewght_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Lewght_Type( i : String ) return Lewght_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
        end if;
        Put_Line("Convert_Lewght_Type: Unmatched string |" & i & "|" );
        return Lewght_Type'First; -- never actually gets here; for compiler only
    end Convert_Lewght_Type;



    function Pretty_Print( i : Lfimpa_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when does_not_apply_to_me => return "Does not apply to me";
             when not_important_at_all => return "Not important at all";
             when very_important => return "Very important";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Lfimpa_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Lfimpa_Type( i : String ) return Lfimpa_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return does_not_apply_to_me;
         elsif i = "1" then
            return not_important_at_all;
         elsif i = "10" then
            return very_important;
        end if;
        Put_Line("Convert_Lfimpa_Type: Unmatched string |" & i & "|" );
        return Lfimpa_Type'First; -- never actually gets here; for compiler only
    end Convert_Lfimpa_Type;



    function Pretty_Print( i : Lfsat1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when doesnt_apply => return "Doesn't apply";
             when not_satisfied_at_all => return "Not satisfied at all";
             when not_satis_or_dissat => return "Not satis/dissat";
             when completely_satisfied => return "Completely satisfied";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Lfsat1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Lfsat1_Type( i : String ) return Lfsat1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return doesnt_apply;
         elsif i = "1" then
            return not_satisfied_at_all;
         elsif i = "4" then
            return not_satis_or_dissat;
         elsif i = "7" then
            return completely_satisfied;
        end if;
        Put_Line("Convert_Lfsat1_Type: Unmatched string |" & i & "|" );
        return Lfsat1_Type'First; -- never actually gets here; for compiler only
    end Convert_Lfsat1_Type;



    function Pretty_Print( i : Lfsatl_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when more_satisfied => return "More satisfied";
             when les_satisfied => return "Les satisfied";
             when about_the_same => return "About the same";
             when not_satis_or_dissat => return "Not satis/dissat";
             when completely_satisfied => return "Completely satisfied";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Lfsatl_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Lfsatl_Type( i : String ) return Lfsatl_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return more_satisfied;
         elsif i = "2" then
            return les_satisfied;
         elsif i = "3" then
            return about_the_same;
         elsif i = "4" then
            return not_satis_or_dissat;
         elsif i = "7" then
            return completely_satisfied;
        end if;
        Put_Line("Convert_Lfsatl_Type: Unmatched string |" & i & "|" );
        return Lfsatl_Type'First; -- never actually gets here; for compiler only
    end Convert_Lfsatl_Type;



    function Pretty_Print( i : Livfho_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when all_eligible_hh_intv => return "All eligible HH intv";
             when interviews_plus_proxies => return "Interviews + proxies";
             when interviews_plus_refusal => return "Interviews + refusal";
             when hh_comp_and_ques_only => return "HH comp & ques only";
             when pxy_at_original_addr => return "Pxy at original addr";
             when phone_interview_only => return "Phone interview only";
             when youth_interview_only => return "Youth Interview only";
             when docs_missing_or_unus => return "Docs missing or unus";
             when address_not_found => return "Address not found";
             when no_hh_member_contact => return "No HH member contact";
             when refus_to_rsrch_cntre => return "Refus to Rsrch Cntre";
             when refusal_to_intviewer => return "Refusal to intviewer";
             when language_problems => return "Language problems";
             when no_intv_age_or_health => return "No intv.: Age/health";
             when moved_prev_wave_add => return "Moved prev wave add";
             when out_scope_institutn => return "Out scope-institut'n";
             when moved_out_of_scope => return "Moved out of scope";
             when whole_hh_deceased => return "Whole HH deceased";
             when no_psms_resident => return "No PSM's resident";
             when adamant_refusal => return "Adamant refusal";
             when l_t_untraced_wdrawn => return "L-t untraced, wdrawn";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Livfho_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Livfho_Type( i : String ) return Livfho_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "10" then
            return all_eligible_hh_intv;
         elsif i = "11" then
            return interviews_plus_proxies;
         elsif i = "12" then
            return interviews_plus_refusal;
         elsif i = "13" then
            return hh_comp_and_ques_only;
         elsif i = "15" then
            return pxy_at_original_addr;
         elsif i = "16" then
            return phone_interview_only;
         elsif i = "17" then
            return youth_interview_only;
         elsif i = "39" then
            return docs_missing_or_unus;
         elsif i = "50" then
            return address_not_found;
         elsif i = "51" then
            return no_hh_member_contact;
         elsif i = "60" then
            return refus_to_rsrch_cntre;
         elsif i = "61" then
            return refusal_to_intviewer;
         elsif i = "62" then
            return language_problems;
         elsif i = "63" then
            return no_intv_age_or_health;
         elsif i = "70" then
            return moved_prev_wave_add;
         elsif i = "80" then
            return out_scope_institutn;
         elsif i = "81" then
            return moved_out_of_scope;
         elsif i = "90" then
            return whole_hh_deceased;
         elsif i = "91" then
            return no_psms_resident;
         elsif i = "92" then
            return adamant_refusal;
         elsif i = "93" then
            return l_t_untraced_wdrawn;
        end if;
        Put_Line("Convert_Livfho_Type: Unmatched string |" & i & "|" );
        return Livfho_Type'First; -- never actually gets here; for compiler only
    end Convert_Livfho_Type;



    function Pretty_Print( i : Livfio_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when full_interview => return "Full interview";
             when refusal => return "Refusal";
             when other_non_intvw => return "Other non-intvw";
             when moved => return "Moved";
             when proxy_interview => return "Proxy interview";
             when child_under_16 => return "Child under 16";
             when youth_interview => return "Youth Interview";
             when youth_refusal => return "Youth: Refusal";
             when youth_oth_non_int => return "Youth: Oth non-int";
             when child_under_11 => return "Child under 11";
             when telephone_intvw => return "Telephone intvw";
             when refusal_or_non_int_hh => return "Refusal/non-int HH";
             when non_int_or_non_int_hh => return "Non-int/non-int HH";
             when moved_or_non_int_hh => return "Moved/non-int HH";
             when child_in_non_int_hh => return "Child in non-int HH";
             when youth_ref_or_no_int_hh => return "Youth: Ref/no-int HH";
             when youth_oth_or_no_int_hh => return "Youth: Oth/no-int HH";
             when child_u_11_no_int_hh => return "Child u 11 no-int HH";
             when refusal_or_non_cont_hh => return "Refusal/non-cont HH";
             when lang_prob_or_nc_hh => return "Lang prob/NC HH";
             when age_infirm_or_nc_hh => return "Age, infirm/NC HH";
             when non_cont_or_nc_hh => return "Non-cont/NC HH";
             when out_of_scope_or_nc_hh => return "Out of scope/NC HH";
             when institutnsd_or_nc_hh => return "Institutnsd/NC HH";
             when untraced_mover => return "Untraced mover";
             when child_ref_or_nc_hh => return "Child ref/NC HH";
             when chd_lang_prob_or_nc_hh => return "Chd lang prob/NC HH";
             when chd_infirm_or_nc_hh => return "Chd infirm/NC HH";
             when chd_non_cont_or_nc_hh => return "Chd non-cont/NC HH";
             when chd_o_o_scope_or_nc_hh => return "Chd o-o-scope/NC HH";
             when chd_instit_or_nc_hh => return "Chd instit/NC HH";
             when chd_untraced_mover => return "Chd untraced mover";
             when no_one_elig_in_hh => return "No one elig in HH";
             when prev_wave_adamant_re => return "Prev wave adamant re";
             when l_t_untraced_wdrawn => return "L-t untraced, wdrawn";
             when dead => return "Dead";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Livfio_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Livfio_Type( i : String ) return Livfio_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "1" then
            return full_interview;
         elsif i = "10" then
            return refusal;
         elsif i = "11" then
            return other_non_intvw;
         elsif i = "12" then
            return moved;
         elsif i = "2" then
            return proxy_interview;
         elsif i = "20" then
            return child_under_16;
         elsif i = "21" then
            return youth_interview;
         elsif i = "22" then
            return youth_refusal;
         elsif i = "23" then
            return youth_oth_non_int;
         elsif i = "24" then
            return child_under_11;
         elsif i = "3" then
            return telephone_intvw;
         elsif i = "30" then
            return refusal_or_non_int_hh;
         elsif i = "31" then
            return non_int_or_non_int_hh;
         elsif i = "32" then
            return moved_or_non_int_hh;
         elsif i = "40" then
            return child_in_non_int_hh;
         elsif i = "41" then
            return youth_ref_or_no_int_hh;
         elsif i = "42" then
            return youth_oth_or_no_int_hh;
         elsif i = "43" then
            return child_u_11_no_int_hh;
         elsif i = "50" then
            return refusal_or_non_cont_hh;
         elsif i = "51" then
            return lang_prob_or_nc_hh;
         elsif i = "52" then
            return age_infirm_or_nc_hh;
         elsif i = "53" then
            return non_cont_or_nc_hh;
         elsif i = "54" then
            return out_of_scope_or_nc_hh;
         elsif i = "55" then
            return institutnsd_or_nc_hh;
         elsif i = "56" then
            return untraced_mover;
         elsif i = "60" then
            return child_ref_or_nc_hh;
         elsif i = "61" then
            return chd_lang_prob_or_nc_hh;
         elsif i = "62" then
            return chd_infirm_or_nc_hh;
         elsif i = "63" then
            return chd_non_cont_or_nc_hh;
         elsif i = "64" then
            return chd_o_o_scope_or_nc_hh;
         elsif i = "65" then
            return chd_instit_or_nc_hh;
         elsif i = "66" then
            return chd_untraced_mover;
         elsif i = "80" then
            return no_one_elig_in_hh;
         elsif i = "81" then
            return prev_wave_adamant_re;
         elsif i = "82" then
            return l_t_untraced_wdrawn;
         elsif i = "99" then
            return dead;
        end if;
        Put_Line("Convert_Livfio_Type: Unmatched string |" & i & "|" );
        return Livfio_Type'First; -- never actually gets here; for compiler only
    end Convert_Livfio_Type;



    function Pretty_Print( i : Ljbgm_Type ) return String is
    begin
         case i is
             when cant_remember => return "Can't remember";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when january => return "January";
             when october => return "October";
             when november => return "November";
             when december => return "December";
             when winter => return "Winter";
             when spring => return "Spring";
             when summer => return "Summer";
             when autumn => return "Autumn";
             when february => return "February";
             when march => return "March";
             when april => return "April";
             when may => return "May";
             when june => return "June";
             when july => return "July";
             when august => return "August";
             when september => return "September";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ljbgm_Type ) return Boolean is
    begin
         case i is
             when cant_remember => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ljbgm_Type( i : String ) return Ljbgm_Type is
    begin
         if i = "-1" then
            return cant_remember;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return january;
         elsif i = "10" then
            return october;
         elsif i = "11" then
            return november;
         elsif i = "12" then
            return december;
         elsif i = "13" then
            return winter;
         elsif i = "14" then
            return spring;
         elsif i = "15" then
            return summer;
         elsif i = "16" then
            return autumn;
         elsif i = "2" then
            return february;
         elsif i = "3" then
            return march;
         elsif i = "4" then
            return april;
         elsif i = "5" then
            return may;
         elsif i = "6" then
            return june;
         elsif i = "7" then
            return july;
         elsif i = "8" then
            return august;
         elsif i = "9" then
            return september;
        end if;
        Put_Line("Convert_Ljbgm_Type: Unmatched string |" & i & "|" );
        return Ljbgm_Type'First; -- never actually gets here; for compiler only
    end Convert_Ljbgm_Type;



    function Pretty_Print( i : Ljenst_Type ) return String is
    begin
         case i is
             when missing_or_undefined => return "Missing or undefined";
             when not_last_spell => return "Not last spell";
             when last_job_ever => return "Last job ever";
             when began_after_1990 => return "Began after 1.9.90";
             when prsnt_job_bef_1990 => return "Prsnt job bef 1.9.90";
             when prsnt_job_aft_1990 => return "Prsnt job aft 1.9.90";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ljenst_Type ) return Boolean is
    begin
         case i is
             when missing_or_undefined => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ljenst_Type( i : String ) return Ljenst_Type is
    begin
         if i = "-9" then
            return missing_or_undefined;
         elsif i = "0" then
            return not_last_spell;
         elsif i = "1" then
            return last_job_ever;
         elsif i = "2" then
            return began_after_1990;
         elsif i = "3" then
            return prsnt_job_bef_1990;
         elsif i = "4" then
            return prsnt_job_aft_1990;
        end if;
        Put_Line("Convert_Ljenst_Type: Unmatched string |" & i & "|" );
        return Ljenst_Type'First; -- never actually gets here; for compiler only
    end Convert_Ljenst_Type;



    function Pretty_Print( i : Ljesfv_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when correct => return "Correct";
             when partly_correct => return "Partly correct";
             when not_correct => return "Not correct";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ljesfv_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ljesfv_Type( i : String ) return Ljesfv_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return correct;
         elsif i = "2" then
            return partly_correct;
         elsif i = "3" then
            return not_correct;
        end if;
        Put_Line("Convert_Ljesfv_Type: Unmatched string |" & i & "|" );
        return Ljesfv_Type'First; -- never actually gets here; for compiler only
    end Convert_Ljesfv_Type;



    function Pretty_Print( i : Ljgold_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when service_class_higher => return "Service class, higher";
             when semi_unskilled_manual => return "Semi, unskilled manual";
             when agricultural_workers => return "Agricultural workers";
             when service_class_lower => return "Service class, lower";
             when routine_non_manual => return "Routine non-manual";
             when personal_service => return "Personal service";
             when sml_props_w_employees => return "Sml props w employees";
             when sml_props_w_or_o_employees => return "Sml props w/o employees";
             when farmers_smallholders => return "Farmers, smallholders";
             when foreman_technicians => return "Foreman, technicians";
             when skilled_manual_worker => return "Skilled manual worker";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ljgold_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ljgold_Type( i : String ) return Ljgold_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return service_class_higher;
         elsif i = "10" then
            return semi_unskilled_manual;
         elsif i = "11" then
            return agricultural_workers;
         elsif i = "2" then
            return service_class_lower;
         elsif i = "3" then
            return routine_non_manual;
         elsif i = "4" then
            return personal_service;
         elsif i = "5" then
            return sml_props_w_employees;
         elsif i = "6" then
            return sml_props_w_or_o_employees;
         elsif i = "7" then
            return farmers_smallholders;
         elsif i = "8" then
            return foreman_technicians;
         elsif i = "9" then
            return skilled_manual_worker;
        end if;
        Put_Line("Convert_Ljgold_Type: Unmatched string |" & i & "|" );
        return Ljgold_Type'First; -- never actually gets here; for compiler only
    end Convert_Ljgold_Type;



    function Pretty_Print( i : Ljhad_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when yes => return "Yes";
             when no => return "No";
             when not_left_ft_ed => return "Not left FT ed";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ljhad_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ljhad_Type( i : String ) return Ljhad_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
         elsif i = "3" then
            return not_left_ft_ed;
        end if;
        Put_Line("Convert_Ljhad_Type: Unmatched string |" & i & "|" );
        return Ljhad_Type'First; -- never actually gets here; for compiler only
    end Convert_Ljhad_Type;



    function Pretty_Print( i : Ljlen_Type ) return String is
    begin
         case i is
             when missing_lt_1_year => return "Missing lt 1 year";
             when no_final_date => return "No final date";
             when missing => return "Missing";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ljlen_Type ) return Boolean is
    begin
         case i is
             when missing_lt_1_year => return True;
             when no_final_date => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ljlen_Type( i : String ) return Ljlen_Type is
    begin
         if i = "-3" then
            return missing_lt_1_year;
         elsif i = "-8" then
            return no_final_date;
         elsif i = "-9" then
            return missing;
        end if;
        Put_Line("Convert_Ljlen_Type: Unmatched string |" & i & "|" );
        return Ljlen_Type'First; -- never actually gets here; for compiler only
    end Convert_Ljlen_Type;



    function Pretty_Print( i : Ljlftm_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when january => return "January";
             when october => return "October";
             when november => return "November";
             when december => return "December";
             when spring => return "Spring";
             when summer => return "Summer";
             when autumn => return "Autumn";
             when winter => return "Winter";
             when february => return "February";
             when march => return "March";
             when april => return "April";
             when may => return "May";
             when june => return "June";
             when july => return "July";
             when august => return "August";
             when september => return "September";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ljlftm_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ljlftm_Type( i : String ) return Ljlftm_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return january;
         elsif i = "10" then
            return october;
         elsif i = "11" then
            return november;
         elsif i = "12" then
            return december;
         elsif i = "13" then
            return spring;
         elsif i = "14" then
            return summer;
         elsif i = "15" then
            return autumn;
         elsif i = "16" then
            return winter;
         elsif i = "2" then
            return february;
         elsif i = "3" then
            return march;
         elsif i = "4" then
            return april;
         elsif i = "5" then
            return may;
         elsif i = "6" then
            return june;
         elsif i = "7" then
            return july;
         elsif i = "8" then
            return august;
         elsif i = "9" then
            return september;
        end if;
        Put_Line("Convert_Ljlftm_Type: Unmatched string |" & i & "|" );
        return Ljlftm_Type'First; -- never actually gets here; for compiler only
    end Convert_Ljlftm_Type;



    function Pretty_Print( i : Ljlrst_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when no_lifetime_history => return "No lifetime history";
             when missing_or_undefined => return "Missing or undefined";
             when last_job_ever => return "Last job ever";
             when began_after_1990 => return "Began after 1.9.90";
             when prsnt_job_bef_1990 => return "Prsnt job bef 1.9.90";
             when prsnt_job_aft_1990 => return "Prsnt job aft 1.9.90";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ljlrst_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when no_lifetime_history => return True;
             when missing_or_undefined => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ljlrst_Type( i : String ) return Ljlrst_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return no_lifetime_history;
         elsif i = "-9" then
            return missing_or_undefined;
         elsif i = "1" then
            return last_job_ever;
         elsif i = "2" then
            return began_after_1990;
         elsif i = "3" then
            return prsnt_job_bef_1990;
         elsif i = "4" then
            return prsnt_job_aft_1990;
        end if;
        Put_Line("Convert_Ljlrst_Type: Unmatched string |" & i & "|" );
        return Ljlrst_Type'First; -- never actually gets here; for compiler only
    end Convert_Ljlrst_Type;



    function Pretty_Print( i : Ljnrec_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when no_lifetime_history => return "No lifetime history";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ljnrec_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when no_lifetime_history => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ljnrec_Type( i : String ) return Ljnrec_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return no_lifetime_history;
        end if;
        Put_Line("Convert_Ljnrec_Type: Unmatched string |" & i & "|" );
        return Ljnrec_Type'First; -- never actually gets here; for compiler only
    end Convert_Ljnrec_Type;



    function Pretty_Print( i : Ljothj_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when yes_not_pres_emp => return "Yes, not pres emp";
             when yes_with_pres_emp => return "Yes, with pres emp";
             when no => return "No";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ljothj_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ljothj_Type( i : String ) return Ljothj_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return yes_not_pres_emp;
         elsif i = "2" then
            return yes_with_pres_emp;
         elsif i = "3" then
            return no;
        end if;
        Put_Line("Convert_Ljothj_Type: Unmatched string |" & i & "|" );
        return Ljothj_Type'First; -- never actually gets here; for compiler only
    end Convert_Ljothj_Type;



    function Pretty_Print( i : Ljrgsc_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when professional_occ => return "Professional occ";
             when managerial_plus_technical => return "Managerial+technical";
             when skilled_non_manual => return "Skilled non-manual";
             when skilled_manual => return "Skilled manual";
             when partly_skilled_occ => return "Partly skilled occ";
             when unskilled_occ => return "Unskilled occ";
             when armed_forces => return "Armed forces";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ljrgsc_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ljrgsc_Type( i : String ) return Ljrgsc_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return professional_occ;
         elsif i = "2" then
            return managerial_plus_technical;
         elsif i = "3" then
            return skilled_non_manual;
         elsif i = "4" then
            return skilled_manual;
         elsif i = "5" then
            return partly_skilled_occ;
         elsif i = "6" then
            return unskilled_occ;
         elsif i = "7" then
            return armed_forces;
        end if;
        Put_Line("Convert_Ljrgsc_Type: Unmatched string |" & i & "|" );
        return Ljrgsc_Type'First; -- never actually gets here; for compiler only
    end Convert_Ljrgsc_Type;



    function Pretty_Print( i : Ljseg_Type ) return String is
    begin
         case i is
             when not_applicable => return "Not Applicable";
             when missing_or_wild => return "Missing or wild";
             when employers_large => return "Employers,large";
             when personal_service_wrk => return "Personal service wrk";
             when foreman_manual => return "Foreman manual";
             when skilled_manual_wkrs => return "Skilled manual wkrs";
             when semi_skilled_manual => return "Semi-skilled manual";
             when unskilled_manual_wkr => return "Unskilled manual wkr";
             when own_account_wkrs => return "Own account wkrs";
             when farmers_employers => return "Farmers - employers";
             when farmers_own_accoun => return "Farmers - own accoun";
             when agricultural_workers => return "Agricultural workers";
             when members_of_armed_for => return "Members of armed for";
             when managers_large => return "Managers,large";
             when employers_small => return "Employers,small";
             when managers_small => return "Managers,small";
             when professional_self_em => return "Professional Self-em";
             when professional_employe => return "Professional employe";
             when int_non_manual_work => return "Int. non-manual,work";
             when int_non_man_foreman => return "Int. non-man,foreman";
             when junior_non_manual => return "Junior non-manual";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ljseg_Type ) return Boolean is
    begin
         case i is
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ljseg_Type( i : String ) return Ljseg_Type is
    begin
         if i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return employers_large;
         elsif i = "10" then
            return personal_service_wrk;
         elsif i = "11" then
            return foreman_manual;
         elsif i = "12" then
            return skilled_manual_wkrs;
         elsif i = "13" then
            return semi_skilled_manual;
         elsif i = "14" then
            return unskilled_manual_wkr;
         elsif i = "15" then
            return own_account_wkrs;
         elsif i = "16" then
            return farmers_employers;
         elsif i = "17" then
            return farmers_own_accoun;
         elsif i = "18" then
            return agricultural_workers;
         elsif i = "19" then
            return members_of_armed_for;
         elsif i = "2" then
            return managers_large;
         elsif i = "3" then
            return employers_small;
         elsif i = "4" then
            return managers_small;
         elsif i = "5" then
            return professional_self_em;
         elsif i = "6" then
            return professional_employe;
         elsif i = "7" then
            return int_non_manual_work;
         elsif i = "8" then
            return int_non_man_foreman;
         elsif i = "9" then
            return junior_non_manual;
        end if;
        Put_Line("Convert_Ljseg_Type: Unmatched string |" & i & "|" );
        return Ljseg_Type'First; -- never actually gets here; for compiler only
    end Convert_Ljseg_Type;



    function Pretty_Print( i : Ljsemp_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when self_employed => return "Self-employed";
             when full_time_employee => return "Full-time employee";
             when part_time_employee => return "Part-time employee";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ljsemp_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ljsemp_Type( i : String ) return Ljsemp_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return self_employed;
         elsif i = "2" then
            return full_time_employee;
         elsif i = "3" then
            return part_time_employee;
        end if;
        Put_Line("Convert_Ljsemp_Type: Unmatched string |" & i & "|" );
        return Ljsemp_Type'First; -- never actually gets here; for compiler only
    end Convert_Ljsemp_Type;



    function Pretty_Print( i : Ljterm_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when permanent => return "Permanent";
             when temp_or_casual => return "Temp/casual";
             when fixed_contract => return "Fixed contract";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ljterm_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ljterm_Type( i : String ) return Ljterm_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return permanent;
         elsif i = "2" then
            return temp_or_casual;
         elsif i = "3" then
            return fixed_contract;
        end if;
        Put_Line("Convert_Ljterm_Type: Unmatched string |" & i & "|" );
        return Ljterm_Type'First; -- never actually gets here; for compiler only
    end Convert_Ljterm_Type;



    function Pretty_Print( i : Ljylft_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when better_job => return "Better job";
             when other => return "Other";
             when war_or_nat_service => return "War/Nat Service";
             when moved_from_area => return "Moved from area";
             when f_or_t_education => return "F/T education";
             when different_job => return "Different job";
             when redundancy => return "Redundancy";
             when dismissed => return "Dismissed";
             when temp_job_ended => return "Temp job ended";
             when retired => return "Retired";
             when health_reasons => return "Health reasons";
             when to_have_baby => return "To have baby";
             when family_care => return "Family care";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ljylft_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ljylft_Type( i : String ) return Ljylft_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return better_job;
         elsif i = "10" then
            return other;
         elsif i = "11" then
            return war_or_nat_service;
         elsif i = "12" then
            return moved_from_area;
         elsif i = "13" then
            return f_or_t_education;
         elsif i = "2" then
            return different_job;
         elsif i = "3" then
            return redundancy;
         elsif i = "4" then
            return dismissed;
         elsif i = "5" then
            return temp_job_ended;
         elsif i = "6" then
            return retired;
         elsif i = "7" then
            return health_reasons;
         elsif i = "8" then
            return to_have_baby;
         elsif i = "9" then
            return family_care;
        end if;
        Put_Line("Convert_Ljylft_Type: Unmatched string |" & i & "|" );
        return Ljylft_Type'First; -- never actually gets here; for compiler only
    end Convert_Ljylft_Type;



    function Pretty_Print( i : Lkdobm_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing => return "Missing";
             when january => return "January";
             when october => return "October";
             when november => return "November";
             when december => return "December";
             when february => return "February";
             when march => return "March";
             when april => return "April";
             when may => return "May";
             when june => return "June";
             when july => return "July";
             when august => return "August";
             when september => return "September";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Lkdobm_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Lkdobm_Type( i : String ) return Lkdobm_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return january;
         elsif i = "10" then
            return october;
         elsif i = "11" then
            return november;
         elsif i = "12" then
            return december;
         elsif i = "2" then
            return february;
         elsif i = "3" then
            return march;
         elsif i = "4" then
            return april;
         elsif i = "5" then
            return may;
         elsif i = "6" then
            return june;
         elsif i = "7" then
            return july;
         elsif i = "8" then
            return august;
         elsif i = "9" then
            return september;
        end if;
        Put_Line("Convert_Lkdobm_Type: Unmatched string |" & i & "|" );
        return Lkdobm_Type'First; -- never actually gets here; for compiler only
    end Convert_Lkdobm_Type;



    function Pretty_Print( i : Lkdoby_Type ) return String is
    begin
         case i is
             when unknown => return "Unknown";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Lkdoby_Type ) return Boolean is
    begin
         case i is
             when unknown => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Lkdoby_Type( i : String ) return Lkdoby_Type is
    begin
         if i = "-1" then
            return unknown;
        end if;
        Put_Line("Convert_Lkdoby_Type: Unmatched string |" & i & "|" );
        return Lkdoby_Type'First; -- never actually gets here; for compiler only
    end Convert_Lkdoby_Type;



    function Pretty_Print( i : Lkmove_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when stay_here => return "Stay here";
             when prefer_to_move => return "Prefer to move";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Lkmove_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Lkmove_Type( i : String ) return Lkmove_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return stay_here;
         elsif i = "2" then
            return prefer_to_move;
        end if;
        Put_Line("Convert_Lkmove_Type: Unmatched string |" & i & "|" );
        return Lkmove_Type'First; -- never actually gets here; for compiler only
    end Convert_Lkmove_Type;



    function Pretty_Print( i : Lkmovy_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when larger_or_better_acc => return "Larger/better acc";
             when better_accom => return "Better accom";
             when feels_isolated => return "Feels isolated";
             when to_rural_environ => return "To rural environ";
             when from_urban_environ => return "From urban environ";
             when traffic => return "Traffic";
             when area_unsafe => return "Area unsafe";
             when noise => return "Noise";
             when unfriendly_area => return "Unfriendly area";
             when to_specific_area => return "To specific area";
             when dislikes_area => return "Dislikes area";
             when smaller_or_cheaper_acc => return "Smaller/cheaper acc";
             when occupation_reasons => return "Occupation reasons";
             when reduce_travelling => return "Reduce travelling";
             when retirement => return "Retirement";
             when family_reasons => return "Family reasons";
             when more_privacy => return "More privacy";
             when wants_a_change => return "Wants a change";
             when for_childs_education => return "For childs education";
             when own_accommodation => return "Own accommodation";
             when to_buy_somewhere => return "To buy somewhere";
             when health_reasons => return "Health reasons";
             when no_stairs => return "No stairs";
             when another_type => return "Another type";
             when other_aspects => return "Other aspects";
             when dislikes_accom => return "Dislikes accom";
             when other => return "Other";
             when no_reason => return "No reason";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Lkmovy_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Lkmovy_Type( i : String ) return Lkmovy_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return larger_or_better_acc;
         elsif i = "10" then
            return better_accom;
         elsif i = "11" then
            return feels_isolated;
         elsif i = "12" then
            return to_rural_environ;
         elsif i = "13" then
            return from_urban_environ;
         elsif i = "14" then
            return traffic;
         elsif i = "15" then
            return area_unsafe;
         elsif i = "16" then
            return noise;
         elsif i = "17" then
            return unfriendly_area;
         elsif i = "18" then
            return to_specific_area;
         elsif i = "19" then
            return dislikes_area;
         elsif i = "2" then
            return smaller_or_cheaper_acc;
         elsif i = "21" then
            return occupation_reasons;
         elsif i = "22" then
            return reduce_travelling;
         elsif i = "23" then
            return retirement;
         elsif i = "24" then
            return family_reasons;
         elsif i = "25" then
            return more_privacy;
         elsif i = "26" then
            return wants_a_change;
         elsif i = "27" then
            return for_childs_education;
         elsif i = "3" then
            return own_accommodation;
         elsif i = "4" then
            return to_buy_somewhere;
         elsif i = "5" then
            return health_reasons;
         elsif i = "6" then
            return no_stairs;
         elsif i = "7" then
            return another_type;
         elsif i = "8" then
            return other_aspects;
         elsif i = "9" then
            return dislikes_accom;
         elsif i = "96" then
            return other;
         elsif i = "97" then
            return no_reason;
        end if;
        Put_Line("Convert_Lkmovy_Type: Unmatched string |" & i & "|" );
        return Lkmovy_Type'First; -- never actually gets here; for compiler only
    end Convert_Lkmovy_Type;



    function Pretty_Print( i : Lksex_Type ) return String is
    begin
         case i is
             when unknown => return "Unknown";
             when missing => return "Missing";
             when male => return "Male";
             when female => return "Female";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Lksex_Type ) return Boolean is
    begin
         case i is
             when unknown => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Lksex_Type( i : String ) return Lksex_Type is
    begin
         if i = "-1" then
            return unknown;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return male;
         elsif i = "2" then
            return female;
        end if;
        Put_Line("Convert_Lksex_Type: Unmatched string |" & i & "|" );
        return Lksex_Type'First; -- never actually gets here; for compiler only
    end Convert_Lksex_Type;



    function Pretty_Print( i : Lmend_Type ) return String is
    begin
         case i is
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when widowed => return "Widowed";
             when divorced => return "Divorced";
             when other_separated => return "Other,Separated";
             when currently_married => return "Currently married";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Lmend_Type ) return Boolean is
    begin
         case i is
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Lmend_Type( i : String ) return Lmend_Type is
    begin
         if i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return widowed;
         elsif i = "2" then
            return divorced;
         elsif i = "3" then
            return other_separated;
         elsif i = "4" then
            return currently_married;
        end if;
        Put_Line("Convert_Lmend_Type: Unmatched string |" & i & "|" );
        return Lmend_Type'First; -- never actually gets here; for compiler only
    end Convert_Lmend_Type;



    function Pretty_Print( i : Lnadopt_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Lnadopt_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Lnadopt_Type( i : String ) return Lnadopt_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
        end if;
        Put_Line("Convert_Lnadopt_Type: Unmatched string |" & i & "|" );
        return Lnadopt_Type'First; -- never actually gets here; for compiler only
    end Convert_Lnadopt_Type;



    function Pretty_Print( i : Lngeng_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when english => return "English";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Lngeng_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Lngeng_Type( i : String ) return Lngeng_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return english;
         elsif i = "2" then
            return other;
        end if;
        Put_Line("Convert_Lngeng_Type: Unmatched string |" & i & "|" );
        return Lngeng_Type'First; -- never actually gets here; for compiler only
    end Convert_Lngeng_Type;



    function Pretty_Print( i : Lngoth_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when english => return "English";
             when czech => return "Czech";
             when danish => return "Danish";
             when dutch => return "Dutch";
             when estonian => return "Estonian";
             when finnish => return "Finnish";
             when french => return "French";
             when gaelic => return "Gaelic";
             when georgian => return "Georgian";
             when german => return "German";
             when greek => return "Greek";
             when albanian => return "Albanian";
             when hungarian => return "Hungarian";
             when icelandic => return "Icelandic";
             when irish => return "Irish";
             when italian => return "Italian";
             when latvian => return "Latvian";
             when lithuanian => return "Lithuanian";
             when macedonian => return "Macedonian";
             when maltese => return "Maltese";
             when norwegian => return "Norwegian";
             when polish => return "Polish";
             when armenian => return "Armenian";
             when portuguese => return "Portuguese";
             when romanian => return "Romanian";
             when russian => return "Russian";
             when serbo_croat => return "Serbo-Croat";
             when slovak => return "Slovak";
             when slovene => return "Slovene";
             when spanish => return "Spanish";
             when swedish => return "Swedish";
             when swiss => return "Swiss";
             when turkish => return "Turkish";
             when austrian => return "Austrian";
             when ukranian => return "Ukranian";
             when welsh => return "Welsh";
             when yugoslav => return "Yugoslav";
             when other_european => return "Other European";
             when belaruian => return "Belaruian";
             when afrikaans => return "Afrikaans";
             when bambara_or_mandingo => return "Bambara or Mandingo";
             when hausa_or_igbo => return "Hausa or Igbo";
             when kikuyu => return "Kikuyu";
             when shona => return "Shona";
             when somali => return "Somali";
             when swahili => return "Swahili";
             when zulu => return "Zulu";
             when other_african => return "Other African";
             when belgian => return "Belgian";
             when bengali => return "Bengali";
             when cantonese => return "Cantonese";
             when chinese => return "Chinese";
             when gujarati => return "Gujarati";
             when hindi => return "Hindi";
             when indonesian => return "Indonesian";
             when japanese => return "Japanese";
             when punjabi => return "Punjabi";
             when malaysian => return "Malaysian";
             when mandarin => return "Mandarin";
             when bosnian => return "Bosnian";
             when nepali => return "Nepali";
             when urdu => return "Urdu";
             when other_asian => return "Other Asian";
             when bulgarian => return "Bulgarian";
             when arabic => return "Arabic";
             when hebrew => return "Hebrew";
             when iranian => return "Iranian";
             when kurdish => return "Kurdish";
             when yiddish => return "Yiddish";
             when other_middle_eastern => return "Other Middle Eastern";
             when croatian => return "Croatian";
             when filipino => return "Filipino";
             when maori => return "Maori";
             when samoan => return "Samoan";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Lngoth_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Lngoth_Type( i : String ) return Lngoth_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return english;
         elsif i = "10" then
            return czech;
         elsif i = "11" then
            return danish;
         elsif i = "12" then
            return dutch;
         elsif i = "13" then
            return estonian;
         elsif i = "14" then
            return finnish;
         elsif i = "15" then
            return french;
         elsif i = "16" then
            return gaelic;
         elsif i = "17" then
            return georgian;
         elsif i = "18" then
            return german;
         elsif i = "19" then
            return greek;
         elsif i = "2" then
            return albanian;
         elsif i = "20" then
            return hungarian;
         elsif i = "21" then
            return icelandic;
         elsif i = "22" then
            return irish;
         elsif i = "23" then
            return italian;
         elsif i = "24" then
            return latvian;
         elsif i = "25" then
            return lithuanian;
         elsif i = "26" then
            return macedonian;
         elsif i = "27" then
            return maltese;
         elsif i = "28" then
            return norwegian;
         elsif i = "29" then
            return polish;
         elsif i = "3" then
            return armenian;
         elsif i = "30" then
            return portuguese;
         elsif i = "31" then
            return romanian;
         elsif i = "32" then
            return russian;
         elsif i = "33" then
            return serbo_croat;
         elsif i = "34" then
            return slovak;
         elsif i = "35" then
            return slovene;
         elsif i = "36" then
            return spanish;
         elsif i = "37" then
            return swedish;
         elsif i = "38" then
            return swiss;
         elsif i = "39" then
            return turkish;
         elsif i = "4" then
            return austrian;
         elsif i = "40" then
            return ukranian;
         elsif i = "41" then
            return welsh;
         elsif i = "42" then
            return yugoslav;
         elsif i = "43" then
            return other_european;
         elsif i = "5" then
            return belaruian;
         elsif i = "50" then
            return afrikaans;
         elsif i = "51" then
            return bambara_or_mandingo;
         elsif i = "52" then
            return hausa_or_igbo;
         elsif i = "53" then
            return kikuyu;
         elsif i = "54" then
            return shona;
         elsif i = "55" then
            return somali;
         elsif i = "56" then
            return swahili;
         elsif i = "57" then
            return zulu;
         elsif i = "58" then
            return other_african;
         elsif i = "6" then
            return belgian;
         elsif i = "60" then
            return bengali;
         elsif i = "61" then
            return cantonese;
         elsif i = "62" then
            return chinese;
         elsif i = "63" then
            return gujarati;
         elsif i = "64" then
            return hindi;
         elsif i = "65" then
            return indonesian;
         elsif i = "66" then
            return japanese;
         elsif i = "67" then
            return punjabi;
         elsif i = "68" then
            return malaysian;
         elsif i = "69" then
            return mandarin;
         elsif i = "7" then
            return bosnian;
         elsif i = "70" then
            return nepali;
         elsif i = "71" then
            return urdu;
         elsif i = "72" then
            return other_asian;
         elsif i = "8" then
            return bulgarian;
         elsif i = "80" then
            return arabic;
         elsif i = "81" then
            return hebrew;
         elsif i = "82" then
            return iranian;
         elsif i = "83" then
            return kurdish;
         elsif i = "84" then
            return yiddish;
         elsif i = "85" then
            return other_middle_eastern;
         elsif i = "9" then
            return croatian;
         elsif i = "90" then
            return filipino;
         elsif i = "91" then
            return maori;
         elsif i = "92" then
            return samoan;
         elsif i = "96" then
            return other;
        end if;
        Put_Line("Convert_Lngoth_Type: Unmatched string |" & i & "|" );
        return Lngoth_Type'First; -- never actually gets here; for compiler only
    end Convert_Lngoth_Type;



    function Pretty_Print( i : Lngusa_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when not_mentioned => return "Not mentioned";
             when converse_in_other_language => return "Converse in other language";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Lngusa_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Lngusa_Type( i : String ) return Lngusa_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return converse_in_other_language;
        end if;
        Put_Line("Convert_Lngusa_Type: Unmatched string |" & i & "|" );
        return Lngusa_Type'First; -- never actually gets here; for compiler only
    end Convert_Lngusa_Type;



    function Pretty_Print( i : Lngusb_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when not_mentioned => return "Not mentioned";
             when read_other_language => return "Read other language";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Lngusb_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Lngusb_Type( i : String ) return Lngusb_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return read_other_language;
        end if;
        Put_Line("Convert_Lngusb_Type: Unmatched string |" & i & "|" );
        return Lngusb_Type'First; -- never actually gets here; for compiler only
    end Convert_Lngusb_Type;



    function Pretty_Print( i : Lngusn_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when no_other_language => return "No other language";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Lngusn_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Lngusn_Type( i : String ) return Lngusn_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return no_other_language;
        end if;
        Put_Line("Convert_Lngusn_Type: Unmatched string |" & i & "|" );
        return Lngusn_Type'First; -- never actually gets here; for compiler only
    end Convert_Lngusn_Type;



    function Pretty_Print( i : Lngwke_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when english => return "English";
             when other_language => return "Other language";
             when not_employed => return "Not employed";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Lngwke_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Lngwke_Type( i : String ) return Lngwke_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return english;
         elsif i = "2" then
            return other_language;
         elsif i = "3" then
            return not_employed;
        end if;
        Put_Line("Convert_Lngwke_Type: Unmatched string |" & i & "|" );
        return Lngwke_Type'First; -- never actually gets here; for compiler only
    end Convert_Lngwke_Type;



    function Pretty_Print( i : Lngwko_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when none => return "None";
             when english => return "English";
             when czech => return "Czech";
             when danish => return "Danish";
             when dutch => return "Dutch";
             when estonian => return "Estonian";
             when finnish => return "Finnish";
             when french => return "French";
             when gaelic => return "Gaelic";
             when georgian => return "Georgian";
             when german => return "German";
             when greek => return "Greek";
             when albanian => return "Albanian";
             when hungarian => return "Hungarian";
             when icelandic => return "Icelandic";
             when irish => return "Irish";
             when italian => return "Italian";
             when latvian => return "Latvian";
             when lithuanian => return "Lithuanian";
             when macedonian => return "Macedonian";
             when maltese => return "Maltese";
             when norwegian => return "Norwegian";
             when polish => return "Polish";
             when armenian => return "Armenian";
             when portuguese => return "Portuguese";
             when romanian => return "Romanian";
             when russian => return "Russian";
             when serbo_croat => return "Serbo-Croat";
             when slovak => return "Slovak";
             when slovene => return "Slovene";
             when spanish => return "Spanish";
             when swedish => return "Swedish";
             when swiss => return "Swiss";
             when turkish => return "Turkish";
             when austrian => return "Austrian";
             when ukranian => return "Ukranian";
             when welsh => return "Welsh";
             when yugoslav => return "Yugoslav";
             when other_european => return "Other European";
             when belaruian => return "Belaruian";
             when afrikaans => return "Afrikaans";
             when bambara_or_mandingo => return "Bambara or Mandingo";
             when hausa_or_igbo => return "Hausa or Igbo";
             when kikuyu => return "Kikuyu";
             when shona => return "Shona";
             when somali => return "Somali";
             when swahili => return "Swahili";
             when zulu => return "Zulu";
             when other_african => return "Other African";
             when belgian => return "Belgian";
             when bengali => return "Bengali";
             when cantonese => return "Cantonese";
             when chinese => return "Chinese";
             when gujarati => return "Gujarati";
             when hindi => return "Hindi";
             when indonesian => return "Indonesian";
             when japanese => return "Japanese";
             when punjabi => return "Punjabi";
             when malaysian => return "Malaysian";
             when mandarin => return "Mandarin";
             when bosnian => return "Bosnian";
             when nepali => return "Nepali";
             when urdu => return "Urdu";
             when other_asian => return "Other Asian";
             when bulgarian => return "Bulgarian";
             when arabic => return "Arabic";
             when hebrew => return "Hebrew";
             when iranian => return "Iranian";
             when kurdish => return "Kurdish";
             when yiddish => return "Yiddish";
             when other_middle_eastern => return "Other Middle Eastern";
             when croatian => return "Croatian";
             when filipino => return "Filipino";
             when maori => return "Maori";
             when samoan => return "Samoan";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Lngwko_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Lngwko_Type( i : String ) return Lngwko_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return none;
         elsif i = "97" then
            return none;
         elsif i = "1" then
            return english;
         elsif i = "10" then
            return czech;
         elsif i = "11" then
            return danish;
         elsif i = "12" then
            return dutch;
         elsif i = "13" then
            return estonian;
         elsif i = "14" then
            return finnish;
         elsif i = "15" then
            return french;
         elsif i = "16" then
            return gaelic;
         elsif i = "17" then
            return georgian;
         elsif i = "18" then
            return german;
         elsif i = "19" then
            return greek;
         elsif i = "2" then
            return albanian;
         elsif i = "20" then
            return hungarian;
         elsif i = "21" then
            return icelandic;
         elsif i = "22" then
            return irish;
         elsif i = "23" then
            return italian;
         elsif i = "24" then
            return latvian;
         elsif i = "25" then
            return lithuanian;
         elsif i = "26" then
            return macedonian;
         elsif i = "27" then
            return maltese;
         elsif i = "28" then
            return norwegian;
         elsif i = "29" then
            return polish;
         elsif i = "3" then
            return armenian;
         elsif i = "30" then
            return portuguese;
         elsif i = "31" then
            return romanian;
         elsif i = "32" then
            return russian;
         elsif i = "33" then
            return serbo_croat;
         elsif i = "34" then
            return slovak;
         elsif i = "35" then
            return slovene;
         elsif i = "36" then
            return spanish;
         elsif i = "37" then
            return swedish;
         elsif i = "38" then
            return swiss;
         elsif i = "39" then
            return turkish;
         elsif i = "4" then
            return austrian;
         elsif i = "40" then
            return ukranian;
         elsif i = "41" then
            return welsh;
         elsif i = "42" then
            return yugoslav;
         elsif i = "43" then
            return other_european;
         elsif i = "5" then
            return belaruian;
         elsif i = "50" then
            return afrikaans;
         elsif i = "51" then
            return bambara_or_mandingo;
         elsif i = "52" then
            return hausa_or_igbo;
         elsif i = "53" then
            return kikuyu;
         elsif i = "54" then
            return shona;
         elsif i = "55" then
            return somali;
         elsif i = "56" then
            return swahili;
         elsif i = "57" then
            return zulu;
         elsif i = "58" then
            return other_african;
         elsif i = "6" then
            return belgian;
         elsif i = "60" then
            return bengali;
         elsif i = "61" then
            return cantonese;
         elsif i = "62" then
            return chinese;
         elsif i = "63" then
            return gujarati;
         elsif i = "64" then
            return hindi;
         elsif i = "65" then
            return indonesian;
         elsif i = "66" then
            return japanese;
         elsif i = "67" then
            return punjabi;
         elsif i = "68" then
            return malaysian;
         elsif i = "69" then
            return mandarin;
         elsif i = "7" then
            return bosnian;
         elsif i = "70" then
            return nepali;
         elsif i = "71" then
            return urdu;
         elsif i = "72" then
            return other_asian;
         elsif i = "8" then
            return bulgarian;
         elsif i = "80" then
            return arabic;
         elsif i = "81" then
            return hebrew;
         elsif i = "82" then
            return iranian;
         elsif i = "83" then
            return kurdish;
         elsif i = "84" then
            return yiddish;
         elsif i = "85" then
            return other_middle_eastern;
         elsif i = "9" then
            return croatian;
         elsif i = "90" then
            return filipino;
         elsif i = "91" then
            return maori;
         elsif i = "92" then
            return samoan;
         elsif i = "96" then
            return other;
        end if;
        Put_Line("Convert_Lngwko_Type: Unmatched string |" & i & "|" );
        return Lngwko_Type'First; -- never actually gets here; for compiler only
    end Convert_Lngwko_Type;



    function Pretty_Print( i : Locchd_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when excellent => return "Excellent";
             when very_good => return "Very good";
             when fair => return "Fair";
             when poor => return "Poor";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Locchd_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Locchd_Type( i : String ) return Locchd_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return excellent;
         elsif i = "2" then
            return very_good;
         elsif i = "3" then
            return fair;
         elsif i = "4" then
            return poor;
         elsif i = "5" then
            return other;
        end if;
        Put_Line("Convert_Locchd_Type: Unmatched string |" & i & "|" );
        return Locchd_Type'First; -- never actually gets here; for compiler only
    end Convert_Locchd_Type;



    function Pretty_Print( i : Locsera_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when excellent => return "Excellent";
             when very_good => return "Very good";
             when fair => return "Fair";
             when poor => return "Poor";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Locsera_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Locsera_Type( i : String ) return Locsera_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return excellent;
         elsif i = "2" then
            return very_good;
         elsif i = "3" then
            return fair;
         elsif i = "4" then
            return poor;
        end if;
        Put_Line("Convert_Locsera_Type: Unmatched string |" & i & "|" );
        return Locsera_Type'First; -- never actually gets here; for compiler only
    end Convert_Locsera_Type;



    function Pretty_Print( i : Lprnt_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when yes => return "Yes";
             when no => return "No";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Lprnt_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Lprnt_Type( i : String ) return Lprnt_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "3" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
        end if;
        Put_Line("Convert_Lprnt_Type: Unmatched string |" & i & "|" );
        return Lprnt_Type'First; -- never actually gets here; for compiler only
    end Convert_Lprnt_Type;



    function Pretty_Print( i : Lrio_Type ) return String is
    begin
         case i is
             when missing_or_wild => return "Missing or wild";
             when full_interview => return "Full interview";
             when refusal => return "Refusal";
             when other_non_intvw => return "Other non-intvw";
             when chld_in_nonresp_hh => return "Chld - in nonresp HH";
             when proxy_interview => return "Proxy interview";
             when child_under_16 => return "Child under 16";
             when youth_interview => return "Youth Interview";
             when youth_refusal => return "Youth: Refusal";
             when youth_oth_non_int => return "Youth: Oth non-int";
             when child_under_11 => return "Child under 11";
             when telephone_intvw => return "Telephone intvw";
             when refusal_or_non_int_hh => return "Refusal/non-int HH";
             when non_int_or_non_int_hh => return "Non-int/non-int HH";
             when moved_or_non_int_hh => return "Moved/non-int HH";
             when absent_no_proxy => return "Absent, no proxy";
             when child_in_non_int_hh => return "Child in non-int HH";
             when youth_ref_or_no_int_hh => return "Youth: Ref/no-int HH";
             when youth_oth_or_no_int_hh => return "Youth: Oth/no-int HH";
             when child_u_11_no_int_hh => return "Child u 11 no-int HH";
             when oth_non_intv_no_proxy => return "Oth non intv no proxy";
             when refusal_or_non_cont_hh => return "Refusal/non-cont HH";
             when lang_prob_or_nc_hh => return "Lang prob/NC HH";
             when age_infirm_or_nc_hh => return "Age, infirm/NC HH";
             when non_cont_or_nc_hh => return "Non-cont/NC HH";
             when out_of_scope_or_nc_hh => return "Out of scope/NC HH";
             when institutnsd_or_nc_hh => return "Institutnsd/NC HH";
             when untraced_mover => return "Untraced mover";
             when child_ref_or_nc_hh => return "Child ref/NC HH";
             when chd_lang_prob_or_nc_hh => return "Chd lang prob/NC HH";
             when chd_infirm_or_nc_hh => return "Chd infirm/NC HH";
             when chd_non_cont_or_nc_hh => return "Chd non-cont/NC HH";
             when chd_o_o_scope_or_nc_hh => return "Chd o-o-scope/NC HH";
             when child_instit_or_nc_hh => return "Child instit/NC HH";
             when chd_untraced_mover => return "Chd untraced mover";
             when moved => return "Moved";
             when other => return "Other";
             when no_one_elig_in_hh => return "No one elig in HH";
             when prv_wave_adamant_ref => return "Prv wave adamant ref";
             when l_t_untraced_wdrawn => return "L-t untraced, wdrawn";
             when wdrawn_before_field => return "Wdrawn before field";
             when elig_in_non_cont_hh => return "Elig - in non-cont HH";
             when withdrawn_other => return "Withdrawn - other";
             when dead => return "Dead";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Lrio_Type ) return Boolean is
    begin
         case i is
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Lrio_Type( i : String ) return Lrio_Type is
    begin
         if i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return full_interview;
         elsif i = "10" then
            return refusal;
         elsif i = "11" then
            return other_non_intvw;
         elsif i = "12" then
            return chld_in_nonresp_hh;
         elsif i = "2" then
            return proxy_interview;
         elsif i = "20" then
            return child_under_16;
         elsif i = "6" then
            return child_under_16;
         elsif i = "21" then
            return youth_interview;
         elsif i = "22" then
            return youth_refusal;
         elsif i = "23" then
            return youth_oth_non_int;
         elsif i = "24" then
            return child_under_11;
         elsif i = "3" then
            return telephone_intvw;
         elsif i = "30" then
            return refusal_or_non_int_hh;
         elsif i = "31" then
            return non_int_or_non_int_hh;
         elsif i = "32" then
            return moved_or_non_int_hh;
         elsif i = "4" then
            return absent_no_proxy;
         elsif i = "40" then
            return child_in_non_int_hh;
         elsif i = "41" then
            return youth_ref_or_no_int_hh;
         elsif i = "42" then
            return youth_oth_or_no_int_hh;
         elsif i = "43" then
            return child_u_11_no_int_hh;
         elsif i = "5" then
            return oth_non_intv_no_proxy;
         elsif i = "50" then
            return refusal_or_non_cont_hh;
         elsif i = "51" then
            return lang_prob_or_nc_hh;
         elsif i = "52" then
            return age_infirm_or_nc_hh;
         elsif i = "53" then
            return non_cont_or_nc_hh;
         elsif i = "54" then
            return out_of_scope_or_nc_hh;
         elsif i = "55" then
            return institutnsd_or_nc_hh;
         elsif i = "56" then
            return untraced_mover;
         elsif i = "60" then
            return child_ref_or_nc_hh;
         elsif i = "61" then
            return chd_lang_prob_or_nc_hh;
         elsif i = "62" then
            return chd_infirm_or_nc_hh;
         elsif i = "63" then
            return chd_non_cont_or_nc_hh;
         elsif i = "64" then
            return chd_o_o_scope_or_nc_hh;
         elsif i = "65" then
            return child_instit_or_nc_hh;
         elsif i = "66" then
            return chd_untraced_mover;
         elsif i = "7" then
            return moved;
         elsif i = "8" then
            return other;
         elsif i = "80" then
            return no_one_elig_in_hh;
         elsif i = "81" then
            return prv_wave_adamant_ref;
         elsif i = "82" then
            return l_t_untraced_wdrawn;
         elsif i = "83" then
            return wdrawn_before_field;
         elsif i = "9" then
            return elig_in_non_cont_hh;
         elsif i = "98" then
            return withdrawn_other;
         elsif i = "99" then
            return dead;
        end if;
        Put_Line("Convert_Lrio_Type: Unmatched string |" & i & "|" );
        return Lrio_Type'First; -- never actually gets here; for compiler only
    end Convert_Lrio_Type;



    function Pretty_Print( i : Lvag14_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing => return "Missing";
             when natural_moth_and_fath => return "Natural moth & fath";
             when adoptiv_moth_and_fath => return "Adoptiv moth & fath";
             when mother_and_stepfather => return "Mother & stepfather";
             when father_and_stepmother => return "Father & stepmother";
             when mother_no_fath_figr => return "Mother no fath figr";
             when father_or_no_moth_figr => return "Father/no moth figr";
             when la_care_or_foster_home => return "LA care/foster home";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Lvag14_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Lvag14_Type( i : String ) return Lvag14_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return natural_moth_and_fath;
         elsif i = "2" then
            return adoptiv_moth_and_fath;
         elsif i = "3" then
            return mother_and_stepfather;
         elsif i = "4" then
            return father_and_stepmother;
         elsif i = "5" then
            return mother_no_fath_figr;
         elsif i = "6" then
            return father_or_no_moth_figr;
         elsif i = "7" then
            return la_care_or_foster_home;
         elsif i = "8" then
            return other;
        end if;
        Put_Line("Convert_Lvag14_Type: Unmatched string |" & i & "|" );
        return Lvag14_Type'First; -- never actually gets here; for compiler only
    end Convert_Lvag14_Type;



    function Pretty_Print( i : Lvag16_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't Know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing => return "Missing";
             when yes => return "Yes";
             when no => return "No";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Lvag16_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Lvag16_Type( i : String ) return Lvag16_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
         elsif i = "3" then
            return other;
        end if;
        Put_Line("Convert_Lvag16_Type: Unmatched string |" & i & "|" );
        return Lvag16_Type'First; -- never actually gets here; for compiler only
    end Convert_Lvag16_Type;



    function Pretty_Print( i : Lvch_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when sons_or_daughters => return "Son(s)/daughter(s)";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Lvch_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Lvch_Type( i : String ) return Lvch_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return sons_or_daughters;
         elsif i = "3" then
            return sons_or_daughters;
        end if;
        Put_Line("Convert_Lvch_Type: Unmatched string |" & i & "|" );
        return Lvch_Type'First; -- never actually gets here; for compiler only
    end Convert_Lvch_Type;



    function Pretty_Print( i : Lvgch_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when grandchildren => return "Grandchild(ren)";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Lvgch_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Lvgch_Type( i : String ) return Lvgch_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return grandchildren;
        end if;
        Put_Line("Convert_Lvgch_Type: Unmatched string |" & i & "|" );
        return Lvgch_Type'First; -- never actually gets here; for compiler only
    end Convert_Lvgch_Type;



    function Pretty_Print( i : Lvggch_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when great_grandchildren => return "Great grandchild(ren)";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Lvggch_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Lvggch_Type( i : String ) return Lvggch_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return great_grandchildren;
        end if;
        Put_Line("Convert_Lvggch_Type: Unmatched string |" & i & "|" );
        return Lvggch_Type'First; -- never actually gets here; for compiler only
    end Convert_Lvggch_Type;



    function Pretty_Print( i : Lvggpa_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when great_grandparents => return "Great grandparent(s)";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Lvggpa_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Lvggpa_Type( i : String ) return Lvggpa_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return great_grandparents;
        end if;
        Put_Line("Convert_Lvggpa_Type: Unmatched string |" & i & "|" );
        return Lvggpa_Type'First; -- never actually gets here; for compiler only
    end Convert_Lvggpa_Type;



    function Pretty_Print( i : Lvgpar_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when grandparents => return "Grandparent(s)";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Lvgpar_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Lvgpar_Type( i : String ) return Lvgpar_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return grandparents;
        end if;
        Put_Line("Convert_Lvgpar_Type: Unmatched string |" & i & "|" );
        return Lvgpar_Type'First; -- never actually gets here; for compiler only
    end Convert_Lvgpar_Type;



    function Pretty_Print( i : Lvhmag_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when never_with_both_parents => return "Never with both parents";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Lvhmag_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when never_with_both_parents => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Lvhmag_Type( i : String ) return Lvhmag_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-3" then
            return never_with_both_parents;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
        end if;
        Put_Line("Convert_Lvhmag_Type: Unmatched string |" & i & "|" );
        return Lvhmag_Type'First; -- never actually gets here; for compiler only
    end Convert_Lvhmag_Type;



    function Pretty_Print( i : Lvloc_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when current_resident => return "Current resident";
             when outside_gb => return "Outside GB";
             when address_in_roi => return "Address in R.O.I";
             when in_gb_priv_add_known => return "In GB priv add known";
             when in_gb_priv_add_unknown => return "In GB priv add unknown";
             when institution => return "Institution";
             when deceased => return "Deceased";
             when other => return "Other";
             when address_in_ni_known => return "Address in NI known";
             when unkown_address_in_ni => return "Unkown Address in NI";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Lvloc_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Lvloc_Type( i : String ) return Lvloc_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return current_resident;
         elsif i = "1" then
            return outside_gb;
         elsif i = "10" then
            return address_in_roi;
         elsif i = "2" then
            return in_gb_priv_add_known;
         elsif i = "3" then
            return in_gb_priv_add_unknown;
         elsif i = "4" then
            return institution;
         elsif i = "5" then
            return deceased;
         elsif i = "7" then
            return deceased;
         elsif i = "6" then
            return other;
         elsif i = "8" then
            return address_in_ni_known;
         elsif i = "9" then
            return unkown_address_in_ni;
        end if;
        Put_Line("Convert_Lvloc_Type: Unmatched string |" & i & "|" );
        return Lvloc_Type'First; -- never actually gets here; for compiler only
    end Convert_Lvloc_Type;



    function Pretty_Print( i : Lvlong_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when very_likely => return "Very likely";
             when likely => return "Likely";
             when unlikely => return "Unlikely";
             when very_unlikely => return "Very unlikely";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Lvlong_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Lvlong_Type( i : String ) return Lvlong_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return very_likely;
         elsif i = "2" then
            return likely;
         elsif i = "3" then
            return unlikely;
         elsif i = "4" then
            return very_unlikely;
        end if;
        Put_Line("Convert_Lvlong_Type: Unmatched string |" & i & "|" );
        return Lvlong_Type'First; -- never actually gets here; for compiler only
    end Convert_Lvlong_Type;



    function Pretty_Print( i : Lvma_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when mother => return "Mother";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Lvma_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Lvma_Type( i : String ) return Lvma_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return mother;
        end if;
        Put_Line("Convert_Lvma_Type: Unmatched string |" & i & "|" );
        return Lvma_Type'First; -- never actually gets here; for compiler only
    end Convert_Lvma_Type;



    function Pretty_Print( i : Lvmn_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when current_resident => return "Current resident";
             when january => return "January";
             when october => return "October";
             when november => return "November";
             when december => return "December";
             when summer => return "Summer";
             when february => return "February";
             when march => return "March";
             when april => return "April";
             when may => return "May";
             when june => return "June";
             when july => return "July";
             when august => return "August";
             when september => return "September";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Lvmn_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Lvmn_Type( i : String ) return Lvmn_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return current_resident;
         elsif i = "1" then
            return january;
         elsif i = "10" then
            return october;
         elsif i = "11" then
            return november;
         elsif i = "12" then
            return december;
         elsif i = "15" then
            return summer;
         elsif i = "2" then
            return february;
         elsif i = "3" then
            return march;
         elsif i = "4" then
            return april;
         elsif i = "5" then
            return may;
         elsif i = "6" then
            return june;
         elsif i = "7" then
            return july;
         elsif i = "8" then
            return august;
         elsif i = "9" then
            return september;
        end if;
        Put_Line("Convert_Lvmn_Type: Unmatched string |" & i & "|" );
        return Lvmn_Type'First; -- never actually gets here; for compiler only
    end Convert_Lvmn_Type;



    function Pretty_Print( i : Lvpa_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when father => return "Father";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Lvpa_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Lvpa_Type( i : String ) return Lvpa_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return father;
         elsif i = "2" then
            return father;
        end if;
        Put_Line("Convert_Lvpa_Type: Unmatched string |" & i & "|" );
        return Lvpa_Type'First; -- never actually gets here; for compiler only
    end Convert_Lvpa_Type;



    function Pretty_Print( i : Lvsib_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when brothers_or_sisters => return "Brother(s)/sister(s)";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Lvsib_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Lvsib_Type( i : String ) return Lvsib_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return brothers_or_sisters;
        end if;
        Put_Line("Convert_Lvsib_Type: Unmatched string |" & i & "|" );
        return Lvsib_Type'First; -- never actually gets here; for compiler only
    end Convert_Lvsib_Type;



    function Pretty_Print( i : Lvwhy_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when current_resident => return "Current resident";
             when deceased => return "Deceased";
             when separated_or_divorced => return "Separated/divorced";
             when to_college_or_university => return "To college/university";
             when to_institution => return "To institution";
             when left_for_job => return "Left for job";
             when marriage_or_cohabitation => return "Marriage/cohabitation";
             when to_set_up_own_home => return "To set up own home";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Lvwhy_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Lvwhy_Type( i : String ) return Lvwhy_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return current_resident;
         elsif i = "1" then
            return deceased;
         elsif i = "2" then
            return separated_or_divorced;
         elsif i = "3" then
            return to_college_or_university;
         elsif i = "4" then
            return to_institution;
         elsif i = "5" then
            return left_for_job;
         elsif i = "6" then
            return marriage_or_cohabitation;
         elsif i = "7" then
            return to_set_up_own_home;
         elsif i = "8" then
            return other;
        end if;
        Put_Line("Convert_Lvwhy_Type: Unmatched string |" & i & "|" );
        return Lvwhy_Type'First; -- never actually gets here; for compiler only
    end Convert_Lvwhy_Type;



    function Pretty_Print( i : Lvyr_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when current_resident => return "Current resident";
             when s_1991 => return "1991";
             when s_1992 => return "1992";
             when s_1993 => return "1993";
             when s_1994 => return "1994";
             when s_1995 => return "1995";
             when s_1996 => return "1996";
             when s_1997 => return "1997";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Lvyr_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Lvyr_Type( i : String ) return Lvyr_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return current_resident;
         elsif i = "91" then
            return s_1991;
         elsif i = "92" then
            return s_1992;
         elsif i = "93" then
            return s_1993;
         elsif i = "94" then
            return s_1994;
         elsif i = "95" then
            return s_1995;
         elsif i = "96" then
            return s_1996;
         elsif i = "97" then
            return s_1997;
        end if;
        Put_Line("Convert_Lvyr_Type: Unmatched string |" & i & "|" );
        return Lvyr_Type'First; -- never actually gets here; for compiler only
    end Convert_Lvyr_Type;



    function Pretty_Print( i : Lvyr4_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when current_resident => return "Current resident";
             when s_1991 => return "1991";
             when s_1992 => return "1992";
             when s_1993 => return "1993";
             when s_1994 => return "1994";
             when s_1995 => return "1995";
             when s_1996 => return "1996";
             when s_1997 => return "1997";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Lvyr4_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Lvyr4_Type( i : String ) return Lvyr4_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return current_resident;
         elsif i = "91" then
            return s_1991;
         elsif i = "92" then
            return s_1992;
         elsif i = "93" then
            return s_1993;
         elsif i = "94" then
            return s_1994;
         elsif i = "95" then
            return s_1995;
         elsif i = "96" then
            return s_1996;
         elsif i = "97" then
            return s_1997;
        end if;
        Put_Line("Convert_Lvyr4_Type: Unmatched string |" & i & "|" );
        return Lvyr4_Type'First; -- never actually gets here; for compiler only
    end Convert_Lvyr4_Type;



    function Pretty_Print( i : Lwdnw1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when didnt_work_monday => return "Didn't work Monday";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Lwdnw1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Lwdnw1_Type( i : String ) return Lwdnw1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return didnt_work_monday;
        end if;
        Put_Line("Convert_Lwdnw1_Type: Unmatched string |" & i & "|" );
        return Lwdnw1_Type'First; -- never actually gets here; for compiler only
    end Convert_Lwdnw1_Type;



    function Pretty_Print( i : Lwdnw2_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when didnt_work_tuesday => return "Didn't work Tuesday";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Lwdnw2_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Lwdnw2_Type( i : String ) return Lwdnw2_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return didnt_work_tuesday;
        end if;
        Put_Line("Convert_Lwdnw2_Type: Unmatched string |" & i & "|" );
        return Lwdnw2_Type'First; -- never actually gets here; for compiler only
    end Convert_Lwdnw2_Type;



    function Pretty_Print( i : Lwdnw3_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when didnt_work_wednesday => return "Didn't work Wednesday";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Lwdnw3_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Lwdnw3_Type( i : String ) return Lwdnw3_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return didnt_work_wednesday;
        end if;
        Put_Line("Convert_Lwdnw3_Type: Unmatched string |" & i & "|" );
        return Lwdnw3_Type'First; -- never actually gets here; for compiler only
    end Convert_Lwdnw3_Type;



    function Pretty_Print( i : Lwdnw4_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when didnt_work_thursday => return "Didn't work Thursday";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Lwdnw4_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Lwdnw4_Type( i : String ) return Lwdnw4_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return didnt_work_thursday;
        end if;
        Put_Line("Convert_Lwdnw4_Type: Unmatched string |" & i & "|" );
        return Lwdnw4_Type'First; -- never actually gets here; for compiler only
    end Convert_Lwdnw4_Type;



    function Pretty_Print( i : Lwdnw5_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when didnt_work_friday => return "Didn't work Friday";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Lwdnw5_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Lwdnw5_Type( i : String ) return Lwdnw5_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return didnt_work_friday;
        end if;
        Put_Line("Convert_Lwdnw5_Type: Unmatched string |" & i & "|" );
        return Lwdnw5_Type'First; -- never actually gets here; for compiler only
    end Convert_Lwdnw5_Type;



    function Pretty_Print( i : Lwdnw6_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when didnt_work_saturday => return "Didn't work Saturday";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Lwdnw6_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Lwdnw6_Type( i : String ) return Lwdnw6_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return didnt_work_saturday;
        end if;
        Put_Line("Convert_Lwdnw6_Type: Unmatched string |" & i & "|" );
        return Lwdnw6_Type'First; -- never actually gets here; for compiler only
    end Convert_Lwdnw6_Type;



    function Pretty_Print( i : Lwdnw7_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when didnt_work_sunday => return "Didn't work Sunday";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Lwdnw7_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Lwdnw7_Type( i : String ) return Lwdnw7_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return didnt_work_sunday;
        end if;
        Put_Line("Convert_Lwdnw7_Type: Unmatched string |" & i & "|" );
        return Lwdnw7_Type'First; -- never actually gets here; for compiler only
    end Convert_Lwdnw7_Type;



    function Pretty_Print( i : Lwstat_Type ) return String is
    begin
         case i is
             when ego_new_entrant => return "Ego New entrant";
             when missing_household => return "Missing household";
             when co_resident => return "Co-resident";
             when different_household => return "Different household";
             when alter_birth => return "Alter birth";
             when alter_out_of_scope => return "Alter out of scope";
             when blank => return "";
             when not_in_sample => return "Not in sample";
             when both_non_resp_dk => return "Both non-resp, DK";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Lwstat_Type ) return Boolean is
    begin
         case i is
             when ego_new_entrant => return True;
             when missing_household => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Lwstat_Type( i : String ) return Lwstat_Type is
    begin
         if i = "-8" then
            return ego_new_entrant;
         elsif i = "-9" then
            return missing_household;
         elsif i = "1" then
            return co_resident;
         elsif i = "2" then
            return different_household;
         elsif i = "3" then
            return alter_birth;
         elsif i = "4" then
            return alter_out_of_scope;
         elsif i = "5" then
            return blank;
         elsif i = "9" then
            return blank;
         elsif i = "6" then
            return not_in_sample;
         elsif i = "7" then
            return both_non_resp_dk;
        end if;
        Put_Line("Convert_Lwstat_Type: Unmatched string |" & i & "|" );
        return Lwstat_Type'First; -- never actually gets here; for compiler only
    end Convert_Lwstat_Type;



    function Pretty_Print( i : Maborn_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when england => return "England";
             when scotland => return "Scotland";
             when wales => return "Wales";
             when northern_ireland => return "Northern Ireland";
             when irish_republic => return "Irish Republic";
             when other_or_outside_uk => return "Other/outside UK";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Maborn_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Maborn_Type( i : String ) return Maborn_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return england;
         elsif i = "2" then
            return scotland;
         elsif i = "3" then
            return wales;
         elsif i = "4" then
            return northern_ireland;
         elsif i = "5" then
            return irish_republic;
         elsif i = "6" then
            return other_or_outside_uk;
        end if;
        Put_Line("Convert_Maborn_Type: Unmatched string |" & i & "|" );
        return Maborn_Type'First; -- never actually gets here; for compiler only
    end Convert_Maborn_Type;



    function Pretty_Print( i : Maboss_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when work_on_own => return "Work on own";
             when had_employees => return "Had employees";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Maboss_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Maboss_Type( i : String ) return Maboss_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return work_on_own;
         elsif i = "2" then
            return had_employees;
        end if;
        Put_Line("Convert_Maboss_Type: Unmatched string |" & i & "|" );
        return Maboss_Type'First; -- never actually gets here; for compiler only
    end Convert_Maboss_Type;



    function Pretty_Print( i : Mabrn_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when abu_dhabi => return "Abu Dhabi";
             when alderney => return "Alderney";
             when ecuador => return "Ecuador";
             when egypt => return "Egypt";
             when el_salvador => return "El Salvador";
             when ellice_island => return "Ellice Island";
             when england => return "England";
             when equatorial_guinea => return "Equatorial Guinea";
             when eritrea => return "Eritrea";
             when estonia => return "Estonia";
             when ethiopia => return "Ethiopia";
             when europe_not_elsewhere_coded => return "Europe (Not Elsewhere Coded)";
             when algeria => return "Algeria";
             when falkland_islands => return "Falkland Islands";
             when faroe_islands => return "Faroe Islands";
             when federated_states_of_micronesia => return "Federated States of Micronesia";
             when fiji => return "Fiji";
             when finland => return "Finland";
             when france => return "France";
             when french_guiana => return "French Guiana";
             when french_polynesia => return "French Polynesia";
             when french_southern_territories => return "French Southern Territories";
             when fujairah => return "Fujairah";
             when american_samoa => return "American Samoa";
             when gabon => return "Gabon";
             when gambia => return "Gambia";
             when gaza_and_west_bank => return "Gaza & West Bank";
             when georgia_republic => return "Georgia Republic";
             when germany => return "Germany";
             when ghana => return "Ghana";
             when gibraltar => return "Gibraltar";
             when gough_island => return "Gough Island";
             when greece => return "Greece";
             when greenland => return "Greenland";
             when andorra => return "Andorra";
             when grenada => return "Grenada";
             when guadaloupe => return "Guadaloupe";
             when guam => return "Guam";
             when guatemala => return "Guatemala";
             when guernsey => return "Guernsey";
             when guinea => return "Guinea";
             when guinea_bissau => return "Guinea-Bissau";
             when guyana => return "Guyana";
             when haiti => return "Haiti";
             when heard_and_mcdonald_islands => return "Heard and McDonald Islands";
             when angola => return "Angola";
             when herm => return "Herm";
             when herzegovina => return "Herzegovina";
             when honduras => return "Honduras";
             when hong_kong => return "Hong Kong";
             when hungary => return "Hungary";
             when ibiza => return "Ibiza";
             when iceland => return "Iceland";
             when inaccessible_island => return "Inaccessible Island";
             when india => return "India";
             when indonesia => return "Indonesia";
             when anguilla => return "Anguilla";
             when ionian_islands => return "Ionian Islands";
             when iran => return "Iran";
             when iraq => return "Iraq";
             when ireland_northern => return "Ireland, Northern";
             when ireland_republic_of => return "Ireland, Republic of";
             when isle_of_man => return "Isle of Man";
             when israel => return "Israel";
             when italy => return "Italy";
             when jamaica => return "Jamaica";
             when japan => return "Japan";
             when antarctica_nes => return "Antarctica (NES)";
             when java => return "Java";
             when jersey => return "Jersey";
             when jethou_island => return "Jethou Island";
             when johnston_atoll_or_island => return "Johnston Atoll/Island";
             when jordan => return "Jordan";
             when kashmir => return "Kashmir";
             when kazakhstan => return "Kazakhstan";
             when kenya => return "Kenya";
             when kiribati => return "Kiribati";
             when korea_dem_peoples_rep_north_korea => return "Korea, Dem. People's Rep. (North Korea)";
             when antigua => return "Antigua";
             when korea_republic_of_south_korea => return "Korea, Republic of (South Korea)";
             when kosovo => return "Kosovo";
             when kuwait => return "Kuwait";
             when kyrgyzstan => return "Kyrgyzstan";
             when laos => return "Laos";
             when latvia => return "Latvia";
             when lebanon => return "Lebanon";
             when lesotho => return "Lesotho";
             when liberia => return "Liberia";
             when libya => return "Libya";
             when antigua_and_barbuda => return "Antigua and Barbuda";
             when liechtenstein => return "Liechtenstein";
             when lithuania => return "Lithuania";
             when loyalty_islands => return "Loyalty Islands";
             when luxembourg => return "Luxembourg";
             when macao => return "Macao";
             when macedonia => return "Macedonia";
             when madagascar => return "Madagascar";
             when malagasy_republic => return "Malagasy Republic";
             when malawi => return "Malawi";
             when malaysia => return "Malaysia";
             when argentina => return "Argentina";
             when maldives => return "Maldives";
             when mali => return "Mali";
             when malta_and_gozo => return "Malta and Gozo";
             when marshall_islands => return "Marshall Islands";
             when martinique => return "Martinique";
             when mauritania => return "Mauritania";
             when mauritius => return "Mauritius";
             when mayotte_collectivity_of_aka_mahore => return "Mayotte, Collectivity of (aka MahorÃ©)";
             when melilla => return "Melilla";
             when mexico => return "Mexico";
             when aden => return "Aden";
             when argentina_antarctic_territory => return "Argentina Antarctic Territory";
             when middle_east_not_elsewhere_coded => return "Middle East (Not Elsewhere Coded)";
             when middle_island => return "Middle Island";
             when moldova => return "Moldova";
             when monaco => return "Monaco";
             when mongolia => return "Mongolia";
             when montenegro => return "Montenegro";
             when montserrat => return "Montserrat";
             when morocco => return "Morocco";
             when mozambique => return "Mozambique";
             when myanmar => return "Myanmar";
             when armenia => return "Armenia";
             when namibia => return "Namibia";
             when nauru => return "Nauru";
             when nepal => return "Nepal";
             when netherland_antilles => return "Netherland Antilles";
             when netherlands => return "Netherlands";
             when new_caledonia => return "New Caledonia";
             when new_zealand => return "New Zealand";
             when nicaragua => return "Nicaragua";
             when niger => return "Niger";
             when nigeria => return "Nigeria";
             when aruba => return "Aruba";
             when nightingale_island => return "Nightingale Island";
             when niue => return "Niue";
             when norfolk_island => return "Norfolk Island";
             when northern_mariana_islands => return "Northern Mariana Islands";
             when norway => return "Norway";
             when norwegian_antarctic_territory => return "Norwegian Antarctic Territory";
             when oman => return "Oman";
             when pakistan => return "Pakistan";
             when palau => return "Palau";
             when palestine => return "Palestine";
             when ascension_island => return "Ascension Island";
             when palmyra_islands => return "Palmyra Islands";
             when panama => return "Panama";
             when panama_canal_zone => return "Panama Canal Zone";
             when papua_new_guinea => return "Papua New Guinea";
             when paraguay => return "Paraguay";
             when peru => return "Peru";
             when peter_island => return "Peter Island";
             when philippines => return "Philippines";
             when pitcairn_islands_group => return "Pitcairn Islands Group";
             when poland => return "Poland";
             when asia_not_elsewhere_coded => return "Asia (Not Elsewhere Coded)";
             when polynesia => return "Polynesia";
             when portugal => return "Portugal";
             when puerto_rico => return "Puerto Rico";
             when qatar => return "Qatar";
             when queen_maud_land => return "Queen Maud Land";
             when ras_al_khaimah => return "Ras al Khaimah";
             when reunion => return "Reunion";
             when romania => return "Romania";
             when ross_dependency => return "Ross Dependency";
             when russia => return "Russia";
             when australia => return "Australia";
             when rwanda => return "Rwanda";
             when saint_barthelemy_collectivity_of => return "Saint BarthÃ©lemy, Collectivity of";
             when saint_martin_collectivity_of => return "Saint Martin, Collectivity of";
             when san_marino => return "San Marino";
             when sao_tome_and_principe => return "Sao Tome and Principe";
             when sark => return "Sark";
             when saudi_arabia => return "Saudi Arabia";
             when scotland => return "Scotland";
             when senegal => return "Senegal";
             when serbia => return "Serbia";
             when australian_antarctic_territory => return "Australian Antarctic Territory";
             when seychelles => return "Seychelles";
             when sharjah => return "Sharjah";
             when sierra_leone => return "Sierra Leone";
             when singapore => return "Singapore";
             when slovakia => return "Slovakia";
             when slovenia => return "Slovenia";
             when solomon_islands => return "Solomon Islands";
             when somalia => return "Somalia";
             when south_africa => return "South Africa";
             when south_america_not_elsewhere_coded => return "South America (Not Elsewhere Coded)";
             when austria => return "Austria";
             when south_georgia_and_south_sandwich_islands => return "South Georgia and South Sandwich Islands";
             when spain => return "Spain";
             when sri_lanka => return "Sri Lanka";
             when st_christopher_st_kitts_nevis => return "St Christopher (St Kitts) - Nevis";
             when st_helena => return "St Helena";
             when st_lucia => return "St Lucia";
             when st_pierre_et_miquelon => return "St Pierre et Miquelon";
             when st_vincent_and_the_grenadines => return "St Vincent and the Grenadines";
             when stoltenhoff_island => return "Stoltenhoff Island";
             when sudan => return "Sudan";
             when azerbaijan => return "Azerbaijan";
             when suriname => return "Suriname";
             when swaziland => return "Swaziland";
             when sweden => return "Sweden";
             when switzerland => return "Switzerland";
             when syrian_arab_republic => return "Syrian Arab Republic";
             when taiwan => return "Taiwan";
             when tajikistan => return "Tajikistan";
             when tanzania => return "Tanzania";
             when thailand => return "Thailand";
             when tibet => return "Tibet";
             when azores => return "Azores";
             when togo => return "Togo";
             when tokelau_islands => return "Tokelau Islands";
             when tonga => return "Tonga";
             when transkei => return "Transkei";
             when trinidad_and_tobago => return "Trinidad and Tobago";
             when tristan_da_cunha => return "Tristan da Cunha";
             when tunisia => return "Tunisia";
             when turkey => return "Turkey";
             when turkmenistan => return "Turkmenistan";
             when turks_and_caicos_islands => return "Turks and Caicos Islands";
             when afghanistan => return "Afghanistan";
             when bahamas => return "Bahamas";
             when tuvalu => return "Tuvalu";
             when uganda => return "Uganda";
             when ukraine => return "Ukraine";
             when umm_al_qaiwain => return "Umm al Qaiwain";
             when union_of_soviet_socialist_republics => return "Union of Soviet Socialist Republics";
             when united_arab_emirates => return "United Arab Emirates";
             when united_states_of_america => return "United States of America";
             when uruguay => return "Uruguay";
             when us_pacific_islands => return "US Pacific Islands";
             when us_virgin_islands => return "US Virgin Islands";
             when bahrain => return "Bahrain";
             when uzbekistan => return "Uzbekistan";
             when vanuatu => return "Vanuatu";
             when vatican_city_state => return "Vatican City State";
             when venezuela => return "Venezuela";
             when vietnam => return "Vietnam";
             when wake_island => return "Wake Island";
             when wales => return "Wales";
             when wallis_and_futuna_islands => return "Wallis and Futuna Islands";
             when walvis_bay => return "Walvis Bay";
             when west_falkland => return "West Falkland";
             when bangladesh => return "Bangladesh";
             when west_indies_not_elsewhere_coded => return "West Indies (Not Elsewhere Coded)";
             when western_samoa => return "Western Samoa";
             when yemen => return "Yemen";
             when yugoslavia => return "Yugoslavia";
             when zaire_congolese_republic => return "Zaire (Congolese Republic)";
             when zambia => return "Zambia";
             when zimbabwe_rhodesia => return "Zimbabwe (Rhodesia)";
             when other_country_please_specify => return "Other Country (Please Specify)";
             when bantu_homelands => return "Bantu Homelands";
             when barbados => return "Barbados";
             when barbuda => return "Barbuda";
             when basutoland => return "Basutoland";
             when belarus => return "Belarus";
             when belgium => return "Belgium";
             when belize => return "Belize";
             when africa_east_nes => return "Africa - East (NES)";
             when benin => return "Benin";
             when bermuda => return "Bermuda";
             when bhurma => return "Bhurma";
             when bhutan => return "Bhutan";
             when bolivia => return "Bolivia";
             when bonaire => return "Bonaire";
             when bophuthatswana => return "Bophuthatswana";
             when bosnia_and_herzegovina => return "Bosnia and Herzegovina";
             when botswana => return "Botswana";
             when brazil => return "Brazil";
             when africa_north_nes => return "Africa - North (NES)";
             when british_antarctic_territory => return "British Antarctic Territory";
             when british_indian_ocean_territory => return "British Indian Ocean Territory";
             when british_virgin_islands => return "British Virgin Islands";
             when brunei => return "Brunei";
             when bulgaria => return "Bulgaria";
             when burkina_faso => return "Burkina Faso";
             when burundi => return "Burundi";
             when cabinda => return "Cabinda";
             when cambodia => return "Cambodia";
             when cameroon => return "Cameroon";
             when africa_west_nes => return "Africa - West (NES)";
             when canada => return "Canada";
             when canary_islands => return "Canary Islands";
             when cape_verde => return "Cape Verde";
             when caroline_islands => return "Caroline Islands";
             when cayman_islands => return "Cayman Islands";
             when central_african_republic => return "Central African Republic";
             when ceuta => return "Ceuta";
             when chad => return "Chad";
             when chagos_archipelago => return "Chagos Archipelago";
             when channel_islands => return "Channel Islands";
             when africa_nes => return "Africa (NES)";
             when chile => return "Chile";
             when chilean_antarctic => return "Chilean Antarctic";
             when china => return "China";
             when christmas_island_australia => return "Christmas Island (Australia)";
             when cocos_keeling_islands => return "Cocos (Keeling) Islands";
             when colombia => return "Colombia";
             when cis_russia => return "C.I.S (Russia)";
             when comoros => return "Comoros";
             when congo => return "Congo";
             when cook_islands => return "Cook Islands";
             when ajman => return "Ajman";
             when coral_sea_islands_territory => return "Coral Sea Islands Territory";
             when costa_rica => return "Costa Rica";
             when cote_d_ivoire_republic_of => return "CÃ´te D' Ivoire, Republic Of";
             when crete => return "Crete";
             when croatia => return "Croatia";
             when cuba => return "Cuba";
             when curacao => return "Curacao";
             when cyprus => return "Cyprus";
             when czech_republic => return "Czech Republic";
             when czechoslovakia => return "Czechoslovakia";
             when albania => return "Albania";
             when democratic_republic_of_congo => return "Democratic Republic of Congo";
             when denmark => return "Denmark";
             when djibouti => return "Djibouti";
             when dodecanese_islands => return "Dodecanese Islands";
             when dominica => return "Dominica";
             when dominican_republic => return "Dominican Republic";
             when dubai => return "Dubai";
             when east_falkland => return "East Falkland";
             when east_samoa_american => return "East Samoa (American)";
             when east_timor_dem_rep_of_timor_leste => return "East Timor, Dem. Rep. of Timor-Leste";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Mabrn_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Mabrn_Type( i : String ) return Mabrn_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return abu_dhabi;
         elsif i = "10" then
            return alderney;
         elsif i = "100" then
            return ecuador;
         elsif i = "101" then
            return egypt;
         elsif i = "102" then
            return el_salvador;
         elsif i = "103" then
            return ellice_island;
         elsif i = "104" then
            return england;
         elsif i = "105" then
            return equatorial_guinea;
         elsif i = "106" then
            return eritrea;
         elsif i = "107" then
            return estonia;
         elsif i = "108" then
            return ethiopia;
         elsif i = "109" then
            return europe_not_elsewhere_coded;
         elsif i = "11" then
            return algeria;
         elsif i = "110" then
            return falkland_islands;
         elsif i = "111" then
            return faroe_islands;
         elsif i = "112" then
            return federated_states_of_micronesia;
         elsif i = "113" then
            return fiji;
         elsif i = "114" then
            return finland;
         elsif i = "115" then
            return france;
         elsif i = "116" then
            return french_guiana;
         elsif i = "117" then
            return french_polynesia;
         elsif i = "118" then
            return french_southern_territories;
         elsif i = "119" then
            return fujairah;
         elsif i = "12" then
            return american_samoa;
         elsif i = "120" then
            return gabon;
         elsif i = "121" then
            return gambia;
         elsif i = "122" then
            return gaza_and_west_bank;
         elsif i = "123" then
            return georgia_republic;
         elsif i = "124" then
            return germany;
         elsif i = "125" then
            return ghana;
         elsif i = "126" then
            return gibraltar;
         elsif i = "127" then
            return gough_island;
         elsif i = "128" then
            return greece;
         elsif i = "129" then
            return greenland;
         elsif i = "13" then
            return andorra;
         elsif i = "130" then
            return grenada;
         elsif i = "131" then
            return guadaloupe;
         elsif i = "132" then
            return guam;
         elsif i = "133" then
            return guatemala;
         elsif i = "134" then
            return guernsey;
         elsif i = "135" then
            return guinea;
         elsif i = "136" then
            return guinea_bissau;
         elsif i = "137" then
            return guyana;
         elsif i = "138" then
            return haiti;
         elsif i = "139" then
            return heard_and_mcdonald_islands;
         elsif i = "14" then
            return angola;
         elsif i = "140" then
            return herm;
         elsif i = "141" then
            return herzegovina;
         elsif i = "142" then
            return honduras;
         elsif i = "143" then
            return hong_kong;
         elsif i = "144" then
            return hungary;
         elsif i = "145" then
            return ibiza;
         elsif i = "146" then
            return iceland;
         elsif i = "147" then
            return inaccessible_island;
         elsif i = "148" then
            return india;
         elsif i = "149" then
            return indonesia;
         elsif i = "15" then
            return anguilla;
         elsif i = "150" then
            return ionian_islands;
         elsif i = "151" then
            return iran;
         elsif i = "152" then
            return iraq;
         elsif i = "153" then
            return ireland_northern;
         elsif i = "154" then
            return ireland_republic_of;
         elsif i = "155" then
            return isle_of_man;
         elsif i = "156" then
            return israel;
         elsif i = "157" then
            return italy;
         elsif i = "158" then
            return jamaica;
         elsif i = "159" then
            return japan;
         elsif i = "16" then
            return antarctica_nes;
         elsif i = "160" then
            return java;
         elsif i = "161" then
            return jersey;
         elsif i = "162" then
            return jethou_island;
         elsif i = "163" then
            return johnston_atoll_or_island;
         elsif i = "164" then
            return jordan;
         elsif i = "165" then
            return kashmir;
         elsif i = "166" then
            return kazakhstan;
         elsif i = "167" then
            return kenya;
         elsif i = "168" then
            return kiribati;
         elsif i = "169" then
            return korea_dem_peoples_rep_north_korea;
         elsif i = "17" then
            return antigua;
         elsif i = "170" then
            return korea_republic_of_south_korea;
         elsif i = "171" then
            return kosovo;
         elsif i = "172" then
            return kuwait;
         elsif i = "173" then
            return kyrgyzstan;
         elsif i = "174" then
            return laos;
         elsif i = "175" then
            return latvia;
         elsif i = "176" then
            return lebanon;
         elsif i = "177" then
            return lesotho;
         elsif i = "178" then
            return liberia;
         elsif i = "179" then
            return libya;
         elsif i = "18" then
            return antigua_and_barbuda;
         elsif i = "180" then
            return liechtenstein;
         elsif i = "181" then
            return lithuania;
         elsif i = "182" then
            return loyalty_islands;
         elsif i = "183" then
            return luxembourg;
         elsif i = "184" then
            return macao;
         elsif i = "185" then
            return macedonia;
         elsif i = "186" then
            return madagascar;
         elsif i = "187" then
            return malagasy_republic;
         elsif i = "188" then
            return malawi;
         elsif i = "189" then
            return malaysia;
         elsif i = "19" then
            return argentina;
         elsif i = "190" then
            return maldives;
         elsif i = "191" then
            return mali;
         elsif i = "192" then
            return malta_and_gozo;
         elsif i = "193" then
            return marshall_islands;
         elsif i = "194" then
            return martinique;
         elsif i = "195" then
            return mauritania;
         elsif i = "196" then
            return mauritius;
         elsif i = "197" then
            return mayotte_collectivity_of_aka_mahore;
         elsif i = "198" then
            return melilla;
         elsif i = "199" then
            return mexico;
         elsif i = "2" then
            return aden;
         elsif i = "20" then
            return argentina_antarctic_territory;
         elsif i = "200" then
            return middle_east_not_elsewhere_coded;
         elsif i = "201" then
            return middle_island;
         elsif i = "202" then
            return moldova;
         elsif i = "203" then
            return monaco;
         elsif i = "204" then
            return mongolia;
         elsif i = "205" then
            return montenegro;
         elsif i = "206" then
            return montserrat;
         elsif i = "207" then
            return morocco;
         elsif i = "208" then
            return mozambique;
         elsif i = "209" then
            return myanmar;
         elsif i = "21" then
            return armenia;
         elsif i = "210" then
            return namibia;
         elsif i = "211" then
            return nauru;
         elsif i = "212" then
            return nepal;
         elsif i = "213" then
            return netherland_antilles;
         elsif i = "214" then
            return netherlands;
         elsif i = "215" then
            return new_caledonia;
         elsif i = "216" then
            return new_zealand;
         elsif i = "217" then
            return nicaragua;
         elsif i = "218" then
            return niger;
         elsif i = "219" then
            return nigeria;
         elsif i = "22" then
            return aruba;
         elsif i = "220" then
            return nightingale_island;
         elsif i = "221" then
            return niue;
         elsif i = "222" then
            return norfolk_island;
         elsif i = "223" then
            return northern_mariana_islands;
         elsif i = "224" then
            return norway;
         elsif i = "225" then
            return norwegian_antarctic_territory;
         elsif i = "226" then
            return oman;
         elsif i = "227" then
            return pakistan;
         elsif i = "228" then
            return palau;
         elsif i = "229" then
            return palestine;
         elsif i = "23" then
            return ascension_island;
         elsif i = "230" then
            return palmyra_islands;
         elsif i = "231" then
            return panama;
         elsif i = "232" then
            return panama_canal_zone;
         elsif i = "233" then
            return papua_new_guinea;
         elsif i = "234" then
            return paraguay;
         elsif i = "235" then
            return peru;
         elsif i = "236" then
            return peter_island;
         elsif i = "237" then
            return philippines;
         elsif i = "238" then
            return pitcairn_islands_group;
         elsif i = "239" then
            return poland;
         elsif i = "24" then
            return asia_not_elsewhere_coded;
         elsif i = "240" then
            return polynesia;
         elsif i = "241" then
            return portugal;
         elsif i = "242" then
            return puerto_rico;
         elsif i = "243" then
            return qatar;
         elsif i = "244" then
            return queen_maud_land;
         elsif i = "245" then
            return ras_al_khaimah;
         elsif i = "246" then
            return reunion;
         elsif i = "247" then
            return romania;
         elsif i = "248" then
            return ross_dependency;
         elsif i = "249" then
            return russia;
         elsif i = "25" then
            return australia;
         elsif i = "250" then
            return rwanda;
         elsif i = "251" then
            return saint_barthelemy_collectivity_of;
         elsif i = "252" then
            return saint_martin_collectivity_of;
         elsif i = "253" then
            return san_marino;
         elsif i = "254" then
            return sao_tome_and_principe;
         elsif i = "255" then
            return sark;
         elsif i = "256" then
            return saudi_arabia;
         elsif i = "257" then
            return scotland;
         elsif i = "258" then
            return senegal;
         elsif i = "259" then
            return serbia;
         elsif i = "26" then
            return australian_antarctic_territory;
         elsif i = "260" then
            return seychelles;
         elsif i = "261" then
            return sharjah;
         elsif i = "262" then
            return sierra_leone;
         elsif i = "263" then
            return singapore;
         elsif i = "264" then
            return slovakia;
         elsif i = "265" then
            return slovenia;
         elsif i = "266" then
            return solomon_islands;
         elsif i = "267" then
            return somalia;
         elsif i = "268" then
            return south_africa;
         elsif i = "269" then
            return south_america_not_elsewhere_coded;
         elsif i = "27" then
            return austria;
         elsif i = "270" then
            return south_georgia_and_south_sandwich_islands;
         elsif i = "271" then
            return spain;
         elsif i = "272" then
            return sri_lanka;
         elsif i = "273" then
            return st_christopher_st_kitts_nevis;
         elsif i = "274" then
            return st_helena;
         elsif i = "275" then
            return st_lucia;
         elsif i = "276" then
            return st_pierre_et_miquelon;
         elsif i = "277" then
            return st_vincent_and_the_grenadines;
         elsif i = "278" then
            return stoltenhoff_island;
         elsif i = "279" then
            return sudan;
         elsif i = "28" then
            return azerbaijan;
         elsif i = "280" then
            return suriname;
         elsif i = "281" then
            return swaziland;
         elsif i = "282" then
            return sweden;
         elsif i = "283" then
            return switzerland;
         elsif i = "284" then
            return syrian_arab_republic;
         elsif i = "285" then
            return taiwan;
         elsif i = "286" then
            return tajikistan;
         elsif i = "287" then
            return tanzania;
         elsif i = "288" then
            return thailand;
         elsif i = "289" then
            return tibet;
         elsif i = "29" then
            return azores;
         elsif i = "290" then
            return togo;
         elsif i = "291" then
            return tokelau_islands;
         elsif i = "292" then
            return tonga;
         elsif i = "293" then
            return transkei;
         elsif i = "294" then
            return trinidad_and_tobago;
         elsif i = "295" then
            return tristan_da_cunha;
         elsif i = "296" then
            return tunisia;
         elsif i = "297" then
            return turkey;
         elsif i = "298" then
            return turkmenistan;
         elsif i = "299" then
            return turks_and_caicos_islands;
         elsif i = "3" then
            return afghanistan;
         elsif i = "30" then
            return bahamas;
         elsif i = "300" then
            return tuvalu;
         elsif i = "301" then
            return uganda;
         elsif i = "302" then
            return ukraine;
         elsif i = "303" then
            return umm_al_qaiwain;
         elsif i = "304" then
            return union_of_soviet_socialist_republics;
         elsif i = "305" then
            return united_arab_emirates;
         elsif i = "306" then
            return united_states_of_america;
         elsif i = "307" then
            return uruguay;
         elsif i = "308" then
            return us_pacific_islands;
         elsif i = "309" then
            return us_virgin_islands;
         elsif i = "31" then
            return bahrain;
         elsif i = "310" then
            return uzbekistan;
         elsif i = "311" then
            return vanuatu;
         elsif i = "312" then
            return vatican_city_state;
         elsif i = "313" then
            return venezuela;
         elsif i = "314" then
            return vietnam;
         elsif i = "315" then
            return wake_island;
         elsif i = "316" then
            return wales;
         elsif i = "317" then
            return wallis_and_futuna_islands;
         elsif i = "318" then
            return walvis_bay;
         elsif i = "319" then
            return west_falkland;
         elsif i = "32" then
            return bangladesh;
         elsif i = "320" then
            return west_indies_not_elsewhere_coded;
         elsif i = "321" then
            return western_samoa;
         elsif i = "322" then
            return yemen;
         elsif i = "323" then
            return yugoslavia;
         elsif i = "324" then
            return zaire_congolese_republic;
         elsif i = "325" then
            return zambia;
         elsif i = "326" then
            return zimbabwe_rhodesia;
         elsif i = "327" then
            return other_country_please_specify;
         elsif i = "33" then
            return bantu_homelands;
         elsif i = "34" then
            return barbados;
         elsif i = "35" then
            return barbuda;
         elsif i = "36" then
            return basutoland;
         elsif i = "37" then
            return belarus;
         elsif i = "38" then
            return belgium;
         elsif i = "39" then
            return belize;
         elsif i = "4" then
            return africa_east_nes;
         elsif i = "40" then
            return benin;
         elsif i = "41" then
            return bermuda;
         elsif i = "42" then
            return bhurma;
         elsif i = "43" then
            return bhutan;
         elsif i = "44" then
            return bolivia;
         elsif i = "45" then
            return bonaire;
         elsif i = "46" then
            return bophuthatswana;
         elsif i = "47" then
            return bosnia_and_herzegovina;
         elsif i = "48" then
            return botswana;
         elsif i = "49" then
            return brazil;
         elsif i = "5" then
            return africa_north_nes;
         elsif i = "50" then
            return british_antarctic_territory;
         elsif i = "51" then
            return british_indian_ocean_territory;
         elsif i = "52" then
            return british_virgin_islands;
         elsif i = "53" then
            return brunei;
         elsif i = "54" then
            return bulgaria;
         elsif i = "55" then
            return burkina_faso;
         elsif i = "56" then
            return burundi;
         elsif i = "57" then
            return cabinda;
         elsif i = "58" then
            return cambodia;
         elsif i = "59" then
            return cameroon;
         elsif i = "6" then
            return africa_west_nes;
         elsif i = "60" then
            return canada;
         elsif i = "61" then
            return canary_islands;
         elsif i = "62" then
            return cape_verde;
         elsif i = "63" then
            return caroline_islands;
         elsif i = "64" then
            return cayman_islands;
         elsif i = "65" then
            return central_african_republic;
         elsif i = "66" then
            return ceuta;
         elsif i = "67" then
            return chad;
         elsif i = "68" then
            return chagos_archipelago;
         elsif i = "69" then
            return channel_islands;
         elsif i = "7" then
            return africa_nes;
         elsif i = "70" then
            return chile;
         elsif i = "71" then
            return chilean_antarctic;
         elsif i = "72" then
            return china;
         elsif i = "73" then
            return christmas_island_australia;
         elsif i = "74" then
            return cocos_keeling_islands;
         elsif i = "75" then
            return colombia;
         elsif i = "76" then
            return cis_russia;
         elsif i = "77" then
            return comoros;
         elsif i = "78" then
            return congo;
         elsif i = "79" then
            return cook_islands;
         elsif i = "8" then
            return ajman;
         elsif i = "80" then
            return coral_sea_islands_territory;
         elsif i = "81" then
            return costa_rica;
         elsif i = "82" then
            return cote_d_ivoire_republic_of;
         elsif i = "83" then
            return crete;
         elsif i = "84" then
            return croatia;
         elsif i = "85" then
            return cuba;
         elsif i = "86" then
            return curacao;
         elsif i = "87" then
            return cyprus;
         elsif i = "88" then
            return czech_republic;
         elsif i = "89" then
            return czechoslovakia;
         elsif i = "9" then
            return albania;
         elsif i = "90" then
            return democratic_republic_of_congo;
         elsif i = "91" then
            return denmark;
         elsif i = "92" then
            return djibouti;
         elsif i = "93" then
            return dodecanese_islands;
         elsif i = "94" then
            return dominica;
         elsif i = "95" then
            return dominican_republic;
         elsif i = "96" then
            return dubai;
         elsif i = "97" then
            return east_falkland;
         elsif i = "98" then
            return east_samoa_american;
         elsif i = "99" then
            return east_timor_dem_rep_of_timor_leste;
         elsif i = "997" then
            return other;
        end if;
        Put_Line("Convert_Mabrn_Type: Unmatched string |" & i & "|" );
        return Mabrn_Type'First; -- never actually gets here; for compiler only
    end Convert_Mabrn_Type;



    function Pretty_Print( i : Mach18_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing => return "Missing";
             when yes => return "Yes";
             when no => return "No";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Mach18_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Mach18_Type( i : String ) return Mach18_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
        end if;
        Put_Line("Convert_Mach18_Type: Unmatched string |" & i & "|" );
        return Mach18_Type'First; -- never actually gets here; for compiler only
    end Convert_Mach18_Type;



    function Pretty_Print( i : Macssf_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when never_had_a_job => return "Never had a job";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Macssf_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when never_had_a_job => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Macssf_Type( i : String ) return Macssf_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-3" then
            return never_had_a_job;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
        end if;
        Put_Line("Convert_Macssf_Type: Unmatched string |" & i & "|" );
        return Macssf_Type'First; -- never actually gets here; for compiler only
    end Convert_Macssf_Type;



    function Pretty_Print( i : Maedhi_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing => return "Missing";
             when never_went_to_school => return "Never went to school";
             when left_school_no_quals => return "Left school no quals";
             when left_sch_w_some_qual => return "Left sch w some qual";
             when got_further_ed_quals => return "Got Further Ed quals";
             when got_uni_or_highr_degree => return "Got uni/highr degree";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Maedhi_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Maedhi_Type( i : String ) return Maedhi_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return never_went_to_school;
         elsif i = "2" then
            return left_school_no_quals;
         elsif i = "3" then
            return left_sch_w_some_qual;
         elsif i = "4" then
            return got_further_ed_quals;
         elsif i = "5" then
            return got_uni_or_highr_degree;
        end if;
        Put_Line("Convert_Maedhi_Type: Unmatched string |" & i & "|" );
        return Maedhi_Type'First; -- never actually gets here; for compiler only
    end Convert_Maedhi_Type;



    function Pretty_Print( i : Magold_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when never_had_a_job => return "Never had a job";
             when proxy_respondent => return "Proxy respondent";
             when not_applicable => return "Not Applicable";
             when missing => return "Missing";
             when service_class_higher_grade => return "Service class,higher grade";
             when semi_unskilled_manual_workers => return "Semi,unskilled manual workers";
             when agricultural_workers => return "Agricultural workers";
             when inadequately_described_non_stated => return "Inadequately described,non stated";
             when service_class_lower_grade => return "Service class,lower grade";
             when routine_non_manual_employees => return "Routine non-manual employees";
             when personal_service_workers => return "Personal service workers";
             when sml_props_w_employees => return "Sml props w employees";
             when sml_props_w_or_o_employees => return "Sml props w/o employees";
             when farmers_smallholders => return "Farmers,Smallholders";
             when foreman_technicians => return "Foreman,Technicians";
             when skilled_manual_workers => return "Skilled manual workers";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Magold_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when never_had_a_job => return True;
             when proxy_respondent => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Magold_Type( i : String ) return Magold_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-3" then
            return never_had_a_job;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return service_class_higher_grade;
         elsif i = "10" then
            return semi_unskilled_manual_workers;
         elsif i = "11" then
            return agricultural_workers;
         elsif i = "12" then
            return inadequately_described_non_stated;
         elsif i = "2" then
            return service_class_lower_grade;
         elsif i = "3" then
            return routine_non_manual_employees;
         elsif i = "4" then
            return personal_service_workers;
         elsif i = "5" then
            return sml_props_w_employees;
         elsif i = "6" then
            return sml_props_w_or_o_employees;
         elsif i = "7" then
            return farmers_smallholders;
         elsif i = "8" then
            return foreman_technicians;
         elsif i = "9" then
            return skilled_manual_workers;
        end if;
        Put_Line("Convert_Magold_Type: Unmatched string |" & i & "|" );
        return Magold_Type'First; -- never actually gets here; for compiler only
    end Convert_Magold_Type;



    function Pretty_Print( i : Maju_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when mother_not_work => return "Mother not work";
             when mother_deceased => return "Mother deceased";
             when mother_not_live => return "Mother not live";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Maju_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Maju_Type( i : String ) return Maju_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return mother_not_work;
         elsif i = "1" then
            return mother_deceased;
         elsif i = "2" then
            return mother_not_live;
        end if;
        Put_Line("Convert_Maju_Type: Unmatched string |" & i & "|" );
        return Maju_Type'First; -- never actually gets here; for compiler only
    end Convert_Maju_Type;



    function Pretty_Print( i : Mamngr_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when manager => return "Manager";
             when foreman_or_supervis => return "Foreman/supervis";
             when not_mnger_or_superv => return "Not mnger/superv";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Mamngr_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Mamngr_Type( i : String ) return Mamngr_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return manager;
         elsif i = "2" then
            return foreman_or_supervis;
         elsif i = "3" then
            return not_mnger_or_superv;
        end if;
        Put_Line("Convert_Mamngr_Type: Unmatched string |" & i & "|" );
        return Mamngr_Type'First; -- never actually gets here; for compiler only
    end Convert_Mamngr_Type;



    function Pretty_Print( i : Margsc_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when never_had_a_job => return "Never had a job";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when professional_occ => return "Professional occ";
             when managerial_and_technical_occ => return "Managerial & technical occ";
             when skilled_non_manual => return "Skilled non-manual";
             when skilled_manual => return "Skilled manual";
             when partly_skilled_occ => return "Partly skilled occ";
             when unskilled_occ => return "Unskilled occ";
             when armed_forces => return "Armed forces";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Margsc_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when never_had_a_job => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Margsc_Type( i : String ) return Margsc_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-3" then
            return never_had_a_job;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return professional_occ;
         elsif i = "2" then
            return managerial_and_technical_occ;
         elsif i = "3" then
            return skilled_non_manual;
         elsif i = "4" then
            return skilled_manual;
         elsif i = "5" then
            return partly_skilled_occ;
         elsif i = "6" then
            return unskilled_occ;
         elsif i = "7" then
            return armed_forces;
        end if;
        Put_Line("Convert_Margsc_Type: Unmatched string |" & i & "|" );
        return Margsc_Type'First; -- never actually gets here; for compiler only
    end Convert_Margsc_Type;



    function Pretty_Print( i : Maseg_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when never_had_a_job => return "Never had a job";
             when proxy_respondent => return "Proxy respondent";
             when not_applicable => return "Not Applicable";
             when missing => return "Missing";
             when employers_large => return "Employers,large";
             when personal_service_wrkrs => return "Personal service wrkrs";
             when foreman_manual => return "Foreman manual";
             when skilled_manual_wkrs => return "Skilled manual wkrs";
             when semi_skilled_manual_wkrs => return "Semi-skilled manual wkrs";
             when unskilled_manual_wkrs => return "Unskilled manual wkrs";
             when own_account_wkrs => return "Own account wkrs";
             when farmers_employers_managers => return "Farmers - employers,managers";
             when farmers_own_account => return "Farmers - own account";
             when agricultural_workers => return "Agricultural workers";
             when members_of_armed_forces => return "Members of armed forces";
             when managers_large => return "Managers,large";
             when inadequately_described_non_stated => return "Inadequately described,non stated";
             when employers_small => return "Employers,small";
             when managers_small => return "Managers,small";
             when professional_self_employed => return "Professional Self-employed";
             when professional_employees => return "Professional employees";
             when int_non_manual_workers => return "Int. non-manual,workers";
             when int_non_man_foreman => return "Int. non-man,foreman";
             when junior_non_manual => return "Junior non-manual";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Maseg_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when never_had_a_job => return True;
             when proxy_respondent => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Maseg_Type( i : String ) return Maseg_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-3" then
            return never_had_a_job;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return employers_large;
         elsif i = "10" then
            return personal_service_wrkrs;
         elsif i = "11" then
            return foreman_manual;
         elsif i = "12" then
            return skilled_manual_wkrs;
         elsif i = "13" then
            return semi_skilled_manual_wkrs;
         elsif i = "14" then
            return unskilled_manual_wkrs;
         elsif i = "15" then
            return own_account_wkrs;
         elsif i = "16" then
            return farmers_employers_managers;
         elsif i = "17" then
            return farmers_own_account;
         elsif i = "18" then
            return agricultural_workers;
         elsif i = "19" then
            return members_of_armed_forces;
         elsif i = "2" then
            return managers_large;
         elsif i = "20" then
            return inadequately_described_non_stated;
         elsif i = "3" then
            return employers_small;
         elsif i = "4" then
            return managers_small;
         elsif i = "5" then
            return professional_self_employed;
         elsif i = "6" then
            return professional_employees;
         elsif i = "7" then
            return int_non_manual_workers;
         elsif i = "8" then
            return int_non_man_foreman;
         elsif i = "9" then
            return junior_non_manual;
        end if;
        Put_Line("Convert_Maseg_Type: Unmatched string |" & i & "|" );
        return Maseg_Type'First; -- never actually gets here; for compiler only
    end Convert_Maseg_Type;



    function Pretty_Print( i : Mastat_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when under_16_years => return "Under 16 years";
             when married => return "Married";
             when survive_from_civ_par => return "Survive from civ par";
             when living_as_couple => return "Living as couple";
             when widowed => return "Widowed";
             when divorced => return "Divorced";
             when separated => return "Separated";
             when never_married => return "Never married";
             when civil_partnership => return "Civil partnership";
             when dissolved_civil_partnership => return "Dissolved civil partnership";
             when sep_from_civil_part => return "Sep from civil part";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Mastat_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Mastat_Type( i : String ) return Mastat_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return under_16_years;
         elsif i = "1" then
            return married;
         elsif i = "10" then
            return survive_from_civ_par;
         elsif i = "2" then
            return living_as_couple;
         elsif i = "3" then
            return widowed;
         elsif i = "4" then
            return divorced;
         elsif i = "5" then
            return separated;
         elsif i = "6" then
            return never_married;
         elsif i = "7" then
            return civil_partnership;
         elsif i = "8" then
            return dissolved_civil_partnership;
         elsif i = "9" then
            return sep_from_civil_part;
        end if;
        Put_Line("Convert_Mastat_Type: Unmatched string |" & i & "|" );
        return Mastat_Type'First; -- never actually gets here; for compiler only
    end Convert_Mastat_Type;



    function Pretty_Print( i : Memorig_Type ) return String is
    begin
         case i is
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when original_sample => return "Original sample";
             when ni_resp_moved_to_uk => return "NI resp moved to UK";
             when echp_scpr => return "ECHP - SCPR";
             when echp_ons => return "ECHP - ONS";
             when echp_ni => return "ECHP - NI";
             when wales_new_sample => return "Wales new sample";
             when scotland_new_sample => return "Scotland new sample";
             when ni_new_sample => return "N.I. new sample";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Memorig_Type ) return Boolean is
    begin
         case i is
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Memorig_Type( i : String ) return Memorig_Type is
    begin
         if i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return original_sample;
         elsif i = "17" then
            return ni_resp_moved_to_uk;
         elsif i = "2" then
            return echp_scpr;
         elsif i = "3" then
            return echp_ons;
         elsif i = "4" then
            return echp_ni;
         elsif i = "5" then
            return wales_new_sample;
         elsif i = "6" then
            return scotland_new_sample;
         elsif i = "7" then
            return ni_new_sample;
        end if;
        Put_Line("Convert_Memorig_Type: Unmatched string |" & i & "|" );
        return Memorig_Type'First; -- never actually gets here; for compiler only
    end Convert_Memorig_Type;



    function Pretty_Print( i : Mghave_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when owned_outright => return "Owned outright";
             when buying_mortgage_or_loan => return "Buying mortgage/loan";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Mghave_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Mghave_Type( i : String ) return Mghave_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return owned_outright;
         elsif i = "2" then
            return buying_mortgage_or_loan;
        end if;
        Put_Line("Convert_Mghave_Type: Unmatched string |" & i & "|" );
        return Mghave_Type'First; -- never actually gets here; for compiler only
    end Convert_Mghave_Type;



    function Pretty_Print( i : Mgstat_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when buying_with_mortgage => return "Buying with mortgage";
             when renting => return "Renting";
             when owned_outright => return "Owned outright";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Mgstat_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Mgstat_Type( i : String ) return Mgstat_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return buying_with_mortgage;
         elsif i = "2" then
            return renting;
         elsif i = "3" then
            return owned_outright;
        end if;
        Put_Line("Convert_Mgstat_Type: Unmatched string |" & i & "|" );
        return Mgstat_Type'First; -- never actually gets here; for compiler only
    end Convert_Mgstat_Type;



    function Pretty_Print( i : Mgtot_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when none => return "None";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Mgtot_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when none => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Mgtot_Type( i : String ) return Mgtot_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-3" then
            return none;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
        end if;
        Put_Line("Convert_Mgtot_Type: Unmatched string |" & i & "|" );
        return Mgtot_Type'First; -- never actually gets here; for compiler only
    end Convert_Mgtot_Type;



    function Pretty_Print( i : Mgtype_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when repaymnt_mortge_or_loan => return "Repaymnt mortge/loan";
             when endowment_mortgage => return "Endowment mortgage";
             when pt_repaymnt_or_endowmnt => return "Pt repaymnt/endowmnt";
             when other_mortgage_or_loan => return "Other mortgage/loan";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Mgtype_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Mgtype_Type( i : String ) return Mgtype_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return repaymnt_mortge_or_loan;
         elsif i = "2" then
            return endowment_mortgage;
         elsif i = "3" then
            return pt_repaymnt_or_endowmnt;
         elsif i = "4" then
            return other_mortgage_or_loan;
        end if;
        Put_Line("Convert_Mgtype_Type: Unmatched string |" & i & "|" );
        return Mgtype_Type'First; -- never actually gets here; for compiler only
    end Convert_Mgtype_Type;



    function Pretty_Print( i : Mgxty1_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when home_extension => return "Home extension";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Mgxty1_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Mgxty1_Type( i : String ) return Mgxty1_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return home_extension;
        end if;
        Put_Line("Convert_Mgxty1_Type: Unmatched string |" & i & "|" );
        return Mgxty1_Type'First; -- never actually gets here; for compiler only
    end Convert_Mgxty1_Type;



    function Pretty_Print( i : Mgxty2_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when home_improvements => return "Home improvements";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Mgxty2_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Mgxty2_Type( i : String ) return Mgxty2_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return home_improvements;
         elsif i = "2" then
            return home_improvements;
        end if;
        Put_Line("Convert_Mgxty2_Type: Unmatched string |" & i & "|" );
        return Mgxty2_Type'First; -- never actually gets here; for compiler only
    end Convert_Mgxty2_Type;



    function Pretty_Print( i : Mgxty3_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when car_purchase => return "Car purchase";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Mgxty3_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Mgxty3_Type( i : String ) return Mgxty3_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return car_purchase;
         elsif i = "3" then
            return car_purchase;
        end if;
        Put_Line("Convert_Mgxty3_Type: Unmatched string |" & i & "|" );
        return Mgxty3_Type'First; -- never actually gets here; for compiler only
    end Convert_Mgxty3_Type;



    function Pretty_Print( i : Mgxty4_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when other_consumer_gds => return "Other consumer gds";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Mgxty4_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Mgxty4_Type( i : String ) return Mgxty4_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return other_consumer_gds;
         elsif i = "4" then
            return other_consumer_gds;
        end if;
        Put_Line("Convert_Mgxty4_Type: Unmatched string |" & i & "|" );
        return Mgxty4_Type'First; -- never actually gets here; for compiler only
    end Convert_Mgxty4_Type;



    function Pretty_Print( i : Mgxty5_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when other_specifed_expend => return "Other specifed expend";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Mgxty5_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Mgxty5_Type( i : String ) return Mgxty5_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return other_specifed_expend;
         elsif i = "5" then
            return other_specifed_expend;
        end if;
        Put_Line("Convert_Mgxty5_Type: Unmatched string |" & i & "|" );
        return Mgxty5_Type'First; -- never actually gets here; for compiler only
    end Convert_Mgxty5_Type;



    function Pretty_Print( i : Mgynot_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when paid_mortgage_or_loan => return "Paid mortgage/loan";
             when bought_it_with_cash => return "Bought it with cash";
             when inherited_all_or_share_or_given => return "Inherited all/share  or given";
             when other_means_of_purch => return "Other means of purch";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Mgynot_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Mgynot_Type( i : String ) return Mgynot_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return paid_mortgage_or_loan;
         elsif i = "2" then
            return bought_it_with_cash;
         elsif i = "3" then
            return inherited_all_or_share_or_given;
         elsif i = "4" then
            return other_means_of_purch;
        end if;
        Put_Line("Convert_Mgynot_Type: Unmatched string |" & i & "|" );
        return Mgynot_Type'First; -- never actually gets here; for compiler only
    end Convert_Mgynot_Type;



    function Pretty_Print( i : Mivfho_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when all_eligible_hh_intv => return "All eligible HH intv";
             when interviews_plus_proxies => return "Interviews + proxies";
             when interviews_plus_refusal => return "Interviews + refusal";
             when pxy_at_original_addr => return "Pxy at original addr";
             when phone_interview_only => return "Phone interview only";
             when youth_interview_only => return "Youth Interview only";
             when docs_missing_or_unus => return "Docs missing or unus";
             when address_not_found => return "Address not found";
             when no_hh_member_contact => return "No HH member contact";
             when refus_to_rsrch_cntre => return "Refus to Rsrch Cntre";
             when refusal_to_intviewer => return "Refusal to intviewer";
             when language_problems => return "Language problems";
             when no_intv_age_or_health => return "No intv.: Age/health";
             when moved_prev_wave_add => return "Moved prev wave add";
             when out_scope_institutn => return "Out scope-institut'n";
             when moved_out_of_scope => return "Moved out of scope";
             when whole_hh_deceased => return "Whole HH deceased";
             when no_psms_resident => return "No PSM's resident";
             when adamant_refusal => return "Adamant refusal";
             when l_t_untraced_wdrawn => return "L-t untraced, wdrawn";
             when wdrawn_before_field => return "W'drawn before field";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Mivfho_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Mivfho_Type( i : String ) return Mivfho_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "10" then
            return all_eligible_hh_intv;
         elsif i = "11" then
            return interviews_plus_proxies;
         elsif i = "12" then
            return interviews_plus_refusal;
         elsif i = "15" then
            return pxy_at_original_addr;
         elsif i = "16" then
            return phone_interview_only;
         elsif i = "17" then
            return youth_interview_only;
         elsif i = "39" then
            return docs_missing_or_unus;
         elsif i = "50" then
            return address_not_found;
         elsif i = "51" then
            return no_hh_member_contact;
         elsif i = "60" then
            return refus_to_rsrch_cntre;
         elsif i = "61" then
            return refusal_to_intviewer;
         elsif i = "62" then
            return language_problems;
         elsif i = "63" then
            return no_intv_age_or_health;
         elsif i = "70" then
            return moved_prev_wave_add;
         elsif i = "80" then
            return out_scope_institutn;
         elsif i = "81" then
            return moved_out_of_scope;
         elsif i = "90" then
            return whole_hh_deceased;
         elsif i = "91" then
            return no_psms_resident;
         elsif i = "92" then
            return adamant_refusal;
         elsif i = "93" then
            return l_t_untraced_wdrawn;
         elsif i = "96" then
            return wdrawn_before_field;
        end if;
        Put_Line("Convert_Mivfho_Type: Unmatched string |" & i & "|" );
        return Mivfho_Type'First; -- never actually gets here; for compiler only
    end Convert_Mivfho_Type;



    function Pretty_Print( i : Mivfio_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when full_interview => return "Full interview";
             when refusal => return "Refusal";
             when other_non_intvw => return "Other non-intvw";
             when moved => return "Moved";
             when proxy_interview => return "Proxy interview";
             when child_under_16 => return "Child under 16";
             when youth_interview => return "Youth Interview";
             when youth_refusal => return "Youth: Refusal";
             when youth_oth_non_int => return "Youth: Oth non-int";
             when child_under_11 => return "Child under 11";
             when telephone_intvw => return "Telephone intvw";
             when refusal_or_non_int_hh => return "Refusal/non-int HH";
             when non_int_or_non_int_hh => return "Non-int/non-int HH";
             when moved_or_non_int_hh => return "Moved/non-int HH";
             when child_in_non_int_hh => return "Child in non-int HH";
             when youth_ref_or_no_int_hh => return "Youth: Ref/no-int HH";
             when youth_oth_or_no_int_hh => return "Youth: Oth/no-int HH";
             when child_u_11_no_int_hh => return "Child u 11 no-int HH";
             when refusal_or_non_cont_hh => return "Refusal/non-cont HH";
             when lang_prob_or_nc_hh => return "Lang prob/NC HH";
             when age_infirm_or_nc_hh => return "Age, infirm/NC HH";
             when non_cont_or_nc_hh => return "Non-cont/NC HH";
             when out_of_scope_or_nc_hh => return "Out of scope/NC HH";
             when institutnsd_or_nc_hh => return "Institutnsd/NC HH";
             when untraced_mover => return "Untraced mover";
             when child_ref_or_nc_hh => return "Child ref/NC HH";
             when chd_lang_prob_or_nc_hh => return "Chd lang prob/NC HH";
             when chd_infirm_or_nc_hh => return "Chd infirm/NC HH";
             when chd_non_cont_or_nc_hh => return "Chd non-cont/NC HH";
             when chd_o_o_scope_or_nc_hh => return "Chd o-o-scope/NC HH";
             when chd_instit_or_nc_hh => return "Chd instit/NC HH";
             when chd_untraced_mover => return "Chd untraced mover";
             when no_one_elig_in_hh => return "No one elig in HH";
             when prev_wave_adamant_re => return "Prev wave adamant re";
             when l_t_untraced_wdrawn => return "L-t untraced, wdrawn";
             when wdrawn_before_field => return "W'drawn before field";
             when lost_capi_intvw => return "Lost CAPI intvw";
             when dead => return "Dead";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Mivfio_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Mivfio_Type( i : String ) return Mivfio_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "1" then
            return full_interview;
         elsif i = "10" then
            return refusal;
         elsif i = "11" then
            return other_non_intvw;
         elsif i = "12" then
            return moved;
         elsif i = "2" then
            return proxy_interview;
         elsif i = "20" then
            return child_under_16;
         elsif i = "21" then
            return youth_interview;
         elsif i = "22" then
            return youth_refusal;
         elsif i = "23" then
            return youth_oth_non_int;
         elsif i = "24" then
            return child_under_11;
         elsif i = "3" then
            return telephone_intvw;
         elsif i = "30" then
            return refusal_or_non_int_hh;
         elsif i = "31" then
            return non_int_or_non_int_hh;
         elsif i = "32" then
            return moved_or_non_int_hh;
         elsif i = "40" then
            return child_in_non_int_hh;
         elsif i = "41" then
            return youth_ref_or_no_int_hh;
         elsif i = "42" then
            return youth_oth_or_no_int_hh;
         elsif i = "43" then
            return child_u_11_no_int_hh;
         elsif i = "50" then
            return refusal_or_non_cont_hh;
         elsif i = "51" then
            return lang_prob_or_nc_hh;
         elsif i = "52" then
            return age_infirm_or_nc_hh;
         elsif i = "53" then
            return non_cont_or_nc_hh;
         elsif i = "54" then
            return out_of_scope_or_nc_hh;
         elsif i = "55" then
            return institutnsd_or_nc_hh;
         elsif i = "56" then
            return untraced_mover;
         elsif i = "60" then
            return child_ref_or_nc_hh;
         elsif i = "61" then
            return chd_lang_prob_or_nc_hh;
         elsif i = "62" then
            return chd_infirm_or_nc_hh;
         elsif i = "63" then
            return chd_non_cont_or_nc_hh;
         elsif i = "64" then
            return chd_o_o_scope_or_nc_hh;
         elsif i = "65" then
            return chd_instit_or_nc_hh;
         elsif i = "66" then
            return chd_untraced_mover;
         elsif i = "80" then
            return no_one_elig_in_hh;
         elsif i = "81" then
            return prev_wave_adamant_re;
         elsif i = "82" then
            return l_t_untraced_wdrawn;
         elsif i = "83" then
            return wdrawn_before_field;
         elsif i = "9" then
            return lost_capi_intvw;
         elsif i = "99" then
            return dead;
        end if;
        Put_Line("Convert_Mivfio_Type: Unmatched string |" & i & "|" );
        return Mivfio_Type'First; -- never actually gets here; for compiler only
    end Convert_Mivfio_Type;



    function Pretty_Print( i : Mlchm_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when january => return "January";
             when october => return "October";
             when november => return "November";
             when december => return "December";
             when february => return "February";
             when march => return "March";
             when april => return "April";
             when may => return "May";
             when june => return "June";
             when july => return "July";
             when august => return "August";
             when september => return "September";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Mlchm_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Mlchm_Type( i : String ) return Mlchm_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return january;
         elsif i = "10" then
            return october;
         elsif i = "11" then
            return november;
         elsif i = "12" then
            return december;
         elsif i = "2" then
            return february;
         elsif i = "3" then
            return march;
         elsif i = "4" then
            return april;
         elsif i = "5" then
            return may;
         elsif i = "6" then
            return june;
         elsif i = "7" then
            return july;
         elsif i = "8" then
            return august;
         elsif i = "9" then
            return september;
        end if;
        Put_Line("Convert_Mlchm_Type: Unmatched string |" & i & "|" );
        return Mlchm_Type'First; -- never actually gets here; for compiler only
    end Convert_Mlchm_Type;



    function Pretty_Print( i : Mlchy_Type ) return String is
    begin
         case i is
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when s_1992 => return "1992";
             when s_1993 => return "1993";
             when s_1994 => return "1994";
             when s_1995 => return "1995";
             when s_1996 => return "1996";
             when s_1997 => return "1997";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Mlchy_Type ) return Boolean is
    begin
         case i is
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Mlchy_Type( i : String ) return Mlchy_Type is
    begin
         if i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "92" then
            return s_1992;
         elsif i = "93" then
            return s_1993;
         elsif i = "94" then
            return s_1994;
         elsif i = "95" then
            return s_1995;
         elsif i = "96" then
            return s_1996;
         elsif i = "97" then
            return s_1997;
        end if;
        Put_Line("Convert_Mlchy_Type: Unmatched string |" & i & "|" );
        return Mlchy_Type'First; -- never actually gets here; for compiler only
    end Convert_Mlchy_Type;



    function Pretty_Print( i : Mlchy4_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when s_1992 => return "1992";
             when s_1993 => return "1993";
             when s_1994 => return "1994";
             when s_1995 => return "1995";
             when s_1996 => return "1996";
             when s_1997 => return "1997";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Mlchy4_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Mlchy4_Type( i : String ) return Mlchy4_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "92" then
            return s_1992;
         elsif i = "93" then
            return s_1993;
         elsif i = "94" then
            return s_1994;
         elsif i = "95" then
            return s_1995;
         elsif i = "96" then
            return s_1996;
         elsif i = "97" then
            return s_1997;
        end if;
        Put_Line("Convert_Mlchy4_Type: Unmatched string |" & i & "|" );
        return Mlchy4_Type'First; -- never actually gets here; for compiler only
    end Convert_Mlchy4_Type;



    function Pretty_Print( i : Mlstat_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when married => return "Married";
             when separated => return "Separated";
             when divorced => return "Divorced";
             when widowed => return "Widowed";
             when never_married => return "Never married";
             when in_a_civil_partnership => return "In a civil partnership";
             when have_a_dissolved_civil_partnership => return "Have a dissolved civil partnership";
             when separated_from_a_civil_partnership => return "Separated from a civil partnership";
             when surviving_partner_of_a_civil_partnership => return "Surviving partner of a civil partnership";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Mlstat_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Mlstat_Type( i : String ) return Mlstat_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return married;
         elsif i = "2" then
            return separated;
         elsif i = "3" then
            return divorced;
         elsif i = "4" then
            return widowed;
         elsif i = "5" then
            return never_married;
         elsif i = "6" then
            return in_a_civil_partnership;
         elsif i = "7" then
            return have_a_dissolved_civil_partnership;
         elsif i = "8" then
            return separated_from_a_civil_partnership;
         elsif i = "9" then
            return surviving_partner_of_a_civil_partnership;
        end if;
        Put_Line("Convert_Mlstat_Type: Unmatched string |" & i & "|" );
        return Mlstat_Type'First; -- never actually gets here; for compiler only
    end Convert_Mlstat_Type;



    function Pretty_Print( i : Mobuse_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when yes => return "Yes";
             when no => return "No";
             when dont_drive => return "Don't drive";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Mobuse_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Mobuse_Type( i : String ) return Mobuse_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
         elsif i = "3" then
            return dont_drive;
        end if;
        Put_Line("Convert_Mobuse_Type: Unmatched string |" & i & "|" );
        return Mobuse_Type'First; -- never actually gets here; for compiler only
    end Convert_Mobuse_Type;



    function Pretty_Print( i : Movest_Type ) return String is
    begin
         case i is
             when w_1_non_contact_hh => return "W 1 non-contact HH";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when non_mover => return "Non Mover";
             when mover_status_unknown => return "Mover status unknown";
             when inel_tsm_dk_mover_status => return "Inel TSM - dk mover status";
             when mover_within_gb => return "Mover within GB";
             when died => return "Died";
             when out_of_scope => return "Out of scope";
             when ineligible_tsm => return "Ineligible TSM";
             when ineligible_tsm_non_mover => return "Ineligible TSM non-mover";
             when new_entrant_w2 => return "New Entrant W2";
             when unknown_status => return "Unknown status";
             when dead => return "Dead";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Movest_Type ) return Boolean is
    begin
         case i is
             when w_1_non_contact_hh => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Movest_Type( i : String ) return Movest_Type is
    begin
         if i = "-3" then
            return w_1_non_contact_hh;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return non_mover;
         elsif i = "10" then
            return mover_status_unknown;
         elsif i = "11" then
            return inel_tsm_dk_mover_status;
         elsif i = "2" then
            return mover_within_gb;
         elsif i = "3" then
            return died;
         elsif i = "4" then
            return out_of_scope;
         elsif i = "5" then
            return ineligible_tsm;
         elsif i = "6" then
            return ineligible_tsm_non_mover;
         elsif i = "7" then
            return new_entrant_w2;
         elsif i = "8" then
            return unknown_status;
         elsif i = "9" then
            return dead;
        end if;
        Put_Line("Convert_Movest_Type: Unmatched string |" & i & "|" );
        return Movest_Type'First; -- never actually gets here; for compiler only
    end Convert_Movest_Type;



    function Pretty_Print( i : Movjba_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when yes => return "Yes";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Movjba_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Movjba_Type( i : String ) return Movjba_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return yes;
        end if;
        Put_Line("Convert_Movjba_Type: Unmatched string |" & i & "|" );
        return Movjba_Type'First; -- never actually gets here; for compiler only
    end Convert_Movjba_Type;



    function Pretty_Print( i : Movy1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when no_other_reason => return "No other reason";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when mve_in_wth_partn => return "Mve in wth partn";
             when mve_to_college => return "Mve to college";
             when left_college => return "Left college";
             when job_reasn_self => return "Job reasn, self";
             when job_reasn_othr => return "Job reasn, othr";
             when retirement => return "Retirement";
             when evicted_reposs => return "Evicted, reposs";
             when split_from_partn => return "Split from partn";
             when larger_accom => return "Larger accom";
             when smaller_accom => return "Smaller accom";
             when own_accom => return "Own accom";
             when buy_accom => return "Buy accom";
             when health_reasons => return "Health reasons";
             when no_stairs => return "No stairs";
             when another_type => return "Another type";
             when other_aspects => return "Other aspects";
             when dislkd_prev_acc => return "Dislkd prev acc";
             when mve_in_wth_family => return "Mve in wth family";
             when better_accom => return "Better accom";
             when privacy => return "Privacy";
             when wants_change => return "Wants change";
             when mve_from_family => return "Mve from family";
             when dislkd_isolatn => return "Dislkd isolatn";
             when to_rural_envirn => return "To rural envirn";
             when from_rural_env => return "From rural env";
             when traffic => return "Traffic";
             when area_unsafe => return "Area unsafe";
             when noise => return "Noise";
             when area_unfriendly => return "Area unfriendly";
             when to_specfc_place => return "To specfc place";
             when dislkd_area => return "Dislkd area";
             when mve_in_wth_friend => return "Mve in wth friend";
             when closr_fam_friend => return "Closr fam, friend";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Movy1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when no_other_reason => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Movy1_Type( i : String ) return Movy1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-3" then
            return no_other_reason;
         elsif i = "97" then
            return no_other_reason;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return mve_in_wth_partn;
         elsif i = "10" then
            return mve_to_college;
         elsif i = "11" then
            return left_college;
         elsif i = "12" then
            return job_reasn_self;
         elsif i = "13" then
            return job_reasn_othr;
         elsif i = "14" then
            return retirement;
         elsif i = "15" then
            return evicted_reposs;
         elsif i = "2" then
            return split_from_partn;
         elsif i = "21" then
            return larger_accom;
         elsif i = "22" then
            return smaller_accom;
         elsif i = "23" then
            return own_accom;
         elsif i = "24" then
            return buy_accom;
         elsif i = "25" then
            return health_reasons;
         elsif i = "26" then
            return no_stairs;
         elsif i = "27" then
            return another_type;
         elsif i = "28" then
            return other_aspects;
         elsif i = "29" then
            return dislkd_prev_acc;
         elsif i = "3" then
            return mve_in_wth_family;
         elsif i = "30" then
            return better_accom;
         elsif i = "31" then
            return privacy;
         elsif i = "32" then
            return wants_change;
         elsif i = "4" then
            return mve_from_family;
         elsif i = "41" then
            return dislkd_isolatn;
         elsif i = "42" then
            return to_rural_envirn;
         elsif i = "43" then
            return from_rural_env;
         elsif i = "44" then
            return traffic;
         elsif i = "45" then
            return area_unsafe;
         elsif i = "46" then
            return noise;
         elsif i = "47" then
            return area_unfriendly;
         elsif i = "48" then
            return to_specfc_place;
         elsif i = "49" then
            return dislkd_area;
         elsif i = "5" then
            return mve_in_wth_friend;
         elsif i = "6" then
            return closr_fam_friend;
         elsif i = "96" then
            return other;
        end if;
        Put_Line("Convert_Movy1_Type: Unmatched string |" & i & "|" );
        return Movy1_Type'First; -- never actually gets here; for compiler only
    end Convert_Movy1_Type;



    function Pretty_Print( i : Movy2_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when mve_in_wth_partn => return "Mve in wth partn";
             when mve_to_college => return "Mve to college";
             when left_college => return "Left college";
             when job_reasn_self => return "Job reasn, self";
             when job_reasn_othr => return "Job reasn, othr";
             when retirement => return "Retirement";
             when evicted_reposs => return "Evicted, reposs";
             when split_from_partn => return "Split from partn";
             when larger_accom => return "Larger accom";
             when smaller_accom => return "Smaller accom";
             when own_accom => return "Own accom";
             when buy_accom => return "Buy accom";
             when health_reasons => return "Health reasons";
             when no_stairs => return "No stairs";
             when another_type => return "Another type";
             when other_aspects => return "Other aspects";
             when dislkd_prev_acc => return "Dislkd prev acc";
             when mve_in_wth_family => return "Mve in wth family";
             when better_accom => return "Better accom";
             when privacy => return "Privacy";
             when wants_change => return "Wants change";
             when mve_from_family => return "Mve from family";
             when dislkd_isolatn => return "Dislkd isolatn";
             when to_rural_envirn => return "To rural envirn";
             when from_rural_env => return "From rural env";
             when traffic => return "Traffic";
             when area_unsafe => return "Area unsafe";
             when noise => return "Noise";
             when area_unfriendly => return "Area unfriendly";
             when to_specfc_place => return "To specfc place";
             when dislkd_area => return "Dislkd area";
             when mve_in_wth_friend => return "Mve in wth friend";
             when closr_fam_friend => return "Closr fam, friend";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Movy2_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Movy2_Type( i : String ) return Movy2_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return mve_in_wth_partn;
         elsif i = "10" then
            return mve_to_college;
         elsif i = "11" then
            return left_college;
         elsif i = "12" then
            return job_reasn_self;
         elsif i = "13" then
            return job_reasn_othr;
         elsif i = "14" then
            return retirement;
         elsif i = "15" then
            return evicted_reposs;
         elsif i = "2" then
            return split_from_partn;
         elsif i = "21" then
            return larger_accom;
         elsif i = "22" then
            return smaller_accom;
         elsif i = "23" then
            return own_accom;
         elsif i = "24" then
            return buy_accom;
         elsif i = "25" then
            return health_reasons;
         elsif i = "26" then
            return no_stairs;
         elsif i = "27" then
            return another_type;
         elsif i = "28" then
            return other_aspects;
         elsif i = "29" then
            return dislkd_prev_acc;
         elsif i = "3" then
            return mve_in_wth_family;
         elsif i = "30" then
            return better_accom;
         elsif i = "31" then
            return privacy;
         elsif i = "32" then
            return wants_change;
         elsif i = "4" then
            return mve_from_family;
         elsif i = "41" then
            return dislkd_isolatn;
         elsif i = "42" then
            return to_rural_envirn;
         elsif i = "43" then
            return from_rural_env;
         elsif i = "44" then
            return traffic;
         elsif i = "45" then
            return area_unsafe;
         elsif i = "46" then
            return noise;
         elsif i = "47" then
            return area_unfriendly;
         elsif i = "48" then
            return to_specfc_place;
         elsif i = "49" then
            return dislkd_area;
         elsif i = "5" then
            return mve_in_wth_friend;
         elsif i = "6" then
            return closr_fam_friend;
         elsif i = "96" then
            return other;
        end if;
        Put_Line("Convert_Movy2_Type: Unmatched string |" & i & "|" );
        return Movy2_Type'First; -- never actually gets here; for compiler only
    end Convert_Movy2_Type;



    function Pretty_Print( i : Mpid_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when mother_not_in_hh => return "Mother not in hh";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Mpid_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Mpid_Type( i : String ) return Mpid_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return mother_not_in_hh;
        end if;
        Put_Line("Convert_Mpid_Type: Unmatched string |" & i & "|" );
        return Mpid_Type'First; -- never actually gets here; for compiler only
    end Convert_Mpid_Type;



    function Pretty_Print( i : Mpno_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Mpno_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Mpno_Type( i : String ) return Mpno_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
        end if;
        Put_Line("Convert_Mpno_Type: Unmatched string |" & i & "|" );
        return Mpno_Type'First; -- never actually gets here; for compiler only
    end Convert_Mpno_Type;



    function Pretty_Print( i : Mrjboss_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when never_had_a_job => return "Never had a job";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when yes => return "Yes";
             when no => return "No";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Mrjboss_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when never_had_a_job => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Mrjboss_Type( i : String ) return Mrjboss_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-3" then
            return never_had_a_job;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
        end if;
        Put_Line("Convert_Mrjboss_Type: Unmatched string |" & i & "|" );
        return Mrjboss_Type'First; -- never actually gets here; for compiler only
    end Convert_Mrjboss_Type;



    function Pretty_Print( i : Mrjmngr_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when never_had_a_job => return "Never had a job";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when manager => return "Manager";
             when foreman_or_supervisor => return "Foreman/supervisor";
             when not_mngr_or_supervisor => return "Not mngr/supervisor";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Mrjmngr_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when never_had_a_job => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Mrjmngr_Type( i : String ) return Mrjmngr_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-3" then
            return never_had_a_job;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return manager;
         elsif i = "2" then
            return foreman_or_supervisor;
         elsif i = "3" then
            return not_mngr_or_supervisor;
        end if;
        Put_Line("Convert_Mrjmngr_Type: Unmatched string |" & i & "|" );
        return Mrjmngr_Type'First; -- never actually gets here; for compiler only
    end Convert_Mrjmngr_Type;



    function Pretty_Print( i : Mrjsemp_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when never_had_a_job => return "Never had a job";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when employee => return "Employee";
             when self_employed => return "Self-employed";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Mrjsemp_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when never_had_a_job => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Mrjsemp_Type( i : String ) return Mrjsemp_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-3" then
            return never_had_a_job;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return employee;
         elsif i = "2" then
            return self_employed;
        end if;
        Put_Line("Convert_Mrjsemp_Type: Unmatched string |" & i & "|" );
        return Mrjsemp_Type'First; -- never actually gets here; for compiler only
    end Convert_Mrjsemp_Type;



    function Pretty_Print( i : Mrjsic_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when never_had_a_job => return "Never had a job";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when s_9997_or_above => return "9997 or above";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Mrjsic_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when never_had_a_job => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Mrjsic_Type( i : String ) return Mrjsic_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-3" then
            return never_had_a_job;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "9997" then
            return s_9997_or_above;
        end if;
        Put_Line("Convert_Mrjsic_Type: Unmatched string |" & i & "|" );
        return Mrjsic_Type'First; -- never actually gets here; for compiler only
    end Convert_Mrjsic_Type;



    function Pretty_Print( i : Mrjsic9_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing => return "Missing";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Mrjsic9_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Mrjsic9_Type( i : String ) return Mrjsic9_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing;
        end if;
        Put_Line("Convert_Mrjsic9_Type: Unmatched string |" & i & "|" );
        return Mrjsic9_Type'First; -- never actually gets here; for compiler only
    end Convert_Mrjsic9_Type;



    function Pretty_Print( i : Mrjsize_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when never_had_a_job => return "Never had a job";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when s_1_2 => return "1 - 2";
             when dk_but_under_25 => return "DK but Under 25";
             when dk_but_25_plus => return "DK but 25+";
             when s_3_9 => return "3 - 9";
             when s_10_24 => return "10 - 24";
             when s_25_49 => return "25 - 49";
             when s_50_99 => return "50 - 99";
             when s_100_199 => return "100 - 199";
             when s_200_499 => return "200 - 499";
             when s_500_999 => return "500 - 999";
             when s_1000_or_more => return "1000 or more";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Mrjsize_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when never_had_a_job => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Mrjsize_Type( i : String ) return Mrjsize_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-3" then
            return never_had_a_job;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return s_1_2;
         elsif i = "10" then
            return dk_but_under_25;
         elsif i = "11" then
            return dk_but_25_plus;
         elsif i = "2" then
            return s_3_9;
         elsif i = "3" then
            return s_10_24;
         elsif i = "4" then
            return s_25_49;
         elsif i = "5" then
            return s_50_99;
         elsif i = "6" then
            return s_100_199;
         elsif i = "7" then
            return s_200_499;
         elsif i = "8" then
            return s_500_999;
         elsif i = "9" then
            return s_1000_or_more;
        end if;
        Put_Line("Convert_Mrjsize_Type: Unmatched string |" & i & "|" );
        return Mrjsize_Type'First; -- never actually gets here; for compiler only
    end Convert_Mrjsize_Type;



    function Pretty_Print( i : Mrjsoc_Type ) return String is
    begin
         case i is
             when never_had_a_job => return "Never had a job";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Mrjsoc_Type ) return Boolean is
    begin
         case i is
             when never_had_a_job => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Mrjsoc_Type( i : String ) return Mrjsoc_Type is
    begin
         if i = "-3" then
            return never_had_a_job;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
        end if;
        Put_Line("Convert_Mrjsoc_Type: Unmatched string |" & i & "|" );
        return Mrjsoc_Type'First; -- never actually gets here; for compiler only
    end Convert_Mrjsoc_Type;



    function Pretty_Print( i : Mrmseq_Type ) return String is
    begin
         case i is
             when not_applicable => return "Not applicable";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Mrmseq_Type ) return Boolean is
    begin
         case i is
             when not_applicable => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Mrmseq_Type( i : String ) return Mrmseq_Type is
    begin
         if i = "-8" then
            return not_applicable;
        end if;
        Put_Line("Convert_Mrmseq_Type: Unmatched string |" & i & "|" );
        return Mrmseq_Type'First; -- never actually gets here; for compiler only
    end Convert_Mrmseq_Type;



    function Pretty_Print( i : Mrssch_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when missing_or_wild => return "Missing or wild";
             when ab => return "AB";
             when c1 => return "C1";
             when c2 => return "C2";
             when blank => return "";
             when n_or_a_not_coded => return "N/A not coded";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Mrssch_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Mrssch_Type( i : String ) return Mrssch_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return ab;
         elsif i = "2" then
            return c1;
         elsif i = "3" then
            return c2;
         elsif i = "4" then
            return blank;
         elsif i = "5" then
            return blank;
         elsif i = "6" then
            return n_or_a_not_coded;
        end if;
        Put_Line("Convert_Mrssch_Type: Unmatched string |" & i & "|" );
        return Mrssch_Type'First; -- never actually gets here; for compiler only
    end Convert_Mrssch_Type;



    function Pretty_Print( i : Mstat_Type ) return String is
    begin
         case i is
             when original => return "Original";
             when permanent => return "Permanent";
             when temporary => return "Temporary";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Mstat_Type ) return Boolean is
    begin
         case i is
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Mstat_Type( i : String ) return Mstat_Type is
    begin
         if i = "0" then
            return original;
         elsif i = "1" then
            return permanent;
         elsif i = "2" then
            return temporary;
        end if;
        Put_Line("Convert_Mstat_Type: Unmatched string |" & i & "|" );
        return Mstat_Type'First; -- never actually gets here; for compiler only
    end Convert_Mstat_Type;



    function Pretty_Print( i : Na75pl_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when none => return "None";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Na75pl_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Na75pl_Type( i : String ) return Na75pl_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return none;
        end if;
        Put_Line("Convert_Na75pl_Type: Unmatched string |" & i & "|" );
        return Na75pl_Type'First; -- never actually gets here; for compiler only
    end Convert_Na75pl_Type;



    function Pretty_Print( i : Naidxhh_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when one_person => return "One person";
             when two_people => return "Two people";
             when three_people => return "Three people";
             when four_people => return "Four people";
             when five_people => return "Five people";
             when six_people => return "Six people";
             when seven_plus_people => return "Seven + people";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Naidxhh_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Naidxhh_Type( i : String ) return Naidxhh_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return one_person;
         elsif i = "2" then
            return two_people;
         elsif i = "3" then
            return three_people;
         elsif i = "4" then
            return four_people;
         elsif i = "5" then
            return five_people;
         elsif i = "6" then
            return six_people;
         elsif i = "7" then
            return seven_plus_people;
        end if;
        Put_Line("Convert_Naidxhh_Type: Unmatched string |" & i & "|" );
        return Naidxhh_Type'First; -- never actually gets here; for compiler only
    end Convert_Naidxhh_Type;



    function Pretty_Print( i : Natidh_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when not_mentioned => return "Not mentioned";
             when yes => return "Yes";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Natidh_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Natidh_Type( i : String ) return Natidh_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return yes;
         elsif i = "8" then
            return yes;
        end if;
        Put_Line("Convert_Natidh_Type: Unmatched string |" & i & "|" );
        return Natidh_Type'First; -- never actually gets here; for compiler only
    end Convert_Natidh_Type;



    function Pretty_Print( i : Natidmn_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when british => return "British";
             when english => return "English";
             when european => return "European";
             when irish => return "Irish";
             when northern_irish => return "Northern Irish";
             when scottish => return "Scottish";
             when welsh => return "Welsh";
             when other => return "Other";
             when none_of_these => return "None of these";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Natidmn_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Natidmn_Type( i : String ) return Natidmn_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return british;
         elsif i = "2" then
            return english;
         elsif i = "3" then
            return european;
         elsif i = "4" then
            return irish;
         elsif i = "5" then
            return northern_irish;
         elsif i = "6" then
            return scottish;
         elsif i = "7" then
            return welsh;
         elsif i = "8" then
            return other;
         elsif i = "9" then
            return none_of_these;
        end if;
        Put_Line("Convert_Natidmn_Type: Unmatched string |" & i & "|" );
        return Natidmn_Type'First; -- never actually gets here; for compiler only
    end Convert_Natidmn_Type;



    function Pretty_Print( i : Nbooks_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing => return "Missing";
             when lots_of_books => return "Lots of books";
             when quite_a_few_books => return "Quite a few books";
             when not_many_books => return "Not many books";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Nbooks_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Nbooks_Type( i : String ) return Nbooks_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return lots_of_books;
         elsif i = "2" then
            return quite_a_few_books;
         elsif i = "3" then
            return not_many_books;
        end if;
        Put_Line("Convert_Nbooks_Type: Unmatched string |" & i & "|" );
        return Nbooks_Type'First; -- never actually gets here; for compiler only
    end Convert_Nbooks_Type;



    function Pretty_Print( i : Ncars_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when none => return "None";
             when one => return "One";
             when two => return "Two";
             when s_3_plus => return "3+";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ncars_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ncars_Type( i : String ) return Ncars_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return none;
         elsif i = "1" then
            return one;
         elsif i = "2" then
            return two;
         elsif i = "3" then
            return s_3_plus;
        end if;
        Put_Line("Convert_Ncars_Type: Unmatched string |" & i & "|" );
        return Ncars_Type'First; -- never actually gets here; for compiler only
    end Convert_Ncars_Type;



    function Pretty_Print( i : Ncigs_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when less_than_1_per_day => return "Less than 1 per day";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ncigs_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ncigs_Type( i : String ) return Ncigs_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return less_than_1_per_day;
        end if;
        Put_Line("Convert_Ncigs_Type: Unmatched string |" & i & "|" );
        return Ncigs_Type'First; -- never actually gets here; for compiler only
    end Convert_Ncigs_Type;



    function Pretty_Print( i : Neigh_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when good => return "Good";
             when bad => return "Bad";
             when mixed => return "Mixed";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Neigh_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Neigh_Type( i : String ) return Neigh_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return good;
         elsif i = "2" then
            return bad;
         elsif i = "3" then
            return mixed;
        end if;
        Put_Line("Convert_Neigh_Type: Unmatched string |" & i & "|" );
        return Neigh_Type'First; -- never actually gets here; for compiler only
    end Convert_Neigh_Type;



    function Pretty_Print( i : Neigh1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when people_friendly => return "People friendly";
             when white_area => return "White area";
             when connection_to_area => return "Connection to area";
             when good_public_transport => return "Good public transport";
             when good_shopping_facilities => return "Good shopping facilities";
             when good_entertainment_facilities => return "Good entertainment facilities";
             when good_leisure_facilities => return "Good leisure facilities";
             when has_open_spaces => return "Has open spaces";
             when good_or_convenient_schools => return "Good/convenient schools";
             when good_church => return "Good church";
             when good_medical_facilities => return "Good medical facilities";
             when neighbours_friendly => return "Neighbours friendly";
             when good_local_facilities_nes => return "Good local facilities (n.e.s)";
             when area_feels_safe => return "Area feels safe";
             when no_drugs => return "No drugs";
             when no_violence_or_muggings => return "No violence/muggings";
             when no_car_crime => return "No car crime";
             when no_burglaries => return "No burglaries";
             when no_vandalism => return "No vandalism";
             when no_crime_nes => return "No crime (n.e.s)";
             when quiet_area => return "Quiet area";
             when good_area_for_children => return "Good area for children";
             when family_live_in_area => return "Family live in area";
             when town_centre_accessible => return "Town centre accessible";
             when accessible_to_london => return "Accessible to London";
             when good_transport_links => return "Good transport links";
             when rural_surroundings => return "Rural surroundings";
             when good_for_work => return "Good for work";
             when affluent_area => return "Affluent area";
             when no_problems_with_traffic => return "No problems with traffic";
             when good_parking_facilities => return "Good parking facilities";
             when no_pollution => return "No pollution";
             when no_housing_problems => return "No housing problems";
             when friends_in_area => return "Friends in area";
             when attractive_buildings => return "Attractive buildings";
             when like_current_house => return "Like current house";
             when house_a_good_investment => return "House a good investment";
             when desirable_area => return "Desirable area";
             when area_improved => return "Area improved";
             when like_the_area_nes => return "Like the area (n.e.s)";
             when other_positive_aspect_nes => return "Other positive aspect (n.e.s)";
             when people_unfriendly => return "People unfriendly";
             when neighbours_unfriendly => return "Neighbours unfriendly";
             when no_family_in_area => return "No family in area";
             when provacy => return "Provacy";
             when no_friends_in_area => return "No friends in area";
             when no_privacy => return "No privacy";
             when no_sense_of_community => return "No sense of community";
             when dislike_racial_mix => return "Dislike racial mix";
             when problems_with_young_people => return "Problems with young people";
             when bad_language => return "Bad language";
             when poor_transport_facilities => return "Poor transport facilities";
             when poor_shopping_facilities => return "Poor shopping facilities";
             when poor_entertainment_facilities => return "Poor entertainment facilities";
             when poor_leisure_facilities => return "Poor leisure facilities";
             when good_community => return "Good community";
             when lack_of_open_spaces => return "Lack of open spaces";
             when poor_education_facilities => return "Poor education facilities";
             when no_church_locally => return "No church locally";
             when poor_medical_facilities => return "Poor medical facilities";
             when poor_local_facilities_nes => return "Poor local facilities (n.e.s)";
             when unsafe_area => return "Unsafe area";
             when problems_with_drugs => return "Problems with drugs";
             when problems_with_violence => return "Problems with violence";
             when problems_with_car_crime => return "Problems with car crime";
             when problems_with_burglary => return "Problems with burglary";
             when racial_diversity => return "Racial diversity";
             when problems_with_vandalism => return "Problems with vandalism";
             when crime_rate_high => return "Crime rate high";
             when problems_with_alcohol => return "Problems with alcohol";
             when problems_with_street_gangs => return "Problems with street gangs";
             when police_intrusive => return "Police intrusive";
             when noise_problems => return "Noise problems";
             when poor_area_for_children => return "Poor area for children";
             when poor_employment_prospects => return "Poor employment prospects";
             when area_deprived => return "Area deprived";
             when traffic_problems => return "Traffic problems";
             when kids_well_behaved => return "Kids well behaved";
             when lack_of_parking_facilities => return "Lack of parking facilities";
             when pollution_problems => return "Pollution problems";
             when housing_problems => return "Housing problems";
             when area_over_crowded => return "Area over crowded";
             when area_becoming_worse => return "Area becoming worse";
             when dont_like_area_nes => return "Don't like area (n.e.s)";
             when other_negative_aspect_nes => return "Other negative aspect (n.e.s)";
             when good_and_bad_people => return "Good & bad people";
             when good_and_bad_area => return "Good & bad area";
             when average_area => return "Average area";
             when cosmopolitan => return "Cosmopolitan";
             when other_neutral_nes => return "Other neutral (n.e.s)";
             when nothing_written_in => return "Nothing written in";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Neigh1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Neigh1_Type( i : String ) return Neigh1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return people_friendly;
         elsif i = "10" then
            return white_area;
         elsif i = "11" then
            return connection_to_area;
         elsif i = "12" then
            return good_public_transport;
         elsif i = "13" then
            return good_shopping_facilities;
         elsif i = "14" then
            return good_entertainment_facilities;
         elsif i = "15" then
            return good_leisure_facilities;
         elsif i = "16" then
            return has_open_spaces;
         elsif i = "17" then
            return good_or_convenient_schools;
         elsif i = "18" then
            return good_church;
         elsif i = "19" then
            return good_medical_facilities;
         elsif i = "2" then
            return neighbours_friendly;
         elsif i = "20" then
            return good_local_facilities_nes;
         elsif i = "21" then
            return area_feels_safe;
         elsif i = "22" then
            return no_drugs;
         elsif i = "23" then
            return no_violence_or_muggings;
         elsif i = "24" then
            return no_car_crime;
         elsif i = "25" then
            return no_burglaries;
         elsif i = "26" then
            return no_vandalism;
         elsif i = "27" then
            return no_crime_nes;
         elsif i = "28" then
            return quiet_area;
         elsif i = "29" then
            return good_area_for_children;
         elsif i = "3" then
            return family_live_in_area;
         elsif i = "30" then
            return town_centre_accessible;
         elsif i = "31" then
            return accessible_to_london;
         elsif i = "32" then
            return good_transport_links;
         elsif i = "33" then
            return rural_surroundings;
         elsif i = "34" then
            return good_for_work;
         elsif i = "35" then
            return affluent_area;
         elsif i = "36" then
            return no_problems_with_traffic;
         elsif i = "37" then
            return good_parking_facilities;
         elsif i = "38" then
            return no_pollution;
         elsif i = "39" then
            return no_housing_problems;
         elsif i = "4" then
            return friends_in_area;
         elsif i = "40" then
            return attractive_buildings;
         elsif i = "41" then
            return like_current_house;
         elsif i = "42" then
            return house_a_good_investment;
         elsif i = "43" then
            return desirable_area;
         elsif i = "44" then
            return area_improved;
         elsif i = "45" then
            return like_the_area_nes;
         elsif i = "46" then
            return other_positive_aspect_nes;
         elsif i = "47" then
            return people_unfriendly;
         elsif i = "48" then
            return neighbours_unfriendly;
         elsif i = "49" then
            return no_family_in_area;
         elsif i = "5" then
            return provacy;
         elsif i = "50" then
            return no_friends_in_area;
         elsif i = "51" then
            return no_privacy;
         elsif i = "52" then
            return no_sense_of_community;
         elsif i = "53" then
            return dislike_racial_mix;
         elsif i = "54" then
            return problems_with_young_people;
         elsif i = "55" then
            return bad_language;
         elsif i = "56" then
            return poor_transport_facilities;
         elsif i = "57" then
            return poor_shopping_facilities;
         elsif i = "58" then
            return poor_entertainment_facilities;
         elsif i = "59" then
            return poor_leisure_facilities;
         elsif i = "6" then
            return good_community;
         elsif i = "60" then
            return lack_of_open_spaces;
         elsif i = "61" then
            return poor_education_facilities;
         elsif i = "62" then
            return no_church_locally;
         elsif i = "63" then
            return poor_medical_facilities;
         elsif i = "64" then
            return poor_local_facilities_nes;
         elsif i = "65" then
            return unsafe_area;
         elsif i = "66" then
            return problems_with_drugs;
         elsif i = "67" then
            return problems_with_violence;
         elsif i = "68" then
            return problems_with_car_crime;
         elsif i = "69" then
            return problems_with_burglary;
         elsif i = "7" then
            return racial_diversity;
         elsif i = "70" then
            return problems_with_vandalism;
         elsif i = "71" then
            return crime_rate_high;
         elsif i = "72" then
            return problems_with_alcohol;
         elsif i = "73" then
            return problems_with_street_gangs;
         elsif i = "74" then
            return police_intrusive;
         elsif i = "75" then
            return noise_problems;
         elsif i = "76" then
            return poor_area_for_children;
         elsif i = "77" then
            return poor_employment_prospects;
         elsif i = "78" then
            return area_deprived;
         elsif i = "79" then
            return traffic_problems;
         elsif i = "8" then
            return kids_well_behaved;
         elsif i = "80" then
            return lack_of_parking_facilities;
         elsif i = "81" then
            return pollution_problems;
         elsif i = "82" then
            return housing_problems;
         elsif i = "83" then
            return area_over_crowded;
         elsif i = "84" then
            return area_becoming_worse;
         elsif i = "85" then
            return dont_like_area_nes;
         elsif i = "86" then
            return other_negative_aspect_nes;
         elsif i = "87" then
            return good_and_bad_people;
         elsif i = "88" then
            return good_and_bad_area;
         elsif i = "89" then
            return average_area;
         elsif i = "9" then
            return cosmopolitan;
         elsif i = "90" then
            return other_neutral_nes;
         elsif i = "95" then
            return nothing_written_in;
         elsif i = "96" then
            return other;
        end if;
        Put_Line("Convert_Neigh1_Type: Unmatched string |" & i & "|" );
        return Neigh1_Type'First; -- never actually gets here; for compiler only
    end Convert_Neigh1_Type;



    function Pretty_Print( i : Neigh2_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when people_friendly => return "People friendly";
             when white_area => return "White area";
             when connection_to_area => return "Connection to area";
             when good_public_transport => return "Good public transport";
             when good_shopping_facilities => return "Good shopping facilities";
             when good_entertainment_facilities => return "Good entertainment facilities";
             when good_leisure_facilities => return "Good leisure facilities";
             when has_open_spaces => return "Has open spaces";
             when good_or_convenient_schools => return "Good/convenient schools";
             when good_church => return "Good church";
             when good_medical_facilities => return "Good medical facilities";
             when neighbours_friendly => return "Neighbours friendly";
             when good_local_facilities_nes => return "Good local facilities (n.e.s)";
             when area_feels_safe => return "Area feels safe";
             when no_drugs => return "No drugs";
             when no_violence_or_muggings => return "No violence/muggings";
             when no_car_crime => return "No car crime";
             when no_burglaries => return "No burglaries";
             when no_vandalism => return "No vandalism";
             when no_crime_nes => return "No crime (n.e.s)";
             when quiet_area => return "Quiet area";
             when good_area_for_children => return "Good area for children";
             when family_live_in_area => return "Family live in area";
             when town_centre_accessible => return "Town centre accessible";
             when accessible_to_london => return "Accessible to London";
             when good_transport_links => return "Good transport links";
             when rural_surroundings => return "Rural surroundings";
             when good_for_work => return "Good for work";
             when affluent_area => return "Affluent area";
             when no_problems_with_traffic => return "No problems with traffic";
             when good_parking_facilities => return "Good parking facilities";
             when no_pollution => return "No pollution";
             when no_housing_problems => return "No housing problems";
             when friends_in_area => return "Friends in area";
             when attractive_buildings => return "Attractive buildings";
             when like_current_house => return "Like current house";
             when house_a_good_investment => return "House a good investment";
             when desirable_area => return "Desirable area";
             when area_improved => return "Area improved";
             when like_the_area_nes => return "Like the area (n.e.s)";
             when other_positive_aspect_nes => return "Other positive aspect (n.e.s)";
             when people_unfriendly => return "People unfriendly";
             when neighbours_unfriendly => return "Neighbours unfriendly";
             when no_family_in_area => return "No family in area";
             when provacy => return "Provacy";
             when no_friends_in_area => return "No friends in area";
             when no_privacy => return "No privacy";
             when no_sense_of_community => return "No sense of community";
             when dislike_racial_mix => return "Dislike racial mix";
             when problems_with_young_people => return "Problems with young people";
             when bad_language => return "Bad language";
             when poor_transport_facilities => return "Poor transport facilities";
             when poor_shopping_facilities => return "Poor shopping facilities";
             when poor_entertainment_facilities => return "Poor entertainment facilities";
             when poor_leisure_facilities => return "Poor leisure facilities";
             when good_community => return "Good community";
             when lack_of_open_spaces => return "Lack of open spaces";
             when poor_education_facilities => return "Poor education facilities";
             when no_church_locally => return "No church locally";
             when poor_medical_facilities => return "Poor medical facilities";
             when poor_local_facilities_nes => return "Poor local facilities (n.e.s)";
             when unsafe_area => return "Unsafe area";
             when problems_with_drugs => return "Problems with drugs";
             when problems_with_violence => return "Problems with violence";
             when problems_with_car_crime => return "Problems with car crime";
             when problems_with_burglary => return "Problems with burglary";
             when racial_diversity => return "Racial diversity";
             when problems_with_vandalism => return "Problems with vandalism";
             when crime_rate_high => return "Crime rate high";
             when problems_with_alcohol => return "Problems with alcohol";
             when problems_with_street_gangs => return "Problems with street gangs";
             when police_intrusive => return "Police intrusive";
             when noise_problems => return "Noise problems";
             when poor_area_for_children => return "Poor area for children";
             when poor_employment_prospects => return "Poor employment prospects";
             when area_deprived => return "Area deprived";
             when traffic_problems => return "Traffic problems";
             when kids_well_behaved => return "Kids well behaved";
             when lack_of_parking_facilities => return "Lack of parking facilities";
             when pollution_problems => return "Pollution problems";
             when housing_problems => return "Housing problems";
             when area_over_crowded => return "Area over crowded";
             when area_becoming_worse => return "Area becoming worse";
             when dont_like_area_nes => return "Don't like area (n.e.s)";
             when other_negative_aspect_nes => return "Other negative aspect (n.e.s)";
             when good_and_bad_people => return "Good & bad people";
             when good_and_bad_area => return "Good & bad area";
             when average_area => return "Average area";
             when cosmopolitan => return "Cosmopolitan";
             when other_neutral_nes => return "Other neutral (n.e.s)";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Neigh2_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Neigh2_Type( i : String ) return Neigh2_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return people_friendly;
         elsif i = "10" then
            return white_area;
         elsif i = "11" then
            return connection_to_area;
         elsif i = "12" then
            return good_public_transport;
         elsif i = "13" then
            return good_shopping_facilities;
         elsif i = "14" then
            return good_entertainment_facilities;
         elsif i = "15" then
            return good_leisure_facilities;
         elsif i = "16" then
            return has_open_spaces;
         elsif i = "17" then
            return good_or_convenient_schools;
         elsif i = "18" then
            return good_church;
         elsif i = "19" then
            return good_medical_facilities;
         elsif i = "2" then
            return neighbours_friendly;
         elsif i = "20" then
            return good_local_facilities_nes;
         elsif i = "21" then
            return area_feels_safe;
         elsif i = "22" then
            return no_drugs;
         elsif i = "23" then
            return no_violence_or_muggings;
         elsif i = "24" then
            return no_car_crime;
         elsif i = "25" then
            return no_burglaries;
         elsif i = "26" then
            return no_vandalism;
         elsif i = "27" then
            return no_crime_nes;
         elsif i = "28" then
            return quiet_area;
         elsif i = "29" then
            return good_area_for_children;
         elsif i = "3" then
            return family_live_in_area;
         elsif i = "30" then
            return town_centre_accessible;
         elsif i = "31" then
            return accessible_to_london;
         elsif i = "32" then
            return good_transport_links;
         elsif i = "33" then
            return rural_surroundings;
         elsif i = "34" then
            return good_for_work;
         elsif i = "35" then
            return affluent_area;
         elsif i = "36" then
            return no_problems_with_traffic;
         elsif i = "37" then
            return good_parking_facilities;
         elsif i = "38" then
            return no_pollution;
         elsif i = "39" then
            return no_housing_problems;
         elsif i = "4" then
            return friends_in_area;
         elsif i = "40" then
            return attractive_buildings;
         elsif i = "41" then
            return like_current_house;
         elsif i = "42" then
            return house_a_good_investment;
         elsif i = "43" then
            return desirable_area;
         elsif i = "44" then
            return area_improved;
         elsif i = "45" then
            return like_the_area_nes;
         elsif i = "46" then
            return other_positive_aspect_nes;
         elsif i = "47" then
            return people_unfriendly;
         elsif i = "48" then
            return neighbours_unfriendly;
         elsif i = "49" then
            return no_family_in_area;
         elsif i = "5" then
            return provacy;
         elsif i = "50" then
            return no_friends_in_area;
         elsif i = "51" then
            return no_privacy;
         elsif i = "52" then
            return no_sense_of_community;
         elsif i = "53" then
            return dislike_racial_mix;
         elsif i = "54" then
            return problems_with_young_people;
         elsif i = "55" then
            return bad_language;
         elsif i = "56" then
            return poor_transport_facilities;
         elsif i = "57" then
            return poor_shopping_facilities;
         elsif i = "58" then
            return poor_entertainment_facilities;
         elsif i = "59" then
            return poor_leisure_facilities;
         elsif i = "6" then
            return good_community;
         elsif i = "60" then
            return lack_of_open_spaces;
         elsif i = "61" then
            return poor_education_facilities;
         elsif i = "62" then
            return no_church_locally;
         elsif i = "63" then
            return poor_medical_facilities;
         elsif i = "64" then
            return poor_local_facilities_nes;
         elsif i = "65" then
            return unsafe_area;
         elsif i = "66" then
            return problems_with_drugs;
         elsif i = "67" then
            return problems_with_violence;
         elsif i = "68" then
            return problems_with_car_crime;
         elsif i = "69" then
            return problems_with_burglary;
         elsif i = "7" then
            return racial_diversity;
         elsif i = "70" then
            return problems_with_vandalism;
         elsif i = "71" then
            return crime_rate_high;
         elsif i = "72" then
            return problems_with_alcohol;
         elsif i = "73" then
            return problems_with_street_gangs;
         elsif i = "74" then
            return police_intrusive;
         elsif i = "75" then
            return noise_problems;
         elsif i = "76" then
            return poor_area_for_children;
         elsif i = "77" then
            return poor_employment_prospects;
         elsif i = "78" then
            return area_deprived;
         elsif i = "79" then
            return traffic_problems;
         elsif i = "8" then
            return kids_well_behaved;
         elsif i = "80" then
            return lack_of_parking_facilities;
         elsif i = "81" then
            return pollution_problems;
         elsif i = "82" then
            return housing_problems;
         elsif i = "83" then
            return area_over_crowded;
         elsif i = "84" then
            return area_becoming_worse;
         elsif i = "85" then
            return dont_like_area_nes;
         elsif i = "86" then
            return other_negative_aspect_nes;
         elsif i = "87" then
            return good_and_bad_people;
         elsif i = "88" then
            return good_and_bad_area;
         elsif i = "89" then
            return average_area;
         elsif i = "9" then
            return cosmopolitan;
         elsif i = "90" then
            return other_neutral_nes;
         elsif i = "96" then
            return other;
        end if;
        Put_Line("Convert_Neigh2_Type: Unmatched string |" & i & "|" );
        return Neigh2_Type'First; -- never actually gets here; for compiler only
    end Convert_Neigh2_Type;



    function Pretty_Print( i : Neigh5_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_mentioned => return "Not mentioned";
             when people_friendly => return "People friendly";
             when white_area => return "White area";
             when connection_to_area => return "Connection to area";
             when good_public_transport => return "Good public transport";
             when good_shopping_facilities => return "Good shopping facilities";
             when good_entertainment_facilities => return "Good entertainment facilities";
             when good_leisure_facilities => return "Good leisure facilities";
             when has_open_spaces => return "Has open spaces";
             when good_or_convenient_schools => return "Good/convenient schools";
             when good_church => return "Good church";
             when good_medical_facilities => return "Good medical facilities";
             when neighbours_friendly => return "Neighbours friendly";
             when good_local_facilities_nes => return "Good local facilities (n.e.s)";
             when area_feels_safe => return "Area feels safe";
             when no_drugs => return "No drugs";
             when no_violence_or_muggings => return "No violence/muggings";
             when no_car_crime => return "No car crime";
             when no_burglaries => return "No burglaries";
             when no_vandalism => return "No vandalism";
             when no_crime_nes => return "No crime (n.e.s)";
             when quiet_area => return "Quiet area";
             when good_area_for_children => return "Good area for children";
             when family_live_in_area => return "Family live in area";
             when town_centre_accessible => return "Town centre accessible";
             when accessible_to_london => return "Accessible to London";
             when good_transport_links => return "Good transport links";
             when rural_surroundings => return "Rural surroundings";
             when good_for_work => return "Good for work";
             when affluent_area => return "Affluent area";
             when no_problems_with_traffic => return "No problems with traffic";
             when good_parking_facilities => return "Good parking facilities";
             when no_pollution => return "No pollution";
             when no_housing_problems => return "No housing problems";
             when friends_in_area => return "Friends in area";
             when attractive_buildings => return "Attractive buildings";
             when like_current_house => return "Like current house";
             when house_a_good_investment => return "House a good investment";
             when desirable_area => return "Desirable area";
             when area_improved => return "Area improved";
             when like_the_area_nes => return "Like the area (n.e.s)";
             when other_positive_aspect_nes => return "Other positive aspect (n.e.s)";
             when people_unfriendly => return "People unfriendly";
             when neighbours_unfriendly => return "Neighbours unfriendly";
             when no_family_in_area => return "No family in area";
             when provacy => return "Provacy";
             when no_friends_in_area => return "No friends in area";
             when no_privacy => return "No privacy";
             when no_sense_of_community => return "No sense of community";
             when dislike_racial_mix => return "Dislike racial mix";
             when problems_with_young_people => return "Problems with young people";
             when bad_language => return "Bad language";
             when poor_transport_facilities => return "Poor transport facilities";
             when poor_shopping_facilities => return "Poor shopping facilities";
             when poor_entertainment_facilities => return "Poor entertainment facilities";
             when poor_leisure_facilities => return "Poor leisure facilities";
             when good_community => return "Good community";
             when lack_of_open_spaces => return "Lack of open spaces";
             when poor_education_facilities => return "Poor education facilities";
             when no_church_locally => return "No church locally";
             when poor_medical_facilities => return "Poor medical facilities";
             when poor_local_facilities_nes => return "Poor local facilities (n.e.s)";
             when unsafe_area => return "Unsafe area";
             when problems_with_drugs => return "Problems with drugs";
             when problems_with_violence => return "Problems with violence";
             when problems_with_car_crime => return "Problems with car crime";
             when problems_with_burglary => return "Problems with burglary";
             when racial_diversity => return "Racial diversity";
             when problems_with_vandalism => return "Problems with vandalism";
             when crime_rate_high => return "Crime rate high";
             when problems_with_alcohol => return "Problems with alcohol";
             when problems_with_street_gangs => return "Problems with street gangs";
             when police_intrusive => return "Police intrusive";
             when noise_problems => return "Noise problems";
             when poor_area_for_children => return "Poor area for children";
             when poor_employment_prospects => return "Poor employment prospects";
             when area_deprived => return "Area deprived";
             when traffic_problems => return "Traffic problems";
             when kids_well_behaved => return "Kids well behaved";
             when lack_of_parking_facilities => return "Lack of parking facilities";
             when pollution_problems => return "Pollution problems";
             when housing_problems => return "Housing problems";
             when area_over_crowded => return "Area over crowded";
             when area_becoming_worse => return "Area becoming worse";
             when dont_like_area_nes => return "Don't like area (n.e.s)";
             when other_negative_aspect_nes => return "Other negative aspect (n.e.s)";
             when good_and_bad_people => return "Good & bad people";
             when good_and_bad_area => return "Good & bad area";
             when average_area => return "Average area";
             when cosmopolitan => return "Cosmopolitan";
             when other_neutral_nes => return "Other neutral (n.e.s)";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Neigh5_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Neigh5_Type( i : String ) return Neigh5_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return people_friendly;
         elsif i = "10" then
            return white_area;
         elsif i = "11" then
            return connection_to_area;
         elsif i = "12" then
            return good_public_transport;
         elsif i = "13" then
            return good_shopping_facilities;
         elsif i = "14" then
            return good_entertainment_facilities;
         elsif i = "15" then
            return good_leisure_facilities;
         elsif i = "16" then
            return has_open_spaces;
         elsif i = "17" then
            return good_or_convenient_schools;
         elsif i = "18" then
            return good_church;
         elsif i = "19" then
            return good_medical_facilities;
         elsif i = "2" then
            return neighbours_friendly;
         elsif i = "20" then
            return good_local_facilities_nes;
         elsif i = "21" then
            return area_feels_safe;
         elsif i = "22" then
            return no_drugs;
         elsif i = "23" then
            return no_violence_or_muggings;
         elsif i = "24" then
            return no_car_crime;
         elsif i = "25" then
            return no_burglaries;
         elsif i = "26" then
            return no_vandalism;
         elsif i = "27" then
            return no_crime_nes;
         elsif i = "28" then
            return quiet_area;
         elsif i = "29" then
            return good_area_for_children;
         elsif i = "3" then
            return family_live_in_area;
         elsif i = "30" then
            return town_centre_accessible;
         elsif i = "31" then
            return accessible_to_london;
         elsif i = "32" then
            return good_transport_links;
         elsif i = "33" then
            return rural_surroundings;
         elsif i = "34" then
            return good_for_work;
         elsif i = "35" then
            return affluent_area;
         elsif i = "36" then
            return no_problems_with_traffic;
         elsif i = "37" then
            return good_parking_facilities;
         elsif i = "38" then
            return no_pollution;
         elsif i = "39" then
            return no_housing_problems;
         elsif i = "4" then
            return friends_in_area;
         elsif i = "40" then
            return attractive_buildings;
         elsif i = "41" then
            return like_current_house;
         elsif i = "42" then
            return house_a_good_investment;
         elsif i = "43" then
            return desirable_area;
         elsif i = "44" then
            return area_improved;
         elsif i = "45" then
            return like_the_area_nes;
         elsif i = "46" then
            return other_positive_aspect_nes;
         elsif i = "47" then
            return people_unfriendly;
         elsif i = "48" then
            return neighbours_unfriendly;
         elsif i = "49" then
            return no_family_in_area;
         elsif i = "5" then
            return provacy;
         elsif i = "50" then
            return no_friends_in_area;
         elsif i = "51" then
            return no_privacy;
         elsif i = "52" then
            return no_sense_of_community;
         elsif i = "53" then
            return dislike_racial_mix;
         elsif i = "54" then
            return problems_with_young_people;
         elsif i = "55" then
            return bad_language;
         elsif i = "56" then
            return poor_transport_facilities;
         elsif i = "57" then
            return poor_shopping_facilities;
         elsif i = "58" then
            return poor_entertainment_facilities;
         elsif i = "59" then
            return poor_leisure_facilities;
         elsif i = "6" then
            return good_community;
         elsif i = "60" then
            return lack_of_open_spaces;
         elsif i = "61" then
            return poor_education_facilities;
         elsif i = "62" then
            return no_church_locally;
         elsif i = "63" then
            return poor_medical_facilities;
         elsif i = "64" then
            return poor_local_facilities_nes;
         elsif i = "65" then
            return unsafe_area;
         elsif i = "66" then
            return problems_with_drugs;
         elsif i = "67" then
            return problems_with_violence;
         elsif i = "68" then
            return problems_with_car_crime;
         elsif i = "69" then
            return problems_with_burglary;
         elsif i = "7" then
            return racial_diversity;
         elsif i = "70" then
            return problems_with_vandalism;
         elsif i = "71" then
            return crime_rate_high;
         elsif i = "72" then
            return problems_with_alcohol;
         elsif i = "73" then
            return problems_with_street_gangs;
         elsif i = "74" then
            return police_intrusive;
         elsif i = "75" then
            return noise_problems;
         elsif i = "76" then
            return poor_area_for_children;
         elsif i = "77" then
            return poor_employment_prospects;
         elsif i = "78" then
            return area_deprived;
         elsif i = "79" then
            return traffic_problems;
         elsif i = "8" then
            return kids_well_behaved;
         elsif i = "80" then
            return lack_of_parking_facilities;
         elsif i = "81" then
            return pollution_problems;
         elsif i = "82" then
            return housing_problems;
         elsif i = "83" then
            return area_over_crowded;
         elsif i = "84" then
            return area_becoming_worse;
         elsif i = "85" then
            return dont_like_area_nes;
         elsif i = "86" then
            return other_negative_aspect_nes;
         elsif i = "87" then
            return good_and_bad_people;
         elsif i = "88" then
            return good_and_bad_area;
         elsif i = "89" then
            return average_area;
         elsif i = "9" then
            return cosmopolitan;
         elsif i = "90" then
            return other_neutral_nes;
         elsif i = "96" then
            return other;
        end if;
        Put_Line("Convert_Neigh5_Type: Unmatched string |" & i & "|" );
        return Neigh5_Type'First; -- never actually gets here; for compiler only
    end Convert_Neigh5_Type;



    function Pretty_Print( i : Nelocly_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing => return "Missing";
             when all_or_both_same_hh_ly => return "All/both same HH LY";
             when liv_in_10_sep_hh_ly => return "Liv in 10 sep HH LY";
             when liv_in_11_sep_hh_ly => return "Liv in 11 sep HH LY";
             when liv_in_12_sep_hh_ly => return "Liv in 12 sep HH LY";
             when liv_in_13_sep_hh_ly => return "Liv in 13 sep HH LY";
             when liv_in_14_sep_hh_ly => return "Liv in 14 sep HH LY";
             when live_in_2_sep_hh_ly => return "Live in 2 sep HH LY";
             when live_in_3_sep_hh_ly => return "Live in 3 sep HH LY";
             when live_in_4_sep_hh_ly => return "Live in 4 sep HH LY";
             when live_in_5_sep_hh_ly => return "Live in 5 sep HH LY";
             when live_in_6_sep_hh_ly => return "Live in 6 sep HH LY";
             when live_in_7_sep_hh_ly => return "Live in 7 sep HH LY";
             when live_in_8_sep_hh_ly => return "Live in 8 sep HH LY";
             when live_in_9_sep_hh_ly => return "Live in 9 sep HH LY";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Nelocly_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Nelocly_Type( i : String ) return Nelocly_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return all_or_both_same_hh_ly;
         elsif i = "10" then
            return liv_in_10_sep_hh_ly;
         elsif i = "11" then
            return liv_in_11_sep_hh_ly;
         elsif i = "12" then
            return liv_in_12_sep_hh_ly;
         elsif i = "13" then
            return liv_in_13_sep_hh_ly;
         elsif i = "14" then
            return liv_in_14_sep_hh_ly;
         elsif i = "2" then
            return live_in_2_sep_hh_ly;
         elsif i = "3" then
            return live_in_3_sep_hh_ly;
         elsif i = "4" then
            return live_in_4_sep_hh_ly;
         elsif i = "5" then
            return live_in_5_sep_hh_ly;
         elsif i = "6" then
            return live_in_6_sep_hh_ly;
         elsif i = "7" then
            return live_in_7_sep_hh_ly;
         elsif i = "8" then
            return live_in_8_sep_hh_ly;
         elsif i = "9" then
            return live_in_9_sep_hh_ly;
        end if;
        Put_Line("Convert_Nelocly_Type: Unmatched string |" & i & "|" );
        return Nelocly_Type'First; -- never actually gets here; for compiler only
    end Convert_Nelocly_Type;



    function Pretty_Print( i : Nelyr_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when original_member => return "Original member";
             when yes => return "Yes";
             when no => return "No";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Nelyr_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Nelyr_Type( i : String ) return Nelyr_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return original_member;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
        end if;
        Put_Line("Convert_Nelyr_Type: Unmatched string |" & i & "|" );
        return Nelyr_Type'First; -- never actually gets here; for compiler only
    end Convert_Nelyr_Type;



    function Pretty_Print( i : Nemnjn_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when original_member => return "Original member";
             when january => return "January";
             when october => return "October";
             when november => return "November";
             when december => return "December";
             when february => return "February";
             when march => return "March";
             when april => return "April";
             when may => return "May";
             when june => return "June";
             when july => return "July";
             when august => return "August";
             when september => return "September";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Nemnjn_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Nemnjn_Type( i : String ) return Nemnjn_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return original_member;
         elsif i = "1" then
            return january;
         elsif i = "10" then
            return october;
         elsif i = "11" then
            return november;
         elsif i = "12" then
            return december;
         elsif i = "2" then
            return february;
         elsif i = "3" then
            return march;
         elsif i = "4" then
            return april;
         elsif i = "5" then
            return may;
         elsif i = "6" then
            return june;
         elsif i = "7" then
            return july;
         elsif i = "8" then
            return august;
         elsif i = "9" then
            return september;
        end if;
        Put_Line("Convert_Nemnjn_Type: Unmatched string |" & i & "|" );
        return Nemnjn_Type'First; -- never actually gets here; for compiler only
    end Convert_Nemnjn_Type;



    function Pretty_Print( i : Nemst_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when other => return "Other";
             when unemployed => return "Unemployed";
             when retired => return "Retired";
             when maternity_leave => return "Maternity leave";
             when family_care => return "Family care";
             when ft_studt_school => return "FT studt, school";
             when lt_sick_disabld => return "LT sick, disabld";
             when gvt_trng_scheme => return "Gvt trng scheme";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Nemst_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Nemst_Type( i : String ) return Nemst_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "10" then
            return other;
         elsif i = "3" then
            return unemployed;
         elsif i = "4" then
            return retired;
         elsif i = "5" then
            return maternity_leave;
         elsif i = "6" then
            return family_care;
         elsif i = "7" then
            return ft_studt_school;
         elsif i = "8" then
            return lt_sick_disabld;
         elsif i = "9" then
            return gvt_trng_scheme;
        end if;
        Put_Line("Convert_Nemst_Type: Unmatched string |" & i & "|" );
        return Nemst_Type'First; -- never actually gets here; for compiler only
    end Convert_Nemst_Type;



    function Pretty_Print( i : Net1ag_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when age_given => return "Age given";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Net1ag_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Net1ag_Type( i : String ) return Net1ag_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return age_given;
        end if;
        Put_Line("Convert_Net1ag_Type: Unmatched string |" & i & "|" );
        return Net1ag_Type'First; -- never actually gets here; for compiler only
    end Convert_Net1ag_Type;



    function Pretty_Print( i : Net1et_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing => return "Missing";
             when white => return "White";
             when asian => return "Asian";
             when black_african => return "Black African";
             when black_caribbean => return "Black Caribbean";
             when chinese => return "Chinese";
             when mixed => return "Mixed";
             when any_other => return "Any other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Net1et_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Net1et_Type( i : String ) return Net1et_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return white;
         elsif i = "2" then
            return asian;
         elsif i = "3" then
            return black_african;
         elsif i = "4" then
            return black_caribbean;
         elsif i = "5" then
            return chinese;
         elsif i = "6" then
            return mixed;
         elsif i = "7" then
            return any_other;
        end if;
        Put_Line("Convert_Net1et_Type: Unmatched string |" & i & "|" );
        return Net1et_Type'First; -- never actually gets here; for compiler only
    end Convert_Net1et_Type;



    function Pretty_Print( i : Net1jb_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when ft_employed => return "FT employed";
             when pt_employed => return "PT employed";
             when unemployed => return "Unemployed";
             when ft_educatn => return "FT educatn";
             when ft_housewrk => return "FT housewrk";
             when fully_retird => return "Fully retird";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Net1jb_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Net1jb_Type( i : String ) return Net1jb_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return ft_employed;
         elsif i = "2" then
            return pt_employed;
         elsif i = "3" then
            return unemployed;
         elsif i = "4" then
            return ft_educatn;
         elsif i = "5" then
            return ft_housewrk;
         elsif i = "6" then
            return fully_retird;
        end if;
        Put_Line("Convert_Net1jb_Type: Unmatched string |" & i & "|" );
        return Net1jb_Type'First; -- never actually gets here; for compiler only
    end Convert_Net1jb_Type;



    function Pretty_Print( i : Net1kn_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when less_than_1_yr => return "Less than 1 yr";
             when s_1_2_yrs => return "1-2 yrs";
             when s_3_10_yrs => return "3-10 yrs";
             when s_10_yrs_or_more => return "10 yrs or more";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Net1kn_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Net1kn_Type( i : String ) return Net1kn_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return less_than_1_yr;
         elsif i = "2" then
            return s_1_2_yrs;
         elsif i = "3" then
            return s_3_10_yrs;
         elsif i = "4" then
            return s_10_yrs_or_more;
        end if;
        Put_Line("Convert_Net1kn_Type: Unmatched string |" & i & "|" );
        return Net1kn_Type'First; -- never actually gets here; for compiler only
    end Convert_Net1kn_Type;



    function Pretty_Print( i : Net1lv_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when less_than_1_mile => return "Less than 1 mile";
             when less_than_5_miles => return "Less than 5 miles";
             when s_5_50_miles => return "5-50 miles";
             when over_50_miles => return "Over 50 miles";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Net1lv_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Net1lv_Type( i : String ) return Net1lv_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return less_than_1_mile;
         elsif i = "2" then
            return less_than_5_miles;
         elsif i = "3" then
            return s_5_50_miles;
         elsif i = "4" then
            return over_50_miles;
        end if;
        Put_Line("Convert_Net1lv_Type: Unmatched string |" & i & "|" );
        return Net1lv_Type'First; -- never actually gets here; for compiler only
    end Convert_Net1lv_Type;



    function Pretty_Print( i : Net1ph_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when most_days => return "Most days";
             when least_once_week => return "Least once week";
             when least_once_month => return "Least once month";
             when less_often => return "Less often";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Net1ph_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Net1ph_Type( i : String ) return Net1ph_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return most_days;
         elsif i = "2" then
            return least_once_week;
         elsif i = "3" then
            return least_once_month;
         elsif i = "4" then
            return less_often;
        end if;
        Put_Line("Convert_Net1ph_Type: Unmatched string |" & i & "|" );
        return Net1ph_Type'First; -- never actually gets here; for compiler only
    end Convert_Net1ph_Type;



    function Pretty_Print( i : Net1rl_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when partner => return "Partner";
             when child => return "Child";
             when sibling => return "Sibling";
             when parent => return "Parent";
             when grandparent => return "Grandparent";
             when grandchild => return "Grandchild";
             when aunt_uncle_cous => return "Aunt, uncle, cous";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Net1rl_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Net1rl_Type( i : String ) return Net1rl_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return partner;
         elsif i = "2" then
            return child;
         elsif i = "3" then
            return sibling;
         elsif i = "4" then
            return parent;
         elsif i = "5" then
            return grandparent;
         elsif i = "6" then
            return grandchild;
         elsif i = "7" then
            return aunt_uncle_cous;
         elsif i = "8" then
            return other;
         elsif i = "9" then
            return other;
        end if;
        Put_Line("Convert_Net1rl_Type: Unmatched string |" & i & "|" );
        return Net1rl_Type'First; -- never actually gets here; for compiler only
    end Convert_Net1rl_Type;



    function Pretty_Print( i : Netsoc_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_working_nos => return "Not working (nos)";
             when looking_aft_hme_or_fmly => return "Looking aft hme/fmly";
             when retired => return "Retired";
             when unemployed => return "Unemployed";
             when f_or_t_student => return "F/t student";
             when long_term_sick => return "Long term sick";
             when valid_soc_code => return "Valid SOC code";
             when insuff_detail => return "Insuff detail";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Netsoc_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Netsoc_Type( i : String ) return Netsoc_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "998" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_working_nos;
         elsif i = "1" then
            return looking_aft_hme_or_fmly;
         elsif i = "2" then
            return retired;
         elsif i = "3" then
            return unemployed;
         elsif i = "4" then
            return f_or_t_student;
         elsif i = "5" then
            return long_term_sick;
         elsif i = "6" then
            return valid_soc_code;
         elsif i = "997" then
            return insuff_detail;
        end if;
        Put_Line("Convert_Netsoc_Type: Unmatched string |" & i & "|" );
        return Netsoc_Type'First; -- never actually gets here; for compiler only
    end Convert_Netsoc_Type;



    function Pretty_Print( i : Netsx1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when male => return "Male";
             when female => return "Female";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Netsx1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Netsx1_Type( i : String ) return Netsx1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return male;
         elsif i = "2" then
            return female;
        end if;
        Put_Line("Convert_Netsx1_Type: Unmatched string |" & i & "|" );
        return Netsx1_Type'First; -- never actually gets here; for compiler only
    end Convert_Netsx1_Type;



    function Pretty_Print( i : Netuse_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when no_access => return "No access";
             when never => return "Never";
             when less_than_once_a_month => return "Less than once a month";
             when once_a_month => return "Once a month";
             when several_times_a_month => return "Several times a month";
             when several_times_a_week => return "Several times a week";
             when daily => return "Daily";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Netuse_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Netuse_Type( i : String ) return Netuse_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return no_access;
         elsif i = "2" then
            return never;
         elsif i = "3" then
            return less_than_once_a_month;
         elsif i = "4" then
            return once_a_month;
         elsif i = "5" then
            return several_times_a_month;
         elsif i = "6" then
            return several_times_a_week;
         elsif i = "7" then
            return daily;
        end if;
        Put_Line("Convert_Netuse_Type: Unmatched string |" & i & "|" );
        return Netuse_Type'First; -- never actually gets here; for compiler only
    end Convert_Netuse_Type;



    function Pretty_Print( i : Newhy_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when listed_member => return "Listed member";
             when new_baby => return "New baby";
             when marriage_or_cohab => return "Marriage/cohab";
             when from_college_or_university => return "From college/university";
             when from_institution => return "From institution";
             when never_left => return "Never left";
             when moved_in_with_parentss_or_relative => return "Moved in with parents(s)/relative";
             when shared_accommodation => return "Shared accommodation";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Newhy_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Newhy_Type( i : String ) return Newhy_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return listed_member;
         elsif i = "1" then
            return new_baby;
         elsif i = "2" then
            return marriage_or_cohab;
         elsif i = "3" then
            return from_college_or_university;
         elsif i = "4" then
            return from_institution;
         elsif i = "5" then
            return never_left;
         elsif i = "6" then
            return moved_in_with_parentss_or_relative;
         elsif i = "7" then
            return shared_accommodation;
         elsif i = "8" then
            return other;
        end if;
        Put_Line("Convert_Newhy_Type: Unmatched string |" & i & "|" );
        return Newhy_Type'First; -- never actually gets here; for compiler only
    end Convert_Newhy_Type;



    function Pretty_Print( i : Neyrjn_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when original_member => return "Original member";
             when s_1991 => return "1991";
             when s_1992 => return "1992";
             when s_1993 => return "1993";
             when s_1994 => return "1994";
             when s_1995 => return "1995";
             when s_1996 => return "1996";
             when s_1997 => return "1997";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Neyrjn_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Neyrjn_Type( i : String ) return Neyrjn_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return original_member;
         elsif i = "91" then
            return s_1991;
         elsif i = "92" then
            return s_1992;
         elsif i = "93" then
            return s_1993;
         elsif i = "94" then
            return s_1994;
         elsif i = "95" then
            return s_1995;
         elsif i = "96" then
            return s_1996;
         elsif i = "97" then
            return s_1997;
        end if;
        Put_Line("Convert_Neyrjn_Type: Unmatched string |" & i & "|" );
        return Neyrjn_Type'First; -- never actually gets here; for compiler only
    end Convert_Neyrjn_Type;



    function Pretty_Print( i : Nfhs1_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing => return "Missing";
             when ni_pension => return "NI pension";
             when severe_disablement_allowance => return "Severe disablement allowance";
             when industrial_injury => return "Industrial injury";
             when attendance_allowance => return "Attendance allowance";
             when pension_from_prev_employer => return "Pension from prev employer";
             when invalid_care_allowance => return "Invalid care allowance";
             when war_disability_pension => return "War disability pension";
             when incapacity_benefit => return "Incapacity benefit";
             when dla_care_component => return "DLA: care component";
             when dla_mobility_component => return "DLA: mobility component";
             when dla => return "DLA";
             when pension_from_spouses_employer => return "Pension from spouse's employer";
             when income_support => return "Income support";
             when child_benefit => return "Child benefit";
             when one_parent_benefit => return "One parent benefit";
             when working_tax_credit => return "Working tax credit";
             when housing_benefit => return "Housing benefit";
             when private_pension => return "Private pension";
             when council_tax_benefit => return "Council tax benefit";
             when job_seekers_allowance => return "Job seeker's allowance";
             when child_tax_credit => return "Child tax credit";
             when widows_pension => return "Widow's pension";
             when educational_grant => return "Educational grant";
             when tu_payment => return "TU payment";
             when maintenance => return "Maintenance";
             when payment_from_family_member => return "Payment from family member";
             when rent_from_lodgers => return "Rent from lodgers";
             when rent_from_other_property => return "Rent from other property";
             when foster_allowance => return "Foster allowance";
             when accident_insurance => return "Accident insurance";
             when widowed_mothers_allowance => return "Widowed mother's allowance";
             when pension_credit => return "Pension credit";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Nfhs1_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Nfhs1_Type( i : String ) return Nfhs1_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return ni_pension;
         elsif i = "16" then
            return severe_disablement_allowance;
         elsif i = "18" then
            return industrial_injury;
         elsif i = "19" then
            return attendance_allowance;
         elsif i = "2" then
            return pension_from_prev_employer;
         elsif i = "21" then
            return invalid_care_allowance;
         elsif i = "22" then
            return war_disability_pension;
         elsif i = "25" then
            return incapacity_benefit;
         elsif i = "26" then
            return dla_care_component;
         elsif i = "27" then
            return dla_mobility_component;
         elsif i = "28" then
            return dla;
         elsif i = "3" then
            return pension_from_spouses_employer;
         elsif i = "32" then
            return income_support;
         elsif i = "35" then
            return child_benefit;
         elsif i = "36" then
            return one_parent_benefit;
         elsif i = "37" then
            return working_tax_credit;
         elsif i = "39" then
            return housing_benefit;
         elsif i = "4" then
            return private_pension;
         elsif i = "40" then
            return council_tax_benefit;
         elsif i = "42" then
            return job_seekers_allowance;
         elsif i = "43" then
            return child_tax_credit;
         elsif i = "5" then
            return widows_pension;
         elsif i = "51" then
            return educational_grant;
         elsif i = "52" then
            return tu_payment;
         elsif i = "53" then
            return maintenance;
         elsif i = "54" then
            return payment_from_family_member;
         elsif i = "55" then
            return rent_from_lodgers;
         elsif i = "56" then
            return rent_from_other_property;
         elsif i = "57" then
            return foster_allowance;
         elsif i = "58" then
            return accident_insurance;
         elsif i = "6" then
            return widowed_mothers_allowance;
         elsif i = "7" then
            return pension_credit;
        end if;
        Put_Line("Convert_Nfhs1_Type: Unmatched string |" & i & "|" );
        return Nfhs1_Type'First; -- never actually gets here; for compiler only
    end Convert_Nfhs1_Type;



    function Pretty_Print( i : Nfr_Type ) return String is
    begin
         case i is
             when missing_or_wild => return "Missing or wild";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Nfr_Type ) return Boolean is
    begin
         case i is
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Nfr_Type( i : String ) return Nfr_Type is
    begin
         if i = "-9" then
            return missing_or_wild;
        end if;
        Put_Line("Convert_Nfr_Type: Unmatched string |" & i & "|" );
        return Nfr_Type'First; -- never actually gets here; for compiler only
    end Convert_Nfr_Type;



    function Pretty_Print( i : Nipop1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when improved_a_lot => return "Improved a lot";
             when improved_a_little => return "Improved a little";
             when made_no_difference => return "Made no difference";
             when made_a_little_worse => return "Made a little worse";
             when made_a_lot_worse => return "Made a lot worse";
             when too_early_to_tell => return "Too early to tell";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Nipop1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Nipop1_Type( i : String ) return Nipop1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return improved_a_lot;
         elsif i = "2" then
            return improved_a_little;
         elsif i = "3" then
            return made_no_difference;
         elsif i = "4" then
            return made_a_little_worse;
         elsif i = "5" then
            return made_a_lot_worse;
         elsif i = "6" then
            return too_early_to_tell;
        end if;
        Put_Line("Convert_Nipop1_Type: Unmatched string |" & i & "|" );
        return Nipop1_Type'First; -- never actually gets here; for compiler only
    end Convert_Nipop1_Type;



    function Pretty_Print( i : Nipop2_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when strengthened => return "Strengthened";
             when weakened => return "Weakened";
             when made_no_difference => return "Made no difference";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Nipop2_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Nipop2_Type( i : String ) return Nipop2_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return strengthened;
         elsif i = "2" then
            return weakened;
         elsif i = "3" then
            return made_no_difference;
        end if;
        Put_Line("Convert_Nipop2_Type: Unmatched string |" & i & "|" );
        return Nipop2_Type'First; -- never actually gets here; for compiler only
    end Convert_Nipop2_Type;



    function Pretty_Print( i : Nipop3_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when just_about_always => return "Just about always";
             when most_of_the_time => return "Most of the time";
             when only_sometimes => return "Only sometimes";
             when almost_never => return "Almost never";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Nipop3_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Nipop3_Type( i : String ) return Nipop3_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return just_about_always;
         elsif i = "2" then
            return most_of_the_time;
         elsif i = "3" then
            return only_sometimes;
         elsif i = "4" then
            return almost_never;
        end if;
        Put_Line("Convert_Nipop3_Type: Unmatched string |" & i & "|" );
        return Nipop3_Type'First; -- never actually gets here; for compiler only
    end Convert_Nipop3_Type;



    function Pretty_Print( i : Nipop5_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when unionist => return "Unionist";
             when nationalist => return "Nationalist";
             when neither => return "Neither";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Nipop5_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Nipop5_Type( i : String ) return Nipop5_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return unionist;
         elsif i = "2" then
            return nationalist;
         elsif i = "3" then
            return neither;
         elsif i = "4" then
            return other;
        end if;
        Put_Line("Convert_Nipop5_Type: Unmatched string |" & i & "|" );
        return Nipop5_Type'First; -- never actually gets here; for compiler only
    end Convert_Nipop5_Type;



    function Pretty_Print( i : Nipop6_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when ni_indep_of_uk_and_eu => return "NI indep of UK & EU";
             when ni_ind_of_uk_not_eu => return "NI ind of UK not EU";
             when ni_in_uk_own_parli => return "NI in UK, own parli";
             when ni_in_uk_w_assembly => return "NI in UK w Assembly";
             when ni_in_uk_no_assembly => return "NI in UK no Assembly";
             when ni_unify_with_roi => return "NI unify with ROI";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Nipop6_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Nipop6_Type( i : String ) return Nipop6_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return ni_indep_of_uk_and_eu;
         elsif i = "2" then
            return ni_ind_of_uk_not_eu;
         elsif i = "3" then
            return ni_in_uk_own_parli;
         elsif i = "4" then
            return ni_in_uk_w_assembly;
         elsif i = "5" then
            return ni_in_uk_no_assembly;
         elsif i = "6" then
            return ni_unify_with_roi;
        end if;
        Put_Line("Convert_Nipop6_Type: Unmatched string |" & i & "|" );
        return Nipop6_Type'First; -- never actually gets here; for compiler only
    end Convert_Nipop6_Type;



    function Pretty_Print( i : Nisjsa_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when not_mentioned => return "Not mentioned";
             when yes => return "Yes";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Nisjsa_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Nisjsa_Type( i : String ) return Nisjsa_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return yes;
        end if;
        Put_Line("Convert_Nisjsa_Type: Unmatched string |" & i & "|" );
        return Nisjsa_Type'First; -- never actually gets here; for compiler only
    end Convert_Nisjsa_Type;



    function Pretty_Print( i : Nivfho_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when all_eligible_hh_intv => return "All eligible HH intv";
             when interviews_plus_proxies => return "Interviews + proxies";
             when interviews_plus_refusal => return "Interviews + refusal";
             when pxy_at_original_addr => return "Pxy at original addr";
             when phone_interview_only => return "Phone interview only";
             when youth_interview_only => return "Youth Interview only";
             when docs_missing_or_unus => return "Docs missing or unus";
             when address_not_found => return "Address not found";
             when no_hh_member_contact => return "No HH member contact";
             when refus_to_rsrch_cntre => return "Refus to Rsrch Cntre";
             when refusal_to_intviewer => return "Refusal to intviewer";
             when language_problems => return "Language problems";
             when no_intv_age_or_health => return "No intv.: Age/health";
             when moved_prev_wave_add => return "Moved prev wave add";
             when out_scope_institutn => return "Out scope-institut'n";
             when moved_out_of_scope => return "Moved out of scope";
             when whole_hh_deceased => return "Whole HH deceased";
             when no_psms_resident => return "No PSM's resident";
             when adamant_refusal => return "Adamant refusal";
             when l_t_untraced_wdrawn => return "L-t untraced, wdrawn";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Nivfho_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Nivfho_Type( i : String ) return Nivfho_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "10" then
            return all_eligible_hh_intv;
         elsif i = "11" then
            return interviews_plus_proxies;
         elsif i = "12" then
            return interviews_plus_refusal;
         elsif i = "15" then
            return pxy_at_original_addr;
         elsif i = "16" then
            return phone_interview_only;
         elsif i = "17" then
            return youth_interview_only;
         elsif i = "39" then
            return docs_missing_or_unus;
         elsif i = "50" then
            return address_not_found;
         elsif i = "51" then
            return no_hh_member_contact;
         elsif i = "60" then
            return refus_to_rsrch_cntre;
         elsif i = "61" then
            return refusal_to_intviewer;
         elsif i = "62" then
            return language_problems;
         elsif i = "63" then
            return no_intv_age_or_health;
         elsif i = "70" then
            return moved_prev_wave_add;
         elsif i = "80" then
            return out_scope_institutn;
         elsif i = "81" then
            return moved_out_of_scope;
         elsif i = "90" then
            return whole_hh_deceased;
         elsif i = "91" then
            return no_psms_resident;
         elsif i = "92" then
            return adamant_refusal;
         elsif i = "93" then
            return l_t_untraced_wdrawn;
        end if;
        Put_Line("Convert_Nivfho_Type: Unmatched string |" & i & "|" );
        return Nivfho_Type'First; -- never actually gets here; for compiler only
    end Convert_Nivfho_Type;



    function Pretty_Print( i : Nivfio_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when full_interview => return "Full interview";
             when refusal => return "Refusal";
             when other_non_intvw => return "Other non-intvw";
             when moved => return "Moved";
             when proxy_interview => return "Proxy interview";
             when child_under_16 => return "Child under 16";
             when youth_interview => return "Youth Interview";
             when youth_refusal => return "Youth: Refusal";
             when youth_oth_non_int => return "Youth: Oth non-int";
             when child_under_11 => return "Child under 11";
             when telephone_intvw => return "Telephone intvw";
             when refusal_or_non_int_hh => return "Refusal/non-int HH";
             when non_int_or_non_int_hh => return "Non-int/non-int HH";
             when moved_or_non_int_hh => return "Moved/non-int HH";
             when child_in_non_int_hh => return "Child in non-int HH";
             when youth_ref_or_no_int_hh => return "Youth: Ref/no-int HH";
             when youth_oth_or_no_int_hh => return "Youth: Oth/no-int HH";
             when child_u_11_no_int_hh => return "Child u 11 no-int HH";
             when refusal_or_non_cont_hh => return "Refusal/non-cont HH";
             when lang_prob_or_nc_hh => return "Lang prob/NC HH";
             when age_infirm_or_nc_hh => return "Age, infirm/NC HH";
             when non_cont_or_nc_hh => return "Non-cont/NC HH";
             when out_of_scope_or_nc_hh => return "Out of scope/NC HH";
             when institutnsd_or_nc_hh => return "Institutnsd/NC HH";
             when untraced_mover => return "Untraced mover";
             when child_ref_or_nc_hh => return "Child ref/NC HH";
             when chd_lang_prob_or_nc_hh => return "Chd lang prob/NC HH";
             when chd_infirm_or_nc_hh => return "Chd infirm/NC HH";
             when chd_non_cont_or_nc_hh => return "Chd non-cont/NC HH";
             when chd_o_o_scope_or_nc_hh => return "Chd o-o-scope/NC HH";
             when chd_instit_or_nc_hh => return "Chd instit/NC HH";
             when chd_untraced_mover => return "Chd untraced mover";
             when no_one_elig_in_hh => return "No one elig in HH";
             when prev_wave_adamant_re => return "Prev wave adamant re";
             when l_t_untraced_wdrawn => return "L-t untraced, wdrawn";
             when lost_capi_intvw => return "Lost CAPI intvw";
             when dead => return "Dead";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Nivfio_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Nivfio_Type( i : String ) return Nivfio_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "1" then
            return full_interview;
         elsif i = "10" then
            return refusal;
         elsif i = "11" then
            return other_non_intvw;
         elsif i = "12" then
            return moved;
         elsif i = "2" then
            return proxy_interview;
         elsif i = "20" then
            return child_under_16;
         elsif i = "21" then
            return youth_interview;
         elsif i = "22" then
            return youth_refusal;
         elsif i = "23" then
            return youth_oth_non_int;
         elsif i = "24" then
            return child_under_11;
         elsif i = "3" then
            return telephone_intvw;
         elsif i = "30" then
            return refusal_or_non_int_hh;
         elsif i = "31" then
            return non_int_or_non_int_hh;
         elsif i = "32" then
            return moved_or_non_int_hh;
         elsif i = "40" then
            return child_in_non_int_hh;
         elsif i = "41" then
            return youth_ref_or_no_int_hh;
         elsif i = "42" then
            return youth_oth_or_no_int_hh;
         elsif i = "43" then
            return child_u_11_no_int_hh;
         elsif i = "50" then
            return refusal_or_non_cont_hh;
         elsif i = "51" then
            return lang_prob_or_nc_hh;
         elsif i = "52" then
            return age_infirm_or_nc_hh;
         elsif i = "53" then
            return non_cont_or_nc_hh;
         elsif i = "54" then
            return out_of_scope_or_nc_hh;
         elsif i = "55" then
            return institutnsd_or_nc_hh;
         elsif i = "56" then
            return untraced_mover;
         elsif i = "60" then
            return child_ref_or_nc_hh;
         elsif i = "61" then
            return chd_lang_prob_or_nc_hh;
         elsif i = "62" then
            return chd_infirm_or_nc_hh;
         elsif i = "63" then
            return chd_non_cont_or_nc_hh;
         elsif i = "64" then
            return chd_o_o_scope_or_nc_hh;
         elsif i = "65" then
            return chd_instit_or_nc_hh;
         elsif i = "66" then
            return chd_untraced_mover;
         elsif i = "80" then
            return no_one_elig_in_hh;
         elsif i = "81" then
            return prev_wave_adamant_re;
         elsif i = "82" then
            return l_t_untraced_wdrawn;
         elsif i = "9" then
            return lost_capi_intvw;
         elsif i = "99" then
            return dead;
        end if;
        Put_Line("Convert_Nivfio_Type: Unmatched string |" & i & "|" );
        return Nivfio_Type'First; -- never actually gets here; for compiler only
    end Convert_Nivfio_Type;



    function Pretty_Print( i : Nivt1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when yes => return "Yes";
             when no => return "No";
             when couldnt_vote => return "Couldn't vote";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Nivt1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Nivt1_Type( i : String ) return Nivt1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
         elsif i = "3" then
            return couldnt_vote;
        end if;
        Put_Line("Convert_Nivt1_Type: Unmatched string |" & i & "|" );
        return Nivt1_Type'First; -- never actually gets here; for compiler only
    end Convert_Nivt1_Type;



    function Pretty_Print( i : Nivt2_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when conservative => return "Conservative";
             when ulster_unionist => return "Ulster Unionist";
             when sdlp => return "SDLP";
             when alliance_party => return "Alliance Party";
             when democratic_unionist => return "Democratic Unionist";
             when sinn_fein => return "Sinn Fein";
             when other_ni_political_party => return "Other NI political party";
             when labour => return "Labour";
             when liberal_democrat_or_liberal_or_sld => return "Liberal Democrat/Liberal/SLD";
             when scottish_nationalist => return "Scottish Nationalist";
             when plaid_cymru => return "Plaid Cymru";
             when green_party => return "Green party";
             when other_party => return "Other party";
             when other_answer => return "Other answer";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Nivt2_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Nivt2_Type( i : String ) return Nivt2_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return conservative;
         elsif i = "12" then
            return ulster_unionist;
         elsif i = "13" then
            return sdlp;
         elsif i = "14" then
            return alliance_party;
         elsif i = "15" then
            return democratic_unionist;
         elsif i = "16" then
            return sinn_fein;
         elsif i = "17" then
            return other_ni_political_party;
         elsif i = "2" then
            return labour;
         elsif i = "3" then
            return liberal_democrat_or_liberal_or_sld;
         elsif i = "4" then
            return scottish_nationalist;
         elsif i = "5" then
            return plaid_cymru;
         elsif i = "6" then
            return green_party;
         elsif i = "7" then
            return other_party;
         elsif i = "8" then
            return other_answer;
        end if;
        Put_Line("Convert_Nivt2_Type: Unmatched string |" & i & "|" );
        return Nivt2_Type'First; -- never actually gets here; for compiler only
    end Convert_Nivt2_Type;



    function Pretty_Print( i : Njbnew_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when none => return "None";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Njbnew_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Njbnew_Type( i : String ) return Njbnew_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return none;
        end if;
        Put_Line("Convert_Njbnew_Type: Unmatched string |" & i & "|" );
        return Njbnew_Type'First; -- never actually gets here; for compiler only
    end Convert_Njbnew_Type;



    function Pretty_Print( i : Nmar_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when never_married => return "Never married";
             when once => return "Once";
             when twice => return "Twice";
             when three_times => return "Three times";
             when more_than_three => return "More than three";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Nmar_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Nmar_Type( i : String ) return Nmar_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return never_married;
         elsif i = "1" then
            return once;
         elsif i = "2" then
            return twice;
         elsif i = "3" then
            return three_times;
         elsif i = "4" then
            return more_than_three;
        end if;
        Put_Line("Convert_Nmar_Type: Unmatched string |" & i & "|" );
        return Nmar_Type'First; -- never actually gets here; for compiler only
    end Convert_Nmar_Type;



    function Pretty_Print( i : Nmwchk_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when yes_before_141999 => return "Yes, before 1.4.1999";
             when no_after_141999 => return "No, after 1.4.1999";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Nmwchk_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Nmwchk_Type( i : String ) return Nmwchk_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return yes_before_141999;
         elsif i = "2" then
            return no_after_141999;
        end if;
        Put_Line("Convert_Nmwchk_Type: Unmatched string |" & i & "|" );
        return Nmwchk_Type'First; -- never actually gets here; for compiler only
    end Convert_Nmwchk_Type;



    function Pretty_Print( i : Nmwhrch_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when basic_hours_increased => return "Basic hours increased";
             when basic_hours_reduced => return "Basic hours reduced";
             when basic_hours_not_affected => return "Basic hours not affected";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Nmwhrch_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Nmwhrch_Type( i : String ) return Nmwhrch_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return basic_hours_increased;
         elsif i = "2" then
            return basic_hours_reduced;
         elsif i = "3" then
            return basic_hours_not_affected;
        end if;
        Put_Line("Convert_Nmwhrch_Type: Unmatched string |" & i & "|" );
        return Nmwhrch_Type'First; -- never actually gets here; for compiler only
    end Convert_Nmwhrch_Type;



    function Pretty_Print( i : Nmwopch_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when premium_risen => return "Premium risen";
             when premium_fallen => return "Premium fallen";
             when premium_the_same => return "Premium the same";
             when no_premium_paid => return "No premium paid";
             when no_paid_overtime => return "No paid overtime";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Nmwopch_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Nmwopch_Type( i : String ) return Nmwopch_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return premium_risen;
         elsif i = "2" then
            return premium_fallen;
         elsif i = "3" then
            return premium_the_same;
         elsif i = "4" then
            return no_premium_paid;
         elsif i = "5" then
            return no_paid_overtime;
         elsif i = "6" then
            return other;
        end if;
        Put_Line("Convert_Nmwopch_Type: Unmatched string |" & i & "|" );
        return Nmwopch_Type'First; -- never actually gets here; for compiler only
    end Convert_Nmwopch_Type;



    function Pretty_Print( i : Nmwufxb_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when easier_to_find_job => return "Easier to find job";
             when harder_to_find_job => return "Harder to find job";
             when no_difference => return "No difference";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Nmwufxb_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Nmwufxb_Type( i : String ) return Nmwufxb_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return easier_to_find_job;
         elsif i = "2" then
            return harder_to_find_job;
         elsif i = "3" then
            return no_difference;
        end if;
        Put_Line("Convert_Nmwufxb_Type: Unmatched string |" & i & "|" );
        return Nmwufxb_Type'First; -- never actually gets here; for compiler only
    end Convert_Nmwufxb_Type;



    function Pretty_Print( i : Nocaidu_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when none_of_these => return "None of these";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Nocaidu_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Nocaidu_Type( i : String ) return Nocaidu_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "10" then
            return not_mentioned;
         elsif i = "1" then
            return none_of_these;
        end if;
        Put_Line("Convert_Nocaidu_Type: Unmatched string |" & i & "|" );
        return Nocaidu_Type'First; -- never actually gets here; for compiler only
    end Convert_Nocaidu_Type;



    function Pretty_Print( i : Nrptim_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when less_than_6_months => return "Less than 6 months";
             when s_6_months_1_year => return "6 months - 1 year";
             when s_1_2_years => return "1 - 2 years";
             when s_2_5_years => return "2 - 5 years";
             when more_than_5_years => return "More than 5 years";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Nrptim_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Nrptim_Type( i : String ) return Nrptim_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return less_than_6_months;
         elsif i = "2" then
            return s_6_months_1_year;
         elsif i = "3" then
            return s_1_2_years;
         elsif i = "4" then
            return s_2_5_years;
         elsif i = "5" then
            return more_than_5_years;
        end if;
        Put_Line("Convert_Nrptim_Type: Unmatched string |" & i & "|" );
        return Nrptim_Type'First; -- never actually gets here; for compiler only
    end Convert_Nrptim_Type;



    function Pretty_Print( i : Nrpxpm1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when expect_to_marry => return "Expect to marry";
             when expect_to_cohabit => return "Expect to cohabit";
             when no_plans_to_marry_or_cohabit => return "No plans to marry/cohabit";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Nrpxpm1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Nrpxpm1_Type( i : String ) return Nrpxpm1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return expect_to_marry;
         elsif i = "2" then
            return expect_to_cohabit;
         elsif i = "3" then
            return no_plans_to_marry_or_cohabit;
        end if;
        Put_Line("Convert_Nrpxpm1_Type: Unmatched string |" & i & "|" );
        return Nrpxpm1_Type'First; -- never actually gets here; for compiler only
    end Convert_Nrpxpm1_Type;



    function Pretty_Print( i : Nvesta_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when not_mentioned => return "Not mentioned";
             when nat_savings_cert => return "Nat. Savings Cert.";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Nvesta_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Nvesta_Type( i : String ) return Nvesta_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return nat_savings_cert;
        end if;
        Put_Line("Convert_Nvesta_Type: Unmatched string |" & i & "|" );
        return Nvesta_Type'First; -- never actually gets here; for compiler only
    end Convert_Nvesta_Type;



    function Pretty_Print( i : Nvestb_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when not_mentioned => return "Not mentioned";
             when premium_bonds => return "Premium bonds";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Nvestb_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Nvestb_Type( i : String ) return Nvestb_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return premium_bonds;
         elsif i = "2" then
            return premium_bonds;
        end if;
        Put_Line("Convert_Nvestb_Type: Unmatched string |" & i & "|" );
        return Nvestb_Type'First; -- never actually gets here; for compiler only
    end Convert_Nvestb_Type;



    function Pretty_Print( i : Nvestc_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when not_mentioned => return "Not mentioned";
             when unit_trusts => return "Unit trusts";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Nvestc_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Nvestc_Type( i : String ) return Nvestc_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return unit_trusts;
         elsif i = "3" then
            return unit_trusts;
        end if;
        Put_Line("Convert_Nvestc_Type: Unmatched string |" & i & "|" );
        return Nvestc_Type'First; -- never actually gets here; for compiler only
    end Convert_Nvestc_Type;



    function Pretty_Print( i : Nvestd_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when not_mentioned => return "Not mentioned";
             when peps => return "PEP's";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Nvestd_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Nvestd_Type( i : String ) return Nvestd_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return peps;
         elsif i = "4" then
            return peps;
        end if;
        Put_Line("Convert_Nvestd_Type: Unmatched string |" & i & "|" );
        return Nvestd_Type'First; -- never actually gets here; for compiler only
    end Convert_Nvestd_Type;



    function Pretty_Print( i : Nveste_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when not_mentioned => return "Not mentioned";
             when shares => return "Shares";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Nveste_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Nveste_Type( i : String ) return Nveste_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return shares;
         elsif i = "5" then
            return shares;
        end if;
        Put_Line("Convert_Nveste_Type: Unmatched string |" & i & "|" );
        return Nveste_Type'First; -- never actually gets here; for compiler only
    end Convert_Nveste_Type;



    function Pretty_Print( i : Nvestf_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when not_mentioned => return "Not mentioned";
             when ns_or_bs_or_ins_bonds => return "NS/BS/Ins bonds";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Nvestf_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Nvestf_Type( i : String ) return Nvestf_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return ns_or_bs_or_ins_bonds;
         elsif i = "6" then
            return ns_or_bs_or_ins_bonds;
        end if;
        Put_Line("Convert_Nvestf_Type: Unmatched string |" & i & "|" );
        return Nvestf_Type'First; -- never actually gets here; for compiler only
    end Convert_Nvestf_Type;



    function Pretty_Print( i : Nvestg_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when not_mentioned => return "Not mentioned";
             when other_invest_or_secur => return "Other Invest/Secur";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Nvestg_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Nvestg_Type( i : String ) return Nvestg_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return other_invest_or_secur;
         elsif i = "7" then
            return other_invest_or_secur;
        end if;
        Put_Line("Convert_Nvestg_Type: Unmatched string |" & i & "|" );
        return Nvestg_Type'First; -- never actually gets here; for compiler only
    end Convert_Nvestg_Type;



    function Pretty_Print( i : Nvesth_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when not_mentioned => return "Not mentioned";
             when savings_or_deposits => return "Savings or deposits";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Nvesth_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Nvesth_Type( i : String ) return Nvesth_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return savings_or_deposits;
        end if;
        Put_Line("Convert_Nvesth_Type: Unmatched string |" & i & "|" );
        return Nvesth_Type'First; -- never actually gets here; for compiler only
    end Convert_Nvesth_Type;



    function Pretty_Print( i : Nvesti_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when not_mentioned => return "Not mentioned";
             when natsavings_bank => return "Nat.Savings Bank";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Nvesti_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Nvesti_Type( i : String ) return Nvesti_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return natsavings_bank;
        end if;
        Put_Line("Convert_Nvesti_Type: Unmatched string |" & i & "|" );
        return Nvesti_Type'First; -- never actually gets here; for compiler only
    end Convert_Nvesti_Type;



    function Pretty_Print( i : Nvestj_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when not_mentioned => return "Not mentioned";
             when yes => return "Yes";
             when no => return "No";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Nvestj_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Nvestj_Type( i : String ) return Nvestj_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
        end if;
        Put_Line("Convert_Nvestj_Type: Unmatched string |" & i & "|" );
        return Nvestj_Type'First; -- never actually gets here; for compiler only
    end Convert_Nvestj_Type;



    function Pretty_Print( i : Nvestl_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when national_savings_certificate => return "National Savings Certificate";
             when premium_bonds => return "Premium Bonds";
             when unit_trusts => return "Unit trusts";
             when personal_equity_plans => return "Personal Equity Plans";
             when shares_uk_or_foreign => return "Shares (UK or foreign)";
             when ns_or_bs_insurance_bonds => return "NS/BS Insurance Bonds";
             when other_investments => return "Other investments";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Nvestl_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Nvestl_Type( i : String ) return Nvestl_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return national_savings_certificate;
         elsif i = "2" then
            return premium_bonds;
         elsif i = "3" then
            return unit_trusts;
         elsif i = "4" then
            return personal_equity_plans;
         elsif i = "5" then
            return shares_uk_or_foreign;
         elsif i = "6" then
            return ns_or_bs_insurance_bonds;
         elsif i = "7" then
            return other_investments;
        end if;
        Put_Line("Convert_Nvestl_Type: Unmatched string |" & i & "|" );
        return Nvestl_Type'First; -- never actually gets here; for compiler only
    end Convert_Nvestl_Type;



    function Pretty_Print( i : Nvestn_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when one_only => return "One only";
             when two_or_more => return "Two or more";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Nvestn_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Nvestn_Type( i : String ) return Nvestn_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return one_only;
         elsif i = "2" then
            return two_or_more;
        end if;
        Put_Line("Convert_Nvestn_Type: Unmatched string |" & i & "|" );
        return Nvestn_Type'First; -- never actually gets here; for compiler only
    end Convert_Nvestn_Type;



    function Pretty_Print( i : Nwstat_Type ) return String is
    begin
         case i is
             when missing_household => return "Missing household";
             when still_co_resident => return "Still co-resident";
             when different_household => return "Different household";
             when blank => return "";
             when alter_out_of_scope => return "Alter out of scope";
             when alter_died => return "Alter died";
             when both_non_resp_dk => return "Both non-resp, DK";
             when ego_left_sample => return "Ego left sample";
             when ego_died_or_out_scope => return "Ego died/out scope";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Nwstat_Type ) return Boolean is
    begin
         case i is
             when missing_household => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Nwstat_Type( i : String ) return Nwstat_Type is
    begin
         if i = "-9" then
            return missing_household;
         elsif i = "1" then
            return still_co_resident;
         elsif i = "2" then
            return different_household;
         elsif i = "3" then
            return blank;
         elsif i = "4" then
            return alter_out_of_scope;
         elsif i = "5" then
            return alter_died;
         elsif i = "7" then
            return both_non_resp_dk;
         elsif i = "8" then
            return ego_left_sample;
         elsif i = "9" then
            return ego_died_or_out_scope;
        end if;
        Put_Line("Convert_Nwstat_Type: Unmatched string |" & i & "|" );
        return Nwstat_Type'First; -- never actually gets here; for compiler only
    end Convert_Nwstat_Type;



    function Pretty_Print( i : Nxdts_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when one => return "One";
             when two => return "Two";
             when three => return "Three";
             when four_plus => return "Four +";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Nxdts_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Nxdts_Type( i : String ) return Nxdts_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return one;
         elsif i = "2" then
            return two;
         elsif i = "3" then
            return three;
         elsif i = "4" then
            return four_plus;
        end if;
        Put_Line("Convert_Nxdts_Type: Unmatched string |" & i & "|" );
        return Nxdts_Type'First; -- never actually gets here; for compiler only
    end Convert_Nxdts_Type;



    function Pretty_Print( i : Ocimpa_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when very_important => return "Very important";
             when important => return "Important";
             when not_important => return "Not important";
             when not_at_all_important => return "Not at all important";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ocimpa_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ocimpa_Type( i : String ) return Ocimpa_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return very_important;
         elsif i = "2" then
            return important;
         elsif i = "3" then
            return not_important;
         elsif i = "4" then
            return not_at_all_important;
        end if;
        Put_Line("Convert_Ocimpa_Type: Unmatched string |" & i & "|" );
        return Ocimpa_Type'First; -- never actually gets here; for compiler only
    end Convert_Ocimpa_Type;



    function Pretty_Print( i : Ohch16_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when yes => return "Yes";
             when no => return "No";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ohch16_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ohch16_Type( i : String ) return Ohch16_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
        end if;
        Put_Line("Convert_Ohch16_Type: Unmatched string |" & i & "|" );
        return Ohch16_Type'First; -- never actually gets here; for compiler only
    end Convert_Ohch16_Type;



    function Pretty_Print( i : Oivfio_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when full_interview => return "Full interview";
             when refusal => return "Refusal";
             when other_non_intvw => return "Other non-intvw";
             when moved => return "Moved";
             when proxy_interview => return "Proxy interview";
             when child_under_16 => return "Child under 16";
             when youth_interview => return "Youth Interview";
             when youth_refusal => return "Youth: Refusal";
             when youth_oth_non_int => return "Youth: Oth non-int";
             when child_under_11 => return "Child under 11";
             when telephone_intvw => return "Telephone intvw";
             when refusal_or_non_int_hh => return "Refusal/non-int HH";
             when non_int_or_non_int_hh => return "Non-int/non-int HH";
             when moved_or_non_int_hh => return "Moved/non-int HH";
             when child_in_non_int_hh => return "Child in non-int HH";
             when youth_ref_or_no_int_hh => return "Youth: Ref/no-int HH";
             when youth_oth_or_no_int_hh => return "Youth: Oth/no-int HH";
             when child_u_11_no_int_hh => return "Child u 11 no-int HH";
             when refusal_or_non_cont_hh => return "Refusal/non-cont HH";
             when lang_prob_or_nc_hh => return "Lang prob/NC HH";
             when age_infirm_or_nc_hh => return "Age, infirm/NC HH";
             when non_cont_or_nc_hh => return "Non-cont/NC HH";
             when out_of_scope_or_nc_hh => return "Out of scope/NC HH";
             when institutnsd_or_nc_hh => return "Institutnsd/NC HH";
             when untraced_mover => return "Untraced mover";
             when child_ref_or_nc_hh => return "Child ref/NC HH";
             when chd_lang_prob_or_nc_hh => return "Chd lang prob/NC HH";
             when chd_infirm_or_nc_hh => return "Chd infirm/NC HH";
             when chd_non_cont_or_nc_hh => return "Chd non-cont/NC HH";
             when chd_o_o_scope_or_nc_hh => return "Chd o-o-scope/NC HH";
             when chd_instit_or_nc_hh => return "Chd instit/NC HH";
             when chd_untraced_mover => return "Chd untraced mover";
             when no_one_elig_in_hh => return "No one elig in HH";
             when prev_wave_adamant_re => return "Prev wave adamant re";
             when l_t_untraced_wdrawn => return "L-t untraced, wdrawn";
             when withdrawn_before_field => return "Withdrawn before field";
             when lost_capi_intvw => return "Lost CAPI intvw";
             when other_retiring => return "Other Retiring";
             when dead => return "Dead";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Oivfio_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Oivfio_Type( i : String ) return Oivfio_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "1" then
            return full_interview;
         elsif i = "10" then
            return refusal;
         elsif i = "11" then
            return other_non_intvw;
         elsif i = "12" then
            return moved;
         elsif i = "2" then
            return proxy_interview;
         elsif i = "20" then
            return child_under_16;
         elsif i = "21" then
            return youth_interview;
         elsif i = "22" then
            return youth_refusal;
         elsif i = "23" then
            return youth_oth_non_int;
         elsif i = "24" then
            return child_under_11;
         elsif i = "3" then
            return telephone_intvw;
         elsif i = "30" then
            return refusal_or_non_int_hh;
         elsif i = "31" then
            return non_int_or_non_int_hh;
         elsif i = "32" then
            return moved_or_non_int_hh;
         elsif i = "40" then
            return child_in_non_int_hh;
         elsif i = "41" then
            return youth_ref_or_no_int_hh;
         elsif i = "42" then
            return youth_oth_or_no_int_hh;
         elsif i = "43" then
            return child_u_11_no_int_hh;
         elsif i = "50" then
            return refusal_or_non_cont_hh;
         elsif i = "51" then
            return lang_prob_or_nc_hh;
         elsif i = "52" then
            return age_infirm_or_nc_hh;
         elsif i = "53" then
            return non_cont_or_nc_hh;
         elsif i = "54" then
            return out_of_scope_or_nc_hh;
         elsif i = "55" then
            return institutnsd_or_nc_hh;
         elsif i = "56" then
            return untraced_mover;
         elsif i = "60" then
            return child_ref_or_nc_hh;
         elsif i = "61" then
            return chd_lang_prob_or_nc_hh;
         elsif i = "62" then
            return chd_infirm_or_nc_hh;
         elsif i = "63" then
            return chd_non_cont_or_nc_hh;
         elsif i = "64" then
            return chd_o_o_scope_or_nc_hh;
         elsif i = "65" then
            return chd_instit_or_nc_hh;
         elsif i = "66" then
            return chd_untraced_mover;
         elsif i = "80" then
            return no_one_elig_in_hh;
         elsif i = "81" then
            return prev_wave_adamant_re;
         elsif i = "82" then
            return l_t_untraced_wdrawn;
         elsif i = "83" then
            return withdrawn_before_field;
         elsif i = "9" then
            return lost_capi_intvw;
         elsif i = "98" then
            return other_retiring;
         elsif i = "99" then
            return dead;
        end if;
        Put_Line("Convert_Oivfio_Type: Unmatched string |" & i & "|" );
        return Oivfio_Type'First; -- never actually gets here; for compiler only
    end Convert_Oivfio_Type;



    function Pretty_Print( i : Opcca_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when yes_i_believe_this => return "Yes, I believe this";
             when no_i_do_not_believe_this => return "No, I do not believe this";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Opcca_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Opcca_Type( i : String ) return Opcca_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return yes_i_believe_this;
         elsif i = "2" then
            return no_i_do_not_believe_this;
        end if;
        Put_Line("Convert_Opcca_Type: Unmatched string |" & i & "|" );
        return Opcca_Type'First; -- never actually gets here; for compiler only
    end Convert_Opcca_Type;



    function Pretty_Print( i : Opchd1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when missing_or_wild => return "Missing or wild";
             when well_liked => return "Well liked";
             when think_for_self => return "Think for self";
             when work_hard => return "Work hard";
             when help_others => return "Help others";
             when obey_parents => return "Obey parents";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Opchd1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Opchd1_Type( i : String ) return Opchd1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return well_liked;
         elsif i = "2" then
            return think_for_self;
         elsif i = "3" then
            return work_hard;
         elsif i = "4" then
            return help_others;
         elsif i = "5" then
            return obey_parents;
        end if;
        Put_Line("Convert_Opchd1_Type: Unmatched string |" & i & "|" );
        return Opchd1_Type'First; -- never actually gets here; for compiler only
    end Convert_Opchd1_Type;



    function Pretty_Print( i : Opcls2_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when nothing_written_in => return "Nothing written in";
             when lower_wrkng_class => return "Lower wrkng class";
             when no_partic_class => return "No partic class";
             when refuse_class_cat => return "Refuse class cat";
             when working_class => return "Working class";
             when upper_wrkng_class => return "Upper wrkng class";
             when lower_mid_class => return "Lower mid class";
             when middle_class => return "Middle class";
             when upper_mid_class => return "Upper mid class";
             when upper_class => return "Upper class";
             when other_not_class => return "Other not class";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Opcls2_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Opcls2_Type( i : String ) return Opcls2_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return nothing_written_in;
         elsif i = "1" then
            return lower_wrkng_class;
         elsif i = "11" then
            return no_partic_class;
         elsif i = "12" then
            return refuse_class_cat;
         elsif i = "2" then
            return working_class;
         elsif i = "3" then
            return upper_wrkng_class;
         elsif i = "4" then
            return lower_mid_class;
         elsif i = "5" then
            return middle_class;
         elsif i = "6" then
            return upper_mid_class;
         elsif i = "7" then
            return upper_class;
         elsif i = "8" then
            return other_not_class;
         elsif i = "96" then
            return other;
        end if;
        Put_Line("Convert_Opcls2_Type: Unmatched string |" & i & "|" );
        return Opcls2_Type'First; -- never actually gets here; for compiler only
    end Convert_Opcls2_Type;



    function Pretty_Print( i : Opcls3_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when a_great_deal => return "A great deal";
             when quite_a_lot => return "Quite a lot";
             when not_very_much => return "Not very much";
             when not_at_all => return "Not at all";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Opcls3_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Opcls3_Type( i : String ) return Opcls3_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return a_great_deal;
         elsif i = "2" then
            return quite_a_lot;
         elsif i = "3" then
            return not_very_much;
         elsif i = "4" then
            return not_at_all;
         elsif i = "5" then
            return other;
        end if;
        Put_Line("Convert_Opcls3_Type: Unmatched string |" & i & "|" );
        return Opcls3_Type'First; -- never actually gets here; for compiler only
    end Convert_Opcls3_Type;



    function Pretty_Print( i : Opdev1_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when s_or_w_indep_from_uk_and_eu => return "S/W indep. from UK and EU";
             when s_or_w_indep_from_uk_within_eu => return "S/W indep from UK within EU";
             when s_or_w_in_uk_taxation_powers => return "S/W in UK; taxation powers";
             when s_or_w_in_uk_no_taxation_powers => return "S/W in UK; no taxation powers";
             when s_or_w_in_uk_no_legislature => return "S/W in UK; no legislature";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Opdev1_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Opdev1_Type( i : String ) return Opdev1_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return s_or_w_indep_from_uk_and_eu;
         elsif i = "2" then
            return s_or_w_indep_from_uk_within_eu;
         elsif i = "3" then
            return s_or_w_in_uk_taxation_powers;
         elsif i = "4" then
            return s_or_w_in_uk_no_taxation_powers;
         elsif i = "5" then
            return s_or_w_in_uk_no_legislature;
        end if;
        Put_Line("Convert_Opdev1_Type: Unmatched string |" & i & "|" );
        return Opdev1_Type'First; -- never actually gets here; for compiler only
    end Convert_Opdev1_Type;



    function Pretty_Print( i : Opdev2_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when s_or_w_not_british => return "S/W not British";
             when more_s_or_w_than_british => return "More S/W than British";
             when equally_s_or_w_and_british => return "Equally S/W and British";
             when more_british_than_s_or_w => return "More British than S/W";
             when british_not_s_or_w => return "British not S/W";
             when other => return "Other";
             when none_of_these => return "None of these";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Opdev2_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Opdev2_Type( i : String ) return Opdev2_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return s_or_w_not_british;
         elsif i = "2" then
            return more_s_or_w_than_british;
         elsif i = "3" then
            return equally_s_or_w_and_british;
         elsif i = "4" then
            return more_british_than_s_or_w;
         elsif i = "5" then
            return british_not_s_or_w;
         elsif i = "6" then
            return other;
         elsif i = "7" then
            return none_of_these;
        end if;
        Put_Line("Convert_Opdev2_Type: Unmatched string |" & i & "|" );
        return Opdev2_Type'First; -- never actually gets here; for compiler only
    end Convert_Opdev2_Type;



    function Pretty_Print( i : Opdvni1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when independent => return "Independent";
             when part_of_eu => return "Part of EU";
             when some_taxes_powers => return "Some taxes powers";
             when no_taxes_powers => return "No taxes powers";
             when no_parl_or_assembly => return "No Parl/assembly";
             when unify_with_republic_of_ireland => return "Unify with Republic of Ireland";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Opdvni1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Opdvni1_Type( i : String ) return Opdvni1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return independent;
         elsif i = "2" then
            return part_of_eu;
         elsif i = "3" then
            return some_taxes_powers;
         elsif i = "4" then
            return no_taxes_powers;
         elsif i = "5" then
            return no_parl_or_assembly;
         elsif i = "6" then
            return unify_with_republic_of_ireland;
        end if;
        Put_Line("Convert_Opdvni1_Type: Unmatched string |" & i & "|" );
        return Opdvni1_Type'First; -- never actually gets here; for compiler only
    end Convert_Opdvni1_Type;



    function Pretty_Print( i : Opdvni2_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when just_about_always => return "Just about always";
             when most_of_the_time => return "Most of the time";
             when only_some_of_the_time => return "Only some of the time";
             when almost_never => return "Almost never";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Opdvni2_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Opdvni2_Type( i : String ) return Opdvni2_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return just_about_always;
         elsif i = "2" then
            return most_of_the_time;
         elsif i = "3" then
            return only_some_of_the_time;
         elsif i = "4" then
            return almost_never;
        end if;
        Put_Line("Convert_Opdvni2_Type: Unmatched string |" & i & "|" );
        return Opdvni2_Type'First; -- never actually gets here; for compiler only
    end Convert_Opdvni2_Type;



    function Pretty_Print( i : Openv1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when strongly_agree => return "Strongly agree";
             when agree => return "Agree";
             when neither_agree_nor_disagree => return "Neither agree nor disagree";
             when disagree => return "Disagree";
             when strongly_disagree => return "Strongly disagree";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Openv1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Openv1_Type( i : String ) return Openv1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return strongly_agree;
         elsif i = "2" then
            return agree;
         elsif i = "3" then
            return neither_agree_nor_disagree;
         elsif i = "4" then
            return disagree;
         elsif i = "5" then
            return strongly_disagree;
        end if;
        Put_Line("Convert_Openv1_Type: Unmatched string |" & i & "|" );
        return Openv1_Type'First; -- never actually gets here; for compiler only
    end Convert_Openv1_Type;



    function Pretty_Print( i : Openva_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when agree_strongly => return "Agree strongly";
             when agree => return "Agree";
             when disagree => return "Disagree";
             when disagree_strongly => return "Disagree strongly";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Openva_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Openva_Type( i : String ) return Openva_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return agree_strongly;
         elsif i = "2" then
            return agree;
         elsif i = "3" then
            return disagree;
         elsif i = "4" then
            return disagree_strongly;
        end if;
        Put_Line("Convert_Openva_Type: Unmatched string |" & i & "|" );
        return Openva_Type'First; -- never actually gets here; for compiler only
    end Convert_Openva_Type;



    function Pretty_Print( i : Openvb_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when agree_strongly => return "Agree strongly";
             when agree => return "Agree";
             when disagree => return "Disagree";
             when disagree_strongly => return "Disagree strongly";
             when already_changed_way_of_life => return "Already changed way of life";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Openvb_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Openvb_Type( i : String ) return Openvb_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return agree_strongly;
         elsif i = "2" then
            return agree;
         elsif i = "3" then
            return disagree;
         elsif i = "4" then
            return disagree_strongly;
         elsif i = "5" then
            return already_changed_way_of_life;
        end if;
        Put_Line("Convert_Openvb_Type: Unmatched string |" & i & "|" );
        return Openvb_Type'First; -- never actually gets here; for compiler only
    end Convert_Openvb_Type;



    function Pretty_Print( i : Openvc_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when frequently => return "Frequently";
             when sometimes => return "Sometimes";
             when rarely => return "Rarely";
             when never => return "Never";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Openvc_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Openvc_Type( i : String ) return Openvc_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return frequently;
         elsif i = "2" then
            return sometimes;
         elsif i = "3" then
            return rarely;
         elsif i = "4" then
            return never;
        end if;
        Put_Line("Convert_Openvc_Type: Unmatched string |" & i & "|" );
        return Openvc_Type'First; -- never actually gets here; for compiler only
    end Convert_Openvc_Type;



    function Pretty_Print( i : Opeur1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when a_good_thing => return "A good thing";
             when a_bad_thing => return "A bad thing";
             when neither_good_nor_bad => return "Neither good nor bad";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Opeur1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Opeur1_Type( i : String ) return Opeur1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return a_good_thing;
         elsif i = "2" then
            return a_bad_thing;
         elsif i = "3" then
            return neither_good_nor_bad;
        end if;
        Put_Line("Convert_Opeur1_Type: Unmatched string |" & i & "|" );
        return Opeur1_Type'First; -- never actually gets here; for compiler only
    end Convert_Opeur1_Type;



    function Pretty_Print( i : Opeur2_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when benefited => return "Benefited";
             when not_benefited => return "Not benefited";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Opeur2_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Opeur2_Type( i : String ) return Opeur2_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return benefited;
         elsif i = "2" then
            return not_benefited;
        end if;
        Put_Line("Convert_Opeur2_Type: Unmatched string |" & i & "|" );
        return Opeur2_Type'First; -- never actually gets here; for compiler only
    end Convert_Opeur2_Type;



    function Pretty_Print( i : Opeur3_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when leave_the_eu => return "Leave the EU";
             when stay_in_cut_eu_power => return "Stay in,cut EU power";
             when leave_things_as_they_are => return "Leave things as they are";
             when stay_in_more_eu_powr => return "Stay in,more EU powr";
             when form_single_eu_govt => return "Form single EU Govt";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Opeur3_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Opeur3_Type( i : String ) return Opeur3_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return leave_the_eu;
         elsif i = "2" then
            return stay_in_cut_eu_power;
         elsif i = "3" then
            return leave_things_as_they_are;
         elsif i = "4" then
            return stay_in_more_eu_powr;
         elsif i = "5" then
            return form_single_eu_govt;
        end if;
        Put_Line("Convert_Opeur3_Type: Unmatched string |" & i & "|" );
        return Opeur3_Type'First; -- never actually gets here; for compiler only
    end Convert_Opeur3_Type;



    function Pretty_Print( i : Opeur4_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when join_the_euro => return "Join the Euro";
             when not_join_the_euro => return "Not join the Euro";
             when would_not_vote => return "Would not vote";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Opeur4_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Opeur4_Type( i : String ) return Opeur4_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return join_the_euro;
         elsif i = "2" then
            return not_join_the_euro;
         elsif i = "3" then
            return would_not_vote;
        end if;
        Put_Line("Convert_Opeur4_Type: Unmatched string |" & i & "|" );
        return Opeur4_Type'First; -- never actually gets here; for compiler only
    end Convert_Opeur4_Type;



    function Pretty_Print( i : Opfama_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when strongly_agree => return "Strongly agree";
             when agree => return "Agree";
             when not_agree_or_disagree => return "Not agree/disagree";
             when disagree => return "Disagree";
             when strongly_disagree => return "Strongly disagree";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Opfama_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Opfama_Type( i : String ) return Opfama_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return strongly_agree;
         elsif i = "2" then
            return agree;
         elsif i = "3" then
            return not_agree_or_disagree;
         elsif i = "4" then
            return disagree;
         elsif i = "5" then
            return strongly_disagree;
        end if;
        Put_Line("Convert_Opfama_Type: Unmatched string |" & i & "|" );
        return Opfama_Type'First; -- never actually gets here; for compiler only
    end Convert_Opfama_Type;



    function Pretty_Print( i : Opfamj_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when strongly_agree => return "Strongly agree";
             when agree => return "Agree";
             when neithr_agree_disagree => return "Neithr agree, disagree";
             when disagree => return "Disagree";
             when strongly_disagree => return "Strongly disagree";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Opfamj_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Opfamj_Type( i : String ) return Opfamj_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return strongly_agree;
         elsif i = "2" then
            return agree;
         elsif i = "3" then
            return neithr_agree_disagree;
         elsif i = "4" then
            return disagree;
         elsif i = "5" then
            return strongly_disagree;
        end if;
        Put_Line("Convert_Opfamj_Type: Unmatched string |" & i & "|" );
        return Opfamj_Type'First; -- never actually gets here; for compiler only
    end Convert_Opfamj_Type;



    function Pretty_Print( i : Opfamo_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when strongly_agree => return "Strongly agree";
             when agree => return "Agree";
             when neithr_agree_disagree => return "Neithr agree, disagree";
             when disagree => return "Disagree";
             when strongly_disagree => return "Strongly disagree";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Opfamo_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Opfamo_Type( i : String ) return Opfamo_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return strongly_agree;
         elsif i = "2" then
            return agree;
         elsif i = "3" then
            return neithr_agree_disagree;
         elsif i = "4" then
            return disagree;
         elsif i = "5" then
            return strongly_disagree;
        end if;
        Put_Line("Convert_Opfamo_Type: Unmatched string |" & i & "|" );
        return Opfamo_Type'First; -- never actually gets here; for compiler only
    end Convert_Opfamo_Type;



    function Pretty_Print( i : Opfamq_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when strongly_agree => return "Strongly agree";
             when agree => return "Agree";
             when neithr_agree_disagr => return "Neithr agree, disagr";
             when disagree => return "Disagree";
             when strongly_disagree => return "Strongly disagree";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Opfamq_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Opfamq_Type( i : String ) return Opfamq_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return strongly_agree;
         elsif i = "2" then
            return agree;
         elsif i = "3" then
            return neithr_agree_disagr;
         elsif i = "4" then
            return disagree;
         elsif i = "5" then
            return strongly_disagree;
        end if;
        Put_Line("Convert_Opfamq_Type: Unmatched string |" & i & "|" );
        return Opfamq_Type'First; -- never actually gets here; for compiler only
    end Convert_Opfamq_Type;



    function Pretty_Print( i : Opfamr_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when strongly_agree => return "Strongly agree";
             when agree => return "Agree";
             when neithr_agree_disagr => return "Neithr agree, disagr";
             when disagree => return "Disagree";
             when strongly_disagree => return "Strongly disagree";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Opfamr_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Opfamr_Type( i : String ) return Opfamr_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return strongly_agree;
         elsif i = "2" then
            return agree;
         elsif i = "3" then
            return neithr_agree_disagr;
         elsif i = "4" then
            return disagree;
         elsif i = "5" then
            return strongly_disagree;
        end if;
        Put_Line("Convert_Opfamr_Type: Unmatched string |" & i & "|" );
        return Opfamr_Type'First; -- never actually gets here; for compiler only
    end Convert_Opfamr_Type;



    function Pretty_Print( i : Ophla_Type ) return String is
    begin
         case i is
             when cant_choose => return "Can't choose";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when strongly_agree => return "Strongly agree";
             when agree => return "Agree";
             when not_agree_or_disagree => return "Not agree/disagree";
             when disagree => return "Disagree";
             when strongly_disagr => return "Strongly disagr";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ophla_Type ) return Boolean is
    begin
         case i is
             when cant_choose => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ophla_Type( i : String ) return Ophla_Type is
    begin
         if i = "-1" then
            return cant_choose;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return strongly_agree;
         elsif i = "2" then
            return agree;
         elsif i = "3" then
            return not_agree_or_disagree;
         elsif i = "4" then
            return disagree;
         elsif i = "5" then
            return strongly_disagr;
        end if;
        Put_Line("Convert_Ophla_Type: Unmatched string |" & i & "|" );
        return Ophla_Type'First; -- never actually gets here; for compiler only
    end Convert_Ophla_Type;



    function Pretty_Print( i : Ophlb_Type ) return String is
    begin
         case i is
             when cant_choose => return "Can't choose";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when strongly_agree => return "Strongly agree";
             when agree => return "Agree";
             when not_agree_or_disagr => return "Not agree/disagr";
             when disagree => return "Disagree";
             when strongly_disagr => return "Strongly disagr";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ophlb_Type ) return Boolean is
    begin
         case i is
             when cant_choose => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ophlb_Type( i : String ) return Ophlb_Type is
    begin
         if i = "-1" then
            return cant_choose;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return strongly_agree;
         elsif i = "2" then
            return agree;
         elsif i = "3" then
            return not_agree_or_disagr;
         elsif i = "4" then
            return disagree;
         elsif i = "5" then
            return strongly_disagr;
        end if;
        Put_Line("Convert_Ophlb_Type: Unmatched string |" & i & "|" );
        return Ophlb_Type'First; -- never actually gets here; for compiler only
    end Convert_Ophlb_Type;



    function Pretty_Print( i : Opiss1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when great_deal => return "Great deal";
             when fair_amount => return "Fair amount";
             when not_very_much => return "Not very much";
             when not_at_all => return "Not at all";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Opiss1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Opiss1_Type( i : String ) return Opiss1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return great_deal;
         elsif i = "2" then
            return fair_amount;
         elsif i = "3" then
            return not_very_much;
         elsif i = "4" then
            return not_at_all;
        end if;
        Put_Line("Convert_Opiss1_Type: Unmatched string |" & i & "|" );
        return Opiss1_Type'First; -- never actually gets here; for compiler only
    end Convert_Opiss1_Type;



    function Pretty_Print( i : Opnata_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when strongly_agree => return "Strongly agree";
             when agree => return "Agree";
             when neither_agree_or_disagree => return "Neither agree/disagree";
             when disagree => return "Disagree";
             when strongly_disagree => return "Strongly disagree";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Opnata_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Opnata_Type( i : String ) return Opnata_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return strongly_agree;
         elsif i = "2" then
            return agree;
         elsif i = "3" then
            return neither_agree_or_disagree;
         elsif i = "4" then
            return disagree;
         elsif i = "5" then
            return strongly_disagree;
        end if;
        Put_Line("Convert_Opnata_Type: Unmatched string |" & i & "|" );
        return Opnata_Type'First; -- never actually gets here; for compiler only
    end Convert_Opnata_Type;



    function Pretty_Print( i : Opnisec_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when unionist => return "Unionist";
             when nationalist => return "Nationalist";
             when neither => return "Neither";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Opnisec_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Opnisec_Type( i : String ) return Opnisec_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return unionist;
         elsif i = "2" then
            return nationalist;
         elsif i = "3" then
            return neither;
         elsif i = "4" then
            return other;
        end if;
        Put_Line("Convert_Opnisec_Type: Unmatched string |" & i & "|" );
        return Opnisec_Type'First; -- never actually gets here; for compiler only
    end Convert_Opnisec_Type;



    function Pretty_Print( i : Oppol1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when maintain_order => return "Maintain order";
             when people_more_say => return "People more say";
             when rising_prices => return "Rising prices";
             when free_speech => return "Free speech";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Oppol1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Oppol1_Type( i : String ) return Oppol1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return maintain_order;
         elsif i = "2" then
            return people_more_say;
         elsif i = "3" then
            return rising_prices;
         elsif i = "4" then
            return free_speech;
        end if;
        Put_Line("Convert_Oppol1_Type: Unmatched string |" & i & "|" );
        return Oppol1_Type'First; -- never actually gets here; for compiler only
    end Convert_Oppol1_Type;



    function Pretty_Print( i : Oppol2_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when maintain_order => return "Maintain order";
             when people_more_say => return "People more say";
             when rising_prices => return "Rising prices";
             when freedom_of_speech => return "Freedom of speech";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Oppol2_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Oppol2_Type( i : String ) return Oppol2_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return maintain_order;
         elsif i = "2" then
            return people_more_say;
         elsif i = "3" then
            return rising_prices;
         elsif i = "4" then
            return freedom_of_speech;
        end if;
        Put_Line("Convert_Oppol2_Type: Unmatched string |" & i & "|" );
        return Oppol2_Type'First; -- never actually gets here; for compiler only
    end Convert_Oppol2_Type;



    function Pretty_Print( i : Oppol3_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when inflation => return "Inflation";
             when unemployment => return "Unemployment";
             when neither => return "Neither";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Oppol3_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Oppol3_Type( i : String ) return Oppol3_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return inflation;
         elsif i = "2" then
            return unemployment;
         elsif i = "3" then
            return neither;
        end if;
        Put_Line("Convert_Oppol3_Type: Unmatched string |" & i & "|" );
        return Oppol3_Type'First; -- never actually gets here; for compiler only
    end Convert_Oppol3_Type;



    function Pretty_Print( i : Oppol4_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when living_standards => return "Living standards";
             when the_environment => return "The environment";
             when neither => return "Neither";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Oppol4_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Oppol4_Type( i : String ) return Oppol4_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return living_standards;
         elsif i = "2" then
            return the_environment;
         elsif i = "3" then
            return neither;
        end if;
        Put_Line("Convert_Oppol4_Type: Unmatched string |" & i & "|" );
        return Oppol4_Type'First; -- never actually gets here; for compiler only
    end Convert_Oppol4_Type;



    function Pretty_Print( i : Oppola_Type ) return String is
    begin
         case i is
             when cant_choose => return "Can't choose";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when strongly_agree => return "Strongly agree";
             when agree => return "Agree";
             when not_agree_disagree => return "Not agree, disagree";
             when disagree => return "Disagree";
             when strongly_disagree => return "Strongly disagree";
             when dont_know => return "Don't know";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Oppola_Type ) return Boolean is
    begin
         case i is
             when cant_choose => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Oppola_Type( i : String ) return Oppola_Type is
    begin
         if i = "-1" then
            return cant_choose;
         elsif i = "-2" then
            return refused;
         elsif i = "9" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return strongly_agree;
         elsif i = "2" then
            return agree;
         elsif i = "3" then
            return not_agree_disagree;
         elsif i = "4" then
            return disagree;
         elsif i = "5" then
            return strongly_disagree;
         elsif i = "8" then
            return dont_know;
        end if;
        Put_Line("Convert_Oppola_Type: Unmatched string |" & i & "|" );
        return Oppola_Type'First; -- never actually gets here; for compiler only
    end Convert_Oppola_Type;



    function Pretty_Print( i : Oprlg1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when no_religion => return "No religion";
             when muslim_or_islam => return "Muslim/Islam";
             when hindu => return "Hindu";
             when jewish => return "Jewish";
             when sikh => return "Sikh";
             when other => return "Other";
             when catholic_ni => return "Catholic (NI)";
             when presbyterian_ni => return "Presbyterian (NI)";
             when church_of_irelandni => return "Church of Ireland(NI)";
             when c_of_e_or_anglican => return "C of E /Anglican";
             when methodist_ni => return "Methodist (NI)";
             when baptist_ni => return "Baptist (NI)";
             when free_presbyterianni => return "Free Presbyterian(NI)";
             when bretheren_ni => return "Bretheren (NI)";
             when protestant_nesni => return "Protestant n.e.s.(NI)";
             when other_christianni => return "Other Christian(NI)";
             when jewish_ni => return "Jewish (NI)";
             when oth_non_christianni => return "Oth non-Christian(NI)";
             when roman_catholic => return "Roman Catholic";
             when presbyt_or_c_of_scot => return "Presbyt/C of Scot";
             when methodist => return "Methodist";
             when baptist => return "Baptist";
             when congregation_or_urc => return "Congregation/URC";
             when other_christian => return "Other Christian";
             when christian => return "Christian";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Oprlg1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Oprlg1_Type( i : String ) return Oprlg1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return no_religion;
         elsif i = "10" then
            return muslim_or_islam;
         elsif i = "11" then
            return hindu;
         elsif i = "12" then
            return jewish;
         elsif i = "13" then
            return sikh;
         elsif i = "15" then
            return sikh;
         elsif i = "14" then
            return other;
         elsif i = "16" then
            return other;
         elsif i = "17" then
            return catholic_ni;
         elsif i = "18" then
            return presbyterian_ni;
         elsif i = "19" then
            return church_of_irelandni;
         elsif i = "2" then
            return c_of_e_or_anglican;
         elsif i = "20" then
            return methodist_ni;
         elsif i = "21" then
            return baptist_ni;
         elsif i = "22" then
            return free_presbyterianni;
         elsif i = "23" then
            return bretheren_ni;
         elsif i = "24" then
            return protestant_nesni;
         elsif i = "25" then
            return other_christianni;
         elsif i = "26" then
            return jewish_ni;
         elsif i = "27" then
            return oth_non_christianni;
         elsif i = "3" then
            return roman_catholic;
         elsif i = "4" then
            return presbyt_or_c_of_scot;
         elsif i = "5" then
            return methodist;
         elsif i = "6" then
            return baptist;
         elsif i = "7" then
            return congregation_or_urc;
         elsif i = "8" then
            return other_christian;
         elsif i = "9" then
            return christian;
        end if;
        Put_Line("Convert_Oprlg1_Type: Unmatched string |" & i & "|" );
        return Oprlg1_Type'First; -- never actually gets here; for compiler only
    end Convert_Oprlg1_Type;



    function Pretty_Print( i : Oprlg2_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when once_a_wk_or_plus => return "Once a wk or +";
             when at_least_1x_month => return "At least 1x month";
             when at_least_1x_year => return "At least 1x year";
             when practically_never => return "Practically never";
             when only_weddings_etc => return "Only weddings etc";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Oprlg2_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Oprlg2_Type( i : String ) return Oprlg2_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return once_a_wk_or_plus;
         elsif i = "2" then
            return at_least_1x_month;
         elsif i = "3" then
            return at_least_1x_year;
         elsif i = "4" then
            return practically_never;
         elsif i = "5" then
            return only_weddings_etc;
        end if;
        Put_Line("Convert_Oprlg2_Type: Unmatched string |" & i & "|" );
        return Oprlg2_Type'First; -- never actually gets here; for compiler only
    end Convert_Oprlg2_Type;



    function Pretty_Print( i : Oprlg3_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when a_little_diff => return "A little diff";
             when some_diff => return "Some diff";
             when a_great_diff => return "A great diff";
             when no_difference => return "No difference";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Oprlg3_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Oprlg3_Type( i : String ) return Oprlg3_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return a_little_diff;
         elsif i = "2" then
            return some_diff;
         elsif i = "3" then
            return a_great_diff;
         elsif i = "4" then
            return no_difference;
        end if;
        Put_Line("Convert_Oprlg3_Type: Unmatched string |" & i & "|" );
        return Oprlg3_Type'First; -- never actually gets here; for compiler only
    end Convert_Oprlg3_Type;



    function Pretty_Print( i : Oprlg4_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when yes => return "Yes";
             when unwilling_to_answer => return "Unwilling to answer";
             when no_religion => return "No religion";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Oprlg4_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Oprlg4_Type( i : String ) return Oprlg4_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return unwilling_to_answer;
         elsif i = "3" then
            return no_religion;
        end if;
        Put_Line("Convert_Oprlg4_Type: Unmatched string |" & i & "|" );
        return Oprlg4_Type'First; -- never actually gets here; for compiler only
    end Convert_Oprlg4_Type;



    function Pretty_Print( i : Oprlg5_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when catholic => return "Catholic";
             when jewish => return "Jewish";
             when other_non_christian => return "Other non-Christian";
             when no_religion => return "No religion";
             when muslim => return "Muslim";
             when sikh => return "Sikh";
             when any_other_religion => return "Any other religion";
             when presbyterian => return "Presbyterian";
             when church_of_ireland => return "Church of Ireland";
             when methodist => return "Methodist";
             when baptist => return "Baptist";
             when free_presbyterian => return "Free Presbyterian";
             when brethren => return "Brethren";
             when protestant_not_specified => return "Protestant - not specified";
             when other_christian => return "Other Christian";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Oprlg5_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Oprlg5_Type( i : String ) return Oprlg5_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return catholic;
         elsif i = "10" then
            return jewish;
         elsif i = "11" then
            return other_non_christian;
         elsif i = "12" then
            return no_religion;
         elsif i = "16" then
            return no_religion;
         elsif i = "13" then
            return muslim;
         elsif i = "14" then
            return sikh;
         elsif i = "15" then
            return any_other_religion;
         elsif i = "2" then
            return presbyterian;
         elsif i = "3" then
            return church_of_ireland;
         elsif i = "4" then
            return methodist;
         elsif i = "5" then
            return baptist;
         elsif i = "6" then
            return free_presbyterian;
         elsif i = "7" then
            return brethren;
         elsif i = "8" then
            return protestant_not_specified;
         elsif i = "9" then
            return other_christian;
        end if;
        Put_Line("Convert_Oprlg5_Type: Unmatched string |" & i & "|" );
        return Oprlg5_Type'First; -- never actually gets here; for compiler only
    end Convert_Oprlg5_Type;



    function Pretty_Print( i : Oprlg6_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when catholic => return "Catholic";
             when jewish => return "Jewish";
             when other_non_christian => return "Other non-Christian";
             when no_religion => return "No religion";
             when presbyterian => return "Presbyterian";
             when church_of_ireland => return "Church of Ireland";
             when methodist => return "Methodist";
             when baptist => return "Baptist";
             when free_presbyterian => return "Free Presbyterian";
             when brethren => return "Brethren";
             when protestant_not_specified => return "Protestant - not specified";
             when other_christian => return "Other Christian";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Oprlg6_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Oprlg6_Type( i : String ) return Oprlg6_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return catholic;
         elsif i = "10" then
            return jewish;
         elsif i = "11" then
            return other_non_christian;
         elsif i = "12" then
            return no_religion;
         elsif i = "2" then
            return presbyterian;
         elsif i = "3" then
            return church_of_ireland;
         elsif i = "4" then
            return methodist;
         elsif i = "5" then
            return baptist;
         elsif i = "6" then
            return free_presbyterian;
         elsif i = "7" then
            return brethren;
         elsif i = "8" then
            return protestant_not_specified;
         elsif i = "9" then
            return other_christian;
        end if;
        Put_Line("Convert_Oprlg6_Type: Unmatched string |" & i & "|" );
        return Oprlg6_Type'First; -- never actually gets here; for compiler only
    end Convert_Oprlg6_Type;



    function Pretty_Print( i : Opsocb_Type ) return String is
    begin
         case i is
             when cant_choose => return "Can't choose";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when strongly_agree => return "Strongly agree";
             when agree => return "Agree";
             when not_agree_or_disag => return "Not agree/disag";
             when disagree => return "Disagree";
             when strongly_disagree => return "Strongly disagree";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Opsocb_Type ) return Boolean is
    begin
         case i is
             when cant_choose => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Opsocb_Type( i : String ) return Opsocb_Type is
    begin
         if i = "-1" then
            return cant_choose;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return strongly_agree;
         elsif i = "2" then
            return agree;
         elsif i = "3" then
            return not_agree_or_disag;
         elsif i = "4" then
            return disagree;
         elsif i = "5" then
            return strongly_disagree;
        end if;
        Put_Line("Convert_Opsocb_Type: Unmatched string |" & i & "|" );
        return Opsocb_Type'First; -- never actually gets here; for compiler only
    end Convert_Opsocb_Type;



    function Pretty_Print( i : Opsocd_Type ) return String is
    begin
         case i is
             when cant_choose => return "Can't choose";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when strongly_agree => return "Strongly agree";
             when agree => return "Agree";
             when not_agree_or_disag => return "Not agree/disag";
             when disagree => return "Disagree";
             when strongly_disagr => return "Strongly disagr";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Opsocd_Type ) return Boolean is
    begin
         case i is
             when cant_choose => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Opsocd_Type( i : String ) return Opsocd_Type is
    begin
         if i = "-1" then
            return cant_choose;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return strongly_agree;
         elsif i = "2" then
            return agree;
         elsif i = "3" then
            return not_agree_or_disag;
         elsif i = "4" then
            return disagree;
         elsif i = "5" then
            return strongly_disagr;
        end if;
        Put_Line("Convert_Opsocd_Type: Unmatched string |" & i & "|" );
        return Opsocd_Type'First; -- never actually gets here; for compiler only
    end Convert_Opsocd_Type;



    function Pretty_Print( i : Opsocg_Type ) return String is
    begin
         case i is
             when cant_choose => return "Can't choose";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when strongly_agree => return "Strongly agree";
             when agree => return "Agree";
             when neither_agree_disagree => return "Neither agree, disagree";
             when disagree => return "Disagree";
             when strongly_disagree => return "Strongly disagree";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Opsocg_Type ) return Boolean is
    begin
         case i is
             when cant_choose => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Opsocg_Type( i : String ) return Opsocg_Type is
    begin
         if i = "-1" then
            return cant_choose;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return strongly_agree;
         elsif i = "2" then
            return agree;
         elsif i = "3" then
            return neither_agree_disagree;
         elsif i = "4" then
            return disagree;
         elsif i = "5" then
            return strongly_disagree;
        end if;
        Put_Line("Convert_Opsocg_Type: Unmatched string |" & i & "|" );
        return Opsocg_Type'First; -- never actually gets here; for compiler only
    end Convert_Opsocg_Type;



    function Pretty_Print( i : Opxpcr_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when ok_to_use_credit => return "OK to use credit";
             when especially_reluctant => return "Especially reluctant";
             when neither_ok_or_reluctant => return "Neither OK/reluctant";
             when never_use_credit => return "Never use credit";
             when cant_get_credit => return "Can't get credit";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Opxpcr_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Opxpcr_Type( i : String ) return Opxpcr_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return ok_to_use_credit;
         elsif i = "2" then
            return especially_reluctant;
         elsif i = "3" then
            return neither_ok_or_reluctant;
         elsif i = "4" then
            return never_use_credit;
         elsif i = "5" then
            return cant_get_credit;
        end if;
        Put_Line("Convert_Opxpcr_Type: Unmatched string |" & i & "|" );
        return Opxpcr_Type'First; -- never actually gets here; for compiler only
    end Convert_Opxpcr_Type;



    function Pretty_Print( i : Opxpsv_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when ok_to_use_savings => return "OK to use savings";
             when especially_reluctant => return "Especially reluctant";
             when neither_ok_or_reluctant => return "Neither OK/reluctant";
             when has_no_savings => return "Has no savings";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Opxpsv_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Opxpsv_Type( i : String ) return Opxpsv_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return ok_to_use_savings;
         elsif i = "2" then
            return especially_reluctant;
         elsif i = "3" then
            return neither_ok_or_reluctant;
         elsif i = "4" then
            return has_no_savings;
        end if;
        Put_Line("Convert_Opxpsv_Type: Unmatched string |" & i & "|" );
        return Opxpsv_Type'First; -- never actually gets here; for compiler only
    end Convert_Opxpsv_Type;



    function Pretty_Print( i : Orgaa_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when active_polit_party => return "Active polit party";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Orgaa_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Orgaa_Type( i : String ) return Orgaa_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return active_polit_party;
        end if;
        Put_Line("Convert_Orgaa_Type: Unmatched string |" & i & "|" );
        return Orgaa_Type'First; -- never actually gets here; for compiler only
    end Convert_Orgaa_Type;



    function Pretty_Print( i : Orgab_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when active_trade_union => return "Active trade union";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Orgab_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Orgab_Type( i : String ) return Orgab_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return active_trade_union;
        end if;
        Put_Line("Convert_Orgab_Type: Unmatched string |" & i & "|" );
        return Orgab_Type'First; -- never actually gets here; for compiler only
    end Convert_Orgab_Type;



    function Pretty_Print( i : Orgac_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when active_envir_grp => return "Active envir grp";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Orgac_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Orgac_Type( i : String ) return Orgac_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return active_envir_grp;
        end if;
        Put_Line("Convert_Orgac_Type: Unmatched string |" & i & "|" );
        return Orgac_Type'First; -- never actually gets here; for compiler only
    end Convert_Orgac_Type;



    function Pretty_Print( i : Orgad_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when active_parent_or_schl_assoc => return "Active parent/schl assoc";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Orgad_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Orgad_Type( i : String ) return Orgad_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return active_parent_or_schl_assoc;
        end if;
        Put_Line("Convert_Orgad_Type: Unmatched string |" & i & "|" );
        return Orgad_Type'First; -- never actually gets here; for compiler only
    end Convert_Orgad_Type;



    function Pretty_Print( i : Orgae_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when active_tenants_or_res_grp => return "Active tenants/res grp";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Orgae_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Orgae_Type( i : String ) return Orgae_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return active_tenants_or_res_grp;
        end if;
        Put_Line("Convert_Orgae_Type: Unmatched string |" & i & "|" );
        return Orgae_Type'First; -- never actually gets here; for compiler only
    end Convert_Orgae_Type;



    function Pretty_Print( i : Orgaf_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when active_relig_grp => return "Active relig grp";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Orgaf_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Orgaf_Type( i : String ) return Orgaf_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return active_relig_grp;
        end if;
        Put_Line("Convert_Orgaf_Type: Unmatched string |" & i & "|" );
        return Orgaf_Type'First; -- never actually gets here; for compiler only
    end Convert_Orgaf_Type;



    function Pretty_Print( i : Orgag_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when active_vol_svce_grp => return "Active vol svce grp";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Orgag_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Orgag_Type( i : String ) return Orgag_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return active_vol_svce_grp;
        end if;
        Put_Line("Convert_Orgag_Type: Unmatched string |" & i & "|" );
        return Orgag_Type'First; -- never actually gets here; for compiler only
    end Convert_Orgag_Type;



    function Pretty_Print( i : Orgah_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when active_other_civic_grp => return "Active other civic grp";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Orgah_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Orgah_Type( i : String ) return Orgah_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return active_other_civic_grp;
        end if;
        Put_Line("Convert_Orgah_Type: Unmatched string |" & i & "|" );
        return Orgah_Type'First; -- never actually gets here; for compiler only
    end Convert_Orgah_Type;



    function Pretty_Print( i : Orgai_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when active_social_club => return "Active social club";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Orgai_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Orgai_Type( i : String ) return Orgai_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return active_social_club;
        end if;
        Put_Line("Convert_Orgai_Type: Unmatched string |" & i & "|" );
        return Orgai_Type'First; -- never actually gets here; for compiler only
    end Convert_Orgai_Type;



    function Pretty_Print( i : Orgaj_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when active_sports_club => return "Active sports club";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Orgaj_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Orgaj_Type( i : String ) return Orgaj_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return active_sports_club;
        end if;
        Put_Line("Convert_Orgaj_Type: Unmatched string |" & i & "|" );
        return Orgaj_Type'First; -- never actually gets here; for compiler only
    end Convert_Orgaj_Type;



    function Pretty_Print( i : Orgak_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when active_womens_inst => return "Active womens inst";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Orgak_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Orgak_Type( i : String ) return Orgak_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return active_womens_inst;
        end if;
        Put_Line("Convert_Orgak_Type: Unmatched string |" & i & "|" );
        return Orgak_Type'First; -- never actually gets here; for compiler only
    end Convert_Orgak_Type;



    function Pretty_Print( i : Orgal_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when active_womens_grp => return "Active womens grp";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Orgal_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Orgal_Type( i : String ) return Orgal_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return active_womens_grp;
        end if;
        Put_Line("Convert_Orgal_Type: Unmatched string |" & i & "|" );
        return Orgal_Type'First; -- never actually gets here; for compiler only
    end Convert_Orgal_Type;



    function Pretty_Print( i : Orgam_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when active_other_group => return "Active other group";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Orgam_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Orgam_Type( i : String ) return Orgam_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return active_other_group;
        end if;
        Put_Line("Convert_Orgam_Type: Unmatched string |" & i & "|" );
        return Orgam_Type'First; -- never actually gets here; for compiler only
    end Convert_Orgam_Type;



    function Pretty_Print( i : Orgao_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when active_prof_assoc => return "Active prof assoc";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Orgao_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Orgao_Type( i : String ) return Orgao_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return active_prof_assoc;
        end if;
        Put_Line("Convert_Orgao_Type: Unmatched string |" & i & "|" );
        return Orgao_Type'First; -- never actually gets here; for compiler only
    end Convert_Orgao_Type;



    function Pretty_Print( i : Orgap_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when active_pensioner_gp => return "Active pensioner gp";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Orgap_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Orgap_Type( i : String ) return Orgap_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return active_pensioner_gp;
        end if;
        Put_Line("Convert_Orgap_Type: Unmatched string |" & i & "|" );
        return Orgap_Type'First; -- never actually gets here; for compiler only
    end Convert_Orgap_Type;



    function Pretty_Print( i : Orgaq_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when active_scouts_or_guides => return "Active Scouts/Guides";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Orgaq_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Orgaq_Type( i : String ) return Orgaq_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return active_scouts_or_guides;
        end if;
        Put_Line("Convert_Orgaq_Type: Unmatched string |" & i & "|" );
        return Orgaq_Type'First; -- never actually gets here; for compiler only
    end Convert_Orgaq_Type;



    function Pretty_Print( i : Orgma_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when member_polit_party => return "Member polit party";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Orgma_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Orgma_Type( i : String ) return Orgma_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return member_polit_party;
        end if;
        Put_Line("Convert_Orgma_Type: Unmatched string |" & i & "|" );
        return Orgma_Type'First; -- never actually gets here; for compiler only
    end Convert_Orgma_Type;



    function Pretty_Print( i : Orgmb_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when member_trade_union => return "Member trade union";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Orgmb_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Orgmb_Type( i : String ) return Orgmb_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return member_trade_union;
        end if;
        Put_Line("Convert_Orgmb_Type: Unmatched string |" & i & "|" );
        return Orgmb_Type'First; -- never actually gets here; for compiler only
    end Convert_Orgmb_Type;



    function Pretty_Print( i : Orgmc_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when member_envir_grp => return "Member envir grp";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Orgmc_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Orgmc_Type( i : String ) return Orgmc_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return member_envir_grp;
        end if;
        Put_Line("Convert_Orgmc_Type: Unmatched string |" & i & "|" );
        return Orgmc_Type'First; -- never actually gets here; for compiler only
    end Convert_Orgmc_Type;



    function Pretty_Print( i : Orgmd_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when member_parent_or_schl_assoc => return "Member parent/schl assoc";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Orgmd_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Orgmd_Type( i : String ) return Orgmd_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return member_parent_or_schl_assoc;
        end if;
        Put_Line("Convert_Orgmd_Type: Unmatched string |" & i & "|" );
        return Orgmd_Type'First; -- never actually gets here; for compiler only
    end Convert_Orgmd_Type;



    function Pretty_Print( i : Orgme_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when memb_tenants_or_res_grp => return "Memb tenants/res grp";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Orgme_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Orgme_Type( i : String ) return Orgme_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return memb_tenants_or_res_grp;
        end if;
        Put_Line("Convert_Orgme_Type: Unmatched string |" & i & "|" );
        return Orgme_Type'First; -- never actually gets here; for compiler only
    end Convert_Orgme_Type;



    function Pretty_Print( i : Orgmf_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when member_relig_grp => return "Member relig grp";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Orgmf_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Orgmf_Type( i : String ) return Orgmf_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return member_relig_grp;
        end if;
        Put_Line("Convert_Orgmf_Type: Unmatched string |" & i & "|" );
        return Orgmf_Type'First; -- never actually gets here; for compiler only
    end Convert_Orgmf_Type;



    function Pretty_Print( i : Orgmg_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when member_vol_svce_grp => return "Member vol svce grp";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Orgmg_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Orgmg_Type( i : String ) return Orgmg_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return member_vol_svce_grp;
        end if;
        Put_Line("Convert_Orgmg_Type: Unmatched string |" & i & "|" );
        return Orgmg_Type'First; -- never actually gets here; for compiler only
    end Convert_Orgmg_Type;



    function Pretty_Print( i : Orgmh_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when member_other_civic_grp => return "Member other civic grp";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Orgmh_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Orgmh_Type( i : String ) return Orgmh_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return member_other_civic_grp;
        end if;
        Put_Line("Convert_Orgmh_Type: Unmatched string |" & i & "|" );
        return Orgmh_Type'First; -- never actually gets here; for compiler only
    end Convert_Orgmh_Type;



    function Pretty_Print( i : Orgmi_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when member_social_club => return "Member social club";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Orgmi_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Orgmi_Type( i : String ) return Orgmi_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return member_social_club;
        end if;
        Put_Line("Convert_Orgmi_Type: Unmatched string |" & i & "|" );
        return Orgmi_Type'First; -- never actually gets here; for compiler only
    end Convert_Orgmi_Type;



    function Pretty_Print( i : Orgmj_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when member_sports_club => return "Member sports club";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Orgmj_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Orgmj_Type( i : String ) return Orgmj_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return member_sports_club;
        end if;
        Put_Line("Convert_Orgmj_Type: Unmatched string |" & i & "|" );
        return Orgmj_Type'First; -- never actually gets here; for compiler only
    end Convert_Orgmj_Type;



    function Pretty_Print( i : Orgmk_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when member_womens_inst => return "Member womens inst";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Orgmk_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Orgmk_Type( i : String ) return Orgmk_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return member_womens_inst;
        end if;
        Put_Line("Convert_Orgmk_Type: Unmatched string |" & i & "|" );
        return Orgmk_Type'First; -- never actually gets here; for compiler only
    end Convert_Orgmk_Type;



    function Pretty_Print( i : Orgml_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when member_womens_grp => return "Member womens grp";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Orgml_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Orgml_Type( i : String ) return Orgml_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return member_womens_grp;
        end if;
        Put_Line("Convert_Orgml_Type: Unmatched string |" & i & "|" );
        return Orgml_Type'First; -- never actually gets here; for compiler only
    end Convert_Orgml_Type;



    function Pretty_Print( i : Orgmm_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when member_other_group => return "Member other group";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Orgmm_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Orgmm_Type( i : String ) return Orgmm_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return member_other_group;
        end if;
        Put_Line("Convert_Orgmm_Type: Unmatched string |" & i & "|" );
        return Orgmm_Type'First; -- never actually gets here; for compiler only
    end Convert_Orgmm_Type;



    function Pretty_Print( i : Orgmo_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when member_prof_assoc => return "Member prof assoc";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Orgmo_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Orgmo_Type( i : String ) return Orgmo_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return member_prof_assoc;
        end if;
        Put_Line("Convert_Orgmo_Type: Unmatched string |" & i & "|" );
        return Orgmo_Type'First; -- never actually gets here; for compiler only
    end Convert_Orgmo_Type;



    function Pretty_Print( i : Orgmp_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when member_pensioner_gp => return "Member pensioner gp";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Orgmp_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Orgmp_Type( i : String ) return Orgmp_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return member_pensioner_gp;
        end if;
        Put_Line("Convert_Orgmp_Type: Unmatched string |" & i & "|" );
        return Orgmp_Type'First; -- never actually gets here; for compiler only
    end Convert_Orgmp_Type;



    function Pretty_Print( i : Orgmq_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when member_scouts_or_guides => return "Member Scouts/Guides";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Orgmq_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Orgmq_Type( i : String ) return Orgmq_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return member_scouts_or_guides;
        end if;
        Put_Line("Convert_Orgmq_Type: Unmatched string |" & i & "|" );
        return Orgmq_Type'First; -- never actually gets here; for compiler only
    end Convert_Orgmq_Type;



    function Pretty_Print( i : Ovtchc_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when overtime_req_by_employer => return "Overtime req. by employer";
             when free_choice => return "Free choice";
             when neither => return "Neither";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ovtchc_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ovtchc_Type( i : String ) return Ovtchc_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return overtime_req_by_employer;
         elsif i = "2" then
            return free_choice;
         elsif i = "3" then
            return neither;
        end if;
        Put_Line("Convert_Ovtchc_Type: Unmatched string |" & i & "|" );
        return Ovtchc_Type'First; -- never actually gets here; for compiler only
    end Convert_Ovtchc_Type;



    function Pretty_Print( i : Ovtrate_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when no_paid_overtime => return "No paid overtime";
             when no_set_amount => return "No set amount";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ovtrate_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when no_paid_overtime => return True;
             when no_set_amount => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ovtrate_Type( i : String ) return Ovtrate_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-3" then
            return no_paid_overtime;
         elsif i = "0" then
            return no_paid_overtime;
         elsif i = "-4" then
            return no_set_amount;
         elsif i = "1" then
            return no_set_amount;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
        end if;
        Put_Line("Convert_Ovtrate_Type: Unmatched string |" & i & "|" );
        return Ovtrate_Type'First; -- never actually gets here; for compiler only
    end Convert_Ovtrate_Type;



    function Pretty_Print( i : Paaida_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when giving_them_lifts_in_your_car => return "Giving them lifts in your car";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Paaida_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Paaida_Type( i : String ) return Paaida_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return giving_them_lifts_in_your_car;
        end if;
        Put_Line("Convert_Paaida_Type: Unmatched string |" & i & "|" );
        return Paaida_Type'First; -- never actually gets here; for compiler only
    end Convert_Paaida_Type;



    function Pretty_Print( i : Paaidb_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when shopping_for_them => return "Shopping for them";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Paaidb_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Paaidb_Type( i : String ) return Paaidb_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return shopping_for_them;
        end if;
        Put_Line("Convert_Paaidb_Type: Unmatched string |" & i & "|" );
        return Paaidb_Type'First; -- never actually gets here; for compiler only
    end Convert_Paaidb_Type;



    function Pretty_Print( i : Paaidc_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when providing_or_cooking_meals => return "Providing or cooking meals";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Paaidc_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Paaidc_Type( i : String ) return Paaidc_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return providing_or_cooking_meals;
        end if;
        Put_Line("Convert_Paaidc_Type: Unmatched string |" & i & "|" );
        return Paaidc_Type'First; -- never actually gets here; for compiler only
    end Convert_Paaidc_Type;



    function Pretty_Print( i : Paaidd_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when helping_with_basic_personal_needs => return "Helping with basic personal needs";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Paaidd_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Paaidd_Type( i : String ) return Paaidd_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return helping_with_basic_personal_needs;
        end if;
        Put_Line("Convert_Paaidd_Type: Unmatched string |" & i & "|" );
        return Paaidd_Type'First; -- never actually gets here; for compiler only
    end Convert_Paaidd_Type;



    function Pretty_Print( i : Paaide_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when washing_ironing_or_cleaning => return "Washing, ironing or cleaning";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Paaide_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Paaide_Type( i : String ) return Paaide_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return washing_ironing_or_cleaning;
        end if;
        Put_Line("Convert_Paaide_Type: Unmatched string |" & i & "|" );
        return Paaide_Type'First; -- never actually gets here; for compiler only
    end Convert_Paaide_Type;



    function Pretty_Print( i : Paaidf_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when dealing_with_personal_affairs => return "Dealing with personal affairs";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Paaidf_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Paaidf_Type( i : String ) return Paaidf_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return dealing_with_personal_affairs;
        end if;
        Put_Line("Convert_Paaidf_Type: Unmatched string |" & i & "|" );
        return Paaidf_Type'First; -- never actually gets here; for compiler only
    end Convert_Paaidf_Type;



    function Pretty_Print( i : Paaidg_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when decorating_gardening_or_house_repairs => return "Decorating, gardening or house repairs";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Paaidg_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Paaidg_Type( i : String ) return Paaidg_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return decorating_gardening_or_house_repairs;
        end if;
        Put_Line("Convert_Paaidg_Type: Unmatched string |" & i & "|" );
        return Paaidg_Type'First; -- never actually gets here; for compiler only
    end Convert_Paaidg_Type;



    function Pretty_Print( i : Paaidh_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when financial_help => return "Financial help";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Paaidh_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Paaidh_Type( i : String ) return Paaidh_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return financial_help;
        end if;
        Put_Line("Convert_Paaidh_Type: Unmatched string |" & i & "|" );
        return Paaidh_Type'First; -- never actually gets here; for compiler only
    end Convert_Paaidh_Type;



    function Pretty_Print( i : Paaidi_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when anything_else => return "Anything else";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Paaidi_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Paaidi_Type( i : String ) return Paaidi_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return anything_else;
        end if;
        Put_Line("Convert_Paaidi_Type: Unmatched string |" & i & "|" );
        return Paaidi_Type'First; -- never actually gets here; for compiler only
    end Convert_Paaidi_Type;



    function Pretty_Print( i : Pafar_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when less_than_15_minutes => return "Less than 15 minutes";
             when between_15_and_30_minutes => return "Between 15 and 30 minutes";
             when between_30_minutes_and_one_hour => return "Between 30 minutes and one hour";
             when between_one_and_two_hours => return "Between one and two hours";
             when more_than_two_hours => return "More than two hours";
             when lives_abroadvolunteered => return "Lives abroad(volunteered)";
             when never_visited => return "Never visited";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Pafar_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Pafar_Type( i : String ) return Pafar_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return less_than_15_minutes;
         elsif i = "2" then
            return between_15_and_30_minutes;
         elsif i = "3" then
            return between_30_minutes_and_one_hour;
         elsif i = "4" then
            return between_one_and_two_hours;
         elsif i = "5" then
            return more_than_two_hours;
         elsif i = "6" then
            return lives_abroadvolunteered;
         elsif i = "7" then
            return never_visited;
        end if;
        Put_Line("Convert_Pafar_Type: Unmatched string |" & i & "|" );
        return Pafar_Type'First; -- never actually gets here; for compiler only
    end Convert_Pafar_Type;



    function Pretty_Print( i : Paidud_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when looking_after_your_children => return "Looking after your children";
             when helped_with_needs => return "Helped with needs";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Paidud_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Paidud_Type( i : String ) return Paidud_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return looking_after_your_children;
         elsif i = "4" then
            return helped_with_needs;
        end if;
        Put_Line("Convert_Paidud_Type: Unmatched string |" & i & "|" );
        return Paidud_Type'First; -- never actually gets here; for compiler only
    end Convert_Paidud_Type;



    function Pretty_Print( i : Paju_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when father_not_work => return "Father not work";
             when father_deceased => return "Father deceased";
             when father_not_live => return "Father not live";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Paju_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Paju_Type( i : String ) return Paju_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return father_not_work;
         elsif i = "1" then
            return father_deceased;
         elsif i = "2" then
            return father_not_live;
        end if;
        Put_Line("Convert_Paju_Type: Unmatched string |" & i & "|" );
        return Paju_Type'First; -- never actually gets here; for compiler only
    end Convert_Paju_Type;



    function Pretty_Print( i : Paper1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when daily_express => return "Daily Express";
             when the_independent => return "The Independent";
             when the_times => return "The Times";
             when morning_star => return "Morning Star";
             when irish_or_regional_daily => return "Irish/regional daily";
             when other => return "Other";
             when daily_mail => return "Daily Mail";
             when daily_mirror_or_record => return "Daily Mirror/Record";
             when daily_star => return "Daily Star";
             when the_sun => return "The Sun";
             when today => return "Today";
             when daily_telegraph => return "Daily Telegraph";
             when financial_times => return "Financial Times";
             when the_guardian => return "The Guardian";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Paper1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Paper1_Type( i : String ) return Paper1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return daily_express;
         elsif i = "10" then
            return the_independent;
         elsif i = "11" then
            return the_times;
         elsif i = "12" then
            return morning_star;
         elsif i = "13" then
            return irish_or_regional_daily;
         elsif i = "14" then
            return other;
         elsif i = "2" then
            return daily_mail;
         elsif i = "3" then
            return daily_mirror_or_record;
         elsif i = "4" then
            return daily_star;
         elsif i = "5" then
            return the_sun;
         elsif i = "6" then
            return today;
         elsif i = "7" then
            return daily_telegraph;
         elsif i = "8" then
            return financial_times;
         elsif i = "9" then
            return the_guardian;
        end if;
        Put_Line("Convert_Paper1_Type: Unmatched string |" & i & "|" );
        return Paper1_Type'First; -- never actually gets here; for compiler only
    end Convert_Paper1_Type;



    function Pretty_Print( i : Paper2_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when daily_express => return "Daily Express";
             when the_independent => return "The Independent";
             when the_times => return "The Times";
             when morning_star => return "Morning Star";
             when irish_or_regional_daily => return "Irish/regional daily";
             when other => return "Other";
             when daily_mail => return "Daily Mail";
             when daily_mirror_or_record => return "Daily Mirror/Record";
             when daily_star => return "Daily Star";
             when the_sun => return "The Sun";
             when today => return "Today";
             when daily_telegraph => return "Daily Telegraph";
             when financial_times => return "Financial Times";
             when the_guardian => return "The Guardian";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Paper2_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Paper2_Type( i : String ) return Paper2_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return daily_express;
         elsif i = "10" then
            return the_independent;
         elsif i = "11" then
            return the_times;
         elsif i = "12" then
            return morning_star;
         elsif i = "13" then
            return irish_or_regional_daily;
         elsif i = "14" then
            return other;
         elsif i = "2" then
            return daily_mail;
         elsif i = "3" then
            return daily_mirror_or_record;
         elsif i = "4" then
            return daily_star;
         elsif i = "5" then
            return the_sun;
         elsif i = "6" then
            return today;
         elsif i = "7" then
            return daily_telegraph;
         elsif i = "8" then
            return financial_times;
         elsif i = "9" then
            return the_guardian;
        end if;
        Put_Line("Convert_Paper2_Type: Unmatched string |" & i & "|" );
        return Paper2_Type'First; -- never actually gets here; for compiler only
    end Convert_Paper2_Type;



    function Pretty_Print( i : Paperm_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when daily_express => return "Daily Express";
             when the_independent => return "The Independent";
             when the_times => return "The Times";
             when morning_star => return "Morning Star";
             when irish_or_regional_daily => return "Irish/regional daily";
             when other => return "Other";
             when the_irish_news => return "The Irish News";
             when the_newsletter => return "The Newsletter";
             when daily_post => return "Daily Post";
             when irish_news => return "Irish News";
             when daily_mail => return "Daily Mail";
             when belfast_telegraph => return "Belfast Telegraph";
             when other_s_or_w_or_eng_or_ni_reg_or_local_dly_am_paper => return "Other S/W/Eng/NI reg/local dly am paper";
             when other_eng_or_i_or_w_or_s_am_regional_paper => return "Other Eng/I/W/S am regional paper";
             when other_daily_am_paper => return "Other daily am paper";
             when evening_paper_or_other => return "Evening paper/other";
             when daily_mirror_or_record => return "Daily Mirror/Record";
             when daily_star => return "Daily Star";
             when the_sun => return "The Sun";
             when today => return "Today";
             when daily_telegraph => return "Daily Telegraph";
             when financial_times => return "Financial Times";
             when the_guardian => return "The Guardian";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Paperm_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Paperm_Type( i : String ) return Paperm_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return daily_express;
         elsif i = "10" then
            return the_independent;
         elsif i = "11" then
            return the_times;
         elsif i = "12" then
            return morning_star;
         elsif i = "13" then
            return irish_or_regional_daily;
         elsif i = "14" then
            return other;
         elsif i = "15" then
            return the_irish_news;
         elsif i = "16" then
            return the_newsletter;
         elsif i = "19" then
            return the_newsletter;
         elsif i = "17" then
            return daily_post;
         elsif i = "18" then
            return irish_news;
         elsif i = "2" then
            return daily_mail;
         elsif i = "20" then
            return belfast_telegraph;
         elsif i = "21" then
            return other_s_or_w_or_eng_or_ni_reg_or_local_dly_am_paper;
         elsif i = "22" then
            return other_eng_or_i_or_w_or_s_am_regional_paper;
         elsif i = "23" then
            return other_daily_am_paper;
         elsif i = "24" then
            return evening_paper_or_other;
         elsif i = "3" then
            return daily_mirror_or_record;
         elsif i = "4" then
            return daily_star;
         elsif i = "5" then
            return the_sun;
         elsif i = "6" then
            return today;
         elsif i = "7" then
            return daily_telegraph;
         elsif i = "8" then
            return financial_times;
         elsif i = "9" then
            return the_guardian;
        end if;
        Put_Line("Convert_Paperm_Type: Unmatched string |" & i & "|" );
        return Paperm_Type'First; -- never actually gets here; for compiler only
    end Convert_Paperm_Type;



    function Pretty_Print( i : Paperp_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when conservative => return "Conservative";
             when democratic_unionist => return "Democratic Unionist";
             when sinn_fein => return "Sinn Fein";
             when other_irish_party => return "Other Irish Party";
             when other_party => return "Other Party";
             when none => return "None";
             when labour => return "Labour";
             when other => return "Other";
             when plaid_cymru => return "Plaid Cymru";
             when green_party => return "Green Party";
             when ulster_unionist => return "Ulster Unionist";
             when sdlp => return "SDLP";
             when alliance_party => return "Alliance Party";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Paperp_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Paperp_Type( i : String ) return Paperp_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return conservative;
         elsif i = "10" then
            return democratic_unionist;
         elsif i = "11" then
            return sinn_fein;
         elsif i = "12" then
            return other_irish_party;
         elsif i = "13" then
            return other_party;
         elsif i = "14" then
            return none;
         elsif i = "4" then
            return none;
         elsif i = "2" then
            return labour;
         elsif i = "3" then
            return other;
         elsif i = "5" then
            return plaid_cymru;
         elsif i = "6" then
            return green_party;
         elsif i = "7" then
            return ulster_unionist;
         elsif i = "8" then
            return sdlp;
         elsif i = "9" then
            return alliance_party;
        end if;
        Put_Line("Convert_Paperp_Type: Unmatched string |" & i & "|" );
        return Paperp_Type'First; -- never actually gets here; for compiler only
    end Convert_Paperp_Type;



    function Pretty_Print( i : Payck1_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when same_job_promotion_int_prev_year => return "Same job promotion int prev year";
             when int_prev_year_no_promotion => return "Int prev year, no promotion";
             when int_2_yrs_same_job_promotion => return "Int 2 yrs, same job, promotion";
             when int_2_yrs_not_same_job => return "Int 2 yrs, not same job";
             when other_int_2_yrs => return "Other int 2 yrs";
             when not_int_2_yrs => return "Not int 2 yrs";
             when other => return "Others";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Payck1_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Payck1_Type( i : String ) return Payck1_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return same_job_promotion_int_prev_year;
         elsif i = "2" then
            return int_prev_year_no_promotion;
         elsif i = "3" then
            return int_2_yrs_same_job_promotion;
         elsif i = "4" then
            return int_2_yrs_not_same_job;
         elsif i = "5" then
            return other_int_2_yrs;
         elsif i = "6" then
            return not_int_2_yrs;
         elsif i = "7" then
            return other;
        end if;
        Put_Line("Convert_Payck1_Type: Unmatched string |" & i & "|" );
        return Payck1_Type'First; -- never actually gets here; for compiler only
    end Convert_Payck1_Type;



    function Pretty_Print( i : Paydf1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when incl_back_pay => return "Incl back pay";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Paydf1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Paydf1_Type( i : String ) return Paydf1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return incl_back_pay;
        end if;
        Put_Line("Convert_Paydf1_Type: Unmatched string |" & i & "|" );
        return Paydf1_Type'First; -- never actually gets here; for compiler only
    end Convert_Paydf1_Type;



    function Pretty_Print( i : Paydf2_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when incl_adv_holiday_pay => return "Incl adv holiday pay";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Paydf2_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Paydf2_Type( i : String ) return Paydf2_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return incl_adv_holiday_pay;
        end if;
        Put_Line("Convert_Paydf2_Type: Unmatched string |" & i & "|" );
        return Paydf2_Type'First; -- never actually gets here; for compiler only
    end Convert_Paydf2_Type;



    function Pretty_Print( i : Paydf3_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when incl_tax_refund => return "Incl tax refund";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Paydf3_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Paydf3_Type( i : String ) return Paydf3_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return incl_tax_refund;
        end if;
        Put_Line("Convert_Paydf3_Type: Unmatched string |" & i & "|" );
        return Paydf3_Type'First; -- never actually gets here; for compiler only
    end Convert_Paydf3_Type;



    function Pretty_Print( i : Paydf4_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when incl_stat_sick_pay => return "Incl stat sick pay";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Paydf4_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Paydf4_Type( i : String ) return Paydf4_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return incl_stat_sick_pay;
        end if;
        Put_Line("Convert_Paydf4_Type: Unmatched string |" & i & "|" );
        return Paydf4_Type'First; -- never actually gets here; for compiler only
    end Convert_Paydf4_Type;



    function Pretty_Print( i : Paydf5_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when abs_or_no_sick_pay_included => return "Abs/no sick pay included";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Paydf5_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Paydf5_Type( i : String ) return Paydf5_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return abs_or_no_sick_pay_included;
        end if;
        Put_Line("Convert_Paydf5_Type: Unmatched string |" & i & "|" );
        return Paydf5_Type'First; -- never actually gets here; for compiler only
    end Convert_Paydf5_Type;



    function Pretty_Print( i : Paydf6_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when incl_maternity_pay => return "Incl maternity pay";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Paydf6_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Paydf6_Type( i : String ) return Paydf6_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return incl_maternity_pay;
        end if;
        Put_Line("Convert_Paydf6_Type: Unmatched string |" & i & "|" );
        return Paydf6_Type'First; -- never actually gets here; for compiler only
    end Convert_Paydf6_Type;



    function Pretty_Print( i : Paydf7_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when unusual_amt_overtime => return "Unusual amt overtime";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Paydf7_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Paydf7_Type( i : String ) return Paydf7_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return unusual_amt_overtime;
        end if;
        Put_Line("Convert_Paydf7_Type: Unmatched string |" & i & "|" );
        return Paydf7_Type'First; -- never actually gets here; for compiler only
    end Convert_Paydf7_Type;



    function Pretty_Print( i : Paydf8_Type ) return String is
    begin
         case i is
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when other => return "Other";
             when yes => return "Yes";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Paydf8_Type ) return Boolean is
    begin
         case i is
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Paydf8_Type( i : String ) return Paydf8_Type is
    begin
         if i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return other;
         elsif i = "8" then
            return yes;
        end if;
        Put_Line("Convert_Paydf8_Type: Unmatched string |" & i & "|" );
        return Paydf8_Type'First; -- never actually gets here; for compiler only
    end Convert_Paydf8_Type;



    function Pretty_Print( i : Paydf9_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when not_mentioned => return "Not mentioned";
             when inc_bonus_or_tip_or_comm => return "Inc. Bonus/tip/comm";
             when yes => return "Yes";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Paydf9_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Paydf9_Type( i : String ) return Paydf9_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return inc_bonus_or_tip_or_comm;
         elsif i = "8" then
            return yes;
        end if;
        Put_Line("Convert_Paydf9_Type: Unmatched string |" & i & "|" );
        return Paydf9_Type'First; -- never actually gets here; for compiler only
    end Convert_Paydf9_Type;



    function Pretty_Print( i : Paygw_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when period_uncodeable => return "Period uncodeable";
             when per_hour => return "Per hour";
             when one_off_payment => return "One-off payment";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when week => return "Week";
             when fortnight => return "Fortnight";
             when four_weeks => return "Four weeks";
             when calendar_month => return "Calendar month";
             when year => return "Year";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Paygw_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when period_uncodeable => return True;
             when per_hour => return True;
             when one_off_payment => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Paygw_Type( i : String ) return Paygw_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-3" then
            return period_uncodeable;
         elsif i = "-4" then
            return per_hour;
         elsif i = "-5" then
            return one_off_payment;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return week;
         elsif i = "2" then
            return fortnight;
         elsif i = "3" then
            return four_weeks;
         elsif i = "4" then
            return calendar_month;
         elsif i = "5" then
            return year;
         elsif i = "6" then
            return other;
        end if;
        Put_Line("Convert_Paygw_Type: Unmatched string |" & i & "|" );
        return Paygw_Type'First; -- never actually gets here; for compiler only
    end Convert_Paygw_Type;



    function Pretty_Print( i : Paygya_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when gross_income => return "Gross income";
             when est_gross_income => return "Est gross income";
             when net_income => return "Net income";
             when est_net_income => return "Est net income";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Paygya_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Paygya_Type( i : String ) return Paygya_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return gross_income;
         elsif i = "2" then
            return est_gross_income;
         elsif i = "3" then
            return net_income;
         elsif i = "4" then
            return est_net_income;
        end if;
        Put_Line("Convert_Paygya_Type: Unmatched string |" & i & "|" );
        return Paygya_Type'First; -- never actually gets here; for compiler only
    end Convert_Paygya_Type;



    function Pretty_Print( i : Paygyr_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when s_999997_or_above => return "999997 or above";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Paygyr_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Paygyr_Type( i : String ) return Paygyr_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "999997" then
            return s_999997_or_above;
        end if;
        Put_Line("Convert_Paygyr_Type: Unmatched string |" & i & "|" );
        return Paygyr_Type'First; -- never actually gets here; for compiler only
    end Convert_Paygyr_Type;



    function Pretty_Print( i : Payly_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when same_as_now => return "Same as now";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when s_99997_or_above => return "99997 or above";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Payly_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when same_as_now => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Payly_Type( i : String ) return Payly_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-3" then
            return same_as_now;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "99997" then
            return s_99997_or_above;
        end if;
        Put_Line("Convert_Payly_Type: Unmatched string |" & i & "|" );
        return Payly_Type'First; -- never actually gets here; for compiler only
    end Convert_Payly_Type;



    function Pretty_Print( i : Paylye_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when same_as_now => return "Same as now";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Paylye_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when same_as_now => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Paylye_Type( i : String ) return Paylye_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-3" then
            return same_as_now;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
        end if;
        Put_Line("Convert_Paylye_Type: Unmatched string |" & i & "|" );
        return Paylye_Type'First; -- never actually gets here; for compiler only
    end Convert_Paylye_Type;



    function Pretty_Print( i : Paylyg_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when before_deductions => return "Before deductions";
             when after_deductions => return "After deductions";
             when no_deductions => return "No deductions";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Paylyg_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Paylyg_Type( i : String ) return Paylyg_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return before_deductions;
         elsif i = "2" then
            return after_deductions;
         elsif i = "3" then
            return no_deductions;
        end if;
        Put_Line("Convert_Paylyg_Type: Unmatched string |" & i & "|" );
        return Paylyg_Type'First; -- never actually gets here; for compiler only
    end Convert_Paylyg_Type;



    function Pretty_Print( i : Paylyge_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when before_deductions => return "Before deductions";
             when after_deductions => return "After deductions";
             when no_deductions => return "No Deductions";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Paylyge_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Paylyge_Type( i : String ) return Paylyge_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return before_deductions;
         elsif i = "2" then
            return after_deductions;
         elsif i = "3" then
            return no_deductions;
        end if;
        Put_Line("Convert_Paylyge_Type: Unmatched string |" & i & "|" );
        return Paylyge_Type'First; -- never actually gets here; for compiler only
    end Convert_Paylyge_Type;



    function Pretty_Print( i : Paylyw_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when period_uncodeable => return "Period uncodeable";
             when per_hour => return "Per hour";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when week => return "Week";
             when fortnight => return "Fortnight";
             when four_weeks => return "Four weeks";
             when blank => return "";
             when year => return "Year";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Paylyw_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when period_uncodeable => return True;
             when per_hour => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Paylyw_Type( i : String ) return Paylyw_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-3" then
            return period_uncodeable;
         elsif i = "-4" then
            return per_hour;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return week;
         elsif i = "2" then
            return fortnight;
         elsif i = "3" then
            return four_weeks;
         elsif i = "4" then
            return blank;
         elsif i = "5" then
            return year;
         elsif i = "6" then
            return other;
        end if;
        Put_Line("Convert_Paylyw_Type: Unmatched string |" & i & "|" );
        return Paylyw_Type'First; -- never actually gets here; for compiler only
    end Convert_Paylyw_Type;



    function Pretty_Print( i : Paynl_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when no_deductions => return "No Deductions";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when s_99997_or_more => return "99997 or more";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Paynl_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when no_deductions => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Paynl_Type( i : String ) return Paynl_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-3" then
            return no_deductions;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "99997" then
            return s_99997_or_more;
        end if;
        Put_Line("Convert_Paynl_Type: Unmatched string |" & i & "|" );
        return Paynl_Type'First; -- never actually gets here; for compiler only
    end Convert_Paynl_Type;



    function Pretty_Print( i : Paynmw2_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when reported_to_employer => return "Reported to employer";
             when rep_enforcement_agency => return "Rep. enforcement agency";
             when reported_to_both => return "Reported to both";
             when reported_to_neither => return "Reported to neither";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Paynmw2_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Paynmw2_Type( i : String ) return Paynmw2_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return reported_to_employer;
         elsif i = "2" then
            return rep_enforcement_agency;
         elsif i = "3" then
            return reported_to_both;
         elsif i = "4" then
            return reported_to_neither;
         elsif i = "5" then
            return other;
        end if;
        Put_Line("Convert_Paynmw2_Type: Unmatched string |" & i & "|" );
        return Paynmw2_Type'First; -- never actually gets here; for compiler only
    end Convert_Paynmw2_Type;



    function Pretty_Print( i : Payslp_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when latest_payslip_seen => return "Latest payslip seen";
             when early_payslip_seen => return "Early payslip seen";
             when no_payslip_seen => return "No payslip seen";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Payslp_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Payslp_Type( i : String ) return Payslp_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return latest_payslip_seen;
         elsif i = "2" then
            return early_payslip_seen;
         elsif i = "3" then
            return no_payslip_seen;
        end if;
        Put_Line("Convert_Payslp_Type: Unmatched string |" & i & "|" );
        return Payslp_Type'First; -- never actually gets here; for compiler only
    end Convert_Payslp_Type;



    function Pretty_Print( i : Paysw_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when period_uncodeable => return "Period uncodeable";
             when per_hour => return "Per hour";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when week => return "Week";
             when fortnight => return "Fortnight";
             when four_weeks => return "Four weeks";
             when calendar_month => return "Calendar month";
             when year => return "Year";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Paysw_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when period_uncodeable => return True;
             when per_hour => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Paysw_Type( i : String ) return Paysw_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-3" then
            return period_uncodeable;
         elsif i = "-5" then
            return period_uncodeable;
         elsif i = "-4" then
            return per_hour;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return week;
         elsif i = "2" then
            return fortnight;
         elsif i = "3" then
            return four_weeks;
         elsif i = "4" then
            return calendar_month;
         elsif i = "5" then
            return year;
         elsif i = "6" then
            return other;
        end if;
        Put_Line("Convert_Paysw_Type: Unmatched string |" & i & "|" );
        return Paysw_Type'First; -- never actually gets here; for compiler only
    end Convert_Paysw_Type;



    function Pretty_Print( i : Paytyp_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when salaried => return "Salaried";
             when basic_salary_plus_comm => return "Basic salary + comm.";
             when hourly_pay => return "Hourly pay";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Paytyp_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Paytyp_Type( i : String ) return Paytyp_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return salaried;
         elsif i = "2" then
            return basic_salary_plus_comm;
         elsif i = "3" then
            return hourly_pay;
         elsif i = "4" then
            return other;
        end if;
        Put_Line("Convert_Paytyp_Type: Unmatched string |" & i & "|" );
        return Paytyp_Type'First; -- never actually gets here; for compiler only
    end Convert_Paytyp_Type;



    function Pretty_Print( i : Payu_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when s_99997_or_more => return "99997 or more";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Payu_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Payu_Type( i : String ) return Payu_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "99997" then
            return s_99997_or_more;
        end if;
        Put_Line("Convert_Payu_Type: Unmatched string |" & i & "|" );
        return Payu_Type'First; -- never actually gets here; for compiler only
    end Convert_Payu_Type;



    function Pretty_Print( i : Pck2_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when pension_before_1788 => return "Pension before 1.7.88";
             when pension_since_1788_or_both => return "Pension since 1.7.88 or both";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Pck2_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Pck2_Type( i : String ) return Pck2_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return pension_before_1788;
         elsif i = "2" then
            return pension_since_1788_or_both;
        end if;
        Put_Line("Convert_Pck2_Type: Unmatched string |" & i & "|" );
        return Pck2_Type'First; -- never actually gets here; for compiler only
    end Convert_Pck2_Type;



    function Pretty_Print( i : Pcoftn_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when every_day => return "Every day";
             when at_least_once_a_week => return "At least once a week";
             when at_least_once_a_month => return "At least once a month";
             when less_than_once_a_month => return "Less than once a month";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Pcoftn_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Pcoftn_Type( i : String ) return Pcoftn_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return every_day;
         elsif i = "2" then
            return at_least_once_a_week;
         elsif i = "3" then
            return at_least_once_a_month;
         elsif i = "4" then
            return less_than_once_a_month;
        end if;
        Put_Line("Convert_Pcoftn_Type: Unmatched string |" & i & "|" );
        return Pcoftn_Type'First; -- never actually gets here; for compiler only
    end Convert_Pcoftn_Type;



    function Pretty_Print( i : Pcusei_Type ) return String is
    begin
         case i is
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when not_mentioned => return "Not mentioned";
             when yes => return "Yes";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Pcusei_Type ) return Boolean is
    begin
         case i is
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Pcusei_Type( i : String ) return Pcusei_Type is
    begin
         if i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return yes;
         elsif i = "9" then
            return yes;
        end if;
        Put_Line("Convert_Pcusei_Type: Unmatched string |" & i & "|" );
        return Pcusei_Type'First; -- never actually gets here; for compiler only
    end Convert_Pcusei_Type;



    function Pretty_Print( i : Pcusem_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when paid_work_done_at_home => return "Paid work done at home";
             when voluntary_or_unpaid_work => return "Voluntary/unpaid work";
             when education_or_course_work => return "Education/course work";
             when playing_games => return "Playing games";
             when letters_or_word_processing => return "Letters/word processing";
             when personal_financial_accounts => return "Personal financial accounts";
             when internet_connection => return "Internet connection";
             when hobbies => return "Hobbies";
             when something_else => return "Something else";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Pcusem_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Pcusem_Type( i : String ) return Pcusem_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return paid_work_done_at_home;
         elsif i = "2" then
            return voluntary_or_unpaid_work;
         elsif i = "3" then
            return education_or_course_work;
         elsif i = "4" then
            return playing_games;
         elsif i = "5" then
            return letters_or_word_processing;
         elsif i = "6" then
            return personal_financial_accounts;
         elsif i = "7" then
            return internet_connection;
         elsif i = "8" then
            return hobbies;
         elsif i = "9" then
            return something_else;
        end if;
        Put_Line("Convert_Pcusem_Type: Unmatched string |" & i & "|" );
        return Pcusem_Type'First; -- never actually gets here; for compiler only
    end Convert_Pcusem_Type;



    function Pretty_Print( i : Pcusr1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when no_one => return "No one";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Pcusr1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Pcusr1_Type( i : String ) return Pcusr1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "99" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "97" then
            return no_one;
        end if;
        Put_Line("Convert_Pcusr1_Type: Unmatched string |" & i & "|" );
        return Pcusr1_Type'First; -- never actually gets here; for compiler only
    end Convert_Pcusr1_Type;



    function Pretty_Print( i : Pcusr2_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when not_mentioned => return "Not mentioned";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Pcusr2_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Pcusr2_Type( i : String ) return Pcusr2_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return not_mentioned;
        end if;
        Put_Line("Convert_Pcusr2_Type: Unmatched string |" & i & "|" );
        return Pcusr2_Type'First; -- never actually gets here; for compiler only
    end Convert_Pcusr2_Type;



    function Pretty_Print( i : Pcwhen_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when s_1976 => return "1976";
             when s_1977 => return "1977";
             when s_1978 => return "1978";
             when s_1979 => return "1979";
             when s_1986 => return "1986";
             when s_1981 => return "1981";
             when s_1982 => return "1982";
             when s_1983 => return "1983";
             when s_1984 => return "1984";
             when s_1985 => return "1985";
             when s_1987 => return "1987";
             when s_1988 => return "1988";
             when s_1989 => return "1989";
             when s_1990 => return "1990";
             when s_1991 => return "1991";
             when s_1992 => return "1992";
             when s_1993 => return "1993";
             when s_1994 => return "1994";
             when s_1995 => return "1995";
             when s_1996 => return "1996";
             when s_1997 => return "1997";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Pcwhen_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Pcwhen_Type( i : String ) return Pcwhen_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "76" then
            return s_1976;
         elsif i = "77" then
            return s_1977;
         elsif i = "78" then
            return s_1978;
         elsif i = "79" then
            return s_1979;
         elsif i = "80" then
            return s_1986;
         elsif i = "86" then
            return s_1986;
         elsif i = "81" then
            return s_1981;
         elsif i = "82" then
            return s_1982;
         elsif i = "83" then
            return s_1983;
         elsif i = "84" then
            return s_1984;
         elsif i = "85" then
            return s_1985;
         elsif i = "87" then
            return s_1987;
         elsif i = "88" then
            return s_1988;
         elsif i = "89" then
            return s_1989;
         elsif i = "90" then
            return s_1990;
         elsif i = "91" then
            return s_1991;
         elsif i = "92" then
            return s_1992;
         elsif i = "93" then
            return s_1993;
         elsif i = "94" then
            return s_1994;
         elsif i = "95" then
            return s_1995;
         elsif i = "96" then
            return s_1996;
         elsif i = "97" then
            return s_1997;
        end if;
        Put_Line("Convert_Pcwhen_Type: Unmatched string |" & i & "|" );
        return Pcwhen_Type'First; -- never actually gets here; for compiler only
    end Convert_Pcwhen_Type;



    function Pretty_Print( i : Penadw_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when period_uncodeable => return "Period uncodeable";
             when one_off_payment => return "One off payment";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when a_week => return "A week";
             when a_month => return "A month";
             when a_quarter => return "A quarter";
             when six_months => return "Six months";
             when a_year => return "A year";
             when a_once_off_payment => return "A once off payment";
             when other_specified => return "Other specified";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Penadw_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when period_uncodeable => return True;
             when one_off_payment => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Penadw_Type( i : String ) return Penadw_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-3" then
            return period_uncodeable;
         elsif i = "-4" then
            return one_off_payment;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return a_week;
         elsif i = "2" then
            return a_month;
         elsif i = "3" then
            return a_quarter;
         elsif i = "4" then
            return six_months;
         elsif i = "5" then
            return a_year;
         elsif i = "6" then
            return a_once_off_payment;
         elsif i = "7" then
            return other_specified;
        end if;
        Put_Line("Convert_Penadw_Type: Unmatched string |" & i & "|" );
        return Penadw_Type'First; -- never actually gets here; for compiler only
    end Convert_Penadw_Type;



    function Pretty_Print( i : Penb4_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when before_1788 => return "Before 1.7.88";
             when s_1788_or_since => return "1.7.88 or since";
             when before_and_after => return "Before and after";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Penb4_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Penb4_Type( i : String ) return Penb4_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return before_1788;
         elsif i = "2" then
            return s_1788_or_since;
         elsif i = "3" then
            return before_and_after;
        end if;
        Put_Line("Convert_Penb4_Type: Unmatched string |" & i & "|" );
        return Penb4_Type'First; -- never actually gets here; for compiler only
    end Convert_Penb4_Type;



    function Pretty_Print( i : Penck1_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when retired_or_male_65_plus_or_female_60_plus => return "Retired or Male 65+ or Female 60+";
             when no_current_occupational_pension => return "No current occupational pension";
             when other => return "Others";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Penck1_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Penck1_Type( i : String ) return Penck1_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return retired_or_male_65_plus_or_female_60_plus;
         elsif i = "2" then
            return no_current_occupational_pension;
         elsif i = "3" then
            return other;
        end if;
        Put_Line("Convert_Penck1_Type: Unmatched string |" & i & "|" );
        return Penck1_Type'First; -- never actually gets here; for compiler only
    end Convert_Penck1_Type;



    function Pretty_Print( i : Penck2_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when contributes_to_pension => return "Contributes to pension";
             when single_no_pension => return "Single no pension";
             when partnered_no_pension => return "Partnered no pension";
             when other => return "Others";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Penck2_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Penck2_Type( i : String ) return Penck2_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return contributes_to_pension;
         elsif i = "2" then
            return single_no_pension;
         elsif i = "3" then
            return partnered_no_pension;
         elsif i = "4" then
            return other;
        end if;
        Put_Line("Convert_Penck2_Type: Unmatched string |" & i & "|" );
        return Penck2_Type'First; -- never actually gets here; for compiler only
    end Convert_Penck2_Type;



    function Pretty_Print( i : Penmcn_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when contrib_deductions => return "Contrib. deductions";
             when non_contrib_avcs => return "Non-contrib. AVCs";
             when non_contrib_no_avc => return "Non-contrib. no AVC";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Penmcn_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Penmcn_Type( i : String ) return Penmcn_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return contrib_deductions;
         elsif i = "2" then
            return non_contrib_avcs;
         elsif i = "3" then
            return non_contrib_no_avc;
        end if;
        Put_Line("Convert_Penmcn_Type: Unmatched string |" & i & "|" );
        return Penmcn_Type'First; -- never actually gets here; for compiler only
    end Convert_Penmcn_Type;



    function Pretty_Print( i : Penmtp_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when pension_final_salary_scheme => return "Pension: final salary scheme";
             when pension_investment_scheme => return "Pension: investment scheme";
             when pension_combined_or_other_scheme => return "Pension: combined/other scheme";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Penmtp_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Penmtp_Type( i : String ) return Penmtp_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return pension_final_salary_scheme;
         elsif i = "2" then
            return pension_investment_scheme;
         elsif i = "3" then
            return pension_combined_or_other_scheme;
        end if;
        Put_Line("Convert_Penmtp_Type: Unmatched string |" & i & "|" );
        return Penmtp_Type'First; -- never actually gets here; for compiler only
    end Convert_Penmtp_Type;



    function Pretty_Print( i : Penyr_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when s_1988 => return "1988";
             when s_1989 => return "1989";
             when s_1990 => return "1990";
             when s_1991 => return "1991";
             when s_1992 => return "1992";
             when s_1993 => return "1993";
             when s_1994 => return "1994";
             when s_1995 => return "1995";
             when s_1996 => return "1996";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Penyr_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Penyr_Type( i : String ) return Penyr_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "88" then
            return s_1988;
         elsif i = "89" then
            return s_1989;
         elsif i = "90" then
            return s_1990;
         elsif i = "91" then
            return s_1991;
         elsif i = "92" then
            return s_1992;
         elsif i = "93" then
            return s_1993;
         elsif i = "94" then
            return s_1994;
         elsif i = "95" then
            return s_1995;
         elsif i = "96" then
            return s_1996;
        end if;
        Put_Line("Convert_Penyr_Type: Unmatched string |" & i & "|" );
        return Penyr_Type'First; -- never actually gets here; for compiler only
    end Convert_Penyr_Type;



    function Pretty_Print( i : Pim1_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when informant_alone => return "Informant alone";
             when partner_present => return "Partner present";
             when other_adults_present => return "Other adults present";
             when children_present => return "Children present";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Pim1_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Pim1_Type( i : String ) return Pim1_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return informant_alone;
         elsif i = "2" then
            return partner_present;
         elsif i = "3" then
            return other_adults_present;
         elsif i = "4" then
            return children_present;
        end if;
        Put_Line("Convert_Pim1_Type: Unmatched string |" & i & "|" );
        return Pim1_Type'First; -- never actually gets here; for compiler only
    end Convert_Pim1_Type;



    function Pretty_Print( i : Plb4c_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when australia => return "Australia";
             when canada => return "Canada";
             when new_zealand => return "New Zealand";
             when kenya => return "Kenya";
             when uganda => return "Uganda";
             when tanzania => return "Tanzania";
             when malawi => return "Malawi";
             when zambia => return "Zambia";
             when zimbabwe => return "Zimbabwe";
             when botswana => return "Botswana";
             when gambia => return "Gambia";
             when ghana => return "Ghana";
             when nigeria => return "Nigeria";
             when sierra_leone => return "Sierra Leone";
             when barbados => return "Barbados";
             when jamaica => return "Jamaica";
             when trinidad_and_tobago => return "Trinidad and Tobago";
             when w_indies_assoc_states => return "W Indies assoc states";
             when west_indies => return "West Indies";
             when other_carib_cmmnwlth => return "Other Carib Cmmnwlth";
             when belize_or_brit_honduras => return "Belize/Brit Honduras";
             when guyana => return "Guyana";
             when bangladesh => return "Bangladesh";
             when india => return "India";
             when sri_lanka_or_ceylon => return "Sri Lanka/Ceylon";
             when hong_kong => return "Hong Kong";
             when malaysia => return "Malaysia";
             when singapore => return "Singapore";
             when cyprus => return "Cyprus";
             when gibraltar => return "Gibraltar";
             when malta_and_gozo => return "Malta and Gozo";
             when seychelles => return "Seychelles";
             when mauritius => return "Mauritius";
             when other_new_cmmnwlth => return "Other New Cmmnwlth";
             when algeria => return "Algeria";
             when morocco => return "Morocco";
             when tunisia => return "Tunisia";
             when libya => return "Libya";
             when egypt => return "Egypt";
             when rep_of_south_africa => return "Rep of South Africa";
             when other_africa_foreign => return "Other Africa Foreign";
             when usa => return "USA";
             when caribbean => return "Caribbean";
             when central_america => return "Central America";
             when south_america => return "South America";
             when pakistan => return "Pakistan";
             when burma => return "Burma";
             when china_incl_taiwan => return "China incl Taiwan";
             when japan => return "Japan";
             when irish_republic => return "Irish Republic";
             when phillipines => return "Phillipines";
             when vietnam => return "Vietnam";
             when iran => return "Iran";
             when israel => return "Israel";
             when other_middle_eastern => return "Other Middle Eastern";
             when other_asia => return "Other Asia";
             when belgium => return "Belgium";
             when denmark => return "Denmark";
             when france => return "France";
             when italy => return "Italy";
             when luxembourg => return "Luxembourg";
             when netherlands => return "Netherlands";
             when germany_fed_rep => return "Germany Fed Rep";
             when germany_pns => return "Germany pns";
             when albania => return "Albania";
             when bulgaria => return "Bulgaria";
             when gdr => return "GDR";
             when czechoslovakia => return "Czechoslovakia";
             when hungary => return "Hungary";
             when poland => return "Poland";
             when romania => return "Romania";
             when austria => return "Austria";
             when switzerland => return "Switzerland";
             when greece => return "Greece";
             when portugal => return "Portugal";
             when spain => return "Spain";
             when finland => return "Finland";
             when norway => return "Norway";
             when sweden => return "Sweden";
             when yugoslavia => return "Yugoslavia";
             when other_europe => return "Other Europe";
             when turkey => return "Turkey";
             when ussr => return "USSR";
             when rest_of_the_world => return "Rest of the World";
             when at_sea_or_air => return "At sea or air";
             when not_stated_or_refused => return "Not stated/refused";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Plb4c_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Plb4c_Type( i : String ) return Plb4c_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "11" then
            return australia;
         elsif i = "12" then
            return canada;
         elsif i = "13" then
            return new_zealand;
         elsif i = "14" then
            return kenya;
         elsif i = "15" then
            return uganda;
         elsif i = "16" then
            return tanzania;
         elsif i = "17" then
            return malawi;
         elsif i = "18" then
            return zambia;
         elsif i = "19" then
            return zimbabwe;
         elsif i = "20" then
            return botswana;
         elsif i = "21" then
            return gambia;
         elsif i = "22" then
            return ghana;
         elsif i = "23" then
            return nigeria;
         elsif i = "24" then
            return sierra_leone;
         elsif i = "25" then
            return barbados;
         elsif i = "26" then
            return jamaica;
         elsif i = "27" then
            return trinidad_and_tobago;
         elsif i = "28" then
            return w_indies_assoc_states;
         elsif i = "29" then
            return west_indies;
         elsif i = "30" then
            return other_carib_cmmnwlth;
         elsif i = "31" then
            return belize_or_brit_honduras;
         elsif i = "32" then
            return guyana;
         elsif i = "33" then
            return bangladesh;
         elsif i = "34" then
            return india;
         elsif i = "35" then
            return sri_lanka_or_ceylon;
         elsif i = "36" then
            return hong_kong;
         elsif i = "37" then
            return malaysia;
         elsif i = "38" then
            return singapore;
         elsif i = "39" then
            return cyprus;
         elsif i = "40" then
            return gibraltar;
         elsif i = "41" then
            return malta_and_gozo;
         elsif i = "42" then
            return seychelles;
         elsif i = "43" then
            return mauritius;
         elsif i = "44" then
            return other_new_cmmnwlth;
         elsif i = "45" then
            return algeria;
         elsif i = "46" then
            return morocco;
         elsif i = "47" then
            return tunisia;
         elsif i = "48" then
            return libya;
         elsif i = "49" then
            return egypt;
         elsif i = "50" then
            return rep_of_south_africa;
         elsif i = "51" then
            return other_africa_foreign;
         elsif i = "52" then
            return usa;
         elsif i = "53" then
            return caribbean;
         elsif i = "54" then
            return central_america;
         elsif i = "55" then
            return south_america;
         elsif i = "56" then
            return pakistan;
         elsif i = "57" then
            return burma;
         elsif i = "58" then
            return china_incl_taiwan;
         elsif i = "59" then
            return japan;
         elsif i = "6" then
            return irish_republic;
         elsif i = "60" then
            return phillipines;
         elsif i = "61" then
            return vietnam;
         elsif i = "62" then
            return iran;
         elsif i = "63" then
            return israel;
         elsif i = "64" then
            return other_middle_eastern;
         elsif i = "65" then
            return other_asia;
         elsif i = "66" then
            return belgium;
         elsif i = "67" then
            return denmark;
         elsif i = "68" then
            return france;
         elsif i = "69" then
            return italy;
         elsif i = "70" then
            return luxembourg;
         elsif i = "71" then
            return netherlands;
         elsif i = "72" then
            return germany_fed_rep;
         elsif i = "73" then
            return germany_pns;
         elsif i = "74" then
            return albania;
         elsif i = "75" then
            return bulgaria;
         elsif i = "76" then
            return gdr;
         elsif i = "77" then
            return czechoslovakia;
         elsif i = "78" then
            return hungary;
         elsif i = "79" then
            return poland;
         elsif i = "80" then
            return romania;
         elsif i = "81" then
            return austria;
         elsif i = "82" then
            return switzerland;
         elsif i = "83" then
            return greece;
         elsif i = "84" then
            return portugal;
         elsif i = "85" then
            return spain;
         elsif i = "86" then
            return finland;
         elsif i = "87" then
            return norway;
         elsif i = "88" then
            return sweden;
         elsif i = "89" then
            return yugoslavia;
         elsif i = "90" then
            return other_europe;
         elsif i = "91" then
            return turkey;
         elsif i = "92" then
            return ussr;
         elsif i = "93" then
            return rest_of_the_world;
         elsif i = "94" then
            return at_sea_or_air;
         elsif i = "99" then
            return not_stated_or_refused;
        end if;
        Put_Line("Convert_Plb4c_Type: Unmatched string |" & i & "|" );
        return Plb4c_Type'First; -- never actually gets here; for compiler only
    end Convert_Plb4c_Type;



    function Pretty_Print( i : Plb4d_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't Know";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when city_westminster => return "City; Westminster";
             when newham => return "Newham";
             when allerdale_carlisle => return "Allerdale; Carlisle";
             when barrow_in_furness_copeland => return "Barrow-in-Furness; Copeland";
             when eden_south_lakeland => return "Eden; South Lakeland";
             when amber_valley_ne_derbyshire => return "Amber Valley; NE Derbyshire";
             when bolsover_chesterfield => return "Bolsover; Chesterfield";
             when derby => return "Derby";
             when erewash_south_derbyshire => return "Erewash; South Derbyshire";
             when high_peak_derbyshire_dales => return "High Peak; Derbyshire Dales";
             when east_devon_mid_devon => return "East Devon; Mid Devon";
             when exeter_teignbridge => return "Exeter; Teignbridge";
             when southwark => return "Southwark";
             when north_devon_torridge => return "North Devon; Torridge";
             when plymouth => return "Plymouth";
             when south_hams_west_devon => return "South Hams; West Devon";
             when torbay => return "Torbay";
             when bournemouth => return "Bournemouth";
             when christchurch_e_dorset_n_dorset => return "Christchurch; E Dorset; N Dorset";
             when poole => return "Poole";
             when purbeck_w_dorset_weymouth_and_portland => return "Purbeck; W Dorset; Weymouth & Portland";
             when chester_le_street_durham => return "Chester-le-Street; Durham";
             when darlington_teesdale => return "Darlington; Teesdale";
             when tower_hamlets => return "Tower Hamlets";
             when derwentside_wear_valley => return "Derwentside; Wear Valley";
             when easington_sedgefield => return "Easington; Sedgefield";
             when brighton => return "Brighton";
             when eastbourne_hove_lewes => return "Eastbourne; Hove; Lewes";
             when hastings_rother => return "Hastings; Rother";
             when wealdon => return "Wealdon";
             when basildon => return "Basildon";
             when braintree_uttlesford => return "Braintree; Uttlesford";
             when brentwood_epping_forest_harlow => return "Brentwood; Epping Forest; Harlow";
             when castle_point_maldon_rochford => return "Castle Point; Maldon; Rochford";
             when wandsworth => return "Wandsworth";
             when chelmsford => return "Chelmsford";
             when colchester => return "Colchester";
             when southend_on_sea => return "Southend-on-Sea";
             when tendring => return "Tendring";
             when thurrock => return "Thurrock";
             when cheltenham_cotswold => return "Cheltenham; Cotswold";
             when forest_of_dean_stroud => return "Forest of Dean; Stroud";
             when gloucester_tewkesbury => return "Gloucester; Tewkesbury";
             when basingstoke_and_deane => return "Basingstoke & Deane";
             when east_hampshire_havant => return "East Hampshire; Havant";
             when barking_and_dagenham => return "Barking and Dagenham";
             when eastleigh_fareham_gosport => return "Eastleigh; Fareham; Gosport";
             when hart_rushmoor => return "Hart; Rushmoor";
             when new_forest => return "New Forest";
             when portsmouth => return "Portsmouth";
             when southampton => return "Southampton";
             when test_valley_winchester => return "Test Valley; Winchester";
             when bromsgrove_wyre_forest => return "Bromsgrove; Wyre Forest";
             when hereford_leominster_s_herefordshire => return "Hereford; Leominster; S Herefordshire";
             when malvern_hills_worcester => return "Malvern Hills; Worcester";
             when redditch_wychavon => return "Redditch; Wychavon";
             when barnet => return "Barnet";
             when broxbourne_e_hertfordshire => return "Broxbourne; E Hertfordshire";
             when dacorum => return "Dacorum";
             when hertsmere_welwyn_hatfield => return "Hertsmere; Welwyn Hatfield";
             when n_hertfordshire_stevenage => return "N Hertfordshire; Stevenage";
             when st_albans => return "St Albans";
             when three_rivers_watford => return "Three Rivers; Watford";
             when beverley_boothferry => return "Beverley; Boothferry";
             when cleethorpes_great_grimsby => return "Cleethorpes; Great Grimsby";
             when e_yorkshire_holderness => return "E Yorkshire; Holderness";
             when glanford_scunthorpe => return "Glanford; Scunthorpe";
             when bexley => return "Bexley";
             when kingston_upon_hull => return "Kingston-upon-Hull";
             when medina_south_wight => return "Medina; South Wight";
             when ashford_tunbridge_wells => return "Ashford; Tunbridge Wells";
             when canterbury => return "Canterbury";
             when dartford_gravesham => return "Dartford; Gravesham";
             when dover_shepway => return "Dover; Shepway";
             when gillingham_swale => return "Gillingham; Swale";
             when maidstone => return "Maidstone";
             when rochester_upon_medway => return "Rochester upon Medway";
             when sevenoaks_tonbridge_and_malling => return "Sevenoaks; Tonbridge & Malling";
             when brent => return "Brent";
             when thanet => return "Thanet";
             when blackburn => return "Blackburn";
             when blackpool => return "Blackpool";
             when burnley_pendle => return "Burnley; Pendle";
             when chorley_west_lancashire => return "Chorley; West Lancashire";
             when fylde_wyre => return "Fylde; Wyre";
             when hyndburn_rossendale => return "Hyndburn; Rossendale";
             when lancaster => return "Lancaster";
             when preston => return "Preston";
             when ribble_valley_south_ribble => return "Ribble Valley; South Ribble";
             when bromley => return "Bromley";
             when blaby_oadby_and_wigston => return "Blaby; Oadby & Wigston";
             when charnwood => return "Charnwood";
             when harborough_melton_rutland => return "Harborough; Melton; Rutland";
             when hinkley_and_bosworth_nw_leics => return "Hinkley & Bosworth; NW Leics";
             when leicester => return "Leicester";
             when boston_s_holland => return "Boston; S Holland";
             when e_lindsey_lincoln_w_lindsey => return "E Lindsey; Lincoln; W Lindsey";
             when n_kesteven_s_kesteven => return "N Kesteven; S Kesteven";
             when breckland_s_norfolk => return "Breckland; S Norfolk";
             when broadland_norwich => return "Broadland; Norwich";
             when croydon => return "Croydon";
             when great_yarmouth => return "Great Yarmouth";
             when kings_lynn_and_w_norfolk => return "Kings Lynn & W Norfolk";
             when corby_kettering => return "Corby; Kettering";
             when daventry_s_northants => return "Daventry; S Northants";
             when e_northants_wellingborough => return "E Northants; Wellingborough";
             when northampton => return "Northampton";
             when alnwick_berwick_morpeth_tynedale => return "Alnwick; Berwick; Morpeth; Tynedale";
             when blyth_valley_wansbeck => return "Blyth Valley; Wansbeck";
             when craven_hambleton_richmondshire => return "Craven; Hambleton; Richmondshire";
             when ryedale_scarborough => return "Ryedale; Scarborough";
             when camden => return "Camden";
             when ealing => return "Ealing";
             when harrogate => return "Harrogate";
             when selby_york => return "Selby; York";
             when ashfield_mansfield => return "Ashfield; Mansfield";
             when bassetlaw_newark_and_sherwood => return "Bassetlaw; Newark & Sherwood";
             when broxtowe_gedling_rushcliffe => return "Broxtowe; Gedling; Rushcliffe";
             when nottingham => return "Nottingham";
             when cherwell => return "Cherwell";
             when oxford_vale_white_horse_west_oxford => return "Oxford; Vale White Horse; West Oxford";
             when south_oxfordshire => return "South Oxfordshire";
             when bridgnorth_shrewsbury_and_atcham => return "Bridgnorth; Shrewsbury & Atcham";
             when enfield => return "Enfield";
             when n_shropshire_oswestry_s_shropshire => return "N Shropshire; Oswestry; S Shropshire";
             when the_wrekin => return "The Wrekin";
             when mendip_sedgemoor => return "Mendip; Sedgemoor";
             when south_somerset => return "South Somerset";
             when taunton_deane_w_somerset => return "Taunton Deane; W Somerset";
             when cannock_chase_s_staffs => return "Cannock Chase; S Staffs";
             when e_staff_staffordshire_moorlands => return "E Staff; Staffordshire Moorlands";
             when lichfield_tamworth => return "Lichfield; Tamworth";
             when newcastle_under_lyme_stafford => return "Newcastle-under-Lyme; Stafford";
             when stoke_on_trent => return "Stoke-on-Trent";
             when greenwich => return "Greenwich";
             when babergh_ipswich => return "Babergh; Ipswich";
             when forest_heath_m_suffolk_st_edmundsbury => return "Forest Heath; M Suffolk; St Edmundsbury";
             when suffolk_coastal_waveney => return "Suffolk Coastal; Waveney";
             when elmbridge_epsom_and_ewell => return "Elmbridge; Epsom & Ewell";
             when guildford => return "Guildford";
             when mole_valley_waverley => return "Mole Valley; Waverley";
             when reigate_and_banstead_tandrige => return "Reigate & Banstead; Tandrige";
             when runnymede_spelthorne => return "Runnymede; Spelthorne";
             when surrey_heath_woking => return "Surrey Heath; Woking";
             when n_warwick_nuneaton_and_bedwoth_rugby => return "N Warwick; Nuneaton & Bedwoth; Rugby";
             when harrow => return "Harrow";
             when stratford_on_avon_warwick => return "Stratford-on-Avon; Warwick";
             when adur_worthing => return "Adur; Worthing";
             when arun => return "Arun";
             when chichester_horsham => return "Chichester; Horsham";
             when crawley_mid_sussex => return "Crawley; Mid Sussex";
             when kennet_salisbury => return "Kennet; Salisbury";
             when n_wilts_w_wilts => return "N Wilts; W Wilts";
             when thamesdown => return "Thamesdown";
             when alyn_and_deeside_delyn_wrexham_maelor => return "Alyn & Deeside; Delyn; Wrexham Maelor";
             when colwyn_glyndwr_rhuddlan => return "Colwyn; Glyndwr; Rhuddlan";
             when havering => return "Havering";
             when carmarthen_dinefwr_llanelli => return "Carmarthen; Dinefwr; Llanelli";
             when ceredigion_preseli_pembroke_s_pemb => return "Ceredigion; Preseli; Pembroke; S Pemb";
             when blaenau_gwent_islywn => return "Blaenau Gwent; Islywn";
             when monmouth_torfaen => return "Monmouth; Torfaen";
             when newport => return "Newport";
             when gwynedd => return "Gwynedd";
             when cynon_valley_rhondda => return "Cynon Valley; Rhondda";
             when merthyr_tydfil_rhymney_vall_taff_ely => return "Merthyr Tydfil; Rhymney Vall; Taff-Ely";
             when ogwr => return "Ogwr";
             when brecknock_montgomeryshire_radnorshire => return "Brecknock; Montgomeryshire; Radnorshire";
             when hillingdon => return "Hillingdon";
             when cardiff => return "Cardiff";
             when vale_of_glamorgan => return "Vale of Glamorgan";
             when lliw_valley_neath_port_talbot => return "LLiw Valley; Neath; Port Talbot";
             when swansea => return "Swansea";
             when e_and_m_lothian_borders => return "E & M Lothian; Borders";
             when edinburgh_city => return "Edinburgh City";
             when west_lothian => return "West Lothian";
             when clackmannan_stirling => return "Clackmannan; Stirling";
             when falkirk => return "Falkirk";
             when annadale_nithsdale_stewarty_wigtown => return "Annadale ; Nithsdale; Stewarty; Wigtown";
             when hounslow => return "Hounslow";
             when dunfermline => return "Dunfermline";
             when kirkcaldy_ne_fife => return "Kirkcaldy; NE Fife";
             when aberdeen_city => return "Aberdeen City";
             when banff_and_buchan_moray => return "Banff & Buchan; Moray";
             when gordon_kincardine_and_deeside => return "Gordon; Kincardine & Deeside";
             when nw_highlands_western_isles => return "NW Highlands; Western Isles";
             when s_and_e_highlands_orkney_shetlands => return "S & E Highlands; Orkney; Shetlands";
             when argyll_and_bute_dumbarton_inverclyde => return "Argyll & Bute; Dumbarton; Inverclyde";
             when bearsden_clydebank_strathkelvin => return "Bearsden ; Clydebank; Strathkelvin";
             when cumbernauld_and_kilsyth_monklands => return "Cumbernauld & Kilsyth; Monklands";
             when kingston_upon_thames => return "Kingston upon Thames";
             when clydesdale_cumnock_doon_kyle_carrick => return "Clydesdale; Cumnock Doon ; Kyle Carrick";
             when cunninghame => return "Cunninghame";
             when east_kilbride_hamilton => return "East Kilbride; Hamilton";
             when eastwood_kilmarnock_and_loudon => return "Eastwood; Kilmarnock & Loudon";
             when glasgow_city => return "Glasgow City";
             when motherwell => return "Motherwell";
             when renfrew => return "Renfrew";
             when angus_perth_and_kinross => return "Angus; Perth & Kinross";
             when dundee_city => return "Dundee City";
             when merton => return "Merton";
             when redbridge => return "Redbridge";
             when hackney => return "Hackney";
             when richmond_upon_thames => return "Richmond upon Thames";
             when inner_london_nos => return "Inner London n.o.s";
             when outer_london_nos => return "Outer London n.o.s.";
             when greater_manchester_nos => return "Greater Manchester n.o.s.";
             when merseyside_nos => return "Merseyside n.o.s.";
             when south_yorkshire_nos => return "South Yorkshire n.o.s.";
             when tyne_and_wear_nos => return "Tyne and Wear n.o.s.";
             when west_midland_nos => return "West Midland,  n.o.s.";
             when west_yorkshire_yorkshire_nos => return "West Yorkshire, Yorkshire n.o.s.";
             when avon_nos => return "Avon n.o.s.";
             when sutton => return "Sutton";
             when bedfordshire_nos => return "Bedfordshire n.o.s.";
             when berkshire_nos => return "Berkshire n.o.s.";
             when buckinghamshire_nos => return "Buckinghamshire n.o.s.";
             when cambridgeshire_nos => return "Cambridgeshire n.o.s.";
             when chesire_nos => return "Chesire n.o.s.";
             when cleveland_nos => return "Cleveland n.o.s.";
             when cornwall_nos => return "Cornwall n.o.s.";
             when cumbria_nos => return "Cumbria n.o.s.";
             when derbyshire_nos => return "Derbyshire n.o.s.";
             when devon_nos => return "Devon n.o.s.";
             when waltham_forest => return "Waltham Forest";
             when dorset_nos => return "Dorset n.o.s.";
             when durham_nos => return "Durham n.o.s.";
             when east_sussex_nos => return "East Sussex n.o.s.";
             when essex_nos => return "Essex n.o.s.";
             when gloucestershire_nos => return "Gloucestershire n.o.s.";
             when hampshire_nos => return "Hampshire n.o.s.";
             when hereford_and_worcester_nos => return "Hereford and Worcester n.o.s.";
             when hertfordshire_nos => return "Hertfordshire n.o.s.";
             when humberside_nos => return "Humberside n.o.s.";
             when isle_of_wight_nos => return "Isle of Wight n.o.s.";
             when bolton => return "Bolton";
             when kent_nos => return "Kent n.o.s.";
             when lancashire_nos => return "Lancashire n.o.s.";
             when leicestershire_nos => return "Leicestershire n.o.s.";
             when lincolnshire_nos => return "Lincolnshire n.o.s.";
             when norfolk_nos => return "Norfolk n.o.s.";
             when northamptonshire_nos => return "Northamptonshire n.o.s.";
             when northumberland_nos => return "Northumberland n.o.s.";
             when north_yorkshire_nos => return "North Yorkshire n.o.s.";
             when nottinghamshire_nos => return "Nottinghamshire n.o.s.";
             when oxfordshire_nos => return "Oxfordshire n.o.s.";
             when bury => return "Bury";
             when shropshire_nos => return "Shropshire n.o.s.";
             when somerset_nos => return "Somerset n.o.s.";
             when staffordshire_nos => return "Staffordshire n.o.s.";
             when suffolk_nos => return "Suffolk n.o.s.";
             when surrey_nos => return "Surrey n.o.s.";
             when warwickshire_nos => return "Warwickshire n.o.s.";
             when west_sussex_nos => return "West Sussex n.o.s.";
             when wiltshire_nos => return "Wiltshire n.o.s.";
             when clwyd_nos => return "Clwyd n.o.s.";
             when dyfed_nos => return "Dyfed n.o.s.";
             when manchester => return "Manchester";
             when gwent_nos => return "Gwent n.o.s.";
             when gwynedd_nos => return "Gwynedd n.o.s.";
             when mid_glamorgan_nos => return "Mid Glamorgan n.o.s.";
             when powys_nos => return "Powys n.o.s.";
             when south_glamorgan_nos => return "South Glamorgan n.o.s.";
             when west_glamorgan_nos => return "West Glamorgan n.o.s.";
             when borders_nos => return "Borders n.o.s.";
             when lothian_nos => return "Lothian n.o.s.";
             when central_nos => return "Central n.o.s.";
             when dumfries_and_galloway_nos => return "Dumfries and Galloway n.o.s.";
             when oldham => return "Oldham";
             when fife_nos => return "Fife n.o.s.";
             when grampian_nos => return "Grampian n.o.s.";
             when highlands_and_islands_nos => return "Highlands & Islands n.o.s.";
             when strathclyde_nos => return "Strathclyde n.o.s.";
             when tayside_nos => return "Tayside n.o.s.";
             when northern_ireland => return "Northern Ireland";
             when channel_islands_isle_of_man => return "Channel Islands, Isle of Man";
             when rochdale => return "Rochdale";
             when salford => return "Salford";
             when stockport => return "Stockport";
             when hammersmith_and_fulham => return "Hammersmith & Fulham";
             when tameside => return "Tameside";
             when trafford => return "Trafford";
             when wigan => return "Wigan";
             when knowsley => return "Knowsley";
             when liverpool => return "Liverpool";
             when st_helens => return "St Helens";
             when sefton => return "Sefton";
             when wirral => return "Wirral";
             when barnsley => return "Barnsley";
             when doncaster => return "Doncaster";
             when haringey => return "Haringey";
             when rotherham => return "Rotherham";
             when sheffield => return "Sheffield";
             when gateshead => return "Gateshead";
             when newcastle_upon_tyne => return "Newcastle upon Tyne";
             when north_tyneside => return "North Tyneside";
             when south_tyneside => return "South Tyneside";
             when sunderland => return "Sunderland";
             when birmingham => return "Birmingham";
             when coventry => return "Coventry";
             when dudley => return "Dudley";
             when islington => return "Islington";
             when sandwell => return "Sandwell";
             when solihull => return "Solihull";
             when walsall => return "Walsall";
             when wolverhampton => return "Wolverhampton";
             when bradford => return "Bradford";
             when calderdale => return "Calderdale";
             when kirklees => return "Kirklees";
             when leeds => return "Leeds";
             when wakefield => return "Wakefield";
             when bath_kingswood_wansdyke => return "Bath; Kingswood; Wansdyke";
             when kensington_and_chelsea => return "Kensington & Chelsea";
             when bristol => return "Bristol";
             when northavon => return "Northavon";
             when woodspring => return "Woodspring";
             when luton => return "Luton";
             when mid_beds_south_beds => return "Mid Beds; South Beds";
             when north_bedfordshire => return "North Bedfordshire";
             when bracknell_forest_slough => return "Bracknell Forest; Slough";
             when newbury => return "Newbury";
             when reading => return "Reading";
             when windor_and_maidenhead => return "Windor & Maidenhead";
             when lambeth => return "Lambeth";
             when wokingham => return "Wokingham";
             when aylesbury_vale => return "Aylesbury Vale";
             when chiltern_south_bucks => return "Chiltern; South Bucks";
             when milton_keynes => return "Milton Keynes";
             when wycombe => return "Wycombe";
             when cambridge_south_cambs => return "Cambridge; South Cambs";
             when east_cambs_fenland => return "East Cambs; Fenland";
             when huntingdonshire => return "Huntingdonshire";
             when peterborough => return "Peterborough";
             when chester_ellesmere_port_and_neston => return "Chester; Ellesmere Port & Neston";
             when lewisham => return "Lewisham";
             when congleton_crewe_and_nantwich_vale_royal => return "Congleton; Crewe & Nantwich; Vale Royal";
             when halton => return "Halton";
             when macclesfield => return "Macclesfield";
             when warrington => return "Warrington";
             when hartlepool_stockton => return "Hartlepool; Stockton";
             when langbaurgh_on_tees => return "Langbaurgh-on-Tees";
             when middlesborough => return "Middlesborough";
             when caradon_north_cornwall => return "Caradon; North Cornwall";
             when carrick_restormel => return "Carrick; Restormel";
             when kerrier_penwith_isles_of_scilly => return "Kerrier; Penwith; Isles of Scilly";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Plb4d_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Plb4d_Type( i : String ) return Plb4d_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return city_westminster;
         elsif i = "10" then
            return newham;
         elsif i = "100" then
            return allerdale_carlisle;
         elsif i = "101" then
            return barrow_in_furness_copeland;
         elsif i = "102" then
            return eden_south_lakeland;
         elsif i = "103" then
            return amber_valley_ne_derbyshire;
         elsif i = "104" then
            return bolsover_chesterfield;
         elsif i = "105" then
            return derby;
         elsif i = "106" then
            return erewash_south_derbyshire;
         elsif i = "107" then
            return high_peak_derbyshire_dales;
         elsif i = "108" then
            return east_devon_mid_devon;
         elsif i = "109" then
            return exeter_teignbridge;
         elsif i = "11" then
            return southwark;
         elsif i = "110" then
            return north_devon_torridge;
         elsif i = "111" then
            return plymouth;
         elsif i = "112" then
            return south_hams_west_devon;
         elsif i = "113" then
            return torbay;
         elsif i = "114" then
            return bournemouth;
         elsif i = "115" then
            return christchurch_e_dorset_n_dorset;
         elsif i = "116" then
            return poole;
         elsif i = "117" then
            return purbeck_w_dorset_weymouth_and_portland;
         elsif i = "118" then
            return chester_le_street_durham;
         elsif i = "119" then
            return darlington_teesdale;
         elsif i = "12" then
            return tower_hamlets;
         elsif i = "120" then
            return derwentside_wear_valley;
         elsif i = "121" then
            return easington_sedgefield;
         elsif i = "122" then
            return brighton;
         elsif i = "123" then
            return eastbourne_hove_lewes;
         elsif i = "124" then
            return hastings_rother;
         elsif i = "125" then
            return wealdon;
         elsif i = "126" then
            return basildon;
         elsif i = "127" then
            return braintree_uttlesford;
         elsif i = "128" then
            return brentwood_epping_forest_harlow;
         elsif i = "129" then
            return castle_point_maldon_rochford;
         elsif i = "13" then
            return wandsworth;
         elsif i = "130" then
            return chelmsford;
         elsif i = "131" then
            return colchester;
         elsif i = "132" then
            return southend_on_sea;
         elsif i = "133" then
            return tendring;
         elsif i = "134" then
            return thurrock;
         elsif i = "135" then
            return cheltenham_cotswold;
         elsif i = "136" then
            return forest_of_dean_stroud;
         elsif i = "137" then
            return gloucester_tewkesbury;
         elsif i = "138" then
            return basingstoke_and_deane;
         elsif i = "139" then
            return east_hampshire_havant;
         elsif i = "14" then
            return barking_and_dagenham;
         elsif i = "140" then
            return eastleigh_fareham_gosport;
         elsif i = "141" then
            return hart_rushmoor;
         elsif i = "142" then
            return new_forest;
         elsif i = "143" then
            return portsmouth;
         elsif i = "144" then
            return southampton;
         elsif i = "145" then
            return test_valley_winchester;
         elsif i = "146" then
            return bromsgrove_wyre_forest;
         elsif i = "147" then
            return hereford_leominster_s_herefordshire;
         elsif i = "148" then
            return malvern_hills_worcester;
         elsif i = "149" then
            return redditch_wychavon;
         elsif i = "15" then
            return barnet;
         elsif i = "150" then
            return broxbourne_e_hertfordshire;
         elsif i = "151" then
            return dacorum;
         elsif i = "152" then
            return hertsmere_welwyn_hatfield;
         elsif i = "153" then
            return n_hertfordshire_stevenage;
         elsif i = "154" then
            return st_albans;
         elsif i = "155" then
            return three_rivers_watford;
         elsif i = "156" then
            return beverley_boothferry;
         elsif i = "157" then
            return cleethorpes_great_grimsby;
         elsif i = "158" then
            return e_yorkshire_holderness;
         elsif i = "159" then
            return glanford_scunthorpe;
         elsif i = "16" then
            return bexley;
         elsif i = "160" then
            return kingston_upon_hull;
         elsif i = "161" then
            return medina_south_wight;
         elsif i = "162" then
            return ashford_tunbridge_wells;
         elsif i = "163" then
            return canterbury;
         elsif i = "164" then
            return dartford_gravesham;
         elsif i = "165" then
            return dover_shepway;
         elsif i = "166" then
            return gillingham_swale;
         elsif i = "167" then
            return maidstone;
         elsif i = "168" then
            return rochester_upon_medway;
         elsif i = "169" then
            return sevenoaks_tonbridge_and_malling;
         elsif i = "17" then
            return brent;
         elsif i = "170" then
            return thanet;
         elsif i = "171" then
            return blackburn;
         elsif i = "172" then
            return blackpool;
         elsif i = "173" then
            return burnley_pendle;
         elsif i = "174" then
            return chorley_west_lancashire;
         elsif i = "175" then
            return fylde_wyre;
         elsif i = "176" then
            return hyndburn_rossendale;
         elsif i = "177" then
            return lancaster;
         elsif i = "178" then
            return preston;
         elsif i = "179" then
            return ribble_valley_south_ribble;
         elsif i = "18" then
            return bromley;
         elsif i = "180" then
            return blaby_oadby_and_wigston;
         elsif i = "181" then
            return charnwood;
         elsif i = "182" then
            return harborough_melton_rutland;
         elsif i = "183" then
            return hinkley_and_bosworth_nw_leics;
         elsif i = "184" then
            return leicester;
         elsif i = "185" then
            return boston_s_holland;
         elsif i = "186" then
            return e_lindsey_lincoln_w_lindsey;
         elsif i = "187" then
            return n_kesteven_s_kesteven;
         elsif i = "188" then
            return breckland_s_norfolk;
         elsif i = "189" then
            return broadland_norwich;
         elsif i = "19" then
            return croydon;
         elsif i = "190" then
            return great_yarmouth;
         elsif i = "191" then
            return kings_lynn_and_w_norfolk;
         elsif i = "192" then
            return corby_kettering;
         elsif i = "193" then
            return daventry_s_northants;
         elsif i = "194" then
            return e_northants_wellingborough;
         elsif i = "195" then
            return northampton;
         elsif i = "196" then
            return alnwick_berwick_morpeth_tynedale;
         elsif i = "197" then
            return blyth_valley_wansbeck;
         elsif i = "198" then
            return craven_hambleton_richmondshire;
         elsif i = "199" then
            return ryedale_scarborough;
         elsif i = "2" then
            return camden;
         elsif i = "20" then
            return ealing;
         elsif i = "200" then
            return harrogate;
         elsif i = "201" then
            return selby_york;
         elsif i = "202" then
            return ashfield_mansfield;
         elsif i = "203" then
            return bassetlaw_newark_and_sherwood;
         elsif i = "204" then
            return broxtowe_gedling_rushcliffe;
         elsif i = "205" then
            return nottingham;
         elsif i = "206" then
            return cherwell;
         elsif i = "207" then
            return oxford_vale_white_horse_west_oxford;
         elsif i = "208" then
            return south_oxfordshire;
         elsif i = "209" then
            return bridgnorth_shrewsbury_and_atcham;
         elsif i = "21" then
            return enfield;
         elsif i = "210" then
            return n_shropshire_oswestry_s_shropshire;
         elsif i = "211" then
            return the_wrekin;
         elsif i = "212" then
            return mendip_sedgemoor;
         elsif i = "213" then
            return south_somerset;
         elsif i = "214" then
            return taunton_deane_w_somerset;
         elsif i = "215" then
            return cannock_chase_s_staffs;
         elsif i = "216" then
            return e_staff_staffordshire_moorlands;
         elsif i = "217" then
            return lichfield_tamworth;
         elsif i = "218" then
            return newcastle_under_lyme_stafford;
         elsif i = "219" then
            return stoke_on_trent;
         elsif i = "22" then
            return greenwich;
         elsif i = "220" then
            return babergh_ipswich;
         elsif i = "221" then
            return forest_heath_m_suffolk_st_edmundsbury;
         elsif i = "222" then
            return suffolk_coastal_waveney;
         elsif i = "223" then
            return elmbridge_epsom_and_ewell;
         elsif i = "224" then
            return guildford;
         elsif i = "225" then
            return mole_valley_waverley;
         elsif i = "226" then
            return reigate_and_banstead_tandrige;
         elsif i = "227" then
            return runnymede_spelthorne;
         elsif i = "228" then
            return surrey_heath_woking;
         elsif i = "229" then
            return n_warwick_nuneaton_and_bedwoth_rugby;
         elsif i = "23" then
            return harrow;
         elsif i = "230" then
            return stratford_on_avon_warwick;
         elsif i = "231" then
            return adur_worthing;
         elsif i = "232" then
            return arun;
         elsif i = "233" then
            return chichester_horsham;
         elsif i = "234" then
            return crawley_mid_sussex;
         elsif i = "235" then
            return kennet_salisbury;
         elsif i = "236" then
            return n_wilts_w_wilts;
         elsif i = "237" then
            return thamesdown;
         elsif i = "238" then
            return alyn_and_deeside_delyn_wrexham_maelor;
         elsif i = "239" then
            return colwyn_glyndwr_rhuddlan;
         elsif i = "24" then
            return havering;
         elsif i = "240" then
            return carmarthen_dinefwr_llanelli;
         elsif i = "241" then
            return ceredigion_preseli_pembroke_s_pemb;
         elsif i = "242" then
            return blaenau_gwent_islywn;
         elsif i = "243" then
            return monmouth_torfaen;
         elsif i = "244" then
            return newport;
         elsif i = "245" then
            return gwynedd;
         elsif i = "246" then
            return cynon_valley_rhondda;
         elsif i = "247" then
            return merthyr_tydfil_rhymney_vall_taff_ely;
         elsif i = "248" then
            return ogwr;
         elsif i = "249" then
            return brecknock_montgomeryshire_radnorshire;
         elsif i = "25" then
            return hillingdon;
         elsif i = "250" then
            return cardiff;
         elsif i = "251" then
            return vale_of_glamorgan;
         elsif i = "252" then
            return lliw_valley_neath_port_talbot;
         elsif i = "253" then
            return swansea;
         elsif i = "254" then
            return e_and_m_lothian_borders;
         elsif i = "255" then
            return edinburgh_city;
         elsif i = "256" then
            return west_lothian;
         elsif i = "257" then
            return clackmannan_stirling;
         elsif i = "258" then
            return falkirk;
         elsif i = "259" then
            return annadale_nithsdale_stewarty_wigtown;
         elsif i = "26" then
            return hounslow;
         elsif i = "260" then
            return dunfermline;
         elsif i = "261" then
            return kirkcaldy_ne_fife;
         elsif i = "262" then
            return aberdeen_city;
         elsif i = "263" then
            return banff_and_buchan_moray;
         elsif i = "264" then
            return gordon_kincardine_and_deeside;
         elsif i = "265" then
            return nw_highlands_western_isles;
         elsif i = "266" then
            return s_and_e_highlands_orkney_shetlands;
         elsif i = "267" then
            return argyll_and_bute_dumbarton_inverclyde;
         elsif i = "268" then
            return bearsden_clydebank_strathkelvin;
         elsif i = "269" then
            return cumbernauld_and_kilsyth_monklands;
         elsif i = "27" then
            return kingston_upon_thames;
         elsif i = "270" then
            return clydesdale_cumnock_doon_kyle_carrick;
         elsif i = "271" then
            return cunninghame;
         elsif i = "272" then
            return east_kilbride_hamilton;
         elsif i = "273" then
            return eastwood_kilmarnock_and_loudon;
         elsif i = "274" then
            return glasgow_city;
         elsif i = "275" then
            return motherwell;
         elsif i = "276" then
            return renfrew;
         elsif i = "277" then
            return angus_perth_and_kinross;
         elsif i = "278" then
            return dundee_city;
         elsif i = "28" then
            return merton;
         elsif i = "29" then
            return redbridge;
         elsif i = "3" then
            return hackney;
         elsif i = "30" then
            return richmond_upon_thames;
         elsif i = "301" then
            return inner_london_nos;
         elsif i = "302" then
            return outer_london_nos;
         elsif i = "303" then
            return greater_manchester_nos;
         elsif i = "304" then
            return merseyside_nos;
         elsif i = "305" then
            return south_yorkshire_nos;
         elsif i = "306" then
            return tyne_and_wear_nos;
         elsif i = "307" then
            return west_midland_nos;
         elsif i = "308" then
            return west_yorkshire_yorkshire_nos;
         elsif i = "309" then
            return avon_nos;
         elsif i = "31" then
            return sutton;
         elsif i = "310" then
            return bedfordshire_nos;
         elsif i = "311" then
            return berkshire_nos;
         elsif i = "312" then
            return buckinghamshire_nos;
         elsif i = "313" then
            return cambridgeshire_nos;
         elsif i = "314" then
            return chesire_nos;
         elsif i = "315" then
            return cleveland_nos;
         elsif i = "316" then
            return cornwall_nos;
         elsif i = "317" then
            return cumbria_nos;
         elsif i = "318" then
            return derbyshire_nos;
         elsif i = "319" then
            return devon_nos;
         elsif i = "32" then
            return waltham_forest;
         elsif i = "320" then
            return dorset_nos;
         elsif i = "321" then
            return durham_nos;
         elsif i = "322" then
            return east_sussex_nos;
         elsif i = "323" then
            return essex_nos;
         elsif i = "324" then
            return gloucestershire_nos;
         elsif i = "325" then
            return hampshire_nos;
         elsif i = "326" then
            return hereford_and_worcester_nos;
         elsif i = "327" then
            return hertfordshire_nos;
         elsif i = "328" then
            return humberside_nos;
         elsif i = "329" then
            return isle_of_wight_nos;
         elsif i = "33" then
            return bolton;
         elsif i = "330" then
            return kent_nos;
         elsif i = "331" then
            return lancashire_nos;
         elsif i = "332" then
            return leicestershire_nos;
         elsif i = "333" then
            return lincolnshire_nos;
         elsif i = "334" then
            return norfolk_nos;
         elsif i = "335" then
            return northamptonshire_nos;
         elsif i = "336" then
            return northumberland_nos;
         elsif i = "337" then
            return north_yorkshire_nos;
         elsif i = "338" then
            return nottinghamshire_nos;
         elsif i = "339" then
            return oxfordshire_nos;
         elsif i = "34" then
            return bury;
         elsif i = "340" then
            return shropshire_nos;
         elsif i = "341" then
            return somerset_nos;
         elsif i = "342" then
            return staffordshire_nos;
         elsif i = "343" then
            return suffolk_nos;
         elsif i = "344" then
            return surrey_nos;
         elsif i = "345" then
            return warwickshire_nos;
         elsif i = "346" then
            return west_sussex_nos;
         elsif i = "347" then
            return wiltshire_nos;
         elsif i = "348" then
            return clwyd_nos;
         elsif i = "349" then
            return dyfed_nos;
         elsif i = "35" then
            return manchester;
         elsif i = "350" then
            return gwent_nos;
         elsif i = "351" then
            return gwynedd_nos;
         elsif i = "352" then
            return mid_glamorgan_nos;
         elsif i = "353" then
            return powys_nos;
         elsif i = "354" then
            return south_glamorgan_nos;
         elsif i = "355" then
            return west_glamorgan_nos;
         elsif i = "356" then
            return borders_nos;
         elsif i = "357" then
            return lothian_nos;
         elsif i = "358" then
            return central_nos;
         elsif i = "359" then
            return dumfries_and_galloway_nos;
         elsif i = "36" then
            return oldham;
         elsif i = "360" then
            return fife_nos;
         elsif i = "361" then
            return grampian_nos;
         elsif i = "362" then
            return highlands_and_islands_nos;
         elsif i = "363" then
            return strathclyde_nos;
         elsif i = "364" then
            return tayside_nos;
         elsif i = "367" then
            return northern_ireland;
         elsif i = "368" then
            return channel_islands_isle_of_man;
         elsif i = "37" then
            return rochdale;
         elsif i = "38" then
            return salford;
         elsif i = "39" then
            return stockport;
         elsif i = "4" then
            return hammersmith_and_fulham;
         elsif i = "40" then
            return tameside;
         elsif i = "41" then
            return trafford;
         elsif i = "42" then
            return wigan;
         elsif i = "43" then
            return knowsley;
         elsif i = "44" then
            return liverpool;
         elsif i = "45" then
            return st_helens;
         elsif i = "46" then
            return sefton;
         elsif i = "47" then
            return wirral;
         elsif i = "48" then
            return barnsley;
         elsif i = "49" then
            return doncaster;
         elsif i = "5" then
            return haringey;
         elsif i = "50" then
            return rotherham;
         elsif i = "51" then
            return sheffield;
         elsif i = "52" then
            return gateshead;
         elsif i = "53" then
            return newcastle_upon_tyne;
         elsif i = "54" then
            return north_tyneside;
         elsif i = "55" then
            return south_tyneside;
         elsif i = "56" then
            return sunderland;
         elsif i = "57" then
            return birmingham;
         elsif i = "58" then
            return coventry;
         elsif i = "59" then
            return dudley;
         elsif i = "6" then
            return islington;
         elsif i = "60" then
            return sandwell;
         elsif i = "61" then
            return solihull;
         elsif i = "62" then
            return walsall;
         elsif i = "63" then
            return wolverhampton;
         elsif i = "64" then
            return bradford;
         elsif i = "65" then
            return calderdale;
         elsif i = "66" then
            return kirklees;
         elsif i = "67" then
            return leeds;
         elsif i = "68" then
            return wakefield;
         elsif i = "69" then
            return bath_kingswood_wansdyke;
         elsif i = "7" then
            return kensington_and_chelsea;
         elsif i = "70" then
            return bristol;
         elsif i = "71" then
            return northavon;
         elsif i = "72" then
            return woodspring;
         elsif i = "73" then
            return luton;
         elsif i = "74" then
            return mid_beds_south_beds;
         elsif i = "75" then
            return north_bedfordshire;
         elsif i = "76" then
            return bracknell_forest_slough;
         elsif i = "77" then
            return newbury;
         elsif i = "78" then
            return reading;
         elsif i = "79" then
            return windor_and_maidenhead;
         elsif i = "8" then
            return lambeth;
         elsif i = "80" then
            return wokingham;
         elsif i = "81" then
            return aylesbury_vale;
         elsif i = "82" then
            return chiltern_south_bucks;
         elsif i = "83" then
            return milton_keynes;
         elsif i = "84" then
            return wycombe;
         elsif i = "85" then
            return cambridge_south_cambs;
         elsif i = "86" then
            return east_cambs_fenland;
         elsif i = "87" then
            return huntingdonshire;
         elsif i = "88" then
            return peterborough;
         elsif i = "89" then
            return chester_ellesmere_port_and_neston;
         elsif i = "9" then
            return lewisham;
         elsif i = "90" then
            return congleton_crewe_and_nantwich_vale_royal;
         elsif i = "91" then
            return halton;
         elsif i = "92" then
            return macclesfield;
         elsif i = "93" then
            return warrington;
         elsif i = "94" then
            return hartlepool_stockton;
         elsif i = "95" then
            return langbaurgh_on_tees;
         elsif i = "96" then
            return middlesborough;
         elsif i = "97" then
            return caradon_north_cornwall;
         elsif i = "98" then
            return carrick_restormel;
         elsif i = "99" then
            return kerrier_penwith_isles_of_scilly;
        end if;
        Put_Line("Convert_Plb4d_Type: Unmatched string |" & i & "|" );
        return Plb4d_Type'First; -- never actually gets here; for compiler only
    end Convert_Plb4d_Type;



    function Pretty_Print( i : Plbornc_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when australia => return "Australia";
             when canada => return "Canada";
             when new_zealand => return "New Zealand";
             when kenya => return "Kenya";
             when uganda => return "Uganda";
             when tanzania => return "Tanzania";
             when malawi => return "Malawi";
             when zambia => return "Zambia";
             when zimbabwe => return "Zimbabwe";
             when botswana => return "Botswana";
             when gambia => return "Gambia";
             when ghana => return "Ghana";
             when nigeria => return "Nigeria";
             when sierra_leone => return "Sierra Leone";
             when barbados => return "Barbados";
             when jamaica => return "Jamaica";
             when trinidad_or_tobago => return "Trinidad/Tobago";
             when w_indies_assoc_states => return "W Indies assoc states";
             when west_indies => return "West Indies";
             when other_carib_cmmnwlth => return "Other Carib Cmmnwlth";
             when belize_or_brit_honduras => return "Belize/Brit Honduras";
             when guyana => return "Guyana";
             when bangladesh => return "Bangladesh";
             when india => return "India";
             when sri_lanka_or_ceylon => return "Sri Lanka/Ceylon";
             when hong_kong => return "Hong Kong";
             when malaysia => return "Malaysia";
             when singapore => return "Singapore";
             when cyprus => return "Cyprus";
             when gibraltar => return "Gibraltar";
             when malta_and_gozo => return "Malta and Gozo";
             when seychelles => return "Seychelles";
             when mauritius => return "Mauritius";
             when other_new_cmmnwlth => return "Other New Cmmnwlth";
             when algeria => return "Algeria";
             when morocco => return "Morocco";
             when tunisia => return "Tunisia";
             when libya => return "Libya";
             when egypt => return "Egypt";
             when rep_of_s_africa => return "Rep of S Africa";
             when other_africa_foreign => return "Other Africa, Foreign";
             when usa => return "USA";
             when caribbean => return "Caribbean";
             when central_america => return "Central America";
             when south_america => return "South America";
             when pakistan => return "Pakistan";
             when burma => return "Burma";
             when china_includ_taiwan => return "China includ Taiwan";
             when japan => return "Japan";
             when irish_republic => return "Irish Republic";
             when phillipines => return "Phillipines";
             when vietnam => return "Vietnam";
             when iran => return "Iran";
             when israel => return "Israel";
             when other_middle_eastern => return "Other Middle Eastern";
             when other_asia => return "Other Asia";
             when belgium => return "Belgium";
             when denmark => return "Denmark";
             when france => return "France";
             when italy => return "Italy";
             when luxembourg => return "Luxembourg";
             when netherlands => return "Netherlands";
             when german_fed_rep => return "German Fed Rep";
             when germany_pns => return "Germany pns";
             when albania => return "Albania";
             when bulgaria => return "Bulgaria";
             when gdr => return "GDR";
             when czechoslovakia => return "Czechoslovakia";
             when hungary => return "Hungary";
             when poland => return "Poland";
             when romania => return "Romania";
             when austria => return "Austria";
             when switzerland => return "Switzerland";
             when greece => return "Greece";
             when portugal => return "Portugal";
             when spain => return "Spain";
             when finland => return "Finland";
             when norway => return "Norway";
             when sweden => return "Sweden";
             when yugoslavia => return "Yugoslavia";
             when other_europe => return "Other Europe";
             when turkey => return "Turkey";
             when ussr => return "USSR";
             when rest_of_the_world => return "Rest of the World";
             when at_sea_or_air => return "At sea or air";
             when not_stated_or_refused => return "Not stated/refused";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Plbornc_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Plbornc_Type( i : String ) return Plbornc_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "11" then
            return australia;
         elsif i = "12" then
            return canada;
         elsif i = "13" then
            return new_zealand;
         elsif i = "14" then
            return kenya;
         elsif i = "15" then
            return uganda;
         elsif i = "16" then
            return tanzania;
         elsif i = "17" then
            return malawi;
         elsif i = "18" then
            return zambia;
         elsif i = "19" then
            return zimbabwe;
         elsif i = "20" then
            return botswana;
         elsif i = "21" then
            return gambia;
         elsif i = "22" then
            return ghana;
         elsif i = "23" then
            return nigeria;
         elsif i = "24" then
            return sierra_leone;
         elsif i = "25" then
            return barbados;
         elsif i = "26" then
            return jamaica;
         elsif i = "27" then
            return trinidad_or_tobago;
         elsif i = "28" then
            return w_indies_assoc_states;
         elsif i = "29" then
            return west_indies;
         elsif i = "30" then
            return other_carib_cmmnwlth;
         elsif i = "31" then
            return belize_or_brit_honduras;
         elsif i = "32" then
            return guyana;
         elsif i = "33" then
            return bangladesh;
         elsif i = "34" then
            return india;
         elsif i = "35" then
            return sri_lanka_or_ceylon;
         elsif i = "36" then
            return hong_kong;
         elsif i = "37" then
            return malaysia;
         elsif i = "38" then
            return singapore;
         elsif i = "39" then
            return cyprus;
         elsif i = "40" then
            return gibraltar;
         elsif i = "41" then
            return malta_and_gozo;
         elsif i = "42" then
            return seychelles;
         elsif i = "43" then
            return mauritius;
         elsif i = "44" then
            return other_new_cmmnwlth;
         elsif i = "45" then
            return algeria;
         elsif i = "46" then
            return morocco;
         elsif i = "47" then
            return tunisia;
         elsif i = "48" then
            return libya;
         elsif i = "49" then
            return egypt;
         elsif i = "50" then
            return rep_of_s_africa;
         elsif i = "51" then
            return other_africa_foreign;
         elsif i = "52" then
            return usa;
         elsif i = "53" then
            return caribbean;
         elsif i = "54" then
            return central_america;
         elsif i = "55" then
            return south_america;
         elsif i = "56" then
            return pakistan;
         elsif i = "57" then
            return burma;
         elsif i = "58" then
            return china_includ_taiwan;
         elsif i = "59" then
            return japan;
         elsif i = "6" then
            return irish_republic;
         elsif i = "60" then
            return phillipines;
         elsif i = "61" then
            return vietnam;
         elsif i = "62" then
            return iran;
         elsif i = "63" then
            return israel;
         elsif i = "64" then
            return other_middle_eastern;
         elsif i = "65" then
            return other_asia;
         elsif i = "66" then
            return belgium;
         elsif i = "67" then
            return denmark;
         elsif i = "68" then
            return france;
         elsif i = "69" then
            return italy;
         elsif i = "70" then
            return luxembourg;
         elsif i = "71" then
            return netherlands;
         elsif i = "72" then
            return german_fed_rep;
         elsif i = "73" then
            return germany_pns;
         elsif i = "74" then
            return albania;
         elsif i = "75" then
            return bulgaria;
         elsif i = "76" then
            return gdr;
         elsif i = "77" then
            return czechoslovakia;
         elsif i = "78" then
            return hungary;
         elsif i = "79" then
            return poland;
         elsif i = "80" then
            return romania;
         elsif i = "81" then
            return austria;
         elsif i = "82" then
            return switzerland;
         elsif i = "83" then
            return greece;
         elsif i = "84" then
            return portugal;
         elsif i = "85" then
            return spain;
         elsif i = "86" then
            return finland;
         elsif i = "87" then
            return norway;
         elsif i = "88" then
            return sweden;
         elsif i = "89" then
            return yugoslavia;
         elsif i = "90" then
            return other_europe;
         elsif i = "91" then
            return turkey;
         elsif i = "92" then
            return ussr;
         elsif i = "93" then
            return rest_of_the_world;
         elsif i = "94" then
            return at_sea_or_air;
         elsif i = "99" then
            return not_stated_or_refused;
        end if;
        Put_Line("Convert_Plbornc_Type: Unmatched string |" & i & "|" );
        return Plbornc_Type'First; -- never actually gets here; for compiler only
    end Convert_Plbornc_Type;



    function Pretty_Print( i : Plbornd_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't Know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when city_westminster => return "City; Westminster";
             when newham => return "Newham";
             when allerdale_carlisle => return "Allerdale; Carlisle";
             when barrow_in_furness_copeland => return "Barrow-in-Furness; Copeland";
             when eden_south_lakeland => return "Eden; South Lakeland";
             when amber_valley_ne_derbyshire => return "Amber Valley; NE Derbyshire";
             when bolsover_chesterfield => return "Bolsover; Chesterfield";
             when derby => return "Derby";
             when erewash_south_derbyshire => return "Erewash; South Derbyshire";
             when high_peak_derbyshire_dales => return "High Peak; Derbyshire Dales";
             when east_devon_mid_devon => return "East Devon; Mid Devon";
             when exeter_teignbridge => return "Exeter; Teignbridge";
             when southwark => return "Southwark";
             when north_devon_torridge => return "North Devon; Torridge";
             when plymouth => return "Plymouth";
             when south_hams_west_devon => return "South Hams; West Devon";
             when torbay => return "Torbay";
             when bournemouth => return "Bournemouth";
             when christchurch_e_dorset_n_dorset => return "Christchurch; E Dorset; N Dorset";
             when poole => return "Poole";
             when purbeck_w_dorset_weymouth_and_portland => return "Purbeck; W Dorset; Weymouth & Portland";
             when chester_le_street_durham => return "Chester-le-Street; Durham";
             when darlington_teesdale => return "Darlington; Teesdale";
             when tower_hamlets => return "Tower Hamlets";
             when derwentside_wear_valley => return "Derwentside; Wear Valley";
             when easington_sedgefield => return "Easington; Sedgefield";
             when brighton => return "Brighton";
             when eastbourne_hove_lewes => return "Eastbourne; Hove; Lewes";
             when hastings_rother => return "Hastings; Rother";
             when wealdon => return "Wealdon";
             when basildon => return "Basildon";
             when braintree_uttlesford => return "Braintree; Uttlesford";
             when brentwood_epping_forest_harlow => return "Brentwood; Epping Forest; Harlow";
             when castle_point_maldon_rochford => return "Castle Point; Maldon; Rochford";
             when wandsworth => return "Wandsworth";
             when chelmsford => return "Chelmsford";
             when colchester => return "Colchester";
             when southend_on_sea => return "Southend-on-Sea";
             when tendring => return "Tendring";
             when thurrock => return "Thurrock";
             when cheltenham_cotswold => return "Cheltenham; Cotswold";
             when forest_of_dean_stroud => return "Forest of Dean; Stroud";
             when gloucester_tewkesbury => return "Gloucester; Tewkesbury";
             when basingstoke_and_deane => return "Basingstoke & Deane";
             when east_hampshire_havant => return "East Hampshire; Havant";
             when barking_and_dagenham => return "Barking and Dagenham";
             when eastleigh_fareham_gosport => return "Eastleigh; Fareham; Gosport";
             when hart_rushmoor => return "Hart; Rushmoor";
             when new_forest => return "New Forest";
             when portsmouth => return "Portsmouth";
             when southampton => return "Southampton";
             when test_valley_winchester => return "Test Valley; Winchester";
             when bromsgrove_wyre_forest => return "Bromsgrove; Wyre Forest";
             when hereford_leominster_s_herefordshire => return "Hereford; Leominster; S Herefordshire";
             when malvern_hills_worcester => return "Malvern Hills; Worcester";
             when redditch_wychavon => return "Redditch; Wychavon";
             when barnet => return "Barnet";
             when broxbourne_e_hertfordshire => return "Broxbourne; E Hertfordshire";
             when dacorum => return "Dacorum";
             when hertsmere_welwyn_hatfield => return "Hertsmere; Welwyn Hatfield";
             when n_hertfordshire_stevenage => return "N Hertfordshire; Stevenage";
             when st_albans => return "St Albans";
             when three_rivers_watford => return "Three Rivers; Watford";
             when beverley_boothferry => return "Beverley; Boothferry";
             when cleethorpes_great_grimsby => return "Cleethorpes; Great Grimsby";
             when e_yorkshire_holderness => return "E Yorkshire; Holderness";
             when glanford_scunthorpe => return "Glanford; Scunthorpe";
             when bexley => return "Bexley";
             when kingston_upon_hull => return "Kingston-upon-Hull";
             when medina_south_wight => return "Medina; South Wight";
             when ashford_tunbridge_wells => return "Ashford; Tunbridge Wells";
             when canterbury => return "Canterbury";
             when dartford_gravesham => return "Dartford; Gravesham";
             when dover_shepway => return "Dover; Shepway";
             when gillingham_swale => return "Gillingham; Swale";
             when maidstone => return "Maidstone";
             when rochester_upon_medway => return "Rochester upon Medway";
             when sevenoaks_tonbridge_and_malling => return "Sevenoaks; Tonbridge & Malling";
             when brent => return "Brent";
             when thanet => return "Thanet";
             when blackburn => return "Blackburn";
             when blackpool => return "Blackpool";
             when burnley_pendle => return "Burnley; Pendle";
             when chorley_west_lancashire => return "Chorley; West Lancashire";
             when fylde_wyre => return "Fylde; Wyre";
             when hyndburn_rossendale => return "Hyndburn; Rossendale";
             when lancaster => return "Lancaster";
             when preston => return "Preston";
             when ribble_valley_south_ribble => return "Ribble Valley; South Ribble";
             when bromley => return "Bromley";
             when blaby_oadby_and_wigston => return "Blaby; Oadby & Wigston";
             when charnwood => return "Charnwood";
             when harborough_melton_rutland => return "Harborough; Melton; Rutland";
             when hinkley_and_bosworth_nw_leics => return "Hinkley & Bosworth; NW Leics";
             when leicester => return "Leicester";
             when boston_s_holland => return "Boston; S Holland";
             when e_lindsey_lincoln_w_lindsey => return "E Lindsey; Lincoln; W Lindsey";
             when n_kesteven_s_kesteven => return "N Kesteven; S Kesteven";
             when breckland_s_norfolk => return "Breckland; S Norfolk";
             when broadland_norwich => return "Broadland; Norwich";
             when croydon => return "Croydon";
             when great_yarmouth => return "Great Yarmouth";
             when kings_lynn_and_w_norfolk => return "Kings Lynn & W Norfolk";
             when corby_kettering => return "Corby; Kettering";
             when daventry_s_northants => return "Daventry; S Northants";
             when e_northants_wellingborough => return "E Northants; Wellingborough";
             when northampton => return "Northampton";
             when alnwick_berwick_morpeth_tynedale => return "Alnwick; Berwick; Morpeth; Tynedale";
             when blyth_valley_wansbeck => return "Blyth Valley; Wansbeck";
             when craven_hambleton_richmondshire => return "Craven; Hambleton; Richmondshire";
             when ryedale_scarborough => return "Ryedale; Scarborough";
             when camden => return "Camden";
             when ealing => return "Ealing";
             when harrogate => return "Harrogate";
             when selby_york => return "Selby; York";
             when ashfield_mansfield => return "Ashfield; Mansfield";
             when bassetlaw_newark_and_sherwood => return "Bassetlaw; Newark & Sherwood";
             when broxtowe_gedling_rushcliffe => return "Broxtowe; Gedling; Rushcliffe";
             when nottingham => return "Nottingham";
             when cherwell => return "Cherwell";
             when oxford_vale_white_horse_west_oxford => return "Oxford; Vale White Horse; West Oxford";
             when south_oxfordshire => return "South Oxfordshire";
             when bridgnorth_shrewsbury_and_atcham => return "Bridgnorth; Shrewsbury & Atcham";
             when enfield => return "Enfield";
             when n_shropshire_oswestry_s_shropshire => return "N Shropshire; Oswestry; S Shropshire";
             when the_wrekin => return "The Wrekin";
             when mendip_sedgemoor => return "Mendip; Sedgemoor";
             when south_somerset => return "South Somerset";
             when taunton_deane_w_somerset => return "Taunton Deane; W Somerset";
             when cannock_chase_s_staffs => return "Cannock Chase; S Staffs";
             when e_staff_staffordshire_moorlands => return "E Staff; Staffordshire Moorlands";
             when lichfield_tamworth => return "Lichfield; Tamworth";
             when newcastle_under_lyme_stafford => return "Newcastle-under-Lyme; Stafford";
             when stoke_on_trent => return "Stoke-on-Trent";
             when greenwich => return "Greenwich";
             when babergh_ipswich => return "Babergh; Ipswich";
             when forest_heath_m_suffolk_st_edmundsbury => return "Forest Heath; M Suffolk; St Edmundsbury";
             when suffolk_coastal_waveney => return "Suffolk Coastal; Waveney";
             when elmbridge_epsom_and_ewell => return "Elmbridge; Epsom & Ewell";
             when guildford => return "Guildford";
             when mole_valley_waverley => return "Mole Valley; Waverley";
             when reigate_and_banstead_tandrige => return "Reigate & Banstead; Tandrige";
             when runnymede_spelthorne => return "Runnymede; Spelthorne";
             when surrey_heath_woking => return "Surrey Heath; Woking";
             when n_warwick_nuneaton_and_bedwoth_rugby => return "N Warwick; Nuneaton & Bedwoth; Rugby";
             when harrow => return "Harrow";
             when stratford_on_avon_warwick => return "Stratford-on-Avon; Warwick";
             when adur_worthing => return "Adur; Worthing";
             when arun => return "Arun";
             when chichester_horsham => return "Chichester; Horsham";
             when crawley_mid_sussex => return "Crawley; Mid Sussex";
             when kennet_salisbury => return "Kennet; Salisbury";
             when n_wilts_w_wilts => return "N Wilts; W Wilts";
             when thamesdown => return "Thamesdown";
             when alyn_and_deeside_delyn_wrexham_maelor => return "Alyn & Deeside; Delyn; Wrexham Maelor";
             when colwyn_glyndwr_rhuddlan => return "Colwyn; Glyndwr; Rhuddlan";
             when havering => return "Havering";
             when carmarthen_dinefwr_llanelli => return "Carmarthen; Dinefwr; Llanelli";
             when ceredigion_preseli_pembroke_s_pemb => return "Ceredigion; Preseli; Pembroke; S Pemb";
             when blaenau_gwent_islywn => return "Blaenau Gwent; Islywn";
             when monmouth_torfaen => return "Monmouth; Torfaen";
             when newport => return "Newport";
             when gwynedd => return "Gwynedd";
             when cynon_valley_rhondda => return "Cynon Valley; Rhondda";
             when merthyr_tydfil_rhymney_vall_taff_ely => return "Merthyr Tydfil; Rhymney Vall; Taff-Ely";
             when ogwr => return "Ogwr";
             when brecknock_montgomeryshire_radnorshire => return "Brecknock; Montgomeryshire; Radnorshire";
             when hillingdon => return "Hillingdon";
             when cardiff => return "Cardiff";
             when vale_of_glamorgan => return "Vale of Glamorgan";
             when lliw_valley_neath_port_talbot => return "LLiw Valley; Neath; Port Talbot";
             when swansea => return "Swansea";
             when e_and_m_lothian_borders => return "E & M Lothian; Borders";
             when edinburgh_city => return "Edinburgh City";
             when west_lothian => return "West Lothian";
             when clackmannan_stirling => return "Clackmannan; Stirling";
             when falkirk => return "Falkirk";
             when annadale_nithsdale_stewarty_wigtown => return "Annadale ; Nithsdale; Stewarty; Wigtown";
             when hounslow => return "Hounslow";
             when dunfermline => return "Dunfermline";
             when kirkcaldy_ne_fife => return "Kirkcaldy; NE Fife";
             when aberdeen_city => return "Aberdeen City";
             when banff_and_buchan_moray => return "Banff & Buchan; Moray";
             when gordon_kincardine_and_deeside => return "Gordon; Kincardine & Deeside";
             when nw_highlands_western_isles => return "NW Highlands; Western Isles";
             when s_and_e_highlands_orkney_shetlands => return "S & E Highlands; Orkney; Shetlands";
             when argyll_and_bute_dumbarton_inverclyde => return "Argyll & Bute; Dumbarton; Inverclyde";
             when bearsden_clydebank_strathkelvin => return "Bearsden ; Clydebank; Strathkelvin";
             when cumbernauld_and_kilsyth_monklands => return "Cumbernauld & Kilsyth; Monklands";
             when kingston_upon_thames => return "Kingston upon Thames";
             when clydesdale_cumnock_doon_kyle_carrick => return "Clydesdale; Cumnock Doon ; Kyle Carrick";
             when cunninghame => return "Cunninghame";
             when east_kilbride_hamilton => return "East Kilbride; Hamilton";
             when eastwood_kilmarnock_and_loudon => return "Eastwood; Kilmarnock & Loudon";
             when glasgow_city => return "Glasgow City";
             when motherwell => return "Motherwell";
             when renfrew => return "Renfrew";
             when angus_perth_and_kinross => return "Angus; Perth & Kinross";
             when dundee_city => return "Dundee City";
             when merton => return "Merton";
             when redbridge => return "Redbridge";
             when hackney => return "Hackney";
             when richmond_upon_thames => return "Richmond upon Thames";
             when inner_london_nos => return "Inner London n.o.s";
             when outer_london_nos => return "Outer London n.o.s.";
             when greater_manchester_nos => return "Greater Manchester n.o.s.";
             when merseyside_nos => return "Merseyside n.o.s.";
             when south_yorkshire_nos => return "South Yorkshire n.o.s.";
             when tyne_and_wear_nos => return "Tyne and Wear n.o.s.";
             when west_midland_nos => return "West Midland,  n.o.s.";
             when west_yorkshire_yorkshire_nos => return "West Yorkshire, Yorkshire n.o.s.";
             when avon_nos => return "Avon n.o.s.";
             when sutton => return "Sutton";
             when bedfordshire_nos => return "Bedfordshire n.o.s.";
             when berkshire_nos => return "Berkshire n.o.s.";
             when buckinghamshire_nos => return "Buckinghamshire n.o.s.";
             when cambridgeshire_nos => return "Cambridgeshire n.o.s.";
             when chesire_nos => return "Chesire n.o.s.";
             when cleveland_nos => return "Cleveland n.o.s.";
             when cornwall_nos => return "Cornwall n.o.s.";
             when cumbria_nos => return "Cumbria n.o.s.";
             when derbyshire_nos => return "Derbyshire n.o.s.";
             when devon_nos => return "Devon n.o.s.";
             when waltham_forest => return "Waltham Forest";
             when dorset_nos => return "Dorset n.o.s.";
             when durham_nos => return "Durham n.o.s.";
             when east_sussex_nos => return "East Sussex n.o.s.";
             when essex_nos => return "Essex n.o.s.";
             when gloucestershire_nos => return "Gloucestershire n.o.s.";
             when hampshire_nos => return "Hampshire n.o.s.";
             when hereford_and_worcester_nos => return "Hereford and Worcester n.o.s.";
             when hertfordshire_nos => return "Hertfordshire n.o.s.";
             when humberside_nos => return "Humberside n.o.s.";
             when isle_of_wight_nos => return "Isle of Wight n.o.s.";
             when bolton => return "Bolton";
             when kent_nos => return "Kent n.o.s.";
             when lancashire_nos => return "Lancashire n.o.s.";
             when leicestershire_nos => return "Leicestershire n.o.s.";
             when lincolnshire_nos => return "Lincolnshire n.o.s.";
             when norfolk_nos => return "Norfolk n.o.s.";
             when northamptonshire_nos => return "Northamptonshire n.o.s.";
             when northumberland_nos => return "Northumberland n.o.s.";
             when north_yorkshire_nos => return "North Yorkshire n.o.s.";
             when nottinghamshire_nos => return "Nottinghamshire n.o.s.";
             when oxfordshire_nos => return "Oxfordshire n.o.s.";
             when bury => return "Bury";
             when shropshire_nos => return "Shropshire n.o.s.";
             when somerset_nos => return "Somerset n.o.s.";
             when staffordshire_nos => return "Staffordshire n.o.s.";
             when suffolk_nos => return "Suffolk n.o.s.";
             when surrey_nos => return "Surrey n.o.s.";
             when warwickshire_nos => return "Warwickshire n.o.s.";
             when west_sussex_nos => return "West Sussex n.o.s.";
             when wiltshire_nos => return "Wiltshire n.o.s.";
             when clwyd_nos => return "Clwyd n.o.s.";
             when dyfed_nos => return "Dyfed n.o.s.";
             when manchester => return "Manchester";
             when gwent_nos => return "Gwent n.o.s.";
             when gwynedd_nos => return "Gwynedd n.o.s.";
             when mid_glamorgan_nos => return "Mid Glamorgan n.o.s.";
             when powys_nos => return "Powys n.o.s.";
             when south_glamorgan_nos => return "South Glamorgan n.o.s.";
             when west_glamorgan_nos => return "West Glamorgan n.o.s.";
             when borders_nos => return "Borders n.o.s.";
             when lothian_nos => return "Lothian n.o.s.";
             when central_nos => return "Central n.o.s.";
             when dumfries_and_galloway_nos => return "Dumfries and Galloway n.o.s.";
             when oldham => return "Oldham";
             when fife_nos => return "Fife n.o.s.";
             when grampian_nos => return "Grampian n.o.s.";
             when highlands_and_islands_nos => return "Highlands & Islands n.o.s.";
             when strathclyde_nos => return "Strathclyde n.o.s.";
             when tayside_nos => return "Tayside n.o.s.";
             when northern_ireland => return "Northern Ireland";
             when channel_islands_isle_of_man => return "Channel Islands, Isle of Man";
             when rochdale => return "Rochdale";
             when salford => return "Salford";
             when stockport => return "Stockport";
             when hammersmith_and_fulham => return "Hammersmith & Fulham";
             when tameside => return "Tameside";
             when trafford => return "Trafford";
             when wigan => return "Wigan";
             when knowsley => return "Knowsley";
             when liverpool => return "Liverpool";
             when st_helens => return "St Helens";
             when sefton => return "Sefton";
             when wirral => return "Wirral";
             when barnsley => return "Barnsley";
             when doncaster => return "Doncaster";
             when haringey => return "Haringey";
             when rotherham => return "Rotherham";
             when sheffield => return "Sheffield";
             when gateshead => return "Gateshead";
             when newcastle_upon_tyne => return "Newcastle upon Tyne";
             when north_tyneside => return "North Tyneside";
             when south_tyneside => return "South Tyneside";
             when sunderland => return "Sunderland";
             when birmingham => return "Birmingham";
             when coventry => return "Coventry";
             when dudley => return "Dudley";
             when islington => return "Islington";
             when sandwell => return "Sandwell";
             when solihull => return "Solihull";
             when walsall => return "Walsall";
             when wolverhampton => return "Wolverhampton";
             when bradford => return "Bradford";
             when calderdale => return "Calderdale";
             when kirklees => return "Kirklees";
             when leeds => return "Leeds";
             when wakefield => return "Wakefield";
             when bath_kingswood_wansdyke => return "Bath; Kingswood; Wansdyke";
             when kensington_and_chelsea => return "Kensington & Chelsea";
             when bristol => return "Bristol";
             when northavon => return "Northavon";
             when woodspring => return "Woodspring";
             when luton => return "Luton";
             when mid_beds_south_beds => return "Mid Beds; South Beds";
             when north_bedfordshire => return "North Bedfordshire";
             when bracknell_forest_slough => return "Bracknell Forest; Slough";
             when newbury => return "Newbury";
             when reading => return "Reading";
             when windor_and_maidenhead => return "Windor & Maidenhead";
             when lambeth => return "Lambeth";
             when wokingham => return "Wokingham";
             when aylesbury_vale => return "Aylesbury Vale";
             when chiltern_south_bucks => return "Chiltern; South Bucks";
             when milton_keynes => return "Milton Keynes";
             when wycombe => return "Wycombe";
             when cambridge_south_cambs => return "Cambridge; South Cambs";
             when east_cambs_fenland => return "East Cambs; Fenland";
             when huntingdonshire => return "Huntingdonshire";
             when peterborough => return "Peterborough";
             when chester_ellesmere_port_and_neston => return "Chester; Ellesmere Port & Neston";
             when lewisham => return "Lewisham";
             when congleton_crewe_and_nantwich_vale_royal => return "Congleton; Crewe & Nantwich; Vale Royal";
             when halton => return "Halton";
             when macclesfield => return "Macclesfield";
             when warrington => return "Warrington";
             when hartlepool_stockton => return "Hartlepool; Stockton";
             when langbaurgh_on_tees => return "Langbaurgh-on-Tees";
             when middlesborough => return "Middlesborough";
             when caradon_north_cornwall => return "Caradon; North Cornwall";
             when carrick_restormel => return "Carrick; Restormel";
             when kerrier_penwith_isles_of_scilly => return "Kerrier; Penwith; Isles of Scilly";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Plbornd_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Plbornd_Type( i : String ) return Plbornd_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return city_westminster;
         elsif i = "10" then
            return newham;
         elsif i = "100" then
            return allerdale_carlisle;
         elsif i = "101" then
            return barrow_in_furness_copeland;
         elsif i = "102" then
            return eden_south_lakeland;
         elsif i = "103" then
            return amber_valley_ne_derbyshire;
         elsif i = "104" then
            return bolsover_chesterfield;
         elsif i = "105" then
            return derby;
         elsif i = "106" then
            return erewash_south_derbyshire;
         elsif i = "107" then
            return high_peak_derbyshire_dales;
         elsif i = "108" then
            return east_devon_mid_devon;
         elsif i = "109" then
            return exeter_teignbridge;
         elsif i = "11" then
            return southwark;
         elsif i = "110" then
            return north_devon_torridge;
         elsif i = "111" then
            return plymouth;
         elsif i = "112" then
            return south_hams_west_devon;
         elsif i = "113" then
            return torbay;
         elsif i = "114" then
            return bournemouth;
         elsif i = "115" then
            return christchurch_e_dorset_n_dorset;
         elsif i = "116" then
            return poole;
         elsif i = "117" then
            return purbeck_w_dorset_weymouth_and_portland;
         elsif i = "118" then
            return chester_le_street_durham;
         elsif i = "119" then
            return darlington_teesdale;
         elsif i = "12" then
            return tower_hamlets;
         elsif i = "120" then
            return derwentside_wear_valley;
         elsif i = "121" then
            return easington_sedgefield;
         elsif i = "122" then
            return brighton;
         elsif i = "123" then
            return eastbourne_hove_lewes;
         elsif i = "124" then
            return hastings_rother;
         elsif i = "125" then
            return wealdon;
         elsif i = "126" then
            return basildon;
         elsif i = "127" then
            return braintree_uttlesford;
         elsif i = "128" then
            return brentwood_epping_forest_harlow;
         elsif i = "129" then
            return castle_point_maldon_rochford;
         elsif i = "13" then
            return wandsworth;
         elsif i = "130" then
            return chelmsford;
         elsif i = "131" then
            return colchester;
         elsif i = "132" then
            return southend_on_sea;
         elsif i = "133" then
            return tendring;
         elsif i = "134" then
            return thurrock;
         elsif i = "135" then
            return cheltenham_cotswold;
         elsif i = "136" then
            return forest_of_dean_stroud;
         elsif i = "137" then
            return gloucester_tewkesbury;
         elsif i = "138" then
            return basingstoke_and_deane;
         elsif i = "139" then
            return east_hampshire_havant;
         elsif i = "14" then
            return barking_and_dagenham;
         elsif i = "140" then
            return eastleigh_fareham_gosport;
         elsif i = "141" then
            return hart_rushmoor;
         elsif i = "142" then
            return new_forest;
         elsif i = "143" then
            return portsmouth;
         elsif i = "144" then
            return southampton;
         elsif i = "145" then
            return test_valley_winchester;
         elsif i = "146" then
            return bromsgrove_wyre_forest;
         elsif i = "147" then
            return hereford_leominster_s_herefordshire;
         elsif i = "148" then
            return malvern_hills_worcester;
         elsif i = "149" then
            return redditch_wychavon;
         elsif i = "15" then
            return barnet;
         elsif i = "150" then
            return broxbourne_e_hertfordshire;
         elsif i = "151" then
            return dacorum;
         elsif i = "152" then
            return hertsmere_welwyn_hatfield;
         elsif i = "153" then
            return n_hertfordshire_stevenage;
         elsif i = "154" then
            return st_albans;
         elsif i = "155" then
            return three_rivers_watford;
         elsif i = "156" then
            return beverley_boothferry;
         elsif i = "157" then
            return cleethorpes_great_grimsby;
         elsif i = "158" then
            return e_yorkshire_holderness;
         elsif i = "159" then
            return glanford_scunthorpe;
         elsif i = "16" then
            return bexley;
         elsif i = "160" then
            return kingston_upon_hull;
         elsif i = "161" then
            return medina_south_wight;
         elsif i = "162" then
            return ashford_tunbridge_wells;
         elsif i = "163" then
            return canterbury;
         elsif i = "164" then
            return dartford_gravesham;
         elsif i = "165" then
            return dover_shepway;
         elsif i = "166" then
            return gillingham_swale;
         elsif i = "167" then
            return maidstone;
         elsif i = "168" then
            return rochester_upon_medway;
         elsif i = "169" then
            return sevenoaks_tonbridge_and_malling;
         elsif i = "17" then
            return brent;
         elsif i = "170" then
            return thanet;
         elsif i = "171" then
            return blackburn;
         elsif i = "172" then
            return blackpool;
         elsif i = "173" then
            return burnley_pendle;
         elsif i = "174" then
            return chorley_west_lancashire;
         elsif i = "175" then
            return fylde_wyre;
         elsif i = "176" then
            return hyndburn_rossendale;
         elsif i = "177" then
            return lancaster;
         elsif i = "178" then
            return preston;
         elsif i = "179" then
            return ribble_valley_south_ribble;
         elsif i = "18" then
            return bromley;
         elsif i = "180" then
            return blaby_oadby_and_wigston;
         elsif i = "181" then
            return charnwood;
         elsif i = "182" then
            return harborough_melton_rutland;
         elsif i = "183" then
            return hinkley_and_bosworth_nw_leics;
         elsif i = "184" then
            return leicester;
         elsif i = "185" then
            return boston_s_holland;
         elsif i = "186" then
            return e_lindsey_lincoln_w_lindsey;
         elsif i = "187" then
            return n_kesteven_s_kesteven;
         elsif i = "188" then
            return breckland_s_norfolk;
         elsif i = "189" then
            return broadland_norwich;
         elsif i = "19" then
            return croydon;
         elsif i = "190" then
            return great_yarmouth;
         elsif i = "191" then
            return kings_lynn_and_w_norfolk;
         elsif i = "192" then
            return corby_kettering;
         elsif i = "193" then
            return daventry_s_northants;
         elsif i = "194" then
            return e_northants_wellingborough;
         elsif i = "195" then
            return northampton;
         elsif i = "196" then
            return alnwick_berwick_morpeth_tynedale;
         elsif i = "197" then
            return blyth_valley_wansbeck;
         elsif i = "198" then
            return craven_hambleton_richmondshire;
         elsif i = "199" then
            return ryedale_scarborough;
         elsif i = "2" then
            return camden;
         elsif i = "20" then
            return ealing;
         elsif i = "200" then
            return harrogate;
         elsif i = "201" then
            return selby_york;
         elsif i = "202" then
            return ashfield_mansfield;
         elsif i = "203" then
            return bassetlaw_newark_and_sherwood;
         elsif i = "204" then
            return broxtowe_gedling_rushcliffe;
         elsif i = "205" then
            return nottingham;
         elsif i = "206" then
            return cherwell;
         elsif i = "207" then
            return oxford_vale_white_horse_west_oxford;
         elsif i = "208" then
            return south_oxfordshire;
         elsif i = "209" then
            return bridgnorth_shrewsbury_and_atcham;
         elsif i = "21" then
            return enfield;
         elsif i = "210" then
            return n_shropshire_oswestry_s_shropshire;
         elsif i = "211" then
            return the_wrekin;
         elsif i = "212" then
            return mendip_sedgemoor;
         elsif i = "213" then
            return south_somerset;
         elsif i = "214" then
            return taunton_deane_w_somerset;
         elsif i = "215" then
            return cannock_chase_s_staffs;
         elsif i = "216" then
            return e_staff_staffordshire_moorlands;
         elsif i = "217" then
            return lichfield_tamworth;
         elsif i = "218" then
            return newcastle_under_lyme_stafford;
         elsif i = "219" then
            return stoke_on_trent;
         elsif i = "22" then
            return greenwich;
         elsif i = "220" then
            return babergh_ipswich;
         elsif i = "221" then
            return forest_heath_m_suffolk_st_edmundsbury;
         elsif i = "222" then
            return suffolk_coastal_waveney;
         elsif i = "223" then
            return elmbridge_epsom_and_ewell;
         elsif i = "224" then
            return guildford;
         elsif i = "225" then
            return mole_valley_waverley;
         elsif i = "226" then
            return reigate_and_banstead_tandrige;
         elsif i = "227" then
            return runnymede_spelthorne;
         elsif i = "228" then
            return surrey_heath_woking;
         elsif i = "229" then
            return n_warwick_nuneaton_and_bedwoth_rugby;
         elsif i = "23" then
            return harrow;
         elsif i = "230" then
            return stratford_on_avon_warwick;
         elsif i = "231" then
            return adur_worthing;
         elsif i = "232" then
            return arun;
         elsif i = "233" then
            return chichester_horsham;
         elsif i = "234" then
            return crawley_mid_sussex;
         elsif i = "235" then
            return kennet_salisbury;
         elsif i = "236" then
            return n_wilts_w_wilts;
         elsif i = "237" then
            return thamesdown;
         elsif i = "238" then
            return alyn_and_deeside_delyn_wrexham_maelor;
         elsif i = "239" then
            return colwyn_glyndwr_rhuddlan;
         elsif i = "24" then
            return havering;
         elsif i = "240" then
            return carmarthen_dinefwr_llanelli;
         elsif i = "241" then
            return ceredigion_preseli_pembroke_s_pemb;
         elsif i = "242" then
            return blaenau_gwent_islywn;
         elsif i = "243" then
            return monmouth_torfaen;
         elsif i = "244" then
            return newport;
         elsif i = "245" then
            return gwynedd;
         elsif i = "246" then
            return cynon_valley_rhondda;
         elsif i = "247" then
            return merthyr_tydfil_rhymney_vall_taff_ely;
         elsif i = "248" then
            return ogwr;
         elsif i = "249" then
            return brecknock_montgomeryshire_radnorshire;
         elsif i = "25" then
            return hillingdon;
         elsif i = "250" then
            return cardiff;
         elsif i = "251" then
            return vale_of_glamorgan;
         elsif i = "252" then
            return lliw_valley_neath_port_talbot;
         elsif i = "253" then
            return swansea;
         elsif i = "254" then
            return e_and_m_lothian_borders;
         elsif i = "255" then
            return edinburgh_city;
         elsif i = "256" then
            return west_lothian;
         elsif i = "257" then
            return clackmannan_stirling;
         elsif i = "258" then
            return falkirk;
         elsif i = "259" then
            return annadale_nithsdale_stewarty_wigtown;
         elsif i = "26" then
            return hounslow;
         elsif i = "260" then
            return dunfermline;
         elsif i = "261" then
            return kirkcaldy_ne_fife;
         elsif i = "262" then
            return aberdeen_city;
         elsif i = "263" then
            return banff_and_buchan_moray;
         elsif i = "264" then
            return gordon_kincardine_and_deeside;
         elsif i = "265" then
            return nw_highlands_western_isles;
         elsif i = "266" then
            return s_and_e_highlands_orkney_shetlands;
         elsif i = "267" then
            return argyll_and_bute_dumbarton_inverclyde;
         elsif i = "268" then
            return bearsden_clydebank_strathkelvin;
         elsif i = "269" then
            return cumbernauld_and_kilsyth_monklands;
         elsif i = "27" then
            return kingston_upon_thames;
         elsif i = "270" then
            return clydesdale_cumnock_doon_kyle_carrick;
         elsif i = "271" then
            return cunninghame;
         elsif i = "272" then
            return east_kilbride_hamilton;
         elsif i = "273" then
            return eastwood_kilmarnock_and_loudon;
         elsif i = "274" then
            return glasgow_city;
         elsif i = "275" then
            return motherwell;
         elsif i = "276" then
            return renfrew;
         elsif i = "277" then
            return angus_perth_and_kinross;
         elsif i = "278" then
            return dundee_city;
         elsif i = "28" then
            return merton;
         elsif i = "29" then
            return redbridge;
         elsif i = "3" then
            return hackney;
         elsif i = "30" then
            return richmond_upon_thames;
         elsif i = "301" then
            return inner_london_nos;
         elsif i = "401" then
            return inner_london_nos;
         elsif i = "501" then
            return inner_london_nos;
         elsif i = "302" then
            return outer_london_nos;
         elsif i = "402" then
            return outer_london_nos;
         elsif i = "502" then
            return outer_london_nos;
         elsif i = "303" then
            return greater_manchester_nos;
         elsif i = "304" then
            return merseyside_nos;
         elsif i = "403" then
            return merseyside_nos;
         elsif i = "503" then
            return merseyside_nos;
         elsif i = "305" then
            return south_yorkshire_nos;
         elsif i = "404" then
            return south_yorkshire_nos;
         elsif i = "504" then
            return south_yorkshire_nos;
         elsif i = "306" then
            return tyne_and_wear_nos;
         elsif i = "405" then
            return tyne_and_wear_nos;
         elsif i = "505" then
            return tyne_and_wear_nos;
         elsif i = "307" then
            return west_midland_nos;
         elsif i = "406" then
            return west_midland_nos;
         elsif i = "506" then
            return west_midland_nos;
         elsif i = "308" then
            return west_yorkshire_yorkshire_nos;
         elsif i = "407" then
            return west_yorkshire_yorkshire_nos;
         elsif i = "507" then
            return west_yorkshire_yorkshire_nos;
         elsif i = "309" then
            return avon_nos;
         elsif i = "408" then
            return avon_nos;
         elsif i = "508" then
            return avon_nos;
         elsif i = "31" then
            return sutton;
         elsif i = "310" then
            return bedfordshire_nos;
         elsif i = "409" then
            return bedfordshire_nos;
         elsif i = "509" then
            return bedfordshire_nos;
         elsif i = "311" then
            return berkshire_nos;
         elsif i = "410" then
            return berkshire_nos;
         elsif i = "510" then
            return berkshire_nos;
         elsif i = "312" then
            return buckinghamshire_nos;
         elsif i = "411" then
            return buckinghamshire_nos;
         elsif i = "511" then
            return buckinghamshire_nos;
         elsif i = "313" then
            return cambridgeshire_nos;
         elsif i = "412" then
            return cambridgeshire_nos;
         elsif i = "512" then
            return cambridgeshire_nos;
         elsif i = "314" then
            return chesire_nos;
         elsif i = "413" then
            return chesire_nos;
         elsif i = "513" then
            return chesire_nos;
         elsif i = "315" then
            return cleveland_nos;
         elsif i = "414" then
            return cleveland_nos;
         elsif i = "514" then
            return cleveland_nos;
         elsif i = "316" then
            return cornwall_nos;
         elsif i = "415" then
            return cornwall_nos;
         elsif i = "515" then
            return cornwall_nos;
         elsif i = "317" then
            return cumbria_nos;
         elsif i = "416" then
            return cumbria_nos;
         elsif i = "516" then
            return cumbria_nos;
         elsif i = "318" then
            return derbyshire_nos;
         elsif i = "417" then
            return derbyshire_nos;
         elsif i = "517" then
            return derbyshire_nos;
         elsif i = "319" then
            return devon_nos;
         elsif i = "418" then
            return devon_nos;
         elsif i = "518" then
            return devon_nos;
         elsif i = "32" then
            return waltham_forest;
         elsif i = "320" then
            return dorset_nos;
         elsif i = "321" then
            return durham_nos;
         elsif i = "322" then
            return east_sussex_nos;
         elsif i = "420" then
            return east_sussex_nos;
         elsif i = "520" then
            return east_sussex_nos;
         elsif i = "323" then
            return essex_nos;
         elsif i = "421" then
            return essex_nos;
         elsif i = "521" then
            return essex_nos;
         elsif i = "324" then
            return gloucestershire_nos;
         elsif i = "422" then
            return gloucestershire_nos;
         elsif i = "522" then
            return gloucestershire_nos;
         elsif i = "325" then
            return hampshire_nos;
         elsif i = "423" then
            return hampshire_nos;
         elsif i = "523" then
            return hampshire_nos;
         elsif i = "326" then
            return hereford_and_worcester_nos;
         elsif i = "424" then
            return hereford_and_worcester_nos;
         elsif i = "524" then
            return hereford_and_worcester_nos;
         elsif i = "327" then
            return hertfordshire_nos;
         elsif i = "425" then
            return hertfordshire_nos;
         elsif i = "525" then
            return hertfordshire_nos;
         elsif i = "328" then
            return humberside_nos;
         elsif i = "426" then
            return humberside_nos;
         elsif i = "526" then
            return humberside_nos;
         elsif i = "329" then
            return isle_of_wight_nos;
         elsif i = "427" then
            return isle_of_wight_nos;
         elsif i = "33" then
            return bolton;
         elsif i = "330" then
            return kent_nos;
         elsif i = "331" then
            return lancashire_nos;
         elsif i = "332" then
            return leicestershire_nos;
         elsif i = "333" then
            return lincolnshire_nos;
         elsif i = "334" then
            return norfolk_nos;
         elsif i = "335" then
            return northamptonshire_nos;
         elsif i = "336" then
            return northumberland_nos;
         elsif i = "337" then
            return north_yorkshire_nos;
         elsif i = "338" then
            return nottinghamshire_nos;
         elsif i = "339" then
            return oxfordshire_nos;
         elsif i = "34" then
            return bury;
         elsif i = "340" then
            return shropshire_nos;
         elsif i = "341" then
            return somerset_nos;
         elsif i = "342" then
            return staffordshire_nos;
         elsif i = "343" then
            return suffolk_nos;
         elsif i = "344" then
            return surrey_nos;
         elsif i = "345" then
            return warwickshire_nos;
         elsif i = "346" then
            return west_sussex_nos;
         elsif i = "347" then
            return wiltshire_nos;
         elsif i = "348" then
            return clwyd_nos;
         elsif i = "349" then
            return dyfed_nos;
         elsif i = "35" then
            return manchester;
         elsif i = "350" then
            return gwent_nos;
         elsif i = "351" then
            return gwynedd_nos;
         elsif i = "451" then
            return gwynedd_nos;
         elsif i = "551" then
            return gwynedd_nos;
         elsif i = "352" then
            return mid_glamorgan_nos;
         elsif i = "452" then
            return mid_glamorgan_nos;
         elsif i = "552" then
            return mid_glamorgan_nos;
         elsif i = "353" then
            return powys_nos;
         elsif i = "453" then
            return powys_nos;
         elsif i = "553" then
            return powys_nos;
         elsif i = "354" then
            return south_glamorgan_nos;
         elsif i = "454" then
            return south_glamorgan_nos;
         elsif i = "554" then
            return south_glamorgan_nos;
         elsif i = "355" then
            return west_glamorgan_nos;
         elsif i = "455" then
            return west_glamorgan_nos;
         elsif i = "555" then
            return west_glamorgan_nos;
         elsif i = "356" then
            return borders_nos;
         elsif i = "456" then
            return borders_nos;
         elsif i = "556" then
            return borders_nos;
         elsif i = "357" then
            return lothian_nos;
         elsif i = "457" then
            return lothian_nos;
         elsif i = "557" then
            return lothian_nos;
         elsif i = "358" then
            return central_nos;
         elsif i = "458" then
            return central_nos;
         elsif i = "558" then
            return central_nos;
         elsif i = "359" then
            return dumfries_and_galloway_nos;
         elsif i = "459" then
            return dumfries_and_galloway_nos;
         elsif i = "559" then
            return dumfries_and_galloway_nos;
         elsif i = "36" then
            return oldham;
         elsif i = "360" then
            return fife_nos;
         elsif i = "361" then
            return grampian_nos;
         elsif i = "362" then
            return highlands_and_islands_nos;
         elsif i = "363" then
            return strathclyde_nos;
         elsif i = "364" then
            return tayside_nos;
         elsif i = "367" then
            return northern_ireland;
         elsif i = "368" then
            return channel_islands_isle_of_man;
         elsif i = "37" then
            return rochdale;
         elsif i = "38" then
            return salford;
         elsif i = "39" then
            return stockport;
         elsif i = "4" then
            return hammersmith_and_fulham;
         elsif i = "40" then
            return tameside;
         elsif i = "41" then
            return trafford;
         elsif i = "42" then
            return wigan;
         elsif i = "43" then
            return knowsley;
         elsif i = "44" then
            return liverpool;
         elsif i = "45" then
            return st_helens;
         elsif i = "46" then
            return sefton;
         elsif i = "47" then
            return wirral;
         elsif i = "48" then
            return barnsley;
         elsif i = "49" then
            return doncaster;
         elsif i = "5" then
            return haringey;
         elsif i = "50" then
            return rotherham;
         elsif i = "51" then
            return sheffield;
         elsif i = "52" then
            return gateshead;
         elsif i = "53" then
            return newcastle_upon_tyne;
         elsif i = "54" then
            return north_tyneside;
         elsif i = "55" then
            return south_tyneside;
         elsif i = "56" then
            return sunderland;
         elsif i = "57" then
            return birmingham;
         elsif i = "58" then
            return coventry;
         elsif i = "59" then
            return dudley;
         elsif i = "6" then
            return islington;
         elsif i = "60" then
            return sandwell;
         elsif i = "61" then
            return solihull;
         elsif i = "62" then
            return walsall;
         elsif i = "63" then
            return wolverhampton;
         elsif i = "64" then
            return bradford;
         elsif i = "65" then
            return calderdale;
         elsif i = "66" then
            return kirklees;
         elsif i = "67" then
            return leeds;
         elsif i = "68" then
            return wakefield;
         elsif i = "69" then
            return bath_kingswood_wansdyke;
         elsif i = "7" then
            return kensington_and_chelsea;
         elsif i = "70" then
            return bristol;
         elsif i = "71" then
            return northavon;
         elsif i = "72" then
            return woodspring;
         elsif i = "73" then
            return luton;
         elsif i = "74" then
            return mid_beds_south_beds;
         elsif i = "75" then
            return north_bedfordshire;
         elsif i = "76" then
            return bracknell_forest_slough;
         elsif i = "77" then
            return newbury;
         elsif i = "78" then
            return reading;
         elsif i = "79" then
            return windor_and_maidenhead;
         elsif i = "8" then
            return lambeth;
         elsif i = "80" then
            return wokingham;
         elsif i = "81" then
            return aylesbury_vale;
         elsif i = "82" then
            return chiltern_south_bucks;
         elsif i = "83" then
            return milton_keynes;
         elsif i = "84" then
            return wycombe;
         elsif i = "85" then
            return cambridge_south_cambs;
         elsif i = "86" then
            return east_cambs_fenland;
         elsif i = "87" then
            return huntingdonshire;
         elsif i = "88" then
            return peterborough;
         elsif i = "89" then
            return chester_ellesmere_port_and_neston;
         elsif i = "9" then
            return lewisham;
         elsif i = "90" then
            return congleton_crewe_and_nantwich_vale_royal;
         elsif i = "91" then
            return halton;
         elsif i = "92" then
            return macclesfield;
         elsif i = "93" then
            return warrington;
         elsif i = "94" then
            return hartlepool_stockton;
         elsif i = "95" then
            return langbaurgh_on_tees;
         elsif i = "96" then
            return middlesborough;
         elsif i = "97" then
            return caradon_north_cornwall;
         elsif i = "98" then
            return carrick_restormel;
         elsif i = "99" then
            return kerrier_penwith_isles_of_scilly;
        end if;
        Put_Line("Convert_Plbornd_Type: Unmatched string |" & i & "|" );
        return Plbornd_Type'First; -- never actually gets here; for compiler only
    end Convert_Plbornd_Type;



    function Pretty_Print( i : Plever_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when here_all_life => return "Here all life";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Plever_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Plever_Type( i : String ) return Plever_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return here_all_life;
        end if;
        Put_Line("Convert_Plever_Type: Unmatched string |" & i & "|" );
        return Plever_Type'First; -- never actually gets here; for compiler only
    end Convert_Plever_Type;



    function Pretty_Print( i : Prearn_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when no_earnings_at_all => return "No earnings at all";
             when lt_25_pw_or_lt_1299_pa => return "Lt 25 pw/lt 1299 pa";
             when s_210_259_or_11k_13499 => return "210-259/11k-13499";
             when s_260_299_or_13500_15999 => return "260-299/13500-15999";
             when s_300_379_or_16k_19999 => return "300-379/16k-19999";
             when s_380_479_or_20k_24999 => return "380-479/20k-24999";
             when s_480_plus_pw_or_25k_plus_pa => return "480+ pw/25k+ pa";
             when s_25_39_pw_or_1300_2099 => return "25-39 pw/1300-2099";
             when s_40_59_pw_or_2100_3099 => return "40-59 pw/2100-3099";
             when s_60_79_pw_or_3100_4199 => return "60-79 pw/3100-4199";
             when s_80_99_pw_or_4200_5199 => return "80-99 pw/4200-5199";
             when s_100_124_or_5200_6499 => return "100-124/5200-6499";
             when s_125_149_or_6500_7799 => return "125-149/6500-7799";
             when s_150_179_or_7800_9299 => return "150-179/7800-9299";
             when s_180_209_or_9300_10999 => return "180-209/9300-10999";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Prearn_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Prearn_Type( i : String ) return Prearn_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return no_earnings_at_all;
         elsif i = "1" then
            return lt_25_pw_or_lt_1299_pa;
         elsif i = "10" then
            return s_210_259_or_11k_13499;
         elsif i = "11" then
            return s_260_299_or_13500_15999;
         elsif i = "12" then
            return s_300_379_or_16k_19999;
         elsif i = "13" then
            return s_380_479_or_20k_24999;
         elsif i = "14" then
            return s_480_plus_pw_or_25k_plus_pa;
         elsif i = "2" then
            return s_25_39_pw_or_1300_2099;
         elsif i = "3" then
            return s_40_59_pw_or_2100_3099;
         elsif i = "4" then
            return s_60_79_pw_or_3100_4199;
         elsif i = "5" then
            return s_80_99_pw_or_4200_5199;
         elsif i = "6" then
            return s_100_124_or_5200_6499;
         elsif i = "7" then
            return s_125_149_or_6500_7799;
         elsif i = "8" then
            return s_150_179_or_7800_9299;
         elsif i = "9" then
            return s_180_209_or_9300_10999;
        end if;
        Put_Line("Convert_Prearn_Type: Unmatched string |" & i & "|" );
        return Prearn_Type'First; -- never actually gets here; for compiler only
    end Convert_Prearn_Type;



    function Pretty_Print( i : Prearni_Type ) return String is
    begin
         case i is
             when var_dont_know => return "Var Don't Know";
             when var_refused => return "Var Refused";
             when var_inapplicable => return "Var Inapplicable";
             when var_missing_or_wild => return "Var Missing or wild";
             when not_imputed => return "Not Imputed";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Prearni_Type ) return Boolean is
    begin
         case i is
             when var_dont_know => return True;
             when var_refused => return True;
             when var_inapplicable => return True;
             when var_missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Prearni_Type( i : String ) return Prearni_Type is
    begin
         if i = "-1" then
            return var_dont_know;
         elsif i = "-2" then
            return var_refused;
         elsif i = "-8" then
            return var_inapplicable;
         elsif i = "-9" then
            return var_missing_or_wild;
         elsif i = "0" then
            return not_imputed;
        end if;
        Put_Line("Convert_Prearni_Type: Unmatched string |" & i & "|" );
        return Prearni_Type'First; -- never actually gets here; for compiler only
    end Convert_Prearni_Type;



    function Pretty_Print( i : Presbgm_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when january => return "January";
             when october => return "October";
             when november => return "November";
             when december => return "December";
             when spring => return "Spring";
             when summer => return "Summer";
             when autumn => return "Autumn";
             when winter => return "Winter";
             when february => return "February";
             when march => return "March";
             when april => return "April";
             when may => return "May";
             when june => return "June";
             when july => return "July";
             when august => return "August";
             when september => return "September";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Presbgm_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Presbgm_Type( i : String ) return Presbgm_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return january;
         elsif i = "10" then
            return october;
         elsif i = "11" then
            return november;
         elsif i = "12" then
            return december;
         elsif i = "13" then
            return spring;
         elsif i = "14" then
            return summer;
         elsif i = "15" then
            return autumn;
         elsif i = "16" then
            return winter;
         elsif i = "2" then
            return february;
         elsif i = "3" then
            return march;
         elsif i = "4" then
            return april;
         elsif i = "5" then
            return may;
         elsif i = "6" then
            return june;
         elsif i = "7" then
            return july;
         elsif i = "8" then
            return august;
         elsif i = "9" then
            return september;
        end if;
        Put_Line("Convert_Presbgm_Type: Unmatched string |" & i & "|" );
        return Presbgm_Type'First; -- never actually gets here; for compiler only
    end Convert_Presbgm_Type;



    function Pretty_Print( i : Presly_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when yes_after_1992 => return "Yes, after 1.9.92";
             when no_on_or_before_1992 => return "No, on/before 1.9.92";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Presly_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Presly_Type( i : String ) return Presly_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return yes_after_1992;
         elsif i = "2" then
            return no_on_or_before_1992;
        end if;
        Put_Line("Convert_Presly_Type: Unmatched string |" & i & "|" );
        return Presly_Type'First; -- never actually gets here; for compiler only
    end Convert_Presly_Type;



    function Pretty_Print( i : Prf101_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when ni_retir_pension => return "NI retir pension";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Prf101_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Prf101_Type( i : String ) return Prf101_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return ni_retir_pension;
        end if;
        Put_Line("Convert_Prf101_Type: Unmatched string |" & i & "|" );
        return Prf101_Type'First; -- never actually gets here; for compiler only
    end Convert_Prf101_Type;



    function Pretty_Print( i : Prf102_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when pension_prev_emp => return "Pension prev emp";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Prf102_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Prf102_Type( i : String ) return Prf102_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return pension_prev_emp;
         elsif i = "2" then
            return pension_prev_emp;
        end if;
        Put_Line("Convert_Prf102_Type: Unmatched string |" & i & "|" );
        return Prf102_Type'First; -- never actually gets here; for compiler only
    end Convert_Prf102_Type;



    function Pretty_Print( i : Prf107_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when pension_credit => return "Pension credit";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Prf107_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Prf107_Type( i : String ) return Prf107_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "12" then
            return pension_credit;
        end if;
        Put_Line("Convert_Prf107_Type: Unmatched string |" & i & "|" );
        return Prf107_Type'First; -- never actually gets here; for compiler only
    end Convert_Prf107_Type;



    function Pretty_Print( i : Prf116_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when invalidity_allow => return "Invalidity allow";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Prf116_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Prf116_Type( i : String ) return Prf116_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return invalidity_allow;
         elsif i = "3" then
            return invalidity_allow;
        end if;
        Put_Line("Convert_Prf116_Type: Unmatched string |" & i & "|" );
        return Prf116_Type'First; -- never actually gets here; for compiler only
    end Convert_Prf116_Type;



    function Pretty_Print( i : Prf125_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when incapacity_benefit => return "Incapacity benefit";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Prf125_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Prf125_Type( i : String ) return Prf125_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "10" then
            return incapacity_benefit;
         elsif i = "9" then
            return incapacity_benefit;
        end if;
        Put_Line("Convert_Prf125_Type: Unmatched string |" & i & "|" );
        return Prf125_Type'First; -- never actually gets here; for compiler only
    end Convert_Prf125_Type;



    function Pretty_Print( i : Prf131_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when ub_and_or_or_is => return "UB and/or IS";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Prf131_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Prf131_Type( i : String ) return Prf131_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return ub_and_or_or_is;
         elsif i = "4" then
            return ub_and_or_or_is;
        end if;
        Put_Line("Convert_Prf131_Type: Unmatched string |" & i & "|" );
        return Prf131_Type'First; -- never actually gets here; for compiler only
    end Convert_Prf131_Type;



    function Pretty_Print( i : Prf134_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when ni_sick_benefit => return "NI sick benefit";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Prf134_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Prf134_Type( i : String ) return Prf134_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return ni_sick_benefit;
         elsif i = "5" then
            return ni_sick_benefit;
        end if;
        Put_Line("Convert_Prf134_Type: Unmatched string |" & i & "|" );
        return Prf134_Type'First; -- never actually gets here; for compiler only
    end Convert_Prf134_Type;



    function Pretty_Print( i : Prf135_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when child_benefit => return "Child benefit";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Prf135_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Prf135_Type( i : String ) return Prf135_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return child_benefit;
         elsif i = "6" then
            return child_benefit;
        end if;
        Put_Line("Convert_Prf135_Type: Unmatched string |" & i & "|" );
        return Prf135_Type'First; -- never actually gets here; for compiler only
    end Convert_Prf135_Type;



    function Pretty_Print( i : Prf137_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when family_credit => return "Family credit";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Prf137_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Prf137_Type( i : String ) return Prf137_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return family_credit;
         elsif i = "7" then
            return family_credit;
        end if;
        Put_Line("Convert_Prf137_Type: Unmatched string |" & i & "|" );
        return Prf137_Type'First; -- never actually gets here; for compiler only
    end Convert_Prf137_Type;



    function Pretty_Print( i : Prf139_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when housing_benefit => return "Housing benefit";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Prf139_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Prf139_Type( i : String ) return Prf139_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return housing_benefit;
         elsif i = "8" then
            return housing_benefit;
        end if;
        Put_Line("Convert_Prf139_Type: Unmatched string |" & i & "|" );
        return Prf139_Type'First; -- never actually gets here; for compiler only
    end Convert_Prf139_Type;



    function Pretty_Print( i : Prf141_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when other_state_bene => return "Other state bene";
             when other_state_benefit => return "Other state benefit";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Prf141_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Prf141_Type( i : String ) return Prf141_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return other_state_bene;
         elsif i = "10" then
            return other_state_benefit;
         elsif i = "9" then
            return other_state_benefit;
        end if;
        Put_Line("Convert_Prf141_Type: Unmatched string |" & i & "|" );
        return Prf141_Type'First; -- never actually gets here; for compiler only
    end Convert_Prf141_Type;



    function Pretty_Print( i : Prf143_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when child_tax_credit => return "Child tax credit";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Prf143_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Prf143_Type( i : String ) return Prf143_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "11" then
            return child_tax_credit;
        end if;
        Put_Line("Convert_Prf143_Type: Unmatched string |" & i & "|" );
        return Prf143_Type'First; -- never actually gets here; for compiler only
    end Convert_Prf143_Type;



    function Pretty_Print( i : Prfehq_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when youth_training_cert => return "Youth training cert";
             when teaching_qualifications => return "Teaching qualifications";
             when university_diploma => return "University diploma";
             when first_degree => return "First degree";
             when higher_degree => return "Higher degree";
             when other_tech_or_professional => return "Other tech or professional";
             when trade_apprenticeship => return "Trade apprenticeship";
             when clerical_and_commercial => return "Clerical and commercial";
             when city_and_guilds_pt_i => return "City and Guilds Pt I";
             when city_and_guilds_pt_2 => return "City and Guilds Pt 2";
             when city_and_guilds_pt_3 => return "City and Guilds Pt 3";
             when onc_or_ond => return "ONC or OND";
             when hnc_or_hnd => return "HNC or HND";
             when nursing_qualifications => return "Nursing qualifications";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Prfehq_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Prfehq_Type( i : String ) return Prfehq_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return youth_training_cert;
         elsif i = "10" then
            return teaching_qualifications;
         elsif i = "11" then
            return university_diploma;
         elsif i = "12" then
            return first_degree;
         elsif i = "13" then
            return higher_degree;
         elsif i = "14" then
            return other_tech_or_professional;
         elsif i = "2" then
            return trade_apprenticeship;
         elsif i = "3" then
            return clerical_and_commercial;
         elsif i = "4" then
            return city_and_guilds_pt_i;
         elsif i = "5" then
            return city_and_guilds_pt_2;
         elsif i = "6" then
            return city_and_guilds_pt_3;
         elsif i = "7" then
            return onc_or_ond;
         elsif i = "8" then
            return hnc_or_hnd;
         elsif i = "9" then
            return nursing_qualifications;
        end if;
        Put_Line("Convert_Prfehq_Type: Unmatched string |" & i & "|" );
        return Prfehq_Type'First; -- never actually gets here; for compiler only
    end Convert_Prfehq_Type;



    function Pretty_Print( i : Prfirn_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when none => return "None";
             when none_listed_ben => return "None listed ben";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Prfirn_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Prfirn_Type( i : String ) return Prfirn_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return none;
         elsif i = "10" then
            return none;
         elsif i = "1" then
            return none_listed_ben;
        end if;
        Put_Line("Convert_Prfirn_Type: Unmatched string |" & i & "|" );
        return Prfirn_Type'First; -- never actually gets here; for compiler only
    end Convert_Prfirn_Type;



    function Pretty_Print( i : Prfitb_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when no_income => return "No income";
             when lt_77_pw_or_lt_3999_pa => return "lt 77 pw/lt 3999 pa";
             when s_443_500_pw_or_23k_25999 => return "443-500 pw/23k-25999";
             when s_501_558_pw_or_26k_28999 => return "501-558 pw/26k-28999";
             when s_559_615_pw_or_29k_31999 => return "559-615 pw/29k-31999";
             when s_616_673_pw_or_32k_34999 => return "616-673 pw/32k-34999";
             when s_674_plus_pw_or_35000_plus_pa => return "674+ pw/35000+ pa";
             when s_78_115_pw_or_4k_5999 => return "78-115 pw/4k-5999";
             when s_116_154_pw_or_6k_7999 => return "116-154 pw/6k-7999";
             when s_155_192_pw_or_8k_9999 => return "155-192 pw/8k-9999";
             when s_193_230_pw_or_10k_11999 => return "193-230 pw/10k-11999";
             when s_231_289_pw_or_12k_14999 => return "231-289 pw/12k-14999";
             when s_290_346_pw_or_15k_17999 => return "290-346 pw/15k-17999";
             when s_347_385_pw_or_18k_19999 => return "347-385 pw/18k-19999";
             when s_386_442_pw_or_20k_22999 => return "386-442 pw/20k-22999";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Prfitb_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Prfitb_Type( i : String ) return Prfitb_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return no_income;
         elsif i = "1" then
            return lt_77_pw_or_lt_3999_pa;
         elsif i = "10" then
            return s_443_500_pw_or_23k_25999;
         elsif i = "11" then
            return s_501_558_pw_or_26k_28999;
         elsif i = "12" then
            return s_559_615_pw_or_29k_31999;
         elsif i = "13" then
            return s_616_673_pw_or_32k_34999;
         elsif i = "14" then
            return s_674_plus_pw_or_35000_plus_pa;
         elsif i = "2" then
            return s_78_115_pw_or_4k_5999;
         elsif i = "3" then
            return s_116_154_pw_or_6k_7999;
         elsif i = "4" then
            return s_155_192_pw_or_8k_9999;
         elsif i = "5" then
            return s_193_230_pw_or_10k_11999;
         elsif i = "6" then
            return s_231_289_pw_or_12k_14999;
         elsif i = "7" then
            return s_290_346_pw_or_15k_17999;
         elsif i = "8" then
            return s_347_385_pw_or_18k_19999;
         elsif i = "9" then
            return s_386_442_pw_or_20k_22999;
        end if;
        Put_Line("Convert_Prfitb_Type: Unmatched string |" & i & "|" );
        return Prfitb_Type'First; -- never actually gets here; for compiler only
    end Convert_Prfitb_Type;



    function Pretty_Print( i : Prfitbi_Type ) return String is
    begin
         case i is
             when var_dont_know => return "Var Don't Know";
             when var_refused => return "Var Refused";
             when var_inapplicable => return "Var Inapplicable";
             when var_missing_or_wild => return "Var Missing or wild";
             when not_imputed => return "Not Imputed";
             when imputed => return "Imputed";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Prfitbi_Type ) return Boolean is
    begin
         case i is
             when var_dont_know => return True;
             when var_refused => return True;
             when var_inapplicable => return True;
             when var_missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Prfitbi_Type( i : String ) return Prfitbi_Type is
    begin
         if i = "-1" then
            return var_dont_know;
         elsif i = "-2" then
            return var_refused;
         elsif i = "-8" then
            return var_inapplicable;
         elsif i = "-9" then
            return var_missing_or_wild;
         elsif i = "0" then
            return not_imputed;
         elsif i = "1" then
            return imputed;
        end if;
        Put_Line("Convert_Prfitbi_Type: Unmatched string |" & i & "|" );
        return Prfitbi_Type'First; -- never actually gets here; for compiler only
    end Convert_Prfitbi_Type;



    function Pretty_Print( i : Pripn_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_in_household => return "Not in Household";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Pripn_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Pripn_Type( i : String ) return Pripn_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_in_household;
        end if;
        Put_Line("Convert_Pripn_Type: Unmatched string |" & i & "|" );
        return Pripn_Type'First; -- never actually gets here; for compiler only
    end Convert_Pripn_Type;



    function Pretty_Print( i : Prjbft_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when part_time => return "Part time";
             when full_time => return "Full time";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Prjbft_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Prjbft_Type( i : String ) return Prjbft_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return part_time;
         elsif i = "2" then
            return full_time;
        end if;
        Put_Line("Convert_Prjbft_Type: Unmatched string |" & i & "|" );
        return Prjbft_Type'First; -- never actually gets here; for compiler only
    end Convert_Prjbft_Type;



    function Pretty_Print( i : Prjbly_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when yes_before_1993 => return "Yes, before 1.9.93";
             when no_on_or_before_1992 => return "No on/before 1.9.92";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Prjbly_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Prjbly_Type( i : String ) return Prjbly_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return yes_before_1993;
         elsif i = "2" then
            return no_on_or_before_1992;
        end if;
        Put_Line("Convert_Prjbly_Type: Unmatched string |" & i & "|" );
        return Prjbly_Type'First; -- never actually gets here; for compiler only
    end Convert_Prjbly_Type;



    function Pretty_Print( i : Prrs2i_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when reference_person => return "Reference person";
             when natural_brother_or_sister => return "Natural brother or sister";
             when other_brother_or_sister => return "Other brother or sister";
             when brother_or_sister_in_law => return "Brother or sister-in-law";
             when natural_parent => return "Natural parent";
             when other_parent => return "Other parent";
             when mother_or_father_in_law => return "Mother or father-in-law";
             when any_grand_parent => return "Any grand parent";
             when any_grand_child => return "Any grand child";
             when any_cousin => return "Any cousin";
             when any_aunt_or_uncle => return "Any aunt or uncle";
             when lawful_spouse => return "Lawful spouse";
             when any_nephew => return "Any nephew";
             when any_other_relative => return "Any other relative";
             when employee => return "Employee";
             when lodger_or_boarder => return "Lodger or boarder";
             when unrelated_sharer => return "Unrelated sharer";
             when live_in_partner => return "Live-in partner";
             when other => return "Other";
             when natural_child => return "Natural child";
             when adopted_child => return "Adopted child";
             when foster_child => return "Foster child";
             when step_child => return "Step-child";
             when partners_child => return "Partner's child";
             when daughter_or_son_in_law => return "Daughter or son-in-law";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Prrs2i_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Prrs2i_Type( i : String ) return Prrs2i_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return reference_person;
         elsif i = "10" then
            return natural_brother_or_sister;
         elsif i = "11" then
            return other_brother_or_sister;
         elsif i = "12" then
            return brother_or_sister_in_law;
         elsif i = "13" then
            return natural_parent;
         elsif i = "14" then
            return other_parent;
         elsif i = "15" then
            return mother_or_father_in_law;
         elsif i = "16" then
            return any_grand_parent;
         elsif i = "17" then
            return any_grand_child;
         elsif i = "18" then
            return any_cousin;
         elsif i = "19" then
            return any_aunt_or_uncle;
         elsif i = "2" then
            return lawful_spouse;
         elsif i = "20" then
            return any_nephew;
         elsif i = "21" then
            return any_other_relative;
         elsif i = "22" then
            return employee;
         elsif i = "23" then
            return lodger_or_boarder;
         elsif i = "24" then
            return unrelated_sharer;
         elsif i = "3" then
            return live_in_partner;
         elsif i = "30" then
            return other;
         elsif i = "4" then
            return natural_child;
         elsif i = "5" then
            return adopted_child;
         elsif i = "6" then
            return foster_child;
         elsif i = "7" then
            return step_child;
         elsif i = "8" then
            return partners_child;
         elsif i = "9" then
            return daughter_or_son_in_law;
        end if;
        Put_Line("Convert_Prrs2i_Type: Unmatched string |" & i & "|" );
        return Prrs2i_Type'First; -- never actually gets here; for compiler only
    end Convert_Prrs2i_Type;



    function Pretty_Print( i : Prsehq_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when school_cert_or_matric => return "School cert or Matric";
             when gnvq => return "GNVQ";
             when sce_ograde_d_e_or_4_5 => return "SCE O'grade D-E/4-5";
             when o_grades => return "O grades";
             when std_grades_4_7 => return "Std grades 4 - 7";
             when std_grades_1_3 => return "Std grades 1 - 3";
             when higher_grade => return "Higher grade";
             when cert_6th_year_studies => return "Cert 6th year studies";
             when slc_lower_grade => return "SLC Lower grade";
             when slc_higher_grade => return "SLC Higher grade";
             when cse_grade_1 => return "CSE grade 1";
             when other => return "Other";
             when stand_grades_1_3 => return "Stand grades 1-3";
             when slc_school_leaving => return "SLC: School Leaving";
             when gcse_grades_d_g => return "GCSE grades D-G";
             when other_or_foreign => return "Other/foreign";
             when gcse_grades_a_c => return "GCSE grades A-C";
             when o_level => return "O level";
             when o_level_a_c => return "O level A - C";
             when o_level_d_e => return "O level D - E";
             when higher_school_certificate => return "Higher school certificate";
             when a_level => return "A level";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Prsehq_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Prsehq_Type( i : String ) return Prsehq_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return school_cert_or_matric;
         elsif i = "10" then
            return school_cert_or_matric;
         elsif i = "11" then
            return gnvq;
         elsif i = "12" then
            return sce_ograde_d_e_or_4_5;
         elsif i = "13" then
            return o_grades;
         elsif i = "21" then
            return o_grades;
         elsif i = "14" then
            return std_grades_4_7;
         elsif i = "15" then
            return std_grades_1_3;
         elsif i = "16" then
            return higher_grade;
         elsif i = "24" then
            return higher_grade;
         elsif i = "17" then
            return cert_6th_year_studies;
         elsif i = "25" then
            return cert_6th_year_studies;
         elsif i = "18" then
            return slc_lower_grade;
         elsif i = "19" then
            return slc_higher_grade;
         elsif i = "2" then
            return cse_grade_1;
         elsif i = "20" then
            return other;
         elsif i = "23" then
            return stand_grades_1_3;
         elsif i = "27" then
            return slc_school_leaving;
         elsif i = "3" then
            return gcse_grades_d_g;
         elsif i = "30" then
            return other_or_foreign;
         elsif i = "4" then
            return gcse_grades_a_c;
         elsif i = "5" then
            return o_level;
         elsif i = "6" then
            return o_level_a_c;
         elsif i = "7" then
            return o_level_d_e;
         elsif i = "8" then
            return higher_school_certificate;
         elsif i = "9" then
            return a_level;
        end if;
        Put_Line("Convert_Prsehq_Type: Unmatched string |" & i & "|" );
        return Prsehq_Type'First; -- never actually gets here; for compiler only
    end Convert_Prsehq_Type;



    function Pretty_Print( i : Prwhy_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when in_institution => return "In institution";
             when deaf_or_speech_probs => return "Deaf/speech probs";
             when language_problems => return "Language problems";
             when other => return "Other";
             when stressed_family_sitn => return "Stressed family sitn";
             when refused_full_intv => return "Refused full intv.";
             when other_family_oppstn => return "Other family oppstn";
             when studyg_away_frm_home => return "Study'g away frm home";
             when on_holiday => return "On holiday";
             when away_business_or_work => return "Away business/work";
             when temp_away_from_home => return "Temp. away from home";
             when non_contact => return "Non contact";
             when permly_too_unwell => return "Perm'ly too unwell";
             when temporarily_unwell => return "Temporarily unwell";
             when old_age => return "Old age";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Prwhy_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Prwhy_Type( i : String ) return Prwhy_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return in_institution;
         elsif i = "10" then
            return deaf_or_speech_probs;
         elsif i = "11" then
            return language_problems;
         elsif i = "12" then
            return other;
         elsif i = "13" then
            return stressed_family_sitn;
         elsif i = "14" then
            return refused_full_intv;
         elsif i = "15" then
            return other_family_oppstn;
         elsif i = "2" then
            return studyg_away_frm_home;
         elsif i = "3" then
            return on_holiday;
         elsif i = "4" then
            return away_business_or_work;
         elsif i = "5" then
            return temp_away_from_home;
         elsif i = "6" then
            return non_contact;
         elsif i = "7" then
            return permly_too_unwell;
         elsif i = "8" then
            return temporarily_unwell;
         elsif i = "9" then
            return old_age;
        end if;
        Put_Line("Convert_Prwhy_Type: Unmatched string |" & i & "|" );
        return Prwhy_Type'First; -- never actually gets here; for compiler only
    end Convert_Prwhy_Type;



    function Pretty_Print( i : Ptrt5a1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when does_not_apply => return "Does not apply";
             when applies_perfectly => return "Applies perfectly";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ptrt5a1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ptrt5a1_Type( i : String ) return Ptrt5a1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return does_not_apply;
         elsif i = "7" then
            return applies_perfectly;
        end if;
        Put_Line("Convert_Ptrt5a1_Type: Unmatched string |" & i & "|" );
        return Ptrt5a1_Type'First; -- never actually gets here; for compiler only
    end Convert_Ptrt5a1_Type;



    function Pretty_Print( i : Pyarg1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when most_days => return "Most days";
             when more_than_once_a_wk => return "More than once a wk.";
             when less_than_once_a_wk => return "Less than once a wk.";
             when hardly_ever => return "Hardly ever";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Pyarg1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Pyarg1_Type( i : String ) return Pyarg1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return most_days;
         elsif i = "2" then
            return more_than_once_a_wk;
         elsif i = "3" then
            return less_than_once_a_wk;
         elsif i = "4" then
            return hardly_ever;
        end if;
        Put_Line("Convert_Pyarg1_Type: Unmatched string |" & i & "|" );
        return Pyarg1_Type'First; -- never actually gets here; for compiler only
    end Convert_Pyarg1_Type;



    function Pretty_Print( i : Pyasm1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when never_smacked => return "Never smacked";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Pyasm1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Pyasm1_Type( i : String ) return Pyasm1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return never_smacked;
        end if;
        Put_Line("Convert_Pyasm1_Type: Unmatched string |" & i & "|" );
        return Pyasm1_Type'First; -- never actually gets here; for compiler only
    end Convert_Pyasm1_Type;



    function Pretty_Print( i : Pybunk_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when extremely_serious => return "Extremely serious";
             when very_serious => return "Very  serious";
             when fairly_serious => return "Fairly  serious";
             when not_very_serious => return "Not very  serious";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Pybunk_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Pybunk_Type( i : String ) return Pybunk_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return extremely_serious;
         elsif i = "2" then
            return very_serious;
         elsif i = "3" then
            return fairly_serious;
         elsif i = "4" then
            return not_very_serious;
        end if;
        Put_Line("Convert_Pybunk_Type: Unmatched string |" & i & "|" );
        return Pybunk_Type'First; -- never actually gets here; for compiler only
    end Convert_Pybunk_Type;



    function Pretty_Print( i : Pydptcw_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when period_uncodeable => return "Period uncodeable";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when week => return "Week";
             when fortnight => return "Fortnight";
             when four_weeks => return "Four weeks";
             when calendar_month => return "Calendar month";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Pydptcw_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when period_uncodeable => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Pydptcw_Type( i : String ) return Pydptcw_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-3" then
            return period_uncodeable;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return week;
         elsif i = "2" then
            return fortnight;
         elsif i = "3" then
            return four_weeks;
         elsif i = "4" then
            return calendar_month;
        end if;
        Put_Line("Convert_Pydptcw_Type: Unmatched string |" & i & "|" );
        return Pydptcw_Type'First; -- never actually gets here; for compiler only
    end Convert_Pydptcw_Type;



    function Pretty_Print( i : Pyenrl_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when strictly_enforced => return "Strictly enforced.";
             when not_very_strictly_enforced => return "Not very strictly enforced";
             when it_varies => return "It varies.";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Pyenrl_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Pyenrl_Type( i : String ) return Pyenrl_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return strictly_enforced;
         elsif i = "2" then
            return not_very_strictly_enforced;
         elsif i = "3" then
            return it_varies;
        end if;
        Put_Line("Convert_Pyenrl_Type: Unmatched string |" & i & "|" );
        return Pyenrl_Type'First; -- never actually gets here; for compiler only
    end Convert_Pyenrl_Type;



    function Pretty_Print( i : Pyhap1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when completely_happy => return "Completely happy";
             when neither_happy_or_unhappy => return "Neither happy/unhappy";
             when completely_unhappy => return "Completely unhappy";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Pyhap1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Pyhap1_Type( i : String ) return Pyhap1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return completely_happy;
         elsif i = "4" then
            return neither_happy_or_unhappy;
         elsif i = "7" then
            return completely_unhappy;
        end if;
        Put_Line("Convert_Pyhap1_Type: Unmatched string |" & i & "|" );
        return Pyhap1_Type'First; -- never actually gets here; for compiler only
    end Convert_Pyhap1_Type;



    function Pretty_Print( i : Pyhlt1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when excellent => return "Excellent";
             when good => return "Good";
             when fair => return "Fair";
             when poor => return "Poor";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Pyhlt1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Pyhlt1_Type( i : String ) return Pyhlt1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return excellent;
         elsif i = "2" then
            return good;
         elsif i = "3" then
            return fair;
         elsif i = "4" then
            return poor;
        end if;
        Put_Line("Convert_Pyhlt1_Type: Unmatched string |" & i & "|" );
        return Pyhlt1_Type'First; -- never actually gets here; for compiler only
    end Convert_Pyhlt1_Type;



    function Pretty_Print( i : Pyhlth_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when parents_resp => return "Parent's resp.";
             when youths_resp => return "Youth's resp.";
             when both_or_it_varies => return "Both/it varies";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Pyhlth_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Pyhlth_Type( i : String ) return Pyhlth_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return parents_resp;
         elsif i = "2" then
            return youths_resp;
         elsif i = "3" then
            return both_or_it_varies;
        end if;
        Put_Line("Convert_Pyhlth_Type: Unmatched string |" & i & "|" );
        return Pyhlth_Type'First; -- never actually gets here; for compiler only
    end Convert_Pyhlth_Type;



    function Pretty_Print( i : Pyhwrk_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when keep_regular_eye => return "Keep regular eye";
             when keep_occasional_eye => return "Keep occasional eye";
             when leave_to_work_on_own => return "Leave to work on own";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Pyhwrk_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Pyhwrk_Type( i : String ) return Pyhwrk_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return keep_regular_eye;
         elsif i = "2" then
            return keep_occasional_eye;
         elsif i = "3" then
            return leave_to_work_on_own;
        end if;
        Put_Line("Convert_Pyhwrk_Type: Unmatched string |" & i & "|" );
        return Pyhwrk_Type'First; -- never actually gets here; for compiler only
    end Convert_Pyhwrk_Type;



    function Pretty_Print( i : Pyman1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when very_easy => return "Very easy";
             when quite_easy => return "Quite easy";
             when quite_difficult => return "Quite difficult";
             when very_difficult => return "Very difficult";
             when it_varies => return "It varies";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Pyman1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Pyman1_Type( i : String ) return Pyman1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return very_easy;
         elsif i = "2" then
            return quite_easy;
         elsif i = "3" then
            return quite_difficult;
         elsif i = "4" then
            return very_difficult;
         elsif i = "5" then
            return it_varies;
        end if;
        Put_Line("Convert_Pyman1_Type: Unmatched string |" & i & "|" );
        return Pyman1_Type'First; -- never actually gets here; for compiler only
    end Convert_Pyman1_Type;



    function Pretty_Print( i : Pyrule_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when lots_of_rules => return "Lots of Rules.";
             when not_many_rules => return "Not Many Rules";
             when it_varies => return "It Varies.";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Pyrule_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Pyrule_Type( i : String ) return Pyrule_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return lots_of_rules;
         elsif i = "2" then
            return not_many_rules;
         elsif i = "3" then
            return it_varies;
        end if;
        Put_Line("Convert_Pyrule_Type: Unmatched string |" & i & "|" );
        return Pyrule_Type'First; -- never actually gets here; for compiler only
    end Convert_Pyrule_Type;



    function Pretty_Print( i : Pysad1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when none => return "None";
             when s_1_3 => return "1 - 3";
             when s_4_10 => return "4 - 10";
             when s_11_days_or_more => return "11 days or more";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Pysad1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Pysad1_Type( i : String ) return Pysad1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return none;
         elsif i = "2" then
            return s_1_3;
         elsif i = "3" then
            return s_4_10;
         elsif i = "4" then
            return s_11_days_or_more;
        end if;
        Put_Line("Convert_Pysad1_Type: Unmatched string |" & i & "|" );
        return Pysad1_Type'First; -- never actually gets here; for compiler only
    end Convert_Pysad1_Type;



    function Pretty_Print( i : Pysat1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when yes => return "Yes";
             when no => return "No";
             when scottish_ed_inapplicable => return "Scottish ed. - inapplicable";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Pysat1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Pysat1_Type( i : String ) return Pysat1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
         elsif i = "3" then
            return scottish_ed_inapplicable;
        end if;
        Put_Line("Convert_Pysat1_Type: Unmatched string |" & i & "|" );
        return Pysat1_Type'First; -- never actually gets here; for compiler only
    end Convert_Pysat1_Type;



    function Pretty_Print( i : Pyser_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when stealing_money => return "Stealing money";
             when swearing => return "Swearing";
             when smoking => return "Smoking";
             when telling_lies_to_parents => return "Telling lies to parents";
             when taking_drugs => return "Taking drugs";
             when playing_truant => return "Playing truant";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Pyser_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Pyser_Type( i : String ) return Pyser_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return stealing_money;
         elsif i = "2" then
            return swearing;
         elsif i = "3" then
            return smoking;
         elsif i = "4" then
            return telling_lies_to_parents;
         elsif i = "5" then
            return taking_drugs;
         elsif i = "6" then
            return playing_truant;
        end if;
        Put_Line("Convert_Pyser_Type: Unmatched string |" & i & "|" );
        return Pyser_Type'First; -- never actually gets here; for compiler only
    end Convert_Pyser_Type;



    function Pretty_Print( i : Pysmk1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when yes => return "Yes";
             when no => return "No";
             when less_than_once_a_wk => return "Less than once a wk.";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Pysmk1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Pysmk1_Type( i : String ) return Pysmk1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
         elsif i = "3" then
            return less_than_once_a_wk;
        end if;
        Put_Line("Convert_Pysmk1_Type: Unmatched string |" & i & "|" );
        return Pysmk1_Type'First; -- never actually gets here; for compiler only
    end Convert_Pysmk1_Type;



    function Pretty_Print( i : Pyste1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when above_level_8 => return "Above level 8";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Pyste1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Pyste1_Type( i : String ) return Pyste1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "9" then
            return above_level_8;
        end if;
        Put_Line("Convert_Pyste1_Type: Unmatched string |" & i & "|" );
        return Pyste1_Type'First; -- never actually gets here; for compiler only
    end Convert_Pyste1_Type;



    function Pretty_Print( i : Pysty1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when s_11_year_old => return "11 year old";
             when s_14_year_old => return "14 year old";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Pysty1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Pysty1_Type( i : String ) return Pysty1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return s_11_year_old;
         elsif i = "2" then
            return s_14_year_old;
        end if;
        Put_Line("Convert_Pysty1_Type: Unmatched string |" & i & "|" );
        return Pysty1_Type'First; -- never actually gets here; for compiler only
    end Convert_Pysty1_Type;



    function Pretty_Print( i : Pysxag_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when when_child_asks => return "When child asks";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Pysxag_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when when_child_asks => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Pysxag_Type( i : String ) return Pysxag_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-3" then
            return when_child_asks;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
        end if;
        Put_Line("Convert_Pysxag_Type: Unmatched string |" & i & "|" );
        return Pysxag_Type'First; -- never actually gets here; for compiler only
    end Convert_Pysxag_Type;



    function Pretty_Print( i : Pysxed_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when mainly_parents => return "Mainly parents";
             when mainly_schools => return "Mainly schools";
             when both => return "Both";
             when neither => return "Neither";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Pysxed_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Pysxed_Type( i : String ) return Pysxed_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return mainly_parents;
         elsif i = "2" then
            return mainly_schools;
         elsif i = "3" then
            return both;
         elsif i = "4" then
            return neither;
        end if;
        Put_Line("Convert_Pysxed_Type: Unmatched string |" & i & "|" );
        return Pysxed_Type'First; -- never actually gets here; for compiler only
    end Convert_Pysxed_Type;



    function Pretty_Print( i : Pytc_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when working_families_tc => return "Working families TC";
             when disabled_persons_tc => return "Disabled persons TC";
             when none_of_these => return "None of these";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Pytc_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Pytc_Type( i : String ) return Pytc_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return working_families_tc;
         elsif i = "2" then
            return disabled_persons_tc;
         elsif i = "3" then
            return none_of_these;
        end if;
        Put_Line("Convert_Pytc_Type: Unmatched string |" & i & "|" );
        return Pytc_Type'First; -- never actually gets here; for compiler only
    end Convert_Pytc_Type;



    function Pretty_Print( i : Pythh1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when none_or_almost_none => return "None/Almost none";
             when under_1_hour => return "Under 1 hour";
             when s_1_2_hours => return "1 - 2 hours";
             when s_3_5_hours => return "3 - 5 hours";
             when s_6_hours_or_more => return "6 hours or more";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Pythh1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Pythh1_Type( i : String ) return Pythh1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return none_or_almost_none;
         elsif i = "2" then
            return under_1_hour;
         elsif i = "3" then
            return s_1_2_hours;
         elsif i = "4" then
            return s_3_5_hours;
         elsif i = "5" then
            return s_6_hours_or_more;
        end if;
        Put_Line("Convert_Pythh1_Type: Unmatched string |" & i & "|" );
        return Pythh1_Type'First; -- never actually gets here; for compiler only
    end Convert_Pythh1_Type;



    function Pretty_Print( i : Pytvrl_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when yes => return "Yes.";
             when no => return "No";
             when no_tv => return "No TV.";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Pytvrl_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Pytvrl_Type( i : String ) return Pytvrl_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
         elsif i = "3" then
            return no_tv;
        end if;
        Put_Line("Convert_Pytvrl_Type: Unmatched string |" & i & "|" );
        return Pytvrl_Type'First; -- never actually gets here; for compiler only
    end Convert_Pytvrl_Type;



    function Pretty_Print( i : Pywftcw_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when period_uncodeable => return "Period uncodeable";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when week => return "Week";
             when fortnight => return "Fortnight";
             when four_weeks => return "Four weeks";
             when calendar_month => return "Calendar month";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Pywftcw_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when period_uncodeable => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Pywftcw_Type( i : String ) return Pywftcw_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-3" then
            return period_uncodeable;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return week;
         elsif i = "2" then
            return fortnight;
         elsif i = "3" then
            return four_weeks;
         elsif i = "4" then
            return calendar_month;
         elsif i = "5" then
            return other;
        end if;
        Put_Line("Convert_Pywftcw_Type: Unmatched string |" & i & "|" );
        return Pywftcw_Type'First; -- never actually gets here; for compiler only
    end Convert_Pywftcw_Type;



    function Pretty_Print( i : Pywhr1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when always => return "Always";
             when usually => return "Usually";
             when sometimes => return "Sometimes";
             when not_usually => return "Not Usually";
             when never_out_goes_alone => return "Never out goes alone";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Pywhr1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Pywhr1_Type( i : String ) return Pywhr1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return always;
         elsif i = "2" then
            return usually;
         elsif i = "3" then
            return sometimes;
         elsif i = "4" then
            return not_usually;
         elsif i = "5" then
            return never_out_goes_alone;
        end if;
        Put_Line("Convert_Pywhr1_Type: Unmatched string |" & i & "|" );
        return Pywhr1_Type'First; -- never actually gets here; for compiler only
    end Convert_Pywhr1_Type;



    function Pretty_Print( i : Pywor1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when none => return "None";
             when s_1_2 => return "1 - 2";
             when s_3_5 => return "3 - 5";
             when s_6_7_nights => return "6 - 7 nights";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Pywor1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Pywor1_Type( i : String ) return Pywor1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return none;
         elsif i = "2" then
            return s_1_2;
         elsif i = "3" then
            return s_3_5;
         elsif i = "4" then
            return s_6_7_nights;
        end if;
        Put_Line("Convert_Pywor1_Type: Unmatched string |" & i & "|" );
        return Pywor1_Type'First; -- never actually gets here; for compiler only
    end Convert_Pywor1_Type;



    function Pretty_Print( i : Qallif1_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when good_health_mobility => return "Good health - mobility";
             when finances_or_standard_of_living => return "Finances/standard of living";
             when consumption_or_shopping => return "Consumption/shopping";
             when home_comforts => return "Home comforts";
             when employment => return "Employment";
             when car_transport => return "Car - transport";
             when education_own_or_childrens => return "Education - own/children's";
             when other_material_benefits => return "Other material benefits";
             when freedom_or_independence => return "Freedom/independence";
             when food_or_cooking_or_drink => return "Food/cooking/drink";
             when music_or_radio_or_theatre => return "Music/radio/theatre";
             when sports => return "Sports";
             when walking_or_cycling => return "Walking/cycling";
             when tv => return "TV";
             when gardening => return "Gardening";
             when reading_or_writing_or_painting => return "Reading/writing/painting";
             when travel_or_holidays => return "Travel/holidays";
             when other_leisure_activities => return "Other leisure activities";
             when happiness_or_peace_of_mind => return "Happiness/peace of mind";
             when religion => return "Religion";
             when equality_or_tolerance => return "Equality/tolerance";
             when helping_others => return "Helping others";
             when political_activities => return "Political activities";
             when other_moral_or_community => return "Other moral/community";
             when safety_or_lack_of_fear => return "Safety/lack of fear";
             when children => return "Children";
             when partner => return "Partner";
             when other_family_members => return "Other family members";
             when neighbours => return "Neighbours";
             when friends_or_socialising => return "Friends/socialising";
             when pets => return "Pets";
             when other_relationships => return "Other relationships";
             when time_for_self_or_not_overworked => return "Time for self/not overworked";
             when recreational_facilities => return "Recreational facilities";
             when neighbourhood_specific => return "Neighbourhood - specific";
             when neighbourhood_general => return "Neighbourhood - general";
             when environment => return "Environment";
             when lack_of_crime => return "Lack of crime";
             when climate_or_weather => return "Climate/weather";
             when other_environmental => return "Other environmental";
             when life_course_characteristics => return "Life course characteristics";
             when other_positive_mentions => return "Other positive mentions";
             when better_personal_chars => return "Better personal chars";
             when better_material_chars => return "Better material chars";
             when more_leisure => return "More leisure";
             when more_morality_etc => return "More morality etc";
             when better_relationships => return "Better relationships";
             when better_locality_or_environment => return "Better locality/environment";
             when other_negative_mentions => return "Other negative mentions";
             when other_personal_characteristics => return "Other personal characteristics";
             when other => return "Other";
             when dont_know => return "Don't know";
             when nothing_written_in_or_refused => return "Nothing written in/refused";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Qallif1_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Qallif1_Type( i : String ) return Qallif1_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return good_health_mobility;
         elsif i = "11" then
            return finances_or_standard_of_living;
         elsif i = "12" then
            return consumption_or_shopping;
         elsif i = "13" then
            return home_comforts;
         elsif i = "14" then
            return employment;
         elsif i = "15" then
            return car_transport;
         elsif i = "16" then
            return education_own_or_childrens;
         elsif i = "19" then
            return other_material_benefits;
         elsif i = "2" then
            return freedom_or_independence;
         elsif i = "21" then
            return food_or_cooking_or_drink;
         elsif i = "22" then
            return music_or_radio_or_theatre;
         elsif i = "23" then
            return sports;
         elsif i = "24" then
            return walking_or_cycling;
         elsif i = "25" then
            return tv;
         elsif i = "26" then
            return gardening;
         elsif i = "27" then
            return reading_or_writing_or_painting;
         elsif i = "28" then
            return travel_or_holidays;
         elsif i = "29" then
            return other_leisure_activities;
         elsif i = "3" then
            return happiness_or_peace_of_mind;
         elsif i = "31" then
            return religion;
         elsif i = "32" then
            return equality_or_tolerance;
         elsif i = "33" then
            return helping_others;
         elsif i = "34" then
            return political_activities;
         elsif i = "39" then
            return other_moral_or_community;
         elsif i = "4" then
            return safety_or_lack_of_fear;
         elsif i = "41" then
            return children;
         elsif i = "42" then
            return partner;
         elsif i = "43" then
            return other_family_members;
         elsif i = "44" then
            return neighbours;
         elsif i = "45" then
            return friends_or_socialising;
         elsif i = "46" then
            return pets;
         elsif i = "49" then
            return other_relationships;
         elsif i = "5" then
            return time_for_self_or_not_overworked;
         elsif i = "51" then
            return recreational_facilities;
         elsif i = "52" then
            return neighbourhood_specific;
         elsif i = "53" then
            return neighbourhood_general;
         elsif i = "54" then
            return environment;
         elsif i = "55" then
            return lack_of_crime;
         elsif i = "56" then
            return climate_or_weather;
         elsif i = "59" then
            return other_environmental;
         elsif i = "6" then
            return life_course_characteristics;
         elsif i = "67" then
            return other_positive_mentions;
         elsif i = "70" then
            return better_personal_chars;
         elsif i = "71" then
            return better_material_chars;
         elsif i = "72" then
            return more_leisure;
         elsif i = "73" then
            return more_morality_etc;
         elsif i = "74" then
            return better_relationships;
         elsif i = "75" then
            return better_locality_or_environment;
         elsif i = "77" then
            return other_negative_mentions;
         elsif i = "9" then
            return other_personal_characteristics;
         elsif i = "97" then
            return other;
         elsif i = "98" then
            return dont_know;
         elsif i = "99" then
            return nothing_written_in_or_refused;
        end if;
        Put_Line("Convert_Qallif1_Type: Unmatched string |" & i & "|" );
        return Qallif1_Type'First; -- never actually gets here; for compiler only
    end Convert_Qallif1_Type;



    function Pretty_Print( i : Qallif2_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when not_mentioned => return "Not mentioned";
             when good_health_mobility => return "Good health - mobility";
             when finances_or_standard_of_living => return "Finances/standard of living";
             when consumption_or_shopping => return "Consumption/shopping";
             when home_comforts => return "Home comforts";
             when employment => return "Employment";
             when car_transport => return "Car - transport";
             when education_own_or_childrens => return "Education - own/children's";
             when other_material_benefits => return "Other material benefits";
             when freedom_or_independence => return "Freedom/independence";
             when food_or_cooking_or_drink => return "Food/cooking/drink";
             when music_or_radio_or_theatre => return "Music/radio/theatre";
             when sports => return "Sports";
             when walking_or_cycling => return "Walking/cycling";
             when tv => return "TV";
             when gardening => return "Gardening";
             when reading_or_writing_or_painting => return "Reading/writing/painting";
             when travel_or_holidays => return "Travel/holidays";
             when other_leisure_activities => return "Other leisure activities";
             when happiness_or_peace_of_mind => return "Happiness/peace of mind";
             when religion => return "Religion";
             when equality_or_tolerance => return "Equality/tolerance";
             when helping_others => return "Helping others";
             when political_activities => return "Political activities";
             when other_moral_or_community => return "Other moral/community";
             when safety_or_lack_of_fear => return "Safety/lack of fear";
             when children => return "Children";
             when partner => return "Partner";
             when other_family_members => return "Other family members";
             when neighbours => return "Neighbours";
             when friends_or_socialising => return "Friends/socialising";
             when pets => return "Pets";
             when other_relationships => return "Other relationships";
             when time_for_self_or_not_overworked => return "Time for self/not overworked";
             when recreational_facilities => return "Recreational facilities";
             when neighbourhood_specific => return "Neighbourhood - specific";
             when neighbourhood_general => return "Neighbourhood - general";
             when environment => return "Environment";
             when lack_of_crime => return "Lack of crime";
             when climate_or_weather => return "Climate/weather";
             when other_environmental => return "Other environmental";
             when life_course_characteristics => return "Life course characteristics";
             when other_positive_mentions => return "Other positive mentions";
             when better_personal_chars => return "Better personal chars";
             when better_material_chars => return "Better material chars";
             when more_leisure => return "More leisure";
             when more_morality_etc => return "More morality etc";
             when better_relationships => return "Better relationships";
             when better_locality_or_environment => return "Better locality/environment";
             when other_negative_mentions => return "Other negative mentions";
             when other_personal_characteristics => return "Other personal characteristics";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Qallif2_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Qallif2_Type( i : String ) return Qallif2_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return good_health_mobility;
         elsif i = "11" then
            return finances_or_standard_of_living;
         elsif i = "12" then
            return consumption_or_shopping;
         elsif i = "13" then
            return home_comforts;
         elsif i = "14" then
            return employment;
         elsif i = "15" then
            return car_transport;
         elsif i = "16" then
            return education_own_or_childrens;
         elsif i = "19" then
            return other_material_benefits;
         elsif i = "2" then
            return freedom_or_independence;
         elsif i = "21" then
            return food_or_cooking_or_drink;
         elsif i = "22" then
            return music_or_radio_or_theatre;
         elsif i = "23" then
            return sports;
         elsif i = "24" then
            return walking_or_cycling;
         elsif i = "25" then
            return tv;
         elsif i = "26" then
            return gardening;
         elsif i = "27" then
            return reading_or_writing_or_painting;
         elsif i = "28" then
            return travel_or_holidays;
         elsif i = "29" then
            return other_leisure_activities;
         elsif i = "3" then
            return happiness_or_peace_of_mind;
         elsif i = "31" then
            return religion;
         elsif i = "32" then
            return equality_or_tolerance;
         elsif i = "33" then
            return helping_others;
         elsif i = "34" then
            return political_activities;
         elsif i = "39" then
            return other_moral_or_community;
         elsif i = "4" then
            return safety_or_lack_of_fear;
         elsif i = "41" then
            return children;
         elsif i = "42" then
            return partner;
         elsif i = "43" then
            return other_family_members;
         elsif i = "44" then
            return neighbours;
         elsif i = "45" then
            return friends_or_socialising;
         elsif i = "46" then
            return pets;
         elsif i = "49" then
            return other_relationships;
         elsif i = "5" then
            return time_for_self_or_not_overworked;
         elsif i = "51" then
            return recreational_facilities;
         elsif i = "52" then
            return neighbourhood_specific;
         elsif i = "53" then
            return neighbourhood_general;
         elsif i = "54" then
            return environment;
         elsif i = "55" then
            return lack_of_crime;
         elsif i = "56" then
            return climate_or_weather;
         elsif i = "59" then
            return other_environmental;
         elsif i = "6" then
            return life_course_characteristics;
         elsif i = "67" then
            return other_positive_mentions;
         elsif i = "70" then
            return better_personal_chars;
         elsif i = "71" then
            return better_material_chars;
         elsif i = "72" then
            return more_leisure;
         elsif i = "73" then
            return more_morality_etc;
         elsif i = "74" then
            return better_relationships;
         elsif i = "75" then
            return better_locality_or_environment;
         elsif i = "77" then
            return other_negative_mentions;
         elsif i = "9" then
            return other_personal_characteristics;
         elsif i = "97" then
            return other;
        end if;
        Put_Line("Convert_Qallif2_Type: Unmatched string |" & i & "|" );
        return Qallif2_Type'First; -- never actually gets here; for compiler only
    end Convert_Qallif2_Type;



    function Pretty_Print( i : Qfa_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when youth_train_cert => return "Youth train cert";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Qfa_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Qfa_Type( i : String ) return Qfa_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return youth_train_cert;
        end if;
        Put_Line("Convert_Qfa_Type: Unmatched string |" & i & "|" );
        return Qfa_Type'First; -- never actually gets here; for compiler only
    end Convert_Qfa_Type;



    function Pretty_Print( i : Qfachi_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when proxy => return "Proxy";
             when missing => return "Missing";
             when higher_degree => return "Higher Degree";
             when s_1st_degree => return "1st Degree";
             when hnd_hnc_teaching => return "HND,HNC,Teaching";
             when a_level => return "A Level";
             when o_level => return "O Level";
             when cse => return "CSE";
             when none_of_these => return "None of These";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Qfachi_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when proxy => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Qfachi_Type( i : String ) return Qfachi_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return proxy;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return higher_degree;
         elsif i = "2" then
            return s_1st_degree;
         elsif i = "3" then
            return hnd_hnc_teaching;
         elsif i = "4" then
            return a_level;
         elsif i = "5" then
            return o_level;
         elsif i = "6" then
            return cse;
         elsif i = "7" then
            return none_of_these;
        end if;
        Put_Line("Convert_Qfachi_Type: Unmatched string |" & i & "|" );
        return Qfachi_Type'First; -- never actually gets here; for compiler only
    end Convert_Qfachi_Type;



    function Pretty_Print( i : Qfb_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when trade_apprenship => return "Trade apprenship";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Qfb_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Qfb_Type( i : String ) return Qfb_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return trade_apprenship;
        end if;
        Put_Line("Convert_Qfb_Type: Unmatched string |" & i & "|" );
        return Qfb_Type'First; -- never actually gets here; for compiler only
    end Convert_Qfb_Type;



    function Pretty_Print( i : Qfc_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when clerical_or_comml => return "Clerical/comml";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Qfc_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Qfc_Type( i : String ) return Qfc_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return clerical_or_comml;
        end if;
        Put_Line("Convert_Qfc_Type: Unmatched string |" & i & "|" );
        return Qfc_Type'First; -- never actually gets here; for compiler only
    end Convert_Qfc_Type;



    function Pretty_Print( i : Qfd_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when city_and_guilds_pt_i => return "City & Guilds Pt I";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Qfd_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Qfd_Type( i : String ) return Qfd_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return city_and_guilds_pt_i;
        end if;
        Put_Line("Convert_Qfd_Type: Unmatched string |" & i & "|" );
        return Qfd_Type'First; -- never actually gets here; for compiler only
    end Convert_Qfd_Type;



    function Pretty_Print( i : Qfe_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when city_and_guilds_pt_ii => return "City & Guilds Pt II";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Qfe_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Qfe_Type( i : String ) return Qfe_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return city_and_guilds_pt_ii;
        end if;
        Put_Line("Convert_Qfe_Type: Unmatched string |" & i & "|" );
        return Qfe_Type'First; -- never actually gets here; for compiler only
    end Convert_Qfe_Type;



    function Pretty_Print( i : Qfeda_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when schl_cert_or_matric => return "Schl cert/Matric";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Qfeda_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Qfeda_Type( i : String ) return Qfeda_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return schl_cert_or_matric;
        end if;
        Put_Line("Convert_Qfeda_Type: Unmatched string |" & i & "|" );
        return Qfeda_Type'First; -- never actually gets here; for compiler only
    end Convert_Qfeda_Type;



    function Pretty_Print( i : Qfedb_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when cse_grade_2_5 => return "CSE grade 2-5";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Qfedb_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Qfedb_Type( i : String ) return Qfedb_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return cse_grade_2_5;
        end if;
        Put_Line("Convert_Qfedb_Type: Unmatched string |" & i & "|" );
        return Qfedb_Type'First; -- never actually gets here; for compiler only
    end Convert_Qfedb_Type;



    function Pretty_Print( i : Qfedc_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when cse_grade_1 => return "CSE grade 1";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Qfedc_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Qfedc_Type( i : String ) return Qfedc_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return cse_grade_1;
        end if;
        Put_Line("Convert_Qfedc_Type: Unmatched string |" & i & "|" );
        return Qfedc_Type'First; -- never actually gets here; for compiler only
    end Convert_Qfedc_Type;



    function Pretty_Print( i : Qfedd_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when gcse_grades_d_g => return "GCSE grades D-G";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Qfedd_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Qfedd_Type( i : String ) return Qfedd_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return gcse_grades_d_g;
        end if;
        Put_Line("Convert_Qfedd_Type: Unmatched string |" & i & "|" );
        return Qfedd_Type'First; -- never actually gets here; for compiler only
    end Convert_Qfedd_Type;



    function Pretty_Print( i : Qfede_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when gcse_grades_a_c => return "GCSE grades A-C";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Qfede_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Qfede_Type( i : String ) return Qfede_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return gcse_grades_a_c;
        end if;
        Put_Line("Convert_Qfede_Type: Unmatched string |" & i & "|" );
        return Qfede_Type'First; -- never actually gets here; for compiler only
    end Convert_Qfede_Type;



    function Pretty_Print( i : Qfedf_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when o_level => return "O level";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Qfedf_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Qfedf_Type( i : String ) return Qfedf_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return o_level;
        end if;
        Put_Line("Convert_Qfedf_Type: Unmatched string |" & i & "|" );
        return Qfedf_Type'First; -- never actually gets here; for compiler only
    end Convert_Qfedf_Type;



    function Pretty_Print( i : Qfedg_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when o_level_a_c => return "O level A - C";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Qfedg_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Qfedg_Type( i : String ) return Qfedg_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return o_level_a_c;
        end if;
        Put_Line("Convert_Qfedg_Type: Unmatched string |" & i & "|" );
        return Qfedg_Type'First; -- never actually gets here; for compiler only
    end Convert_Qfedg_Type;



    function Pretty_Print( i : Qfedh_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when o_level_d_e => return "O level D - E";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Qfedh_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Qfedh_Type( i : String ) return Qfedh_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return o_level_d_e;
        end if;
        Put_Line("Convert_Qfedh_Type: Unmatched string |" & i & "|" );
        return Qfedh_Type'First; -- never actually gets here; for compiler only
    end Convert_Qfedh_Type;



    function Pretty_Print( i : Qfedhi_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when proxy => return "Proxy";
             when missing => return "Missing";
             when higher_degree => return "Higher Degree";
             when apprenticeship => return "Apprenticeship";
             when other_qf => return "Other QF";
             when no_qf => return "No QF";
             when still_at_school_no_qf => return "Still At School No QF";
             when first_degree => return "First Degree";
             when teaching_qf => return "Teaching QF";
             when other_higher_qf => return "Other Higher QF";
             when nursing_qf => return "Nursing QF";
             when gce_a_levels => return "GCE A Levels";
             when gce_o_levels_or_equiv => return "GCE O Levels or Equiv";
             when commercial_qf_no_o_levels => return "Commercial QF, No O Levels";
             when cse_grade_2_5_scot_grade_4_5 => return "CSE Grade 2-5,Scot Grade 4-5";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Qfedhi_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when proxy => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Qfedhi_Type( i : String ) return Qfedhi_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return proxy;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return higher_degree;
         elsif i = "10" then
            return apprenticeship;
         elsif i = "11" then
            return other_qf;
         elsif i = "12" then
            return no_qf;
         elsif i = "13" then
            return still_at_school_no_qf;
         elsif i = "2" then
            return first_degree;
         elsif i = "3" then
            return teaching_qf;
         elsif i = "4" then
            return other_higher_qf;
         elsif i = "5" then
            return nursing_qf;
         elsif i = "6" then
            return gce_a_levels;
         elsif i = "7" then
            return gce_o_levels_or_equiv;
         elsif i = "8" then
            return commercial_qf_no_o_levels;
         elsif i = "9" then
            return cse_grade_2_5_scot_grade_4_5;
        end if;
        Put_Line("Convert_Qfedhi_Type: Unmatched string |" & i & "|" );
        return Qfedhi_Type'First; -- never actually gets here; for compiler only
    end Convert_Qfedhi_Type;



    function Pretty_Print( i : Qfedi_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when higher_sch_cert => return "Higher sch cert";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Qfedi_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Qfedi_Type( i : String ) return Qfedi_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return higher_sch_cert;
        end if;
        Put_Line("Convert_Qfedi_Type: Unmatched string |" & i & "|" );
        return Qfedi_Type'First; -- never actually gets here; for compiler only
    end Convert_Qfedi_Type;



    function Pretty_Print( i : Qfedj_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when a_level => return "A level";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Qfedj_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Qfedj_Type( i : String ) return Qfedj_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return a_level;
        end if;
        Put_Line("Convert_Qfedj_Type: Unmatched string |" & i & "|" );
        return Qfedj_Type'First; -- never actually gets here; for compiler only
    end Convert_Qfedj_Type;



    function Pretty_Print( i : Qfedk_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when sce_ord_d_e_or_4_5 => return "SCE Ord D E/4 5";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Qfedk_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Qfedk_Type( i : String ) return Qfedk_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return sce_ord_d_e_or_4_5;
        end if;
        Put_Line("Convert_Qfedk_Type: Unmatched string |" & i & "|" );
        return Qfedk_Type'First; -- never actually gets here; for compiler only
    end Convert_Qfedk_Type;



    function Pretty_Print( i : Qfedl_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when o_grades => return "O grades";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Qfedl_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Qfedl_Type( i : String ) return Qfedl_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return o_grades;
        end if;
        Put_Line("Convert_Qfedl_Type: Unmatched string |" & i & "|" );
        return Qfedl_Type'First; -- never actually gets here; for compiler only
    end Convert_Qfedl_Type;



    function Pretty_Print( i : Qfedm_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when stand_grades_4_7 => return "Stand grades 4-7";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Qfedm_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Qfedm_Type( i : String ) return Qfedm_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return stand_grades_4_7;
        end if;
        Put_Line("Convert_Qfedm_Type: Unmatched string |" & i & "|" );
        return Qfedm_Type'First; -- never actually gets here; for compiler only
    end Convert_Qfedm_Type;



    function Pretty_Print( i : Qfedn_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when stand_grades_1_3 => return "Stand grades 1-3";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Qfedn_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Qfedn_Type( i : String ) return Qfedn_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return stand_grades_1_3;
        end if;
        Put_Line("Convert_Qfedn_Type: Unmatched string |" & i & "|" );
        return Qfedn_Type'First; -- never actually gets here; for compiler only
    end Convert_Qfedn_Type;



    function Pretty_Print( i : Qfedo_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when higher_grade => return "Higher grade";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Qfedo_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Qfedo_Type( i : String ) return Qfedo_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return higher_grade;
        end if;
        Put_Line("Convert_Qfedo_Type: Unmatched string |" & i & "|" );
        return Qfedo_Type'First; -- never actually gets here; for compiler only
    end Convert_Qfedo_Type;



    function Pretty_Print( i : Qfedp_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when cert_6th_yr => return "Cert 6th yr";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Qfedp_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Qfedp_Type( i : String ) return Qfedp_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return cert_6th_yr;
        end if;
        Put_Line("Convert_Qfedp_Type: Unmatched string |" & i & "|" );
        return Qfedp_Type'First; -- never actually gets here; for compiler only
    end Convert_Qfedp_Type;



    function Pretty_Print( i : Qfedq_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when slc_lower_grade => return "SLC Lower grade";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Qfedq_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Qfedq_Type( i : String ) return Qfedq_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return slc_lower_grade;
        end if;
        Put_Line("Convert_Qfedq_Type: Unmatched string |" & i & "|" );
        return Qfedq_Type'First; -- never actually gets here; for compiler only
    end Convert_Qfedq_Type;



    function Pretty_Print( i : Qfedr_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when slc_higher_grade => return "SLC Higher grade";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Qfedr_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Qfedr_Type( i : String ) return Qfedr_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return slc_higher_grade;
        end if;
        Put_Line("Convert_Qfedr_Type: Unmatched string |" & i & "|" );
        return Qfedr_Type'First; -- never actually gets here; for compiler only
    end Convert_Qfedr_Type;



    function Pretty_Print( i : Qfedt_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when gnvq => return "GNVQ";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Qfedt_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Qfedt_Type( i : String ) return Qfedt_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return gnvq;
        end if;
        Put_Line("Convert_Qfedt_Type: Unmatched string |" & i & "|" );
        return Qfedt_Type'First; -- never actually gets here; for compiler only
    end Convert_Qfedt_Type;



    function Pretty_Print( i : Qfedu_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when a_or_s_level => return "A/S Level";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Qfedu_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Qfedu_Type( i : String ) return Qfedu_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return a_or_s_level;
        end if;
        Put_Line("Convert_Qfedu_Type: Unmatched string |" & i & "|" );
        return Qfedu_Type'First; -- never actually gets here; for compiler only
    end Convert_Qfedu_Type;



    function Pretty_Print( i : Qfedxd_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when cpve => return "CPVE";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Qfedxd_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Qfedxd_Type( i : String ) return Qfedxd_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return cpve;
        end if;
        Put_Line("Convert_Qfedxd_Type: Unmatched string |" & i & "|" );
        return Qfedxd_Type'First; -- never actually gets here; for compiler only
    end Convert_Qfedxd_Type;



    function Pretty_Print( i : Qfedxf_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when o_grades_a_c_or_1_3 => return "O grades A-C or 1-3";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Qfedxf_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Qfedxf_Type( i : String ) return Qfedxf_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return o_grades_a_c_or_1_3;
        end if;
        Put_Line("Convert_Qfedxf_Type: Unmatched string |" & i & "|" );
        return Qfedxf_Type'First; -- never actually gets here; for compiler only
    end Convert_Qfedxf_Type;



    function Pretty_Print( i : Qfedxh_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when stand_grade_1_3 => return "Stand grade 1-3";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Qfedxh_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Qfedxh_Type( i : String ) return Qfedxh_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return stand_grade_1_3;
        end if;
        Put_Line("Convert_Qfedxh_Type: Unmatched string |" & i & "|" );
        return Qfedxh_Type'First; -- never actually gets here; for compiler only
    end Convert_Qfedxh_Type;



    function Pretty_Print( i : Qfedxm_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when a_level_c_e => return "A level C-E";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Qfedxm_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Qfedxm_Type( i : String ) return Qfedxm_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return a_level_c_e;
        end if;
        Put_Line("Convert_Qfedxm_Type: Unmatched string |" & i & "|" );
        return Qfedxm_Type'First; -- never actually gets here; for compiler only
    end Convert_Qfedxm_Type;



    function Pretty_Print( i : Qfedxn_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when a_level_a_b => return "A level A-B";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Qfedxn_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Qfedxn_Type( i : String ) return Qfedxn_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return a_level_a_b;
        end if;
        Put_Line("Convert_Qfedxn_Type: Unmatched string |" & i & "|" );
        return Qfedxn_Type'First; -- never actually gets here; for compiler only
    end Convert_Qfedxn_Type;



    function Pretty_Print( i : Qfedxo_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when as_level => return "AS level";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Qfedxo_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Qfedxo_Type( i : String ) return Qfedxo_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return as_level;
        end if;
        Put_Line("Convert_Qfedxo_Type: Unmatched string |" & i & "|" );
        return Qfedxo_Type'First; -- never actually gets here; for compiler only
    end Convert_Qfedxo_Type;



    function Pretty_Print( i : Qff_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when city_and_guilds_pt_iii => return "City & Guilds Pt III";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Qff_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Qff_Type( i : String ) return Qff_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return city_and_guilds_pt_iii;
        end if;
        Put_Line("Convert_Qff_Type: Unmatched string |" & i & "|" );
        return Qff_Type'First; -- never actually gets here; for compiler only
    end Convert_Qff_Type;



    function Pretty_Print( i : Qfg_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when onc_or_ond => return "ONC or OND";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Qfg_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Qfg_Type( i : String ) return Qfg_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return onc_or_ond;
        end if;
        Put_Line("Convert_Qfg_Type: Unmatched string |" & i & "|" );
        return Qfg_Type'First; -- never actually gets here; for compiler only
    end Convert_Qfg_Type;



    function Pretty_Print( i : Qfh_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when hnc_or_hnd => return "HNC or HND";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Qfh_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Qfh_Type( i : String ) return Qfh_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return hnc_or_hnd;
        end if;
        Put_Line("Convert_Qfh_Type: Unmatched string |" & i & "|" );
        return Qfh_Type'First; -- never actually gets here; for compiler only
    end Convert_Qfh_Type;



    function Pretty_Print( i : Qfi_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when nursing_quals => return "Nursing quals";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Qfi_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Qfi_Type( i : String ) return Qfi_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return nursing_quals;
        end if;
        Put_Line("Convert_Qfi_Type: Unmatched string |" & i & "|" );
        return Qfi_Type'First; -- never actually gets here; for compiler only
    end Convert_Qfi_Type;



    function Pretty_Print( i : Qfj_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when teaching_quals => return "Teaching quals";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Qfj_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Qfj_Type( i : String ) return Qfj_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return teaching_quals;
        end if;
        Put_Line("Convert_Qfj_Type: Unmatched string |" & i & "|" );
        return Qfj_Type'First; -- never actually gets here; for compiler only
    end Convert_Qfj_Type;



    function Pretty_Print( i : Qfk_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when university_dipl => return "University dipl";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Qfk_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Qfk_Type( i : String ) return Qfk_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return university_dipl;
        end if;
        Put_Line("Convert_Qfk_Type: Unmatched string |" & i & "|" );
        return Qfk_Type'First; -- never actually gets here; for compiler only
    end Convert_Qfk_Type;



    function Pretty_Print( i : Qfl_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when univ_1st_degree => return "Univ 1st degree";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Qfl_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Qfl_Type( i : String ) return Qfl_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return univ_1st_degree;
        end if;
        Put_Line("Convert_Qfl_Type: Unmatched string |" & i & "|" );
        return Qfl_Type'First; -- never actually gets here; for compiler only
    end Convert_Qfl_Type;



    function Pretty_Print( i : Qfm_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when univ_higher_deg => return "Univ higher deg";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Qfm_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Qfm_Type( i : String ) return Qfm_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return univ_higher_deg;
        end if;
        Put_Line("Convert_Qfm_Type: Unmatched string |" & i & "|" );
        return Qfm_Type'First; -- never actually gets here; for compiler only
    end Convert_Qfm_Type;



    function Pretty_Print( i : Qfn_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when other_tech_or_prof => return "Other tech/prof";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Qfn_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Qfn_Type( i : String ) return Qfn_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return other_tech_or_prof;
        end if;
        Put_Line("Convert_Qfn_Type: Unmatched string |" & i & "|" );
        return Qfn_Type'First; -- never actually gets here; for compiler only
    end Convert_Qfn_Type;



    function Pretty_Print( i : Qfvoc_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when proxy => return "Proxy";
             when missing_or_wild => return "Missing or wild";
             when no => return "No";
             when yes => return "Yes";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Qfvoc_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when proxy => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Qfvoc_Type( i : String ) return Qfvoc_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return proxy;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return no;
         elsif i = "1" then
            return yes;
        end if;
        Put_Line("Convert_Qfvoc_Type: Unmatched string |" & i & "|" );
        return Qfvoc_Type'First; -- never actually gets here; for compiler only
    end Convert_Qfvoc_Type;



    function Pretty_Print( i : Qfxo_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when nvq_or_svq_level_1 => return "NVQ/SVQ level 1";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Qfxo_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Qfxo_Type( i : String ) return Qfxo_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return nvq_or_svq_level_1;
        end if;
        Put_Line("Convert_Qfxo_Type: Unmatched string |" & i & "|" );
        return Qfxo_Type'First; -- never actually gets here; for compiler only
    end Convert_Qfxo_Type;



    function Pretty_Print( i : Qfxp_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when nvq_or_svq_level_2 => return "NVQ/SVQ level 2";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Qfxp_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Qfxp_Type( i : String ) return Qfxp_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return nvq_or_svq_level_2;
        end if;
        Put_Line("Convert_Qfxp_Type: Unmatched string |" & i & "|" );
        return Qfxp_Type'First; -- never actually gets here; for compiler only
    end Convert_Qfxp_Type;



    function Pretty_Print( i : Qfxq_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when nvq_or_svq_level_3 => return "NVQ/SVQ level 3";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Qfxq_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Qfxq_Type( i : String ) return Qfxq_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return nvq_or_svq_level_3;
        end if;
        Put_Line("Convert_Qfxq_Type: Unmatched string |" & i & "|" );
        return Qfxq_Type'First; -- never actually gets here; for compiler only
    end Convert_Qfxq_Type;



    function Pretty_Print( i : Qfxr_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when nvq_or_svq_level_4 => return "NVQ/SVQ level 4";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Qfxr_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Qfxr_Type( i : String ) return Qfxr_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return nvq_or_svq_level_4;
        end if;
        Put_Line("Convert_Qfxr_Type: Unmatched string |" & i & "|" );
        return Qfxr_Type'First; -- never actually gets here; for compiler only
    end Convert_Qfxr_Type;



    function Pretty_Print( i : Qlfa_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when often => return "Often";
             when sometimes => return "Sometimes";
             when not_often => return "Not often";
             when never => return "Never";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Qlfa_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Qlfa_Type( i : String ) return Qlfa_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return often;
         elsif i = "2" then
            return sometimes;
         elsif i = "3" then
            return not_often;
         elsif i = "4" then
            return never;
        end if;
        Put_Line("Convert_Qlfa_Type: Unmatched string |" & i & "|" );
        return Qlfa_Type'First; -- never actually gets here; for compiler only
    end Convert_Qlfa_Type;



    function Pretty_Print( i : Race_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when white => return "White";
             when black_carib => return "Black-Carib";
             when black_african => return "Black-African";
             when black_other => return "Black-Other";
             when indian => return "Indian";
             when pakistani => return "Pakistani";
             when bangladeshi => return "Bangladeshi";
             when chinese => return "Chinese";
             when other_ethnic_grp => return "Other ethnic grp";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Race_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Race_Type( i : String ) return Race_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return white;
         elsif i = "2" then
            return black_carib;
         elsif i = "3" then
            return black_african;
         elsif i = "4" then
            return black_other;
         elsif i = "5" then
            return indian;
         elsif i = "6" then
            return pakistani;
         elsif i = "7" then
            return bangladeshi;
         elsif i = "8" then
            return chinese;
         elsif i = "9" then
            return other_ethnic_grp;
        end if;
        Put_Line("Convert_Race_Type: Unmatched string |" & i & "|" );
        return Race_Type'First; -- never actually gets here; for compiler only
    end Convert_Race_Type;



    function Pretty_Print( i : Racel_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing => return "Missing";
             when white_british => return "White British";
             when asian_or_brit_indian => return "Asian/Brit Indian";
             when asian_or_brit_pakistani => return "Asian/Brit Pakistani";
             when asian_or_brit_bangladeshi => return "Asian/Brit Bangladeshi";
             when other_asian_bground => return "Other Asian b'ground";
             when black_or_brit_caribbean => return "Black/Brit Caribbean";
             when black_or_brit_african => return "Black/Brit African";
             when other_black_bground => return "Other Black b'ground";
             when chinese => return "Chinese";
             when any_other => return "Any other";
             when white_irish => return "White Irish";
             when white_welsh => return "White Welsh";
             when white_scottish => return "White Scottish";
             when other_white_bground => return "Other white b'ground";
             when mix_w_and_b_caribbean => return "Mix W & B Caribbean";
             when mixed_w_and_b_african => return "Mixed W & B African";
             when mix_white_and_asian => return "Mix white and Asian";
             when other_mixed_bground => return "Other mixed b'ground";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Racel_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Racel_Type( i : String ) return Racel_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return white_british;
         elsif i = "10" then
            return asian_or_brit_indian;
         elsif i = "11" then
            return asian_or_brit_pakistani;
         elsif i = "12" then
            return asian_or_brit_bangladeshi;
         elsif i = "13" then
            return other_asian_bground;
         elsif i = "14" then
            return black_or_brit_caribbean;
         elsif i = "15" then
            return black_or_brit_african;
         elsif i = "16" then
            return other_black_bground;
         elsif i = "17" then
            return chinese;
         elsif i = "18" then
            return any_other;
         elsif i = "2" then
            return white_irish;
         elsif i = "3" then
            return white_welsh;
         elsif i = "4" then
            return white_scottish;
         elsif i = "5" then
            return other_white_bground;
         elsif i = "6" then
            return mix_w_and_b_caribbean;
         elsif i = "7" then
            return mixed_w_and_b_african;
         elsif i = "8" then
            return mix_white_and_asian;
         elsif i = "9" then
            return other_mixed_bground;
        end if;
        Put_Line("Convert_Racel_Type: Unmatched string |" & i & "|" );
        return Racel_Type'First; -- never actually gets here; for compiler only
    end Convert_Racel_Type;



    function Pretty_Print( i : Rapid_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when s_16_years_or_over => return "16 years or over";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Rapid_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Rapid_Type( i : String ) return Rapid_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return s_16_years_or_over;
        end if;
        Put_Line("Convert_Rapid_Type: Unmatched string |" & i & "|" );
        return Rapid_Type'First; -- never actually gets here; for compiler only
    end Convert_Rapid_Type;



    function Pretty_Print( i : Region_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing => return "Missing";
             when inner_london => return "Inner London";
             when merseyside => return "Merseyside";
             when r_of_north_west => return "R. of North West";
             when south_yorkshire => return "South Yorkshire";
             when west_yorkshire => return "West Yorkshire";
             when r_of_yorks_and_humberside => return "R. of Yorks & Humberside";
             when tyne_and_wear => return "Tyne & Wear";
             when r_of_north => return "R. of North";
             when wales => return "Wales";
             when scotland => return "Scotland";
             when northern_ireland => return "Northern Ireland";
             when outer_london => return "Outer London";
             when r_of_south_east => return "R. of South East";
             when south_west => return "South West";
             when east_anglia => return "East Anglia";
             when east_midlands => return "East Midlands";
             when west_midlands_conurbation => return "West Midlands Conurbation";
             when r_of_west_midlands => return "R. of West Midlands";
             when greater_manchester => return "Greater Manchester";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Region_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Region_Type( i : String ) return Region_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return inner_london;
         elsif i = "10" then
            return merseyside;
         elsif i = "11" then
            return r_of_north_west;
         elsif i = "12" then
            return south_yorkshire;
         elsif i = "13" then
            return west_yorkshire;
         elsif i = "14" then
            return r_of_yorks_and_humberside;
         elsif i = "15" then
            return tyne_and_wear;
         elsif i = "16" then
            return r_of_north;
         elsif i = "17" then
            return wales;
         elsif i = "18" then
            return scotland;
         elsif i = "19" then
            return northern_ireland;
         elsif i = "2" then
            return outer_london;
         elsif i = "3" then
            return r_of_south_east;
         elsif i = "4" then
            return south_west;
         elsif i = "5" then
            return east_anglia;
         elsif i = "6" then
            return east_midlands;
         elsif i = "7" then
            return west_midlands_conurbation;
         elsif i = "8" then
            return r_of_west_midlands;
         elsif i = "9" then
            return greater_manchester;
        end if;
        Put_Line("Convert_Region_Type: Unmatched string |" & i & "|" );
        return Region_Type'First; -- never actually gets here; for compiler only
    end Convert_Region_Type;



    function Pretty_Print( i : Region2_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing => return "Missing";
             when north_east => return "North East";
             when wales => return "Wales";
             when scotland => return "Scotland";
             when northern_ireland => return "Northern Ireland";
             when channel_islands => return "Channel Islands";
             when north_west => return "North West";
             when yorkshire_and_the_humber => return "Yorkshire and the Humber";
             when east_midlands => return "East Midlands";
             when west_midlands => return "West Midlands";
             when east_of_england => return "East of England";
             when london => return "London";
             when south_east => return "South East";
             when south_west => return "South West";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Region2_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Region2_Type( i : String ) return Region2_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return north_east;
         elsif i = "10" then
            return wales;
         elsif i = "11" then
            return scotland;
         elsif i = "12" then
            return northern_ireland;
         elsif i = "13" then
            return channel_islands;
         elsif i = "2" then
            return north_west;
         elsif i = "3" then
            return yorkshire_and_the_humber;
         elsif i = "4" then
            return east_midlands;
         elsif i = "5" then
            return west_midlands;
         elsif i = "6" then
            return east_of_england;
         elsif i = "7" then
            return london;
         elsif i = "8" then
            return south_east;
         elsif i = "9" then
            return south_west;
        end if;
        Put_Line("Convert_Region2_Type: Unmatched string |" & i & "|" );
        return Region2_Type'First; -- never actually gets here; for compiler only
    end Convert_Region2_Type;



    function Pretty_Print( i : Rel_Type ) return String is
    begin
         case i is
             when missing_hh_information => return "Missing HH information";
             when undefined => return "Undefined";
             when natural_brother_or_sister => return "Natural brother/sister";
             when other_brother_or_sister => return "Other brother/sister";
             when brother_or_sister_in_law => return "Brother/sister-in-law";
             when natural_parent => return "Natural parent";
             when other_parent => return "Other parent";
             when mother_or_father_in_law => return "Mother/father-in-law";
             when any_grand_parent => return "Any grand parent";
             when any_grand_child => return "Any grand child";
             when any_cousin => return "Any cousin";
             when any_aunt_or_uncle => return "Any aunt/uncle";
             when lawful_spouse => return "Lawful spouse";
             when any_nephew_or_niece => return "Any nephew/niece";
             when any_other_relative => return "Any other relative";
             when employee => return "Employee";
             when lodger_or_border => return "Lodger/border";
             when unrelated_sharer => return "Unrelated sharer";
             when step_parent => return "Step parent";
             when employer => return "Employer";
             when landlady_or_lord => return "Landlady/lord";
             when half_sibling => return "Half-sibling";
             when other_child => return "Other child";
             when live_in_partner => return "Live-in partner";
             when other => return "Other";
             when natural_child => return "Natural child";
             when adopted_child => return "Adopted child";
             when foster_child => return "Foster child";
             when step_or_partners_child => return "Step/partner's-child";
             when daughter_or_son_in_law => return "Daughter/son-in-law";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Rel_Type ) return Boolean is
    begin
         case i is
             when missing_hh_information => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Rel_Type( i : String ) return Rel_Type is
    begin
         if i = "-9" then
            return missing_hh_information;
         elsif i = "0" then
            return undefined;
         elsif i = "10" then
            return natural_brother_or_sister;
         elsif i = "11" then
            return other_brother_or_sister;
         elsif i = "12" then
            return brother_or_sister_in_law;
         elsif i = "13" then
            return natural_parent;
         elsif i = "14" then
            return other_parent;
         elsif i = "15" then
            return mother_or_father_in_law;
         elsif i = "16" then
            return any_grand_parent;
         elsif i = "17" then
            return any_grand_child;
         elsif i = "18" then
            return any_cousin;
         elsif i = "19" then
            return any_aunt_or_uncle;
         elsif i = "2" then
            return lawful_spouse;
         elsif i = "20" then
            return any_nephew_or_niece;
         elsif i = "21" then
            return any_other_relative;
         elsif i = "22" then
            return employee;
         elsif i = "23" then
            return lodger_or_border;
         elsif i = "24" then
            return unrelated_sharer;
         elsif i = "25" then
            return step_parent;
         elsif i = "26" then
            return employer;
         elsif i = "27" then
            return landlady_or_lord;
         elsif i = "28" then
            return half_sibling;
         elsif i = "29" then
            return other_child;
         elsif i = "3" then
            return live_in_partner;
         elsif i = "30" then
            return other;
         elsif i = "4" then
            return natural_child;
         elsif i = "5" then
            return adopted_child;
         elsif i = "6" then
            return foster_child;
         elsif i = "7" then
            return step_or_partners_child;
         elsif i = "9" then
            return daughter_or_son_in_law;
        end if;
        Put_Line("Convert_Rel_Type: Unmatched string |" & i & "|" );
        return Rel_Type'First; -- never actually gets here; for compiler only
    end Convert_Rel_Type;



    function Pretty_Print( i : Rent_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when s_100pct_rent_rebate => return "100% Rent rebate";
             when rent_free_phone_q => return "Rent free - phone q";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when s_9997_or_above => return "9997 or above";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Rent_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when s_100pct_rent_rebate => return True;
             when rent_free_phone_q => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Rent_Type( i : String ) return Rent_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-3" then
            return s_100pct_rent_rebate;
         elsif i = "-4" then
            return rent_free_phone_q;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "9997" then
            return s_9997_or_above;
        end if;
        Put_Line("Convert_Rent_Type: Unmatched string |" & i & "|" );
        return Rent_Type'First; -- never actually gets here; for compiler only
    end Convert_Rent_Type;



    function Pretty_Print( i : Rent1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when yes => return "Yes";
             when no => return "No";
             when na_in_northern_ireland => return "NA in Northern Ireland";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Rent1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Rent1_Type( i : String ) return Rent1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
         elsif i = "7" then
            return na_in_northern_ireland;
        end if;
        Put_Line("Convert_Rent1_Type: Unmatched string |" & i & "|" );
        return Rent1_Type'First; -- never actually gets here; for compiler only
    end Convert_Rent1_Type;



    function Pretty_Print( i : Rent7_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when yes => return "Yes";
             when no => return "No";
             when na_in_northern_ireland => return "NA in Northern Ireland";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Rent7_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Rent7_Type( i : String ) return Rent7_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
         elsif i = "7" then
            return na_in_northern_ireland;
        end if;
        Put_Line("Convert_Rent7_Type: Unmatched string |" & i & "|" );
        return Rent7_Type'First; -- never actually gets here; for compiler only
    end Convert_Rent7_Type;



    function Pretty_Print( i : Rentf_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when furnished => return "Furnished";
             when partly_furnished => return "Partly furnished";
             when unfurnished => return "Unfurnished";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Rentf_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Rentf_Type( i : String ) return Rentf_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return furnished;
         elsif i = "2" then
            return partly_furnished;
         elsif i = "3" then
            return unfurnished;
        end if;
        Put_Line("Convert_Rentf_Type: Unmatched string |" & i & "|" );
        return Rentf_Type'First; -- never actually gets here; for compiler only
    end Convert_Rentf_Type;



    function Pretty_Print( i : Renthb_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when yes => return "Yes";
             when no => return "No";
             when not_applicable => return "Not applicable";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Renthb_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Renthb_Type( i : String ) return Renthb_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
         elsif i = "7" then
            return not_applicable;
        end if;
        Put_Line("Convert_Renthb_Type: Unmatched string |" & i & "|" );
        return Renthb_Type'First; -- never actually gets here; for compiler only
    end Convert_Renthb_Type;



    function Pretty_Print( i : Renti_Type ) return String is
    begin
         case i is
             when var_dont_know => return "Var Don't know";
             when var_refused => return "Var Refused";
             when var_period_uncodeable => return "Var Period uncodeable";
             when var_one_off_payment => return "Var One-off payment";
             when proxy_and_or_phone => return "Proxy and or phone";
             when var_inapplicable => return "Var Inapplicable";
             when var_missing_or_wild => return "Var Missing or wild";
             when not_imputed => return "Not Imputed";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Renti_Type ) return Boolean is
    begin
         case i is
             when var_dont_know => return True;
             when var_refused => return True;
             when var_period_uncodeable => return True;
             when var_one_off_payment => return True;
             when proxy_and_or_phone => return True;
             when var_inapplicable => return True;
             when var_missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Renti_Type( i : String ) return Renti_Type is
    begin
         if i = "-1" then
            return var_dont_know;
         elsif i = "-2" then
            return var_refused;
         elsif i = "-3" then
            return var_period_uncodeable;
         elsif i = "-4" then
            return var_one_off_payment;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return var_inapplicable;
         elsif i = "-9" then
            return var_missing_or_wild;
         elsif i = "0" then
            return not_imputed;
        end if;
        Put_Line("Convert_Renti_Type: Unmatched string |" & i & "|" );
        return Renti_Type'First; -- never actually gets here; for compiler only
    end Convert_Renti_Type;



    function Pretty_Print( i : Rentll_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when local_auth_or_council => return "Local auth/Council";
             when other_individual => return "Other individual";
             when newtown_comm_or_corp => return "NewTown Comm/Corp";
             when property_company => return "Property company";
             when scottish_homes => return "Scottish Homes";
             when other_housg_assoc => return "Other housg assoc";
             when employer => return "Employer";
             when other_org => return "Other org";
             when relative => return "Relative";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Rentll_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Rentll_Type( i : String ) return Rentll_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return local_auth_or_council;
         elsif i = "10" then
            return other_individual;
         elsif i = "2" then
            return newtown_comm_or_corp;
         elsif i = "3" then
            return property_company;
         elsif i = "4" then
            return scottish_homes;
         elsif i = "5" then
            return other_housg_assoc;
         elsif i = "6" then
            return employer;
         elsif i = "9" then
            return employer;
         elsif i = "7" then
            return other_org;
         elsif i = "8" then
            return relative;
        end if;
        Put_Line("Convert_Rentll_Type: Unmatched string |" & i & "|" );
        return Rentll_Type'First; -- never actually gets here; for compiler only
    end Convert_Rentll_Type;



    function Pretty_Print( i : Rentw_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when period_uncodeable => return "Period uncodeable";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Rentw_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when period_uncodeable => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Rentw_Type( i : String ) return Rentw_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-3" then
            return period_uncodeable;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
        end if;
        Put_Line("Convert_Rentw_Type: Unmatched string |" & i & "|" );
        return Rentw_Type'First; -- never actually gets here; for compiler only
    end Convert_Rentw_Type;



    function Pretty_Print( i : Retamt_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when less_than_a_quarter => return "Less than a quarter";
             when about_a_quarter => return "About a quarter";
             when about_a_third => return "About a third";
             when about_a_half => return "About a half";
             when about_two_thirds => return "About two thirds";
             when about_three_quarters => return "About three quarters";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Retamt_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Retamt_Type( i : String ) return Retamt_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return less_than_a_quarter;
         elsif i = "2" then
            return about_a_quarter;
         elsif i = "3" then
            return about_a_third;
         elsif i = "4" then
            return about_a_half;
         elsif i = "5" then
            return about_two_thirds;
         elsif i = "6" then
            return about_three_quarters;
         elsif i = "7" then
            return other;
        end if;
        Put_Line("Convert_Retamt_Type: Unmatched string |" & i & "|" );
        return Retamt_Type'First; -- never actually gets here; for compiler only
    end Convert_Retamt_Type;



    function Pretty_Print( i : Retexp_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when more_than => return "More than";
             when less_than => return "Less than";
             when about_the_same => return "About the same";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Retexp_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Retexp_Type( i : String ) return Retexp_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return more_than;
         elsif i = "2" then
            return less_than;
         elsif i = "3" then
            return about_the_same;
        end if;
        Put_Line("Convert_Retexp_Type: Unmatched string |" & i & "|" );
        return Retexp_Type'First; -- never actually gets here; for compiler only
    end Convert_Retexp_Type;



    function Pretty_Print( i : Retfix_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when yes => return "Yes";
             when no => return "No";
             when never_worked => return "Never worked";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Retfix_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Retfix_Type( i : String ) return Retfix_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
         elsif i = "3" then
            return never_worked;
        end if;
        Put_Line("Convert_Retfix_Type: Unmatched string |" & i & "|" );
        return Retfix_Type'First; -- never actually gets here; for compiler only
    end Convert_Retfix_Type;



    function Pretty_Print( i : Retsuf_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when more_than_enough_to_meet_your_needs => return "More than enough to meet your needs";
             when just_about_enough_to_meet_your_needs => return "Just about enough to meet your needs";
             when less_than_enough_to_meet_your_needs => return "Less than enough to meet your needs";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Retsuf_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Retsuf_Type( i : String ) return Retsuf_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return more_than_enough_to_meet_your_needs;
         elsif i = "2" then
            return just_about_enough_to_meet_your_needs;
         elsif i = "3" then
            return less_than_enough_to_meet_your_needs;
        end if;
        Put_Line("Convert_Retsuf_Type: Unmatched string |" & i & "|" );
        return Retsuf_Type'First; -- never actually gets here; for compiler only
    end Convert_Retsuf_Type;



    function Pretty_Print( i : Rework_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when yes_hope_so => return "Yes, hope so";
             when no => return "No";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Rework_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Rework_Type( i : String ) return Rework_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return yes_hope_so;
         elsif i = "2" then
            return no;
        end if;
        Put_Line("Convert_Rework_Type: Unmatched string |" & i & "|" );
        return Rework_Type'First; -- never actually gets here; for compiler only
    end Convert_Rework_Type;



    function Pretty_Print( i : Rf2ck_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when yes_has_no_private_pension => return "Yes, has no private pension";
             when no_has_private_pension => return "No, has private pension";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Rf2ck_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Rf2ck_Type( i : String ) return Rf2ck_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return yes_has_no_private_pension;
         elsif i = "2" then
            return no_has_private_pension;
        end if;
        Put_Line("Convert_Rf2ck_Type: Unmatched string |" & i & "|" );
        return Rf2ck_Type'First; -- never actually gets here; for compiler only
    end Convert_Rf2ck_Type;



    function Pretty_Print( i : Riska_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when wont_take_risks => return "Won't take risks";
             when ready_to_take_risks => return "Ready to take risks";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Riska_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Riska_Type( i : String ) return Riska_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return wont_take_risks;
         elsif i = "10" then
            return ready_to_take_risks;
        end if;
        Put_Line("Convert_Riska_Type: Unmatched string |" & i & "|" );
        return Riska_Type'First; -- never actually gets here; for compiler only
    end Convert_Riska_Type;



    function Pretty_Print( i : Riskb_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when dont_trust_strangers => return "Don't trust strangers";
             when will_trust_strangers => return "Will trust strangers";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Riskb_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Riskb_Type( i : String ) return Riskb_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return dont_trust_strangers;
         elsif i = "10" then
            return will_trust_strangers;
        end if;
        Put_Line("Convert_Riskb_Type: Unmatched string |" & i & "|" );
        return Riskb_Type'First; -- never actually gets here; for compiler only
    end Convert_Riskb_Type;



    function Pretty_Print( i : Rtcomp_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when better => return "Better";
             when about_the_same => return "About the same";
             when not_as_good => return "Not as good";
             when retired_lt_1_year => return "Retired lt 1 year";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Rtcomp_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Rtcomp_Type( i : String ) return Rtcomp_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return better;
         elsif i = "2" then
            return about_the_same;
         elsif i = "3" then
            return not_as_good;
         elsif i = "4" then
            return retired_lt_1_year;
        end if;
        Put_Line("Convert_Rtcomp_Type: Unmatched string |" & i & "|" );
        return Rtcomp_Type'First; -- never actually gets here; for compiler only
    end Convert_Rtcomp_Type;



    function Pretty_Print( i : Rtcon1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when a_lot => return "A lot";
             when somewhat => return "Somewhat";
             when a_little => return "A little";
             when not_at_all => return "Not at all";
             when didnt_work => return "Didn't work";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Rtcon1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Rtcon1_Type( i : String ) return Rtcon1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return a_lot;
         elsif i = "2" then
            return somewhat;
         elsif i = "3" then
            return a_little;
         elsif i = "4" then
            return not_at_all;
         elsif i = "5" then
            return didnt_work;
        end if;
        Put_Line("Convert_Rtcon1_Type: Unmatched string |" & i & "|" );
        return Rtcon1_Type'First; -- never actually gets here; for compiler only
    end Convert_Rtcon1_Type;



    function Pretty_Print( i : Rtlata_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when improve_finances => return "Improve finances";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Rtlata_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Rtlata_Type( i : String ) return Rtlata_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return improve_finances;
        end if;
        Put_Line("Convert_Rtlata_Type: Unmatched string |" & i & "|" );
        return Rtlata_Type'First; -- never actually gets here; for compiler only
    end Convert_Rtlata_Type;



    function Pretty_Print( i : Rtlatb_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when enjoyed_my_job_or_working => return "Enjoyed my job/working";
             when enjoyed_job => return "Enjoyed job";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Rtlatb_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Rtlatb_Type( i : String ) return Rtlatb_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return enjoyed_my_job_or_working;
         elsif i = "2" then
            return enjoyed_job;
        end if;
        Put_Line("Convert_Rtlatb_Type: Unmatched string |" & i & "|" );
        return Rtlatb_Type'First; -- never actually gets here; for compiler only
    end Convert_Rtlatb_Type;



    function Pretty_Print( i : Rtlatc_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when didnt_know => return "Didn't know";
             when no_alternatives => return "No alternatives";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Rtlatc_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Rtlatc_Type( i : String ) return Rtlatc_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return didnt_know;
         elsif i = "3" then
            return no_alternatives;
        end if;
        Put_Line("Convert_Rtlatc_Type: Unmatched string |" & i & "|" );
        return Rtlatc_Type'First; -- never actually gets here; for compiler only
    end Convert_Rtlatc_Type;



    function Pretty_Print( i : Rtlatd_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when to_keep_fit_and_active => return "To keep fit and active";
             when keep_fit_active => return "Keep fit, active";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Rtlatd_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Rtlatd_Type( i : String ) return Rtlatd_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return to_keep_fit_and_active;
         elsif i = "4" then
            return keep_fit_active;
        end if;
        Put_Line("Convert_Rtlatd_Type: Unmatched string |" & i & "|" );
        return Rtlatd_Type'First; -- never actually gets here; for compiler only
    end Convert_Rtlatd_Type;



    function Pretty_Print( i : Rtlate_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when persuaded_my_my_employer_to_stay_on => return "Persuaded my my employer to stay on";
             when employer_persuaded => return "Employer persuaded";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Rtlate_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Rtlate_Type( i : String ) return Rtlate_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return persuaded_my_my_employer_to_stay_on;
         elsif i = "5" then
            return employer_persuaded;
        end if;
        Put_Line("Convert_Rtlate_Type: Unmatched string |" & i & "|" );
        return Rtlate_Type'First; -- never actually gets here; for compiler only
    end Convert_Rtlate_Type;



    function Pretty_Print( i : Rtlatf_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when could_not_afford_to_retire_at_that_time => return "Could not afford to retire at that time";
             when couldnt_afford_it => return "Couldn't afford it";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Rtlatf_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Rtlatf_Type( i : String ) return Rtlatf_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return could_not_afford_to_retire_at_that_time;
         elsif i = "6" then
            return couldnt_afford_it;
        end if;
        Put_Line("Convert_Rtlatf_Type: Unmatched string |" & i & "|" );
        return Rtlatf_Type'First; -- never actually gets here; for compiler only
    end Convert_Rtlatf_Type;



    function Pretty_Print( i : Rtlatg_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when to_retire_at_the_same_time_as_my_partner => return "To retire at the same time as my partner";
             when same_time => return "Same time";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Rtlatg_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Rtlatg_Type( i : String ) return Rtlatg_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return to_retire_at_the_same_time_as_my_partner;
         elsif i = "7" then
            return same_time;
        end if;
        Put_Line("Convert_Rtlatg_Type: Unmatched string |" & i & "|" );
        return Rtlatg_Type'First; -- never actually gets here; for compiler only
    end Convert_Rtlatg_Type;



    function Pretty_Print( i : Rtlath_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when to_retire_different_time_to_my_partner => return "To retire different time to my partner";
             when different_time => return "Different time";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Rtlath_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Rtlath_Type( i : String ) return Rtlath_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return to_retire_different_time_to_my_partner;
         elsif i = "8" then
            return different_time;
        end if;
        Put_Line("Convert_Rtlath_Type: Unmatched string |" & i & "|" );
        return Rtlath_Type'First; -- never actually gets here; for compiler only
    end Convert_Rtlath_Type;



    function Pretty_Print( i : Rtlati_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when other => return "Other";
             when other_reason => return "Other reason";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Rtlati_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Rtlati_Type( i : String ) return Rtlati_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return other;
         elsif i = "9" then
            return other_reason;
        end if;
        Put_Line("Convert_Rtlati_Type: Unmatched string |" & i & "|" );
        return Rtlati_Type'First; -- never actually gets here; for compiler only
    end Convert_Rtlati_Type;



    function Pretty_Print( i : Rtlatj_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when does_not_consider_retired_late => return "Does not consider retired late";
             when not_considered_late => return "Not considered late";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Rtlatj_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Rtlatj_Type( i : String ) return Rtlatj_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return does_not_consider_retired_late;
         elsif i = "10" then
            return not_considered_late;
        end if;
        Put_Line("Convert_Rtlatj_Type: Unmatched string |" & i & "|" );
        return Rtlatj_Type'First; -- never actually gets here; for compiler only
    end Convert_Rtlatj_Type;



    function Pretty_Print( i : Rtpro1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when very_important => return "Very important";
             when moderately_important => return "Moderately important";
             when somewhat_important => return "Somewhat important";
             when not_important_at_all => return "Not important at all";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Rtpro1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Rtpro1_Type( i : String ) return Rtpro1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return very_important;
         elsif i = "2" then
            return moderately_important;
         elsif i = "3" then
            return somewhat_important;
         elsif i = "4" then
            return not_important_at_all;
        end if;
        Put_Line("Convert_Rtpro1_Type: Unmatched string |" & i & "|" );
        return Rtpro1_Type'First; -- never actually gets here; for compiler only
    end Convert_Rtpro1_Type;



    function Pretty_Print( i : Rtrhm_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when very_likely => return "Very likely";
             when likely => return "Likely";
             when unlikely => return "Unlikely";
             when very_unlikely => return "Very unlikely";
             when currently_in_a_nursing_home => return "Currently in a nursing home";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Rtrhm_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Rtrhm_Type( i : String ) return Rtrhm_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return very_likely;
         elsif i = "2" then
            return likely;
         elsif i = "3" then
            return unlikely;
         elsif i = "4" then
            return very_unlikely;
         elsif i = "5" then
            return currently_in_a_nursing_home;
        end if;
        Put_Line("Convert_Rtrhm_Type: Unmatched string |" & i & "|" );
        return Rtrhm_Type'First; -- never actually gets here; for compiler only
    end Convert_Rtrhm_Type;



    function Pretty_Print( i : Rtrllt_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when retired_normally => return "Retired normally";
             when retired_early => return "Retired early";
             when retired_late => return "Retired late";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Rtrllt_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Rtrllt_Type( i : String ) return Rtrllt_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return retired_normally;
         elsif i = "1" then
            return retired_early;
         elsif i = "2" then
            return retired_late;
        end if;
        Put_Line("Convert_Rtrllt_Type: Unmatched string |" & i & "|" );
        return Rtrllt_Type'First; -- never actually gets here; for compiler only
    end Convert_Rtrllt_Type;



    function Pretty_Print( i : Rtrlya_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when own_ill_health => return "Own ill health";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Rtrlya_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Rtrlya_Type( i : String ) return Rtrlya_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return own_ill_health;
        end if;
        Put_Line("Convert_Rtrlya_Type: Unmatched string |" & i & "|" );
        return Rtrlya_Type'First; -- never actually gets here; for compiler only
    end Convert_Rtrlya_Type;



    function Pretty_Print( i : Rtrlyb_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when ill_health_of_relative_or_friend => return "ill health of relative/friend";
             when ill_health_of_other => return "Ill health of other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Rtrlyb_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Rtrlyb_Type( i : String ) return Rtrlyb_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return ill_health_of_relative_or_friend;
         elsif i = "2" then
            return ill_health_of_other;
        end if;
        Put_Line("Convert_Rtrlyb_Type: Unmatched string |" & i & "|" );
        return Rtrlyb_Type'First; -- never actually gets here; for compiler only
    end Convert_Rtrlyb_Type;



    function Pretty_Print( i : Rtrlyc_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when redundant_or_dismissed_or_no_choice => return "Redundant/dismissed/no choice";
             when compulsorily => return "Compulsorily";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Rtrlyc_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Rtrlyc_Type( i : String ) return Rtrlyc_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return redundant_or_dismissed_or_no_choice;
         elsif i = "3" then
            return compulsorily;
        end if;
        Put_Line("Convert_Rtrlyc_Type: Unmatched string |" & i & "|" );
        return Rtrlyc_Type'First; -- never actually gets here; for compiler only
    end Convert_Rtrlyc_Type;



    function Pretty_Print( i : Rtrlyd_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when offered_reasonable_financial_terms => return "Offered reasonable financial terms";
             when financial_deal => return "Financial deal";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Rtrlyd_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Rtrlyd_Type( i : String ) return Rtrlyd_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return offered_reasonable_financial_terms;
         elsif i = "4" then
            return financial_deal;
        end if;
        Put_Line("Convert_Rtrlyd_Type: Unmatched string |" & i & "|" );
        return Rtrlyd_Type'First; -- never actually gets here; for compiler only
    end Convert_Rtrlyd_Type;



    function Pretty_Print( i : Rtrlye_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when couldnt_find_another_job => return "Couldn't find another job";
             when no_other_job => return "No other job";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Rtrlye_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Rtrlye_Type( i : String ) return Rtrlye_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return couldnt_find_another_job;
         elsif i = "5" then
            return no_other_job;
        end if;
        Put_Line("Convert_Rtrlye_Type: Unmatched string |" & i & "|" );
        return Rtrlye_Type'First; -- never actually gets here; for compiler only
    end Convert_Rtrlye_Type;



    function Pretty_Print( i : Rtrlyf_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when spend_more_time_with_partner_or_family => return "Spend more time with partner/family";
             when time_with_family => return "Time with family";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Rtrlyf_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Rtrlyf_Type( i : String ) return Rtrlyf_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return spend_more_time_with_partner_or_family;
         elsif i = "5" then
            return time_with_family;
        end if;
        Put_Line("Convert_Rtrlyf_Type: Unmatched string |" & i & "|" );
        return Rtrlyf_Type'First; -- never actually gets here; for compiler only
    end Convert_Rtrlyf_Type;



    function Pretty_Print( i : Rtrlyg_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when enjoy_life_while_young_and_fit => return "enjoy life while young and fit";
             when enjoy_life => return "Enjoy life";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Rtrlyg_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Rtrlyg_Type( i : String ) return Rtrlyg_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return enjoy_life_while_young_and_fit;
         elsif i = "6" then
            return enjoy_life;
        end if;
        Put_Line("Convert_Rtrlyg_Type: Unmatched string |" & i & "|" );
        return Rtrlyg_Type'First; -- never actually gets here; for compiler only
    end Convert_Rtrlyg_Type;



    function Pretty_Print( i : Rtrlyh_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when fed_up_with_job_wanted_a_change => return "Fed up with job, wanted a change";
             when needed_change => return "Needed change";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Rtrlyh_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Rtrlyh_Type( i : String ) return Rtrlyh_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return fed_up_with_job_wanted_a_change;
         elsif i = "7" then
            return needed_change;
        end if;
        Put_Line("Convert_Rtrlyh_Type: Unmatched string |" & i & "|" );
        return Rtrlyh_Type'First; -- never actually gets here; for compiler only
    end Convert_Rtrlyh_Type;



    function Pretty_Print( i : Rtrlyi_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when to_retire_at_same_time_as_partner => return "To retire at same time as partner";
             when same_time => return "Same time";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Rtrlyi_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Rtrlyi_Type( i : String ) return Rtrlyi_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return to_retire_at_same_time_as_partner;
         elsif i = "8" then
            return same_time;
        end if;
        Put_Line("Convert_Rtrlyi_Type: Unmatched string |" & i & "|" );
        return Rtrlyi_Type'First; -- never actually gets here; for compiler only
    end Convert_Rtrlyi_Type;



    function Pretty_Print( i : Rtrlyj_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when to_retire_at_different_time_to_partner => return "To retire at different time to partner";
             when different_time => return "Different time";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Rtrlyj_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Rtrlyj_Type( i : String ) return Rtrlyj_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return to_retire_at_different_time_to_partner;
         elsif i = "9" then
            return different_time;
        end if;
        Put_Line("Convert_Rtrlyj_Type: Unmatched string |" & i & "|" );
        return Rtrlyj_Type'First; -- never actually gets here; for compiler only
    end Convert_Rtrlyj_Type;



    function Pretty_Print( i : Rtrlyk_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when to_give_younger_generation_a_chance => return "To give younger generation a chance";
             when for_next_gen => return "For next gen";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Rtrlyk_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Rtrlyk_Type( i : String ) return Rtrlyk_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return to_give_younger_generation_a_chance;
         elsif i = "10" then
            return for_next_gen;
        end if;
        Put_Line("Convert_Rtrlyk_Type: Unmatched string |" & i & "|" );
        return Rtrlyk_Type'First; -- never actually gets here; for compiler only
    end Convert_Rtrlyk_Type;



    function Pretty_Print( i : Rtrlyl_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Rtrlyl_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Rtrlyl_Type( i : String ) return Rtrlyl_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return other;
        end if;
        Put_Line("Convert_Rtrlyl_Type: Unmatched string |" & i & "|" );
        return Rtrlyl_Type'First; -- never actually gets here; for compiler only
    end Convert_Rtrlyl_Type;



    function Pretty_Print( i : Rtrlym_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when does_not_consider_to_be_retired_early => return "Does not consider to be retired early";
             when not_early => return "Not early";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Rtrlym_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Rtrlym_Type( i : String ) return Rtrlym_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return does_not_consider_to_be_retired_early;
         elsif i = "11" then
            return not_early;
        end if;
        Put_Line("Convert_Rtrlym_Type: Unmatched string |" & i & "|" );
        return Rtrlym_Type'First; -- never actually gets here; for compiler only
    end Convert_Rtrlym_Type;



    function Pretty_Print( i : Rtsat_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when very_satisfying => return "Very satisfying";
             when moderately_satisfying => return "Moderately satisfying";
             when not_at_all_satisfying => return "Not at all satisfying";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Rtsat_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Rtsat_Type( i : String ) return Rtsat_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return very_satisfying;
         elsif i = "2" then
            return moderately_satisfying;
         elsif i = "3" then
            return not_at_all_satisfying;
        end if;
        Put_Line("Convert_Rtsat_Type: Unmatched string |" & i & "|" );
        return Rtsat_Type'First; -- never actually gets here; for compiler only
    end Convert_Rtsat_Type;



    function Pretty_Print( i : Rtvol_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when wanted_to_do => return "Wanted to do";
             when forced_into => return "Forced into";
             when part_want_part_force => return "Part want part force";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Rtvol_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Rtvol_Type( i : String ) return Rtvol_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return wanted_to_do;
         elsif i = "2" then
            return forced_into;
         elsif i = "3" then
            return part_want_part_force;
        end if;
        Put_Line("Convert_Rtvol_Type: Unmatched string |" & i & "|" );
        return Rtvol_Type'First; -- never actually gets here; for compiler only
    end Convert_Rtvol_Type;



    function Pretty_Print( i : Sampst_Type ) return String is
    begin
         case i is
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when continuing_osm => return "Continuing OSM";
             when w1_non_cont_or_enum => return "W1 non-cont/enum";
             when birth_osm => return "Birth - OSM";
             when psm_parent_of_osm => return "PSM: parent of OSM";
             when tsm => return "TSM";
             when osm_echp_sample => return "OSM: ECHP sample";
             when echp_rejoiner => return "ECHP rejoiner";
             when scot_or_wales_new_sample => return "Scot/Wales new sample";
             when sw_w9_non_cont_or_enum => return "SW W9 non-cont/enum";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Sampst_Type ) return Boolean is
    begin
         case i is
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Sampst_Type( i : String ) return Sampst_Type is
    begin
         if i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return continuing_osm;
         elsif i = "2" then
            return w1_non_cont_or_enum;
         elsif i = "3" then
            return birth_osm;
         elsif i = "4" then
            return psm_parent_of_osm;
         elsif i = "5" then
            return tsm;
         elsif i = "6" then
            return osm_echp_sample;
         elsif i = "7" then
            return echp_rejoiner;
         elsif i = "8" then
            return scot_or_wales_new_sample;
         elsif i = "9" then
            return sw_w9_non_cont_or_enum;
        end if;
        Put_Line("Convert_Sampst_Type: Unmatched string |" & i & "|" );
        return Sampst_Type'First; -- never actually gets here; for compiler only
    end Convert_Sampst_Type;



    function Pretty_Print( i : Satinv_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when never_interviewed_before => return "Never interviewed before";
             when not_happy_at_all => return "Not happy at all";
             when completely_happy => return "Completely happy";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Satinv_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Satinv_Type( i : String ) return Satinv_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return never_interviewed_before;
         elsif i = "1" then
            return not_happy_at_all;
         elsif i = "7" then
            return completely_happy;
        end if;
        Put_Line("Convert_Satinv_Type: Unmatched string |" & i & "|" );
        return Satinv_Type'First; -- never actually gets here; for compiler only
    end Convert_Satinv_Type;



    function Pretty_Print( i : Savey_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when holidays => return "Holidays";
             when old_age => return "Old age";
             when car => return "Car";
             when children => return "Children";
             when house_purchase => return "House purchase";
             when home_improv => return "Home improv";
             when hh_bills => return "HH bills";
             when special_evnts => return "Special evnts";
             when no_spec_reason => return "No spec reason";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Savey_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Savey_Type( i : String ) return Savey_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return holidays;
         elsif i = "2" then
            return old_age;
         elsif i = "3" then
            return car;
         elsif i = "4" then
            return children;
         elsif i = "5" then
            return house_purchase;
         elsif i = "6" then
            return home_improv;
         elsif i = "7" then
            return hh_bills;
         elsif i = "8" then
            return special_evnts;
         elsif i = "9" then
            return no_spec_reason;
         elsif i = "96" then
            return other;
        end if;
        Put_Line("Convert_Savey_Type: Unmatched string |" & i & "|" );
        return Savey_Type'First; -- never actually gets here; for compiler only
    end Convert_Savey_Type;



    function Pretty_Print( i : Savey1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when holidays => return "Holidays";
             when share_schemes => return "Share schemes";
             when own_education => return "Own education";
             when grandchild => return "Grandchild";
             when old_age => return "Old age";
             when car => return "Car";
             when children => return "Children";
             when house_purchase => return "House purchase";
             when home_improv => return "Home improv";
             when hh_bills => return "HH bills";
             when special_evnts => return "Special evnts";
             when no_spec_reason => return "No spec reason";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Savey1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Savey1_Type( i : String ) return Savey1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return holidays;
         elsif i = "10" then
            return share_schemes;
         elsif i = "11" then
            return own_education;
         elsif i = "12" then
            return grandchild;
         elsif i = "2" then
            return old_age;
         elsif i = "3" then
            return car;
         elsif i = "4" then
            return children;
         elsif i = "5" then
            return house_purchase;
         elsif i = "6" then
            return home_improv;
         elsif i = "7" then
            return hh_bills;
         elsif i = "8" then
            return special_evnts;
         elsif i = "9" then
            return no_spec_reason;
         elsif i = "96" then
            return other;
        end if;
        Put_Line("Convert_Savey1_Type: Unmatched string |" & i & "|" );
        return Savey1_Type'First; -- never actually gets here; for compiler only
    end Convert_Savey1_Type;



    function Pretty_Print( i : Savlt_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when mainly_long_term => return "Mainly long term";
             when mainly_short_term => return "Mainly short term";
             when both_equally => return "Both equally";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Savlt_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Savlt_Type( i : String ) return Savlt_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return mainly_long_term;
         elsif i = "2" then
            return mainly_short_term;
         elsif i = "3" then
            return both_equally;
        end if;
        Put_Line("Convert_Savlt_Type: Unmatched string |" & i & "|" );
        return Savlt_Type'First; -- never actually gets here; for compiler only
    end Convert_Savlt_Type;



    function Pretty_Print( i : Savreg_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when regular_basis => return "Regular basis";
             when from_time_to_time => return "From time to time";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Savreg_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Savreg_Type( i : String ) return Savreg_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return regular_basis;
         elsif i = "2" then
            return from_time_to_time;
         elsif i = "3" then
            return other;
        end if;
        Put_Line("Convert_Savreg_Type: Unmatched string |" & i & "|" );
        return Savreg_Type'First; -- never actually gets here; for compiler only
    end Convert_Savreg_Type;



    function Pretty_Print( i : Sc2uni_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when yes_definitely => return "Yes, definitely";
             when no => return "No";
             when dont_mind_or_up_to_child => return "Don't mind/up to child";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Sc2uni_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Sc2uni_Type( i : String ) return Sc2uni_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return yes_definitely;
         elsif i = "2" then
            return no;
         elsif i = "3" then
            return dont_mind_or_up_to_child;
        end if;
        Put_Line("Convert_Sc2uni_Type: Unmatched string |" & i & "|" );
        return Sc2uni_Type'First; -- never actually gets here; for compiler only
    end Convert_Sc2uni_Type;



    function Pretty_Print( i : Scach_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when very_important => return "Very important";
             when important => return "Important";
             when not_very_important => return "Not very important";
             when not_at_all_important => return "Not at all important";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Scach_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Scach_Type( i : String ) return Scach_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return very_important;
         elsif i = "2" then
            return important;
         elsif i = "3" then
            return not_very_important;
         elsif i = "4" then
            return not_at_all_important;
        end if;
        Put_Line("Convert_Scach_Type: Unmatched string |" & i & "|" );
        return Scach_Type'First; -- never actually gets here; for compiler only
    end Convert_Scach_Type;



    function Pretty_Print( i : Scag11_Type ) return String is
    begin
         case i is
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when yes => return "Yes";
             when no => return "No";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Scag11_Type ) return Boolean is
    begin
         case i is
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Scag11_Type( i : String ) return Scag11_Type is
    begin
         if i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
        end if;
        Put_Line("Convert_Scag11_Type: Unmatched string |" & i & "|" );
        return Scag11_Type'First; -- never actually gets here; for compiler only
    end Convert_Scag11_Type;



    function Pretty_Print( i : Scage_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Scage_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Scage_Type( i : String ) return Scage_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
        end if;
        Put_Line("Convert_Scage_Type: Unmatched string |" & i & "|" );
        return Scage_Type'First; -- never actually gets here; for compiler only
    end Convert_Scage_Type;



    function Pretty_Print( i : Scarg_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when most_days => return "Most days";
             when more_than_once_or_week => return "More than once/week";
             when less_than_once_or_week => return "Less than once/week";
             when hardly_ever => return "Hardly ever";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Scarg_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Scarg_Type( i : String ) return Scarg_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return most_days;
         elsif i = "2" then
            return more_than_once_or_week;
         elsif i = "3" then
            return less_than_once_or_week;
         elsif i = "4" then
            return hardly_ever;
        end if;
        Put_Line("Convert_Scarg_Type: Unmatched string |" & i & "|" );
        return Scarg_Type'First; -- never actually gets here; for compiler only
    end Convert_Scarg_Type;



    function Pretty_Print( i : Sccudl_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when never => return "Never";
             when seldom => return "Seldom";
             when sometimes => return "Sometimes";
             when very_often => return "Very often";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Sccudl_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Sccudl_Type( i : String ) return Sccudl_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return never;
         elsif i = "2" then
            return seldom;
         elsif i = "3" then
            return sometimes;
         elsif i = "4" then
            return very_often;
        end if;
        Put_Line("Convert_Sccudl_Type: Unmatched string |" & i & "|" );
        return Sccudl_Type'First; -- never actually gets here; for compiler only
    end Convert_Sccudl_Type;



    function Pretty_Print( i : Schhw_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when almost_every_day => return "Almost every day";
             when at_least_once_or_week => return "At least once/week";
             when at_least_once_or_month => return "At least once/month";
             when less_than_once_or_month => return "Less than once/month";
             when never_or_hardly_ever => return "Never or hardly ever";
             when n_or_a_no_homework => return "N/A (no homework)";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Schhw_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Schhw_Type( i : String ) return Schhw_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return almost_every_day;
         elsif i = "2" then
            return at_least_once_or_week;
         elsif i = "3" then
            return at_least_once_or_month;
         elsif i = "4" then
            return less_than_once_or_month;
         elsif i = "5" then
            return never_or_hardly_ever;
         elsif i = "6" then
            return n_or_a_no_homework;
        end if;
        Put_Line("Convert_Schhw_Type: Unmatched string |" & i & "|" );
        return Schhw_Type'First; -- never actually gets here; for compiler only
    end Convert_Schhw_Type;



    function Pretty_Print( i : Schlng_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when welsh_language => return "Welsh language";
             when billingual => return "Billingual";
             when english_language => return "English language";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Schlng_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Schlng_Type( i : String ) return Schlng_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return welsh_language;
         elsif i = "2" then
            return billingual;
         elsif i = "3" then
            return english_language;
        end if;
        Put_Line("Convert_Schlng_Type: Unmatched string |" & i & "|" );
        return Schlng_Type'First; -- never actually gets here; for compiler only
    end Convert_Schlng_Type;



    function Pretty_Print( i : School_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when never_went_school => return "Never went school";
             when still_at_school => return "Still at school";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : School_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_School_Type( i : String ) return School_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return never_went_school;
         elsif i = "2" then
            return still_at_school;
        end if;
        Put_Line("Convert_School_Type: Unmatched string |" & i & "|" );
        return School_Type'First; -- never actually gets here; for compiler only
    end Convert_School_Type;



    function Pretty_Print( i : Schos1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when at_school_before_move => return "At school before move";
             when friend => return "Friend";
             when better_school => return "Better school";
             when special_need_or_disabled => return "Special need/disabled";
             when religious_reasons => return "Religious reasons";
             when language_eg_welsh => return "Language (eg Welsh)";
             when grammar_sch_or_high_sch => return "Grammar sch/high sch";
             when local_school_full => return "Local school full";
             when good_for_sport_or_other => return "Good for sport/other";
             when siblings_went_there => return "Siblings went there";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Schos1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Schos1_Type( i : String ) return Schos1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return at_school_before_move;
         elsif i = "10" then
            return friend;
         elsif i = "2" then
            return better_school;
         elsif i = "3" then
            return special_need_or_disabled;
         elsif i = "4" then
            return religious_reasons;
         elsif i = "5" then
            return language_eg_welsh;
         elsif i = "6" then
            return grammar_sch_or_high_sch;
         elsif i = "7" then
            return local_school_full;
         elsif i = "8" then
            return good_for_sport_or_other;
         elsif i = "9" then
            return siblings_went_there;
         elsif i = "96" then
            return other;
        end if;
        Put_Line("Convert_Schos1_Type: Unmatched string |" & i & "|" );
        return Schos1_Type'First; -- never actually gets here; for compiler only
    end Convert_Schos1_Type;



    function Pretty_Print( i : Schos2_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when not_mentioned => return "Not mentioned";
             when at_school_before_move => return "At school before move";
             when friend => return "Friend";
             when better_school => return "Better school";
             when special_need_or_disabled => return "Special need/disabled";
             when religious_reasons => return "Religious reasons";
             when language_eg_welsh => return "Language (eg Welsh)";
             when grammar_sch_or_high_sch => return "Grammar sch/high sch";
             when local_school_full => return "Local school full";
             when good_for_sport_or_other => return "Good for sport/other";
             when siblings_went_there => return "Siblings went there";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Schos2_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Schos2_Type( i : String ) return Schos2_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return at_school_before_move;
         elsif i = "10" then
            return friend;
         elsif i = "2" then
            return better_school;
         elsif i = "3" then
            return special_need_or_disabled;
         elsif i = "4" then
            return religious_reasons;
         elsif i = "5" then
            return language_eg_welsh;
         elsif i = "6" then
            return grammar_sch_or_high_sch;
         elsif i = "7" then
            return local_school_full;
         elsif i = "8" then
            return good_for_sport_or_other;
         elsif i = "9" then
            return siblings_went_there;
         elsif i = "96" then
            return other;
        end if;
        Put_Line("Convert_Schos2_Type: Unmatched string |" & i & "|" );
        return Schos2_Type'First; -- never actually gets here; for compiler only
    end Convert_Schos2_Type;



    function Pretty_Print( i : Schosa_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when yes => return "Yes";
             when no => return "No";
             when not_school_age => return "Not school age";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Schosa_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Schosa_Type( i : String ) return Schosa_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
         elsif i = "3" then
            return not_school_age;
        end if;
        Put_Line("Convert_Schosa_Type: Unmatched string |" & i & "|" );
        return Schosa_Type'First; -- never actually gets here; for compiler only
    end Convert_Schosa_Type;



    function Pretty_Print( i : Schsat_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when very_satisfied => return "Very satisfied";
             when satisfied => return "Satisfied";
             when not_very_satisfied => return "Not very satisfied";
             when not_at_all_satisfied => return "Not at all satisfied";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Schsat_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Schsat_Type( i : String ) return Schsat_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return very_satisfied;
         elsif i = "2" then
            return satisfied;
         elsif i = "3" then
            return not_very_satisfied;
         elsif i = "4" then
            return not_at_all_satisfied;
        end if;
        Put_Line("Convert_Schsat_Type: Unmatched string |" & i & "|" );
        return Schsat_Type'First; -- never actually gets here; for compiler only
    end Convert_Schsat_Type;



    function Pretty_Print( i : Schsta_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when state_school => return "State school";
             when private_school => return "Private school";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Schsta_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Schsta_Type( i : String ) return Schsta_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return state_school;
         elsif i = "2" then
            return private_school;
        end if;
        Put_Line("Convert_Schsta_Type: Unmatched string |" & i & "|" );
        return Schsta_Type'First; -- never actually gets here; for compiler only
    end Convert_Schsta_Type;



    function Pretty_Print( i : Scluni_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when yes_definitley => return "Yes, definitley";
             when yes_probably => return "Yes, probably";
             when maybe => return "Maybe";
             when no => return "No";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Scluni_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Scluni_Type( i : String ) return Scluni_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return yes_definitley;
         elsif i = "2" then
            return yes_probably;
         elsif i = "3" then
            return maybe;
         elsif i = "4" then
            return no;
        end if;
        Put_Line("Convert_Scluni_Type: Unmatched string |" & i & "|" );
        return Scluni_Type'First; -- never actually gets here; for compiler only
    end Convert_Scluni_Type;



    function Pretty_Print( i : Scsex_Type ) return String is
    begin
         case i is
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when male => return "Male";
             when female => return "Female";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Scsex_Type ) return Boolean is
    begin
         case i is
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Scsex_Type( i : String ) return Scsex_Type is
    begin
         if i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return male;
         elsif i = "2" then
            return female;
        end if;
        Put_Line("Convert_Scsex_Type: Unmatched string |" & i & "|" );
        return Scsex_Type'First; -- never actually gets here; for compiler only
    end Convert_Scsex_Type;



    function Pretty_Print( i : Sctut_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when yes => return "Yes";
             when no => return "No";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Sctut_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Sctut_Type( i : String ) return Sctut_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
        end if;
        Put_Line("Convert_Sctut_Type: Unmatched string |" & i & "|" );
        return Sctut_Type'First; -- never actually gets here; for compiler only
    end Convert_Sctut_Type;



    function Pretty_Print( i : Sctute_Type ) return String is
    begin
         case i is
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when english => return "English";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Sctute_Type ) return Boolean is
    begin
         case i is
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Sctute_Type( i : String ) return Sctute_Type is
    begin
         if i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return english;
        end if;
        Put_Line("Convert_Sctute_Type: Unmatched string |" & i & "|" );
        return Sctute_Type'First; -- never actually gets here; for compiler only
    end Convert_Sctute_Type;



    function Pretty_Print( i : Sctuth_Type ) return String is
    begin
         case i is
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when humanitities => return "Humanitities";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Sctuth_Type ) return Boolean is
    begin
         case i is
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Sctuth_Type( i : String ) return Sctuth_Type is
    begin
         if i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return humanitities;
        end if;
        Put_Line("Convert_Sctuth_Type: Unmatched string |" & i & "|" );
        return Sctuth_Type'First; -- never actually gets here; for compiler only
    end Convert_Sctuth_Type;



    function Pretty_Print( i : Sctutl_Type ) return String is
    begin
         case i is
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when languages => return "Languages";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Sctutl_Type ) return Boolean is
    begin
         case i is
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Sctutl_Type( i : String ) return Sctutl_Type is
    begin
         if i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return languages;
        end if;
        Put_Line("Convert_Sctutl_Type: Unmatched string |" & i & "|" );
        return Sctutl_Type'First; -- never actually gets here; for compiler only
    end Convert_Sctutl_Type;



    function Pretty_Print( i : Sctutm_Type ) return String is
    begin
         case i is
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when maths => return "Maths";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Sctutm_Type ) return Boolean is
    begin
         case i is
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Sctutm_Type( i : String ) return Sctutm_Type is
    begin
         if i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return maths;
        end if;
        Put_Line("Convert_Sctutm_Type: Unmatched string |" & i & "|" );
        return Sctutm_Type'First; -- never actually gets here; for compiler only
    end Convert_Sctutm_Type;



    function Pretty_Print( i : Sctuto_Type ) return String is
    begin
         case i is
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Sctuto_Type ) return Boolean is
    begin
         case i is
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Sctuto_Type( i : String ) return Sctuto_Type is
    begin
         if i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return other;
        end if;
        Put_Line("Convert_Sctuto_Type: Unmatched string |" & i & "|" );
        return Sctuto_Type'First; -- never actually gets here; for compiler only
    end Convert_Sctuto_Type;



    function Pretty_Print( i : Sctuts_Type ) return String is
    begin
         case i is
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when science => return "Science";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Sctuts_Type ) return Boolean is
    begin
         case i is
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Sctuts_Type( i : String ) return Sctuts_Type is
    begin
         if i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return science;
        end if;
        Put_Line("Convert_Sctuts_Type: Unmatched string |" & i & "|" );
        return Sctuts_Type'First; -- never actually gets here; for compiler only
    end Convert_Sctuts_Type;



    function Pretty_Print( i : Sctyp_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when not_at_school_yet => return "Not at school yet";
             when primary_school => return "Primary school";
             when secondary_or_6th_form => return "Secondary/6th Form";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Sctyp_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Sctyp_Type( i : String ) return Sctyp_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return not_at_school_yet;
         elsif i = "2" then
            return primary_school;
         elsif i = "3" then
            return secondary_or_6th_form;
         elsif i = "4" then
            return other;
        end if;
        Put_Line("Convert_Sctyp_Type: Unmatched string |" & i & "|" );
        return Sctyp_Type'First; -- never actually gets here; for compiler only
    end Convert_Sctyp_Type;



    function Pretty_Print( i : Sctype_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when comprehensive_school => return "Comprehensive school";
             when grammar_not_fee_pay => return "Grammar not fee pay";
             when grammar_fee_paying => return "Grammar fee-paying";
             when sixth_form_college => return "Sixth form College";
             when public_and_other_privte => return "Public & other privte";
             when elementary => return "Elementary";
             when secondary_modern => return "Secondary modern";
             when technical => return "Technical";
             when other_specif_school => return "Other specif school";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Sctype_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Sctype_Type( i : String ) return Sctype_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return comprehensive_school;
         elsif i = "2" then
            return grammar_not_fee_pay;
         elsif i = "3" then
            return grammar_fee_paying;
         elsif i = "4" then
            return sixth_form_college;
         elsif i = "5" then
            return public_and_other_privte;
         elsif i = "6" then
            return elementary;
         elsif i = "7" then
            return secondary_modern;
         elsif i = "8" then
            return technical;
         elsif i = "9" then
            return other_specif_school;
        end if;
        Put_Line("Convert_Sctype_Type: Unmatched string |" & i & "|" );
        return Sctype_Type'First; -- never actually gets here; for compiler only
    end Convert_Sctype_Type;



    function Pretty_Print( i : Seekid_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when other_or_both_par_dead => return "Other/both par dead";
             when never => return "Never";
             when a_few_times_a_year => return "A few times a year";
             when once_or_month_or_less => return "Once/month or less";
             when several_timesmonth => return "Several times.month";
             when about_once_a_week => return "About once a week";
             when several_times_or_week => return "Several times/week";
             when almost_every_day => return "Almost every day";
             when shared_care_50_or_50 => return "Shared care 50/50";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Seekid_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Seekid_Type( i : String ) return Seekid_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return other_or_both_par_dead;
         elsif i = "1" then
            return never;
         elsif i = "2" then
            return a_few_times_a_year;
         elsif i = "3" then
            return once_or_month_or_less;
         elsif i = "4" then
            return several_timesmonth;
         elsif i = "5" then
            return about_once_a_week;
         elsif i = "6" then
            return several_times_or_week;
         elsif i = "7" then
            return almost_every_day;
         elsif i = "8" then
            return shared_care_50_or_50;
        end if;
        Put_Line("Convert_Seekid_Type: Unmatched string |" & i & "|" );
        return Seekid_Type'First; -- never actually gets here; for compiler only
    end Convert_Seekid_Type;



    function Pretty_Print( i : Sex_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when male => return "Male";
             when female => return "Female";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Sex_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Sex_Type( i : String ) return Sex_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return male;
         elsif i = "2" then
            return female;
        end if;
        Put_Line("Convert_Sex_Type: Unmatched string |" & i & "|" );
        return Sex_Type'First; -- never actually gets here; for compiler only
    end Convert_Sex_Type;



    function Pretty_Print( i : Smagbg_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when never_smoked_reg => return "Never smoked reg";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when never_smoked_regularly => return "Never smoked regularly";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Smagbg_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when never_smoked_reg => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Smagbg_Type( i : String ) return Smagbg_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-3" then
            return never_smoked_reg;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return never_smoked_regularly;
        end if;
        Put_Line("Convert_Smagbg_Type: Unmatched string |" & i & "|" );
        return Smagbg_Type'First; -- never actually gets here; for compiler only
    end Convert_Smagbg_Type;



    function Pretty_Print( i : Smcigs_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when smoked_regularly => return "Smoked regularly";
             when smoked_occasionally => return "Smoked occasionally";
             when never_really_smoked => return "Never really smoked";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Smcigs_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Smcigs_Type( i : String ) return Smcigs_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return smoked_regularly;
         elsif i = "2" then
            return smoked_occasionally;
         elsif i = "3" then
            return never_really_smoked;
        end if;
        Put_Line("Convert_Smcigs_Type: Unmatched string |" & i & "|" );
        return Smcigs_Type'First; -- never actually gets here; for compiler only
    end Convert_Smcigs_Type;



    function Pretty_Print( i : Smstop_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when less_than_six_months_ago => return "Less than six months ago";
             when s_6_to_12_months_ago => return "6 to 12 months ago";
             when one_to_two_years_ago => return "One to two years ago";
             when two_to_five_years_ago => return "Two to five years ago";
             when five_to_ten_years_ago => return "Five to ten years ago";
             when s_10_or_more_years_ago => return "10 or more years ago";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Smstop_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Smstop_Type( i : String ) return Smstop_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return less_than_six_months_ago;
         elsif i = "2" then
            return s_6_to_12_months_ago;
         elsif i = "3" then
            return one_to_two_years_ago;
         elsif i = "4" then
            return two_to_five_years_ago;
         elsif i = "5" then
            return five_to_ten_years_ago;
         elsif i = "6" then
            return s_10_or_more_years_ago;
        end if;
        Put_Line("Convert_Smstop_Type: Unmatched string |" & i & "|" );
        return Smstop_Type'First; -- never actually gets here; for compiler only
    end Convert_Smstop_Type;



    function Pretty_Print( i : Spjb_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when no_spouse_or_partner => return "No spouse/partner";
             when missing_or_wild => return "Missing or wild";
             when no => return "No";
             when yes => return "Yes";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Spjb_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when no_spouse_or_partner => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Spjb_Type( i : String ) return Spjb_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return no_spouse_or_partner;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return no;
         elsif i = "1" then
            return yes;
        end if;
        Put_Line("Convert_Spjb_Type: Unmatched string |" & i & "|" );
        return Spjb_Type'First; -- never actually gets here; for compiler only
    end Convert_Spjb_Type;



    function Pretty_Print( i : Spjbhr_Type ) return String is
    begin
         case i is
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when no_expected_hours => return "No expected hours";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Spjbhr_Type ) return Boolean is
    begin
         case i is
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Spjbhr_Type( i : String ) return Spjbhr_Type is
    begin
         if i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return no_expected_hours;
        end if;
        Put_Line("Convert_Spjbhr_Type: Unmatched string |" & i & "|" );
        return Spjbhr_Type'First; -- never actually gets here; for compiler only
    end Convert_Spjbhr_Type;



    function Pretty_Print( i : Spjbot_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when none => return "None";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Spjbot_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Spjbot_Type( i : String ) return Spjbot_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return none;
        end if;
        Put_Line("Convert_Spjbot_Type: Unmatched string |" & i & "|" );
        return Spjbot_Type'First; -- never actually gets here; for compiler only
    end Convert_Spjbot_Type;



    function Pretty_Print( i : Sppid_Type ) return String is
    begin
         case i is
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when spouse_not_in_hh => return "Spouse not in hh";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Sppid_Type ) return Boolean is
    begin
         case i is
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Sppid_Type( i : String ) return Sppid_Type is
    begin
         if i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return spouse_not_in_hh;
        end if;
        Put_Line("Convert_Sppid_Type: Unmatched string |" & i & "|" );
        return Sppid_Type'First; -- never actually gets here; for compiler only
    end Convert_Sppid_Type;



    function Pretty_Print( i : Ssupa_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when yes_one_person => return "Yes one person";
             when yes_more_thn_one => return "Yes more thn one";
             when no_one => return "No one";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ssupa_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ssupa_Type( i : String ) return Ssupa_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return yes_one_person;
         elsif i = "2" then
            return yes_more_thn_one;
         elsif i = "3" then
            return no_one;
        end if;
        Put_Line("Convert_Ssupa_Type: Unmatched string |" & i & "|" );
        return Ssupa_Type'First; -- never actually gets here; for compiler only
    end Convert_Ssupa_Type;



    function Pretty_Print( i : Ssupr2r_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when nothing_written_in => return "Nothing written in";
             when partner => return "Partner";
             when child => return "Child";
             when sibling => return "Sibling";
             when parent => return "Parent";
             when grandparent => return "Grandparent";
             when grandchild => return "Grandchild";
             when aunt_or_uncle_or_cousin => return "Aunt/uncle/cousin";
             when other_relative => return "Other relative";
             when friend => return "Friend";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ssupr2r_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ssupr2r_Type( i : String ) return Ssupr2r_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return nothing_written_in;
         elsif i = "1" then
            return partner;
         elsif i = "2" then
            return child;
         elsif i = "3" then
            return sibling;
         elsif i = "4" then
            return parent;
         elsif i = "5" then
            return grandparent;
         elsif i = "6" then
            return grandchild;
         elsif i = "7" then
            return aunt_or_uncle_or_cousin;
         elsif i = "8" then
            return other_relative;
         elsif i = "9" then
            return friend;
        end if;
        Put_Line("Convert_Ssupr2r_Type: Unmatched string |" & i & "|" );
        return Ssupr2r_Type'First; -- never actually gets here; for compiler only
    end Convert_Ssupr2r_Type;



    function Pretty_Print( i : Swpop1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing => return "Missing";
             when improved_a_lot => return "Improved a lot";
             when improved_a_little => return "Improved a little";
             when made_no_difference => return "Made no difference";
             when made_a_little_worse => return "Made a little worse";
             when made_a_lot_worse => return "Made a lot worse";
             when too_early_to_tell => return "Too early to tell";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Swpop1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Swpop1_Type( i : String ) return Swpop1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return improved_a_lot;
         elsif i = "2" then
            return improved_a_little;
         elsif i = "3" then
            return made_no_difference;
         elsif i = "4" then
            return made_a_little_worse;
         elsif i = "5" then
            return made_a_lot_worse;
         elsif i = "6" then
            return too_early_to_tell;
        end if;
        Put_Line("Convert_Swpop1_Type: Unmatched string |" & i & "|" );
        return Swpop1_Type'First; -- never actually gets here; for compiler only
    end Convert_Swpop1_Type;



    function Pretty_Print( i : Swpop2_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when strengthened => return "Strengthened";
             when weakened => return "Weakened";
             when made_no_difference => return "Made no difference";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Swpop2_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Swpop2_Type( i : String ) return Swpop2_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return strengthened;
         elsif i = "2" then
            return weakened;
         elsif i = "3" then
            return made_no_difference;
        end if;
        Put_Line("Convert_Swpop2_Type: Unmatched string |" & i & "|" );
        return Swpop2_Type'First; -- never actually gets here; for compiler only
    end Convert_Swpop2_Type;



    function Pretty_Print( i : Swpop3_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing => return "Missing";
             when just_about_always => return "Just about always";
             when most_of_the_time => return "Most of the time";
             when only_sometimes => return "Only sometimes";
             when almost_never => return "Almost never";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Swpop3_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Swpop3_Type( i : String ) return Swpop3_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return just_about_always;
         elsif i = "2" then
            return most_of_the_time;
         elsif i = "3" then
            return only_sometimes;
         elsif i = "4" then
            return almost_never;
        end if;
        Put_Line("Convert_Swpop3_Type: Unmatched string |" & i & "|" );
        return Swpop3_Type'First; -- never actually gets here; for compiler only
    end Convert_Swpop3_Type;



    function Pretty_Print( i : Swvt1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when yes => return "Yes";
             when no => return "No";
             when couldnt_vote => return "Couldn't vote";
             when refused_to_disclose => return "Refused to disclose";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Swvt1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Swvt1_Type( i : String ) return Swvt1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
         elsif i = "3" then
            return couldnt_vote;
         elsif i = "9" then
            return refused_to_disclose;
        end if;
        Put_Line("Convert_Swvt1_Type: Unmatched string |" & i & "|" );
        return Swvt1_Type'First; -- never actually gets here; for compiler only
    end Convert_Swvt1_Type;



    function Pretty_Print( i : Swvt2_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when conservative => return "Conservative";
             when labour => return "Labour";
             when lib_dem => return "Lib Dem";
             when scot_nat_snp => return "Scot Nat (SNP)";
             when plaid_cymru => return "Plaid Cymru";
             when green_party => return "Green Party";
             when scottish_socialist_alliance => return "Scottish Socialist Alliance";
             when other_party => return "Other Party";
             when refused_to_disclose => return "Refused to disclose";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Swvt2_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Swvt2_Type( i : String ) return Swvt2_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return conservative;
         elsif i = "2" then
            return labour;
         elsif i = "3" then
            return lib_dem;
         elsif i = "4" then
            return scot_nat_snp;
         elsif i = "5" then
            return plaid_cymru;
         elsif i = "6" then
            return green_party;
         elsif i = "7" then
            return scottish_socialist_alliance;
         elsif i = "8" then
            return other_party;
         elsif i = "9" then
            return refused_to_disclose;
        end if;
        Put_Line("Convert_Swvt2_Type: Unmatched string |" & i & "|" );
        return Swvt2_Type'First; -- never actually gets here; for compiler only
    end Convert_Swvt2_Type;



    function Pretty_Print( i : Telhtq_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when university_first_degree => return "University first degree";
             when gnvq_or_gsvq => return "GNVQ/GSVQ";
             when sce_ordinary_grades => return "SCE Ordinary Grades";
             when standard_grades => return "Standard grades";
             when higher_grade => return "Higher grade";
             when advanced_higher => return "Advanced higher";
             when certificate_of_6th_year_studies => return "Certificate of 6th year studies";
             when slc => return "SLC";
             when other_school_exam => return "Other school exam";
             when youth_training_cert => return "Youth training cert";
             when trade_or_apprenticeship => return "Trade/apprenticeship";
             when university_higher_degree => return "University higher degree";
             when clerical => return "Clerical";
             when city_and_guilds => return "City & Guilds";
             when onc_or_ond_or_btec => return "ONC/OND/BTEC";
             when hnc_or_hnd_or_btec => return "HNC/HND/BTEC";
             when nvq_or_svq_level_1_or_2 => return "NVQ/SVQ - level 1/2";
             when nvq_or_svq_level_3_or_4 => return "NVQ/SVQ - level 3/4";
             when nursing_qualification => return "Nursing qualification";
             when teaching_qualification => return "Teaching qualification";
             when university_diploma => return "University diploma";
             when scottish_national_qualification => return "Scottish national qualification";
             when other_higher_academic_qual => return "Other higher academic qual";
             when other_technical_or_professional => return "Other technical or professional";
             when school_certificate => return "School Certificate";
             when cse => return "CSE";
             when gcse => return "GCSE";
             when o_level => return "O level";
             when higher_school_certificate => return "Higher School Certificate";
             when a_level_or_as_level => return "A level/AS level";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Telhtq_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Telhtq_Type( i : String ) return Telhtq_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return university_first_degree;
         elsif i = "10" then
            return gnvq_or_gsvq;
         elsif i = "11" then
            return sce_ordinary_grades;
         elsif i = "12" then
            return standard_grades;
         elsif i = "13" then
            return higher_grade;
         elsif i = "14" then
            return advanced_higher;
         elsif i = "15" then
            return certificate_of_6th_year_studies;
         elsif i = "16" then
            return slc;
         elsif i = "17" then
            return other_school_exam;
         elsif i = "18" then
            return youth_training_cert;
         elsif i = "19" then
            return trade_or_apprenticeship;
         elsif i = "2" then
            return university_higher_degree;
         elsif i = "20" then
            return clerical;
         elsif i = "21" then
            return city_and_guilds;
         elsif i = "22" then
            return onc_or_ond_or_btec;
         elsif i = "23" then
            return hnc_or_hnd_or_btec;
         elsif i = "24" then
            return nvq_or_svq_level_1_or_2;
         elsif i = "25" then
            return nvq_or_svq_level_3_or_4;
         elsif i = "26" then
            return nursing_qualification;
         elsif i = "27" then
            return teaching_qualification;
         elsif i = "28" then
            return university_diploma;
         elsif i = "29" then
            return scottish_national_qualification;
         elsif i = "3" then
            return other_higher_academic_qual;
         elsif i = "30" then
            return other_technical_or_professional;
         elsif i = "4" then
            return school_certificate;
         elsif i = "5" then
            return cse;
         elsif i = "6" then
            return gcse;
         elsif i = "7" then
            return o_level;
         elsif i = "8" then
            return higher_school_certificate;
         elsif i = "9" then
            return a_level_or_as_level;
        end if;
        Put_Line("Convert_Telhtq_Type: Unmatched string |" & i & "|" );
        return Telhtq_Type'First; -- never actually gets here; for compiler only
    end Convert_Telhtq_Type;



    function Pretty_Print( i : Telwhy_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when too_ill_or_old => return "Too ill/old";
             when other => return "Other";
             when carer_situation_or_family_illness => return "Carer situation/family illness";
             when stressful_family_situation => return "Stressful family situation";
             when refused_full_interview => return "Refused full interview";
             when other_family_member_opposes_survey => return "Other family member opposes survey";
             when too_busy => return "Too busy";
             when care_of_ill_or_old => return "Care of ill /old";
             when stressful_fam_sit => return "Stressful fam sit";
             when refused_full_intv => return "Refused full intv.";
             when hh_memb_says_refuse => return "HH memb says refuse";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Telwhy_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Telwhy_Type( i : String ) return Telwhy_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return too_ill_or_old;
         elsif i = "8" then
            return too_ill_or_old;
         elsif i = "11" then
            return other;
         elsif i = "3" then
            return other;
         elsif i = "12" then
            return carer_situation_or_family_illness;
         elsif i = "13" then
            return stressful_family_situation;
         elsif i = "14" then
            return refused_full_interview;
         elsif i = "15" then
            return other_family_member_opposes_survey;
         elsif i = "2" then
            return too_busy;
         elsif i = "9" then
            return too_busy;
         elsif i = "4" then
            return care_of_ill_or_old;
         elsif i = "5" then
            return stressful_fam_sit;
         elsif i = "6" then
            return refused_full_intv;
         elsif i = "7" then
            return hh_memb_says_refuse;
        end if;
        Put_Line("Convert_Telwhy_Type: Unmatched string |" & i & "|" );
        return Telwhy_Type'First; -- never actually gets here; for compiler only
    end Convert_Telwhy_Type;



    function Pretty_Print( i : Tenure_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when missing => return "Missing";
             when owned_outright => return "Owned Outright";
             when owned_with_mortgage => return "Owned with Mortgage";
             when local_authority_rented => return "Local Authority rented";
             when housing_assoc_rented => return "Housing Assoc. rented";
             when rented_from_employer => return "Rented from Employer";
             when rented_private_unfurnished => return "Rented private unfurnished";
             when rented_private_furnished => return "Rented private furnished";
             when other_rented => return "Other rented";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Tenure_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Tenure_Type( i : String ) return Tenure_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return owned_outright;
         elsif i = "2" then
            return owned_with_mortgage;
         elsif i = "3" then
            return local_authority_rented;
         elsif i = "4" then
            return housing_assoc_rented;
         elsif i = "5" then
            return rented_from_employer;
         elsif i = "6" then
            return rented_private_unfurnished;
         elsif i = "7" then
            return rented_private_furnished;
         elsif i = "8" then
            return other_rented;
        end if;
        Put_Line("Convert_Tenure_Type: Unmatched string |" & i & "|" );
        return Tenure_Type'First; -- never actually gets here; for compiler only
    end Convert_Tenure_Type;



    function Pretty_Print( i : Tlhqly_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when university_first_degree => return "University first degree";
             when other_school_exam => return "Other school exam";
             when youth_training_cert => return "Youth training cert";
             when trade_or_apprenticeship => return "Trade/apprenticeship";
             when clerical => return "Clerical";
             when city_and_guilds => return "City & Guilds";
             when onc_or_ond_or_btec => return "ONC/OND/BTEC";
             when hnc_or_hnd_or_btec => return "HNC/HND/BTEC";
             when nvq_or_svq_level_1_or_2 => return "NVQ/SVQ - level 1/2";
             when nvq_or_svq_level_3_or_4 => return "NVQ/SVQ - level 3/4";
             when scottish_national_qualification => return "Scottish National qualification";
             when university_higher_degree => return "University higher degree";
             when other_technical_or_professional => return "Other technical or professional";
             when other_higher_academic_qual => return "Other higher academic qual";
             when gcse => return "GCSE";
             when a_level_or_as_level => return "A level/AS level";
             when gnvq_or_gsvq => return "GNVQ/GSVQ";
             when standard_grades => return "Standard grades";
             when higher_grade => return "Higher grade";
             when advance_higher => return "Advance Higher";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Tlhqly_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Tlhqly_Type( i : String ) return Tlhqly_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return university_first_degree;
         elsif i = "10" then
            return other_school_exam;
         elsif i = "11" then
            return youth_training_cert;
         elsif i = "12" then
            return trade_or_apprenticeship;
         elsif i = "13" then
            return clerical;
         elsif i = "14" then
            return city_and_guilds;
         elsif i = "15" then
            return onc_or_ond_or_btec;
         elsif i = "16" then
            return hnc_or_hnd_or_btec;
         elsif i = "17" then
            return nvq_or_svq_level_1_or_2;
         elsif i = "18" then
            return nvq_or_svq_level_3_or_4;
         elsif i = "19" then
            return scottish_national_qualification;
         elsif i = "2" then
            return university_higher_degree;
         elsif i = "20" then
            return other_technical_or_professional;
         elsif i = "3" then
            return other_higher_academic_qual;
         elsif i = "4" then
            return gcse;
         elsif i = "5" then
            return a_level_or_as_level;
         elsif i = "6" then
            return gnvq_or_gsvq;
         elsif i = "7" then
            return standard_grades;
         elsif i = "8" then
            return higher_grade;
         elsif i = "9" then
            return advance_higher;
        end if;
        Put_Line("Convert_Tlhqly_Type: Unmatched string |" & i & "|" );
        return Tlhqly_Type'First; -- never actually gets here; for compiler only
    end Convert_Tlhqly_Type;



    function Pretty_Print( i : Troql1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when clerical_commercial => return "Clerical,commercial";
             when nvq_svq_level_4 => return "NVQ,SVQ level 4";
             when university_diploma => return "University diploma";
             when university_degree => return "University degree";
             when univ_higher_degree => return "Univ higher degree";
             when other_qualifications => return "Other qualifications";
             when city_and_guilds_pti => return "City & Guilds Pt.I";
             when city_and_guilds_ptii => return "City & Guilds Pt.II";
             when city_and_guilds_ptiii => return "City & Guilds Pt.III";
             when ond_btec_national => return "OND,BTEC national";
             when hnd_btec_higher => return "HND,BTEC higher";
             when nvq_svq_level_1 => return "NVQ,SVQ level 1";
             when nvq_svq_level_2 => return "NVQ,SVQ level 2";
             when nvq_svq_level_3 => return "NVQ,SVQ level 3";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Troql1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Troql1_Type( i : String ) return Troql1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return clerical_commercial;
         elsif i = "10" then
            return nvq_svq_level_4;
         elsif i = "11" then
            return university_diploma;
         elsif i = "12" then
            return university_degree;
         elsif i = "13" then
            return univ_higher_degree;
         elsif i = "14" then
            return other_qualifications;
         elsif i = "2" then
            return city_and_guilds_pti;
         elsif i = "3" then
            return city_and_guilds_ptii;
         elsif i = "4" then
            return city_and_guilds_ptiii;
         elsif i = "5" then
            return ond_btec_national;
         elsif i = "6" then
            return hnd_btec_higher;
         elsif i = "7" then
            return nvq_svq_level_1;
         elsif i = "8" then
            return nvq_svq_level_2;
         elsif i = "9" then
            return nvq_svq_level_3;
        end if;
        Put_Line("Convert_Troql1_Type: Unmatched string |" & i & "|" );
        return Troql1_Type'First; -- never actually gets here; for compiler only
    end Convert_Troql1_Type;



    function Pretty_Print( i : Troql2_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when clerical_commercial => return "Clerical,commercial";
             when nvq_svq_level_4 => return "NVQ,SVQ level 4";
             when university_diploma => return "University diploma";
             when university_degree => return "University degree";
             when univ_higher_degree => return "Univ higher degree";
             when other_qualifications => return "Other qualifications";
             when city_and_guilds_pti => return "City & Guilds Pt.I";
             when city_and_guilds_ptii => return "City & Guilds Pt.II";
             when city_and_guilds_ptiii => return "City & Guilds Pt.III";
             when ond_btec_national => return "OND,BTEC national";
             when hnd_btec_higher => return "HND,BTEC higher";
             when nvq_svq_level_1 => return "NVQ,SVQ level 1";
             when nvq_svq_level_2 => return "NVQ,SVQ level 2";
             when nvq_svq_level_3 => return "NVQ,SVQ level 3";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Troql2_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Troql2_Type( i : String ) return Troql2_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return clerical_commercial;
         elsif i = "10" then
            return nvq_svq_level_4;
         elsif i = "11" then
            return university_diploma;
         elsif i = "12" then
            return university_degree;
         elsif i = "13" then
            return univ_higher_degree;
         elsif i = "14" then
            return other_qualifications;
         elsif i = "2" then
            return city_and_guilds_pti;
         elsif i = "3" then
            return city_and_guilds_ptii;
         elsif i = "4" then
            return city_and_guilds_ptiii;
         elsif i = "5" then
            return ond_btec_national;
         elsif i = "6" then
            return hnd_btec_higher;
         elsif i = "7" then
            return nvq_svq_level_1;
         elsif i = "8" then
            return nvq_svq_level_2;
         elsif i = "9" then
            return nvq_svq_level_3;
        end if;
        Put_Line("Convert_Troql2_Type: Unmatched string |" & i & "|" );
        return Troql2_Type'First; -- never actually gets here; for compiler only
    end Convert_Troql2_Type;



    function Pretty_Print( i : Trplce1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when current_workplace => return "Current workplace";
             when other => return "Other";
             when former_workplace => return "Former workplace";
             when emps_training_centre => return "Emps training centre";
             when priv_training_centre => return "Priv training centre";
             when job_centre_job_club => return "Job centre,job club";
             when hfe_college => return "HFE college";
             when adult_educ_centre => return "Adult educ centre";
             when university => return "University";
             when at_or_from_own_home => return "At or from own home";
             when other_cannot_determine => return "Other, cannot determine";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Trplce1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Trplce1_Type( i : String ) return Trplce1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return current_workplace;
         elsif i = "10" then
            return other;
         elsif i = "2" then
            return former_workplace;
         elsif i = "3" then
            return emps_training_centre;
         elsif i = "4" then
            return priv_training_centre;
         elsif i = "5" then
            return job_centre_job_club;
         elsif i = "6" then
            return hfe_college;
         elsif i = "7" then
            return adult_educ_centre;
         elsif i = "8" then
            return university;
         elsif i = "9" then
            return at_or_from_own_home;
         elsif i = "96" then
            return other_cannot_determine;
        end if;
        Put_Line("Convert_Trplce1_Type: Unmatched string |" & i & "|" );
        return Trplce1_Type'First; -- never actually gets here; for compiler only
    end Convert_Trplce1_Type;



    function Pretty_Print( i : Trqlac1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when yes => return "Yes";
             when no_not_yet_waiting => return "No,not yet,waiting";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Trqlac1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Trqlac1_Type( i : String ) return Trqlac1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no_not_yet_waiting;
        end if;
        Put_Line("Convert_Trqlac1_Type: Unmatched string |" & i & "|" );
        return Trqlac1_Type'First; -- never actually gets here; for compiler only
    end Convert_Trqlac1_Type;



    function Pretty_Print( i : Trqlxp1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when lead_to_qualif => return "Lead to qualif.";
             when lead_to_part_of_qual => return "Lead to part of qual";
             when not_lead_to_qualif => return "Not lead to qualif.";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Trqlxp1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Trqlxp1_Type( i : String ) return Trqlxp1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return lead_to_qualif;
         elsif i = "2" then
            return lead_to_part_of_qual;
         elsif i = "3" then
            return not_lead_to_qualif;
        end if;
        Put_Line("Convert_Trqlxp1_Type: Unmatched string |" & i & "|" );
        return Trqlxp1_Type'First; -- never actually gets here; for compiler only
    end Convert_Trqlxp1_Type;



    function Pretty_Print( i : Tru1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when hours => return "Hours";
             when days => return "Days";
             when weeks => return "Weeks";
             when months => return "Months";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Tru1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Tru1_Type( i : String ) return Tru1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return hours;
         elsif i = "2" then
            return days;
         elsif i = "3" then
            return weeks;
         elsif i = "4" then
            return months;
         elsif i = "5" then
            return other;
        end if;
        Put_Line("Convert_Tru1_Type: Unmatched string |" & i & "|" );
        return Tru1_Type'First; -- never actually gets here; for compiler only
    end Convert_Tru1_Type;



    function Pretty_Print( i : Trust_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when most_people_can_be_trusted => return "Most people can be trusted";
             when cant_be_too_careful => return "Can't be too careful";
             when other_or_depends => return "Other/depends";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Trust_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Trust_Type( i : String ) return Trust_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return most_people_can_be_trusted;
         elsif i = "2" then
            return cant_be_too_careful;
         elsif i = "3" then
            return other_or_depends;
        end if;
        Put_Line("Convert_Trust_Type: Unmatched string |" & i & "|" );
        return Trust_Type'First; -- never actually gets here; for compiler only
    end Convert_Trust_Type;



    function Pretty_Print( i : Unib_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when russell_group => return "'Russell' group";
             when other_pre_92_university => return "Other pre-92 University";
             when post_1992_university => return "Post 1992 University";
             when other_uk_institution => return "Other UK institution";
             when non_uk_institution => return "Non-UK institution";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Unib_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Unib_Type( i : String ) return Unib_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return russell_group;
         elsif i = "2" then
            return other_pre_92_university;
         elsif i = "3" then
            return post_1992_university;
         elsif i = "4" then
            return other_uk_institution;
         elsif i = "5" then
            return non_uk_institution;
        end if;
        Put_Line("Convert_Unib_Type: Unmatched string |" & i & "|" );
        return Unib_Type'First; -- never actually gets here; for compiler only
    end Convert_Unib_Type;



    function Pretty_Print( i : Vote_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when conservative => return "Conservative";
             when none => return "None";
             when cant_vote => return "Can't vote";
             when ulster_unionist => return "Ulster Unionist";
             when sdlp => return "SDLP";
             when alliance_party => return "Alliance Party";
             when democratic_unionist => return "Democratic Unionist";
             when sinn_fein => return "Sinn Fein";
             when other_ni_party => return "Other NI party";
             when labour => return "Labour";
             when lib_dem_or_lib_or_sdp => return "Lib Dem/Lib/SDP";
             when scot_nat => return "Scot Nat";
             when plaid_cymru => return "Plaid Cymru";
             when green_party => return "Green Party";
             when other_party => return "Other Party";
             when other_answer => return "Other answer";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Vote_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Vote_Type( i : String ) return Vote_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return conservative;
         elsif i = "10" then
            return none;
         elsif i = "11" then
            return cant_vote;
         elsif i = "12" then
            return ulster_unionist;
         elsif i = "13" then
            return sdlp;
         elsif i = "14" then
            return alliance_party;
         elsif i = "15" then
            return democratic_unionist;
         elsif i = "16" then
            return sinn_fein;
         elsif i = "17" then
            return other_ni_party;
         elsif i = "2" then
            return labour;
         elsif i = "3" then
            return lib_dem_or_lib_or_sdp;
         elsif i = "4" then
            return scot_nat;
         elsif i = "5" then
            return plaid_cymru;
         elsif i = "6" then
            return green_party;
         elsif i = "7" then
            return other_party;
         elsif i = "8" then
            return other_answer;
        end if;
        Put_Line("Convert_Vote_Type: Unmatched string |" & i & "|" );
        return Vote_Type'First; -- never actually gets here; for compiler only
    end Convert_Vote_Type;



    function Pretty_Print( i : Vote10a_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when nothing_written_in => return "Nothing written in";
             when lack_of_trust_or_confidence => return "Lack of trust/confidence";
             when dislike_education_policies => return "Dislike education policies";
             when dislike_health_policies => return "Dislike health policies";
             when dislike_housing_policies => return "Dislike housing policies";
             when dislike_european_policies => return "Dislike European policies";
             when dislike_pensions_policies => return "Dislike pensions policies";
             when dislike_economic_policies => return "Dislike economic policies";
             when dislike_other_policies => return "Dislike other policies";
             when depends_on_mainifesto => return "Depends on mainifesto";
             when prefer_policies_of_other_party => return "Prefer policies of other party";
             when will_not_vote => return "Will not vote";
             when dislike_party_leader => return "Dislike party leader";
             when prefer_other_party_leader => return "Prefer other party leader";
             when dislike_local_mp => return "Dislike local MP";
             when no_particular_reason => return "No particular reason";
             when will_vote_tactically => return "Will vote tactically";
             when supported_party_cant_win => return "Supported party can't win";
             when undecided_about_voting => return "Undecided about voting";
             when time_for_a_change => return "Time for a change";
             when other => return "Other";
             when not_eligible_to_vote => return "Not eligible to vote";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Vote10a_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Vote10a_Type( i : String ) return Vote10a_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return nothing_written_in;
         elsif i = "1" then
            return lack_of_trust_or_confidence;
         elsif i = "10" then
            return dislike_education_policies;
         elsif i = "11" then
            return dislike_health_policies;
         elsif i = "12" then
            return dislike_housing_policies;
         elsif i = "13" then
            return dislike_european_policies;
         elsif i = "14" then
            return dislike_pensions_policies;
         elsif i = "15" then
            return dislike_economic_policies;
         elsif i = "16" then
            return dislike_other_policies;
         elsif i = "17" then
            return depends_on_mainifesto;
         elsif i = "18" then
            return prefer_policies_of_other_party;
         elsif i = "2" then
            return will_not_vote;
         elsif i = "20" then
            return dislike_party_leader;
         elsif i = "21" then
            return prefer_other_party_leader;
         elsif i = "22" then
            return dislike_local_mp;
         elsif i = "23" then
            return no_particular_reason;
         elsif i = "3" then
            return will_vote_tactically;
         elsif i = "4" then
            return supported_party_cant_win;
         elsif i = "5" then
            return undecided_about_voting;
         elsif i = "6" then
            return time_for_a_change;
         elsif i = "96" then
            return other;
         elsif i = "97" then
            return not_eligible_to_vote;
        end if;
        Put_Line("Convert_Vote10a_Type: Unmatched string |" & i & "|" );
        return Vote10a_Type'First; -- never actually gets here; for compiler only
    end Convert_Vote10a_Type;



    function Pretty_Print( i : Vote3_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when conservative => return "Conservative";
             when none => return "None";
             when cant_vote => return "Can't vote";
             when ulster_unionist => return "Ulster Unionist";
             when sdlp => return "SDLP";
             when alliance_party => return "Alliance Party";
             when democratic_unionist => return "Democratic Unionist";
             when sinn_fein => return "Sinn Fein";
             when other_ni_party => return "Other NI party";
             when labour => return "Labour";
             when lib_dem_or_lib_or_sdp => return "Lib Dem /Lib/SDP";
             when scot_nat => return "Scot Nat";
             when plaid_cymru => return "Plaid Cymru";
             when green_party => return "Green Party";
             when other_party => return "Other Party";
             when other_answer => return "Other answer";
             when na_ons_sub_sample => return "NA: ONS sub-sample";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Vote3_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Vote3_Type( i : String ) return Vote3_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return conservative;
         elsif i = "10" then
            return none;
         elsif i = "11" then
            return cant_vote;
         elsif i = "12" then
            return ulster_unionist;
         elsif i = "13" then
            return sdlp;
         elsif i = "14" then
            return alliance_party;
         elsif i = "15" then
            return democratic_unionist;
         elsif i = "16" then
            return sinn_fein;
         elsif i = "17" then
            return other_ni_party;
         elsif i = "2" then
            return labour;
         elsif i = "3" then
            return lib_dem_or_lib_or_sdp;
         elsif i = "4" then
            return scot_nat;
         elsif i = "5" then
            return plaid_cymru;
         elsif i = "6" then
            return green_party;
         elsif i = "7" then
            return other_party;
         elsif i = "8" then
            return other_answer;
         elsif i = "97" then
            return na_ons_sub_sample;
        end if;
        Put_Line("Convert_Vote3_Type: Unmatched string |" & i & "|" );
        return Vote3_Type'First; -- never actually gets here; for compiler only
    end Convert_Vote3_Type;



    function Pretty_Print( i : Vote5_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when very_strong => return "Very strong";
             when fairly_strong => return "Fairly strong";
             when not_very_strong => return "Not very strong";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Vote5_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Vote5_Type( i : String ) return Vote5_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return very_strong;
         elsif i = "2" then
            return fairly_strong;
         elsif i = "3" then
            return not_very_strong;
        end if;
        Put_Line("Convert_Vote5_Type: Unmatched string |" & i & "|" );
        return Vote5_Type'First; -- never actually gets here; for compiler only
    end Convert_Vote5_Type;



    function Pretty_Print( i : Vote6_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when very_interested => return "Very interested";
             when fairly_int => return "Fairly int";
             when not_very_int => return "Not very int";
             when not_at_all_int => return "Not at all int";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Vote6_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Vote6_Type( i : String ) return Vote6_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "8" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "9" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return very_interested;
         elsif i = "2" then
            return fairly_int;
         elsif i = "3" then
            return not_very_int;
         elsif i = "4" then
            return not_at_all_int;
        end if;
        Put_Line("Convert_Vote6_Type: Unmatched string |" & i & "|" );
        return Vote6_Type'First; -- never actually gets here; for compiler only
    end Convert_Vote6_Type;



    function Pretty_Print( i : Vote7_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when yes => return "Yes";
             when no => return "No";
             when cant_vote => return "Can't vote";
             when na_ons_sub_sample => return "NA: ONS sub-sample";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Vote7_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Vote7_Type( i : String ) return Vote7_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
         elsif i = "3" then
            return cant_vote;
         elsif i = "7" then
            return na_ons_sub_sample;
        end if;
        Put_Line("Convert_Vote7_Type: Unmatched string |" & i & "|" );
        return Vote7_Type'First; -- never actually gets here; for compiler only
    end Convert_Vote7_Type;



    function Pretty_Print( i : Vote8_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when conservative => return "Conservative";
             when ulster_unionist => return "Ulster Unionist";
             when sdlp => return "SDLP";
             when alliance_party => return "Alliance Party";
             when democratic_unionist => return "Democratic Unionist";
             when sinn_fein => return "Sinn Fein";
             when other_ni_party => return "Other NI party";
             when labour => return "Labour";
             when lib_dem_sld => return "Lib Dem, SLD";
             when scot_nat => return "Scot Nat";
             when plaid_cymru => return "Plaid Cymru";
             when green_party => return "Green Party";
             when other_party => return "Other party";
             when other_answer => return "Other answer";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Vote8_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Vote8_Type( i : String ) return Vote8_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return conservative;
         elsif i = "12" then
            return ulster_unionist;
         elsif i = "13" then
            return sdlp;
         elsif i = "14" then
            return alliance_party;
         elsif i = "15" then
            return democratic_unionist;
         elsif i = "16" then
            return sinn_fein;
         elsif i = "17" then
            return other_ni_party;
         elsif i = "2" then
            return labour;
         elsif i = "3" then
            return lib_dem_sld;
         elsif i = "4" then
            return scot_nat;
         elsif i = "5" then
            return plaid_cymru;
         elsif i = "6" then
            return green_party;
         elsif i = "7" then
            return other_party;
         elsif i = "8" then
            return other_answer;
        end if;
        Put_Line("Convert_Vote8_Type: Unmatched string |" & i & "|" );
        return Vote8_Type'First; -- never actually gets here; for compiler only
    end Convert_Vote8_Type;



    function Pretty_Print( i : Wemwba_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when none_of_the_time => return "None of the time";
             when rarely => return "Rarely";
             when some_of_the_time => return "Some of the time";
             when often => return "Often";
             when all_of_the_time => return "All of the time";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Wemwba_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Wemwba_Type( i : String ) return Wemwba_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return none_of_the_time;
         elsif i = "2" then
            return rarely;
         elsif i = "3" then
            return some_of_the_time;
         elsif i = "4" then
            return often;
         elsif i = "5" then
            return all_of_the_time;
        end if;
        Put_Line("Convert_Wemwba_Type: Unmatched string |" & i & "|" );
        return Wemwba_Type'First; -- never actually gets here; for compiler only
    end Convert_Wemwba_Type;



    function Pretty_Print( i : Whr14_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when natrl_mother_and_father => return "Natrl. Mother & Father";
             when other_relative => return "Other relative";
             when step_parent => return "Step parent";
             when other_non_relative => return "Other non relative";
             when institution => return "Institution";
             when employers_premises => return "Employer's premises";
             when living_independently => return "Living independently";
             when adoptive_m_and_f => return "Adoptive M and F";
             when mother_and_stepfather => return "Mother & stepfather";
             when father_and_stepmother => return "Father & stepmother";
             when mother_no_f_figure => return "Mother, no F figure";
             when father_no_m_figure => return "Father, no M figure";
             when other => return "Other";
             when grand_parents => return "Grand parent(s)";
             when aunt_or_uncle_or_own_sibli => return "Aunt/uncle/own sibli";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Whr14_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Whr14_Type( i : String ) return Whr14_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return natrl_mother_and_father;
         elsif i = "10" then
            return other_relative;
         elsif i = "11" then
            return step_parent;
         elsif i = "12" then
            return other_non_relative;
         elsif i = "13" then
            return institution;
         elsif i = "14" then
            return employers_premises;
         elsif i = "15" then
            return living_independently;
         elsif i = "2" then
            return adoptive_m_and_f;
         elsif i = "3" then
            return mother_and_stepfather;
         elsif i = "4" then
            return father_and_stepmother;
         elsif i = "5" then
            return mother_no_f_figure;
         elsif i = "6" then
            return father_no_m_figure;
         elsif i = "7" then
            return other;
         elsif i = "8" then
            return grand_parents;
         elsif i = "9" then
            return aunt_or_uncle_or_own_sibli;
        end if;
        Put_Line("Convert_Whr14_Type: Unmatched string |" & i & "|" );
        return Whr14_Type'First; -- never actually gets here; for compiler only
    end Convert_Whr14_Type;



    function Pretty_Print( i : Windfa_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when not_mentioned => return "Not mentioned";
             when life_ins_policy => return "Life Ins policy";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Windfa_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Windfa_Type( i : String ) return Windfa_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return life_ins_policy;
        end if;
        Put_Line("Convert_Windfa_Type: Unmatched string |" & i & "|" );
        return Windfa_Type'First; -- never actually gets here; for compiler only
    end Convert_Windfa_Type;



    function Pretty_Print( i : Windfb_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when not_mentioned => return "Not mentioned";
             when pension_payout => return "Pension payout";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Windfb_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Windfb_Type( i : String ) return Windfb_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return pension_payout;
         elsif i = "2" then
            return pension_payout;
        end if;
        Put_Line("Convert_Windfb_Type: Unmatched string |" & i & "|" );
        return Windfb_Type'First; -- never actually gets here; for compiler only
    end Convert_Windfb_Type;



    function Pretty_Print( i : Windfc_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when not_mentioned => return "Not mentioned";
             when accident_claim => return "Accident claim";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Windfc_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Windfc_Type( i : String ) return Windfc_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return accident_claim;
         elsif i = "3" then
            return accident_claim;
        end if;
        Put_Line("Convert_Windfc_Type: Unmatched string |" & i & "|" );
        return Windfc_Type'First; -- never actually gets here; for compiler only
    end Convert_Windfc_Type;



    function Pretty_Print( i : Windfd_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when not_mentioned => return "Not mentioned";
             when redundancy_payment => return "Redundancy payment";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Windfd_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Windfd_Type( i : String ) return Windfd_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return redundancy_payment;
         elsif i = "4" then
            return redundancy_payment;
        end if;
        Put_Line("Convert_Windfd_Type: Unmatched string |" & i & "|" );
        return Windfd_Type'First; -- never actually gets here; for compiler only
    end Convert_Windfd_Type;



    function Pretty_Print( i : Windfe_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when not_mentioned => return "Not mentioned";
             when employment_bonus => return "Employment bonus";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Windfe_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Windfe_Type( i : String ) return Windfe_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return employment_bonus;
         elsif i = "5" then
            return employment_bonus;
        end if;
        Put_Line("Convert_Windfe_Type: Unmatched string |" & i & "|" );
        return Windfe_Type'First; -- never actually gets here; for compiler only
    end Convert_Windfe_Type;



    function Pretty_Print( i : Windff_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when not_mentioned => return "Not mentioned";
             when inheritance => return "Inheritance";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Windff_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Windff_Type( i : String ) return Windff_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return inheritance;
         elsif i = "6" then
            return inheritance;
        end if;
        Put_Line("Convert_Windff_Type: Unmatched string |" & i & "|" );
        return Windff_Type'First; -- never actually gets here; for compiler only
    end Convert_Windff_Type;



    function Pretty_Print( i : Windfg_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when not_mentioned => return "Not mentioned";
             when pools_or_lottery_win => return "Pools/Lottery win";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Windfg_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Windfg_Type( i : String ) return Windfg_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return pools_or_lottery_win;
         elsif i = "7" then
            return pools_or_lottery_win;
        end if;
        Put_Line("Convert_Windfg_Type: Unmatched string |" & i & "|" );
        return Windfg_Type'First; -- never actually gets here; for compiler only
    end Convert_Windfg_Type;



    function Pretty_Print( i : Windfi_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when not_mentioned => return "Not mentioned";
             when building_soc_conv => return "Building Soc conv";
             when employment_bonus => return "Employment bonus";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Windfi_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Windfi_Type( i : String ) return Windfi_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return building_soc_conv;
         elsif i = "5" then
            return employment_bonus;
        end if;
        Put_Line("Convert_Windfi_Type: Unmatched string |" & i & "|" );
        return Windfi_Type'First; -- never actually gets here; for compiler only
    end Convert_Windfi_Type;



    function Pretty_Print( i : Wlshua_Type ) return String is
    begin
         case i is
             when not_answered => return "Not answered";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when only_welsh => return "Only Welsh";
             when mainly_welsh => return "Mainly Welsh";
             when welsh_and_engish_equally => return "Welsh and Engish equally";
             when mainly_english => return "Mainly English";
             when only_english => return "Only English";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Wlshua_Type ) return Boolean is
    begin
         case i is
             when not_answered => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Wlshua_Type( i : String ) return Wlshua_Type is
    begin
         if i = "-1" then
            return not_answered;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return only_welsh;
         elsif i = "2" then
            return mainly_welsh;
         elsif i = "3" then
            return welsh_and_engish_equally;
         elsif i = "4" then
            return mainly_english;
         elsif i = "5" then
            return only_english;
         elsif i = "6" then
            return other;
        end if;
        Put_Line("Convert_Wlshua_Type: Unmatched string |" & i & "|" );
        return Wlshua_Type'First; -- never actually gets here; for compiler only
    end Convert_Wlshua_Type;



    function Pretty_Print( i : Xdt1m_Type ) return String is
    begin
         case i is
             when cant_remember => return "Can't remember";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when january => return "January";
             when october => return "October";
             when november => return "November";
             when december => return "December";
             when winter => return "Winter";
             when spring => return "Spring";
             when summer => return "Summer";
             when autumn => return "Autumn";
             when february => return "February";
             when march => return "March";
             when april => return "April";
             when may => return "May";
             when june => return "June";
             when july => return "July";
             when august => return "August";
             when september => return "September";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Xdt1m_Type ) return Boolean is
    begin
         case i is
             when cant_remember => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Xdt1m_Type( i : String ) return Xdt1m_Type is
    begin
         if i = "-1" then
            return cant_remember;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return january;
         elsif i = "10" then
            return october;
         elsif i = "11" then
            return november;
         elsif i = "12" then
            return december;
         elsif i = "13" then
            return winter;
         elsif i = "14" then
            return spring;
         elsif i = "15" then
            return summer;
         elsif i = "16" then
            return autumn;
         elsif i = "2" then
            return february;
         elsif i = "3" then
            return march;
         elsif i = "4" then
            return april;
         elsif i = "5" then
            return may;
         elsif i = "6" then
            return june;
         elsif i = "7" then
            return july;
         elsif i = "8" then
            return august;
         elsif i = "9" then
            return september;
        end if;
        Put_Line("Convert_Xdt1m_Type: Unmatched string |" & i & "|" );
        return Xdt1m_Type'First; -- never actually gets here; for compiler only
    end Convert_Xdt1m_Type;



    function Pretty_Print( i : Xdt1pl_Type ) return String is
    begin
         case i is
             when cant_remember => return "Can't remember";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when sports_facilities => return "Sports facilities";
             when normal_workplace => return "Normal workplace";
             when home_or_garden => return "Home or garden";
             when school_or_college => return "School or college";
             when in_motor_vehicle => return "In motor vehicle";
             when on_road_or_pavement => return "On road/pavement";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Xdt1pl_Type ) return Boolean is
    begin
         case i is
             when cant_remember => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Xdt1pl_Type( i : String ) return Xdt1pl_Type is
    begin
         if i = "-1" then
            return cant_remember;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return sports_facilities;
         elsif i = "2" then
            return normal_workplace;
         elsif i = "3" then
            return home_or_garden;
         elsif i = "4" then
            return school_or_college;
         elsif i = "5" then
            return in_motor_vehicle;
         elsif i = "6" then
            return on_road_or_pavement;
         elsif i = "7" then
            return other;
        end if;
        Put_Line("Convert_Xdt1pl_Type: Unmatched string |" & i & "|" );
        return Xdt1pl_Type'First; -- never actually gets here; for compiler only
    end Convert_Xdt1pl_Type;



    function Pretty_Print( i : Xdt1y_Type ) return String is
    begin
         case i is
             when cant_remember => return "Can't remember";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when s_1990 => return "1990";
             when s_1991 => return "1991";
             when s_1992 => return "1992";
             when s_1993 => return "1993";
             when s_1994 => return "1994";
             when s_1995 => return "1995";
             when s_1996 => return "1996";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Xdt1y_Type ) return Boolean is
    begin
         case i is
             when cant_remember => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Xdt1y_Type( i : String ) return Xdt1y_Type is
    begin
         if i = "-1" then
            return cant_remember;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "90" then
            return s_1990;
         elsif i = "91" then
            return s_1991;
         elsif i = "92" then
            return s_1992;
         elsif i = "93" then
            return s_1993;
         elsif i = "94" then
            return s_1994;
         elsif i = "95" then
            return s_1995;
         elsif i = "96" then
            return s_1996;
        end if;
        Put_Line("Convert_Xdt1y_Type: Unmatched string |" & i & "|" );
        return Xdt1y_Type'First; -- never actually gets here; for compiler only
    end Convert_Xdt1y_Type;



    function Pretty_Print( i : Xdt2m_Type ) return String is
    begin
         case i is
             when cant_remember => return "Can't remember";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when january => return "January";
             when october => return "October";
             when november => return "November";
             when december => return "December";
             when winter => return "Winter";
             when spring => return "Spring";
             when summer => return "Summer";
             when autumn => return "Autumn";
             when february => return "February";
             when march => return "March";
             when april => return "April";
             when may => return "May";
             when june => return "June";
             when july => return "July";
             when august => return "August";
             when september => return "September";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Xdt2m_Type ) return Boolean is
    begin
         case i is
             when cant_remember => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Xdt2m_Type( i : String ) return Xdt2m_Type is
    begin
         if i = "-1" then
            return cant_remember;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return january;
         elsif i = "10" then
            return october;
         elsif i = "11" then
            return november;
         elsif i = "12" then
            return december;
         elsif i = "13" then
            return winter;
         elsif i = "14" then
            return spring;
         elsif i = "15" then
            return summer;
         elsif i = "16" then
            return autumn;
         elsif i = "2" then
            return february;
         elsif i = "3" then
            return march;
         elsif i = "4" then
            return april;
         elsif i = "5" then
            return may;
         elsif i = "6" then
            return june;
         elsif i = "7" then
            return july;
         elsif i = "8" then
            return august;
         elsif i = "9" then
            return september;
        end if;
        Put_Line("Convert_Xdt2m_Type: Unmatched string |" & i & "|" );
        return Xdt2m_Type'First; -- never actually gets here; for compiler only
    end Convert_Xdt2m_Type;



    function Pretty_Print( i : Xdt2y_Type ) return String is
    begin
         case i is
             when cant_remember => return "Can't remember";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when s_1990 => return "1990";
             when s_1991 => return "1991";
             when s_1992 => return "1992";
             when s_1993 => return "1993";
             when s_1994 => return "1994";
             when s_1995 => return "1995";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Xdt2y_Type ) return Boolean is
    begin
         case i is
             when cant_remember => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Xdt2y_Type( i : String ) return Xdt2y_Type is
    begin
         if i = "-1" then
            return cant_remember;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "90" then
            return s_1990;
         elsif i = "91" then
            return s_1991;
         elsif i = "92" then
            return s_1992;
         elsif i = "93" then
            return s_1993;
         elsif i = "94" then
            return s_1994;
         elsif i = "95" then
            return s_1995;
        end if;
        Put_Line("Convert_Xdt2y_Type: Unmatched string |" & i & "|" );
        return Xdt2y_Type'First; -- never actually gets here; for compiler only
    end Convert_Xdt2y_Type;



    function Pretty_Print( i : Xpbldf_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when yes => return "Yes";
             when no => return "No";
             when all_included_in_rent => return "All included in rent";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Xpbldf_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Xpbldf_Type( i : String ) return Xpbldf_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
         elsif i = "3" then
            return all_included_in_rent;
        end if;
        Put_Line("Convert_Xpbldf_Type: Unmatched string |" & i & "|" );
        return Xpbldf_Type'First; -- never actually gets here; for compiler only
    end Convert_Xpbldf_Type;



    function Pretty_Print( i : Xpchcf_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when child_care_free => return "Child care free";
             when child_care_paid => return "Child care paid";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Xpchcf_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Xpchcf_Type( i : String ) return Xpchcf_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return child_care_free;
         elsif i = "2" then
            return child_care_paid;
        end if;
        Put_Line("Convert_Xpchcf_Type: Unmatched string |" & i & "|" );
        return Xpchcf_Type'First; -- never actually gets here; for compiler only
    end Convert_Xpchcf_Type;



    function Pretty_Print( i : Xpfood_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when under_gbp_10 => return "Under £ 10";
             when gbp120_gbp139 => return "£120-£139";
             when gbp140_gbp159 => return "£140-£159";
             when gbp160_or_over => return "£160 or over";
             when s_997_or_above => return "997 or above";
             when gbp10_gbp19 => return "£10-£19";
             when gbp20_gbp29 => return "£20-£29";
             when gbp30_gbp39 => return "£30-£39";
             when gbp40_gbp49 => return "£40-£49";
             when gbp50_gbp59 => return "£50-£59";
             when gbp60_gbp79 => return "£60-£79";
             when gbp80_gbp99 => return "£80-£99";
             when gbp100_gbp119 => return "£100-£119";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Xpfood_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Xpfood_Type( i : String ) return Xpfood_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return under_gbp_10;
         elsif i = "10" then
            return gbp120_gbp139;
         elsif i = "11" then
            return gbp140_gbp159;
         elsif i = "12" then
            return gbp160_or_over;
         elsif i = "13" then
            return s_997_or_above;
         elsif i = "997" then
            return s_997_or_above;
         elsif i = "2" then
            return gbp10_gbp19;
         elsif i = "3" then
            return gbp20_gbp29;
         elsif i = "4" then
            return gbp30_gbp39;
         elsif i = "5" then
            return gbp40_gbp49;
         elsif i = "6" then
            return gbp50_gbp59;
         elsif i = "7" then
            return gbp60_gbp79;
         elsif i = "8" then
            return gbp80_gbp99;
         elsif i = "9" then
            return gbp100_gbp119;
        end if;
        Put_Line("Convert_Xpfood_Type: Unmatched string |" & i & "|" );
        return Xpfood_Type'First; -- never actually gets here; for compiler only
    end Convert_Xpfood_Type;



    function Pretty_Print( i : Xpgasl_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when s_997_or_above => return "997 or above";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Xpgasl_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Xpgasl_Type( i : String ) return Xpgasl_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "997" then
            return s_997_or_above;
        end if;
        Put_Line("Convert_Xpgasl_Type: Unmatched string |" & i & "|" );
        return Xpgasl_Type'First; -- never actually gets here; for compiler only
    end Convert_Xpgasl_Type;



    function Pretty_Print( i : Xpgaslw_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when s_97_and_above => return "97 and above";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Xpgaslw_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Xpgaslw_Type( i : String ) return Xpgaslw_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "97" then
            return s_97_and_above;
        end if;
        Put_Line("Convert_Xpgaslw_Type: Unmatched string |" & i & "|" );
        return Xpgaslw_Type'First; -- never actually gets here; for compiler only
    end Convert_Xpgaslw_Type;



    function Pretty_Print( i : Xpgasy_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when no_gas => return "No gas";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when nothing_or_included_in_rent => return "Nothing/included in rent";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Xpgasy_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when no_gas => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Xpgasy_Type( i : String ) return Xpgasy_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-3" then
            return no_gas;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return nothing_or_included_in_rent;
        end if;
        Put_Line("Convert_Xpgasy_Type: Unmatched string |" & i & "|" );
        return Xpgasy_Type'First; -- never actually gets here; for compiler only
    end Convert_Xpgasy_Type;



    function Pretty_Print( i : Xphpdf_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when heavy_burden => return "Heavy burden";
             when somewhat_of_burden => return "Somewhat of burden";
             when not_a_problem => return "Not a problem";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Xphpdf_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Xphpdf_Type( i : String ) return Xphpdf_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return heavy_burden;
         elsif i = "2" then
            return somewhat_of_burden;
         elsif i = "3" then
            return not_a_problem;
        end if;
        Put_Line("Convert_Xphpdf_Type: Unmatched string |" & i & "|" );
        return Xphpdf_Type'First; -- never actually gets here; for compiler only
    end Convert_Xphpdf_Type;



    function Pretty_Print( i : Xphsdf_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when yes => return "Yes";
             when no => return "No";
             when s_100pct_rent_rebate => return "100% rent rebate";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Xphsdf_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Xphsdf_Type( i : String ) return Xphsdf_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
         elsif i = "3" then
            return s_100pct_rent_rebate;
        end if;
        Put_Line("Convert_Xphsdf_Type: Unmatched string |" & i & "|" );
        return Xphsdf_Type'First; -- never actually gets here; for compiler only
    end Convert_Xphsdf_Type;



    function Pretty_Print( i : Xpleclw_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when s_97_or_above => return "97 or above";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Xpleclw_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Xpleclw_Type( i : String ) return Xpleclw_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "97" then
            return s_97_or_above;
        end if;
        Put_Line("Convert_Xpleclw_Type: Unmatched string |" & i & "|" );
        return Xpleclw_Type'First; -- never actually gets here; for compiler only
    end Convert_Xpleclw_Type;



    function Pretty_Print( i : Xplecy_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when no_electricity => return "No electricity";
             when elec_or_gas_combined => return "Elec/gas combined";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when nothing_or_included_in_rent => return "Nothing/included in rent";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Xplecy_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when no_electricity => return True;
             when elec_or_gas_combined => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Xplecy_Type( i : String ) return Xplecy_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-3" then
            return no_electricity;
         elsif i = "-4" then
            return elec_or_gas_combined;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return nothing_or_included_in_rent;
        end if;
        Put_Line("Convert_Xplecy_Type: Unmatched string |" & i & "|" );
        return Xplecy_Type'First; -- never actually gets here; for compiler only
    end Convert_Xplecy_Type;



    function Pretty_Print( i : Xpleis_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when nothing => return "Nothing";
             when under_10 => return "Under 10";
             when s_120_139 => return "120 - 139";
             when s_140_159 => return "140 - 159";
             when s_160_or_over => return "160 or over";
             when s_10_19 => return "10 - 19";
             when s_20_29 => return "20 - 29";
             when s_30_39 => return "30 - 39";
             when s_40_49 => return "40 - 49";
             when s_50_59 => return "50 - 59";
             when s_60_79 => return "60 - 79";
             when s_80_99 => return "80 - 99";
             when s_100_119 => return "100 - 119";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Xpleis_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Xpleis_Type( i : String ) return Xpleis_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return nothing;
         elsif i = "1" then
            return under_10;
         elsif i = "10" then
            return s_120_139;
         elsif i = "11" then
            return s_140_159;
         elsif i = "12" then
            return s_160_or_over;
         elsif i = "2" then
            return s_10_19;
         elsif i = "3" then
            return s_20_29;
         elsif i = "4" then
            return s_30_39;
         elsif i = "5" then
            return s_40_49;
         elsif i = "6" then
            return s_50_59;
         elsif i = "7" then
            return s_60_79;
         elsif i = "8" then
            return s_80_99;
         elsif i = "9" then
            return s_100_119;
        end if;
        Put_Line("Convert_Xpleis_Type: Unmatched string |" & i & "|" );
        return Xpleis_Type'First; -- never actually gets here; for compiler only
    end Convert_Xpleis_Type;



    function Pretty_Print( i : Xpoily_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when no_oil => return "No oil";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when nothing_or_included_in_rent => return "Nothing/included in rent";
             when s_9997_and_above => return "9997 and above";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Xpoily_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when no_oil => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Xpoily_Type( i : String ) return Xpoily_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-3" then
            return no_oil;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return nothing_or_included_in_rent;
         elsif i = "9997" then
            return s_9997_and_above;
        end if;
        Put_Line("Convert_Xpoily_Type: Unmatched string |" & i & "|" );
        return Xpoily_Type'First; -- never actually gets here; for compiler only
    end Convert_Xpoily_Type;



    function Pretty_Print( i : Xpself_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when s_997_or_above => return "997 or above";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Xpself_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Xpself_Type( i : String ) return Xpself_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "997" then
            return s_997_or_above;
        end if;
        Put_Line("Convert_Xpself_Type: Unmatched string |" & i & "|" );
        return Xpself_Type'First; -- never actually gets here; for compiler only
    end Convert_Xpself_Type;



    function Pretty_Print( i : Xpsfly_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when no_solid_fuel_or_other => return "No solid fuel/other";
             when proxy_and_or_phone => return "Proxy and or phone";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when nothing_or_included_in_rent => return "Nothing/included in rent";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Xpsfly_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when no_solid_fuel_or_other => return True;
             when proxy_and_or_phone => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Xpsfly_Type( i : String ) return Xpsfly_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-3" then
            return no_solid_fuel_or_other;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return nothing_or_included_in_rent;
        end if;
        Put_Line("Convert_Xpsfly_Type: Unmatched string |" & i & "|" );
        return Xpsfly_Type'First; -- never actually gets here; for compiler only
    end Convert_Xpsfly_Type;



    function Pretty_Print( i : Xsupa_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when yes => return "Yes";
             when no => return "No";
             when not_sure => return "Not sure";
             when doesnt_apply_to_me => return "Doesn't apply to me";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Xsupa_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Xsupa_Type( i : String ) return Xsupa_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
         elsif i = "3" then
            return not_sure;
         elsif i = "4" then
            return doesnt_apply_to_me;
        end if;
        Put_Line("Convert_Xsupa_Type: Unmatched string |" & i & "|" );
        return Xsupa_Type'First; -- never actually gets here; for compiler only
    end Convert_Xsupa_Type;



    function Pretty_Print( i : Ynbuks_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ynbuks_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ynbuks_Type( i : String ) return Ynbuks_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
        end if;
        Put_Line("Convert_Ynbuks_Type: Unmatched string |" & i & "|" );
        return Ynbuks_Type'First; -- never actually gets here; for compiler only
    end Convert_Ynbuks_Type;



    function Pretty_Print( i : Ynlp14_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing => return "Missing";
             when parents_nr_married => return "Parents n'r married";
             when one_or_both_paren_died => return "One/both paren died";
             when parents_sepa_or_divorce => return "Parents sepa/divorce";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ynlp14_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ynlp14_Type( i : String ) return Ynlp14_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return parents_nr_married;
         elsif i = "2" then
            return one_or_both_paren_died;
         elsif i = "3" then
            return parents_sepa_or_divorce;
         elsif i = "4" then
            return other;
        end if;
        Put_Line("Convert_Ynlp14_Type: Unmatched string |" & i & "|" );
        return Ynlp14_Type'First; -- never actually gets here; for compiler only
    end Convert_Ynlp14_Type;



    function Pretty_Print( i : Ynopen1_Type ) return String is
    begin
         case i is
             when refused_not_available => return "Refused Not available";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when exp_unafford_too_young => return "Exp unafford: Too young";
             when exp_unafford_other_business => return "Exp unafford: Other Business";
             when exp_unafford_other_school_fees => return "Exp unafford: Other School fees";
             when exp_unafford_other_family_or_household => return "Exp unafford: Other Family/Household";
             when exp_unafford_rather_spend_money_on_self => return "Exp unafford: Rather spend money on self";
             when exp_unafford_low_or_no_income_or_no_money => return "Exp unafford: Low/No income/No money";
             when exp_unafford_cannot_afford => return "Exp unafford: Cannot afford";
             when exp_unafford_student_or_ft_schooling => return "Exp unafford: Student/FT schooling";
             when exp_dk_too_young => return "Exp dk: Too young";
             when exp_dk_student_or_ft_schooling => return "Exp dk: Student/FT schooling";
             when exp_dk_unemployed => return "Exp dk: Unemployed";
             when exp_dk_havent_worked_long_enough => return "Exp dk: Haven't worked long enough";
             when exp_dk_other_employment_reason => return "Exp dk: Other employment reason";
             when exp_dk_long_way_off => return "Exp dk: Long way off";
             when exp_dk_too_old => return "Exp dk: Too old";
             when exp_dk_on_benefits => return "Exp dk: On benefits";
             when exp_dk_disability_or_health_cond => return "Exp dk: Disability/health cond";
             when exp_unafford_unemployed_not_working => return "Exp unafford: Unemployed Not working";
             when exp_dk_other_exp_business => return "Exp dk: Other exp: Business";
             when exp_dk_other_exp_school_fees_exp => return "Exp dk: Other exp: School fees (exp)";
             when exp_dk_other_exp_family_or_household => return "Exp dk: Other exp: Family/Household";
             when exp_dk_rather_spend_money_on_self => return "Exp dk: Rather spend money on self";
             when exp_dk_low_or_no_income_or_no_spare_money => return "Exp dk: Low/No income/No spare money";
             when exp_dk_spouse_or_partner_handles_finances => return "Exp dk: Spouse/Partner handles finances";
             when dont_know_never_thought_of_it => return "Don't know, Never thought of it";
             when exp_unafford_havent_worked_long_enough => return "Exp unafford: Haven't worked long enough";
             when lack_of_knowledge => return "Lack of knowledge";
             when exp_unafford_other_employment_reason => return "Exp unafford: Other employment reason";
             when r_doesnt_trust_them => return "R doesn't trust them";
             when r_doesnt_believe_in_them => return "R doesn't believe in them";
             when r_thinks_they_are_not_worth_it => return "R thinks they are not worth it";
             when savings_pension_schemes_have_probs => return "Savings, pension schemes have probs";
             when exp_unafford_retired_already => return "Exp unafford: Retired already";
             when already_invested_in_property => return "Already invested in property";
             when expects_to_live_on_state_benefits => return "Expects to live on state benefits";
             when live_for_today_or_live_for_the_present => return "Live for Today/Live for the present";
             when other_preparations_for_retirement => return "Other preparations for retirement";
             when exp_unafford_too_old => return "Exp unafford: Too old";
             when wont_live_that_long => return "Wont live that long";
             when intend_to => return "Intend to";
             when cannot_be_bothered => return "Cannot be bothered";
             when exp_unafford_on_benefits => return "Exp unafford: On benefits";
             when not_exp_too_young => return "Not exp: Too young";
             when not_exp_student_or_ft_schooling => return "Not exp: Student/FT schooling";
             when not_exp_unemployed_or_not_employed => return "Not exp: Unemployed/Not employed";
             when not_exp_havent_worked_long_enough => return "Not exp: Haven't worked long enough";
             when not_exp_other_employment_reason => return "Not exp: Other employment reason";
             when not_exp_long_way_off => return "Not exp: Long way off";
             when not_exp_too_old => return "Not exp: Too old";
             when not_exp_on_benefits => return "Not exp: On benefits";
             when not_exp_disability_or_health_conditions => return "Not exp: Disability/health conditions";
             when exp_unafford_disability_or_health_cond => return "Exp unafford: Disability/health cond";
             when not_exp_other_exp_business => return "Not exp: Other exp: Business";
             when not_exp_other_exp_school_fees_exp => return "Not exp: Other exp: School fees (exp)";
             when not_exp_other_exp_family_or_household => return "Not exp: Other exp: Family/Household";
             when not_exp_rather_spend_money_on_self => return "Not exp: Rather spend money on self";
             when not_exp_spouse_or_partner_handle_finances => return "Not exp: Spouse/Partner handle finances";
             when not_exp_no_employer_scheme => return "Not exp: No employer scheme";
             when not_exp_other_reasons => return "Not exp: Other reasons";
             when no_reason_given_at_all => return "No reason given at all";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ynopen1_Type ) return Boolean is
    begin
         case i is
             when refused_not_available => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ynopen1_Type( i : String ) return Ynopen1_Type is
    begin
         if i = "-2" then
            return refused_not_available;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return exp_unafford_too_young;
         elsif i = "10" then
            return exp_unafford_other_business;
         elsif i = "11" then
            return exp_unafford_other_school_fees;
         elsif i = "12" then
            return exp_unafford_other_family_or_household;
         elsif i = "13" then
            return exp_unafford_rather_spend_money_on_self;
         elsif i = "14" then
            return exp_unafford_low_or_no_income_or_no_money;
         elsif i = "15" then
            return exp_unafford_cannot_afford;
         elsif i = "2" then
            return exp_unafford_student_or_ft_schooling;
         elsif i = "21" then
            return exp_dk_too_young;
         elsif i = "22" then
            return exp_dk_student_or_ft_schooling;
         elsif i = "23" then
            return exp_dk_unemployed;
         elsif i = "24" then
            return exp_dk_havent_worked_long_enough;
         elsif i = "25" then
            return exp_dk_other_employment_reason;
         elsif i = "26" then
            return exp_dk_long_way_off;
         elsif i = "27" then
            return exp_dk_too_old;
         elsif i = "28" then
            return exp_dk_on_benefits;
         elsif i = "29" then
            return exp_dk_disability_or_health_cond;
         elsif i = "3" then
            return exp_unafford_unemployed_not_working;
         elsif i = "30" then
            return exp_dk_other_exp_business;
         elsif i = "31" then
            return exp_dk_other_exp_school_fees_exp;
         elsif i = "32" then
            return exp_dk_other_exp_family_or_household;
         elsif i = "33" then
            return exp_dk_rather_spend_money_on_self;
         elsif i = "34" then
            return exp_dk_low_or_no_income_or_no_spare_money;
         elsif i = "35" then
            return exp_dk_spouse_or_partner_handles_finances;
         elsif i = "36" then
            return dont_know_never_thought_of_it;
         elsif i = "4" then
            return exp_unafford_havent_worked_long_enough;
         elsif i = "41" then
            return lack_of_knowledge;
         elsif i = "5" then
            return exp_unafford_other_employment_reason;
         elsif i = "51" then
            return r_doesnt_trust_them;
         elsif i = "52" then
            return r_doesnt_believe_in_them;
         elsif i = "53" then
            return r_thinks_they_are_not_worth_it;
         elsif i = "54" then
            return savings_pension_schemes_have_probs;
         elsif i = "6" then
            return exp_unafford_retired_already;
         elsif i = "61" then
            return already_invested_in_property;
         elsif i = "62" then
            return expects_to_live_on_state_benefits;
         elsif i = "63" then
            return live_for_today_or_live_for_the_present;
         elsif i = "64" then
            return other_preparations_for_retirement;
         elsif i = "7" then
            return exp_unafford_too_old;
         elsif i = "71" then
            return wont_live_that_long;
         elsif i = "72" then
            return intend_to;
         elsif i = "73" then
            return cannot_be_bothered;
         elsif i = "8" then
            return exp_unafford_on_benefits;
         elsif i = "81" then
            return not_exp_too_young;
         elsif i = "82" then
            return not_exp_student_or_ft_schooling;
         elsif i = "83" then
            return not_exp_unemployed_or_not_employed;
         elsif i = "84" then
            return not_exp_havent_worked_long_enough;
         elsif i = "85" then
            return not_exp_other_employment_reason;
         elsif i = "86" then
            return not_exp_long_way_off;
         elsif i = "87" then
            return not_exp_too_old;
         elsif i = "88" then
            return not_exp_on_benefits;
         elsif i = "89" then
            return not_exp_disability_or_health_conditions;
         elsif i = "9" then
            return exp_unafford_disability_or_health_cond;
         elsif i = "90" then
            return not_exp_other_exp_business;
         elsif i = "91" then
            return not_exp_other_exp_school_fees_exp;
         elsif i = "92" then
            return not_exp_other_exp_family_or_household;
         elsif i = "93" then
            return not_exp_rather_spend_money_on_self;
         elsif i = "94" then
            return not_exp_spouse_or_partner_handle_finances;
         elsif i = "95" then
            return not_exp_no_employer_scheme;
         elsif i = "96" then
            return not_exp_other_reasons;
         elsif i = "97" then
            return no_reason_given_at_all;
        end if;
        Put_Line("Convert_Ynopen1_Type: Unmatched string |" & i & "|" );
        return Ynopen1_Type'First; -- never actually gets here; for compiler only
    end Convert_Ynopen1_Type;



    function Pretty_Print( i : Ynopen2_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not Mentioned";
             when exp_unafford_too_young => return "Exp unafford: Too young";
             when exp_unafford_other_business => return "Exp unafford: Other Business";
             when exp_unafford_other_school_fees => return "Exp unafford: Other School fees";
             when exp_unafford_other_family_or_household => return "Exp unafford: Other Family/Household";
             when exp_unafford_rather_spend_money_on_self => return "Exp unafford: Rather spend money on self";
             when exp_unafford_low_or_no_income_or_no_money => return "Exp unafford: Low/No income/No money";
             when exp_unafford_cannot_afford => return "Exp unafford: Cannot afford";
             when exp_unafford_student_or_ft_schooling => return "Exp unafford: Student/FT schooling";
             when exp_dk_too_young => return "Exp dk: Too young";
             when exp_dk_student_or_ft_schooling => return "Exp dk: Student/FT schooling";
             when exp_dk_unemployed => return "Exp dk: Unemployed";
             when exp_dk_havent_worked_long_enough => return "Exp dk: Haven't worked long enough";
             when exp_dk_other_employment_reason => return "Exp dk: Other employment reason";
             when exp_dk_long_way_off => return "Exp dk: Long way off";
             when exp_dk_too_old => return "Exp dk: Too old";
             when exp_dk_on_benefits => return "Exp dk: On benefits";
             when exp_dk_disability_or_health_cond => return "Exp dk: Disability/health cond";
             when exp_unafford_unemployed_not_working => return "Exp unafford: Unemployed Not working";
             when exp_dk_other_exp_business => return "Exp dk: Other exp: Business";
             when exp_dk_other_exp_school_fees_exp => return "Exp dk: Other exp: School fees (exp)";
             when exp_dk_other_exp_family_or_household => return "Exp dk: Other exp: Family/Household";
             when exp_dk_rather_spend_money_on_self => return "Exp dk: Rather spend money on self";
             when exp_dk_low_or_no_income_or_no_spare_money => return "Exp dk: Low/No income/No spare money";
             when exp_dk_spouse_or_partner_handles_finances => return "Exp dk: Spouse/Partner handles finances";
             when dont_know_never_thought_of_it => return "Don't know, Never thought of it";
             when exp_unafford_havent_worked_long_enough => return "Exp unafford: Haven't worked long enough";
             when lack_of_knowledge => return "Lack of knowledge";
             when exp_unafford_other_employment_reason => return "Exp unafford: Other employment reason";
             when r_doesnt_trust_them => return "R doesn't trust them";
             when r_doesnt_believe_in_them => return "R doesn't believe in them";
             when r_thinks_they_are_not_worth_it => return "R thinks they are not worth it";
             when savings_pension_schemes_have_probs => return "Savings, pension schemes have probs";
             when exp_unafford_retired_already => return "Exp unafford: Retired already";
             when already_invested_in_property => return "Already invested in property";
             when expects_to_live_on_state_benefits => return "Expects to live on state benefits";
             when live_for_today_or_live_for_the_present => return "Live for Today/Live for the present";
             when other_preparations_for_retirement => return "Other preparations for retirement";
             when exp_unafford_too_old => return "Exp unafford: Too old";
             when wont_live_that_long => return "Wont live that long";
             when intend_to => return "Intend to";
             when cannot_be_bothered => return "Cannot be bothered";
             when exp_unafford_on_benefits => return "Exp unafford: On benefits";
             when not_exp_too_young => return "Not exp: Too young";
             when not_exp_student_or_ft_schooling => return "Not exp: Student/FT schooling";
             when not_exp_unemployed_or_not_employed => return "Not exp: Unemployed/Not employed";
             when not_exp_havent_worked_long_enough => return "Not exp: Haven't worked long enough";
             when not_exp_other_employment_reason => return "Not exp: Other employment reason";
             when not_exp_long_way_off => return "Not exp: Long way off";
             when not_exp_too_old => return "Not exp: Too old";
             when not_exp_on_benefits => return "Not exp: On benefits";
             when not_exp_disability_or_health_conditions => return "Not exp: Disability/health conditions";
             when exp_unafford_disability_or_health_cond => return "Exp unafford: Disability/health cond";
             when not_exp_other_exp_business => return "Not exp: Other exp: Business";
             when not_exp_other_exp_school_fees_exp => return "Not exp: Other exp: School fees (exp)";
             when not_exp_other_exp_family_or_household => return "Not exp: Other exp: Family/Household";
             when not_exp_rather_spend_money_on_self => return "Not exp: Rather spend money on self";
             when not_exp_spouse_or_partner_handle_finances => return "Not exp: Spouse/Partner handle finances";
             when not_exp_no_employer_scheme => return "Not exp: No employer scheme";
             when not_exp_other_reasons => return "Not exp: Other reasons";
             when no_reason_given_at_all => return "No reason given at all";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ynopen2_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ynopen2_Type( i : String ) return Ynopen2_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return exp_unafford_too_young;
         elsif i = "10" then
            return exp_unafford_other_business;
         elsif i = "11" then
            return exp_unafford_other_school_fees;
         elsif i = "12" then
            return exp_unafford_other_family_or_household;
         elsif i = "13" then
            return exp_unafford_rather_spend_money_on_self;
         elsif i = "14" then
            return exp_unafford_low_or_no_income_or_no_money;
         elsif i = "15" then
            return exp_unafford_cannot_afford;
         elsif i = "2" then
            return exp_unafford_student_or_ft_schooling;
         elsif i = "21" then
            return exp_dk_too_young;
         elsif i = "22" then
            return exp_dk_student_or_ft_schooling;
         elsif i = "23" then
            return exp_dk_unemployed;
         elsif i = "24" then
            return exp_dk_havent_worked_long_enough;
         elsif i = "25" then
            return exp_dk_other_employment_reason;
         elsif i = "26" then
            return exp_dk_long_way_off;
         elsif i = "27" then
            return exp_dk_too_old;
         elsif i = "28" then
            return exp_dk_on_benefits;
         elsif i = "29" then
            return exp_dk_disability_or_health_cond;
         elsif i = "3" then
            return exp_unafford_unemployed_not_working;
         elsif i = "30" then
            return exp_dk_other_exp_business;
         elsif i = "31" then
            return exp_dk_other_exp_school_fees_exp;
         elsif i = "32" then
            return exp_dk_other_exp_family_or_household;
         elsif i = "33" then
            return exp_dk_rather_spend_money_on_self;
         elsif i = "34" then
            return exp_dk_low_or_no_income_or_no_spare_money;
         elsif i = "35" then
            return exp_dk_spouse_or_partner_handles_finances;
         elsif i = "36" then
            return dont_know_never_thought_of_it;
         elsif i = "4" then
            return exp_unafford_havent_worked_long_enough;
         elsif i = "41" then
            return lack_of_knowledge;
         elsif i = "5" then
            return exp_unafford_other_employment_reason;
         elsif i = "51" then
            return r_doesnt_trust_them;
         elsif i = "52" then
            return r_doesnt_believe_in_them;
         elsif i = "53" then
            return r_thinks_they_are_not_worth_it;
         elsif i = "54" then
            return savings_pension_schemes_have_probs;
         elsif i = "6" then
            return exp_unafford_retired_already;
         elsif i = "61" then
            return already_invested_in_property;
         elsif i = "62" then
            return expects_to_live_on_state_benefits;
         elsif i = "63" then
            return live_for_today_or_live_for_the_present;
         elsif i = "64" then
            return other_preparations_for_retirement;
         elsif i = "7" then
            return exp_unafford_too_old;
         elsif i = "71" then
            return wont_live_that_long;
         elsif i = "72" then
            return intend_to;
         elsif i = "73" then
            return cannot_be_bothered;
         elsif i = "8" then
            return exp_unafford_on_benefits;
         elsif i = "81" then
            return not_exp_too_young;
         elsif i = "82" then
            return not_exp_student_or_ft_schooling;
         elsif i = "83" then
            return not_exp_unemployed_or_not_employed;
         elsif i = "84" then
            return not_exp_havent_worked_long_enough;
         elsif i = "85" then
            return not_exp_other_employment_reason;
         elsif i = "86" then
            return not_exp_long_way_off;
         elsif i = "87" then
            return not_exp_too_old;
         elsif i = "88" then
            return not_exp_on_benefits;
         elsif i = "89" then
            return not_exp_disability_or_health_conditions;
         elsif i = "9" then
            return exp_unafford_disability_or_health_cond;
         elsif i = "90" then
            return not_exp_other_exp_business;
         elsif i = "91" then
            return not_exp_other_exp_school_fees_exp;
         elsif i = "92" then
            return not_exp_other_exp_family_or_household;
         elsif i = "93" then
            return not_exp_rather_spend_money_on_self;
         elsif i = "94" then
            return not_exp_spouse_or_partner_handle_finances;
         elsif i = "95" then
            return not_exp_no_employer_scheme;
         elsif i = "96" then
            return not_exp_other_reasons;
         elsif i = "97" then
            return no_reason_given_at_all;
        end if;
        Put_Line("Convert_Ynopen2_Type: Unmatched string |" & i & "|" );
        return Ynopen2_Type'First; -- never actually gets here; for compiler only
    end Convert_Ynopen2_Type;



    function Pretty_Print( i : Yosm_Type ) return String is
    begin
         case i is
             when not_osm => return "Not OSM";
             when enumerated_at_wave_1 => return "Enumerated at Wave 1";
             when new_child_of_osm => return "New child of OSM";
             when wave_1_non_cont_enum => return "Wave 1 non-cont,enum";
             when echp_psm_at_wave_7 => return "ECHP PSM at Wave 7";
             when echp_psm_rejoiner => return "ECHP PSM rejoiner";
             when new_sample_mem_post_w1 => return "New sample mem post W1";
             when post_w1_ns_non_con_enum => return "Post W1 NS non-con,enum";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Yosm_Type ) return Boolean is
    begin
         case i is
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Yosm_Type( i : String ) return Yosm_Type is
    begin
         if i = "0" then
            return not_osm;
         elsif i = "1" then
            return enumerated_at_wave_1;
         elsif i = "10" then
            return new_child_of_osm;
         elsif i = "2" then
            return wave_1_non_cont_enum;
         elsif i = "3" then
            return echp_psm_at_wave_7;
         elsif i = "4" then
            return echp_psm_rejoiner;
         elsif i = "5" then
            return new_sample_mem_post_w1;
         elsif i = "6" then
            return post_w1_ns_non_con_enum;
        end if;
        Put_Line("Convert_Yosm_Type: Unmatched string |" & i & "|" );
        return Yosm_Type'First; -- never actually gets here; for compiler only
    end Convert_Yosm_Type;



    function Pretty_Print( i : Yp2uni_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when yes => return "Yes";
             when no => return "No";
             when not_sure_yet => return "Not sure yet";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Yp2uni_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Yp2uni_Type( i : String ) return Yp2uni_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
         elsif i = "3" then
            return not_sure_yet;
        end if;
        Put_Line("Convert_Yp2uni_Type: Unmatched string |" & i & "|" );
        return Yp2uni_Type'First; -- never actually gets here; for compiler only
    end Convert_Yp2uni_Type;



    function Pretty_Print( i : Ypacta_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when at_least_once_or_week => return "At least once/week";
             when at_least_once_or_month => return "At least once/month";
             when several_times_or_year => return "Several times/year";
             when once_or_year_or_less => return "Once/year or less";
             when never_or_almost_never => return "Never/almost never";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypacta_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypacta_Type( i : String ) return Ypacta_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return at_least_once_or_week;
         elsif i = "2" then
            return at_least_once_or_month;
         elsif i = "3" then
            return several_times_or_year;
         elsif i = "4" then
            return once_or_year_or_less;
         elsif i = "5" then
            return never_or_almost_never;
        end if;
        Put_Line("Convert_Ypacta_Type: Unmatched string |" & i & "|" );
        return Ypacta_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypacta_Type;



    function Pretty_Print( i : Ypamar_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when will_never_marry => return "Will never marry";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypamar_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypamar_Type( i : String ) return Ypamar_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return will_never_marry;
        end if;
        Put_Line("Convert_Ypamar_Type: Unmatched string |" & i & "|" );
        return Ypamar_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypamar_Type;



    function Pretty_Print( i : Ypapar_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when dont_want_children => return "Don't want children";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypapar_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypapar_Type( i : String ) return Ypapar_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return dont_want_children;
        end if;
        Put_Line("Convert_Ypapar_Type: Unmatched string |" & i & "|" );
        return Ypapar_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypapar_Type;



    function Pretty_Print( i : Ypargf_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when most_days => return "Most days";
             when more_than_once_a_wk => return "More than once a wk.";
             when less_than_once_a_wk => return "Less than once a wk.";
             when hardly_ever => return "Hardly ever";
             when dont_have_a_father => return "Don't have a father";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypargf_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypargf_Type( i : String ) return Ypargf_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return most_days;
         elsif i = "2" then
            return more_than_once_a_wk;
         elsif i = "3" then
            return less_than_once_a_wk;
         elsif i = "4" then
            return hardly_ever;
         elsif i = "5" then
            return dont_have_a_father;
        end if;
        Put_Line("Convert_Ypargf_Type: Unmatched string |" & i & "|" );
        return Ypargf_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypargf_Type;



    function Pretty_Print( i : Ypargm_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when most_days => return "Most days";
             when more_than_once_a_wk => return "More than once a wk.";
             when less_than_once_a_wk => return "Less than once a wk.";
             when hardly_ever => return "Hardly ever";
             when dont_have_a_mother => return "Don't have a mother";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypargm_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypargm_Type( i : String ) return Ypargm_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return most_days;
         elsif i = "2" then
            return more_than_once_a_wk;
         elsif i = "3" then
            return less_than_once_a_wk;
         elsif i = "4" then
            return hardly_ever;
         elsif i = "5" then
            return dont_have_a_mother;
        end if;
        Put_Line("Convert_Ypargm_Type: Unmatched string |" & i & "|" );
        return Ypargm_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypargm_Type;



    function Pretty_Print( i : Ypasmk_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when missing_or_wild => return "Missing or wild";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypasmk_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypasmk_Type( i : String ) return Ypasmk_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-9" then
            return missing_or_wild;
        end if;
        Put_Line("Convert_Ypasmk_Type: Unmatched string |" & i & "|" );
        return Ypasmk_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypasmk_Type;



    function Pretty_Print( i : Ypbeau_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when yes => return "Yes";
             when no => return "No";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypbeau_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypbeau_Type( i : String ) return Ypbeau_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
        end if;
        Put_Line("Convert_Ypbeau_Type: Unmatched string |" & i & "|" );
        return Ypbeau_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypbeau_Type;



    function Pretty_Print( i : Ypbored_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when very_often => return "Very often";
             when quite_often => return "Quite often";
             when occasionally => return "Occasionally";
             when hardly_ever => return "Hardly ever";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypbored_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypbored_Type( i : String ) return Ypbored_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return very_often;
         elsif i = "2" then
            return quite_often;
         elsif i = "3" then
            return occasionally;
         elsif i = "4" then
            return hardly_ever;
        end if;
        Put_Line("Convert_Ypbored_Type: Unmatched string |" & i & "|" );
        return Ypbored_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypbored_Type;



    function Pretty_Print( i : Ypbull_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when a_lot => return "A lot";
             when a_bit => return "A bit";
             when not_at_all => return "Not at all";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypbull_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypbull_Type( i : String ) return Ypbull_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return a_lot;
         elsif i = "2" then
            return a_bit;
         elsif i = "3" then
            return not_at_all;
        end if;
        Put_Line("Convert_Ypbull_Type: Unmatched string |" & i & "|" );
        return Ypbull_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypbull_Type;



    function Pretty_Print( i : Ypbunk_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when extremely_serious => return "Extremely serious";
             when very_serious => return "Very serious";
             when fairly_serious => return "Fairly serious";
             when not_very_serious => return "Not very serious";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypbunk_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypbunk_Type( i : String ) return Ypbunk_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return extremely_serious;
         elsif i = "2" then
            return very_serious;
         elsif i = "3" then
            return fairly_serious;
         elsif i = "4" then
            return not_very_serious;
        end if;
        Put_Line("Convert_Ypbunk_Type: Unmatched string |" & i & "|" );
        return Ypbunk_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypbunk_Type;



    function Pretty_Print( i : Ypchor_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when dont_do_or_less_1_hr => return "Don't do/less 1 hr";
             when s_1_3_hours => return "1-3 hours";
             when s_4_6_hours => return "4-6 hours";
             when s_7_or_more_hours => return "7 or more hours";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypchor_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypchor_Type( i : String ) return Ypchor_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return dont_do_or_less_1_hr;
         elsif i = "2" then
            return s_1_3_hours;
         elsif i = "3" then
            return s_4_6_hours;
         elsif i = "4" then
            return s_7_or_more_hours;
        end if;
        Put_Line("Convert_Ypchor_Type: Unmatched string |" & i & "|" );
        return Ypchor_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypchor_Type;



    function Pretty_Print( i : Ypcoma_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when afraid => return "afraid";
             when words => return "words";
             when large => return "large";
             when animal => return "animal";
             when x_separate => return "separate";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypcoma_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypcoma_Type( i : String ) return Ypcoma_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return afraid;
         elsif i = "2" then
            return words;
         elsif i = "3" then
            return large;
         elsif i = "4" then
            return animal;
         elsif i = "5" then
            return x_separate;
        end if;
        Put_Line("Convert_Ypcoma_Type: Unmatched string |" & i & "|" );
        return Ypcoma_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypcoma_Type;



    function Pretty_Print( i : Ypcomb_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when able_to_speak => return "able to speak";
             when eligible => return "eligible";
             when fit_to_eat => return "fit to eat";
             when wise => return "wise";
             when argumentative => return "argumentative";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypcomb_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypcomb_Type( i : String ) return Ypcomb_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return able_to_speak;
         elsif i = "2" then
            return eligible;
         elsif i = "3" then
            return fit_to_eat;
         elsif i = "4" then
            return wise;
         elsif i = "5" then
            return argumentative;
        end if;
        Put_Line("Convert_Ypcomb_Type: Unmatched string |" & i & "|" );
        return Ypcomb_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypcomb_Type;



    function Pretty_Print( i : Ypcomc_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when hatred => return "hatred";
             when disobedience => return "disobedience";
             when friendship => return "friendship";
             when animation => return "animation";
             when cuddly => return "cuddly";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypcomc_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypcomc_Type( i : String ) return Ypcomc_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return hatred;
         elsif i = "2" then
            return disobedience;
         elsif i = "3" then
            return friendship;
         elsif i = "4" then
            return animation;
         elsif i = "5" then
            return cuddly;
        end if;
        Put_Line("Convert_Ypcomc_Type: Unmatched string |" & i & "|" );
        return Ypcomc_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypcomc_Type;



    function Pretty_Print( i : Ypcomd_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when disappoint => return "disappoint";
             when customary => return "customary";
             when encounter => return "encounter";
             when get_used_to => return "get used to";
             when business => return "business";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypcomd_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypcomd_Type( i : String ) return Ypcomd_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return disappoint;
         elsif i = "2" then
            return customary;
         elsif i = "3" then
            return encounter;
         elsif i = "4" then
            return get_used_to;
         elsif i = "5" then
            return business;
        end if;
        Put_Line("Convert_Ypcomd_Type: Unmatched string |" & i & "|" );
        return Ypcomd_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypcomd_Type;



    function Pretty_Print( i : Ypcome_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when school => return "school";
             when noon => return "noon";
             when captain => return "captain";
             when room => return "room";
             when board => return "board";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypcome_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypcome_Type( i : String ) return Ypcome_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return school;
         elsif i = "2" then
            return noon;
         elsif i = "3" then
            return captain;
         elsif i = "4" then
            return room;
         elsif i = "5" then
            return board;
        end if;
        Put_Line("Convert_Ypcome_Type: Unmatched string |" & i & "|" );
        return Ypcome_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypcome_Type;



    function Pretty_Print( i : Ypcomf_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when efface => return "efface";
             when make_level => return "make level";
             when elapse => return "elapse";
             when embroider => return "embroider";
             when widen => return "widen";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypcomf_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypcomf_Type( i : String ) return Ypcomf_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return efface;
         elsif i = "2" then
            return make_level;
         elsif i = "3" then
            return elapse;
         elsif i = "4" then
            return embroider;
         elsif i = "5" then
            return widen;
        end if;
        Put_Line("Convert_Ypcomf_Type: Unmatched string |" & i & "|" );
        return Ypcomf_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypcomf_Type;



    function Pretty_Print( i : Ypcomg_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when make_up => return "make up";
             when x_return => return "return";
             when invent => return "invent";
             when turn_around => return "turn around";
             when fall_out => return "fall out";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypcomg_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypcomg_Type( i : String ) return Ypcomg_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return make_up;
         elsif i = "2" then
            return x_return;
         elsif i = "3" then
            return invent;
         elsif i = "4" then
            return turn_around;
         elsif i = "5" then
            return fall_out;
        end if;
        Put_Line("Convert_Ypcomg_Type: Unmatched string |" & i & "|" );
        return Ypcomg_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypcomg_Type;



    function Pretty_Print( i : Ypcomp_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when yes => return "Yes";
             when no => return "No";
             when dont_have_computer => return "Don't have computer";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypcomp_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypcomp_Type( i : String ) return Ypcomp_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
         elsif i = "3" then
            return dont_have_computer;
        end if;
        Put_Line("Convert_Ypcomp_Type: Unmatched string |" & i & "|" );
        return Ypcomp_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypcomp_Type;



    function Pretty_Print( i : Ypcrwra_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when a_big_wory => return "A big wory";
             when a_bit_of_a_worry => return "A bit of a worry";
             when an_occasional_doubt => return "An occasional doubt";
             when not_a_worry_at_all => return "Not a worry at all";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypcrwra_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypcrwra_Type( i : String ) return Ypcrwra_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return a_big_wory;
         elsif i = "2" then
            return a_bit_of_a_worry;
         elsif i = "3" then
            return an_occasional_doubt;
         elsif i = "4" then
            return not_a_worry_at_all;
        end if;
        Put_Line("Convert_Ypcrwra_Type: Unmatched string |" & i & "|" );
        return Ypcrwra_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypcrwra_Type;



    function Pretty_Print( i : Ypcrwrb_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when very_safe => return "Very safe";
             when fairly_safe => return "Fairly safe";
             when a_bit_unsafe => return "A bit unsafe";
             when very_unsafe => return "Very unsafe";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypcrwrb_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypcrwrb_Type( i : String ) return Ypcrwrb_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return very_safe;
         elsif i = "2" then
            return fairly_safe;
         elsif i = "3" then
            return a_bit_unsafe;
         elsif i = "4" then
            return very_unsafe;
        end if;
        Put_Line("Convert_Ypcrwrb_Type: Unmatched string |" & i & "|" );
        return Ypcrwrb_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypcrwrb_Type;



    function Pretty_Print( i : Ypdgfr_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when none => return "None";
             when a_few => return "A few";
             when most => return "Most";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypdgfr_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypdgfr_Type( i : String ) return Ypdgfr_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return none;
         elsif i = "2" then
            return a_few;
         elsif i = "3" then
            return most;
        end if;
        Put_Line("Convert_Ypdgfr_Type: Unmatched string |" & i & "|" );
        return Ypdgfr_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypdgfr_Type;



    function Pretty_Print( i : Ypdgwh_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when mostly_from_school => return "Mostly from school";
             when mostly_from_family => return "Mostly from family";
             when mostly_from_friends => return "Mostly from friends";
             when mostly_from_tv => return "Mostly from TV";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypdgwh_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypdgwh_Type( i : String ) return Ypdgwh_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return mostly_from_school;
         elsif i = "2" then
            return mostly_from_family;
         elsif i = "3" then
            return mostly_from_friends;
         elsif i = "4" then
            return mostly_from_tv;
        end if;
        Put_Line("Convert_Ypdgwh_Type: Unmatched string |" & i & "|" );
        return Ypdgwh_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypdgwh_Type;



    function Pretty_Print( i : Ypdiet_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when yes_all_the_time => return "Yes all the time";
             when yes_sometimes => return "Yes sometimes";
             when no_never => return "No never";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypdiet_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypdiet_Type( i : String ) return Ypdiet_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return yes_all_the_time;
         elsif i = "2" then
            return yes_sometimes;
         elsif i = "3" then
            return no_never;
        end if;
        Put_Line("Convert_Ypdiet_Type: Unmatched string |" & i & "|" );
        return Ypdiet_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypdiet_Type;



    function Pretty_Print( i : Ypdklm_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when never => return "Never";
             when once_or_twice => return "Once or twice";
             when several_times => return "Several times";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypdklm_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypdklm_Type( i : String ) return Ypdklm_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return never;
         elsif i = "2" then
            return once_or_twice;
         elsif i = "3" then
            return several_times;
        end if;
        Put_Line("Convert_Ypdklm_Type: Unmatched string |" & i & "|" );
        return Ypdklm_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypdklm_Type;



    function Pretty_Print( i : Ypdlfa_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when nothing_written_in => return "Nothing written in";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when appearance_or_weight => return "Appearance/weight";
             when girl_or_boy_friend => return "Girl/boy friend";
             when other_friends => return "Other friends";
             when rels_with_family => return "Rels. with family";
             when parental_relations => return "Parental relations";
             when living_arrangements => return "Living arrangements";
             when fam_rel_problems => return "Fam. rel. problems";
             when other_family_probs => return "Other family probs.";
             when self_confidence => return "Self-confidence";
             when getting_job => return "Getting job";
             when more_money_for_self => return "More money for self";
             when more_money_for_family => return "More money for family";
             when better_accomodation => return "Better accomodation";
             when new_possessions => return "New possessions";
             when animals_or_pets => return "Animals/pets";
             when other_life_style => return "Other life style";
             when age => return "Age";
             when being_bullied => return "Being bullied";
             when school_circumstances => return "School circumstances";
             when leaving_school => return "Leaving school";
             when live_elsewhere => return "Live elsewhere";
             when other_community => return "Other community";
             when academic_ability => return "Academic ability";
             when less_suffering_or_violence => return "Less suffering/violence";
             when environmental_improvement => return "Environmental improvement";
             when other_improvements => return "Other improvements";
             when health => return "Health";
             when no_change_all_ok => return "No change: all ok";
             when no_change_nothing => return "No change: nothing";
             when give_up_smoking => return "Give up smoking";
             when finess_or_sporting_ability => return "Finess/sporting ability";
             when more_independence => return "More independence";
             when other_personal_changes => return "Other personal changes";
             when other_changes => return "Other changes";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypdlfa_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when nothing_written_in => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypdlfa_Type( i : String ) return Ypdlfa_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-3" then
            return nothing_written_in;
         elsif i = "0" then
            return nothing_written_in;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return appearance_or_weight;
         elsif i = "11" then
            return girl_or_boy_friend;
         elsif i = "12" then
            return other_friends;
         elsif i = "13" then
            return rels_with_family;
         elsif i = "14" then
            return parental_relations;
         elsif i = "15" then
            return living_arrangements;
         elsif i = "16" then
            return fam_rel_problems;
         elsif i = "17" then
            return other_family_probs;
         elsif i = "2" then
            return self_confidence;
         elsif i = "21" then
            return getting_job;
         elsif i = "22" then
            return more_money_for_self;
         elsif i = "23" then
            return more_money_for_family;
         elsif i = "24" then
            return better_accomodation;
         elsif i = "25" then
            return new_possessions;
         elsif i = "26" then
            return animals_or_pets;
         elsif i = "27" then
            return other_life_style;
         elsif i = "3" then
            return age;
         elsif i = "31" then
            return being_bullied;
         elsif i = "32" then
            return school_circumstances;
         elsif i = "33" then
            return leaving_school;
         elsif i = "35" then
            return live_elsewhere;
         elsif i = "37" then
            return other_community;
         elsif i = "4" then
            return academic_ability;
         elsif i = "41" then
            return less_suffering_or_violence;
         elsif i = "42" then
            return environmental_improvement;
         elsif i = "47" then
            return other_improvements;
         elsif i = "5" then
            return health;
         elsif i = "50" then
            return no_change_all_ok;
         elsif i = "51" then
            return no_change_nothing;
         elsif i = "6" then
            return give_up_smoking;
         elsif i = "7" then
            return finess_or_sporting_ability;
         elsif i = "8" then
            return more_independence;
         elsif i = "9" then
            return other_personal_changes;
         elsif i = "97" then
            return other_changes;
        end if;
        Put_Line("Convert_Ypdlfa_Type: Unmatched string |" & i & "|" );
        return Ypdlfa_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypdlfa_Type;



    function Pretty_Print( i : Ypdlfb_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when nothing_written_in => return "Nothing written in";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when not_mentioned => return "Not mentioned";
             when appearance_or_weight => return "Appearance/weight";
             when girl_or_boy_friend => return "Girl/boy friend";
             when other_friends => return "Other friends";
             when rels_with_family => return "Rels. with family";
             when parental_relations => return "Parental relations";
             when living_arrangements => return "Living arrangements";
             when fam_rel_problems => return "Fam. rel. problems";
             when other_family_probs => return "Other family probs.";
             when self_confidence => return "Self-confidence";
             when getting_job => return "Getting job";
             when more_money_for_self => return "More money for self";
             when more_money_for_family => return "More money for family";
             when better_accomodation => return "Better accomodation";
             when new_possessions => return "New possessions";
             when animals_or_pets => return "Animals/pets";
             when other_life_style => return "Other life style";
             when age => return "Age";
             when being_bullied => return "Being bullied";
             when school_circumstances => return "School circumstances";
             when leaving_school => return "Leaving school";
             when live_elsewhere => return "Live elsewhere";
             when other_community => return "Other community";
             when academic_ability => return "Academic ability";
             when less_suffering_or_violence => return "Less suffering/violence";
             when environmental_improvement => return "Environmental improvement";
             when other_improvements => return "Other improvements";
             when health => return "Health";
             when no_change_all_ok => return "No change: all ok";
             when no_change_nothing => return "No change: nothing";
             when give_up_smoking => return "Give up smoking";
             when finess_or_sporting_ability => return "Finess/sporting ability";
             when more_independence => return "More independence";
             when other_personal_changes => return "Other personal changes";
             when other_changes => return "Other changes";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypdlfb_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when nothing_written_in => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypdlfb_Type( i : String ) return Ypdlfb_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-3" then
            return nothing_written_in;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return appearance_or_weight;
         elsif i = "11" then
            return girl_or_boy_friend;
         elsif i = "12" then
            return other_friends;
         elsif i = "13" then
            return rels_with_family;
         elsif i = "14" then
            return parental_relations;
         elsif i = "15" then
            return living_arrangements;
         elsif i = "16" then
            return fam_rel_problems;
         elsif i = "17" then
            return other_family_probs;
         elsif i = "2" then
            return self_confidence;
         elsif i = "21" then
            return getting_job;
         elsif i = "22" then
            return more_money_for_self;
         elsif i = "23" then
            return more_money_for_family;
         elsif i = "24" then
            return better_accomodation;
         elsif i = "25" then
            return new_possessions;
         elsif i = "26" then
            return animals_or_pets;
         elsif i = "27" then
            return other_life_style;
         elsif i = "3" then
            return age;
         elsif i = "31" then
            return being_bullied;
         elsif i = "32" then
            return school_circumstances;
         elsif i = "33" then
            return leaving_school;
         elsif i = "35" then
            return live_elsewhere;
         elsif i = "37" then
            return other_community;
         elsif i = "4" then
            return academic_ability;
         elsif i = "41" then
            return less_suffering_or_violence;
         elsif i = "42" then
            return environmental_improvement;
         elsif i = "47" then
            return other_improvements;
         elsif i = "5" then
            return health;
         elsif i = "50" then
            return no_change_all_ok;
         elsif i = "51" then
            return no_change_nothing;
         elsif i = "6" then
            return give_up_smoking;
         elsif i = "7" then
            return finess_or_sporting_ability;
         elsif i = "8" then
            return more_independence;
         elsif i = "9" then
            return other_personal_changes;
         elsif i = "97" then
            return other_changes;
        end if;
        Put_Line("Convert_Ypdlfb_Type: Unmatched string |" & i & "|" );
        return Ypdlfb_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypdlfb_Type;



    function Pretty_Print( i : Ypdobm_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when january => return "January";
             when october => return "October";
             when november => return "November";
             when december => return "December";
             when february => return "February";
             when march => return "March";
             when april => return "April";
             when may => return "May";
             when june => return "June";
             when july => return "July";
             when august => return "August";
             when september => return "September";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypdobm_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypdobm_Type( i : String ) return Ypdobm_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return january;
         elsif i = "10" then
            return october;
         elsif i = "11" then
            return november;
         elsif i = "12" then
            return december;
         elsif i = "2" then
            return february;
         elsif i = "3" then
            return march;
         elsif i = "4" then
            return april;
         elsif i = "5" then
            return may;
         elsif i = "6" then
            return june;
         elsif i = "7" then
            return july;
         elsif i = "8" then
            return august;
         elsif i = "9" then
            return september;
        end if;
        Put_Line("Convert_Ypdobm_Type: Unmatched string |" & i & "|" );
        return Ypdobm_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypdobm_Type;



    function Pretty_Print( i : Ypdoby_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when s_1978 => return "1978";
             when s_1979 => return "1979";
             when s_1980 => return "1980";
             when s_1981 => return "1981";
             when s_1982 => return "1982";
             when s_1983 => return "1983";
             when s_1984 => return "1984";
             when s_1985 => return "1985";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypdoby_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypdoby_Type( i : String ) return Ypdoby_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-8" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-9" then
            return refused;
         elsif i = "78" then
            return s_1978;
         elsif i = "79" then
            return s_1979;
         elsif i = "80" then
            return s_1980;
         elsif i = "81" then
            return s_1981;
         elsif i = "82" then
            return s_1982;
         elsif i = "83" then
            return s_1983;
         elsif i = "84" then
            return s_1984;
         elsif i = "85" then
            return s_1985;
        end if;
        Put_Line("Convert_Ypdoby_Type: Unmatched string |" & i & "|" );
        return Ypdoby_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypdoby_Type;



    function Pretty_Print( i : Ypdoby4_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when s_1979 => return "1979";
             when s_1980 => return "1980";
             when s_1981 => return "1981";
             when s_1982 => return "1982";
             when s_1983 => return "1983";
             when s_1984 => return "1984";
             when s_1985 => return "1985";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypdoby4_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypdoby4_Type( i : String ) return Ypdoby4_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "79" then
            return s_1979;
         elsif i = "80" then
            return s_1980;
         elsif i = "81" then
            return s_1981;
         elsif i = "82" then
            return s_1982;
         elsif i = "83" then
            return s_1983;
         elsif i = "84" then
            return s_1984;
         elsif i = "85" then
            return s_1985;
        end if;
        Put_Line("Convert_Ypdoby4_Type: Unmatched string |" & i & "|" );
        return Ypdoby4_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypdoby4_Type;



    function Pretty_Print( i : Ypeatn_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when none => return "None";
             when s_1_2 => return "1 - 2";
             when s_3_5 => return "3 - 5";
             when s_6_7 => return "6 - 7";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypeatn_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypeatn_Type( i : String ) return Ypeatn_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return none;
         elsif i = "2" then
            return s_1_2;
         elsif i = "3" then
            return s_3_5;
         elsif i = "4" then
            return s_6_7;
        end if;
        Put_Line("Convert_Ypeatn_Type: Unmatched string |" & i & "|" );
        return Ypeatn_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypeatn_Type;



    function Pretty_Print( i : Ypesta_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when strongly_agree => return "Strongly agree";
             when agree => return "Agree";
             when disagree => return "Disagree";
             when strongly_disagree => return "Strongly disagree";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypesta_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypesta_Type( i : String ) return Ypesta_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return strongly_agree;
         elsif i = "2" then
            return agree;
         elsif i = "3" then
            return disagree;
         elsif i = "4" then
            return strongly_disagree;
        end if;
        Put_Line("Convert_Ypesta_Type: Unmatched string |" & i & "|" );
        return Ypesta_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypesta_Type;



    function Pretty_Print( i : Ypesti_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when strongly_agree => return "Strongly agree";
             when agree => return "Agree";
             when disagree => return "Disagree";
             when strongly_disagree => return "Strongly disagree";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypesti_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypesti_Type( i : String ) return Ypesti_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return strongly_agree;
         elsif i = "2" then
            return agree;
         elsif i = "3" then
            return disagree;
         elsif i = "4" then
            return strongly_disagree;
        end if;
        Put_Line("Convert_Ypesti_Type: Unmatched string |" & i & "|" );
        return Ypesti_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypesti_Type;



    function Pretty_Print( i : Ypevnt1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when school_positive => return "school - positive";
             when relatnship_positive => return "Relat'nship positive";
             when health_improvement => return "Health - improvement";
             when house_move_positive => return "House move -positive";
             when long_term_plans_plus_ve => return "Long-term plans +ve.";
             when other_positive_event => return "Other positive event";
             when family_relations_plus_ve => return "Family relations +ve";
             when school_negative => return "School - negative";
             when family_relations_ve => return "Family relations -ve";
             when family_event_ve => return "Family event -ve";
             when leisure_negative => return "Leisure - negative";
             when friends_negative => return "Friends - negative";
             when money_negative => return "Money - negative";
             when consumption_negative => return "Consumption-negative";
             when work_experience_ve => return "Work experience -ve.";
             when family_event_plus_ve => return "Family event +ve";
             when relatnship_negative => return "Relat'nship negative";
             when health_negative => return "Health negative";
             when house_move_negative => return "House move -negative";
             when death_of_pet => return "Death of pet";
             when long_term_plans_ve => return "Long-term plans -ve.";
             when other_negative_event => return "Other negative event";
             when leisure_default => return "Leisure default";
             when school_neutral => return "School - neutral";
             when fam_relatns_neutral => return "Fam relat'ns neutral";
             when family_event_neutral => return "Family event neutral";
             when friends_neutral => return "Friends - neutral";
             when money_neutral => return "Money - neutral";
             when work_xprnce_neutral => return "Work xpr'nce-neutral";
             when friends_positive => return "Friends - positive";
             when relatnship_neutral => return "Relat'nship- neutral";
             when health_neutral => return "Health - neutral";
             when house_move_neutral => return "House move -neutral";
             when reference_to_pet => return "Reference to pet";
             when l_term_plan_neutral => return "L-term plan -neutral";
             when other_neutral_event => return "Other neutral event";
             when money_positive => return "Money - positive";
             when consumption_default => return "Consumption-default";
             when work_experience_plus_ve => return "Work experience +ve";
             when nothing_happened => return "Nothing happened";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypevnt1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypevnt1_Type( i : String ) return Ypevnt1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return school_positive;
         elsif i = "10" then
            return relatnship_positive;
         elsif i = "11" then
            return health_improvement;
         elsif i = "12" then
            return house_move_positive;
         elsif i = "14" then
            return long_term_plans_plus_ve;
         elsif i = "19" then
            return other_positive_event;
         elsif i = "2" then
            return family_relations_plus_ve;
         elsif i = "21" then
            return school_negative;
         elsif i = "22" then
            return family_relations_ve;
         elsif i = "23" then
            return family_event_ve;
         elsif i = "24" then
            return leisure_negative;
         elsif i = "25" then
            return friends_negative;
         elsif i = "26" then
            return money_negative;
         elsif i = "27" then
            return consumption_negative;
         elsif i = "28" then
            return work_experience_ve;
         elsif i = "3" then
            return family_event_plus_ve;
         elsif i = "30" then
            return relatnship_negative;
         elsif i = "31" then
            return health_negative;
         elsif i = "32" then
            return house_move_negative;
         elsif i = "33" then
            return death_of_pet;
         elsif i = "34" then
            return long_term_plans_ve;
         elsif i = "39" then
            return other_negative_event;
         elsif i = "4" then
            return leisure_default;
         elsif i = "41" then
            return school_neutral;
         elsif i = "42" then
            return fam_relatns_neutral;
         elsif i = "43" then
            return family_event_neutral;
         elsif i = "45" then
            return friends_neutral;
         elsif i = "46" then
            return money_neutral;
         elsif i = "48" then
            return work_xprnce_neutral;
         elsif i = "5" then
            return friends_positive;
         elsif i = "50" then
            return relatnship_neutral;
         elsif i = "51" then
            return health_neutral;
         elsif i = "52" then
            return house_move_neutral;
         elsif i = "53" then
            return reference_to_pet;
         elsif i = "54" then
            return l_term_plan_neutral;
         elsif i = "59" then
            return other_neutral_event;
         elsif i = "6" then
            return money_positive;
         elsif i = "7" then
            return consumption_default;
         elsif i = "8" then
            return work_experience_plus_ve;
         elsif i = "97" then
            return nothing_happened;
        end if;
        Put_Line("Convert_Ypevnt1_Type: Unmatched string |" & i & "|" );
        return Ypevnt1_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypevnt1_Type;



    function Pretty_Print( i : Ypfarca_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when most_days => return "Most days";
             when more_than_once_a_wk => return "More than once a wk.";
             when less_than_once_a_wk => return "Less than once a wk.";
             when hardly_ever => return "Hardly ever";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypfarca_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypfarca_Type( i : String ) return Ypfarca_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return most_days;
         elsif i = "2" then
            return more_than_once_a_wk;
         elsif i = "3" then
            return less_than_once_a_wk;
         elsif i = "4" then
            return hardly_ever;
        end if;
        Put_Line("Convert_Ypfarca_Type: Unmatched string |" & i & "|" );
        return Ypfarca_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypfarca_Type;



    function Pretty_Print( i : Ypfbeau_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when most_days => return "Most days";
             when more_than_once_a_wk => return "More than once a wk.";
             when less_than_once_a_wk => return "Less than once a wk.";
             when hardly_ever => return "Hardly ever";
             when dont_have_a_boy_or_girlfriend => return "Don't have a boy/girlfriend";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypfbeau_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypfbeau_Type( i : String ) return Ypfbeau_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return most_days;
         elsif i = "2" then
            return more_than_once_a_wk;
         elsif i = "3" then
            return less_than_once_a_wk;
         elsif i = "4" then
            return hardly_ever;
         elsif i = "5" then
            return dont_have_a_boy_or_girlfriend;
        end if;
        Put_Line("Convert_Ypfbeau_Type: Unmatched string |" & i & "|" );
        return Ypfbeau_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypfbeau_Type;



    function Pretty_Print( i : Ypffd_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when every_day_or_nearly => return "Every day or nearly";
             when about_once_a_week => return "About once a week";
             when every_now_and_then => return "Every now and then";
             when never_or_hardly_ever => return "Never or hardly ever";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypffd_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypffd_Type( i : String ) return Ypffd_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return every_day_or_nearly;
         elsif i = "2" then
            return about_once_a_week;
         elsif i = "3" then
            return every_now_and_then;
         elsif i = "4" then
            return never_or_hardly_ever;
        end if;
        Put_Line("Convert_Ypffd_Type: Unmatched string |" & i & "|" );
        return Ypffd_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypffd_Type;



    function Pretty_Print( i : Ypfght_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when none => return "None";
             when blank => return "";
             when s_2_5 => return "2 - 5";
             when s_6_9 => return "6 - 9";
             when s_10_or_more => return "10 or more";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypfght_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypfght_Type( i : String ) return Ypfght_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return none;
         elsif i = "2" then
            return blank;
         elsif i = "3" then
            return s_2_5;
         elsif i = "4" then
            return s_6_9;
         elsif i = "5" then
            return s_10_or_more;
        end if;
        Put_Line("Convert_Ypfght_Type: Unmatched string |" & i & "|" );
        return Ypfght_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypfght_Type;



    function Pretty_Print( i : Ypfjob_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when dont_have_a_dad => return "Don't have a dad";
             when father_doesnt_have_a_job => return "Father doesn't have a job";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypfjob_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypfjob_Type( i : String ) return Ypfjob_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return dont_have_a_dad;
         elsif i = "2" then
            return father_doesnt_have_a_job;
        end if;
        Put_Line("Convert_Ypfjob_Type: Unmatched string |" & i & "|" );
        return Ypfjob_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypfjob_Type;



    function Pretty_Print( i : Ypfpc_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when none => return "None";
             when s_1_2_days => return "1-2 days";
             when s_3_4_days => return "3-4 days";
             when most_days => return "Most days";
             when dont_have_a_computer => return "Don't have a computer";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypfpc_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypfpc_Type( i : String ) return Ypfpc_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return none;
         elsif i = "2" then
            return s_1_2_days;
         elsif i = "3" then
            return s_3_4_days;
         elsif i = "4" then
            return most_days;
         elsif i = "5" then
            return dont_have_a_computer;
        end if;
        Put_Line("Convert_Ypfpc_Type: Unmatched string |" & i & "|" );
        return Ypfpc_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypfpc_Type;



    function Pretty_Print( i : Ypfpcgm_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when none => return "None";
             when s_1_3 => return "1 - 3";
             when s_4_6 => return "4 - 6";
             when s_7_or_more => return "7 or more";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypfpcgm_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypfpcgm_Type( i : String ) return Ypfpcgm_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return none;
         elsif i = "2" then
            return s_1_3;
         elsif i = "3" then
            return s_4_6;
         elsif i = "4" then
            return s_7_or_more;
        end if;
        Put_Line("Convert_Ypfpcgm_Type: Unmatched string |" & i & "|" );
        return Ypfpcgm_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypfpcgm_Type;



    function Pretty_Print( i : Ypfsoc_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when proxy_respondent => return "Proxy respondent";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when insufficient_detail_to_code => return "Insufficient detail to code";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypfsoc_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when proxy_respondent => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypfsoc_Type( i : String ) return Ypfsoc_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "997" then
            return insufficient_detail_to_code;
        end if;
        Put_Line("Convert_Ypfsoc_Type: Unmatched string |" & i & "|" );
        return Ypfsoc_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypfsoc_Type;



    function Pretty_Print( i : Ypfuta_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when particular_career => return "Particular career";
             when pass_exams => return "Pass exams";
             when completed_education => return "Completed education";
             when a_good_job => return "A good job";
             when stable_relationship => return "Stable relationship";
             when have_children => return "Have children";
             when no_children => return "No children";
             when be_single => return "Be single";
             when get_on_with_family => return "Get on with family";
             when own_business => return "Own business";
             when own_car => return "Own car";
             when own_home => return "Own home";
             when have_lots_of_money => return "Have lots of money";
             when play_sports => return "Play sports";
             when play_music => return "Play music";
             when travel => return "Travel";
             when good_social_life => return "Good social life";
             when be_happy => return "Be happy";
             when help_society => return "Help society";
             when financial_security => return "Financial security";
             when move_abroad => return "Move abroad";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypfuta_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypfuta_Type( i : String ) return Ypfuta_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return particular_career;
         elsif i = "10" then
            return pass_exams;
         elsif i = "11" then
            return completed_education;
         elsif i = "2" then
            return a_good_job;
         elsif i = "20" then
            return stable_relationship;
         elsif i = "21" then
            return have_children;
         elsif i = "22" then
            return no_children;
         elsif i = "23" then
            return be_single;
         elsif i = "24" then
            return get_on_with_family;
         elsif i = "3" then
            return own_business;
         elsif i = "30" then
            return own_car;
         elsif i = "31" then
            return own_home;
         elsif i = "32" then
            return have_lots_of_money;
         elsif i = "40" then
            return play_sports;
         elsif i = "41" then
            return play_music;
         elsif i = "42" then
            return travel;
         elsif i = "43" then
            return good_social_life;
         elsif i = "44" then
            return be_happy;
         elsif i = "45" then
            return help_society;
         elsif i = "46" then
            return financial_security;
         elsif i = "47" then
            return move_abroad;
         elsif i = "96" then
            return other;
        end if;
        Put_Line("Convert_Ypfuta_Type: Unmatched string |" & i & "|" );
        return Ypfuta_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypfuta_Type;



    function Pretty_Print( i : Ypfutb_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when not_mentioned => return "Not mentioned";
             when particular_career => return "Particular career";
             when pass_exams => return "Pass exams";
             when completed_education => return "Completed education";
             when a_good_job => return "A good job";
             when stable_relationship => return "Stable relationship";
             when have_children => return "Have children";
             when no_children => return "No children";
             when be_single => return "Be single";
             when get_on_with_family => return "Get on with family";
             when own_business => return "Own business";
             when own_car => return "Own car";
             when own_home => return "Own home";
             when have_lots_of_money => return "Have lots of money";
             when play_sports => return "Play sports";
             when play_music => return "Play music";
             when travel => return "Travel";
             when good_social_life => return "Good social life";
             when be_happy => return "Be happy";
             when help_society => return "Help society";
             when financial_security => return "Financial security";
             when move_abroad => return "Move abroad";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypfutb_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypfutb_Type( i : String ) return Ypfutb_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return particular_career;
         elsif i = "10" then
            return pass_exams;
         elsif i = "11" then
            return completed_education;
         elsif i = "2" then
            return a_good_job;
         elsif i = "20" then
            return stable_relationship;
         elsif i = "21" then
            return have_children;
         elsif i = "22" then
            return no_children;
         elsif i = "23" then
            return be_single;
         elsif i = "24" then
            return get_on_with_family;
         elsif i = "3" then
            return own_business;
         elsif i = "30" then
            return own_car;
         elsif i = "31" then
            return own_home;
         elsif i = "32" then
            return have_lots_of_money;
         elsif i = "40" then
            return play_sports;
         elsif i = "41" then
            return play_music;
         elsif i = "42" then
            return travel;
         elsif i = "43" then
            return good_social_life;
         elsif i = "44" then
            return be_happy;
         elsif i = "45" then
            return help_society;
         elsif i = "46" then
            return financial_security;
         elsif i = "47" then
            return move_abroad;
         elsif i = "96" then
            return other;
        end if;
        Put_Line("Convert_Ypfutb_Type: Unmatched string |" & i & "|" );
        return Ypfutb_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypfutb_Type;



    function Pretty_Print( i : Yphap_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when completely_happy => return "Completely happy";
             when neither_happy_or_unhappy => return "Neither happy/unhappy";
             when completely_unhappy => return "Completely unhappy";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Yphap_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Yphap_Type( i : String ) return Yphap_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return completely_happy;
         elsif i = "4" then
            return neither_happy_or_unhappy;
         elsif i = "7" then
            return completely_unhappy;
        end if;
        Put_Line("Convert_Yphap_Type: Unmatched string |" & i & "|" );
        return Yphap_Type'First; -- never actually gets here; for compiler only
    end Convert_Yphap_Type;



    function Pretty_Print( i : Yphlta_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when yes_all_the_time => return "Yes, all the time";
             when yes_sometimes => return "Yes, sometimes";
             when never => return "Never";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Yphlta_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Yphlta_Type( i : String ) return Yphlta_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return yes_all_the_time;
         elsif i = "2" then
            return yes_sometimes;
         elsif i = "3" then
            return never;
        end if;
        Put_Line("Convert_Yphlta_Type: Unmatched string |" & i & "|" );
        return Yphlta_Type'First; -- never actually gets here; for compiler only
    end Convert_Yphlta_Type;



    function Pretty_Print( i : Yphltb_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when nearly_every_day => return "Nearly every day";
             when about_once_a_week => return "About once a week";
             when every_now_and_then => return "Every now and then";
             when never => return "Never";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Yphltb_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Yphltb_Type( i : String ) return Yphltb_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return nearly_every_day;
         elsif i = "2" then
            return about_once_a_week;
         elsif i = "3" then
            return every_now_and_then;
         elsif i = "4" then
            return never;
        end if;
        Put_Line("Convert_Yphltb_Type: Unmatched string |" & i & "|" );
        return Yphltb_Type'First; -- never actually gets here; for compiler only
    end Convert_Yphltb_Type;



    function Pretty_Print( i : Yphstat_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when excellent => return "Excellent";
             when good => return "Good";
             when fair => return "Fair";
             when poor => return "Poor";
             when very_poor => return "Very poor";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Yphstat_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Yphstat_Type( i : String ) return Yphstat_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return excellent;
         elsif i = "2" then
            return good;
         elsif i = "3" then
            return fair;
         elsif i = "4" then
            return poor;
         elsif i = "5" then
            return very_poor;
        end if;
        Put_Line("Convert_Yphstat_Type: Unmatched string |" & i & "|" );
        return Yphstat_Type'First; -- never actually gets here; for compiler only
    end Convert_Yphstat_Type;



    function Pretty_Print( i : Ypjbqa_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when very_important => return "Very important";
             when not_very_important => return "Not very important";
             when not_at_all_important => return "Not at all important";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypjbqa_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypjbqa_Type( i : String ) return Ypjbqa_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return very_important;
         elsif i = "2" then
            return not_very_important;
         elsif i = "3" then
            return not_at_all_important;
         elsif i = "4" then
            return not_at_all_important;
        end if;
        Put_Line("Convert_Ypjbqa_Type: Unmatched string |" & i & "|" );
        return Ypjbqa_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypjbqa_Type;



    function Pretty_Print( i : Ypjbqf_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when very_important => return "Very important";
             when important => return "Important";
             when not_very_important => return "Not very important";
             when not_at_all_important => return "Not at all important";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypjbqf_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypjbqf_Type( i : String ) return Ypjbqf_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return very_important;
         elsif i = "2" then
            return important;
         elsif i = "3" then
            return not_very_important;
         elsif i = "4" then
            return not_at_all_important;
        end if;
        Put_Line("Convert_Ypjbqf_Type: Unmatched string |" & i & "|" );
        return Ypjbqf_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypjbqf_Type;



    function Pretty_Print( i : Ypjbqt_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when a_security => return "A   Security";
             when b_short_hours => return "B   Short hours";
             when c_using_your_brain => return "C   Using your brain";
             when d_good_pay => return "D   Good pay";
             when e_feels_worthwhile => return "E   Feels worthwhile";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypjbqt_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypjbqt_Type( i : String ) return Ypjbqt_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return a_security;
         elsif i = "2" then
            return b_short_hours;
         elsif i = "3" then
            return c_using_your_brain;
         elsif i = "4" then
            return d_good_pay;
         elsif i = "5" then
            return e_feels_worthwhile;
        end if;
        Put_Line("Convert_Ypjbqt_Type: Unmatched string |" & i & "|" );
        return Ypjbqt_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypjbqt_Type;



    function Pretty_Print( i : Yplate_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when never => return "Never";
             when s_1_2 => return "1 - 2";
             when s_3_9 => return "3 - 9";
             when s_10_or_more => return "10 or more";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Yplate_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Yplate_Type( i : String ) return Yplate_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return never;
         elsif i = "2" then
            return s_1_2;
         elsif i = "3" then
            return s_3_9;
         elsif i = "4" then
            return s_10_or_more;
        end if;
        Put_Line("Convert_Yplate_Type: Unmatched string |" & i & "|" );
        return Yplate_Type'First; -- never actually gets here; for compiler only
    end Convert_Yplate_Type;



    function Pretty_Print( i : Yplvsc_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when leave_school_at_16 => return "Leave school at 16";
             when go_to_sixth_form_or_college => return "Go to sixth form or college";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Yplvsc_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Yplvsc_Type( i : String ) return Yplvsc_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return leave_school_at_16;
         elsif i = "2" then
            return go_to_sixth_form_or_college;
        end if;
        Put_Line("Convert_Yplvsc_Type: Unmatched string |" & i & "|" );
        return Yplvsc_Type'First; -- never actually gets here; for compiler only
    end Convert_Yplvsc_Type;



    function Pretty_Print( i : Ypmenu_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when yourself => return "Yourself";
             when mother => return "Mother";
             when father => return "Father";
             when someone_else => return "Someone-else";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypmenu_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypmenu_Type( i : String ) return Ypmenu_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return yourself;
         elsif i = "2" then
            return mother;
         elsif i = "3" then
            return father;
         elsif i = "4" then
            return someone_else;
        end if;
        Put_Line("Convert_Ypmenu_Type: Unmatched string |" & i & "|" );
        return Ypmenu_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypmenu_Type;



    function Pretty_Print( i : Ypmkfrn_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when very_easy => return "Very easy";
             when quite_easy => return "Quite easy";
             when quite_difficult => return "Quite difficult";
             when very_difficult => return "Very difficult";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypmkfrn_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypmkfrn_Type( i : String ) return Ypmkfrn_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return very_easy;
         elsif i = "2" then
            return quite_easy;
         elsif i = "3" then
            return quite_difficult;
         elsif i = "4" then
            return very_difficult;
        end if;
        Put_Line("Convert_Ypmkfrn_Type: Unmatched string |" & i & "|" );
        return Ypmkfrn_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypmkfrn_Type;



    function Pretty_Print( i : Ypnodg_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when can_get_into_trouble => return "Can get into trouble";
             when can_damage_health => return "Can damage health";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypnodg_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypnodg_Type( i : String ) return Ypnodg_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return can_get_into_trouble;
         elsif i = "2" then
            return can_damage_health;
        end if;
        Put_Line("Convert_Ypnodg_Type: Unmatched string |" & i & "|" );
        return Ypnodg_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypnodg_Type;



    function Pretty_Print( i : Ypnosm_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when costs_too_much => return "Costs too much";
             when bad_for_health => return "Bad for health";
             when make_parents_angry => return "Make parents angry";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypnosm_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypnosm_Type( i : String ) return Ypnosm_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return costs_too_much;
         elsif i = "2" then
            return bad_for_health;
         elsif i = "3" then
            return make_parents_angry;
        end if;
        Put_Line("Convert_Ypnosm_Type: Unmatched string |" & i & "|" );
        return Ypnosm_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypnosm_Type;



    function Pretty_Print( i : Ypnspt1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when no_good_dont_like => return "No good, don't like";
             when no_facilities => return "No facilities";
             when no_time => return "No time";
             when cannot_afford => return "Cannot afford";
             when no_good_at_sport => return "No good at sport";
             when health_or_disability => return "Health or disability";
             when other => return "Other";
             when other_nes => return "Other (NES)";
             when missing_or_blank => return "Missing or blank";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypnspt1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypnspt1_Type( i : String ) return Ypnspt1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return no_good_dont_like;
         elsif i = "2" then
            return no_facilities;
         elsif i = "3" then
            return no_time;
         elsif i = "4" then
            return cannot_afford;
         elsif i = "5" then
            return no_good_at_sport;
         elsif i = "6" then
            return health_or_disability;
         elsif i = "7" then
            return other;
         elsif i = "96" then
            return other_nes;
         elsif i = "97" then
            return missing_or_blank;
        end if;
        Put_Line("Convert_Ypnspt1_Type: Unmatched string |" & i & "|" );
        return Ypnspt1_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypnspt1_Type;



    function Pretty_Print( i : Ypnspt2_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when not_mentioned => return "Not mentioned";
             when no_good_dont_like => return "No good, don't like";
             when no_facilities => return "No facilities";
             when no_time => return "No time";
             when cannot_afford => return "Cannot afford";
             when no_good_at_sport => return "No good at sport";
             when health_or_disability => return "Health or disability";
             when other_nes => return "Other (NES)";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypnspt2_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypnspt2_Type( i : String ) return Ypnspt2_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return no_good_dont_like;
         elsif i = "2" then
            return no_facilities;
         elsif i = "3" then
            return no_time;
         elsif i = "4" then
            return cannot_afford;
         elsif i = "5" then
            return no_good_at_sport;
         elsif i = "6" then
            return health_or_disability;
         elsif i = "96" then
            return other_nes;
        end if;
        Put_Line("Convert_Ypnspt2_Type: Unmatched string |" & i & "|" );
        return Ypnspt2_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypnspt2_Type;



    function Pretty_Print( i : Ypntv_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when none => return "None";
             when blank => return "";
             when s_3_or_more => return "3 or more";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypntv_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypntv_Type( i : String ) return Ypntv_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return none;
         elsif i = "2" then
            return blank;
         elsif i = "3" then
            return blank;
         elsif i = "4" then
            return s_3_or_more;
        end if;
        Put_Line("Convert_Ypntv_Type: Unmatched string |" & i & "|" );
        return Ypntv_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypntv_Type;



    function Pretty_Print( i : Ypnuna_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when want_job_earn_money => return "Want job, earn money";
             when want_stay_at_home => return "Want stay at home";
             when want_make_own_home => return "Want make own home";
             when get_on_with_life => return "Get on with life";
             when go_abroad_travel => return "Go abroad-travel";
             when cant_be_bothered => return "Can't be bothered";
             when unsure_what_to_do => return "Unsure what to do";
             when too_expensive => return "Too expensive";
             when money_1st_then_uni => return "Money 1st then uni";
             when want_apprenticeship => return "Want apprenticeship";
             when job_career_planned => return "Job-career planned";
             when no_need_of_qualifs => return "No need of qualifs";
             when hard_work => return "Hard work";
             when incapable_uni_work => return "Incapable uni work";
             when hate_school_college => return "Hate school-college";
             when waste_of_time => return "Waste of time";
             when other => return "Other";
             when missing_blank => return "Missing-blank";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypnuna_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypnuna_Type( i : String ) return Ypnuna_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return want_job_earn_money;
         elsif i = "10" then
            return want_stay_at_home;
         elsif i = "11" then
            return want_make_own_home;
         elsif i = "12" then
            return get_on_with_life;
         elsif i = "13" then
            return go_abroad_travel;
         elsif i = "14" then
            return cant_be_bothered;
         elsif i = "15" then
            return unsure_what_to_do;
         elsif i = "16" then
            return too_expensive;
         elsif i = "2" then
            return money_1st_then_uni;
         elsif i = "3" then
            return want_apprenticeship;
         elsif i = "4" then
            return job_career_planned;
         elsif i = "5" then
            return no_need_of_qualifs;
         elsif i = "6" then
            return hard_work;
         elsif i = "7" then
            return incapable_uni_work;
         elsif i = "8" then
            return hate_school_college;
         elsif i = "9" then
            return waste_of_time;
         elsif i = "96" then
            return other;
         elsif i = "97" then
            return missing_blank;
        end if;
        Put_Line("Convert_Ypnuna_Type: Unmatched string |" & i & "|" );
        return Ypnuna_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypnuna_Type;



    function Pretty_Print( i : Ypnunb_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when not_mentioned => return "Not mentioned";
             when want_job_earn_money => return "Want job, earn money";
             when want_stay_at_home => return "Want stay at home";
             when want_make_own_home => return "Want make own home";
             when get_on_with_life => return "Get on with life";
             when go_abroad_travel => return "Go abroad-travel";
             when cant_be_bothered => return "Can't be bothered";
             when unsure_what_to_do => return "Unsure what to do";
             when too_expensive => return "Too expensive";
             when money_1st_then_uni => return "Money 1st then uni";
             when want_apprenticeship => return "Want apprenticeship";
             when job_career_planned => return "Job-career planned";
             when no_need_of_qualifs => return "No need of qualifs";
             when hard_work => return "Hard work";
             when incapable_uni_work => return "Incapable uni work";
             when hate_school_college => return "Hate school-college";
             when waste_of_time => return "Waste of time";
             when other => return "Other";
             when missing_blank => return "Missing-blank";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypnunb_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypnunb_Type( i : String ) return Ypnunb_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return want_job_earn_money;
         elsif i = "10" then
            return want_stay_at_home;
         elsif i = "11" then
            return want_make_own_home;
         elsif i = "12" then
            return get_on_with_life;
         elsif i = "13" then
            return go_abroad_travel;
         elsif i = "14" then
            return cant_be_bothered;
         elsif i = "15" then
            return unsure_what_to_do;
         elsif i = "16" then
            return too_expensive;
         elsif i = "2" then
            return money_1st_then_uni;
         elsif i = "3" then
            return want_apprenticeship;
         elsif i = "4" then
            return job_career_planned;
         elsif i = "5" then
            return no_need_of_qualifs;
         elsif i = "6" then
            return hard_work;
         elsif i = "7" then
            return incapable_uni_work;
         elsif i = "8" then
            return hate_school_college;
         elsif i = "9" then
            return waste_of_time;
         elsif i = "96" then
            return other;
         elsif i = "97" then
            return missing_blank;
        end if;
        Put_Line("Convert_Ypnunb_Type: Unmatched string |" & i & "|" );
        return Ypnunb_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypnunb_Type;



    function Pretty_Print( i : Ypopfb_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when strongly_agree => return "Strongly agree";
             when agree => return "Agree";
             when neither_agree_or_disagree => return "Neither agree/disagree";
             when disagree => return "Disagree";
             when strongly_disagree => return "Strongly disagree";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypopfb_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypopfb_Type( i : String ) return Ypopfb_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return strongly_agree;
         elsif i = "2" then
            return agree;
         elsif i = "3" then
            return neither_agree_or_disagree;
         elsif i = "4" then
            return disagree;
         elsif i = "5" then
            return strongly_disagree;
        end if;
        Put_Line("Convert_Ypopfb_Type: Unmatched string |" & i & "|" );
        return Ypopfb_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypopfb_Type;



    function Pretty_Print( i : Ypopfj_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when strongly_agree => return "Strongly agree";
             when agree => return "Agree";
             when neither_agree_nor_disagree => return "Neither agree nor disagree";
             when disagree => return "Disagree";
             when strongly_disagree => return "Strongly disagree";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypopfj_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypopfj_Type( i : String ) return Ypopfj_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return strongly_agree;
         elsif i = "2" then
            return agree;
         elsif i = "3" then
            return neither_agree_nor_disagree;
         elsif i = "4" then
            return disagree;
         elsif i = "5" then
            return strongly_disagree;
        end if;
        Put_Line("Convert_Ypopfj_Type: Unmatched string |" & i & "|" );
        return Ypopfj_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypopfj_Type;



    function Pretty_Print( i : Ypoprl_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when no_difference => return "No difference";
             when some_difference => return "Some difference";
             when a_great_difference => return "A great difference";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypoprl_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypoprl_Type( i : String ) return Ypoprl_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return no_difference;
         elsif i = "2" then
            return some_difference;
         elsif i = "3" then
            return a_great_difference;
        end if;
        Put_Line("Convert_Ypoprl_Type: Unmatched string |" & i & "|" );
        return Ypoprl_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypoprl_Type;



    function Pretty_Print( i : Ypopsc_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when a_great_deal => return "A great deal";
             when quite_a_lot => return "Quite a lot";
             when a_bit_but_not_v_much => return "A bit but not v. much";
             when very_little => return "Very little";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypopsc_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypopsc_Type( i : String ) return Ypopsc_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return a_great_deal;
         elsif i = "2" then
            return quite_a_lot;
         elsif i = "3" then
            return a_bit_but_not_v_much;
         elsif i = "4" then
            return very_little;
        end if;
        Put_Line("Convert_Ypopsc_Type: Unmatched string |" & i & "|" );
        return Ypopsc_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypopsc_Type;



    function Pretty_Print( i : Ypopsm_Type ) return String is
    begin
         case i is
             when missing_or_wild => return "Missing or wild";
             when very_dangerous => return "Very dangerous";
             when fairly_dangerous => return "Fairly dangerous";
             when not_very_dangerous => return "Not very dangerous";
             when not_at_all_dangerous => return "Not at all dangerous";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypopsm_Type ) return Boolean is
    begin
         case i is
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypopsm_Type( i : String ) return Ypopsm_Type is
    begin
         if i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return very_dangerous;
         elsif i = "2" then
            return fairly_dangerous;
         elsif i = "3" then
            return not_very_dangerous;
         elsif i = "4" then
            return not_at_all_dangerous;
        end if;
        Put_Line("Convert_Ypopsm_Type: Unmatched string |" & i & "|" );
        return Ypopsm_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypopsm_Type;



    function Pretty_Print( i : Yppalo_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when none => return "None";
             when s_1_2 => return "1 - 2";
             when s_3_5 => return "3 - 5";
             when s_6_or_more => return "6 or more";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Yppalo_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Yppalo_Type( i : String ) return Yppalo_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return none;
         elsif i = "2" then
            return s_1_2;
         elsif i = "3" then
            return s_3_5;
         elsif i = "4" then
            return s_6_or_more;
        end if;
        Put_Line("Convert_Yppalo_Type: Unmatched string |" & i & "|" );
        return Yppalo_Type'First; -- never actually gets here; for compiler only
    end Convert_Yppalo_Type;



    function Pretty_Print( i : Yppar_Type ) return String is
    begin
         case i is
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when yes => return "Yes";
             when no => return "No";
             when na_echp_sub_sample => return "NA: ECHP sub-sample";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Yppar_Type ) return Boolean is
    begin
         case i is
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Yppar_Type( i : String ) return Yppar_Type is
    begin
         if i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
         elsif i = "3" then
            return na_echp_sub_sample;
        end if;
        Put_Line("Convert_Yppar_Type: Unmatched string |" & i & "|" );
        return Yppar_Type'First; -- never actually gets here; for compiler only
    end Convert_Yppar_Type;



    function Pretty_Print( i : Yppasc_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when watch_me_v_closely => return "Watch me v. closely";
             when prefer_me_to_be_indep => return "Prefer me to be indep";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Yppasc_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Yppasc_Type( i : String ) return Yppasc_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return watch_me_v_closely;
         elsif i = "2" then
            return prefer_me_to_be_indep;
        end if;
        Put_Line("Convert_Yppasc_Type: Unmatched string |" & i & "|" );
        return Yppasc_Type'First; -- never actually gets here; for compiler only
    end Convert_Yppasc_Type;



    function Pretty_Print( i : Yppcg_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when every_day => return "Every day";
             when at_least_once_or_week => return "At least once/week";
             when at_least_once_or_month => return "At least once/month";
             when less_than_once_or_month => return "Less than once/month";
             when never => return "Never";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Yppcg_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Yppcg_Type( i : String ) return Yppcg_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return every_day;
         elsif i = "2" then
            return at_least_once_or_week;
         elsif i = "3" then
            return at_least_once_or_month;
         elsif i = "4" then
            return less_than_once_or_month;
         elsif i = "5" then
            return never;
        end if;
        Put_Line("Convert_Yppcg_Type: Unmatched string |" & i & "|" );
        return Yppcg_Type'First; -- never actually gets here; for compiler only
    end Convert_Yppcg_Type;



    function Pretty_Print( i : Ypsad_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when none => return "None";
             when s_1_3_days => return "1-3 days";
             when s_4_10_days => return "4-10 days";
             when s_11_days_or_more => return "11 days or more";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypsad_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypsad_Type( i : String ) return Ypsad_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return none;
         elsif i = "2" then
            return s_1_3_days;
         elsif i = "3" then
            return s_4_10_days;
         elsif i = "4" then
            return s_11_days_or_more;
        end if;
        Put_Line("Convert_Ypsad_Type: Unmatched string |" & i & "|" );
        return Ypsad_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypsad_Type;



    function Pretty_Print( i : Ypsave_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when save_to_buy_things => return "Save to buy things";
             when save_and_not_spend => return "Save and not spend";
             when spend_immediately => return "Spend immediately";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypsave_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypsave_Type( i : String ) return Ypsave_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return save_to_buy_things;
         elsif i = "2" then
            return save_and_not_spend;
         elsif i = "3" then
            return spend_immediately;
        end if;
        Put_Line("Convert_Ypsave_Type: Unmatched string |" & i & "|" );
        return Ypsave_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypsave_Type;



    function Pretty_Print( i : Ypser_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when a_stealing => return "A   Stealing";
             when b_swearing => return "B   Swearing";
             when c_smoking => return "C   Smoking";
             when d_telling_lies => return "D   Telling lies";
             when e_taking_drugs => return "E   Taking drugs";
             when f_playing_truant => return "F   Playing truant";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypser_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypser_Type( i : String ) return Ypser_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return a_stealing;
         elsif i = "2" then
            return b_swearing;
         elsif i = "3" then
            return c_smoking;
         elsif i = "4" then
            return d_telling_lies;
         elsif i = "5" then
            return e_taking_drugs;
         elsif i = "6" then
            return f_playing_truant;
        end if;
        Put_Line("Convert_Ypser_Type: Unmatched string |" & i & "|" );
        return Ypser_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypser_Type;



    function Pretty_Print( i : Ypsex_Type ) return String is
    begin
         case i is
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when male => return "Male";
             when female => return "Female";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypsex_Type ) return Boolean is
    begin
         case i is
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypsex_Type( i : String ) return Ypsex_Type is
    begin
         if i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return male;
         elsif i = "2" then
            return female;
        end if;
        Put_Line("Convert_Ypsex_Type: Unmatched string |" & i & "|" );
        return Ypsex_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypsex_Type;



    function Pretty_Print( i : Ypshhc_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when always_strict => return "Always strict";
             when sometimes_strict => return "Sometimes strict";
             when not_strict_at_all => return "Not strict at all";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypshhc_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypshhc_Type( i : String ) return Ypshhc_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return always_strict;
         elsif i = "2" then
            return sometimes_strict;
         elsif i = "3" then
            return not_strict_at_all;
        end if;
        Put_Line("Convert_Ypshhc_Type: Unmatched string |" & i & "|" );
        return Ypshhc_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypshhc_Type;



    function Pretty_Print( i : Ypsm_Type ) return String is
    begin
         case i is
             when tsm_not_psm => return "TSM not PSM";
             when osm => return "OSM";
             when partner_or_parent_of_osm => return "Partner/parent of OSM";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypsm_Type ) return Boolean is
    begin
         case i is
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypsm_Type( i : String ) return Ypsm_Type is
    begin
         if i = "0" then
            return tsm_not_psm;
         elsif i = "1" then
            return osm;
         elsif i = "2" then
            return partner_or_parent_of_osm;
        end if;
        Put_Line("Convert_Ypsm_Type: Unmatched string |" & i & "|" );
        return Ypsm_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypsm_Type;



    function Pretty_Print( i : Ypsmag_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when never_smoked => return "Never smoked";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypsmag_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypsmag_Type( i : String ) return Ypsmag_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return never_smoked;
        end if;
        Put_Line("Convert_Ypsmag_Type: Unmatched string |" & i & "|" );
        return Ypsmag_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypsmag_Type;



    function Pretty_Print( i : Ypsmof_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when i_have_never_smoked => return "I have never smoked";
             when only_once_or_twice => return "Only once or twice";
             when used_to_given_it_up => return "Used to, given it up";
             when sometimes_lt_1_a_wk => return "Sometimes lt. 1 a wk";
             when i_smoke_regularly => return "I smoke regularly.";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypsmof_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypsmof_Type( i : String ) return Ypsmof_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return i_have_never_smoked;
         elsif i = "2" then
            return only_once_or_twice;
         elsif i = "3" then
            return used_to_given_it_up;
         elsif i = "4" then
            return sometimes_lt_1_a_wk;
         elsif i = "5" then
            return i_smoke_regularly;
        end if;
        Put_Line("Convert_Ypsmof_Type: Unmatched string |" & i & "|" );
        return Ypsmof_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypsmof_Type;



    function Pretty_Print( i : Ypsmop_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when very_dangerous => return "Very dangerous";
             when fairly_dangerous => return "Fairly dangerous";
             when not_very_dangerous => return "Not very dangerous";
             when not_at_all_dangerous => return "Not at all dangerous";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypsmop_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypsmop_Type( i : String ) return Ypsmop_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return very_dangerous;
         elsif i = "2" then
            return fairly_dangerous;
         elsif i = "3" then
            return not_very_dangerous;
         elsif i = "4" then
            return not_at_all_dangerous;
        end if;
        Put_Line("Convert_Ypsmop_Type: Unmatched string |" & i & "|" );
        return Ypsmop_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypsmop_Type;



    function Pretty_Print( i : Ypsoc_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when insufficient_detail_to_code => return "Insufficient detail to code";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypsoc_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypsoc_Type( i : String ) return Ypsoc_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "997" then
            return insufficient_detail_to_code;
        end if;
        Put_Line("Convert_Ypsoc_Type: Unmatched string |" & i & "|" );
        return Ypsoc_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypsoc_Type;



    function Pretty_Print( i : Ypsoc00_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when insufficient_detail_to_code => return "Insufficient detail to code";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypsoc00_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when insufficient_detail_to_code => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypsoc00_Type( i : String ) return Ypsoc00_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-3" then
            return insufficient_detail_to_code;
         elsif i = "9997" then
            return insufficient_detail_to_code;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
        end if;
        Put_Line("Convert_Ypsoc00_Type: Unmatched string |" & i & "|" );
        return Ypsoc00_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypsoc00_Type;



    function Pretty_Print( i : Ypsoc1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when valid_soc_code => return "Valid SOC code";
             when insufficient_detail => return "Insufficient detail";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypsoc1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypsoc1_Type( i : String ) return Ypsoc1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return valid_soc_code;
         elsif i = "997" then
            return insufficient_detail;
        end if;
        Put_Line("Convert_Ypsoc1_Type: Unmatched string |" & i & "|" );
        return Ypsoc1_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypsoc1_Type;



    function Pretty_Print( i : Ypsoc10_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when insufficient_detail => return "Insufficient detail";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when valid_soc_code => return "Valid SOC code";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypsoc10_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when insufficient_detail => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypsoc10_Type( i : String ) return Ypsoc10_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-3" then
            return insufficient_detail;
         elsif i = "9997" then
            return insufficient_detail;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return valid_soc_code;
        end if;
        Put_Line("Convert_Ypsoc10_Type: Unmatched string |" & i & "|" );
        return Ypsoc10_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypsoc10_Type;



    function Pretty_Print( i : Ypsoc2_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when not_mentioned => return "Not mentioned";
             when valid_soc_code => return "Valid SOC code";
             when insufficient_detail => return "Insufficient detail";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypsoc2_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypsoc2_Type( i : String ) return Ypsoc2_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return valid_soc_code;
         elsif i = "997" then
            return insufficient_detail;
        end if;
        Put_Line("Convert_Ypsoc2_Type: Unmatched string |" & i & "|" );
        return Ypsoc2_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypsoc2_Type;



    function Pretty_Print( i : Ypsoc20_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when insufficient_detail => return "Insufficient detail";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when not_mentioned => return "Not mentioned";
             when valid_soc_code => return "Valid SOC code";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypsoc20_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when insufficient_detail => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypsoc20_Type( i : String ) return Ypsoc20_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-3" then
            return insufficient_detail;
         elsif i = "9997" then
            return insufficient_detail;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return valid_soc_code;
        end if;
        Put_Line("Convert_Ypsoc20_Type: Unmatched string |" & i & "|" );
        return Ypsoc20_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypsoc20_Type;



    function Pretty_Print( i : Ypsocy_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when missing_or_wild => return "Missing or wild";
             when money_or_well_paid => return "Money/well paid";
             when like_to_work_w_hands => return "Like to work w hands";
             when other_specific_skill => return "Other specific skill";
             when want_work_w_animals => return "Want work w animals";
             when want_work_w_children => return "Want work w children";
             when want_to_help_others => return "Want to help others";
             when gen_moral_concern => return "Gen. moral concern";
             when would_enjoy_it => return "Would enjoy it";
             when undecided_or_too_young => return "Undecided/too young";
             when good_job_or_high_status => return "Good job/high status";
             when always_wanted_to_be => return "Always wanted to be";
             when follow_family_fstep => return "Follow family f'step";
             when like_computing => return "Like computing";
             when like_or_good_at_arts => return "Like/good at arts";
             when like_or_want_to_travel => return "Like/want to travel";
             when like_or_good_at_sports => return "Like/good at sports";
             when like_work_w_people => return "Like work w people";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypsocy_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypsocy_Type( i : String ) return Ypsocy_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return money_or_well_paid;
         elsif i = "10" then
            return like_to_work_w_hands;
         elsif i = "11" then
            return other_specific_skill;
         elsif i = "12" then
            return want_work_w_animals;
         elsif i = "13" then
            return want_work_w_children;
         elsif i = "14" then
            return want_to_help_others;
         elsif i = "15" then
            return gen_moral_concern;
         elsif i = "16" then
            return would_enjoy_it;
         elsif i = "17" then
            return undecided_or_too_young;
         elsif i = "2" then
            return good_job_or_high_status;
         elsif i = "3" then
            return always_wanted_to_be;
         elsif i = "4" then
            return follow_family_fstep;
         elsif i = "5" then
            return like_computing;
         elsif i = "6" then
            return like_or_good_at_arts;
         elsif i = "7" then
            return like_or_want_to_travel;
         elsif i = "8" then
            return like_or_good_at_sports;
         elsif i = "9" then
            return like_work_w_people;
         elsif i = "97" then
            return other;
        end if;
        Put_Line("Convert_Ypsocy_Type: Unmatched string |" & i & "|" );
        return Ypsocy_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypsocy_Type;



    function Pretty_Print( i : Ypsprt_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when every_day_or_almost => return "Every day or almost";
             when about_once_a_week => return "About once a week";
             when every_now_and_then => return "Every now and then";
             when never_or_hardly_ever => return "Never or hardly ever";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypsprt_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypsprt_Type( i : String ) return Ypsprt_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return every_day_or_almost;
         elsif i = "2" then
            return about_once_a_week;
         elsif i = "3" then
            return every_now_and_then;
         elsif i = "4" then
            return never_or_hardly_ever;
        end if;
        Put_Line("Convert_Ypsprt_Type: Unmatched string |" & i & "|" );
        return Ypsprt_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypsprt_Type;



    function Pretty_Print( i : Ypsprt1_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when walk_self_or_dog => return "Walk self or dog";
             when cricket => return "Cricket";
             when athletics => return "Athletics";
             when marshall_arts => return "Marshall arts";
             when horse_riding => return "Horse riding";
             when gymnastics => return "Gymnastics";
             when dancing_of_any_type => return "Dancing of any type";
             when skating_ice_or_board => return "Skating ice or board";
             when water_sports_ex_swim => return "Water sports ex swim";
             when golf => return "Golf";
             when archery => return "Archery";
             when swimming => return "Swimming";
             when army_cadets => return "Army Cadets";
             when bowling => return "Bowling";
             when motor_biking => return "Motor biking";
             when wrestling => return "Wrestling";
             when cycling => return "Cycling";
             when jogging_or_running => return "Jogging or running";
             when tennis_squash_badmin => return "Tennis squash badmin";
             when keep_fit => return "Keep fit";
             when gym_training => return "Gym training";
             when football_rugby => return "Football, rugby";
             when netbll_bsketbll_hcky => return "Netbll bsketbll hcky";
             when plays_unpec_sport => return "Plays unpec sport";
             when other_nes => return "Other (NES)";
             when missing_or_blank => return "Missing or blank";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypsprt1_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypsprt1_Type( i : String ) return Ypsprt1_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return walk_self_or_dog;
         elsif i = "10" then
            return cricket;
         elsif i = "11" then
            return athletics;
         elsif i = "12" then
            return marshall_arts;
         elsif i = "13" then
            return horse_riding;
         elsif i = "14" then
            return gymnastics;
         elsif i = "15" then
            return dancing_of_any_type;
         elsif i = "16" then
            return skating_ice_or_board;
         elsif i = "17" then
            return water_sports_ex_swim;
         elsif i = "18" then
            return golf;
         elsif i = "19" then
            return archery;
         elsif i = "2" then
            return swimming;
         elsif i = "20" then
            return army_cadets;
         elsif i = "21" then
            return bowling;
         elsif i = "22" then
            return motor_biking;
         elsif i = "23" then
            return wrestling;
         elsif i = "3" then
            return cycling;
         elsif i = "4" then
            return jogging_or_running;
         elsif i = "5" then
            return tennis_squash_badmin;
         elsif i = "6" then
            return keep_fit;
         elsif i = "7" then
            return gym_training;
         elsif i = "8" then
            return football_rugby;
         elsif i = "9" then
            return netbll_bsketbll_hcky;
         elsif i = "95" then
            return plays_unpec_sport;
         elsif i = "96" then
            return other_nes;
         elsif i = "97" then
            return missing_or_blank;
        end if;
        Put_Line("Convert_Ypsprt1_Type: Unmatched string |" & i & "|" );
        return Ypsprt1_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypsprt1_Type;



    function Pretty_Print( i : Ypsprt2_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when not_mentioned => return "Not mentioned";
             when walk_self_or_dog => return "Walk self or dog";
             when cricket => return "Cricket";
             when athletics => return "Athletics";
             when marshall_arts => return "Marshall arts";
             when horse_riding => return "Horse riding";
             when gymnastics => return "Gymnastics";
             when dancing_of_any_type => return "Dancing of any type";
             when skating_ice_or_board => return "Skating ice or board";
             when water_sports_ex_swim => return "Water sports ex swim";
             when golf => return "Golf";
             when archery => return "Archery";
             when swimming => return "Swimming";
             when army_cadets => return "Army Cadets";
             when bowling => return "Bowling";
             when motor_biking => return "Motor biking";
             when wrestling => return "Wrestling";
             when cycling => return "Cycling";
             when jogging_or_running => return "Jogging or running";
             when tennis_squash_badmin => return "Tennis squash badmin";
             when keep_fit => return "Keep fit";
             when gym_training => return "Gym training";
             when football_rugby => return "Football, rugby";
             when netbll_bsketbll_hcky => return "Netbll bsketbll hcky";
             when plays_unpec_sport => return "Plays unpec sport";
             when other_nes => return "Other (NES)";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypsprt2_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypsprt2_Type( i : String ) return Ypsprt2_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return walk_self_or_dog;
         elsif i = "10" then
            return cricket;
         elsif i = "11" then
            return athletics;
         elsif i = "12" then
            return marshall_arts;
         elsif i = "13" then
            return horse_riding;
         elsif i = "14" then
            return gymnastics;
         elsif i = "15" then
            return dancing_of_any_type;
         elsif i = "16" then
            return skating_ice_or_board;
         elsif i = "17" then
            return water_sports_ex_swim;
         elsif i = "18" then
            return golf;
         elsif i = "19" then
            return archery;
         elsif i = "2" then
            return swimming;
         elsif i = "20" then
            return army_cadets;
         elsif i = "21" then
            return bowling;
         elsif i = "22" then
            return motor_biking;
         elsif i = "23" then
            return wrestling;
         elsif i = "3" then
            return cycling;
         elsif i = "4" then
            return jogging_or_running;
         elsif i = "5" then
            return tennis_squash_badmin;
         elsif i = "6" then
            return keep_fit;
         elsif i = "7" then
            return gym_training;
         elsif i = "8" then
            return football_rugby;
         elsif i = "9" then
            return netbll_bsketbll_hcky;
         elsif i = "95" then
            return plays_unpec_sport;
         elsif i = "96" then
            return other_nes;
        end if;
        Put_Line("Convert_Ypsprt2_Type: Unmatched string |" & i & "|" );
        return Ypsprt2_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypsprt2_Type;



    function Pretty_Print( i : Yptell_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when always => return "Always";
             when usually => return "Usually";
             when sometimes => return "Sometimes";
             when not_usually => return "Not usually";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Yptell_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Yptell_Type( i : String ) return Yptell_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return always;
         elsif i = "2" then
            return usually;
         elsif i = "3" then
            return sometimes;
         elsif i = "4" then
            return not_usually;
        end if;
        Put_Line("Convert_Yptell_Type: Unmatched string |" & i & "|" );
        return Yptell_Type'First; -- never actually gets here; for compiler only
    end Convert_Yptell_Type;



    function Pretty_Print( i : Ypthhc_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when none_or_almost_none => return "None or almost none";
             when under_1_hour => return "Under 1 hour";
             when s_1_2_hours => return "1-2 hours";
             when s_3_5_hours => return "3-5 hours";
             when s_6_hours_or_more => return "6 hours or more?";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypthhc_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypthhc_Type( i : String ) return Ypthhc_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return none_or_almost_none;
         elsif i = "2" then
            return under_1_hour;
         elsif i = "3" then
            return s_1_2_hours;
         elsif i = "4" then
            return s_3_5_hours;
         elsif i = "5" then
            return s_6_hours_or_more;
        end if;
        Put_Line("Convert_Ypthhc_Type: Unmatched string |" & i & "|" );
        return Ypthhc_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypthhc_Type;



    function Pretty_Print( i : Yptlkp_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when very_easy => return "Very easy";
             when quite_easy => return "Quite easy";
             when quite_difficult => return "Quite difficult";
             when very_difficult => return "Very difficult";
             when dont_have_a_mother => return "Don't have a mother";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Yptlkp_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Yptlkp_Type( i : String ) return Yptlkp_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return very_easy;
         elsif i = "2" then
            return quite_easy;
         elsif i = "3" then
            return quite_difficult;
         elsif i = "4" then
            return very_difficult;
         elsif i = "5" then
            return dont_have_a_mother;
        end if;
        Put_Line("Convert_Yptlkp_Type: Unmatched string |" & i & "|" );
        return Yptlkp_Type'First; -- never actually gets here; for compiler only
    end Convert_Yptlkp_Type;



    function Pretty_Print( i : Yptrun_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when never => return "Never";
             when once_or_twice => return "Once or twice";
             when several_times => return "Several times";
             when often => return "Often";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Yptrun_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Yptrun_Type( i : String ) return Yptrun_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return never;
         elsif i = "2" then
            return once_or_twice;
         elsif i = "3" then
            return several_times;
         elsif i = "4" then
            return often;
        end if;
        Put_Line("Convert_Yptrun_Type: Unmatched string |" & i & "|" );
        return Yptrun_Type'First; -- never actually gets here; for compiler only
    end Convert_Yptrun_Type;



    function Pretty_Print( i : Ypttsm_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when walk_all_the_way => return "Walk all the way";
             when ride_a_bike => return "Ride a bike";
             when by_bus_or_tube => return "By bus or tube";
             when by_car => return "By car";
             when by_train => return "By train";
             when some_other_way => return "Some other way";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypttsm_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypttsm_Type( i : String ) return Ypttsm_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return walk_all_the_way;
         elsif i = "2" then
            return ride_a_bike;
         elsif i = "3" then
            return by_bus_or_tube;
         elsif i = "4" then
            return by_car;
         elsif i = "5" then
            return by_train;
         elsif i = "6" then
            return some_other_way;
        end if;
        Put_Line("Convert_Ypttsm_Type: Unmatched string |" & i & "|" );
        return Ypttsm_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypttsm_Type;



    function Pretty_Print( i : Yputel_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when always => return "Always";
             when usually => return "Usually";
             when sometimes => return "Sometimes";
             when not_usually => return "Not usually";
             when never_go_out => return "Never go out";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Yputel_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Yputel_Type( i : String ) return Yputel_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return always;
         elsif i = "2" then
            return usually;
         elsif i = "3" then
            return sometimes;
         elsif i = "4" then
            return not_usually;
         elsif i = "5" then
            return never_go_out;
        end if;
        Put_Line("Convert_Yputel_Type: Unmatched string |" & i & "|" );
        return Yputel_Type'First; -- never actually gets here; for compiler only
    end Convert_Yputel_Type;



    function Pretty_Print( i : Ypvt11_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing_or_wild => return "Missing or wild";
             when join_the_euro => return "Join the Euro";
             when not_to_join_euro => return "Not to join Euro";
             when would_not_vote => return "Would not vote";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypvt11_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypvt11_Type( i : String ) return Ypvt11_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "1" then
            return join_the_euro;
         elsif i = "2" then
            return not_to_join_euro;
         elsif i = "3" then
            return would_not_vote;
        end if;
        Put_Line("Convert_Ypvt11_Type: Unmatched string |" & i & "|" );
        return Ypvt11_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypvt11_Type;



    function Pretty_Print( i : Ypvte3_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when conservative => return "Conservative";
             when none => return "None";
             when ulster_unionist => return "Ulster Unionist";
             when sdlp => return "SDLP";
             when alliance_party => return "Alliance Party";
             when democratic_unionist => return "Democratic Unionist";
             when sinn_fein => return "Sinn Fein";
             when other => return "Other";
             when labour => return "Labour";
             when liberal_democrat => return "Liberal Democrat";
             when green_party => return "Green Party";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypvte3_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypvte3_Type( i : String ) return Ypvte3_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return conservative;
         elsif i = "10" then
            return none;
         elsif i = "18" then
            return none;
         elsif i = "12" then
            return ulster_unionist;
         elsif i = "13" then
            return sdlp;
         elsif i = "14" then
            return alliance_party;
         elsif i = "15" then
            return democratic_unionist;
         elsif i = "16" then
            return sinn_fein;
         elsif i = "17" then
            return other;
         elsif i = "5" then
            return other;
         elsif i = "2" then
            return labour;
         elsif i = "3" then
            return liberal_democrat;
         elsif i = "4" then
            return green_party;
         elsif i = "6" then
            return green_party;
        end if;
        Put_Line("Convert_Ypvte3_Type: Unmatched string |" & i & "|" );
        return Ypvte3_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypvte3_Type;



    function Pretty_Print( i : Ypvte6_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when very_interested => return "Very interested";
             when fairly_interested => return "Fairly interested";
             when not_interested => return "Not interested";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypvte6_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypvte6_Type( i : String ) return Ypvte6_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return very_interested;
         elsif i = "2" then
            return fairly_interested;
         elsif i = "3" then
            return not_interested;
        end if;
        Put_Line("Convert_Ypvte6_Type: Unmatched string |" & i & "|" );
        return Ypvte6_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypvte6_Type;



    function Pretty_Print( i : Ypwghr_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when about_right_weight => return "About right weight";
             when underweight => return "Underweight";
             when slightly_overweight => return "Slightly overweight";
             when very_overweight => return "Very overweight";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypwghr_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypwghr_Type( i : String ) return Ypwghr_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return about_right_weight;
         elsif i = "2" then
            return underweight;
         elsif i = "3" then
            return slightly_overweight;
         elsif i = "4" then
            return very_overweight;
        end if;
        Put_Line("Convert_Ypwghr_Type: Unmatched string |" & i & "|" );
        return Ypwghr_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypwghr_Type;



    function Pretty_Print( i : Ypwkf_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when not_mentioned => return "Not mentioned";
             when friday => return "Friday";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypwkf_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypwkf_Type( i : String ) return Ypwkf_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return friday;
        end if;
        Put_Line("Convert_Ypwkf_Type: Unmatched string |" & i & "|" );
        return Ypwkf_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypwkf_Type;



    function Pretty_Print( i : Ypwkm_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when not_mentioned => return "Not mentioned";
             when monday => return "Monday";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypwkm_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypwkm_Type( i : String ) return Ypwkm_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return monday;
        end if;
        Put_Line("Convert_Ypwkm_Type: Unmatched string |" & i & "|" );
        return Ypwkm_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypwkm_Type;



    function Pretty_Print( i : Ypwksa_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when not_mentioned => return "Not mentioned";
             when saturday => return "Saturday";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypwksa_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypwksa_Type( i : String ) return Ypwksa_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return saturday;
        end if;
        Put_Line("Convert_Ypwksa_Type: Unmatched string |" & i & "|" );
        return Ypwksa_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypwksa_Type;



    function Pretty_Print( i : Ypwksu_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when not_mentioned => return "Not mentioned";
             when sunday => return "Sunday";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypwksu_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypwksu_Type( i : String ) return Ypwksu_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return sunday;
        end if;
        Put_Line("Convert_Ypwksu_Type: Unmatched string |" & i & "|" );
        return Ypwksu_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypwksu_Type;



    function Pretty_Print( i : Ypwkt_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when not_mentioned => return "Not mentioned";
             when tuesday => return "Tuesday";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypwkt_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypwkt_Type( i : String ) return Ypwkt_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return tuesday;
        end if;
        Put_Line("Convert_Ypwkt_Type: Unmatched string |" & i & "|" );
        return Ypwkt_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypwkt_Type;



    function Pretty_Print( i : Ypwkth_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when not_mentioned => return "Not mentioned";
             when thursday => return "Thursday";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypwkth_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypwkth_Type( i : String ) return Ypwkth_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return thursday;
        end if;
        Put_Line("Convert_Ypwkth_Type: Unmatched string |" & i & "|" );
        return Ypwkth_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypwkth_Type;



    function Pretty_Print( i : Ypwkw_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when not_mentioned => return "Not mentioned";
             when wednesday => return "Wednesday";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypwkw_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypwkw_Type( i : String ) return Ypwkw_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return wednesday;
        end if;
        Put_Line("Convert_Ypwkw_Type: Unmatched string |" & i & "|" );
        return Ypwkw_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypwkw_Type;



    function Pretty_Print( i : Ypwor_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when none => return "None";
             when s_1_2_nights => return "1-2 Nights";
             when s_3_5_nights => return "3-5 Nights";
             when s_6_7_nights => return "6-7 Nights";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ypwor_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ypwor_Type( i : String ) return Ypwor_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return none;
         elsif i = "2" then
            return s_1_2_nights;
         elsif i = "3" then
            return s_3_5_nights;
         elsif i = "4" then
            return s_6_7_nights;
        end if;
        Put_Line("Convert_Ypwor_Type: Unmatched string |" & i & "|" );
        return Ypwor_Type'First; -- never actually gets here; for compiler only
    end Convert_Ypwor_Type;



    function Pretty_Print( i : Yr2uk_Type ) return String is
    begin
         case i is
             when cant_remember => return "Can't remember";
             when refused => return "Refused";
             when proxy_respondent => return "Proxy respondent";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Yr2uk_Type ) return Boolean is
    begin
         case i is
             when cant_remember => return True;
             when refused => return True;
             when proxy_respondent => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Yr2uk_Type( i : String ) return Yr2uk_Type is
    begin
         if i = "-1" then
            return cant_remember;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_respondent;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
        end if;
        Put_Line("Convert_Yr2uk_Type: Unmatched string |" & i & "|" );
        return Yr2uk_Type'First; -- never actually gets here; for compiler only
    end Convert_Yr2uk_Type;



    function Pretty_Print( i : Yrtlat_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when improve_finances => return "Improve finances";
             when does_not_consider_retired_late => return "Does not consider retired late";
             when enjoyed_job => return "Enjoyed job";
             when no_alternatives => return "No alternatives";
             when keep_fit_active => return "Keep fit, active";
             when employer_persuaded => return "Employer persuaded";
             when couldnt_afford_it => return "Couldn't afford it";
             when same_time => return "Same time";
             when different_time => return "Different time";
             when other => return "Other";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Yrtlat_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Yrtlat_Type( i : String ) return Yrtlat_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return improve_finances;
         elsif i = "10" then
            return does_not_consider_retired_late;
         elsif i = "2" then
            return enjoyed_job;
         elsif i = "3" then
            return no_alternatives;
         elsif i = "4" then
            return keep_fit_active;
         elsif i = "5" then
            return employer_persuaded;
         elsif i = "6" then
            return couldnt_afford_it;
         elsif i = "7" then
            return same_time;
         elsif i = "8" then
            return different_time;
         elsif i = "9" then
            return other;
        end if;
        Put_Line("Convert_Yrtlat_Type: Unmatched string |" & i & "|" );
        return Yrtlat_Type'First; -- never actually gets here; for compiler only
    end Convert_Yrtlat_Type;



    function Pretty_Print( i : Yrtrly_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when proxy_and_or_phone => return "Proxy and or phone";
             when inapplicable => return "Inapplicable";
             when missing_or_wild => return "Missing or wild";
             when not_mentioned => return "Not mentioned";
             when own_ill_health => return "Own ill health";
             when different_time => return "Different time";
             when for_next_gen => return "For next gen";
             when other => return "Other";
             when does_not_consider_to_be_retired_early => return "Does not consider to be retired early";
             when ill_health_of_other => return "Ill health of other";
             when compulsorily => return "Compulsorily";
             when financial_deal => return "Financial deal";
             when no_other_job => return "No other job";
             when time_with_family => return "Time with family";
             when enjoy_life => return "Enjoy life";
             when needed_change => return "Needed change";
             when same_time => return "Same time";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Yrtrly_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when proxy_and_or_phone => return True;
             when inapplicable => return True;
             when missing_or_wild => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Yrtrly_Type( i : String ) return Yrtrly_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-7" then
            return proxy_and_or_phone;
         elsif i = "-8" then
            return inapplicable;
         elsif i = "-9" then
            return missing_or_wild;
         elsif i = "0" then
            return not_mentioned;
         elsif i = "1" then
            return own_ill_health;
         elsif i = "10" then
            return different_time;
         elsif i = "11" then
            return for_next_gen;
         elsif i = "12" then
            return other;
         elsif i = "13" then
            return does_not_consider_to_be_retired_early;
         elsif i = "2" then
            return ill_health_of_other;
         elsif i = "3" then
            return compulsorily;
         elsif i = "4" then
            return financial_deal;
         elsif i = "5" then
            return no_other_job;
         elsif i = "6" then
            return time_with_family;
         elsif i = "7" then
            return enjoy_life;
         elsif i = "8" then
            return needed_change;
         elsif i = "9" then
            return same_time;
        end if;
        Put_Line("Convert_Yrtrly_Type: Unmatched string |" & i & "|" );
        return Yrtrly_Type'First; -- never actually gets here; for compiler only
    end Convert_Yrtrly_Type;



    function Pretty_Print( i : Ytvhrs_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when none_or_less_than_hour => return "None/Less than hour";
             when s_1_3 => return "1 - 3";
             when s_4_6 => return "4 - 6";
             when s_7_or_more => return "7 or more";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ytvhrs_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ytvhrs_Type( i : String ) return Ytvhrs_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return none_or_less_than_hour;
         elsif i = "2" then
            return s_1_3;
         elsif i = "3" then
            return s_4_6;
         elsif i = "4" then
            return s_7_or_more;
        end if;
        Put_Line("Convert_Ytvhrs_Type: Unmatched string |" & i & "|" );
        return Ytvhrs_Type'First; -- never actually gets here; for compiler only
    end Convert_Ytvhrs_Type;



    function Pretty_Print( i : Ytvlmt_Type ) return String is
    begin
         case i is
             when dont_know => return "Don't know";
             when refused => return "Refused";
             when not_applicable => return "Not applicable";
             when missing => return "Missing";
             when yes => return "Yes";
             when no => return "No";
             when dont_own_a_tv => return "Don't own a TV";
         end case;
    end Pretty_Print;

    function Null_Or_Missing( i : Ytvlmt_Type ) return Boolean is
    begin
         case i is
             when dont_know => return True;
             when refused => return True;
             when not_applicable => return True;
             when missing => return True;
             when Others => return False;
         end case;
    end Null_Or_Missing;

    function Convert_Ytvlmt_Type( i : String ) return Ytvlmt_Type is
    begin
         if i = "-1" then
            return dont_know;
         elsif i = "-2" then
            return refused;
         elsif i = "-8" then
            return not_applicable;
         elsif i = "-9" then
            return missing;
         elsif i = "1" then
            return yes;
         elsif i = "2" then
            return no;
         elsif i = "3" then
            return dont_own_a_tv;
        end if;
        Put_Line("Convert_Ytvlmt_Type: Unmatched string |" & i & "|" );
        return Ytvlmt_Type'First; -- never actually gets here; for compiler only
    end Convert_Ytvlmt_Type;



end BHPS_Enums;